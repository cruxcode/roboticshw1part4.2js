(()=>{var __webpack_modules__={879:function(__unused_webpack_module,exports,__webpack_require__){(function(){var $,ABS,ADD,ADJ,AND,APPROXRATIO,ARCCOS,ARCCOSH,ARCSIN,ARCSINH,ARCTAN,ARCTANH,ARG,ASSUME_REAL_VARIABLES,ATOMIZE,AUTOEXPAND,BAKE,BESSELJ,BESSELY,BINDING,BINOMIAL,BINOM_check_args,BUF,C1,C2,C3,C4,C5,C6,CEILING,CHECK,CHOOSE,CIRCEXP,CLEAR,CLEARALL,CLEARPATTERNS,CLOCK,COEFF,COFACTOR,CONDENSE,CONJ,CONS,CONTRACT,COS,COSH,Condense,DEBUG,DEBUG_ABS,DEBUG_ARG,DEBUG_CLOCKFORM,DEBUG_IMAG,DEBUG_IS,DEBUG_POWER,DEBUG_RECT,DECOMP,DEFINT,DEGREE,DENOMINATOR,DERIVATIVE,DET,DET_check_arg,DIM,DIRAC,DIVISORS,DO,DOT,DOUBLE,DRAW,DRAWX,DSOLVE,E,EIGEN,EIGENVAL,EIGENVEC,EIG_N,EIG_check_arg,EIG_yydd,EIG_yyqq,ERF,ERFC,EVAL,EXP,EXPAND,EXPCOS,EXPSIN,Eval,Eval_Eval,Eval_abs,Eval_add,Eval_adj,Eval_and,Eval_approxratio,Eval_arccos,Eval_arccosh,Eval_arcsin,Eval_arcsinh,Eval_arctan,Eval_arctanh,Eval_arg,Eval_besselj,Eval_bessely,Eval_binding,Eval_binomial,Eval_ceiling,Eval_check,Eval_choose,Eval_circexp,Eval_clear,Eval_clearall,Eval_clearpatterns,Eval_clock,Eval_coeff,Eval_cofactor,Eval_condense,Eval_conj,Eval_cons,Eval_contract,Eval_cos,Eval_cosh,Eval_decomp,Eval_defint,Eval_degree,Eval_denominator,Eval_derivative,Eval_det,Eval_dim,Eval_dirac,Eval_divisors,Eval_do,Eval_dsolve,Eval_eigen,Eval_eigenval,Eval_eigenvec,Eval_erf,Eval_erfc,Eval_exp,Eval_expand,Eval_expcos,Eval_expsin,Eval_factor,Eval_factorial,Eval_factorpoly,Eval_filter,Eval_float,Eval_floor,Eval_for,Eval_function_reference,Eval_gamma,Eval_gcd,Eval_hermite,Eval_hilbert,Eval_imag,Eval_index,Eval_inner,Eval_integral,Eval_inv,Eval_invg,Eval_isinteger,Eval_isprime,Eval_laguerre,Eval_lcm,Eval_leading,Eval_legendre,Eval_log,Eval_lookup,Eval_mod,Eval_multiply,Eval_noexpand,Eval_not,Eval_nroots,Eval_number,Eval_numerator,Eval_operator,Eval_or,Eval_outer,Eval_pattern,Eval_patternsinfo,Eval_polar,Eval_power,Eval_predicate,Eval_prime,Eval_print,Eval_print2dascii,Eval_printcomputer,Eval_printhuman,Eval_printlatex,Eval_printlist,Eval_product,Eval_quote,Eval_quotient,Eval_rank,Eval_rationalize,Eval_real,Eval_rect,Eval_roots,Eval_round,Eval_setq,Eval_sgn,Eval_shape,Eval_silentpattern,Eval_simfac,Eval_simplify,Eval_sin,Eval_sinh,Eval_sqrt,Eval_stop,Eval_subst,Eval_sum,Eval_sym,Eval_symbolsinfo,Eval_tan,Eval_tanh,Eval_taylor,Eval_tensor,Eval_test,Eval_testeq,Eval_testge,Eval_testgt,Eval_testle,Eval_testlt,Eval_transpose,Eval_unit,Eval_user_function,Eval_zero,Evalpoly,FACTOR,FACTORIAL,FACTORPOLY,FILTER,FLOATF,FLOOR,FOR,FORCE_FIXED_PRINTOUT,FUNCTION,Find,GAMMA,GCD,HERMITE,HILBERT,IMAG,INDEX,INNER,INTEGRAL,INV,INVG,INV_check_arg,INV_decomp,ISINTEGER,ISPRIME,LAGUERRE,LAST,LAST_2DASCII_PRINT,LAST_FULL_PRINT,LAST_LATEX_PRINT,LAST_LIST_PRINT,LAST_PLAIN_PRINT,LAST_PRINT,LCM,LEADING,LEGENDRE,LOG,LOOKUP,M,MAXDIM,MAXPRIMETAB,MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES,MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE,MAX_FIXED_PRINTOUT_DIGITS,MAX_PROGRAM_SIZE,MEQUAL,METAA,METAB,METAX,MLENGTH,MOD,MSIGN,MULTIPLY,MZERO,N,NIL,NOT,NROOTS,NROOTS_ABS,NROOTS_DELTA,NROOTS_EPSILON,NROOTS_RANDOM,NROOTS_YMAX,NROOTS_divpoly,NSYM,NUM,NUMBER,NUMERATOR,OPERATOR,OR,OUTER,PATTERN,PATTERNSINFO,PI,POLAR,POWER,PRIME,PRINT,PRINT2DASCII,PRINTFULL,PRINTLATEX,PRINTLIST,PRINTMODE_2DASCII,PRINTMODE_COMPUTER,PRINTMODE_HUMAN,PRINTMODE_LATEX,PRINTMODE_LIST,PRINTOUTRESULT,PRINTPLAIN,PRINT_LEAVE_E_ALONE,PRINT_LEAVE_X_ALONE,PRODUCT,QUOTE,QUOTIENT,RANK,RATIONALIZE,REAL,ROOTS,ROUND,SECRETX,SELFTEST,SETQ,SGN,SHAPE,SILENTPATTERN,SIMPLIFY,SIN,SINH,SPACE_BETWEEN_COLUMNS,SPACE_BETWEEN_ROWS,SQRT,STOP,STR,SUBST,SUM,SYM,SYMBOLSINFO,SYMBOL_A,SYMBOL_A_UNDERSCORE,SYMBOL_B,SYMBOL_B_UNDERSCORE,SYMBOL_C,SYMBOL_D,SYMBOL_I,SYMBOL_IDENTITY_MATRIX,SYMBOL_J,SYMBOL_N,SYMBOL_R,SYMBOL_S,SYMBOL_T,SYMBOL_X,SYMBOL_X_UNDERSCORE,SYMBOL_Y,SYMBOL_Z,TAN,TANH,TAYLOR,TENSOR,TEST,TESTEQ,TESTGE,TESTGT,TESTLE,TESTLT,TIMING_DEBUGS,TOS,TRACE,TRANSPOSE,T_DOUBLE,T_EQ,T_FUNCTION,T_GTEQ,T_INTEGER,T_LTEQ,T_NEQ,T_NEWLINE,T_QUOTASSIGN,T_STRING,T_SYMBOL,U,UNIT,USR_SYMBOLS,VERSION,YMAX,YYE,YYRECT,ZERO,__emit_char,__emit_str,__factor_add,__factorial,__is_negative,__is_radical_number,__lcm,__legendre,__legendre2,__legendre3,__normalize_radical_factors,__rationalize_tensor,_print,abs,absValFloat,absval,absval_tensor,add,addSymbolLeftOfAssignment,addSymbolRightOfAssignment,add_all,add_factor_to_accumulator,add_numbers,add_terms,addf,adj,alloc_tensor,allocatedId,any_denominators,approxAll,approxLogs,approxLogsOfRationals,approxOneRatioOnly,approxRadicals,approxRadicalsOfRationals,approxRationalsOfLogs,approxRationalsOfPowersOfE,approxRationalsOfPowersOfPI,approxRationalsOfRadicals,approxSineOfRationalMultiplesOfPI,approxSineOfRationals,approxTrigonometric,approx_just_an_integer,approx_logarithmsOfRationals,approx_nothingUseful,approx_radicalOfRatio,approx_ratioOfRadical,approx_rationalOfE,approx_rationalOfPi,approx_rationalsOfLogarithms,approx_sine_of_pi_times_rational,approx_sine_of_rational,approxratioRecursive,arccos,arccosh,arcsin,arcsinh,arctan,arctanh,areunivarpolysfactoredorexpandedform,arg,arglist,assignmentFound,avoidCalculatingPowersIntoArctans,bake,bake_poly,bake_poly_term,besselj,bessely,bigInt,bignum_factorial,bignum_float,bignum_power_number,bignum_scan_float,bignum_scan_integer,bignum_truncate,binding,binomial,buffer,build_tensor,caaddr,caadr,caar,cadaddr,cadadr,cadar,caddaddr,caddadr,caddar,caddddr,cadddr,caddr,cadr,called_from_Algebra_block,car,cdaddr,cdadr,cdar,cddaddr,cddar,cdddaddr,cddddr,cdddr,cddr,cdr,ceiling,chainOfUserSymbolsNotFunctionsBeingEvaluated,charTabIndex,chartab,checkFloatHasWorkedOutCompletely,check_esc_flag,check_stack,check_tensor_dimensions,choose,choose_check_args,circexp,clearAlgebraEnvironment,clearRenamedVariablesToAvoidBindingToExternalScope,clear_symbols,clear_term,clearall,clockform,cmpGlyphs,cmp_args,cmp_expr,cmp_terms,cmp_terms_count,codeGen,coeff,cofactor,collectLatexStringFromReturnValue,collectUserSymbols,combine_factors,combine_gammas,combine_terms,compareState,compare_numbers,compare_rationals,compare_tensors,compatible,computeDependenciesFromAlgebra,computeResultsAndJavaScriptFromAlgebra,compute_fa,conjugate,cons,consCount,contract,convert_bignum_to_double,convert_rational_to_double,copy_tensor,cosine,cosine_of_angle,cosine_of_angle_sum,count,countOccurrencesOfSymbol,count_denominators,counter,countsize,d_scalar_scalar,d_scalar_scalar_1,d_scalar_tensor,d_tensor_scalar,d_tensor_tensor,dabs,darccos,darccosh,darcsin,darcsinh,darctan,darctanh,dbesselj0,dbesseljn,dbessely0,dbesselyn,dcos,dcosh,dd,decomp,decomp_product,decomp_sum,defineSomeHandyConstants,define_user_function,defn,defn_str,degree,denominator,derf,derfc,derivative,derivative_of_integral,det,determinant,detg,dfunction,dhermite,dirac,display,display_flag,displaychar,divide,divide_numbers,divisors,divisors_onstack,divpoly,dlog,do_clearPatterns,do_clearall,do_simplify_nested_radicals,dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication,dotprod_unicode,doubleToReasonableString,dpow,dpower,dproduct,draw_flag,draw_stop_return,dsgn,dsin,dsinh,dsum,dtan,dtanh,dupl,eigen,elelmIndex,elem,emit_denominator,emit_denominators,emit_expr,emit_factor,emit_factorial_function,emit_flat_tensor,emit_fraction,emit_function,emit_index_function,emit_multiply,emit_number,emit_numerators,emit_numerical_fraction,emit_power,emit_string,emit_subexpr,emit_symbol,emit_tensor,emit_tensor_inner,emit_term,emit_top_expr,emit_unsigned_expr,emit_x,equal,equaln,equalq,erfc,errorMessage,esc_flag,evaluatingAsFloats,evaluatingPolar,exec,expand,expand_get_A,expand_get_AF,expand_get_B,expand_get_C,expand_get_CF,expand_tensor,expanding,expcos,exponential,expr_level,expsin,f1,f10,f2,f3,f4,f5,f9,f_equals_a,factor,factor_a,factor_again,factor_b,factor_number,factor_small_number,factor_term,factorial,factorpoly,factors,factpoly_expo,fill_buf,filter,filter_main,filter_sum,filter_tensor,findDependenciesInScript,findPossibleClockForm,findPossibleExponentialForm,findroot,fixup_fraction,fixup_power,flag,floatToRatioRoutine,fmt_index,fmt_level,fmt_x,frame,freeze,functionInvokationsScanningStack,gamma,gamma_of_sum,gammaf,gcd,gcd_main,gcd_numbers,gcd_polys,gcd_powers_with_same_base,gcd_product_product,gcd_product_sum,gcd_sum,gcd_sum_product,gcd_sum_sum,gen,getSimpleRoots,getStateHash,get_binding,get_factor_from_complex_root,get_factor_from_real_root,get_innerprod_factors,get_next_token,get_printname,get_size,get_token,getdisplaystr,glyph,gp,guess,hasImaginaryCoeff,hasNegativeRationalExponent,hash_addition,hash_function,hash_multiplication,hash_power,hashcode_values,hashed_itab,hermite,hilbert,i1,imag,imaginaryunit,index_function,init,initNRoots,inited,inner,inner_f,input_str,integral,integral_of_form,integral_of_product,integral_of_sum,inv,inverse,invert_number,invg,isNumberOneOverSomething,isNumericAtom,isNumericAtomOrTensor,isSimpleRoot,isSmall,isSymbolLeftOfAssignment,isSymbolReclaimable,isZeroAtom,isZeroAtomOrTensor,isZeroLikeOrNonZeroLikeOrUndetermined,isZeroTensor,is_denominator,is_factor,is_small_integer,is_square_matrix,is_usr_symbol,isadd,isalnumorunderscore,isalpha,isalphaOrUnderscore,iscomplexnumber,iscomplexnumberdouble,iscons,isdenominator,isdigit,isdouble,iseveninteger,isfactor,isfactorial,isfloating,isfraction,isidentitymatrix,isimaginarynumber,isimaginarynumberdouble,isimaginaryunit,isinnerordot,isinteger,isintegerfactor,isintegerorintegerfloat,isinv,iskeyword,isminusone,isminusoneoversqrttwo,isminusoneovertwo,ismultiply,isnegative,isnegativenumber,isnegativeterm,isnonnegativeinteger,isnpi,isone,isoneover,isoneoversqrttwo,isoneovertwo,isplusone,isplustwo,ispolyexpandedform,ispolyexpandedform_expr,ispolyexpandedform_factor,ispolyexpandedform_term,ispolyfactoredorexpandedform,ispolyfactoredorexpandedform_factor,ispolyfactoredorexpandedform_power,isposint,ispositivenumber,ispower,isquarterturn,isrational,isspace,isstr,issymbol,issymbolic,istensor,istranspose,isunderscore,isunivarpolyfactoredorexpandedform,itab,italu_hashcode,j1,laguerre,laguerre2,lastFoundSymbol,latexErrorSign,lcm,leading,legendre,length,lessp,level,list,listLength,logarithm,logbuf,lookupsTotal,lu_decomp,madd,makePositive,makeSignSameAs,make_hashed_itab,mask,mcmp,mcmpint,mdiv,mdivrem,meta_mode,mgcd,mini_solve,mint,mmod,mmul,mod,monic,move,moveTos,mp_clr_bit,mp_denominator,mp_numerator,mp_set_bit,mpow,mprime,mroot,mshiftright,msub,mtotal,multinomial_sum,multiply,multiply_all,multiply_all_noexpand,multiply_consecutive_constants,multiply_denominators,multiply_denominators_factor,multiply_denominators_term,multiply_noexpand,multiply_numbers,n_factor_number,negate,negate_expand,negate_noexpand,negate_number,new_string,newline_flag,nil_symbols,normaliseDots,normalisedCoeff,normalize_angle,nroots_a,nroots_b,nroots_c,nroots_df,nroots_dx,nroots_fa,nroots_fb,nroots_x,nroots_y,nterms,nthCadr,numerator,numericRootOfPolynomial,o,one,oneElement,one_as_double,out_buf,out_count,out_of_memory,outer,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,parse,parse_internal,parse_p1,parse_p2,parse_time_simplifications,partition,patternHasBeenFound,patternsinfo,peek,performing_roots,polar,polarRectAMinusOneBase,polycoeff,polyform,pop,pop_double,pop_frame,pop_integer,power,power_str,power_sum,power_tensor,predefinedSymbolsInGlobalScope_doNotTrackInDependencies,prime,primetab,print2dascii,printMode,print_ABS_latex,print_ARCCOS_codegen,print_ARCSIN_codegen,print_ARCTAN_codegen,print_BINOMIAL_latex,print_COS_codegen,print_DEFINT_latex,print_DOT_codegen,print_DOT_latex,print_DO_codegen,print_FOR_codegen,print_INV_codegen,print_INV_latex,print_PRODUCT_codegen,print_PRODUCT_latex,print_SETQ_codegen,print_SIN_codegen,print_SQRT_latex,print_SUM_codegen,print_SUM_latex,print_TAN_codegen,print_TESTEQ_latex,print_TESTGE_latex,print_TESTGT_latex,print_TESTLE_latex,print_TESTLT_latex,print_TEST_codegen,print_TEST_latex,print_TRANSPOSE_codegen,print_TRANSPOSE_latex,print_UNIT_codegen,print_a_over_b,print_base,print_base_of_denom,print_char,print_denom,print_double,print_expo_of_denom,print_exponent,print_expr,print_factor,print_factorial_function,print_glyphs,print_index_function,print_list,print_multiply_sign,print_number,print_power,print_str,print_subexpr,print_tensor,print_tensor_inner,print_tensor_inner_latex,print_tensor_latex,print_term,printchar,printchar_nowrap,printline,program_buf,promote_tensor,push,pushTryNotToDuplicate,push_cars,push_double,push_factor,push_frame,push_identity_matrix,push_integer,push_rational,push_symbol,push_term_factors,push_terms,push_zero_matrix,qadd,qdiv,qmul,qpow,qpowf,quickfactor,quickpower,rational,rationalize,rationalize_coefficients,real,reciprocate,rect,recursionLevelNestedRadicalsRemoval,recursiveDependencies,ref,ref1,rememberPrint,remove_negative_exponents,reset_after_error,restore,restoreMetaBindings,rewrite_args,rewrite_args_tensor,roots,roots2,roots3,run,runUserDefinedSimplifications,save,saveMetaBindings,scalar_times_tensor,scan,scan_error,scan_expression,scan_factor,scan_function_call_with_function_name,scan_function_call_without_function_name,scan_index,scan_meta,scan_power,scan_relation,scan_stmt,scan_str,scan_string,scan_subexpr,scan_symbol,scan_tensor,scan_term,scanned,scanningParameters,setM,setSignTo,set_binding,set_component,setq_indexed,sfac_product,sfac_product_f,sgn,shape,show_power_debug,sign,sign_of_term,simfac,simfac_term,simpleComplexityMeasure,simplify,simplifyForCodeGeneration,simplify_1_in_products,simplify_main,simplify_nested_radicals,simplify_polar,simplify_polarRect,simplify_rational_expressions,simplify_rectToClock,simplify_tensor,simplify_trig,simplifyfactorials,sine,sine_of_angle,sine_of_angle_sum,skipRootVariableToBeSolved,sort_stack,square,ssqrt,stack,stackAddsCount,std_symbol,step,step2,stop,strcmp,stringsEmittedByUserPrintouts,subf,subst,subtract,subtract_numbers,swap,symbol,symbolsDependencies,symbolsHavingReassignments,symbolsInExpressionsWithoutAssignments,symbolsLeftOfAssignment,symbolsRightOfAssignment,symbolsinfo,symnum,symtab,take_care_of_nested_radicals,tangent,taylor,tensor,tensor_plus_tensor,tensor_times_scalar,testApprox,test_flag,text_metric,theRandom,token,token_buf,token_str,top,top_level_eval,tos,transform,transpose,transpose_unicode,trigmode,trivial_divide,try_kth_prime,turnErrorMessageToLatex,ucmp,unfreeze,unique,unique_f,update_token_buf,userSimplificationsInListForm,userSimplificationsInStringForm,usr_symbol,verbosing,version,will_be_displayed_as_fraction,ybinomial,ycosh,ydirac,yerf,yerfc,yfloor,yindex,yround,ysinh,yyarg,yybesselj,yybessely,yyceiling,yycondense,yycontract,yycosh,yydegree,yydetg,yydivpoly,yyerf,yyerfc,yyexpand,yyfactorpoly,yyfloat,yyfloor,yyhermite,yyhermite2,yyinvg,yylcm,yylog,yymultiply,yyouter,yypower,yyrationalize,yyround,yysgn,yysimfac,yysinh,yytangent,zero,zzfloat,hasProp={}.hasOwnProperty;for(bigInt=__webpack_require__(736),version="1.3.1",SELFTEST=1,NSYM=1e3,DEBUG=!1,PRINTOUTRESULT=!1,PRINTMODE_LATEX="PRINTMODE_LATEX",PRINTMODE_2DASCII="PRINTMODE_2DASCII",PRINTMODE_COMPUTER="PRINTMODE_COMPUTER",PRINTMODE_HUMAN="PRINTMODE_HUMAN",PRINTMODE_LIST="PRINTMODE_LIST",printMode=PRINTMODE_COMPUTER,dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication=!0,recursionLevelNestedRadicalsRemoval=0,do_simplify_nested_radicals=!0,avoidCalculatingPowersIntoArctans=!0,rational=function(){class r{}return r.prototype.a=null,r.prototype.b=null,r}.call(this),U=function(){class r{toString(){return print_expr(this)}toLatexString(){return collectLatexStringFromReturnValue(this)}constructor(){this.cons={},this.cons.car=null,this.cons.cdr=null,this.q=new rational}}return r.prototype.cons=null,r.prototype.printname="",r.prototype.str="",r.prototype.tensor=null,r.prototype.q=null,r.prototype.d=0,r.prototype.k=0,r.prototype.tag=0,r}.call(this),errorMessage="",CONS=0,NUM=1,DOUBLE=2,STR=3,TENSOR=4,SYM=5,counter=0,ABS=counter++,ADD=counter++,ADJ=counter++,AND=counter++,APPROXRATIO=counter++,ARCCOS=counter++,ARCCOSH=counter++,ARCSIN=counter++,ARCSINH=counter++,ARCTAN=counter++,ARCTANH=counter++,ARG=counter++,ATOMIZE=counter++,BESSELJ=counter++,BESSELY=counter++,BINDING=counter++,BINOMIAL=counter++,CEILING=counter++,CHECK=counter++,CHOOSE=counter++,CIRCEXP=counter++,CLEAR=counter++,CLEARALL=counter++,CLEARPATTERNS=counter++,CLOCK=counter++,COEFF=counter++,COFACTOR=counter++,CONDENSE=counter++,CONJ=counter++,CONTRACT=counter++,COS=counter++,COSH=counter++,DECOMP=counter++,DEFINT=counter++,DEGREE=counter++,DENOMINATOR=counter++,DERIVATIVE=counter++,DET=counter++,DIM=counter++,DIRAC=counter++,DIVISORS=counter++,DO=counter++,DOT=counter++,DRAW=counter++,DSOLVE=counter++,EIGEN=counter++,EIGENVAL=counter++,EIGENVEC=counter++,ERF=counter++,ERFC=counter++,EVAL=counter++,EXP=counter++,EXPAND=counter++,EXPCOS=counter++,EXPSIN=counter++,FACTOR=counter++,FACTORIAL=counter++,FACTORPOLY=counter++,FILTER=counter++,FLOATF=counter++,FLOOR=counter++,FOR=counter++,FUNCTION=counter++,GAMMA=counter++,GCD=counter++,HERMITE=counter++,HILBERT=counter++,IMAG=counter++,INDEX=counter++,INNER=counter++,INTEGRAL=counter++,INV=counter++,INVG=counter++,ISINTEGER=counter++,ISPRIME=counter++,LAGUERRE=counter++,LCM=counter++,LEADING=counter++,LEGENDRE=counter++,LOG=counter++,LOOKUP=counter++,MOD=counter++,MULTIPLY=counter++,NOT=counter++,NROOTS=counter++,NUMBER=counter++,NUMERATOR=counter++,OPERATOR=counter++,OR=counter++,OUTER=counter++,PATTERN=counter++,PATTERNSINFO=counter++,POLAR=counter++,POWER=counter++,PRIME=counter++,PRINT_LEAVE_E_ALONE=counter++,PRINT_LEAVE_X_ALONE=counter++,PRINT=counter++,PRINT2DASCII=counter++,PRINTFULL=counter++,PRINTLATEX=counter++,PRINTLIST=counter++,PRINTPLAIN=counter++,PRODUCT=counter++,QUOTE=counter++,QUOTIENT=counter++,RANK=counter++,RATIONALIZE=counter++,REAL=counter++,ROUND=counter++,YYRECT=counter++,ROOTS=counter++,SETQ=counter++,SGN=counter++,SILENTPATTERN=counter++,SIMPLIFY=counter++,SIN=counter++,SINH=counter++,SHAPE=counter++,SQRT=counter++,STOP=counter++,SUBST=counter++,SUM=counter++,SYMBOLSINFO=counter++,TAN=counter++,TANH=counter++,TAYLOR=counter++,TEST=counter++,TESTEQ=counter++,TESTGE=counter++,TESTGT=counter++,TESTLE=counter++,TESTLT=counter++,TRANSPOSE=counter++,UNIT=counter++,ZERO=counter++,NIL=counter++,LAST=counter++,LAST_PRINT=counter++,LAST_2DASCII_PRINT=counter++,LAST_FULL_PRINT=counter++,LAST_LATEX_PRINT=counter++,LAST_LIST_PRINT=counter++,LAST_PLAIN_PRINT=counter++,AUTOEXPAND=counter++,BAKE=counter++,ASSUME_REAL_VARIABLES=counter++,TRACE=counter++,FORCE_FIXED_PRINTOUT=counter++,MAX_FIXED_PRINTOUT_DIGITS=counter++,YYE=counter++,DRAWX=counter++,METAA=counter++,METAB=counter++,METAX=counter++,SECRETX=counter++,VERSION=counter++,PI=counter++,SYMBOL_A=counter++,SYMBOL_B=counter++,SYMBOL_C=counter++,SYMBOL_D=counter++,SYMBOL_I=counter++,SYMBOL_J=counter++,SYMBOL_N=counter++,SYMBOL_R=counter++,SYMBOL_S=counter++,SYMBOL_T=counter++,SYMBOL_X=counter++,SYMBOL_Y=counter++,SYMBOL_Z=counter++,SYMBOL_IDENTITY_MATRIX=counter++,SYMBOL_A_UNDERSCORE=counter++,SYMBOL_B_UNDERSCORE=counter++,SYMBOL_X_UNDERSCORE=counter++,C1=counter++,C2=counter++,C3=counter++,C4=counter++,C5=counter++,C6=counter++,USR_SYMBOLS=counter++,E=YYE,TOS=1e5,BUF=1e4,MAX_PROGRAM_SIZE=100001,MAXPRIMETAB=1e4,MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES=5,MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE=10,MAXDIM=24,symbolsDependencies={},symbolsHavingReassignments=[],symbolsInExpressionsWithoutAssignments=[],patternHasBeenFound=!1,predefinedSymbolsInGlobalScope_doNotTrackInDependencies=["rationalize","abs","e","i","pi","sin","ceiling","cos","roots","integral","derivative","defint","sqrt","eig","cov","deig","dcov","float","floor","product","root","round","sum","test","unit"],parse_time_simplifications=!0,chainOfUserSymbolsNotFunctionsBeingEvaluated=[],stringsEmittedByUserPrintouts="",called_from_Algebra_block=!1,tensor=function(){class r{constructor(){this.dim=function(){var r,e,t;for(t=[],r=0,e=MAXDIM;0<=e?r<=e:r>=e;0<=e?r++:r--)t.push(0);return t}(),this.elem=[]}}return r.prototype.ndim=0,r.prototype.dim=null,r.prototype.nelem=0,r.prototype.elem=null,r}.call(this),display=function(){class r{}return r.prototype.h=0,r.prototype.w=0,r.prototype.n=0,r.prototype.a=[],r}.call(this),text_metric=function(){class r{}return r.prototype.ascent=0,r.prototype.descent=0,r.prototype.width=0,r}.call(this),tos=0,expanding=0,evaluatingAsFloats=0,evaluatingPolar=0,fmt_x=0,fmt_index=0,fmt_level=0,verbosing=0,primetab=function(){var r,e,t,o;for(o=[2],e=3;o.length<MAXPRIMETAB;){for(t=0,r=Math.sqrt(e);t<o.length&&o[t]<=r;){if(e%o[t]==0){t=-1;break}t++}-1!==t&&o.push(e),e+=2}return o[MAXPRIMETAB]=0,o}(),esc_flag=0,draw_flag=0,mtotal=0,trigmode=0,logbuf="",program_buf="",symtab=[],binding=[],isSymbolReclaimable=[],arglist=[],stack=[],frame=0,p0=null,p1=null,p2=null,p3=null,p4=null,p5=null,p6=null,p7=null,p8=null,p9=null,zero=null,one=null,one_as_double=null,imaginaryunit=null,out_buf="",out_count=0,test_flag=0,codeGen=!1,draw_stop_return=null,userSimplificationsInListForm=[],userSimplificationsInStringForm=[],transpose_unicode=7488,dotprod_unicode=183,symbol=function(r){return symtab[r]},iscons=function(r){return r.k===CONS},isrational=function(r){return r.k===NUM},isdouble=function(r){return r.k===DOUBLE},isNumericAtom=function(r){return isrational(r)||isdouble(r)},isstr=function(r){return r.k===STR},istensor=function(r){if(null!=r)return r.k===TENSOR},isNumericAtomOrTensor=function(r){var e,t,o,s,n;if(isNumericAtom(r)||r===symbol(SYMBOL_IDENTITY_MATRIX))return 1;if(!istensor(r)&&!isNumericAtom(r))return 0;for(o=r.tensor.nelem,e=r.tensor.elem,t=s=0,n=o;0<=n?s<n:s>n;t=0<=n?++s:--s)if(!isNumericAtomOrTensor(e[t]))return 0;return 1},issymbol=function(r){return r.k===SYM},iskeyword=function(r){return issymbol(r)&&symnum(r)<NIL},car=function(r){return iscons(r)?r.cons.car:symbol(NIL)},cdr=function(r){return iscons(r)?r.cons.cdr:symbol(NIL)},caar=function(r){return car(car(r))},cadr=function(r){return car(cdr(r))},cdar=function(r){return cdr(car(r))},cddr=function(r){return cdr(cdr(r))},caadr=function(r){return car(car(cdr(r)))},caddr=function(r){return car(cdr(cdr(r)))},cadar=function(r){return car(cdr(car(r)))},cdadr=function(r){return cdr(car(cdr(r)))},cddar=function(r){return cdr(cdr(car(r)))},cdddr=function(r){return cdr(cdr(cdr(r)))},caaddr=function(r){return car(car(cdr(cdr(r))))},cadadr=function(r){return car(cdr(car(cdr(r))))},caddar=function(r){return car(cdr(cdr(car(r))))},cdaddr=function(r){return cdr(car(cdr(cdr(r))))},cadddr=function(r){return car(cdr(cdr(cdr(r))))},cddddr=function(r){return cdr(cdr(cdr(cdr(r))))},caddddr=function(r){return car(cdr(cdr(cdr(cdr(r)))))},cadaddr=function(r){return car(cdr(car(cdr(cdr(r)))))},cddaddr=function(r){return cdr(cdr(car(cdr(cdr(r)))))},caddadr=function(r){return car(cdr(cdr(car(cdr(r)))))},cdddaddr=function(r){return cdr(cdr(cdr(car(cdr(cdr(r))))))},caddaddr=function(r){return car(cdr(cdr(car(cdr(cdr(r))))))},listLength=function(r){var e;for(e=-1;iscons(r);)r=cdr(r),e++;return e},nthCadr=function(r,e){var t;for(t=0;t<=e;)r=cdr(r),t++;return car(r)},isadd=function(r){return car(r)===symbol(ADD)},ismultiply=function(r){return car(r)===symbol(MULTIPLY)},ispower=function(r){return car(r)===symbol(POWER)},isfactorial=function(r){return car(r)===symbol(FACTORIAL)},isinnerordot=function(r){return car(r)===symbol(INNER)||car(r)===symbol(DOT)},istranspose=function(r){return car(r)===symbol(TRANSPOSE)},isinv=function(r){return car(r)===symbol(INV)},isidentitymatrix=function(r){return r===symbol(SYMBOL_IDENTITY_MATRIX)},MSIGN=function(r){return r.isPositive()?1:r.isZero()?0:-1},MLENGTH=function(r){return r.toString().length},MZERO=function(r){return r.isZero()},MEQUAL=function(r,e){return r.equals(e)},reset_after_error=function(){return moveTos(0),esc_flag=0,draw_flag=0,frame=TOS,evaluatingAsFloats=0,evaluatingPolar=0},$=null!==exports?exports:this,$.version=version,$.isadd=isadd,$.ismultiply=ismultiply,$.ispower=ispower,$.isfactorial=isfactorial,$.car=car,$.cdr=cdr,$.caar=caar,$.cadr=cadr,$.cdar=cdar,$.cddr=cddr,$.caadr=caadr,$.caddr=caddr,$.cadar=cadar,$.cdadr=cdadr,$.cddar=cddar,$.cdddr=cdddr,$.caaddr=caaddr,$.cadadr=cadadr,$.caddar=caddar,$.cdaddr=cdaddr,$.cadddr=cadddr,$.cddddr=cddddr,$.caddddr=caddddr,$.cadaddr=cadaddr,$.cddaddr=cddaddr,$.caddadr=caddadr,$.cdddaddr=cdddaddr,$.caddaddr=caddaddr,$.symbol=symbol,$.iscons=iscons,$.isrational=isrational,$.isdouble=isdouble,$.isNumericAtom=isNumericAtom,$.isstr=isstr,$.istensor=istensor,$.issymbol=issymbol,$.iskeyword=iskeyword,$.CONS=CONS,$.NUM=NUM,$.DOUBLE=DOUBLE,$.STR=STR,$.TENSOR=TENSOR,$.SYM=SYM,DEBUG_ABS=!1,Eval_abs=function(){return push(cadr(p1)),Eval(),abs()},absValFloat=function(){return Eval(),absval(),Eval(),zzfloat()},abs=function(){var r;if(r=top(),DEBUG_ABS&&console.trace(">>>>  ABS of "+r),numerator(),DEBUG_ABS&&console.log("ABS numerator "+stack[tos-1]),absval(),DEBUG_ABS&&console.log("ABSVAL numerator: "+stack[tos-1]),push(r),denominator(),DEBUG_ABS&&console.log("ABS denominator: "+stack[tos-1]),absval(),DEBUG_ABS&&console.log("ABSVAL denominator: "+stack[tos-1]),divide(),DEBUG_ABS&&console.log("ABSVAL divided: "+stack[tos-1]),DEBUG_ABS)return console.log("<<<<<<<  ABS")},absval=function(){var r,e;if(save(),e=p1=pop(),DEBUG_ABS&&console.log("ABS of "+p1),isZeroAtomOrTensor(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just zero"),push(zero),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(isnegativenumber(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just a negative"),push(p1),negate(),void restore();if(ispositivenumber(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just a positive"),push(p1),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(p1===symbol(PI))return DEBUG_ABS&&console.log(" abs: "+p1+" of PI"),push(p1),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(ADD)&&(findPossibleClockForm(p1)||findPossibleExponentialForm(p1)||Find(p1,imaginaryunit)))return DEBUG_ABS&&console.log(" abs: "+p1+" is a sum"),DEBUG_ABS&&console.log("abs of a sum"),push(p1),rect(),p1=pop(),push(p1),real(),push_integer(2),power(),push(p1),imag(),push_integer(2),power(),add(),push_rational(1,2),power(),simplify_trig(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&equaln(cadr(p1),-1))return DEBUG_ABS&&console.log(" abs: "+p1+" is -1 to any power"),evaluatingAsFloats?(DEBUG_ABS&&console.log(" abs: numeric, so result is 1.0"),push_double(1)):(DEBUG_ABS&&console.log(" abs: symbolic, so result is 1"),push_integer(1)),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&ispositivenumber(caddr(p1)))return DEBUG_ABS&&console.log(" abs: "+p1+" is something to the power of a positive number"),push(cadr(p1)),abs(),push(caddr(p1)),power(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&cadr(p1)===symbol(E))return DEBUG_ABS&&console.log(" abs: "+p1+" is an exponential"),push(caddr(p1)),real(),exponential(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(MULTIPLY)){for(DEBUG_ABS&&console.log(" abs: "+p1+" is a product"),r=!1,p1=cdr(p1);iscons(p1);)push(car(p1)),absval(),r&&multiply(),r=!0,p1=cdr(p1);return DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore()}return car(p1)===symbol(ABS)?(DEBUG_ABS&&console.log(" abs: "+p1+" is abs of a abs"),push_symbol(ABS),push(cadr(p1)),list(2),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore()):istensor(p1)?(absval_tensor(),void restore()):((isnegativeterm(p1)||car(p1)===symbol(ADD)&&isnegativeterm(cadr(p1)))&&(push(p1),negate(),p1=pop()),DEBUG_ABS&&console.log(" abs: "+p1+" is nothing decomposable"),push_symbol(ABS),push(p1),list(2),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),restore())},absval_tensor=function(){return 1!==p1.tensor.ndim&&stop("abs(tensor) with tensor rank > 1"),push(p1),push(p1),conjugate(),inner(),push_rational(1,2),power(),simplify(),Eval()},flag=0,Eval_add=function(){var r;for(r=tos,p1=cdr(p1);iscons(p1);)push(car(p1)),Eval(),p2=pop(),push_terms(p2),p1=cdr(p1);return add_terms(tos-r)},stackAddsCount=0,add_terms=function(r){var e,t,o,s,n,p,a,i,u;if(stackAddsCount++,t=0,e=tos-r,DEBUG&&console.log("stack before adding terms #"+stackAddsCount),DEBUG)for(t=n=0,p=tos;0<=p?n<p:n>p;t=0<=p?++n:--n)console.log(print_list(stack[t]));for(t=o=0;o<10&&!(r<2)&&(flag=0,(u=stack.slice(e,e+r)).sort(cmp_terms),stack=stack.slice(0,e).concat(u).concat(stack.slice(e+r)),0!==flag);t=++o)r=combine_terms(e,r);switch(moveTos(e+r),r){case 0:evaluatingAsFloats?push_double(0):push(zero);break;case 1:break;default:list(r),p1=pop(),push_symbol(ADD),push(p1),cons()}if(DEBUG&&console.log("stack after adding terms #"+stackAddsCount),DEBUG){for(i=[],t=s=0,a=tos;0<=a?s<a:s>a;t=0<=a?++s:--s)i.push(console.log(print_list(stack[t])));return i}},cmp_terms_count=0,cmp_terms=function(r,e){var t,o,s,n;if(cmp_terms_count++,t=0,isNumericAtom(r)&&isNumericAtom(e))return flag=1,0;if(istensor(r)&&istensor(e)){if(r.tensor.ndim<e.tensor.ndim)return-1;if(r.tensor.ndim>e.tensor.ndim)return 1;for(t=o=0,s=r.tensor.ndim;0<=s?o<s:o>s;t=0<=s?++o:--o){if(r.tensor.dim[t]<e.tensor.dim[t])return-1;if(r.tensor.dim[t]>e.tensor.dim[t])return 1}return flag=1,0}return car(r)===symbol(MULTIPLY)&&(r=cdr(r),isNumericAtom(car(r))&&(r=cdr(r),cdr(r)===symbol(NIL)&&(r=car(r)))),car(e)===symbol(MULTIPLY)&&(e=cdr(e),isNumericAtom(car(e))&&(e=cdr(e),cdr(e)===symbol(NIL)&&(e=car(e)))),0===(n=cmp_expr(r,e))&&(flag=1),n},combine_terms=function(r,e){var t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y;for(t=0;t<e-1;)if(check_esc_flag(),p3=stack[r+t],p4=stack[r+t+1],istensor(p3)&&istensor(p4)){if(push(p3),push(p4),tensor_plus_tensor(),(p1=pop())!==symbol(NIL)){for(stack[r+t]=p1,s=i=u=t+1,l=e-1;u<=l?i<l:i>l;s=u<=l?++i:--i)stack[r+s]=stack[r+s+1];e--,t--}t++}else if(istensor(p3)||istensor(p4))t++;else if(isNumericAtom(p3)&&isNumericAtom(p4)){if(push(p3),push(p4),add_numbers(),p1=pop(),isZeroAtomOrTensor(p1)){for(s=o=c=t,d=e-2;c<=d?o<d:o>d;s=c<=d?++o:--o)stack[r+s]=stack[r+s+2];e-=2}else{for(stack[r+t]=p1,s=n=_=t+1,m=e-1;_<=m?n<m:n>m;s=_<=m?++n:--n)stack[r+s]=stack[r+s+1];e--}t--,t++}else if(isNumericAtom(p3)||isNumericAtom(p4))t++;else if(evaluatingAsFloats?(p1=one_as_double,p2=one_as_double):(p1=one,p2=one),y=0,car(p3)===symbol(MULTIPLY)&&(p3=cdr(p3),y=1,isNumericAtom(car(p3))&&(p1=car(p3),p3=cdr(p3),cdr(p3)===symbol(NIL)&&(p3=car(p3),y=0))),car(p4)===symbol(MULTIPLY)&&(p4=cdr(p4),isNumericAtom(car(p4))&&(p2=car(p4),p4=cdr(p4),cdr(p4)===symbol(NIL)&&(p4=car(p4)))),equal(p3,p4))if(push(p1),push(p2),add_numbers(),p1=pop(),isZeroAtomOrTensor(p1)){for(s=p=f=t,h=e-2;f<=h?p<h:p>h;s=f<=h?++p:--p)stack[r+s]=stack[r+s+2];e-=2,t--,t++}else{for(push(p1),y?(push(symbol(MULTIPLY)),push(p3),cons()):push(p3),multiply(),stack[r+t]=pop(),s=a=g=t+1,b=e-1;g<=b?a<b:a>b;s=g<=b?++a:--a)stack[r+s]=stack[r+s+1];e--,t--,t++}else t++;return e},push_terms=function(r){var e;if(car(r)===symbol(ADD)){for(r=cdr(r),e=[];iscons(r);)push(car(r)),e.push(r=cdr(r));return e}if(!isZeroAtom(r))return push(r)},add=function(){var r;return save(),p2=pop(),p1=pop(),r=tos,push_terms(p1),push_terms(p2),add_terms(tos-r),restore()},add_all=function(r){var e,t,o,s,n;for(t=0,save(),n=tos-r,e=tos,t=o=0,s=r;0<=s?o<s:o>s;t=0<=s?++o:--o)push_terms(stack[n+t]);return add_terms(tos-e),p1=pop(),moveTos(tos-r),push(p1),restore()},subtract=function(){return negate(),add()},Eval_adj=function(){return push(cadr(p1)),Eval(),adj()},adj=function(){var r,e,t,o,s,n,p;for(r=0,t=0,save(),p1=pop(),istensor(p1)&&2===p1.tensor.ndim&&p1.tensor.dim[0]===p1.tensor.dim[1]||stop("adj: square matrix expected"),o=p1.tensor.dim[0],(p2=alloc_tensor(o*o)).tensor.ndim=2,p2.tensor.dim[0]=o,p2.tensor.dim[1]=o,r=s=0,n=o;0<=n?s<n:s>n;r=0<=n?++s:--s)for(t=e=0,p=o;0<=p?e<p:e>p;t=0<=p?++e:--e)cofactor(p1,o,r,t),p2.tensor.elem[o*t+r]=pop();return push(p2),restore()},Eval_approxratio=function(){var r;return r=cadr(p1),push(r),approxratioRecursive()},approxratioRecursive=function(){var r,e,t,o,s;if(r=0,save(),p1=pop(),istensor(p1)){for((p4=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,r=t=0,o=p1.tensor.ndim;0<=o?t<o:t>o;r=0<=o?++t:--t)p4.tensor.dim[r]=p1.tensor.dim[r];for(r=e=0,s=p1.tensor.nelem;0<=s?e<s:e>s;r=0<=s?++e:--e)push(p1.tensor.elem[r]),approxratioRecursive(),p4.tensor.elem[r]=pop(),check_tensor_dimensions(p4);push(p4)}else p1.k===DOUBLE?(push(p1),approxOneRatioOnly()):iscons(p1)?(push(car(p1)),approxratioRecursive(),push(cdr(p1)),approxratioRecursive(),cons()):push(p1);return restore()},approxOneRatioOnly=function(){var r,e,t,o,s,n;if(zzfloat(),(o=pop()).k!==DOUBLE)return push_symbol(APPROXRATIO),push(theArgument),list(2);2===(t=(s=o.d).toString().split(".")).length?(r=t[1].length,e=1/Math.pow(10,r),n=floatToRatioRoutine(s,e),push_rational(n[0],n[1])):push_integer(s)},floatToRatioRoutine=function(r,e){var t,o,s,n,p,a,i;if(s=void 0,o=void 0,void 0,a=void 0,n=void 0,p=void 0,i=[0,0],isNaN(r))return i;if(Infinity===r)return i[0]=1,i[1]=0,i;if(-Infinity===r)return i[0]=-1,i[1]=0,i;if(t=r<0?-1:1,r=Math.abs(r),Math.abs(r-Math.floor(r))<e)return s=r*t,o=1,i[0]=s,i[1]=o,i;if(r<1e-19)return s=t,o=1e19,i[0]=s,i[1]=o,i;if(r>1e19)return s=1e19*t,o=1,i[0]=s,i[1]=o,i;for(a=r,n=0,o=1;a=1/(a-Math.floor(a)),p=o,o=o*Math.floor(a)+n,n=p,s=Math.floor(r*o+.5),Math.abs(r-s/o)>e&&a!==Math.floor(a););return s*=t,i[0]=s,i[1]=o,i},approx_just_an_integer=0,approx_sine_of_rational=1,approx_sine_of_pi_times_rational=2,approx_rationalOfPi=3,approx_radicalOfRatio=4,approx_nothingUseful=5,approx_ratioOfRadical=6,approx_rationalOfE=7,approx_logarithmsOfRationals=8,approx_rationalsOfLogarithms=9,approxRationalsOfRadicals=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h;if(2!==(h=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(c=h[1].length,_=1/Math.pow(10,c),console.log("precision: "+_),e=null,l=Number.MAX_VALUE,d=0,i=(f=[2,3,5,6,7,8,10]).length;d<i;d++)for(n=f[d],a=p=1;p<=10;a=++p)s=Math.sqrt(n)/a,Math.abs(s)>1e-10?(m=r/s,u=Math.round(m),o=Math.abs(1-m/u)):(m=1,u=1,o=Math.abs(r-s)),o<2*_&&(t=simpleComplexityMeasure(u,n,a))<l&&(l=t,e=[u+" * sqrt( "+n+" ) / "+a,approx_ratioOfRadical,u,n,a]);return e},approxRadicalsOfRationals=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b;if(2!==(b=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(d=b[1].length,m=1/Math.pow(10,d),console.log("precision: "+m),e=null,c=Number.MAX_VALUE,_=0,i=(h=[1,2,3,5,6,7,8,10]).length;_<i;_++)for(n=h[_],p=0,u=(g=[1,2,3,5,6,7,8,10]).length;p<u;p++)a=g[p],s=Math.sqrt(n/a),Math.abs(s)>1e-10?(f=r/s,l=Math.round(f),o=Math.abs(1-f/l)):(f=1,l=1,o=Math.abs(r-s)),o<2*m&&(t=simpleComplexityMeasure(l,n,a))<c&&(c=t,e=[l+" * (sqrt( "+n+" / "+a+" )",approx_radicalOfRatio,l,n,a]);return e},approxRadicals=function(r){var e,t,o,s,n;return 2!==(n=r.toString().split(".")).length?[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2]:(o=n[1].length,s=1/Math.pow(10,o),console.log("precision: "+s),null!=(t=approxRationalsOfRadicals(r))?t:null!=(e=approxRadicalsOfRationals(r))?e:null)},approxLogs=function(r){var e,t,o,s,n;return 2!==(n=r.toString().split(".")).length?[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2]:(o=n[1].length,s=1/Math.pow(10,o),console.log("precision: "+s),null!=(t=approxRationalsOfLogs(r))?t:null!=(e=approxLogsOfRationals(r))?e:null)},approxRationalsOfLogs=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(2!==(m=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(l=m[1].length,d=1/Math.pow(10,l),console.log("precision: "+d),e=null,u=Number.MAX_VALUE,n=c=2;c<=5;n=++c)for(a=p=1;p<=5;a=++p)s=Math.log(n)/a,Math.abs(s)>1e-10?(_=r/s,i=Math.round(_),o=Math.abs(1-_/i)):(_=1,i=1,o=Math.abs(r-s)),1!==i&&Math.abs(Math.floor(i/a))===Math.abs(i/a)||o<2.2*d&&(t=simpleComplexityMeasure(i,n,a))<u&&(u=t,e=[i+" * log( "+n+" ) / "+a,approx_rationalsOfLogarithms,i,n,a]);return e},approxLogsOfRationals=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(2!==(m=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(l=m[1].length,d=1/Math.pow(10,l),console.log("precision: "+d),e=null,u=Number.MAX_VALUE,n=c=1;c<=5;n=++c)for(a=p=1;p<=5;a=++p)s=Math.log(n/a),Math.abs(s)>1e-10?(_=r/s,i=Math.round(_),o=Math.abs(1-_/i)):(_=1,i=1,o=Math.abs(r-s)),o<1.96*d&&(t=simpleComplexityMeasure(i,n,a))<u&&(u=t,e=[i+" * log( "+n+" / "+a+" )",approx_logarithmsOfRationals,i,n,a]);return e},approxRationalsOfPowersOfE=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(2!==(m=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(l=m[1].length,d=1/Math.pow(10,l),console.log("precision: "+d),e=null,u=Number.MAX_VALUE,n=c=1;c<=2;n=++c)for(a=p=1;p<=12;a=++p)s=Math.pow(Math.E,n)/a,Math.abs(s)>1e-10?(_=r/s,i=Math.round(_),o=Math.abs(1-_/i)):(_=1,i=1,o=Math.abs(r-s)),o<2*d&&(t=simpleComplexityMeasure(i,n,a))<u&&(u=t,e=[i+" * (e ^ "+n+" ) / "+a,approx_rationalOfE,i,n,a]);return e},approxRationalsOfPowersOfPI=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(2!==(m=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(l=m[1].length,d=1/Math.pow(10,l),console.log("precision: "+d),e=null,u=Number.MAX_VALUE,n=c=1;c<=5;n=++c)for(a=p=1;p<=12;a=++p)s=Math.pow(Math.PI,n)/a,Math.abs(s)>1e-10?(_=r/s,i=Math.round(_),o=Math.abs(1-_/i)):(_=1,i=1,o=Math.abs(r-s)),o<2*d&&(t=simpleComplexityMeasure(i,n,a))<u&&(u=t,e=[i+" * (pi ^ "+n+" ) / "+a+" )",approx_rationalOfPi,i,n,a]);return e},approxTrigonometric=function(r){var e,t,o,s,n;return 2!==(n=r.toString().split(".")).length?[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2]:(o=n[1].length,s=1/Math.pow(10,o),console.log("precision: "+s),null!=(t=approxSineOfRationals(r))?t:null!=(e=approxSineOfRationalMultiplesOfPI(r))?e:null)},approxSineOfRationals=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f;if(2!==(f=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(c=f[1].length,_=1/Math.pow(10,c),console.log("precision: "+_),e=null,l=Number.MAX_VALUE,p=d=1;d<=4;p=++d)for(i=a=1;a<=4;i=++a)s=p/i,n=Math.sin(s),Math.abs(n)>1e-10?(m=r/n,u=Math.round(m),o=Math.abs(1-m/u)):(m=1,u=1,o=Math.abs(r-n)),o<2*_&&(t=simpleComplexityMeasure(u,p,i))<l&&(l=t,e=[u+" * sin( "+p+"/"+i+" )",approx_sine_of_rational,u,p,i]);return e},approxSineOfRationalMultiplesOfPI=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f;if(2!==(f=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(c=f[1].length,_=1/Math.pow(10,c),console.log("precision: "+_),e=null,l=Number.MAX_VALUE,p=d=1;d<=13;p=++d)for(i=a=1;a<=13;i=++a)s=p/i,n=Math.sin(Math.PI*s),Math.abs(n)>1e-10?(m=r/n,u=Math.round(m),o=Math.abs(1-m/u)):(m=1,u=1,o=Math.abs(r-n)),o<23*_&&(t=simpleComplexityMeasure(u,p,i))<l&&(l=t,e=[u+" * sin( "+p+"/"+i+" * pi )",approx_sine_of_pi_times_rational,u,p,i]);return e},approxAll=function(r){var e,t,o,s,n,p,a,i,u,l,c;return 2!==(c=r.toString().split(".")).length?[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2]:(u=c[1].length,l=1/Math.pow(10,u),console.log("precision: "+l),i=Number.MAX_VALUE,a=0,p=null,null!=(t=approxRadicals(r))&&((a=simpleComplexityMeasure(t))<i?(console.log("better explanation by approxRadicals: "+t+" complexity: "+a),i=a,p=t):console.log("subpar explanation by approxRadicals: "+t+" complexity: "+a)),null!=(e=approxLogs(r))&&((a=simpleComplexityMeasure(e))<i?(console.log("better explanation by approxLogs: "+e+" complexity: "+a),i=a,p=e):console.log("subpar explanation by approxLogs: "+e+" complexity: "+a)),null!=(o=approxRationalsOfPowersOfE(r))&&((a=simpleComplexityMeasure(o))<i?(console.log("better explanation by approxRationalsOfPowersOfE: "+o+" complexity: "+a),i=a,p=o):console.log("subpar explanation by approxRationalsOfPowersOfE: "+o+" complexity: "+a)),null!=(s=approxRationalsOfPowersOfPI(r))&&((a=simpleComplexityMeasure(s))<i?(console.log("better explanation by approxRationalsOfPowersOfPI: "+s+" complexity: "+a),i=a,p=s):console.log("subpar explanation by approxRationalsOfPowersOfPI: "+s+" complexity: "+a)),null!=(n=approxTrigonometric(r))&&((a=simpleComplexityMeasure(n))<i?(console.log("better explanation by approxTrigonometric: "+n+" complexity: "+a),i=a,p=n):console.log("subpar explanation by approxTrigonometric: "+n+" complexity: "+a)),p)},simpleComplexityMeasure=function(r,e,t){var o;if(o=null,r instanceof Array){switch(r[1]){case approx_sine_of_pi_times_rational:o=4;break;case approx_rationalOfPi:o=Math.pow(4,Math.abs(r[3]))*Math.abs(r[2]);break;case approx_rationalOfE:o=Math.pow(3,Math.abs(r[3]))*Math.abs(r[2]);break;default:o=0}o+=Math.abs(r[2])*(Math.abs(r[3])+Math.abs(r[4]))}else o+=Math.abs(r)*(Math.abs(e)+Math.abs(t));return 1===r[2]?o-=1:o+=1,1===r[3]?o-=1:o+=1,1===r[4]?o-=1:o+=1,o<0&&(o=0),o},testApprox=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M,R,L,k,q,D,P,U,w,B,G,C,F,Y,X,W,z,Z,V,$,H,Q,j,J,K,rr,er,tr,or,sr;for(S=0,m=(P=[2,3,5,6,7,8,10]).length;S<m;S++)for(t=P[S],o=0,f=(U=[2,3,5,6,7,8,10]).length;o<f;o++)t!==(p=U[o])&&(console.log("testapproxRadicals testing: 1 * sqrt( "+t+" ) / "+p),e=t/p,rr=Math.sqrt(t)/p,z=(X=approxRadicals(rr))[2]*Math.sqrt(X[3])/X[4],Math.abs(rr-z)>1e-15&&console.log("fail testapproxRadicals: 1 * sqrt( "+t+" ) / "+p+" . obtained: "+X));for(a=0,h=(w=[2,3,5,6,7,8,10]).length;a<h;a++)for(t=w[a],c=0,g=(B=[2,3,5,6,7,8,10]).length;c<g;c++)t!==(p=B[c])&&(console.log("testapproxRadicals testing with 4 digits: 1 * sqrt( "+t+" ) / "+p),e=t/p,rr=(R=Math.sqrt(t)/p).toFixed(4),z=(X=approxRadicals(rr))[2]*Math.sqrt(X[3])/X[4],Math.abs(R-z)>1e-15&&console.log("fail testapproxRadicals with 4 digits: 1 * sqrt( "+t+" ) / "+p+" . obtained: "+X));for(E=0,b=(G=[2,3,5,6,7,8,10]).length;E<b;E++)for(t=G[E],I=0,y=(C=[2,3,5,6,7,8,10]).length;I<y;I++)t!==(p=C[I])&&(console.log("testapproxRadicals testing: 1 * sqrt( "+t+" / "+p+" )"),e=t/p,rr=Math.sqrt(t/p),null!=(X=approxRadicals(rr))&&(z=X[2]*Math.sqrt(X[3]/X[4]),X[1]===approx_radicalOfRatio&&Math.abs(rr-z)>1e-15&&console.log("fail testapproxRadicals: 1 * sqrt( "+t+" / "+p+" ) . obtained: "+X)));for(N=0,v=(F=[1,2,3,5,6,7,8,10]).length;N<v;N++)for(t=F[N],L=0,x=(Y=[1,2,3,5,6,7,8,10]).length;L<x;L++)p=Y[L],1===t&&1===p||(console.log("testapproxRadicals testing with 4 digits:: 1 * sqrt( "+t+" / "+p+" )"),e=t/p,rr=(R=Math.sqrt(t/p)).toFixed(4),z=(X=approxRadicals(rr))[2]*Math.sqrt(X[3]/X[4]),X[1]===approx_radicalOfRatio&&Math.abs(R-z)>1e-15&&console.log("fail testapproxRadicals with 4 digits:: 1 * sqrt( "+t+" / "+p+" ) . obtained: "+X));for(t=q=1;q<=5;t=++q)for(p=Z=1;Z<=5;p=++Z)console.log("testApproxAll testing: 1 * log("+t+" ) / "+p),e=t/p,rr=Math.log(t)/p,z=(X=approxAll(rr))[2]*Math.log(X[3])/X[4],Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * log("+t+" ) / "+p+" . obtained: "+X);for(t=$=1;$<=5;t=++$)for(p=Q=1;Q<=5;p=++Q)console.log("testApproxAll testing with 4 digits: 1 * log("+t+" ) / "+p),e=t/p,rr=(R=Math.log(t)/p).toFixed(4),z=(X=approxAll(rr))[2]*Math.log(X[3])/X[4],Math.abs(R-z)>1e-15&&console.log("fail testApproxAll with 4 digits: 1 * log("+t+" ) / "+p+" . obtained: "+X);for(t=J=1;J<=5;t=++J)for(p=er=1;er<=5;p=++er)console.log("testApproxAll testing: 1 * log("+t+" / "+p+" )"),e=t/p,rr=Math.log(t/p),z=(X=approxAll(rr))[2]*Math.log(X[3]/X[4]),Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * log("+t+" / "+p+" ) . obtained: "+X);for(t=or=1;or<=5;t=++or)for(p=s=1;s<=5;p=++s)console.log("testApproxAll testing with 4 digits: 1 * log("+t+" / "+p+" )"),e=t/p,rr=(R=Math.log(t/p)).toFixed(4),z=(X=approxAll(rr))[2]*Math.log(X[3]/X[4]),Math.abs(R-z)>1e-15&&console.log("fail testApproxAll with 4 digits: 1 * log("+t+" / "+p+" ) . obtained: "+X);for(t=i=1;i<=2;t=++i)for(p=d=1;d<=12;p=++d)console.log("testApproxAll testing: 1 * (e ^ "+t+" ) / "+p),e=t/p,rr=Math.pow(Math.E,t)/p,z=(X=approxAll(rr))[2]*Math.pow(Math.E,X[3])/X[4],Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * (e ^ "+t+" ) / "+p+" . obtained: "+X);for(t=A=1;A<=2;t=++A)for(p=O=1;O<=12;p=++O)console.log("approxRationalsOfPowersOfE testing with 4 digits: 1 * (e ^ "+t+" ) / "+p),e=t/p,rr=(R=Math.pow(Math.E,t)/p).toFixed(4),z=(X=approxRationalsOfPowersOfE(rr))[2]*Math.pow(Math.E,X[3])/X[4],Math.abs(R-z)>1e-15&&console.log("fail approxRationalsOfPowersOfE with 4 digits: 1 * (e ^ "+t+" ) / "+p+" . obtained: "+X);for(t=M=1;M<=2;t=++M)for(p=k=1;k<=12;p=++k)console.log("testApproxAll testing: 1 * pi ^ "+t+" / "+p),e=t/p,rr=Math.pow(Math.PI,t)/p,z=(X=approxAll(rr))[2]*Math.pow(Math.PI,X[3])/X[4],Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * pi ^ "+t+" / "+p+" ) . obtained: "+X);for(t=D=1;D<=2;t=++D)for(p=V=1;V<=12;p=++V)console.log("approxRationalsOfPowersOfPI testing with 4 digits: 1 * pi ^ "+t+" / "+p),e=t/p,rr=(R=Math.pow(Math.PI,t)/p).toFixed(4),z=(X=approxRationalsOfPowersOfPI(rr))[2]*Math.pow(Math.PI,X[3])/X[4],Math.abs(R-z)>1e-15&&console.log("fail approxRationalsOfPowersOfPI with 4 digits: 1 * pi ^ "+t+" / "+p+" ) . obtained: "+X);for(t=H=1;H<=4;t=++H)for(p=j=1;j<=4;p=++j)console.log("testApproxAll testing: 1 * sin( "+t+"/"+p+" )"),e=t/p,rr=Math.sin(e),W=(X=approxAll(rr))[3]/X[4],z=X[2]*Math.sin(W),Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * sin( "+t+"/"+p+" ) . obtained: "+X);for(t=K=1;K<=4;t=++K)for(p=tr=1;tr<=4;p=++tr)console.log("testApproxAll testing with 5 digits: 1 * sin( "+t+"/"+p+" )"),e=t/p,rr=(R=Math.sin(e)).toFixed(5),null==(X=approxAll(rr))&&console.log("fail testApproxAll with 5 digits: 1 * sin( "+t+"/"+p+" ) . obtained:  undefined "),W=X[3]/X[4],z=X[2]*Math.sin(W),(r=Math.abs(R-z))>1e-14&&console.log("fail testApproxAll with 5 digits: 1 * sin( "+t+"/"+p+" ) . obtained: "+X+" error: "+r);for(t=sr=1;sr<=4;t=++sr)for(p=n=1;n<=4;p=++n)console.log("testApproxAll testing with 4 digits: 1 * sin( "+t+"/"+p+" )"),e=t/p,rr=(R=Math.sin(e)).toFixed(4),null==(X=approxAll(rr))&&console.log("fail testApproxAll with 4 digits: 1 * sin( "+t+"/"+p+" ) . obtained:  undefined "),W=X[3]/X[4],z=X[2]*Math.sin(W),(r=Math.abs(R-z))>1e-14&&console.log("fail testApproxAll with 4 digits: 1 * sin( "+t+"/"+p+" ) . obtained: "+X+" error: "+r);for("0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0"),"0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0.0"),"0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0.00"),"0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0.000"),"0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0.0000"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.0"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.00"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.000"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.0000"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.00000"),rr=Math.sqrt(2),"1 * sqrt( 2 ) / 1"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(2)"),"1 * sqrt( 2 ) / 1"!==approxAll(rr=1.41)[0]&&console.log("fail testApproxAll: 1.41"),"1 * sqrt( 2 ) / 1"!==approxRadicals(rr=1.4)[0]&&console.log("fail approxRadicals: 1.4"),"1 * log( 2 ) / 1"!==approxLogs(rr=.6)[0]&&console.log("fail approxLogs: 0.6"),"1 * log( 2 ) / 1"!==approxLogs(rr=.69)[0]&&console.log("fail approxLogs: 0.69"),"1 * log( 2 ) / 1"!==approxLogs(rr=.7)[0]&&console.log("fail approxLogs: 0.7"),"1 * log( 3 ) / 1"!==approxLogs(rr=1.09)[0]&&console.log("fail approxLogs: 1.09"),"1 * log( 3 ) / 1"!==approxAll(rr=1.09)[0]&&console.log("fail approxAll: 1.09"),"1 * log( 3 ) / 1"!==approxAll(rr=1.098)[0]&&console.log("fail approxAll: 1.098"),"1 * log( 3 ) / 1"!==approxAll(rr=1.1)[0]&&console.log("fail approxAll: 1.1"),"1 * log( 3 ) / 1"!==approxAll(rr=1.11)[0]&&console.log("fail approxAll: 1.11"),rr=Math.sqrt(3),"1 * sqrt( 3 ) / 1"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(3)"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.0000"),"1 * (pi ^ 1 ) / 1 )"!==approxAll(rr=3.141592)[0]&&console.log("fail testApproxAll: 3.141592"),"10 * (pi ^ 1 ) / 1 )"!==approxAll(rr=31.41592)[0]&&console.log("fail testApproxAll: 31.41592"),"100 * (pi ^ 1 ) / 1 )"!==approxAll(rr=314.1592)[0]&&console.log("fail testApproxAll: 314.1592"),"10000000 * (pi ^ 1 ) / 1 )"!==approxAll(rr=31415926.53589793)[0]&&console.log("fail testApproxAll: 31415926.53589793"),rr=Math.sqrt(2),"2 * sin( 1/4 * pi )"!==approxTrigonometric(rr)[0]&&console.log("fail approxTrigonometric: Math.sqrt(2)"),rr=Math.sqrt(3),"2 * sin( 1/3 * pi )"!==approxTrigonometric(rr)[0]&&console.log("fail approxTrigonometric: Math.sqrt(3)"),rr=(Math.sqrt(6)-Math.sqrt(2))/4,"1 * sin( 1/12 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: (Math.sqrt(6) - Math.sqrt(2))/4"),rr=Math.sqrt(2-Math.sqrt(2))/2,"1 * sin( 1/8 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(2 - Math.sqrt(2))/2"),rr=(Math.sqrt(6)+Math.sqrt(2))/4,"1 * sin( 5/12 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: (Math.sqrt(6) + Math.sqrt(2))/4"),rr=Math.sqrt(2+Math.sqrt(3))/2,"1 * sin( 5/12 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(2 + Math.sqrt(3))/2"),rr=(Math.sqrt(5)-1)/4,"1 * sin( 1/10 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: (Math.sqrt(5) - 1)/4"),rr=Math.sqrt(10-2*Math.sqrt(5))/4,"1 * sin( 1/5 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(10 - 2*Math.sqrt(5))/4"),rr=Math.sin(Math.PI/7),"1 * sin( 1/7 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sin(Math.PI/7)"),rr=Math.sin(Math.PI/9),"1 * sin( 1/9 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sin(Math.PI/9)"),"6 * (pi ^ 5 ) / 1 )"!==approxRationalsOfPowersOfPI(rr=1836.15267)[0]&&console.log("fail approxRationalsOfPowersOfPI: 1836.15267"),t=u=1;u<=13;t=++u)for(p=l=1;l<=13;p=++l)console.log("approxTrigonometric testing: 1 * sin( "+t+"/"+p+" * pi )"),e=t/p,rr=Math.sin(Math.PI*e),W=(X=approxTrigonometric(rr))[3]/X[4],z=X[2]*Math.sin(Math.PI*W),Math.abs(rr-z)>1e-15&&console.log("fail approxTrigonometric: 1 * sin( "+t+"/"+p+" * pi ) . obtained: "+X);for(t=_=1;_<=13;t=++_)for(p=T=1;T<=13;p=++T)5===t&&11===p||6===t&&11===p||(console.log("approxTrigonometric testing with 4 digits: 1 * sin( "+t+"/"+p+" * pi )"),e=t/p,rr=(R=Math.sin(Math.PI*e)).toFixed(4),W=(X=approxTrigonometric(rr))[3]/X[4],z=X[2]*Math.sin(Math.PI*W),(r=Math.abs(R-z))>1e-14&&console.log("fail approxTrigonometric with 4 digits: 1 * sin( "+t+"/"+p+" * pi ) . obtained: "+X+" error: "+r));return console.log("testApprox done")},$.approxRadicals=approxRadicals,$.approxRationalsOfLogs=approxRationalsOfLogs,$.approxAll=approxAll,$.testApprox=testApprox,Eval_arccos=function(){return push(cadr(p1)),Eval(),arccos()},arccos=function(){var r;if(r=0,save(),p1=pop(),car(p1)===symbol(COS))return push(cadr(p1)),void restore();if(isdouble(p1))return r=Math.acos(p1.d),push_double(r),void restore();if(isoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(Math.PI/4):(push_rational(1,4),push_symbol(PI),multiply()),void restore();if(isminusoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),-1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(3*Math.PI/4):(push_rational(3,4),push_symbol(PI),multiply()),void restore();if(!isrational(p1))return push_symbol(ARCCOS),push(p1),list(2),void restore();switch(push(p1),push_integer(2),multiply(),pop_integer()){case-2:evaluatingAsFloats?push_double(Math.PI):push_symbol(PI);break;case-1:evaluatingAsFloats?push_double(2*Math.PI/3):(push_rational(2,3),push_symbol(PI),multiply());break;case 0:evaluatingAsFloats?push_double(Math.PI/2):(push_rational(1,2),push_symbol(PI),multiply());break;case 1:evaluatingAsFloats?push_double(Math.PI/3):(push_rational(1,3),push_symbol(PI),multiply());break;case 2:evaluatingAsFloats?push_double(0):push(zero);break;default:push_symbol(ARCCOS),push(p1),list(2)}return restore()},Eval_arccosh=function(){return push(cadr(p1)),Eval(),arccosh()},arccosh=function(){var r;return r=0,save(),p1=pop(),car(p1)===symbol(COSH)?(push(cadr(p1)),void restore()):isdouble(p1)?((r=p1.d)<1&&stop("arccosh function argument is less than 1.0"),r=Math.log(r+Math.sqrt(r*r-1)),push_double(r),void restore()):isplusone(p1)?(push(zero),void restore()):(push_symbol(ARCCOSH),push(p1),list(2),restore())},Eval_arcsin=function(){return push(cadr(p1)),Eval(),arcsin()},arcsin=function(){var r;if(r=0,save(),p1=pop(),car(p1)===symbol(SIN))return push(cadr(p1)),void restore();if(isdouble(p1))return r=Math.asin(p1.d),push_double(r),void restore();if(isoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return push_rational(1,4),push_symbol(PI),multiply(),void restore();if(isminusoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),-1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(-Math.PI/4):(push_rational(-1,4),push_symbol(PI),multiply()),void restore();if(!isrational(p1))return push_symbol(ARCSIN),push(p1),list(2),void restore();switch(push(p1),push_integer(2),multiply(),pop_integer()){case-2:evaluatingAsFloats?push_double(-Math.PI/2):(push_rational(-1,2),push_symbol(PI),multiply());break;case-1:evaluatingAsFloats?push_double(-Math.PI/6):(push_rational(-1,6),push_symbol(PI),multiply());break;case 0:evaluatingAsFloats?push_double(0):push(zero);break;case 1:evaluatingAsFloats?push_double(Math.PI/6):(push_rational(1,6),push_symbol(PI),multiply());break;case 2:evaluatingAsFloats?push_double(Math.PI/2):(push_rational(1,2),push_symbol(PI),multiply());break;default:push_symbol(ARCSIN),push(p1),list(2)}return restore()},Eval_arcsinh=function(){return push(cadr(p1)),Eval(),arcsinh()},arcsinh=function(){var r;return r=0,save(),p1=pop(),car(p1)===symbol(SINH)?(push(cadr(p1)),void restore()):isdouble(p1)?(r=p1.d,r=Math.log(r+Math.sqrt(r*r+1)),push_double(r),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(ARCSINH),push(p1),list(2),restore())},Eval_arctan=function(){return push(cadr(p1)),Eval(),arctan()},arctan=function(){var r;return r=0,save(),p1=pop(),car(p1)===symbol(TAN)?(push(cadr(p1)),void restore()):isdouble(p1)?(r=Math.atan(p1.d),push_double(r),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):isnegative(p1)?(push(p1),negate(),arctan(),negate(),void restore()):Find(p1,symbol(SIN))&&Find(p1,symbol(COS))&&(push(p1),numerator(),p2=pop(),push(p1),denominator(),p3=pop(),car(p2)===symbol(SIN)&&car(p3)===symbol(COS)&&equal(cadr(p2),cadr(p3)))?(push(cadr(p2)),void restore()):car(p1)===symbol(POWER)&&equaln(cadr(p1),3)&&equalq(caddr(p1),-1,2)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,3)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),3)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2)?(push_rational(1,6),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):equaln(p1,1)?(push_rational(1,4),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):car(p1)===symbol(POWER)&&equaln(cadr(p1),3)&&equalq(caddr(p1),1,2)?(push_rational(1,3),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):(push_symbol(ARCTAN),push(p1),list(2),restore())},Eval_arctanh=function(){return push(cadr(p1)),Eval(),arctanh()},arctanh=function(){var r;return r=0,save(),p1=pop(),car(p1)===symbol(TANH)?(push(cadr(p1)),void restore()):isdouble(p1)?(((r=p1.d)<-1||r>1)&&stop("arctanh function argument is not in the interval [-1,1]"),r=Math.log((1+r)/(1-r))/2,push_double(r),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(ARCTANH),push(p1),list(2),restore())},DEBUG_ARG=!1,Eval_arg=function(){return push(cadr(p1)),Eval(),arg()},arg=function(){return save(),p1=pop(),push(p1),numerator(),yyarg(),push(p1),denominator(),yyarg(),subtract(),restore()},yyarg=function(){if(save(),p1=pop(),ispositivenumber(p1)||p1===symbol(PI))isdouble(p1)||evaluatingAsFloats?push_double(0):push_integer(0);else if(isnegativenumber(p1))isdouble(p1)||evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),negate();else if(issymbol(p1))push_symbol(ARG),push(p1),list(2);else if(car(p1)===symbol(POWER)&&equaln(cadr(p1),-1))evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),push(caddr(p1)),multiply();else if(car(p1)===symbol(POWER)&&cadr(p1)===symbol(E))push(caddr(p1)),imag();else if(car(p1)===symbol(POWER)&&isoneovertwo(caddr(p1)))DEBUG_ARG&&console.log("arg of a sqrt: "+p1),push(cadr(p1)),arg(),DEBUG_ARG&&console.log(" = 1/2 * "+stack[tos-1]),push(caddr(p1)),multiply();else if(car(p1)===symbol(MULTIPLY))for(push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),arg(),add(),p1=cdr(p1);else car(p1)===symbol(ADD)?(push(p1),rect(),p1=pop(),push(p1),real(),p2=pop(),push(p1),imag(),p3=pop(),isZeroAtomOrTensor(p2)?(evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),isnegative(p3)&&negate()):(push(p3),push(p2),divide(),arctan(),isnegative(p2)&&(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),isnegative(p3)?subtract():add()))):isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))?(push_symbol(ARG),push(p1),list(2)):push_integer(0);return restore()},bake=function(){var r,e,t,o,s,n;if(r=0,expanding++,save(),p1=pop(),e=ispolyexpandedform(p1,symbol(SYMBOL_S)),t=ispolyexpandedform(p1,symbol(SYMBOL_T)),o=ispolyexpandedform(p1,symbol(SYMBOL_X)),s=ispolyexpandedform(p1,symbol(SYMBOL_Y)),n=ispolyexpandedform(p1,symbol(SYMBOL_Z)),1===e&&0===t&&0===o&&0===s&&0===n)p2=symbol(SYMBOL_S),bake_poly();else if(0===e&&1===t&&0===o&&0===s&&0===n)p2=symbol(SYMBOL_T),bake_poly();else if(0===e&&0===t&&1===o&&0===s&&0===n)p2=symbol(SYMBOL_X),bake_poly();else if(0===e&&0===t&&0===o&&1===s&&0===n)p2=symbol(SYMBOL_Y),bake_poly();else if(0===e&&0===t&&0===o&&0===s&&1===n)p2=symbol(SYMBOL_Z),bake_poly();else if(iscons(p1)&&car(p1)!==symbol(FOR)){for(r=tos,push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),bake(),p1=cdr(p1);list(tos-r)}else push(p1);return restore(),expanding--},polyform=function(){var r;if(r=0,save(),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2))bake_poly();else if(iscons(p1)){for(r=tos,push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),polyform(),p1=cdr(p1);list(tos-r)}else push(p1);return restore()},bake_poly=function(){var r,e,t,o,s,n;for(t=0,r=tos,push(p1),push(p2),o=coeff(),e=tos,t=n=o-1;n>=0;t=n+=-1)p1=stack[r+t],bake_poly_term(t);return(s=tos-e)>1&&(list(s),push(symbol(ADD)),swap(),cons()),p1=pop(),moveTos(tos-o),push(p1)},bake_poly_term=function(r){var e,t;if(!isZeroAtomOrTensor(p1)){if(0!==r){if(e=tos,car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else equaln(p1,1)||push(p1);return 1===r?push(p2):(push(symbol(POWER)),push(p2),push_integer(r),list(3)),(t=tos-e)>1?(list(t),push(symbol(MULTIPLY)),swap(),cons()):void 0}if(car(p1)===symbol(ADD))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else push(p1)}},Eval_besselj=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),besselj()},besselj=function(){return save(),yybesselj(),restore()},yybesselj=function(){var r,e;if(r=0,p2=pop(),p1=pop(),push(p2),e=pop_integer(),isdouble(p1)&&!isNaN(e))return r=jn(e,p1.d),void push_double(r);if(isZeroAtomOrTensor(p1)&&isZeroAtomOrTensor(p2))push_integer(1);else{if(!isZeroAtomOrTensor(p1)||isNaN(e))return p2.k===NUM&&MEQUAL(p2.q.b,2)?MEQUAL(p2.q.a,1)?(evaluatingAsFloats?push_double(2/Math.PI):(push_integer(2),push_symbol(PI),divide()),push(p1),divide(),push_rational(1,2),power(),push(p1),sine(),void multiply()):MEQUAL(p2.q.a,-1)?(evaluatingAsFloats?push_double(2/Math.PI):(push_integer(2),push_symbol(PI),divide()),push(p1),divide(),push_rational(1,2),power(),push(p1),cosine(),void multiply()):(push_integer(MSIGN(p2.q.a)),p3=pop(),push_integer(2),push(p1),divide(),push(p2),push(p3),subtract(),multiply(),push(p1),push(p2),push(p3),subtract(),besselj(),multiply(),push(p1),push(p2),push_integer(2),push(p3),multiply(),subtract(),besselj(),void subtract()):isnegativeterm(p1)?(push(p1),negate(),push(p2),power(),push(p1),push(p2),negate(),power(),multiply(),push_symbol(BESSELJ),push(p1),negate(),push(p2),list(3),void multiply()):isnegativeterm(p2)?(push_integer(-1),push(p2),power(),push_symbol(BESSELJ),push(p1),push(p2),negate(),list(3),void multiply()):(push(symbol(BESSELJ)),push(p1),push(p2),list(3));push_integer(0)}},Eval_bessely=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),bessely()},bessely=function(){return save(),yybessely(),restore()},yybessely=function(){var r,e;return r=0,p2=pop(),p1=pop(),push(p2),e=pop_integer(),isdouble(p1)&&!isNaN(e)?(r=yn(e,p1.d),void push_double(r)):isnegativeterm(p2)?(push_integer(-1),push(p2),power(),push_symbol(BESSELY),push(p1),push(p2),negate(),list(3),void multiply()):(push_symbol(BESSELY),push(p1),push(p2),void list(3))},mint=function(r){return bigInt(r)},isSmall=function(r){return r.geq(Number.MIN_SAFE_INTEGER)&&r.leq(Number.MAX_SAFE_INTEGER)},setSignTo=function(r,e){if(r.isPositive()){if(e<0)return r.multiply(bigInt(-1))}else if(e>0)return r.multiply(bigInt(-1));return r},makeSignSameAs=function(r,e){if(r.isPositive()){if(e.isNegative())return r.multiply(bigInt(-1))}else if(e.isPositive())return r.multiply(bigInt(-1));return r},makePositive=function(r){return r.isNegative()?r.multiply(bigInt(-1)):r},add_numbers=function(){var r,e;if(r=1,e=1,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),r=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(r+e),restore();qadd()},subtract_numbers=function(){var r,e;if(r=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),r=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(r-e),restore();qsub()},multiply_numbers=function(){var r,e;if(r=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),r=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(r*e),restore();qmul()},divide_numbers=function(){var r,e;if(r=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),isZeroAtomOrTensor(p2)&&stop("divide by zero"),r=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(r/e),restore();qdiv()},invert_number=function(){var r,e;return save(),p1=pop(),isZeroAtomOrTensor(p1)&&stop("divide by zero"),isdouble(p1)?(push_double(1/p1.d),void restore()):(r=bigInt(p1.q.a),e=bigInt(p1.q.b),e=makeSignSameAs(e,r),r=setSignTo(r,1),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=r,push(p1),restore())},compare_rationals=function(r,e){var t,o;return t=mmul(r.q.a,e.q.b),o=mmul(r.q.b,e.q.a),mcmp(t,o)},compare_numbers=function(r,e){var t,o;return t=0,o=0,isrational(r)&&isrational(e)?compare_rationals(r,e):(t=isdouble(r)?r.d:convert_rational_to_double(r))<(o=isdouble(e)?e.d:convert_rational_to_double(e))?-1:t>o?1:0},negate_number=function(){if(save(),p1=pop(),isZeroAtomOrTensor(p1))return push(p1),void restore();switch(p1.k){case NUM:(p2=new U).k=NUM,p2.q.a=bigInt(p1.q.a.multiply(bigInt.minusOne)),p2.q.b=bigInt(p1.q.b),push(p2);break;case DOUBLE:push_double(-p1.d);break;default:stop("bug caught in mp_negate_number")}return restore()},bignum_truncate=function(){var r;return save(),p1=pop(),r=mdiv(p1.q.a,p1.q.b),(p1=new U).k=NUM,p1.q.a=r,p1.q.b=bigInt(1),push(p1),restore()},mp_numerator=function(){return save(),(p1=pop()).k!==NUM?(push(one),void restore()):((p2=new U).k=NUM,p2.q.a=bigInt(p1.q.a),p2.q.b=bigInt(1),push(p2),restore())},mp_denominator=function(){return save(),(p1=pop()).k!==NUM?(push(one),void restore()):((p2=new U).k=NUM,p2.q.a=bigInt(p1.q.b),p2.q.b=bigInt(1),push(p2),restore())},bignum_power_number=function(r){var e,t,o;return save(),p1=pop(),e=mpow(p1.q.a,Math.abs(r)),t=mpow(p1.q.b,Math.abs(r)),r<0&&(o=e,e=makeSignSameAs(e=t,t=o),t=setSignTo(t,1)),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=t,push(p1),restore()},convert_bignum_to_double=function(r){return r.toJSNumber()},convert_rational_to_double=function(r){var e;return r.q,(e=r.q.a.divmod(r.q.b)).quotient+e.remainder/r.q.b.toJSNumber()},push_integer=function(r){return DEBUG&&console.log("pushing integer "+r),save(),(p1=new U).k=NUM,p1.q.a=bigInt(r),p1.q.b=bigInt(1),push(p1),restore()},push_double=function(r){return save(),(p1=new U).k=DOUBLE,p1.d=r,push(p1),restore()},push_rational=function(r,e){var t;return(t=new U).k=NUM,t.q.a=bigInt(r),t.q.b=bigInt(e),push(t)},pop_integer=function(){var r;switch(r=NaN,save(),(p1=pop()).k){case NUM:isinteger(p1)&&isSmall(p1.q.a)&&(r=p1.q.a.toJSNumber());break;case DOUBLE:DEBUG&&console.log("popping integer but double is found"),Math.floor(p1.d)===p1.d&&(DEBUG&&console.log("...altough it's an integer"),r=p1.d)}return restore(),r},print_double=function(r,e){var t,o;return t="",o=doubleToReasonableString(r.d),t+print_str(1===e&&"-"===o?o+1:o)},bignum_scan_integer=function(r){var e,t,o;return save(),"+"!==(o=r[t=0])&&"-"!==o||t++,e=bigInt(r.substring(t)),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=bigInt(1),push(p1),"-"===o&&negate(),restore()},bignum_scan_float=function(r){return push_double(parseFloat(r))},print_number=function(r,e){var t,o,s;switch(o="",s="",r.k){case NUM:t=r.q.a.toString(),e||"-"===t[0]&&(t=t.substring(1)),printMode===PRINTMODE_LATEX&&isfraction(r)&&(t="\\frac{"+t+"}{"),o+=t,isfraction(r)&&(printMode!==PRINTMODE_LATEX&&(o+="/"),s=r.q.b.toString(),printMode===PRINTMODE_LATEX&&(s+="}"),o+=s);break;case DOUBLE:t=doubleToReasonableString(r.d),e||"-"===t[0]&&(t=t.substring(1)),o+=t}return o},gcd_numbers=function(){return save(),p2=pop(),p1=pop(),(p3=new U).k=NUM,p3.q.a=mgcd(p1.q.a,p2.q.a),p3.q.b=mgcd(p1.q.b,p2.q.b),p3.q.a=setSignTo(p3.q.a,1),push(p3),restore()},pop_double=function(){var r;switch(r=0,save(),(p1=pop()).k){case NUM:r=convert_rational_to_double(p1);break;case DOUBLE:r=p1.d;break;default:r=0}return restore(),r},bignum_float=function(){var r;return r=convert_rational_to_double(pop()),push_double(r)},bignum_factorial=function(r){return save(),(p1=new U).k=NUM,p1.q.a=__factorial(r),p1.q.b=bigInt(1),push(p1),restore()},__factorial=function(r){var e,t,o,s,n;if(o=0,0===r||1===r)return bigInt(1);if(e=bigInt(2),t=bigInt(0),3<=r)for(o=s=3,n=r;3<=n?s<=n:s>=n;o=3<=n?++s:--s)t=bigInt(o),e=mmul(e,t);return e},mask=[1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648],mp_set_bit=function(r,e){return console.log("not implemented yet"),r[e/32]|=mask[e%32]},mp_clr_bit=function(r,e){return console.log("not implemented yet"),r[e/32]&=~mask[e%32]},mshiftright=function(r){return r.shiftRight()},Eval_binomial=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),binomial()},binomial=function(){return save(),ybinomial(),restore()},ybinomial=function(){if(p2=pop(),p1=pop(),0!==BINOM_check_args())return push(p1),factorial(),push(p2),factorial(),divide(),push(p1),push(p2),subtract(),factorial(),divide();push(zero)},BINOM_check_args=function(){return isNumericAtom(p1)&&lessp(p1,zero)||isNumericAtom(p2)&&lessp(p2,zero)||isNumericAtom(p1)&&isNumericAtom(p2)&&lessp(p1,p2)?0:1},Eval_ceiling=function(){return push(cadr(p1)),Eval(),ceiling()},ceiling=function(){return save(),yyceiling(),restore()},yyceiling=function(){var r;return r=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(r=Math.ceil(p1.d),void push_double(r)):isinteger(p1)?void push(p1):((p3=new U).k=NUM,p3.q.a=mdiv(p1.q.a,p1.q.b),p3.q.b=mint(1),push(p3),isnegativenumber(p1)?1:(push_integer(1),add())):(push_symbol(CEILING),push(p1),void list(2))},Eval_choose=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),choose()},choose=function(){return save(),p2=pop(),p1=pop(),0===choose_check_args()?(push_integer(0),void restore()):(push(p1),factorial(),push(p2),factorial(),divide(),push(p1),push(p2),subtract(),factorial(),divide(),restore())},choose_check_args=function(){return isNumericAtom(p1)&&lessp(p1,zero)||isNumericAtom(p2)&&lessp(p2,zero)||isNumericAtom(p1)&&isNumericAtom(p2)&&lessp(p1,p2)?0:1},Eval_circexp=function(){return push(cadr(p1)),Eval(),circexp(),Eval()},circexp=function(){var r,e,t,o;if(e=0,r=0,save(),p1=pop(),car(p1)===symbol(COS))return push(cadr(p1)),expcos(),void restore();if(car(p1)===symbol(SIN))return push(cadr(p1)),expsin(),void restore();if(car(p1)===symbol(TAN))return p1=cadr(p1),push(imaginaryunit),push(p1),multiply(),exponential(),p2=pop(),push(imaginaryunit),push(p1),multiply(),negate(),exponential(),p3=pop(),push(p3),push(p2),subtract(),push(imaginaryunit),multiply(),push(p2),push(p3),add(),divide(),void restore();if(car(p1)===symbol(COSH))return p1=cadr(p1),push(p1),exponential(),push(p1),negate(),exponential(),add(),push_rational(1,2),multiply(),void restore();if(car(p1)===symbol(SINH))return p1=cadr(p1),push(p1),exponential(),push(p1),negate(),exponential(),subtract(),push_rational(1,2),multiply(),void restore();if(car(p1)===symbol(TANH))return p1=cadr(p1),push(p1),push_integer(2),multiply(),exponential(),p1=pop(),push(p1),push_integer(1),subtract(),push(p1),push_integer(1),add(),divide(),void restore();if(iscons(p1)){for(r=tos;iscons(p1);)push(car(p1)),circexp(),p1=cdr(p1);return list(tos-r),void restore()}if(p1.k===TENSOR){for(push(p1),copy_tensor(),e=t=0,o=(p1=pop()).tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)push(p1.tensor.elem[e]),circexp(),p1.tensor.elem[e]=pop();return push(p1),void restore()}return push(p1),restore()},Eval_clearall=function(){return do_clearall(),push(symbol(NIL))},do_clearall=function(){return 0===test_flag&&clear_term(),do_clearPatterns(),clear_symbols(),defn(),codeGen=!1},clearall=function(){return run("clearall")},clearRenamedVariablesToAvoidBindingToExternalScope=function(){var r,e,t,o;for(o=[],r=e=0,t=symtab.length;0<=t?e<t:e>t;r=0<=t?++e:--e)-1!==symtab[r].printname.indexOf("AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE")?(symtab[r].k=SYM,symtab[r].printname="",binding[r]=symtab[r],o.push(isSymbolReclaimable[r]=!0)):o.push(void 0);return o},Eval_clear=function(){var r,e;for(p2=cdr(p1);iscons(p2);)(e=car(p2)).k!==SYM&&stop("symbol error"),r=symtab.indexOf(e),symtab[r].k=SYM,symtab[r].printname="",binding[r]=symtab[r],isSymbolReclaimable[r]=!0,p2=cdr(p2);return push(symbol(NIL))},DEBUG_CLOCKFORM=!1,Eval_clock=function(){return push(cadr(p1)),Eval(),clockform()},clockform=function(){return save(),p1=pop(),push(p1),abs(),DEBUG_CLOCKFORM&&console.log("clockform: abs of "+p1+" : "+stack[tos-1]),push_symbol(POWER),push_integer(-1),push(p1),arg(),DEBUG_CLOCKFORM&&console.log("clockform: arg of "+p1+" : "+stack[tos-1]),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),divide(),DEBUG_CLOCKFORM&&console.log("clockform: divide : "+stack[tos-1]),list(3),DEBUG_CLOCKFORM&&console.log("clockform: power : "+stack[tos-1]),multiply(),DEBUG_CLOCKFORM&&console.log("clockform: multiply : "+stack[tos-1]),restore()},Eval_coeff=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),p3=pop(),p2=pop(),p1=pop(),p3===symbol(NIL)&&(p3=p2,p2=symbol(SYMBOL_X)),push(p1),push(p2),push(p3),power(),divide(),push(p2),filter()},coeff=function(){var r,e,t;for(save(),p2=pop(),p1=pop(),r=tos;;){if(push(p1),push(p2),push(zero),subst(),Eval(),p3=pop(),push(p3),push(p1),push(p3),subtract(),p1=pop(),equal(p1,zero))return e=tos-r,restore(),e;push(p1),push(p2),t=expanding,expanding=1,divide(),expanding=t,p1=pop()}},Eval_cofactor=function(){var r,e,t;return push(cadr(p1)),Eval(),p2=pop(),istensor(p2)&&2===p2.tensor.ndim&&p2.tensor.dim[0]===p2.tensor.dim[1]||stop("cofactor: 1st arg: square matrix expected"),t=p2.tensor.dim[0],push(caddr(p1)),Eval(),((r=pop_integer())<1||r>t)&&stop("cofactor: 2nd arg: row index expected"),push(cadddr(p1)),Eval(),((e=pop_integer())<1||e>t)&&stop("cofactor: 3rd arg: column index expected"),cofactor(p2,t,r-1,e-1)},cofactor=function(r,e,t,o){var s,n,p,a,i,u;for(s=0,p=0,s=a=0,i=e;0<=i?a<i:a>i;s=0<=i?++a:--a)for(p=n=0,u=e;0<=u?n<u:n>u;p=0<=u?++n:--n)s!==t&&p!==o&&push(r.tensor.elem[e*s+p]);if(determinant(e-1),(t+o)%2)return negate()},Eval_condense=function(){return push(cadr(p1)),Eval(),Condense()},Condense=function(){var r;return r=expanding,expanding=0,save(),yycondense(),restore(),expanding=r},yycondense=function(){if(p1=pop(),car(p1)===symbol(ADD)){for(p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);for(inverse(),p2=pop(),push(zero),p3=cdr(p1);iscons(p3);)push(p2),push(car(p3)),multiply_noexpand(),add(),p3=cdr(p3);return yyexpand(),push(p2),divide()}push(p1)},Eval_conj=function(){return push(cadr(p1)),Eval(),p1=pop(),push(p1),Find(p1,imaginaryunit)?conjugate():(polar(),conjugate(),clockform())},conjugate=function(){return push(imaginaryunit),push(imaginaryunit),negate(),subst(),Eval()},consCount=0,cons=function(){var r;return consCount++,DEBUG&&console.log("cons tos: "+tos+" # "+consCount),(r=new U).k=CONS,r.cons.cdr=pop(),r===r.cons.cdr&&console.log("something wrong p == its cdr"),r.cons.car=pop(),push(r)},Eval_contract=function(){return push(cadr(p1)),Eval(),cddr(p1)===symbol(NIL)?(push_integer(1),push_integer(2)):(push(caddr(p1)),Eval(),push(cadddr(p1)),Eval()),contract()},contract=function(){return save(),yycontract(),restore()},yycontract=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O;if(s=0,n=0,a=0,u=0,l=0,d=0,g=0,e=[],t=[],p3=pop(),p2=pop(),p1=pop(),!istensor(p1))return isZeroAtomOrTensor(p1)||stop("contract: tensor expected, 1st arg is not a tensor"),void push(zero);for(push(p2),l=pop_integer(),push(p3),d=pop_integer(),h=p1.tensor.ndim,(l<1||l>h||d<1||d>h||l===d||p1.tensor.dim[l-1]!==p1.tensor.dim[d-1])&&stop("contract: index out of range"),l--,d--,m=p1.tensor.dim[l],g=1,n=b=0,v=h;0<=v?b<v:b>v;n=0<=v?++b:--b)n!==l&&n!==d&&(g*=p1.tensor.dim[n]);for((p2=alloc_tensor(g)).tensor.ndim=h-2,a=0,n=p=0,x=h;0<=x?p<x:p>x;n=0<=x?++p:--p)n!==l&&n!==d&&(p2.tensor.dim[a++]=p1.tensor.dim[n]);for(r=p1.tensor.elem,o=p2.tensor.elem,n=i=0,E=h;0<=E?i<E:i>E;n=0<=E?++i:--i)e[n]=0,t[n]=p1.tensor.dim[n];for(n=c=0,A=g;0<=A?c<A:c>A;n=0<=A?++c:--c){for(push(zero),a=_=0,T=m;0<=T?_<T:_>T;a=0<=T?++_:--_){for(e[l]=a,e[d]=a,s=0,u=f=0,I=h;0<=I?f<I:f>I;u=0<=I?++f:--f)s=s*t[u]+e[u];push(r[s]),add()}for(o[n]=pop(),a=y=O=h-1;O<=0?y<=0:y>=0;a=O<=0?++y:--y)if(a!==l&&a!==d){if(++e[a]<t[a])break;e[a]=0}}return push(1===g?o[0]:p2)},Eval_cos=function(){return push(cadr(p1)),Eval(),cosine()},cosine=function(){return save(),p1=pop(),car(p1)===symbol(ADD)?cosine_of_angle_sum():cosine_of_angle(),restore()},cosine_of_angle_sum=function(){for(p2=cdr(p1);iscons(p2);){if(p4=car(p2),isnpi(p4))return push(p1),push(p4),subtract(),p3=pop(),push(p3),cosine(),push(p4),cosine(),multiply(),push(p3),sine(),push(p4),sine(),multiply(),void subtract();p2=cdr(p2)}return cosine_of_angle()},cosine_of_angle=function(){var r,e;if(car(p1)!==symbol(ARCCOS)){if(isdouble(p1))return r=Math.cos(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(isnegative(p1)&&(push(p1),negate(),p1=pop()),car(p1)===symbol(ARCTAN))return push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),push_rational(-1,2),void power();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(COS)),push(p1),void list(2);switch(e%360){case 90:case 270:return push_integer(0);case 60:case 300:return push_rational(1,2);case 120:case 240:return push_rational(-1,2);case 45:case 315:return push_rational(1,2),push_integer(2),push_rational(1,2),power(),multiply();case 135:case 225:return push_rational(-1,2),push_integer(2),push_rational(1,2),power(),multiply();case 30:case 330:return push_rational(1,2),push_integer(3),push_rational(1,2),power(),multiply();case 150:case 210:return push_rational(-1,2),push_integer(3),push_rational(1,2),power(),multiply();case 0:return push_integer(1);case 180:return push_integer(-1);default:return push(symbol(COS)),push(p1),list(2)}}else push(cadr(p1))},Eval_cosh=function(){return push(cadr(p1)),Eval(),ycosh()},ycosh=function(){return save(),yycosh(),restore()},yycosh=function(){var r;if(r=0,p1=pop(),car(p1)!==symbol(ARCCOSH)){if(isdouble(p1))return r=Math.cosh(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(!isZeroAtomOrTensor(p1))return push_symbol(COSH),push(p1),list(2);push(one)}else push(cadr(p1))},Eval_decomp=function(){var r;return save(),console.log("Eval_decomp is being called!!!!!!!!!!!!!!!!!!!!"),r=tos,push(symbol(NIL)),push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),decomp(!1),list(tos-r),restore()},pushTryNotToDuplicate=function(r){if(!(tos>0&&(DEBUG&&console.log("comparing "+r+" to: "+stack[tos-1]),equal(r,stack[tos-1]))))return push(r);DEBUG&&console.log("skipping "+r+" because it's already on stack ")},decomp=function(r){if(save(),p2=pop(),p1=pop(),DEBUG&&console.log("DECOMPOSING "+p1),r){if(!iscons(p1))return DEBUG&&console.log(" ground thing: "+p1),pushTryNotToDuplicate(p1),void restore()}else if(0===Find(p1,p2))return DEBUG&&console.log(" entire expression is constant"),pushTryNotToDuplicate(p1),void restore();if(isadd(p1))return decomp_sum(r),void restore();if(ismultiply(p1))return decomp_product(r),void restore();for(DEBUG&&console.log(" naive decomp"),p3=cdr(p1),DEBUG&&console.log("startig p3: "+p3);iscons(p3);)r&&push(car(p3)),DEBUG&&console.log("recursive decomposition"),push(car(p3)),DEBUG&&console.log("car(p3): "+car(p3)),push(p2),DEBUG&&console.log("p2: "+p2),decomp(r),p3=cdr(p3);return restore()},decomp_sum=function(r){var e;for(DEBUG&&console.log(" decomposing the sum "),p3=cdr(p1);iscons(p3);)(Find(car(p3),p2)||r)&&(push(car(p3)),push(p2),decomp(r)),p3=cdr(p3);for(e=tos,p3=cdr(p1);iscons(p3);)0===Find(car(p3),p2)&&pushTryNotToDuplicate(car(p3)),p3=cdr(p3);if(tos-e)return add_all(tos-e),p3=pop(),pushTryNotToDuplicate(p3),push(p3),negate()},decomp_product=function(r){var e;for(DEBUG&&console.log(" decomposing the product "),p3=cdr(p1);iscons(p3);)(Find(car(p3),p2)||r)&&(push(car(p3)),push(p2),decomp(r)),p3=cdr(p3);for(e=tos,p3=cdr(p1);iscons(p3);)0===Find(car(p3),p2)&&pushTryNotToDuplicate(car(p3)),p3=cdr(p3);if(tos-e)return multiply_all(tos-e)},define_user_function=function(){return p3=caadr(p1),p4=cdadr(p1),p5=caddr(p1),issymbol(p3)||stop("function name?"),car(p5)===symbol(EVAL)&&(push(cadr(p5)),Eval(),p5=pop()),push_symbol(FUNCTION),push(p5),push(p4),list(3),p5=pop(),set_binding(p3,p5),push_symbol(NIL)},Eval_function_reference=function(){return push(p1)},Eval_defint=function(){for(push(cadr(p1)),Eval(),p2=pop(),p1=cddr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1),Eval(),p3=pop(),push(car(p1)),p1=cdr(p1),Eval(),p4=pop(),push(car(p1)),p1=cdr(p1),Eval(),p5=pop(),push(p2),push(p3),integral(),p2=pop(),push(p2),push(p3),push(p5),subst(),Eval(),push(p2),push(p3),push(p4),subst(),Eval(),subtract(),p2=pop();return push(p2)},Eval_degree=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),degree()},degree=function(){return save(),p2=pop(),p1=pop(),p3=zero,yydegree(p1),push(p3),restore()},yydegree=function(r){var e;if(equal(r,p2)){if(isZeroAtomOrTensor(p3))return p3=one}else if(car(r)===symbol(POWER)){if(equal(cadr(r),p2)&&isNumericAtom(caddr(r))&&lessp(p3,caddr(r)))return p3=caddr(r)}else if(iscons(r)){for(r=cdr(r),e=[];iscons(r);)yydegree(car(r)),e.push(r=cdr(r));return e}},Eval_denominator=function(){return push(cadr(p1)),Eval(),denominator()},denominator=function(){var r,e;if(0,e=pop(),car(e)===symbol(ADD)&&(push(e),rationalize(),e=pop()),car(e)!==symbol(MULTIPLY)||isplusone(car(cdr(e))))return isrational(e)?(push(e),mp_denominator()):car(e)===symbol(POWER)&&isnegativeterm(caddr(e))?(push(e),reciprocate()):push(one);for(r=tos,e=cdr(e);iscons(e);)push(car(e)),denominator(),e=cdr(e);return multiply_all(tos-r)},Eval_derivative=function(){var r,e,t,o,s;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?(guess(),push(symbol(NIL))):isNumericAtom(p2)?(guess(),push(p2)):(push(p2),p1=cdr(p1),push(car(p1)),Eval()),p5=pop(),p4=pop(),p3=pop();;){if(isNumericAtom(p5)?(push(p5),e=pop_integer(),isNaN(e)&&stop("nth derivative: check n")):e=1,push(p3),e>=0)for(t=0,o=e;0<=o?t<o:t>o;0<=o?++t:--t)push(p4),derivative();else for(r=0,s=e=-e;0<=s?r<s:r>s;0<=s?++r:--r)push(p4),integral();if(p3=pop(),p5===symbol(NIL))break;if(isNumericAtom(p5)){if(p1=cdr(p1),push(car(p1)),Eval(),(p5=pop())===symbol(NIL))break;isNumericAtom(p5)||(p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop())}else p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop()}return push(p3)},derivative=function(){return save(),p2=pop(),p1=pop(),isNumericAtom(p2)&&stop("undefined function"),istensor(p1)?istensor(p2)?d_tensor_tensor():d_tensor_scalar():istensor(p2)?d_scalar_tensor():d_scalar_scalar(),restore()},d_scalar_scalar=function(){return issymbol(p2)?d_scalar_scalar_1():(push(p1),push(p2),push(symbol(SECRETX)),subst(),push(symbol(SECRETX)),derivative(),push(symbol(SECRETX)),push(p2),subst())},d_scalar_scalar_1=function(){if(equal(p1,p2))push(one);else if(iscons(p1))if(isadd(p1))dsum();else if(car(p1)!==symbol(MULTIPLY))if(car(p1)!==symbol(POWER))if(car(p1)!==symbol(DERIVATIVE))if(car(p1)!==symbol(LOG))if(car(p1)!==symbol(SIN))if(car(p1)!==symbol(COS))if(car(p1)!==symbol(TAN))if(car(p1)!==symbol(ARCSIN))if(car(p1)!==symbol(ARCCOS))if(car(p1)!==symbol(ARCTAN))if(car(p1)!==symbol(SINH))if(car(p1)!==symbol(COSH))if(car(p1)!==symbol(TANH))if(car(p1)!==symbol(ARCSINH))if(car(p1)!==symbol(ARCCOSH))if(car(p1)!==symbol(ARCTANH))if(car(p1)!==symbol(ABS))if(car(p1)!==symbol(SGN))if(car(p1)!==symbol(HERMITE))if(car(p1)!==symbol(ERF))if(car(p1)!==symbol(ERFC))if(car(p1)!==symbol(BESSELJ))if(car(p1)!==symbol(BESSELY)){if(car(p1)!==symbol(INTEGRAL)||caddr(p1)!==p2)return dfunction();derivative_of_integral()}else isZeroAtomOrTensor(caddr(p1))?dbessely0():dbesselyn();else isZeroAtomOrTensor(caddr(p1))?dbesselj0():dbesseljn();else derfc();else derf();else dhermite();else dsgn();else dabs();else darctanh();else darccosh();else darcsinh();else dtanh();else dcosh();else dsinh();else darctan();else darccos();else darcsin();else dtan();else dcos();else dsin();else dlog();else dd();else dpower();else dproduct();else push(zero)},dsum=function(){var r;for(r=tos,p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),derivative(),p1=cdr(p1);return add_all(tos-r)},dproduct=function(){var r,e,t,o,s,n,p;for(r=0,t=0,r=s=0,n=o=length(p1)-1;0<=n?s<n:s>n;r=0<=n?++s:--s){for(p3=cdr(p1),t=e=0,p=o;0<=p?e<p:e>p;t=0<=p?++e:--e)push(car(p3)),r===t&&(push(p2),derivative()),p3=cdr(p3);multiply_all(o)}return add_all(o)},dpower=function(){return push(caddr(p1)),push(cadr(p1)),divide(),push(cadr(p1)),push(p2),derivative(),multiply(),push(cadr(p1)),logarithm(),push(caddr(p1)),push(p2),derivative(),multiply(),add(),push(p1),multiply()},dlog=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),divide()},dd=function(){return push(cadr(p1)),push(p2),derivative(),p3=pop(),car(p3)===symbol(DERIVATIVE)?(push_symbol(DERIVATIVE),push_symbol(DERIVATIVE),push(cadr(p3)),lessp(caddr(p3),caddr(p1))?(push(caddr(p3)),list(3),push(caddr(p1))):(push(caddr(p1)),list(3),push(caddr(p3))),list(3)):(push(p3),push(caddr(p1)),derivative())},dfunction=function(){return(p3=cdr(p1))===symbol(NIL)||Find(p3,p2)?(push_symbol(DERIVATIVE),push(p1),push(p2),list(3)):push(zero)},dsin=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),cosine(),multiply()},dcos=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),sine(),multiply(),negate()},dtan=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),cosine(),push_integer(-2),power(),multiply()},darcsin=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),push_rational(-1,2),power(),multiply()},darccos=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),push_rational(-1,2),power(),multiply(),negate()},darctan=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),inverse(),multiply(),simplify()},dsinh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ycosh(),multiply()},dcosh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ysinh(),multiply()},dtanh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ycosh(),push_integer(-2),power(),multiply()},darcsinh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(2),power(),push_integer(1),add(),push_rational(-1,2),power(),multiply()},darccosh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(2),power(),push_integer(-1),add(),push_rational(-1,2),power(),multiply()},darctanh=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),inverse(),multiply()},dabs=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),sgn(),multiply()},dsgn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),dirac(),multiply(),push_integer(2),multiply()},dhermite=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(2),push(caddr(p1)),multiply(),multiply(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),hermite(),multiply()},derf=function(){return push(cadr(p1)),push_integer(2),power(),push_integer(-1),multiply(),exponential(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(-1,2),power(),multiply(),push_integer(2),multiply(),push(cadr(p1)),push(p2),derivative(),multiply()},derfc=function(){return push(cadr(p1)),push_integer(2),power(),push_integer(-1),multiply(),exponential(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(-1,2),power(),multiply(),push_integer(-2),multiply(),push(cadr(p1)),push(p2),derivative(),multiply()},dbesselj0=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(1),besselj(),multiply(),push_integer(-1),multiply()},dbesseljn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),besselj(),push(caddr(p1)),push_integer(-1),multiply(),push(cadr(p1)),divide(),push(cadr(p1)),push(caddr(p1)),besselj(),multiply(),add(),multiply()},dbessely0=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(1),besselj(),multiply(),push_integer(-1),multiply()},dbesselyn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),bessely(),push(caddr(p1)),push_integer(-1),multiply(),push(cadr(p1)),divide(),push(cadr(p1)),push(caddr(p1)),bessely(),multiply(),add(),multiply()},derivative_of_integral=function(){return push(cadr(p1))},DET_check_arg=function(){return istensor(p1)?2!==p1.tensor.ndim||p1.tensor.dim[0]!==p1.tensor.dim[1]?0:1:0},det=function(){var r,e,t,o,s,n,p;if(e=0,save(),p1=pop(),0===DET_check_arg())return push_symbol(DET),push(p1),list(2),void restore();for(o=p1.tensor.nelem,r=p1.tensor.elem,e=s=0,n=o;(0<=n?s<n:s>n)&&isNumericAtom(r[e]);e=0<=n?++s:--s);if(e===o)yydetg();else{for(e=t=0,p=p1.tensor.nelem;0<=p?t<p:t>p;e=0<=p?++t:--t)push(p1.tensor.elem[e]);determinant(p1.tensor.dim[0])}return restore()},determinant=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;for(s=0,p=0,a=0,u=0,d=0,_=0,m=0,e=[],o=tos-r*r,s=i=0,l=r;0<=l?i<l:i>l;s=0<=l?++i:--i)e[s]=s,e[s+r]=0,e[s+r+r]=1;for(_=1,push(zero);;){for(push_integer(1===_?1:-1),s=n=0,c=r;0<=c?n<c:n>c;s=0<=c?++n:--n)a=r*e[s]+s,push(stack[o+a]),multiply();for(add(),p=r-1,d=0,t=!1;;)if((u=e[r+p]+e[r+r+p])<0)e[r+r+p]=-e[r+r+p],p--;else{if(u!==p+1)break;if(0===p){t=!0;break}d++,e[r+r+p]=-e[r+r+p],p--}if(t)break;m=e[p-e[r+p]+d],e[p-e[r+p]+d]=e[p-u+d],e[p-u+d]=m,e[r+p]=u,_=-_}return stack[o]=stack[tos-1],moveTos(o+1)},detg=function(){return save(),p1=pop(),0===DET_check_arg()?(push_symbol(DET),push(p1),list(2),void restore()):(yydetg(),restore())},yydetg=function(){var r,e,t,o;for(r=0,r=t=0,o=(e=p1.tensor.dim[0])*e;0<=o?t<o:t>o;r=0<=o?++t:--t)push(p1.tensor.elem[r]);return lu_decomp(e),moveTos(tos-e*e),push(p1)},M=function(r,e,t,o){return stack[r+e*t+o]},setM=function(r,e,t,o,s){return stack[r+e*t+o]=s},lu_decomp=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b;for(e=0,o=0,n=0,t=tos-r*r,p1=one,e=u=0,l=r-1;0<=l?u<l:u>l;e=0<=l?++u:--u){if(equal(M(t,r,e,e),zero)){for(o=s=c=e+1,d=r;(c<=d?s<d:s>d)&&equal(M(t,r,o,e),zero);o=c<=d?++s:--s);if(o===r){p1=zero;break}for(n=p=_=e,m=r;_<=m?p<m:p>m;n=_<=m?++p:--p)p2=M(t,r,e,n),setM(t,r,e,n,M(t,r,o,n)),setM(t,r,o,n,p2);push(p1),negate(),p1=pop()}for(push(p1),push(M(t,r,e,e)),multiply(),p1=pop(),o=a=f=e+1,h=r;f<=h?a<h:a>h;o=f<=h?++a:--a)for(push(M(t,r,o,e)),push(M(t,r,e,e)),divide(),negate(),p2=pop(),setM(t,r,o,e,zero),n=i=g=e+1,b=r;g<=b?i<b:i>b;n=g<=b?++i:--i)push(M(t,r,e,n)),push(p2),multiply(),push(M(t,r,o,n)),add(),setM(t,r,o,n,pop())}return push(p1),push(M(t,r,r-1,r-1)),multiply(),p1=pop()},Eval_dirac=function(){return push(cadr(p1)),Eval(),dirac()},dirac=function(){return save(),ydirac(),restore()},ydirac=function(){return p1=pop(),isdouble(p1)?0===p1.d?void push_integer(1):void push_integer(0):isrational(p1)?MZERO(mmul(p1.q.a,p1.q.b))?void push_integer(1):void push_integer(0):car(p1)===symbol(POWER)?(push_symbol(DIRAC),push(cadr(p1)),void list(2)):isnegativeterm(p1)?(push_symbol(DIRAC),push(p1),negate(),void list(2)):((isnegativeterm(p1)||car(p1)===symbol(ADD)&&isnegativeterm(cadr(p1)))&&(push(p1),negate(),p1=pop()),push_symbol(DIRAC),push(p1),list(2))},divisors=function(){var r,e,t,o,s,n;for(e=0,save(),r=tos-1,divisors_onstack(),t=tos-r,(n=stack.slice(r,r+t)).sort(cmp_expr),stack=stack.slice(0,r).concat(n).concat(stack.slice(r+t)),(p1=alloc_tensor(t)).tensor.ndim=1,p1.tensor.dim[0]=t,e=o=0,s=t;0<=s?o<s:o>s;e=0<=s?++o:--o)p1.tensor.elem[e]=stack[r+e];return moveTos(r),push(p1),restore()},divisors_onstack=function(){var r,e,t,o,s,n;if(e=0,save(),p1=pop(),r=tos,isNumericAtom(p1))push(p1),factor_small_number();else if(car(p1)===symbol(ADD))push(p1),__factor_add();else if(car(p1)===symbol(MULTIPLY))for(p1=cdr(p1),isNumericAtom(car(p1))&&(push(car(p1)),factor_small_number(),p1=cdr(p1));iscons(p1);)p2=car(p1),car(p2)===symbol(POWER)?(push(cadr(p2)),push(caddr(p2))):(push(p2),push(one)),p1=cdr(p1);else car(p1)===symbol(POWER)?(push(cadr(p1)),push(caddr(p1))):(push(p1),push(one));for(t=tos,push(one),gen(r,t),e=s=0,n=o=tos-t;0<=n?s<n:s>n;e=0<=n?++s:--s)stack[r+e]=stack[t+e];return moveTos(r+o),restore()},gen=function(r,e){var t,o,s,n;if(o=0,save(),p1=pop(),r===e)return push(p1),void restore();if(p2=stack[r+0],p3=stack[r+1],push(p3),t=pop_integer(),!isNaN(t))for(o=s=0,n=Math.abs(t);0<=n?s<=n:s>=n;o=0<=n?++s:--s)push(p1),push(p2),push_integer(sign(t)*o),power(),multiply(),gen(r+2,e);return restore()},__factor_add=function(){for(save(),p1=pop(),p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);if(p2=pop(),isplusone(p2))return push(p1),push(one),void restore();if(isNumericAtom(p2))push(p2),factor_small_number();else if(car(p2)===symbol(MULTIPLY))for(p3=cdr(p2),isNumericAtom(car(p3))?(push(car(p3)),factor_small_number()):(push(car(p3)),push(one)),p3=cdr(p3);iscons(p3);)push(car(p3)),push(one),p3=cdr(p3);else push(p2),push(one);for(push(p2),inverse(),p2=pop(),push(zero),p3=cdr(p1);iscons(p3);)push(p2),push(car(p3)),multiply(),add(),p3=cdr(p3);return push(one),restore()},dpow=function(){var r,e,t,o,s,n;return r=0,e=0,s=0,o=pop_double(),0===(t=pop_double())&&o<0&&stop("divide by zero"),t>=0||o%1==0?(s=Math.pow(t,o),void push_double(s)):(s=Math.pow(Math.abs(t),o),n=Math.PI*o,o%.5==0?(r=0,e=Math.sin(n)):(r=Math.cos(n),e=Math.sin(n)),push_double(r*s),push_double(e*s),push(imaginaryunit),multiply(),add())},EIG_N=0,EIG_yydd=[],EIG_yyqq=[],Eval_eigen=function(){return 0===EIG_check_arg()&&stop("eigen: argument is not a square matrix"),eigen(EIGEN),p1=usr_symbol("D"),set_binding(p1,p2),p1=usr_symbol("Q"),set_binding(p1,p3),push(symbol(NIL))},Eval_eigenval=function(){return 0===EIG_check_arg()?(push_symbol(EIGENVAL),push(p1),void list(2)):(eigen(EIGENVAL),push(p2))},Eval_eigenvec=function(){return 0===EIG_check_arg()?(push_symbol(EIGENVEC),push(p1),void list(2)):(eigen(EIGENVEC),push(p3))},EIG_check_arg=function(){var r,e,t,o,s,n,p,a,i,u,l;if(r=0,t=0,push(cadr(p1)),Eval(),yyfloat(),Eval(),p1=pop(),!istensor(p1))return 0;for(2===p1.tensor.ndim&&p1.tensor.dim[0]===p1.tensor.dim[1]||stop("eigen: argument is not a square matrix"),r=n=0,p=EIG_N=p1.tensor.dim[0];0<=p?n<p:n>p;r=0<=p?++n:--n)for(t=e=0,a=EIG_N;0<=a?e<a:e>a;t=0<=a?++e:--e)isdouble(p1.tensor.elem[EIG_N*r+t])||stop("eigen: matrix is not numerical");for(r=o=0,i=EIG_N-1;0<=i?o<i:o>i;r=0<=i?++o:--o)for(t=s=u=r+1,l=EIG_N;u<=l?s<l:s>l;t=u<=l?++s:--s)Math.abs(p1.tensor.elem[EIG_N*r+t].d-p1.tensor.elem[EIG_N*t+r].d)>1e-10&&stop("eigen: matrix is not symmetrical");return 1},eigen=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T;for(e=0,o=0,e=i=0,d=EIG_N*EIG_N;0<=d?i<d:i>d;e=0<=d?++i:--i)EIG_yydd[e]=0;for(e=t=0,_=EIG_N*EIG_N;0<=_?t<_:t>_;e=0<=_?++t:--t)EIG_yyqq[e]=0;for(e=s=0,f=EIG_N;0<=f?s<f:s>f;e=0<=f?++s:--s)for(EIG_yydd[EIG_N*e+e]=p1.tensor.elem[EIG_N*e+e].d,o=n=h=e+1,g=EIG_N;h<=g?n<g:n>g;o=h<=g?++n:--n)EIG_yydd[EIG_N*e+o]=p1.tensor.elem[EIG_N*e+o].d,EIG_yydd[EIG_N*o+e]=p1.tensor.elem[EIG_N*e+o].d;for(e=p=0,b=EIG_N;0<=b?p<b:p>b;e=0<=b?++p:--p)for(EIG_yyqq[EIG_N*e+e]=1,o=a=y=e+1,v=EIG_N;y<=v?a<v:a>v;o=y<=v?++a:--a)EIG_yyqq[EIG_N*e+o]=0,EIG_yyqq[EIG_N*o+e]=0;for(e=u=0;u<100&&0!==step();e=++u);if(100===e&&printstr("\nnote: eigen did not converge\n"),r===EIGEN||r===EIGENVAL)for(push(p1),copy_tensor(),p2=pop(),e=l=0,x=EIG_N;0<=x?l<x:l>x;e=0<=x?++l:--l)for(o=c=0,E=EIG_N;0<=E?c<E:c>E;o=0<=E?++c:--c)push_double(EIG_yydd[EIG_N*e+o]),p2.tensor.elem[EIG_N*e+o]=pop();if(r===EIGEN||r===EIGENVEC){for(push(p1),copy_tensor(),p3=pop(),A=[],e=T=0,m=EIG_N;0<=m?T<m:T>m;e=0<=m?++T:--T)A.push(function(){var r,t,s;for(t=[],o=s=0,r=EIG_N;0<=r?s<r:s>r;o=0<=r?++s:--s)push_double(EIG_yyqq[EIG_N*e+o]),t.push(p3.tensor.elem[EIG_N*e+o]=pop());return t}());return A}},step=function(){var r,e,t,o,s,n,p,a;for(e=0,o=0,r=0,e=s=0,n=EIG_N-1;0<=n?s<n:s>n;e=0<=n?++s:--s)for(o=t=p=e+1,a=EIG_N;p<=a?t<a:t>a;o=p<=a?++t:--t)0!==EIG_yydd[EIG_N*e+o]&&(step2(e,o),r++);return r},step2=function(r,e){var t,o,s,n,p,a,i,u,l,c,d,_,m;for(p=0,_=0,o=0,d=0,m=.5*(EIG_yydd[EIG_N*r+r]-EIG_yydd[EIG_N*e+e])/EIG_yydd[EIG_N*r+e],_=1/(Math.abs(m)+Math.sqrt(m*m+1)),m<0&&(_=-_),c=_*(t=1/Math.sqrt(_*_+1)),p=a=0,i=EIG_N;0<=i?a<i:a>i;p=0<=i?++a:--a)o=EIG_yydd[EIG_N*r+p],d=EIG_yydd[EIG_N*e+p],EIG_yydd[EIG_N*r+p]=t*o+c*d,EIG_yydd[EIG_N*e+p]=t*d-c*o;for(p=s=0,u=EIG_N;0<=u?s<u:s>u;p=0<=u?++s:--s)o=EIG_yydd[EIG_N*p+r],d=EIG_yydd[EIG_N*p+e],EIG_yydd[EIG_N*p+r]=t*o+c*d,EIG_yydd[EIG_N*p+e]=t*d-c*o;for(p=n=0,l=EIG_N;0<=l?n<l:n>l;p=0<=l?++n:--n)o=EIG_yyqq[EIG_N*r+p],d=EIG_yyqq[EIG_N*e+p],EIG_yyqq[EIG_N*r+p]=t*o+c*d,EIG_yyqq[EIG_N*e+p]=t*d-c*o;return EIG_yydd[EIG_N*r+e]=0,EIG_yydd[EIG_N*e+r]=0},Eval_erf=function(){return push(cadr(p1)),Eval(),yerf()},yerf=function(){return save(),yyerf(),restore()},yyerf=function(){var r;if(r=0,p1=pop(),isdouble(p1))return r=1-erfc(p1.d),void push_double(r);if(isZeroAtomOrTensor(p1))push(zero);else{if(isnegativeterm(p1))return push_symbol(ERF),push(p1),negate(),list(2),void negate();push_symbol(ERF),push(p1),list(2)}},Eval_erfc=function(){return push(cadr(p1)),Eval(),yerfc()},yerfc=function(){return save(),yyerfc(),restore()},yyerfc=function(){var r;if(r=0,p1=pop(),isdouble(p1))return r=erfc(p1.d),void push_double(r);isZeroAtomOrTensor(p1)?push(one):(push_symbol(ERFC),push(p1),list(2))},erfc=function(r){var e,t,o;return 0===r?1:(e=(t=1/(1+.5*(o=Math.abs(r))))*Math.exp(-o*o-1.26551223+t*(1.00002368+t*(.37409196+t*(.09678418+t*(t*(.27886807+t*(t*(1.48851587+t*(.17087277*t-.82215223))-1.13520398))-.18628806))))),r>=0?e:2-e)},Eval=function(){var r;switch(check_esc_flag(),save(),p1=pop(),!evaluatingAsFloats&&isfloating(p1)&&(r=!0,evaluatingAsFloats++),p1.k){case CONS:Eval_cons();break;case NUM:evaluatingAsFloats?push_double(convert_rational_to_double(p1)):push(p1);break;case DOUBLE:case STR:push(p1);break;case TENSOR:Eval_tensor();break;case SYM:Eval_sym();break;default:stop("atom?")}return r&&evaluatingAsFloats--,restore()},Eval_sym=function(){var r,e,t,o,s,n;if(iskeyword(p1))return push(p1),push(symbol(LAST)),list(2),void Eval();if(p1===symbol(PI)&&evaluatingAsFloats)push_double(Math.PI);else if(p2=get_binding(p1),DEBUG&&console.log("looked up: "+p1+" which contains: "+p2),push(p2),p1!==p2){if(-1!==(o=chainOfUserSymbolsNotFunctionsBeingEvaluated.indexOf(p1))){for(r="",e=t=s=o,n=chainOfUserSymbolsNotFunctionsBeingEvaluated.length;s<=n?t<n:t>n;e=s<=n?++t:--t)r+=chainOfUserSymbolsNotFunctionsBeingEvaluated[e].printname+" -> ";return r+=p1.printname,void stop("recursive evaluation of symbols: "+r)}return chainOfUserSymbolsNotFunctionsBeingEvaluated.push(p1),Eval(),chainOfUserSymbolsNotFunctionsBeingEvaluated.pop()}},Eval_cons=function(){var r;if(r=car(p1),car(r)!==symbol(EVAL))switch(issymbol(r)||stop("cons?"),symnum(r)){case ABS:return Eval_abs();case ADD:return Eval_add();case ADJ:return Eval_adj();case AND:return Eval_and();case ARCCOS:return Eval_arccos();case ARCCOSH:return Eval_arccosh();case ARCSIN:return Eval_arcsin();case ARCSINH:return Eval_arcsinh();case ARCTAN:return Eval_arctan();case ARCTANH:return Eval_arctanh();case ARG:return Eval_arg();case ATOMIZE:return Eval_atomize();case BESSELJ:return Eval_besselj();case BESSELY:return Eval_bessely();case BINDING:return Eval_binding();case BINOMIAL:return Eval_binomial();case CEILING:return Eval_ceiling();case CHECK:return Eval_check();case CHOOSE:return Eval_choose();case CIRCEXP:return Eval_circexp();case CLEAR:return Eval_clear();case CLEARALL:return Eval_clearall();case CLEARPATTERNS:return Eval_clearpatterns();case CLOCK:return Eval_clock();case COEFF:return Eval_coeff();case COFACTOR:return Eval_cofactor();case CONDENSE:return Eval_condense();case CONJ:return Eval_conj();case CONTRACT:return Eval_contract();case COS:return Eval_cos();case COSH:return Eval_cosh();case DECOMP:return Eval_decomp();case DEGREE:return Eval_degree();case DEFINT:return Eval_defint();case DENOMINATOR:return Eval_denominator();case DERIVATIVE:return Eval_derivative();case DET:return Eval_det();case DIM:return Eval_dim();case DIRAC:return Eval_dirac();case DIVISORS:return Eval_divisors();case DO:return Eval_do();case DOT:return Eval_inner();case DRAW:return Eval_draw();case DSOLVE:return Eval_dsolve();case EIGEN:return Eval_eigen();case EIGENVAL:return Eval_eigenval();case EIGENVEC:return Eval_eigenvec();case ERF:return Eval_erf();case ERFC:return Eval_erfc();case EVAL:return Eval_Eval();case EXP:return Eval_exp();case EXPAND:return Eval_expand();case EXPCOS:return Eval_expcos();case EXPSIN:return Eval_expsin();case FACTOR:return Eval_factor();case FACTORIAL:return Eval_factorial();case FACTORPOLY:return Eval_factorpoly();case FILTER:return Eval_filter();case FLOATF:return Eval_float();case APPROXRATIO:return Eval_approxratio();case FLOOR:return Eval_floor();case FOR:return Eval_for();case FUNCTION:return Eval_function_reference();case GAMMA:return Eval_gamma();case GCD:return Eval_gcd();case HERMITE:return Eval_hermite();case HILBERT:return Eval_hilbert();case IMAG:return Eval_imag();case INDEX:return Eval_index();case INNER:return Eval_inner();case INTEGRAL:return Eval_integral();case INV:return Eval_inv();case INVG:return Eval_invg();case ISINTEGER:return Eval_isinteger();case ISPRIME:return Eval_isprime();case LAGUERRE:return Eval_laguerre();case LCM:return Eval_lcm();case LEADING:return Eval_leading();case LEGENDRE:return Eval_legendre();case LOG:return Eval_log();case LOOKUP:return Eval_lookup();case MOD:return Eval_mod();case MULTIPLY:return Eval_multiply();case NOT:return Eval_not();case NROOTS:return Eval_nroots();case NUMBER:return Eval_number();case NUMERATOR:return Eval_numerator();case OPERATOR:return Eval_operator();case OR:return Eval_or();case OUTER:return Eval_outer();case PATTERN:return Eval_pattern();case PATTERNSINFO:return Eval_patternsinfo();case POLAR:return Eval_polar();case POWER:return Eval_power();case PRIME:return Eval_prime();case PRINT:return Eval_print();case PRINT2DASCII:return Eval_print2dascii();case PRINTFULL:return Eval_printcomputer();case PRINTLATEX:return Eval_printlatex();case PRINTLIST:return Eval_printlist();case PRINTPLAIN:return Eval_printhuman();case PRODUCT:return Eval_product();case QUOTE:return Eval_quote();case QUOTIENT:return Eval_quotient();case RANK:return Eval_rank();case RATIONALIZE:return Eval_rationalize();case REAL:return Eval_real();case ROUND:return Eval_round();case YYRECT:return Eval_rect();case ROOTS:return Eval_roots();case SETQ:return Eval_setq();case SGN:return Eval_sgn();case SILENTPATTERN:return Eval_silentpattern();case SIMPLIFY:return Eval_simplify();case SIN:return Eval_sin();case SINH:return Eval_sinh();case SHAPE:return Eval_shape();case SQRT:return Eval_sqrt();case STOP:return Eval_stop();case SUBST:return Eval_subst();case SUM:return Eval_sum();case SYMBOLSINFO:return Eval_symbolsinfo();case TAN:return Eval_tan();case TANH:return Eval_tanh();case TAYLOR:return Eval_taylor();case TEST:return Eval_test();case TESTEQ:return Eval_testeq();case TESTGE:return Eval_testge();case TESTGT:return Eval_testgt();case TESTLE:return Eval_testle();case TESTLT:return Eval_testlt();case TRANSPOSE:return Eval_transpose();case UNIT:return Eval_unit();case ZERO:return Eval_zero();default:return Eval_user_function()}else Eval_user_function()},Eval_binding=function(){return push(get_binding(cadr(p1)))},Eval_check=function(){var r;return null==(r=isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1)))?push(p1):push_integer(r)},Eval_det=function(){return push(cadr(p1)),Eval(),det()},Eval_dim=function(){var r;return push(cadr(p1)),Eval(),p2=pop(),iscons(cddr(p1))?(push(caddr(p1)),Eval(),r=pop_integer()):r=1,istensor(p2)?r<1||r>p2.tensor.ndim?push(p1):push_integer(p2.tensor.dim[r-1]):push_integer(1)},Eval_divisors=function(){return push(cadr(p1)),Eval(),divisors()},Eval_do=function(){var r;for(push(car(p1)),p1=cdr(p1),r=[];iscons(p1);)pop(),push(car(p1)),Eval(),r.push(p1=cdr(p1));return r},Eval_dsolve=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),dsolve()},Eval_Eval=function(){for(push(cadr(p1)),Eval(),p1=cddr(p1);iscons(p1);)push(car(p1)),Eval(),push(cadr(p1)),Eval(),subst(),p1=cddr(p1);return Eval()},Eval_exp=function(){return push(cadr(p1)),Eval(),exponential()},Eval_factorial=function(){return push(cadr(p1)),Eval(),factorial()},Eval_factorpoly=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),factorpoly(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),factorpoly(),r.push(p1=cdr(p1));return r},Eval_hermite=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),hermite()},Eval_hilbert=function(){return push(cadr(p1)),Eval(),hilbert()},Eval_index=function(){var r,e,t;if(r=tos,e=p1,p1=cdr(p1),push(car(p1)),Eval(),t=stack[tos-1],isNumericAtom(t)&&stop("trying to access a scalar as a tensor"),!istensor(t))return moveTos(r),void push(e);for(p1=cdr(p1);iscons(p1);){if(push(car(p1)),Eval(),!isintegerorintegerfloat(stack[tos-1]))return moveTos(r),void push(e);p1=cdr(p1)}return index_function(tos-r)},Eval_inv=function(){return push(cadr(p1)),Eval(),inv()},Eval_invg=function(){return push(cadr(p1)),Eval(),invg()},Eval_isinteger=function(){if(push(cadr(p1)),Eval(),p1=pop(),isrational(p1))isinteger(p1)?push(one):push(zero);else{if(!isdouble(p1))return push_symbol(ISINTEGER),push(p1),list(2);Math.floor(p1.d)===p1.d?push(one):push(zero)}},Eval_number=function(){return push(cadr(p1)),Eval(),(p1=pop()).k===NUM||p1.k===DOUBLE?push_integer(1):push_integer(0)},Eval_operator=function(){var r;for(r=tos,push_symbol(OPERATOR),p1=cdr(p1);iscons(p1);)push(car(p1)),Eval(),p1=cdr(p1);return list(tos-r)},Eval_quote=function(){return push(cadr(p1))},Eval_rank=function(){return push(cadr(p1)),Eval(),p1=pop(),istensor(p1)?push_integer(p1.tensor.ndim):push(zero)},Eval_setq=function(){if(caadr(p1)!==symbol(INDEX)){if(!iscons(cadr(p1)))return issymbol(cadr(p1))||stop("symbol assignment: error in symbol"),push(caddr(p1)),Eval(),p2=pop(),set_binding(cadr(p1),p2),push(symbol(NIL));define_user_function()}else setq_indexed()},setq_indexed=function(){var r;for(p4=cadadr(p1),console.log("p4: "+p4),issymbol(p4)||stop("indexed assignment: expected a symbol name"),r=tos,push(caddr(p1)),Eval(),p2=cdadr(p1);iscons(p2);)push(car(p2)),Eval(),p2=cdr(p2);return set_component(tos-r),p3=pop(),set_binding(p4,p3),push(symbol(NIL))},Eval_sqrt=function(){return push(cadr(p1)),Eval(),push_rational(1,2),power()},Eval_stop=function(){return stop("user stop")},Eval_subst=function(){return push(cadddr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadr(p1)),Eval(),subst(),Eval()},Eval_unit=function(){var r,e,t,o;if(r=0,push(cadr(p1)),Eval(),e=pop_integer(),isNaN(e))push(p1);else{if(!(e<1)){for((p1=alloc_tensor(e*e)).tensor.ndim=2,p1.tensor.dim[0]=e,p1.tensor.dim[1]=e,r=t=0,o=e;0<=o?t<o:t>o;r=0<=o?++t:--t)p1.tensor.elem[e*r+r]=one;return check_tensor_dimensions(p1),push(p1)}push(p1)}},Eval_noexpand=function(){var r;return r=expanding,expanding=0,Eval(),expanding=r},Eval_predicate=function(){return save(),p1=top(),car(p1)===symbol(SETQ)&&(pop(),push_symbol(TESTEQ),push(cadr(p1)),push(caddr(p1)),list(3)),Eval(),restore()},Eval_expand=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),expand()},expand=function(){var r;if(save(),p9=pop(),p5=pop(),istensor(p5))return expand_tensor(),void restore();if(car(p5)!==symbol(ADD))return push(p5),numerator(),p3=pop(),push(p5),denominator(),p2=pop(),remove_negative_exponents(),push(p3),push(p2),push(p9),!isone(p3)&&!isone(p2)||ispolyexpandedform(p2,p9)&&!isone(p2)?(divpoly(),p7=pop(),push(p3),push(p2),push(p7),multiply(),subtract(),p3=pop(),isZeroAtomOrTensor(p3)?(push(p7),void restore()):(push(p2),push(p9),factorpoly(),p2=pop(),expand_get_C(),expand_get_B(),expand_get_A(),istensor(p4)?(push(p4),r=expanding,expanding=1,inv(),expanding=r,push(p3),inner(),push(p2),inner()):(push(p3),push(p4),r=expanding,expanding=1,divide(),expanding=r,push(p2),multiply()),push(p7),add(),restore())):(pop(),pop(),pop(),push(p5),void restore());for(push_integer(0),p1=cdr(p5);iscons(p1);)push(car(p1)),push(p9),expand(),add(),p1=cdr(p1);restore()},expand_tensor=function(){var r,e,t;for(r=0,push(p5),copy_tensor(),r=e=0,t=(p5=pop()).tensor.nelem;0<=t?e<t:e>t;r=0<=t?++e:--e)push(p5.tensor.elem[r]),push(p9),expand(),p5.tensor.elem[r]=pop();return push(p5)},remove_negative_exponents=function(){var r,e,t,o,s,n;for(e=0,t=0,o=0,r=tos,factors(p2),factors(p3),t=0,e=s=0,n=tos-r;0<=n?s<n:s>n;e=0<=n?++s:--s)p1=stack[r+e],car(p1)===symbol(POWER)&&cadr(p1)===p9&&(push(caddr(p1)),o=pop_integer(),isNaN(o)||o<t&&(t=o));if(moveTos(r),0!==t)return push(p2),push(p9),push_integer(-t),power(),multiply(),p2=pop(),push(p3),push(p9),push_integer(-t),power(),multiply(),p3=pop()},expand_get_C=function(){var r,e,t,o,s,n,p,a,i,u;if(t=0,s=0,e=tos,car(p2)===symbol(MULTIPLY))for(p1=cdr(p2);iscons(p1);)p5=car(p1),expand_get_CF(),p1=cdr(p1);else p5=p2,expand_get_CF();if(1!=(n=tos-e)){for((p4=alloc_tensor(n*n)).tensor.ndim=2,p4.tensor.dim[0]=n,p4.tensor.dim[1]=n,r=e,t=p=0,i=n;0<=i?p<i:p>i;t=0<=i?++p:--p)for(s=o=0,u=n;0<=u?o<u:o>u;s=0<=u?++o:--o)push(stack[r+s]),push(p9),push_integer(t),power(),a=expanding,expanding=1,divide(),expanding=a,push(p9),filter(),p4.tensor.elem[n*t+s]=pop();return moveTos(tos-n)}p4=pop()},expand_get_CF=function(){var r,e,t,o,s,n,p,a;if(e=0,t=0,o=0,Find(p5,p9)){for(n=expanding,expanding=1,trivial_divide(),expanding=n,car(p5)===symbol(POWER)?(push(caddr(p5)),o=pop_integer(),p6=cadr(p5)):(o=1,p6=p5),push(p6),push(p9),degree(),r=pop_integer(),a=[],e=s=0,p=o;0<=p?s<p:s>p;e=0<=p?++s:--s)a.push(function(){var o,s,p;for(p=[],t=o=0,s=r;0<=s?o<s:o>s;t=0<=s?++o:--o)push(p8),push(p6),push_integer(e),power(),n=expanding,expanding=1,multiply(),expanding=n,push(p9),push_integer(t),power(),n=expanding,expanding=1,multiply(),p.push(expanding=n);return p}());return a}},trivial_divide=function(){var r;if(r=0,car(p2)===symbol(MULTIPLY)){for(r=tos,p0=cdr(p2);iscons(p0);)equal(car(p0),p5)||(push(car(p0)),Eval()),p0=cdr(p0);multiply_all(tos-r)}else push_integer(1);return p8=pop()},expand_get_B=function(){var r,e,t,o,s;if(r=0,istensor(p4)){for(e=p4.tensor.dim[0],(p8=alloc_tensor(e)).tensor.ndim=1,p8.tensor.dim[0]=e,r=t=0,s=e;0<=s?t<s:t>s;r=0<=s?++t:--t)push(p3),push(p9),push_integer(r),power(),o=expanding,expanding=1,divide(),expanding=o,push(p9),filter(),p8.tensor.elem[r]=pop();return p3=p8}},expand_get_A=function(){var r,e,t,o,s;if(e=0,!istensor(p4))return push(p2),reciprocate(),void(p2=pop());if(r=tos,car(p2)===symbol(MULTIPLY))for(p8=cdr(p2);iscons(p8);)p5=car(p8),expand_get_AF(),p8=cdr(p8);else p5=p2,expand_get_AF();for((p8=alloc_tensor(t=tos-r)).tensor.ndim=1,p8.tensor.dim[0]=t,e=o=0,s=t;0<=s?o<s:o>s;e=0<=s?++o:--o)p8.tensor.elem[e]=stack[r+e];return moveTos(r),p2=p8},expand_get_AF=function(){var r,e,t,o,s,n,p;if(e=0,t=0,o=1,Find(p5,p9)){for(car(p5)===symbol(POWER)&&(push(caddr(p5)),o=pop_integer(),p5=cadr(p5)),push(p5),push(p9),degree(),r=pop_integer(),p=[],e=s=n=o;n<=0?s<0:s>0;e=n<=0?++s:--s)p.push(function(){var o,s,n;for(n=[],t=o=0,s=r;0<=s?o<s:o>s;t=0<=s?++o:--o)push(p5),push_integer(e),power(),reciprocate(),push(p9),push_integer(t),power(),n.push(multiply());return n}());return p}},Eval_expcos=function(){return push(cadr(p1)),Eval(),expcos()},expcos=function(){return save(),p1=pop(),push(imaginaryunit),push(p1),multiply(),exponential(),push_rational(1,2),multiply(),push(imaginaryunit),negate(),push(p1),multiply(),exponential(),push_rational(1,2),multiply(),add(),restore()},Eval_expsin=function(){return push(cadr(p1)),Eval(),expsin()},expsin=function(){return save(),p1=pop(),push(imaginaryunit),push(p1),multiply(),exponential(),push(imaginaryunit),divide(),push_rational(1,2),multiply(),push(imaginaryunit),negate(),push(p1),multiply(),exponential(),push(imaginaryunit),divide(),push_rational(1,2),multiply(),subtract(),restore()},Eval_factor=function(){var r;for(push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),factor(),p1=cdddr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),factor_again(),r.push(p1=cdr(p1));return r},factor_again=function(){var r,e;if(save(),p2=pop(),p1=pop(),r=tos,car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),factor_term(),p1=cdr(p1);else push(p1),push(p2),factor_term();return(e=tos-r)>1&&multiply_all_noexpand(e),restore()},factor_term=function(){if(save(),factorpoly(),p1=pop(),car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else push(p1);return restore()},factor=function(){return save(),p2=pop(),p1=pop(),isinteger(p1)?(push(p1),factor_number()):(push(p1),push(p2),factorpoly()),restore()},factor_small_number=function(){var r,e,t,o,s,n;for(t=0,save(),o=pop_integer(),isNaN(o)&&stop("number too big to factor"),o<0&&(o=-o),t=s=0,n=MAXPRIMETAB;(0<=n?s<n:s>n)&&!((r=primetab[t])>o/r);t=0<=n?++s:--s){for(e=0;o%r==0;)o/=r,e++;e&&(push_integer(r),push_integer(e))}return o>1&&(push_integer(o),push_integer(1)),restore()},factorial=function(){var r;return save(),p1=pop(),push(p1),(r=pop_integer())<0||isNaN(r)?(push_symbol(FACTORIAL),push(p1),list(2),void restore()):(bignum_factorial(r),restore())},simplifyfactorials=function(){var r;if(save(),r=expanding,expanding=0,p1=pop(),car(p1)===symbol(ADD)){for(push(zero),p1=cdr(p1);iscons(p1);)push(car(p1)),simplifyfactorials(),add(),p1=cdr(p1);return expanding=r,void restore()}return car(p1)===symbol(MULTIPLY)?(sfac_product(),expanding=r,void restore()):(push(p1),expanding=r,restore())},sfac_product=function(){var r,e,t,o,s,n,p,a,i,u,l;for(r=0,t=0,s=0,l=tos,p1=cdr(p1),s=0;iscons(p1);)push(car(p1)),p1=cdr(p1),s++;for(r=n=0,p=s-1;0<=p?n<p:n>p;r=0<=p?++n:--n)if(stack[l+r]!==symbol(NIL))for(t=e=a=r+1,i=s;a<=i?e<i:e>i;t=a<=i?++e:--e)stack[l+t]!==symbol(NIL)&&sfac_product_f(l,r,t);for(push(one),r=o=0,u=s;0<=u?o<u:o>u;r=0<=u?++o:--o)stack[l+r]!==symbol(NIL)&&(push(stack[l+r]),multiply());return p1=pop(),moveTos(tos-s),push(p1)},sfac_product_f=function(r,e,t){var o,s,n,p;if(o=0,s=0,p1=stack[r+e],p2=stack[r+t],ispower(p1)?(p3=caddr(p1),p1=cadr(p1)):p3=one,ispower(p2)?(p4=caddr(p2),p2=cadr(p2)):p4=one,isfactorial(p1)&&isfactorial(p2)){if(push(p3),push(p4),add(),yyexpand(),0!==(s=pop_integer()))return;if(push(cadr(p1)),push(cadr(p2)),subtract(),yyexpand(),0===(s=pop_integer())||isNaN(s))return;for(s<0&&(s=-s,p5=p1,p1=p2,p2=p5,p5=p3,p3=p4,p4=p5),push(one),o=n=1,p=s;1<=p?n<=p:n>=p;o=1<=p?++n:--n)push(cadr(p2)),push_integer(o),add(),push(p3),power(),multiply();return stack[r+e]=pop(),stack[r+t]=symbol(NIL)}},polycoeff=0,factpoly_expo=0,factorpoly=function(){return save(),p2=pop(),p1=pop(),Find(p1,p2)&&ispolyexpandedform(p1,p2)&&issymbol(p2)?(push(p1),push(p2),yyfactorpoly(),restore()):(push(p1),void restore())},yyfactorpoly=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g;for(n=0,save(),p2=pop(),p1=pop(),s=tos,isfloating(p1)&&stop("floating point numbers in polynomial"),polycoeff=tos,push(p1),push(p2),factpoly_expo=coeff()-1,rationalize_coefficients(s),g="real",h=null;factpoly_expo>0;)if(isZeroAtomOrTensor(stack[polycoeff+0])?(push_integer(1),p4=pop(),push_integer(0),p5=pop()):"real"===g?o=get_factor_from_real_root():"complex"===g&&(t=get_factor_from_complex_root(h)),"real"===g){if(0===o){g="complex";continue}for(push(p4),push(p2),multiply(),push(p5),add(),p8=pop(),DEBUG&&console.log("success\nFACTOR="+p8),push(p7),push(p8),multiply_noexpand(),p7=pop(),yydivpoly();factpoly_expo&&isZeroAtomOrTensor(stack[polycoeff+factpoly_expo]);)factpoly_expo--;for(push(zero),n=u=0,d=factpoly_expo;0<=d?u<=d:u>=d;n=0<=d?++u:--u)push(stack[polycoeff+n]),push(p2),push_integer(n),power(),multiply(),add();h=pop()}else if("complex"===g){if(0===t)break;if(push(p4),push(p2),subtract(),push(p4),conjugate(),push(p2),subtract(),multiply(),p8=pop(),DEBUG&&console.log("success\nFACTOR="+p8),push(p7),c=pop(),push(p7),push(p8),multiply_noexpand(),p7=pop(),null==h){for(push(zero),n=p=0,_=factpoly_expo;0<=_?p<=_:p>=_;n=0<=_?++p:--p)push(stack[polycoeff+n]),push(p2),push_integer(n),power(),multiply(),add();h=pop()}if(push(e=h),push(p8),push(p2),divpoly(),h=pop(),push(h),push(p8),multiply(),r=pop(),!equal(r,e))return DEBUG&&console.log("we found a polynomial based on complex root and its conj but it doesn't divide the poly, quitting"),DEBUG&&console.log("so just returning previousFactorisation times dividend: "+c+" * "+e),push(c),push(e),l=expanding,expanding=0,yycondense(),expanding=l,multiply_noexpand(),p7=pop(),stack[s]=p7,moveTos(s+1),void restore();for(n=a=0,m=factpoly_expo;0<=m?a<=m:a>=m;n=0<=m?++a:--a)pop();push(h),push(p2),coeff(),factpoly_expo-=2}for(push(zero),n=i=0,f=factpoly_expo;0<=f?i<=f:i>=f;n=0<=f?++i:--i)push(stack[polycoeff+n]),push(p2),push_integer(n),power(),multiply(),add();return p1=pop(),DEBUG&&console.log("POLY="+p1),push(p1),l=expanding,expanding=0,yycondense(),expanding=l,p1=pop(),factpoly_expo>0&&isnegativeterm(stack[polycoeff+factpoly_expo])&&(push(p1),negate(),p1=pop(),push(p7),negate_noexpand(),p7=pop()),push(p7),push(p1),multiply_noexpand(),p7=pop(),DEBUG&&console.log("RESULT="+p7),stack[s]=p7,moveTos(s+1),restore()},rationalize_coefficients=function(r){var e,t,o,s,n,p,a;for(e=0,p7=one,e=o=s=r,n=tos;s<=n?o<n:o>n;e=s<=n?++o:--o)push(stack[e]),denominator(),push(p7),lcm(),p7=pop();for(e=t=p=r,a=tos;p<=a?t<a:t>a;e=p<=a?++t:--t)push(p7),push(stack[e]),multiply(),stack[e]=pop();if(push(p7),reciprocate(),p7=pop(),DEBUG)return console.log("rationalize_coefficients result")},get_factor_from_real_root=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g;if(o=0,DEBUG){for(push(zero),o=l=0,c=factpoly_expo;0<=c?l<=c:l>=c;o=0<=c?++l:--l)push(stack[polycoeff+o]),push(p2),push_integer(o),power(),multiply(),add();p1=pop(),console.log("POLY="+p1)}if(t=tos,e=tos,push(stack[polycoeff+factpoly_expo]),divisors_onstack(),u=tos-e,r=tos,push(stack[polycoeff+0]),divisors_onstack(),i=tos-r,DEBUG){for(console.log("divisors of base term"),o=s=0,d=i;0<=d?s<d:s>d;o=0<=d?++s:--s)console.log(", "+stack[r+o]);for(console.log("divisors of leading term"),o=n=0,_=u;0<=_?n<_:n>_;o=0<=_?++n:--n)console.log(", "+stack[e+o])}for(h=p=0,m=u;0<=m?p<m:p>m;h=0<=m?++p:--p)for(g=a=0,f=i;0<=f?a<f:a>f;g=0<=f?++a:--a){if(p4=stack[e+h],p5=stack[r+g],push(p5),push(p4),divide(),negate(),p3=pop(),Evalpoly(),DEBUG&&(console.log("try A="+p4),console.log(", B="+p5),console.log(", root "+p2),console.log("=-B/A="+p3),console.log(", POLY("+p3),console.log(")="+p6)),isZeroAtomOrTensor(p6))return moveTos(t),DEBUG&&console.log("get_factor_from_real_root returning 1"),1;if(push(p5),negate(),p5=pop(),push(p3),negate(),p3=pop(),Evalpoly(),DEBUG&&(console.log("try A="+p4),console.log(", B="+p5),console.log(", root "+p2),console.log("=-B/A="+p3),console.log(", POLY("+p3),console.log(")="+p6)),isZeroAtomOrTensor(p6))return moveTos(t),DEBUG&&console.log("get_factor_from_real_root returning 1"),1}return moveTos(t),DEBUG&&console.log("get_factor_from_real_root returning 0"),0},get_factor_from_complex_root=function(r){var e,t,o,s,n;if(factpoly_expo<=2)return DEBUG&&console.log("no more factoring via complex roots to be found in polynomial of degree <= 2"),0;if(p1=r,DEBUG&&console.log("complex root finding for POLY="+p1),e=tos,push_integer(-1),push_rational(2,3),power(),rect(),p4=pop(),DEBUG&&console.log("complex root finding: trying with "+p4),push(p4),p3=pop(),push(p3),Evalpoly(),DEBUG&&console.log("complex root finding result: "+p6),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 1"),1;if(push_integer(1),push_rational(2,3),power(),rect(),p4=pop(),DEBUG&&console.log("complex root finding: trying with "+p4),push(p4),p3=pop(),push(p3),Evalpoly(),DEBUG&&console.log("complex root finding result: "+p6),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 1"),1;for(s=o=-10;o<=10;s=++o)for(n=t=1;t<=5;n=++t)if(push_integer(s),push_integer(n),push(imaginaryunit),multiply(),add(),rect(),p4=pop(),push(p4),p3=pop(),push(p3),Evalpoly(),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("found complex root: "+p6),1;return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 0"),0},yydivpoly=function(){var r,e,t;for(r=0,p6=zero,r=e=t=factpoly_expo;t<=0?e<0:e>0;r=t<=0?++e:--e)push(stack[polycoeff+r]),stack[polycoeff+r]=p6,push(p4),divide(),p6=pop(),push(stack[polycoeff+r-1]),push(p6),push(p5),multiply(),subtract(),stack[polycoeff+r-1]=pop();if(stack[polycoeff+0]=p6,DEBUG)return console.log("yydivpoly Q:")},Evalpoly=function(){var r,e,t;for(r=0,push(zero),r=e=t=factpoly_expo;t<=0?e<=0:e>=0;r=t<=0?++e:--e)push(p3),multiply(),push(stack[polycoeff+r]),DEBUG&&(console.log("Evalpoly top of stack:"),console.log(print_list(stack[tos-r]))),add();return p6=pop()},factors=function(r){var e;if(e=tos,car(r)===symbol(ADD))for(r=cdr(r);iscons(r);)push_term_factors(car(r)),r=cdr(r);else push_term_factors(r);return tos-e},push_term_factors=function(r){var e;if(car(r)===symbol(MULTIPLY)){for(r=cdr(r),e=[];iscons(r);)push(car(r)),e.push(r=cdr(r));return e}return push(r)},Eval_filter=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),filter(),r.push(p1=cdr(p1));return r},filter=function(){return save(),p2=pop(),p1=pop(),filter_main(),restore()},filter_main=function(){return car(p1)===symbol(ADD)?filter_sum():istensor(p1)?filter_tensor():Find(p1,p2)?push_integer(0):push(p1)},filter_sum=function(){var r;for(push_integer(0),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),push(p2),filter(),add(),r.push(p1=cdr(p1));return r},filter_tensor=function(){var r,e,t,o,s,n;for(r=0,t=p1.tensor.nelem,(p3=alloc_tensor(t)).tensor.ndim=p1.tensor.ndim,r=o=0,s=p1.tensor.ndim;0<=s?o<s:o>s;r=0<=s?++o:--o)p3.tensor.dim[r]=p1.tensor.dim[r];for(r=e=0,n=t;0<=n?e<n:e>n;r=0<=n?++e:--e)push(p1.tensor.elem[r]),push(p2),filter(),p3.tensor.elem[r]=pop();return push(p3)},Eval_float=function(){return evaluatingAsFloats++,push(cadr(p1)),Eval(),yyfloat(),Eval(),evaluatingAsFloats--},checkFloatHasWorkedOutCompletely=function(r){var e,t,o,s,n;if(s=countOccurrencesOfSymbol(symbol(POWER),r),o=countOccurrencesOfSymbol(symbol(PI),r),e=countOccurrencesOfSymbol(symbol(E),r),t=countOccurrencesOfSymbol(symbol(MULTIPLY),r),n=countOccurrencesOfSymbol(symbol(ADD),r),DEBUG&&(console.log("     ... numberOfPowers: "+s),console.log("     ... numberOfPIs: "+o),console.log("     ... numberOfEs: "+e),console.log("     ... numberOfMults: "+t),console.log("     ... numberOfSums: "+n)),s>1||o>0||e>0||t>1||n>1)return stop("float: some unevalued parts in "+r)},zzfloat=function(){return save(),evaluatingAsFloats++,Eval(),yyfloat(),Eval(),evaluatingAsFloats--,restore()},yyfloat=function(){var r,e,t,o;if(e=0,r=0,evaluatingAsFloats++,save(),p1=pop(),iscons(p1)){for(r=tos;iscons(p1);)push(car(p1)),yyfloat(),p1=cdr(p1);list(tos-r)}else if(p1.k===TENSOR){for(push(p1),copy_tensor(),e=t=0,o=(p1=pop()).tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)push(p1.tensor.elem[e]),yyfloat(),p1.tensor.elem[e]=pop();push(p1)}else p1.k===NUM?(push(p1),bignum_float()):p1===symbol(PI)?push_double(Math.PI):p1===symbol(E)?push_double(Math.E):push(p1);return restore(),evaluatingAsFloats--},Eval_floor=function(){return push(cadr(p1)),Eval(),yfloor()},yfloor=function(){return save(),yyfloor(),restore()},yyfloor=function(){var r;return r=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(r=Math.floor(p1.d),void push_double(r)):isinteger(p1)?void push(p1):((p3=new U).k=NUM,p3.q.a=mdiv(p1.q.a,p1.q.b),p3.q.b=mint(1),push(p3),isnegativenumber(p1)?(push_integer(-1),add()):void 0):(push_symbol(FLOOR),push(p1),void list(2))},Eval_for=function(){var r,e,t,o,s,n,p;if(r=0,o=caddr(p1),issymbol(o)||stop("for: 2nd arg should be the variable to loop over"),push(cadddr(p1)),Eval(),e=pop_integer(),isNaN(e))push(p1);else{if(push(caddddr(p1)),Eval(),t=pop_integer(),!isNaN(t)){for(p4=get_binding(o),r=s=n=e,p=t;n<=p?s<=p:s>=p;r=n<=p?++s:--s)push_integer(r),p5=pop(),set_binding(o,p5),push(cadr(p1)),Eval(),pop();return set_binding(o,p4),push_symbol(NIL)}push(p1)}},Eval_gamma=function(){return push(cadr(p1)),Eval(),gamma()},gamma=function(){return save(),gammaf(),restore()},gammaf=function(){return p1=pop(),isrational(p1)&&MEQUAL(p1.q.a,1)&&MEQUAL(p1.q.b,2)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(1,2),void power()):isrational(p1)&&MEQUAL(p1.q.a,3)&&MEQUAL(p1.q.b,2)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(1,2),power(),push_rational(1,2),void multiply()):isnegativeterm(p1)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_integer(-1),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push(p1),multiply(),sine(),push(p1),multiply(),push(p1),negate(),gamma(),multiply(),void divide()):void(car(p1)!==symbol(ADD)?(push_symbol(GAMMA),push(p1),list(2)):gamma_of_sum())},gamma_of_sum=function(){return p3=cdr(p1),isrational(car(p3))&&MEQUAL(car(p3).q.a,1)&&MEQUAL(car(p3).q.b,1)?(push(cadr(p3)),push(cadr(p3)),gamma(),multiply()):isrational(car(p3))&&MEQUAL(car(p3).q.a,-1)&&MEQUAL(car(p3).q.b,1)?(push(cadr(p3)),gamma(),push(cadr(p3)),push_integer(-1),add(),divide()):(push_symbol(GAMMA),push(p1),void list(2))},Eval_gcd=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),gcd(),r.push(p1=cdr(p1));return r},gcd=function(){var r;return r=expanding,save(),gcd_main(),restore(),expanding=r},gcd_main=function(){var r;if(expanding=1,p2=pop(),p1=pop(),equal(p1,p2))push(p1);else{if(isrational(p1)&&isrational(p2))return push(p1),push(p2),void gcd_numbers();if(r=areunivarpolysfactoredorexpandedform(p1,p2))gcd_polys(r);else if(car(p1)!==symbol(ADD)||car(p2)!==symbol(ADD))if(car(p1)===symbol(ADD)&&(gcd_sum(p1),p1=pop()),car(p2)===symbol(ADD)&&(gcd_sum(p2),p2=pop()),car(p1)!==symbol(MULTIPLY))if(car(p2)!==symbol(MULTIPLY)){if(car(p1)!==symbol(MULTIPLY)||car(p2)!==symbol(MULTIPLY))return gcd_powers_with_same_base();gcd_product_product()}else gcd_product_sum();else gcd_sum_product();else gcd_sum_sum()}},areunivarpolysfactoredorexpandedform=function(r,e){var t;return!(!(t=isunivarpolyfactoredorexpandedform(r))||!isunivarpolyfactoredorexpandedform(e,t))&&t},gcd_polys=function(r){if(push(p1),push(r),factorpoly(),p1=pop(),push(p2),push(r),factorpoly(),p2=pop(),DEBUG&&console.log("factored polys:"),DEBUG&&console.log("p1:"+p1.toString()),DEBUG&&console.log("p2:"+p2.toString()),car(p1)!==symbol(MULTIPLY)&&car(p2)!==symbol(MULTIPLY)||(car(p1)!==symbol(MULTIPLY)&&(push_symbol(MULTIPLY),push(p1),push(one),list(3),p1=pop()),car(p2)!==symbol(MULTIPLY)&&(push_symbol(MULTIPLY),push(p2),push(one),list(3),p2=pop())),car(p1)!==symbol(MULTIPLY)||car(p2)!==symbol(MULTIPLY))return gcd_powers_with_same_base(),!0;gcd_product_product()},gcd_product_product=function(){var r;for(push(one),p3=cdr(p1),r=[];iscons(p3);){for(p4=cdr(p2);iscons(p4);)push(car(p3)),push(car(p4)),gcd(),multiply(),p4=cdr(p4);r.push(p3=cdr(p3))}return r},gcd_powers_with_same_base=function(){if(car(p1)===symbol(POWER)?(p3=caddr(p1),p1=cadr(p1)):p3=one,car(p2)===symbol(POWER)?(p4=caddr(p2),p2=cadr(p2)):p4=one,equal(p1,p2)){if(isNumericAtom(p3)&&isNumericAtom(p4))return push(p1),lessp(p3,p4)?push(p3):push(p4),void power();if(push(p3),push(p4),divide(),p5=pop(),isNumericAtom(p5))return push(p1),p5=car(p3)===symbol(MULTIPLY)&&isNumericAtom(cadr(p3))?cadr(p3):one,p6=car(p4)===symbol(MULTIPLY)&&isNumericAtom(cadr(p4))?cadr(p4):one,lessp(p5,p6)?push(p3):push(p4),void power();if(push(p3),push(p4),subtract(),p5=pop(),isNumericAtom(p5))return push(p1),isnegativenumber(p5)?push(p3):push(p4),power();push(one)}else push(one)},gcd_sum_sum=function(){if(length(p1)===length(p2)){for(p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);for(p3=pop(),p4=cdr(p2),push(car(p4)),p4=cdr(p4);iscons(p4);)push(car(p4)),gcd(),p4=cdr(p4);return p4=pop(),push(p1),push(p3),divide(),p5=pop(),push(p2),push(p4),divide(),p6=pop(),equal(p5,p6)?(push(p5),push(p3),push(p4),gcd(),multiply()):push(one)}push(one)},gcd_sum=function(r){var e;for(r=cdr(r),push(car(r)),r=cdr(r),e=[];iscons(r);)push(car(r)),gcd(),e.push(r=cdr(r));return e},gcd_sum_product=function(){var r;for(push(one),p3=cdr(p1),r=[];iscons(p3);)push(car(p3)),push(p2),gcd(),multiply(),r.push(p3=cdr(p3));return r},gcd_product_sum=function(){var r;for(push(one),p4=cdr(p2),r=[];iscons(p4);)push(p1),push(car(p4)),gcd(),multiply(),r.push(p4=cdr(p4));return r},guess=function(){var r;return r=pop(),push(r),Find(r,symbol(SYMBOL_X))?push_symbol(SYMBOL_X):Find(r,symbol(SYMBOL_Y))?push_symbol(SYMBOL_Y):Find(r,symbol(SYMBOL_Z))?push_symbol(SYMBOL_Z):Find(r,symbol(SYMBOL_T))?push_symbol(SYMBOL_T):Find(r,symbol(SYMBOL_S))?push_symbol(SYMBOL_S):push_symbol(SYMBOL_X)},hermite=function(){return save(),yyhermite(),restore()},yyhermite=function(){var r;return p2=pop(),p1=pop(),push(p2),(r=pop_integer())<0||isNaN(r)?(push_symbol(HERMITE),push(p1),push(p2),void list(3)):issymbol(p1)?yyhermite2(r):(p3=p1,p1=symbol(SECRETX),yyhermite2(r),p1=p3,push(symbol(SECRETX)),push(p1),subst(),Eval())},yyhermite2=function(r){var e,t,o,s;for(e=0,push_integer(1),push_integer(0),p4=pop(),s=[],e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)p5=p4,p4=pop(),push(p1),push(p4),multiply(),push_integer(e),push(p5),multiply(),subtract(),push_integer(2),s.push(multiply());return s},hilbert=function(){var r,e,t,o,s,n,p;if(r=0,t=0,save(),p2=pop(),push(p2),(o=pop_integer())<2)return push_symbol(HILBERT),push(p2),list(2),void restore();for(push_zero_matrix(o,o),p1=pop(),r=s=0,n=o;0<=n?s<n:s>n;r=0<=n?++s:--s)for(t=e=0,p=o;0<=p?e<p:e>p;t=0<=p?++e:--e)push_integer(r+t+1),inverse(),p1.tensor.elem[r*o+t]=pop();return push(p1),restore()},DEBUG_IMAG=!1,Eval_imag=function(){return push(cadr(p1)),Eval(),imag()},imag=function(){return save(),rect(),p1=pop(),DEBUG_IMAG&&console.log("IMAGE of "+p1),push(p1),push(p1),conjugate(),DEBUG_IMAG&&console.log(" image: conjugate result: "+stack[tos-1]),subtract(),push_integer(2),divide(),DEBUG_IMAG&&console.log(" image: 1st divide result: "+stack[tos-1]),push(imaginaryunit),divide(),DEBUG_IMAG&&console.log(" image: 2nd divide result: "+stack[tos-1]),restore()},index_function=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v;for(e=0,s=0,u=0,v=0,save(),(p=r-1)>(i=(p1=stack[y=tos-r]).tensor.ndim)&&stop("too many indices for tensor"),s=0,e=l=0,c=p;0<=c?l<c:l>c;e=0<=c?++l:--l)push(stack[y+e+1]),((v=pop_integer())<1||v>p1.tensor.dim[e])&&stop("index out of range"),s=s*p1.tensor.dim[e]+v-1;if(i===p)return moveTos(tos-r),push(p1.tensor.elem[s]),void restore();for(e=t=d=p,_=i;d<=_?t<_:t>_;e=d<=_?++t:--t)s=s*p1.tensor.dim[e]+0;for(u=1,e=o=m=p,f=i;m<=f?o<f:o>f;e=m<=f?++o:--o)u*=p1.tensor.dim[e];for((p2=alloc_tensor(u)).tensor.ndim=i-p,e=n=h=p,g=i;h<=g?n<g:n>g;e=h<=g?++n:--n)p2.tensor.dim[e-p]=p1.tensor.dim[e];for(e=a=0,b=u;0<=b?a<b:a>b;e=0<=b?++a:--a)p2.tensor.elem[e]=p1.tensor.elem[s+e];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),moveTos(tos-r),push(p2),restore()},set_component=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y;for(e=0,s=0,y=0,save(),r<3&&stop("error in indexed assign"),p2=stack[b=tos-r],p1=stack[b+1],istensor(p1)||stop("error in indexed assign: assigning to something that is not a tensor"),(p=r-2)>(u=p1.tensor.ndim)&&stop("error in indexed assign"),s=0,e=l=0,c=p;0<=c?l<c:l>c;e=0<=c?++l:--l)push(stack[b+e+2]),((y=pop_integer())<1||y>p1.tensor.dim[e])&&stop("error in indexed assign\n"),s=s*p1.tensor.dim[e]+y-1;for(e=t=d=p,_=u;d<=_?t<_:t>_;e=d<=_?++t:--t)s=s*p1.tensor.dim[e]+0;for((p3=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,e=o=0,m=p1.tensor.ndim;0<=m?o<m:o>m;e=0<=m?++o:--o)p3.tensor.dim[e]=p1.tensor.dim[e];for(e=n=0,f=p1.tensor.nelem;0<=f?n<f:n>f;e=0<=f?++n:--n)p3.tensor.elem[e]=p1.tensor.elem[e];if(check_tensor_dimensions(p1),check_tensor_dimensions(p3),p1=p3,u===p)return istensor(p2)&&stop("error in indexed assign"),p1.tensor.elem[s]=p2,check_tensor_dimensions(p1),moveTos(tos-r),push(p1),void restore();for(istensor(p2)||stop("error in indexed assign"),u-p!==p2.tensor.ndim&&stop("error in indexed assign"),e=a=0,h=p2.tensor.ndim;0<=h?a<h:a>h;e=0<=h?++a:--a)p1.tensor.dim[p+e]!==p2.tensor.dim[e]&&stop("error in indexed assign");for(e=i=0,g=p2.tensor.nelem;0<=g?i<g:i>g;e=0<=g?++i:--i)p1.tensor.elem[s+e]=p2.tensor.elem[e];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),moveTos(tos-r),push(p1),restore()},Eval_inner=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f;for((f=[]).push(car(cdr(p1))),car(cdr(cdr(p1)))===symbol(NIL)&&stop("pattern needs at least a template and a transformed version"),n=cdr(cdr(p1));n!==symbol(NIL);)f.push(car(n)),n=cdr(n);if(f.length>2){for(push_symbol(INNER),push(f[f.length-2]),push(f[f.length-1]),list(3),e=p=2,i=f.length;2<=i?p<i:p>i;e=2<=i?++p:--p)push_symbol(INNER),swap(),push(f[f.length-e-1]),swap(),list(3);return p1=pop(),void Eval_inner()}for(get_innerprod_factors(p1,a=[]),d=[],e=t=0,u=a.length;0<=u?t<u:t>u;e=0<=u?++t:--t)a[e]!==symbol(SYMBOL_IDENTITY_MATRIX)&&d.push(a[e]);if(a=d,d=[],a.length>1){for(m=0,e=o=0,l=a.length;(0<=l?o<l:o>l)&&e+m+1<=a.length-1&&(isNumericAtomOrTensor(a[e+m])||isNumericAtomOrTensor(a[e+m+1])?d.push(a[e+m]):(push(a[e+m]),Eval(),inv(),push(a[e+m+1]),Eval(),subtract(),r=pop(),isZeroAtomOrTensor(r)?m+=1:d.push(a[e+m])),e+m===a.length-2&&d.push(a[a.length-1]),!(e+m>=a.length-1));e=0<=l?++o:--o);a=d}if(push(symbol(INNER)),!(a.length>0))return pop(),void push(symbol(SYMBOL_IDENTITY_MATRIX));for(e=s=0,c=a.length;0<=c?s<c:s>c;e=0<=c?++s:--s)push(a[e]);for(list(a.length+1),p1=pop(),p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),_=[];iscons(p1);)push(car(p1)),Eval(),inner(),_.push(p1=cdr(p1));return _},inner=function(){var r,e,t,o;if(save(),p2=pop(),p1=pop(),isnegativeterm(p2)&&isnegativeterm(p1)&&(push(p2),negate(),p2=pop(),push(p1),negate(),p1=pop()),isinnerordot(p1)&&(r=car(cdr(p1)),e=car(cdr(cdr(p1))),t=p2,p1=r,push(e),push(t),inner(),p2=pop()),p1===symbol(SYMBOL_IDENTITY_MATRIX))return push(p2),void restore();if(p2===symbol(SYMBOL_IDENTITY_MATRIX))return push(p1),void restore();if(istensor(p1)&&istensor(p2))inner_f();else{if(!isNumericAtomOrTensor(p1)&&!isNumericAtomOrTensor(p2)&&(push(p1),push(p2),inv(),subtract(),o=pop(),isZeroAtomOrTensor(o)))return push_symbol(SYMBOL_IDENTITY_MATRIX),void restore();if(expanding&&isadd(p1)){for(p1=cdr(p1),push(zero);iscons(p1);)push(car(p1)),push(p2),inner(),add(),p1=cdr(p1);return void restore()}if(expanding&&isadd(p2)){for(p2=cdr(p2),push(zero);iscons(p2);)push(p1),push(car(p2)),inner(),add(),p2=cdr(p2);return void restore()}if(push(p1),push(p2),istensor(p1)&&isNumericAtom(p2))tensor_times_scalar();else if(isNumericAtom(p1)&&istensor(p2))scalar_times_tensor();else{if(!isNumericAtom(p1)&&!isNumericAtom(p2))return pop(),pop(),push_symbol(INNER),push(p1),push(p2),list(3),void restore();multiply()}}return restore()},inner_f=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A;for(n=0,(d=p1.tensor.dim[p1.tensor.ndim-1])!==p2.tensor.dim[0]&&stop("inner: tensor dimension check"),(m=p1.tensor.ndim+p2.tensor.ndim-2)>MAXDIM&&stop("inner: rank of result exceeds maximum"),r=p1.tensor.elem,t=p2.tensor.elem,e=1,n=f=0,g=p1.tensor.ndim-1;0<=g?f<g:f>g;n=0<=g?++f:--f)e*=p1.tensor.dim[n];for(o=1,n=p=1,b=p2.tensor.ndim;1<=b?p<b:p>b;n=1<=b?++p:--p)o*=p2.tensor.dim[n];for(s=(p3=alloc_tensor(e*o)).tensor.elem,n=i=0,y=e;0<=y?i<y:i>y;n=0<=y?++i:--i)for(a=l=0,v=d;0<=v?l<v:l>v;a=0<=v?++l:--l)if(!isZeroAtomOrTensor(r[n*d+a]))for(u=c=0,x=o;0<=x?c<x:c>x;u=0<=x?++c:--c)push(r[n*d+a]),push(t[a*o+u]),multiply(),push(s[n*o+u]),add(),s[n*o+u]=pop();if(0===m)return push(p3.tensor.elem[0]);for(p3.tensor.ndim=m,a=0,n=_=0,E=p1.tensor.ndim-1;0<=E?_<E:_>E;n=0<=E?++_:--_)p3.tensor.dim[n]=p1.tensor.dim[n];for(a=p1.tensor.ndim-1,n=h=0,A=p2.tensor.ndim-1;0<=A?h<A:h>A;n=0<=A?++h:--h)p3.tensor.dim[a+n]=p2.tensor.dim[n+1];return push(p3)},get_innerprod_factors=function(r,e){if(iscons(r)){if(cdr(r)!==symbol(NIL))return isinnerordot(r)?(get_innerprod_factors(car(cdr(r)),e),void get_innerprod_factors(cdr(cdr(r)),e)):add_factor_to_accumulator(r,e);r=get_innerprod_factors(car(r),e)}else add_factor_to_accumulator(r,e)},add_factor_to_accumulator=function(r,e){if(r!==symbol(NIL))return e.push(r)},itab=["f(a,a*x)","f(1/x,log(x))","f(x^a,x^(a+1)/(a+1))","f(x^(-2),-x^(-1))","f(x^(-1/2),2*x^(1/2))","f(x^(1/2),2/3*x^(3/2))","f(x,x^2/2)","f(x^2,x^3/3)","f(exp(a*x),1/a*exp(a*x))","f(exp(a*x+b),1/a*exp(a*x+b))","f(x*exp(a*x^2),exp(a*x^2)/(2*a))","f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))","f(log(a*x),x*log(a*x)-x)","f(a^x,a^x/log(a),or(not(number(a)),a>0))","f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))","f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))","f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))","f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))","f(1/(a+b*x),1/b*log(a+b*x))","f(1/(a+b*x)^2,-1/(b*(a+b*x)))","f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)","f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)","f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))","f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))","f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))","f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))","f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))","f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))","f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))","f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))","f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))","f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))","f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))","f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))","f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))","f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))","f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))","f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))","f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))","f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))","f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))","f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))","f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))","f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))","f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))","f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)","f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)","f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))","f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))","f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)","f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)","f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)","f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))","f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))","f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))","f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))","f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))","f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))","f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))","f(x/sqrt(x^2+a),sqrt(x^2+a))","f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))","f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))","f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))","f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))","f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))","f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))","f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))","f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))","f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))","f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))","f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))","f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)","f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))","f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))","f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))","f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))","f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))","f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))","f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))","f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))","f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))","f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))","f(x/sqrt(a-x^2),-sqrt(a-x^2))","f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))","f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))","f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))","f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))","f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))","f(sin(a*x),-cos(a*x)/a)","f(cos(a*x),sin(a*x)/a)","f(tan(a*x),-log(cos(a*x))/a)","f(1/tan(a*x),log(sin(a*x))/a)","f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)","f(1/sin(a*x),log(tan(a*x/2))/a)","f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))","f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))","f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))","f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))","f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))","f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))","f(1/sin(a*x)^2,-1/(a*tan(a*x)))","f(1/cos(a*x)^2,tan(a*x)/a)","f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))","f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)","f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))","f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)","f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))","f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)","f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)","f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)","f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))","f(sin(a+b*x),-cos(a+b*x)/b)","f(cos(a+b*x),sin(a+b*x)/b)","f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)","f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)","f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)","f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)","f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)","f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)","f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)","f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)","f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)","f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)","f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)","f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)","f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)","f(x*log(a*x),x^2*log(a*x)/2-x^2/4)","f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)","f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)","f(1/x*1/(a+log(x)),log(a+log(x)))","f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)","f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)","f(sinh(x),cosh(x))","f(cosh(x),sinh(x))","f(tanh(x),log(cosh(x)))","f(x*sinh(x),x*cosh(x)-sinh(x))","f(x*cosh(x),x*sinh(x)-cosh(x))","f(sinh(x)^2,sinh(2*x)/4-x/2)","f(tanh(x)^2,x-tanh(x))","f(cosh(x)^2,sinh(2*x)/4+x/2)","f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)","f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)","f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)","f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))","f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)","f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)","f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)","f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))","f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))","f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))","f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))","f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))","f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))",0],Eval_integral=function(){var r,e,t,o,s;for(e=0,p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?(guess(),push(symbol(NIL))):isNumericAtom(p2)?(guess(),push(p2)):(push(p2),p1=cdr(p1),push(car(p1)),Eval()),p5=pop(),p4=pop(),p3=pop();;){if(isNumericAtom(p5)?(push(p5),e=pop_integer(),isNaN(e)&&stop("nth integral: check n")):e=1,push(p3),e>=0)for(t=0,o=e;0<=o?t<o:t>o;0<=o?++t:--t)push(p4),integral();else for(r=0,s=e=-e;0<=s?r<s:r>s;0<=s?++r:--r)push(p4),derivative();if(p3=pop(),p5===symbol(NIL))break;if(isNumericAtom(p5)){if(p1=cdr(p1),push(car(p1)),Eval(),(p5=pop())===symbol(NIL))break;isNumericAtom(p5)||(p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop())}else p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop()}return push(p3)},integral=function(){return save(),p2=pop(),p1=pop(),car(p1)===symbol(ADD)?integral_of_sum():car(p1)===symbol(MULTIPLY)?integral_of_product():integral_of_form(),p1=pop(),Find(p1,symbol(INTEGRAL))&&stop("integral: sorry, could not find a solution"),push(p1),simplify(),Eval(),restore()},integral_of_sum=function(){var r;for(p1=cdr(p1),push(car(p1)),push(p2),integral(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),push(p2),integral(),add(),r.push(p1=cdr(p1));return r},integral_of_product=function(){return push(p1),push(p2),partition(),p1=pop(),integral_of_form(),multiply()},integral_of_form=function(){var r,e;return r=italu_hashcode(p1,p2).toFixed(6),(e=hashed_itab[r])?(push(p1),push(p2),transform(e,!1),(p3=pop())===symbol(NIL)?(push_symbol(INTEGRAL),push(p1),push(p2),list(3)):push(p3)):(push_symbol(INTEGRAL),push(p1),push(p2),void list(3))},hashcode_values={x:.95532,constexp:1.43762,constant:1.1441659362941434,constbase:1.2036412230421882,sin:1.7330548251830322,arcsin:1.6483368529465805,cos:1.0586721236863401,arccos:1.8405225918106694,tan:1.1224943776292506,arctan:1.1297397925394963,sinh:1.8176164926060079,cosh:1.9404934661708022,tanh:1.6421307715103122,log:1.477443701354924,erf:1.0825269225702916},italu_hashcode=function(r,e){var t;if(issymbol(r))return equal(r,e)?hashcode_values.x:hashcode_values.constant;if(iscons(r))switch(symnum(car(r))){case ADD:return hash_addition(cdr(r),e);case MULTIPLY:return hash_multiplication(cdr(r),e);case POWER:return hash_power(cadr(r),caddr(r),e);case EXP:return hash_power(symbol(E),cadr(r),e);case SQRT:return push_double(.5),t=pop(),hash_power(cadr(r),t,e);default:return hash_function(r,e)}return hashcode_values.constant},hash_function=function(r,e){var t,o,s;if(!Find(cadr(r),e))return hashcode_values.constant;if(s=car(r),t=italu_hashcode(cadr(r),e),!(o=hashcode_values[s.printname]))throw new Error("Unsupported function "+s.printname);return Math.pow(o,t)},hash_addition=function(r,e){var t,o,s,n;for(n={};iscons(r);)s=car(r),r=cdr(r),n[(Find(s,e)?italu_hashcode(s,e):hashcode_values.constant).toFixed(6)]=!0;for(t in o=0,n)hasProp.call(n,t)&&(n[t],o+=parseFloat(t,10));return o},hash_multiplication=function(r,e){var t,o;for(t=1;iscons(r);)o=car(r),r=cdr(r),Find(o,e)&&(t*=italu_hashcode(o,e));return t},hash_power=function(r,e,t){var o,s;if(o=hashcode_values.constant,s=hashcode_values.constexp,Find(r,t)&&(o=italu_hashcode(r,t)),Find(e,t))s=italu_hashcode(e,t);else{if(o===hashcode_values.constant)return hashcode_values.constant;isminusone(e)?s=-1:isoneovertwo(e)?s=.5:isminusoneovertwo(e)?s=-.5:equalq(e,2,1)?s=2:equalq(e,-2,1)&&(s=-2)}return Math.pow(o,s)},make_hashed_itab=function(){var r,e,t,o,s,n,p;for(n={},o=0,t=itab.length;o<t&&(s=itab[o]);o++)scan_meta(s),r=pop(),p=cadr(r),n[e=italu_hashcode(p,symbol(METAX)).toFixed(6)]||(n[e]=[]),n[e].push(s);return console.log("hashed_itab = "+JSON.stringify(n,null,2)),n},$.make_hashed_itab=make_hashed_itab,hashed_itab={1.144166:["f(a,a*x)"],"1.046770":["f(1/x,log(x))"],"0.936400":["f(x^a,x^(a+1)/(a+1))"],1.095727:["f(x^(-2),-x^(-1))"],1.023118:["f(x^(-1/2),2*x^(1/2))"],.977405:["f(x^(1/2),2/3*x^(3/2))"],"0.955320":["f(x,x^2/2)"],.912636:["f(x^2,x^3/3)"],1.137302:["f(exp(a*x),1/a*exp(a*x))","f(a^x,a^x/log(a),or(not(number(a)),a>0))"],1.326774:["f(exp(a*x+b),1/a*exp(a*x+b))"],1.080259:["f(x*exp(a*x^2),exp(a*x^2)/(2*a))"],1.260228:["f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))"],1.451902:["f(log(a*x),x*log(a*x)-x)"],.486192:["f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))","f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))","f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))","f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))"],.697274:["f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))","f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))","f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))"],.476307:["f(1/(a+b*x),1/b*log(a+b*x))"],.226868:["f(1/(a+b*x)^2,-1/(b*(a+b*x)))"],2.904531:["f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)"],.455026:["f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)"],.216732:["f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))"],.434695:["f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))"],.207048:["f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))"],2.650781:["f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))"],.498584:["f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))"],.237479:["f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))"],3.040375:["f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))"],.521902:["f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))"],.446014:["f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))"],.248586:["f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))"],.464469:["f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))"],.443716:["f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))"],.236382:["f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))"],.508931:["f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))"],.532733:["f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))"],.480638:["f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))"],.438648:["f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))"],.459164:["f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))","f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))"],"0.450070":["f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))"],"1.448960":["f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))"],1.384221:["f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)"],1.322374:["f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)"],1.516728:["f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))"],1.587665:["f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))"],"0.690150":["f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)"],.659314:["f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)"],.629856:["f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)"],.722428:["f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))","f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))"],.756216:["f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))"],1.434156:["f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))","f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))"],.729886:["f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))","f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))"],"1.501230":["f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))","f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))"],"0.666120":["f(x/sqrt(x^2+a),sqrt(x^2+a))","f(x/sqrt(a-x^2),-sqrt(a-x^2))"],1.370077:["f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))","f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))"],1.730087:["f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))","f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))"],.578006:["f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))"],"0.552180":["f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))"],1.652787:["f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))"],1.308862:["f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))","f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))"],1.342944:["f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))","f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))","f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))"],.636358:["f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))","f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))"],.652928:["f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))","f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))","f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))"],.764022:["f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)","f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))"],"1.578940":["f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))","f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))"],1.620055:["f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))","f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))"],.332117:["f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))","f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))"],1.571443:["f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))"],1.690994:["f(sin(a*x),-cos(a*x)/a)"],1.055979:["f(cos(a*x),sin(a*x)/a)"],1.116714:["f(tan(a*x),-log(cos(a*x))/a)"],.895484:["f(1/tan(a*x),log(sin(a*x))/a)"],.946989:["f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)"],.591368:["f(1/sin(a*x),log(tan(a*x/2))/a)"],2.859462:["f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))"],"2.128050":["f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))","f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))"],1.115091:["f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))"],1.081452:["f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))","f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))"],.349716:["f(1/sin(a*x)^2,-1/(a*tan(a*x)))"],.896788:["f(1/cos(a*x)^2,tan(a*x)/a)"],1.785654:["f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))"],"3.188560":["f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)"],1.516463:["f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))"],2.707879:["f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)"],.369293:["f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))"],.560019:["f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)"],.530332:["f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)"],.331177:["f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)"],.313621:["f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))"],3.172365:["f(sin(a+b*x),-cos(a+b*x)/b)"],1.127162:["f(cos(a+b*x),sin(a+b*x)/b)"],.352714:["f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)","f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)","f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)"],.454515:["f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)","f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)","f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)"],1.615441:["f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)"],1.543263:["f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)"],1.008798:["f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)"],.963724:["f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)"],1.611938:["f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)"],1.791033:["f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)"],1.123599:["f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)"],1.387031:["f(x*log(a*x),x^2*log(a*x)/2-x^2/4)"],1.325058:["f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)"],2.108018:["f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)"],.403214:["f(1/x*1/(a+log(x)),log(a+log(x)))"],2.269268:["f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)"],2.486498:["f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)"],1.769733:["f(sinh(x),cosh(x))"],1.883858:["f(cosh(x),sinh(x))"],"1.606140":["f(tanh(x),log(cosh(x)))"],1.690661:["f(x*sinh(x),x*cosh(x)-sinh(x))"],1.799688:["f(x*cosh(x),x*sinh(x)-cosh(x))"],3.131954:["f(sinh(x)^2,sinh(2*x)/4-x/2)"],2.579685:["f(tanh(x)^2,x-tanh(x))"],3.548923:["f(cosh(x)^2,sinh(2*x)/4+x/2)"],1.058866:["f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)"],"1.235270":["f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)"],1.130783:["f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)"],1.078698:["f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))"],"2.573650":["f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)","f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)"],2.640666:["f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)"],1.086487:["f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))"],1.267493:["f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))"],1.037943:["f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))"],1.210862:["f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))"],"1.064970":["f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))"],1.242392:["f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))"]},INV_check_arg=function(){return istensor(p1)?2!==p1.tensor.ndim||p1.tensor.dim[0]!==p1.tensor.dim[1]?0:1:0},inv=function(){var r,e,t,o;if(save(),p1=pop(),isinv(p1))return push(car(cdr(p1))),void restore();if(isidentitymatrix(p1))return push(p1),void restore();if(!expanding||!isinnerordot(p1))return 0===INV_check_arg()?(push_symbol(INV),push(p1),list(2),void restore()):(isNumericAtomOrTensor(p1)?yyinvg():(push(p1),adj(),push(p1),det(),p2=pop(),isZeroAtomOrTensor(p2)&&stop("inverse of singular matrix"),push(p2),divide()),restore());for(p1=cdr(p1),r=[];iscons(p1);)r.push(car(p1)),p1=cdr(p1);for(e=t=o=r.length-1;o<=0?t<=0:t>=0;e=o<=0?++t:--t)push(r[e]),inv(),e!==r.length-1&&inner();restore()},invg=function(){return save(),p1=pop(),0===INV_check_arg()?(push_symbol(INVG),push(p1),list(2),void restore()):(yyinvg(),restore())},yyinvg=function(){var r,e,t,o,s,n,p,a,i,u,l,c;for(e=0,o=0,p=p1.tensor.dim[0],r=tos,e=a=0,i=p;0<=i?a<i:a>i;e=0<=i?++a:--a)for(o=t=0,u=p;0<=u?t<u:t>u;o=0<=u?++t:--t)push(e===o?one:zero);for(e=s=0,l=p*p;0<=l?s<l:s>l;e=0<=l?++s:--s)push(p1.tensor.elem[e]);for(INV_decomp(p),(p1=alloc_tensor(p*p)).tensor.ndim=2,p1.tensor.dim[0]=p,p1.tensor.dim[1]=p,e=n=0,c=p*p;0<=c?n<c:n>c;e=0<=c?++n:--n)p1.tensor.elem[e]=stack[r+e];return moveTos(tos-2*p*p),push(p1)},INV_decomp=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f;for(t=0,o=0,n=0,f=(e=tos-r*r)-r*r,m=[],t=i=0,u=r;0<=u?i<u:i>u;t=0<=u?++i:--i){if(equal(stack[e+r*t+t],zero)){for(o=s=l=t+1,c=r;(l<=c?s<c:s>c)&&equal(stack[e+r*o+t],zero);o=l<=c?++s:--s);for(o===r&&stop("inverse of singular matrix"),n=p=0,d=r;0<=d?p<d:p>d;n=0<=d?++p:--p)p2=stack[e+r*t+n],stack[e+r*t+n]=stack[e+r*o+n],stack[e+r*o+n]=p2,p2=stack[f+r*t+n],stack[f+r*t+n]=stack[f+r*o+n],stack[f+r*o+n]=p2}for(p2=stack[e+r*t+t],n=a=0,_=r;0<=_?a<_:a>_;n=0<=_?++a:--a)n>t&&(push(stack[e+r*t+n]),push(p2),divide(),stack[e+r*t+n]=pop()),push(stack[f+r*t+n]),push(p2),divide(),stack[f+r*t+n]=pop();m.push(function(){var s,p,a;for(a=[],o=s=0,p=r;0<=p?s<p:s>p;o=0<=p?++s:--s)o!==t&&(p2=stack[e+r*o+t],a.push(function(){var s,p,a;for(a=[],n=s=0,p=r;0<=p?s<p:s>p;n=0<=p?++s:--s)n>t&&(push(stack[e+r*o+n]),push(stack[e+r*t+n]),push(p2),multiply(),subtract(),stack[e+r*o+n]=pop()),push(stack[f+r*o+n]),push(stack[f+r*t+n]),push(p2),multiply(),subtract(),a.push(stack[f+r*o+n]=pop());return a}()));return a}())}return m},DEBUG_IS=!1,isZeroAtom=function(r){switch(r.k){case NUM:if(MZERO(r.q.a))return 1;break;case DOUBLE:if(0===r.d)return 1}return 0},isZeroTensor=function(r){var e,t,o;if(r.k!==TENSOR)return 0;for(e=t=0,o=r.tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)if(!isZeroAtomOrTensor(r.tensor.elem[e]))return 0;return 1},isZeroAtomOrTensor=function(r){return isZeroAtom(r)||isZeroTensor(r)},isZeroLikeOrNonZeroLikeOrUndetermined=function(r){var e;if(push(r),Eval_predicate(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1;if(push(e),zzfloat(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1;if(Find(e,imaginaryunit)){if(push(e),absValFloat(),Eval_predicate(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1}return null},isnegativenumber=function(r){switch(r.k){case NUM:if(-1===MSIGN(r.q.a))return 1;break;case DOUBLE:if(r.d<0)return 1}return 0},ispositivenumber=function(r){switch(r.k){case NUM:if(1===MSIGN(r.q.a))return 1;break;case DOUBLE:if(r.d>0)return 1}return 0},isplustwo=function(r){switch(r.k){case NUM:if(MEQUAL(r.q.a,2)&&MEQUAL(r.q.b,1))return 1;break;case DOUBLE:if(2===r.d)return 1}return 0},isplusone=function(r){switch(r.k){case NUM:if(MEQUAL(r.q.a,1)&&MEQUAL(r.q.b,1))return 1;break;case DOUBLE:if(1===r.d)return 1}return 0},isminusone=function(r){switch(r.k){case NUM:if(MEQUAL(r.q.a,-1)&&MEQUAL(r.q.b,1))return 1;break;case DOUBLE:if(-1===r.d)return 1}return 0},isone=function(r){return isplusone(r)||isminusone(r)},isinteger=function(r){return r.k===NUM&&MEQUAL(r.q.b,1)?1:0},isintegerorintegerfloat=function(r){return r.k===DOUBLE?r.d===Math.round(r.d)?1:0:isinteger(r)},isnonnegativeinteger=function(r){return isrational(r)&&MEQUAL(r.q.b,1)&&1===MSIGN(r.q.a)?1:0},isposint=function(r){return isinteger(r)&&1===MSIGN(r.q.a)?1:0},isunivarpolyfactoredorexpandedform=function(r,e){return null==e&&(push(r),guess(),e=pop(),pop()),ispolyfactoredorexpandedform(r,e)&&Find(r,symbol(SYMBOL_X))+Find(r,symbol(SYMBOL_Y))+Find(r,symbol(SYMBOL_Z))===1?e:0},ispolyfactoredorexpandedform=function(r,e){return ispolyfactoredorexpandedform_factor(r,e)},ispolyfactoredorexpandedform_factor=function(r,e){if(car(r)===symbol(MULTIPLY)){for(r=cdr(r);iscons(r);){if(DEBUG&&console.log("ispolyfactoredorexpandedform_factor testing "+car(r)),!ispolyfactoredorexpandedform_power(car(r),e))return DEBUG&&console.log("... tested negative:"+car(r)),0;r=cdr(r)}return 1}return ispolyfactoredorexpandedform_power(r,e)},ispolyfactoredorexpandedform_power=function(r,e){return car(r)===symbol(POWER)?(DEBUG&&console.log("ispolyfactoredorexpandedform_power (isposint(caddr(p)) "+(isposint(caddr(r)),DEBUG?console.log("ispolyfactoredorexpandedform_power ispolyexpandedform_expr(cadr(p), x)) "+ispolyexpandedform_expr(cadr(r),e)):void 0)),isposint(caddr(r))&&ispolyexpandedform_expr(cadr(r),e)):(DEBUG&&console.log("ispolyfactoredorexpandedform_power not a power, testing if this is exp form: "+r),ispolyexpandedform_expr(r,e))},ispolyexpandedform=function(r,e){return Find(r,e)?ispolyexpandedform_expr(r,e):0},ispolyexpandedform_expr=function(r,e){if(car(r)===symbol(ADD)){for(r=cdr(r);iscons(r);){if(!ispolyexpandedform_term(car(r),e))return 0;r=cdr(r)}return 1}return ispolyexpandedform_term(r,e)},ispolyexpandedform_term=function(r,e){if(car(r)===symbol(MULTIPLY)){for(r=cdr(r);iscons(r);){if(!ispolyexpandedform_factor(car(r),e))return 0;r=cdr(r)}return 1}return ispolyexpandedform_factor(r,e)},ispolyexpandedform_factor=function(r,e){return equal(r,e)?1:car(r)===symbol(POWER)&&equal(cadr(r),e)?isposint(caddr(r))?1:0:Find(r,e)?0:1},isnegativeterm=function(r){return isnegativenumber(r)||car(r)===symbol(MULTIPLY)&&isnegativenumber(cadr(r))?1:0},hasNegativeRationalExponent=function(r){return car(r)===symbol(POWER)&&isrational(car(cdr(cdr(r))))&&isnegativenumber(car(cdr(r)))?(DEBUG_IS&&console.log("hasNegativeRationalExponent: "+r.toString()+" has imaginary component"),1):(DEBUG_IS&&console.log("hasNegativeRationalExponent: "+r.toString()+" has NO imaginary component"),0)},isimaginarynumberdouble=function(r){return car(r)===symbol(MULTIPLY)&&3===length(r)&&isdouble(cadr(r))&&hasNegativeRationalExponent(caddr(r))||equal(r,imaginaryunit)?1:0},isimaginarynumber=function(r){return car(r)===symbol(MULTIPLY)&&3===length(r)&&isNumericAtom(cadr(r))&&equal(caddr(r),imaginaryunit)||equal(r,imaginaryunit)||hasNegativeRationalExponent(caddr(r))?(DEBUG_IS&&console.log("isimaginarynumber: "+r.toString()+" is imaginary number"),1):(DEBUG_IS&&console.log("isimaginarynumber: "+r.toString()+" isn't an imaginary number"),0)},iscomplexnumberdouble=function(r){return car(r)===symbol(ADD)&&3===length(r)&&isdouble(cadr(r))&&isimaginarynumberdouble(caddr(r))||isimaginarynumberdouble(r)?1:0},iscomplexnumber=function(r){return car(r)===symbol(ADD)&&3===length(r)&&isNumericAtom(cadr(r))&&isimaginarynumber(caddr(r))||isimaginarynumber(r)?(DEBUG&&console.log("iscomplexnumber: "+r.toString()+" is imaginary number"),1):(DEBUG&&console.log("iscomplexnumber: "+r.toString()+" is imaginary number"),0)},iseveninteger=function(r){return isinteger(r)&&r.q.a.isEven()?1:0},isnegative=function(r){return car(r)===symbol(ADD)&&isnegativeterm(cadr(r))||isnegativeterm(r)?1:0},issymbolic=function(r){if(issymbol(r))return 1;for(;iscons(r);){if(issymbolic(car(r)))return 1;r=cdr(r)}return 0},isintegerfactor=function(r){return isinteger(r)||car(r)===symbol(POWER)&&isinteger(cadr(r))&&isinteger(caddr(r))?1:0},isNumberOneOverSomething=function(r){return isfraction(r)&&MEQUAL(r.q.a.abs(),1)?1:0},isoneover=function(r){return car(r)===symbol(POWER)&&isminusone(caddr(r))?1:0},isfraction=function(r){return r.k!==NUM||MEQUAL(r.q.b,1)?0:1},equaln=function(r,e){switch(r.k){case NUM:if(MEQUAL(r.q.a,e)&&MEQUAL(r.q.b,1))return 1;break;case DOUBLE:if(r.d===e)return 1}return 0},equalq=function(r,e,t){switch(r.k){case NUM:if(MEQUAL(r.q.a,e)&&MEQUAL(r.q.b,t))return 1;break;case DOUBLE:if(r.d===e/t)return 1}return 0},isoneovertwo=function(r){return equalq(r,1,2)?1:0},isminusoneovertwo=function(r){return equalq(r,-1,2)?1:0},isoneoversqrttwo=function(r){return car(r)===symbol(POWER)&&equaln(cadr(r),2)&&equalq(caddr(r),-1,2)?1:0},isminusoneoversqrttwo=function(r){return car(r)===symbol(MULTIPLY)&&equaln(cadr(r),-1)&&isoneoversqrttwo(caddr(r))&&3===length(r)?1:0},isfloating=function(r){if(r.k===DOUBLE||r===symbol(FLOATF))return 1;for(;iscons(r);){if(isfloating(car(r)))return 1;r=cdr(r)}return 0},isimaginaryunit=function(r){return equal(r,imaginaryunit)?1:0},isquarterturn=function(r){var e,t;if(t=0,e=0,car(r)!==symbol(MULTIPLY))return 0;if(equal(cadr(r),imaginaryunit))return caddr(r)!==symbol(PI)||3!==length(r)?0:2;if(!isNumericAtom(cadr(r)))return 0;if(!equal(caddr(r),imaginaryunit))return 0;if(cadddr(r)!==symbol(PI))return 0;if(4!==length(r))return 0;if(push(cadr(r)),push_integer(2),multiply(),t=pop_integer(),isNaN(t))return 0;switch(t<1&&(e=1,t=-t),t%4){case 0:t=1;break;case 1:t=e?4:3;break;case 2:t=2;break;case 3:t=e?3:4}return t},isnpi=function(r){var e;return e=0,r===symbol(PI)?2:car(r)===symbol(MULTIPLY)&&isNumericAtom(cadr(r))&&caddr(r)===symbol(PI)&&3===length(r)?(push(cadr(r)),push_integer(2),multiply(),e=pop_integer(),isNaN(e)?0:e=e<0?4- -e%4:1+(e-1)%4):0},$.isZeroAtomOrTensor=isZeroAtomOrTensor,$.isnegativenumber=isnegativenumber,$.isplusone=isplusone,$.isminusone=isminusone,$.isinteger=isinteger,$.isnonnegativeinteger=isnonnegativeinteger,$.isposint=isposint,$.isnegativeterm=isnegativeterm,$.isimaginarynumber=isimaginarynumber,$.iscomplexnumber=iscomplexnumber,$.iseveninteger=iseveninteger,$.isnegative=isnegative,$.issymbolic=issymbolic,$.isintegerfactor=isintegerfactor,$.isoneover=isoneover,$.isfraction=isfraction,$.isoneoversqrttwo=isoneoversqrttwo,$.isminusoneoversqrttwo=isminusoneoversqrttwo,$.isfloating=isfloating,$.isimaginaryunit=isimaginaryunit,$.isquarterturn=isquarterturn,$.isnpi=isnpi,Eval_isprime=function(){return push(cadr(p1)),Eval(),p1=pop(),isnonnegativeinteger(p1)&&mprime(p1.q.a)?push_integer(1):push_integer(0)},Eval_laguerre=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),laguerre()},laguerre=function(){var r;return save(),p3=pop(),p2=pop(),p1=pop(),push(p2),(r=pop_integer())<0||isNaN(r)?(push_symbol(LAGUERRE),push(p1),push(p2),push(p3),list(4),void restore()):(issymbol(p1)?laguerre2(r):(p4=p1,p1=symbol(SECRETX),laguerre2(r),p1=p4,push(symbol(SECRETX)),push(p1),subst(),Eval()),restore())},laguerre2=function(r){var e,t,o,s;for(e=0,push_integer(1),push_integer(0),p6=pop(),s=[],e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)p5=p6,p6=pop(),push_integer(2*e+1),push(p1),subtract(),push(p3),add(),push(p6),multiply(),push_integer(e),push(p3),add(),push(p5),multiply(),subtract(),push_integer(e+1),s.push(divide());return s},Eval_lcm=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),lcm(),r.push(p1=cdr(p1));return r},lcm=function(){var r;return r=expanding,save(),yylcm(),restore(),expanding=r},yylcm=function(){return expanding=1,p2=pop(),p1=pop(),push(p1),push(p2),gcd(),push(p1),divide(),push(p2),divide(),inverse()},Eval_leading=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),leading()},leading=function(){return save(),p2=pop(),p1=pop(),push(p1),push(p2),degree(),p3=pop(),push(p1),push(p2),push(p3),power(),divide(),push(p2),filter(),restore()},Eval_legendre=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),legendre()},legendre=function(){return save(),__legendre(),restore()},__legendre=function(){var r,e;return p3=pop(),p2=pop(),p1=pop(),push(p2),e=pop_integer(),push(p3),r=pop_integer(),e<0||isNaN(e)||r<0||isNaN(r)?(push_symbol(LEGENDRE),push(p1),push(p2),push(p3),void list(4)):(issymbol(p1)?__legendre2(e,r):(p4=p1,p1=symbol(SECRETX),__legendre2(e,r),p1=p4,push(symbol(SECRETX)),push(p1),subst(),Eval()),__legendre3(r))},__legendre2=function(r,e){var t,o,s,n,p,a;for(t=0,push_integer(1),push_integer(0),p6=pop(),t=s=0,n=r;0<=n?s<n:s>n;t=0<=n?++s:--s)p5=p6,p6=pop(),push_integer(2*t+1),push(p1),multiply(),push(p6),multiply(),push_integer(t),push(p5),multiply(),subtract(),push_integer(t+1),divide();for(a=[],t=o=0,p=e;0<=p?o<p:o>p;t=0<=p?++o:--o)push(p1),a.push(derivative());return a},__legendre3=function(r){if(0!==r)return car(p1)===symbol(COS)?(push(cadr(p1)),sine(),square()):car(p1)===symbol(SIN)?(push(cadr(p1)),cosine(),square()):(push_integer(1),push(p1),square(),subtract()),push_integer(r),push_rational(1,2),multiply(),power(),multiply(),r%2?negate():void 0},list=function(r){var e,t,o;for(push(symbol(NIL)),o=[],e=0,t=r;0<=t?e<t:e>t;0<=t?++e:--e)o.push(cons());return o},Eval_log=function(){return push(cadr(p1)),Eval(),logarithm()},logarithm=function(){return save(),yylog(),restore()},yylog=function(){var r;if(r=0,(p1=pop())!==symbol(E))if(equaln(p1,1))push_integer(0);else{if(isnegativenumber(p1))return push(p1),negate(),logarithm(),push(imaginaryunit),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),multiply(),void add();if(isdouble(p1))return r=Math.log(p1.d),void push_double(r);if(isfraction(p1))return push(p1),numerator(),logarithm(),push(p1),denominator(),logarithm(),void subtract();if(car(p1)===symbol(POWER))return push(caddr(p1)),push(cadr(p1)),logarithm(),void multiply();if(car(p1)!==symbol(MULTIPLY))return push_symbol(LOG),push(p1),list(2);for(push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),logarithm(),add(),p1=cdr(p1)}else push_integer(1)},Eval_lookup=function(){return p1=cadr(p1),iscons(p1)||cadr(p1).k!==SYM||(p1=get_binding(p1)),push(p1)},madd=function(r,e){return r.add(e)},msub=function(r,e){return r.subtract(e)},addf=function(r,e){return r.add(e)},subf=function(r,e){return r.subtract(e)},ucmp=function(r,e){return r.compareAbs(e)},mgcd=function(r,e){return bigInt.gcd(r,e)},new_string=function(r){return save(),(p1=new U).k=STR,p1.str=r,push(p1),restore()},out_of_memory=function(){return stop("out of memory")},push_zero_matrix=function(r,e){return push(alloc_tensor(r*e)),stack[tos-1].tensor.ndim=2,stack[tos-1].tensor.dim[0]=r,stack[tos-1].tensor.dim[1]=e},push_identity_matrix=function(r){var e,t,o;for(push_zero_matrix(r,r),e=0,e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)stack[tos-1].tensor.elem[e*r+e]=one;return check_tensor_dimensions(stack[tos-1])},push_cars=function(r){var e;for(e=[];iscons(r);)push(car(r)),e.push(r=cdr(r));return e},peek=function(){return save(),p1=pop(),push(p1),restore()},equal=function(r,e){return 0===cmp_expr(r,e)?1:0},lessp=function(r,e){return cmp_expr(r,e)<0?1:0},sign=function(r){return r<0?-1:r>0?1:0},cmp_expr=function(r,e){var t;if(t=0,r===e)return 0;if(r===symbol(NIL))return-1;if(e===symbol(NIL))return 1;if(isNumericAtom(r)&&isNumericAtom(e))return sign(compare_numbers(r,e));if(isNumericAtom(r))return-1;if(isNumericAtom(e))return 1;if(isstr(r)&&isstr(e))return sign(strcmp(r.str,e.str));if(isstr(r))return-1;if(isstr(e))return 1;if(issymbol(r)&&issymbol(e))return sign(strcmp(get_printname(r),get_printname(e)));if(issymbol(r))return-1;if(issymbol(e))return 1;if(istensor(r)&&istensor(e))return compare_tensors(r,e);if(istensor(r))return-1;if(istensor(e))return 1;for(;iscons(r)&&iscons(e);){if(0!==(t=cmp_expr(car(r),car(e))))return t;r=cdr(r),e=cdr(e)}return iscons(e)?-1:iscons(r)?1:0},length=function(r){var e;for(e=0;iscons(r);)r=cdr(r),e++;return e},unique=function(r){return save(),p1=symbol(NIL),p2=symbol(NIL),unique_f(r),p2!==symbol(NIL)&&(p1=symbol(NIL)),r=p1,restore(),r},unique_f=function(r){if(isstr(r))p1===symbol(NIL)?p1=r:r!==p1&&(p2=r);else for(;iscons(r);){if(unique_f(car(r)),p2!==symbol(NIL))return;r=cdr(r)}},ssqrt=function(){return push_rational(1,2),power()},yyexpand=function(){var r;return r=expanding,expanding=1,Eval(),expanding=r},exponential=function(){return push_symbol(E),swap(),power()},square=function(){return push_integer(2),power()},sort_stack=function(r){var e,t;return e=tos-r,(t=stack.slice(e,e+r)).sort(cmp_expr),stack=stack.slice(0,e).concat(t).concat(stack.slice(e+r))},$.equal=equal,$.length=length,mmul=function(r,e){return r.multiply(e)},mdiv=function(r,e){return r.divide(e)},mmod=function(r,e){return r.mod(e)},mdivrem=function(r,e){var t;return[(t=r.divmod(e)).quotient,t.remainder]},Eval_mod=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),mod()},mod=function(){var r;return r=0,save(),p2=pop(),p1=pop(),isZeroAtomOrTensor(p2)&&stop("mod function: divide by zero"),isNumericAtom(p1)&&isNumericAtom(p2)?(isdouble(p1)&&(push(p1),r=pop_integer(),isNaN(r)&&stop("mod function: cannot convert float value to integer"),push_integer(r),p1=pop()),isdouble(p2)&&(push(p2),r=pop_integer(),isNaN(r)&&stop("mod function: cannot convert float value to integer"),push_integer(r),p2=pop()),isinteger(p1)&&isinteger(p2)||stop("mod function: integer arguments expected"),(p3=new U).k=NUM,p3.q.a=mmod(p1.q.a,p2.q.a),p3.q.b=mint(1),push(p3),restore()):(push_symbol(MOD),push(p1),push(p2),list(3),void restore())},mpow=function(r,e){return r.pow(e)},mprime=function(r){return r.isProbablePrime()},mroot=function(r,e){var t,o,s,n,p,a,i;for(r=r.abs(),t=0,s=0,0===e&&stop("root index is zero"),s=0;r.shiftRight(s)>0;)s++;if(0===s)return mint(0);for(s=Math.floor((s-1)/e),o=Math.floor(s/32+1),a=bigInt(o),t=n=0,p=o;0<=p?n<p:n>p;t=0<=p?++n:--n)a=a.and(bigInt(1).shiftLeft(t).not());for(;s>=0;){switch(a=a.or(bigInt(1).shiftLeft(s)),i=mpow(a,e),mcmp(i,r)){case 0:return a;case 1:a=a.and(bigInt(1).shiftLeft(s).not())}s--}return 0},Eval_multiply=function(){var r;for(push(cadr(p1)),Eval(),p1=cddr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),multiply(),r.push(p1=cdr(p1));return r},multiply=function(){return esc_flag&&stop("escape key stop"),isNumericAtom(stack[tos-2])&&isNumericAtom(stack[tos-1])?multiply_numbers():(save(),yymultiply(),restore())},yymultiply=function(){var r,e,t,o,s,n;if(e=0,p2=pop(),p1=pop(),r=tos,isZeroAtom(p1)||isZeroAtom(p2))evaluatingAsFloats?push_double(0):push(zero);else if(expanding&&isadd(p1))for(p1=cdr(p1),evaluatingAsFloats?push_double(0):push(zero);iscons(p1);)push(car(p1)),push(p2),multiply(),add(),p1=cdr(p1);else if(expanding&&isadd(p2))for(p2=cdr(p2),evaluatingAsFloats?push_double(0):push(zero);iscons(p2);)push(p1),push(car(p2)),multiply(),add(),p2=cdr(p2);else{if(!istensor(p1)&&istensor(p2))return push(p1),push(p2),void scalar_times_tensor();if(istensor(p1)&&!istensor(p2))return push(p1),push(p2),void tensor_times_scalar();for(car(p1)===symbol(MULTIPLY)?p1=cdr(p1):(push(p1),list(1),p1=pop()),car(p2)===symbol(MULTIPLY)?p2=cdr(p2):(push(p2),list(1),p2=pop()),isNumericAtom(car(p1))&&isNumericAtom(car(p2))?(push(car(p1)),push(car(p2)),multiply_numbers(),p1=cdr(p1),p2=cdr(p2)):isNumericAtom(car(p1))?(push(car(p1)),p1=cdr(p1)):isNumericAtom(car(p2))?(push(car(p2)),p2=cdr(p2)):evaluatingAsFloats?push_double(1):push(one),parse_p1(),parse_p2();iscons(p1)&&iscons(p2);)if(caar(p1)!==symbol(OPERATOR)||caar(p2)!==symbol(OPERATOR))switch(cmp_expr(p3,p4)){case-1:push(car(p1)),p1=cdr(p1),parse_p1();break;case 1:push(car(p2)),p2=cdr(p2),parse_p2();break;case 0:combine_factors(r),p1=cdr(p1),p2=cdr(p2),parse_p1(),parse_p2();break;default:stop("internal error 2")}else push_symbol(OPERATOR),push(cdar(p1)),push(cdar(p2)),append(),cons(),p1=cdr(p1),p2=cdr(p2),parse_p1(),parse_p2();for(;iscons(p1);)push(car(p1)),p1=cdr(p1);for(;iscons(p2);)push(car(p2)),p2=cdr(p2);if(__normalize_radical_factors(r),expanding)for(e=o=s=r,n=tos;s<=n?o<n:o>n;e=s<=n?++o:--o)if(isadd(stack[e]))return void multiply_all(tos-r);if(1!=(t=tos-r)){if(!isrational(stack[r])||!equaln(stack[r],1))return list(t),p7=pop(),push_symbol(MULTIPLY),push(p7),cons();2===t?(p7=pop(),pop(),push(p7)):(stack[r]=symbol(MULTIPLY),list(t))}}},parse_p1=function(){if(p3=car(p1),p5=evaluatingAsFloats?one_as_double:one,car(p3)===symbol(POWER))return p5=caddr(p3),p3=cadr(p3)},parse_p2=function(){if(p4=car(p2),p6=evaluatingAsFloats?one_as_double:one,car(p4)===symbol(POWER))return p6=caddr(p4),p4=cadr(p4)},combine_factors=function(r){return push(p4),push(p5),push(p6),add(),power(),p7=pop(),isNumericAtom(p7)?(push(stack[r]),push(p7),multiply_numbers(),stack[r]=pop()):car(p7)===symbol(MULTIPLY)&&isNumericAtom(cadr(p7))&&cdddr(p7)===symbol(NIL)?(push(stack[r]),push(cadr(p7)),multiply_numbers(),stack[r]=pop(),push(caddr(p7))):push(p7)},gp=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,-6,-7,-8,-3,-4,-5,13,14,15,-16,9,10,11,-12],[0,0,6,-1,-11,10,-2,-15,14,12,-5,4,-9,16,-8,7,-13],[0,0,7,11,-1,-9,15,-2,-13,5,12,-3,-10,8,16,-6,-14],[0,0,8,-10,9,-1,-14,13,-2,-4,3,12,-11,-7,6,16,-15],[0,0,3,2,15,-14,1,11,-10,16,-8,7,13,12,-5,4,9],[0,0,4,-15,2,13,-11,1,9,8,16,-6,14,5,12,-3,10],[0,0,5,14,-13,2,10,-9,1,-7,6,16,15,-4,3,12,11],[0,0,13,12,-5,4,16,-8,7,-1,-11,10,-3,-2,-15,14,-6],[0,0,14,5,12,-3,8,16,-6,11,-1,-9,-4,15,-2,-13,-7],[0,0,15,-4,3,12,-7,6,16,-10,9,-1,-5,-14,13,-2,-8],[0,0,16,-9,-10,-11,-13,-14,-15,-3,-4,-5,1,-6,-7,-8,2],[0,0,9,-16,8,-7,-12,5,-4,-2,-15,14,6,-1,-11,10,3],[0,0,10,-8,-16,6,-5,-12,3,15,-2,-13,7,11,-1,-9,4],[0,0,11,7,-6,-16,4,-3,-12,-14,13,-2,8,-10,9,-1,5],[0,0,12,13,14,15,9,10,11,-6,-7,-8,-2,-3,-4,-5,-1]],combine_gammas=function(r){var e;if((e=gp[Math.floor(p1.gamma)][Math.floor(p2.gamma)])<0&&(e=-e,push(stack[r]),negate(),stack[r]=pop()),e>1)return push(_gamma[e])},multiply_noexpand=function(){var r;return r=expanding,expanding=0,multiply(),expanding=r},multiply_all=function(r){var e,t,o,s;if(t=0,1!==r){if(0!==r){for(push(stack[e=tos-r]),t=o=1,s=r;1<=s?o<s:o>s;t=1<=s?++o:--o)push(stack[e+t]),multiply();return stack[e]=pop(),moveTos(e+1)}push(evaluatingAsFloats?one_as_double:one)}},multiply_all_noexpand=function(r){var e;return e=expanding,expanding=0,multiply_all(r),expanding=e},divide=function(){return isNumericAtom(stack[tos-2])&&isNumericAtom(stack[tos-1])?divide_numbers():(inverse(),multiply())},inverse=function(){return isNumericAtom(stack[tos-1])?invert_number():(push_integer(-1),power())},reciprocate=function(){return inverse()},negate=function(){return isNumericAtom(stack[tos-1])?negate_number():(evaluatingAsFloats?push_double(-1):push_integer(-1),multiply())},negate_expand=function(){var r;return r=expanding,expanding=1,negate(),expanding=r},negate_noexpand=function(){var r;return r=expanding,expanding=0,negate(),expanding=r},__normalize_radical_factors=function(r){var e,t,o,s,n,p,a,i,u,l;if(e=0,!(isplusone(stack[r])||isminusone(stack[r])||isdouble(stack[r]))){for(e=s=n=r+1,p=tos;(n<=p?s<p:s>p)&&!__is_radical_number(stack[e]);e=n<=p?++s:--s);if(e!==tos){for(save(),push(stack[r]),mp_numerator(),p1=pop(),e=t=a=r+1,i=tos;(a<=i?t<i:t>i)&&!isplusone(p1)&&!isminusone(p1);e=a<=i?++t:--t)__is_radical_number(stack[e])&&(p3=cadr(stack[e]),p4=caddr(stack[e]),isnegativenumber(p4)&&(push(p1),push(p3),divide(),p5=pop(),isinteger(p5)&&(p1=p5,push_symbol(POWER),push(p3),push(evaluatingAsFloats?one_as_double:one),push(p4),add(),list(3),stack[e]=pop())));for(push(stack[r]),mp_denominator(),p2=pop(),e=o=u=r+1,l=tos;(u<=l?o<l:o>l)&&!isplusone(p2);e=u<=l?++o:--o)if(__is_radical_number(stack[e])&&(p3=cadr(stack[e]),p4=caddr(stack[e]),!isnegativenumber(p4)&&(push(p2),push(p3),divide(),p5=pop(),isinteger(p5)))){if(p2=p5,push_symbol(POWER),push(p3),push(p4),push(one),subtract(),dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication&&isinteger(p3)&&!isinteger(stack[tos-1])&&isnegativenumber(stack[tos-1])){pop(),pop(),pop(),push(p1),push(p3),divide(),p1=pop();break}list(3),stack[e]=pop()}return push(p1),push(p2),divide(),stack[r]=pop(),restore()}}},__is_radical_number=function(r){return car(r)===symbol(POWER)&&isNumericAtom(cadr(r))&&isNumericAtom(caddr(r))&&!isminusone(cadr(r))?1:0},NROOTS_YMAX=101,NROOTS_DELTA=1e-6,NROOTS_EPSILON=1e-9,NROOTS_ABS=function(r){return Math.sqrt(r.r*r.r+r.i*r.i)},theRandom=0,NROOTS_RANDOM=function(){return 4*Math.random()-2},numericRootOfPolynomial=function(){class r{}return r.prototype.r=0,r.prototype.i=0,r}.call(this),nroots_a=new numericRootOfPolynomial,nroots_b=new numericRootOfPolynomial,nroots_x=new numericRootOfPolynomial,nroots_y=new numericRootOfPolynomial,nroots_fa=new numericRootOfPolynomial,nroots_fb=new numericRootOfPolynomial,nroots_dx=new numericRootOfPolynomial,nroots_df=new numericRootOfPolynomial,nroots_c=[],initNRoots=o=0,ref=NROOTS_YMAX;0<=ref?o<ref:o>ref;initNRoots=0<=ref?++o:--o)nroots_c[initNRoots]=new numericRootOfPolynomial;for(Eval_nroots=function(){var r,e,t,o,s,n,p,a,i;for(e=0,s=0,p=0,push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2)||stop("nroots: polynomial?"),r=tos,push(p1),push(p2),(p=coeff())>NROOTS_YMAX&&stop("nroots: degree?"),e=t=0,a=p;0<=a?t<a:t>a;e=0<=a?++t:--t)push(stack[r+e]),real(),yyfloat(),Eval(),p1=pop(),push(stack[r+e]),imag(),yyfloat(),Eval(),p2=pop(),isdouble(p1)&&isdouble(p2)||stop("nroots: coefficients?"),nroots_c[e].r=p1.d,nroots_c[e].i=p2.d;for(moveTos(r),monic(p),s=o=p;o>1;s=o+=-1)findroot(s),Math.abs(nroots_a.r)<NROOTS_DELTA&&(nroots_a.r=0),Math.abs(nroots_a.i)<NROOTS_DELTA&&(nroots_a.i=0),push_double(nroots_a.r),push_double(nroots_a.i),push(imaginaryunit),multiply(),add(),NROOTS_divpoly(s);if((p=tos-r)>1){for(sort_stack(p),(p1=alloc_tensor(p)).tensor.ndim=1,p1.tensor.dim[0]=p,e=n=0,i=p;0<=i?n<i:n>i;e=0<=i?++n:--n)p1.tensor.elem[e]=stack[r+e];return moveTos(r),push(p1)}},monic=function(r){var e,t,o,s;for(t=0,nroots_y.r=nroots_c[r-1].r,nroots_y.i=nroots_c[r-1].i,s=nroots_y.r*nroots_y.r+nroots_y.i*nroots_y.i,t=e=0,o=r-1;0<=o?e<o:e>o;t=0<=o?++e:--e)nroots_c[t].r=(nroots_c[t].r*nroots_y.r+nroots_c[t].i*nroots_y.i)/s,nroots_c[t].i=(nroots_c[t].i*nroots_y.r-nroots_c[t].r*nroots_y.i)/s;return nroots_c[r-1].r=1,nroots_c[r-1].i=0},findroot=function(r){var e,t,o,s;if(s=0,NROOTS_ABS(nroots_c[0])<NROOTS_DELTA)return nroots_a.r=0,void(nroots_a.i=0);for(e=0;e<100;++e)for(nroots_a.r=NROOTS_RANDOM(),nroots_a.i=NROOTS_RANDOM(),compute_fa(r),nroots_b.r=nroots_a.r,nroots_b.i=nroots_a.i,nroots_fb.r=nroots_fa.r,nroots_fb.i=nroots_fa.i,nroots_a.r=NROOTS_RANDOM(),nroots_a.i=NROOTS_RANDOM(),t=0;t<1e3;++t){if(compute_fa(r),o=NROOTS_ABS(nroots_fa),DEBUG&&console.log("nrabs: "+o),o<NROOTS_EPSILON)return;if(NROOTS_ABS(nroots_fa)<NROOTS_ABS(nroots_fb)&&(nroots_x.r=nroots_a.r,nroots_x.i=nroots_a.i,nroots_a.r=nroots_b.r,nroots_a.i=nroots_b.i,nroots_b.r=nroots_x.r,nroots_b.i=nroots_x.i,nroots_x.r=nroots_fa.r,nroots_x.i=nroots_fa.i,nroots_fa.r=nroots_fb.r,nroots_fa.i=nroots_fb.i,nroots_fb.r=nroots_x.r,nroots_fb.i=nroots_x.i),nroots_dx.r=nroots_b.r-nroots_a.r,nroots_dx.i=nroots_b.i-nroots_a.i,nroots_df.r=nroots_fb.r-nroots_fa.r,nroots_df.i=nroots_fb.i-nroots_fa.i,0==(s=nroots_df.r*nroots_df.r+nroots_df.i*nroots_df.i))break;nroots_y.r=(nroots_dx.r*nroots_df.r+nroots_dx.i*nroots_df.i)/s,nroots_y.i=(nroots_dx.i*nroots_df.r-nroots_dx.r*nroots_df.i)/s,nroots_a.r=nroots_b.r-(nroots_y.r*nroots_fb.r-nroots_y.i*nroots_fb.i),nroots_a.i=nroots_b.i-(nroots_y.r*nroots_fb.i+nroots_y.i*nroots_fb.r)}return stop("nroots: convergence error")},compute_fa=function(r){var e,t,o,s,n;for(t=0,n=0,nroots_x.r=nroots_a.r,nroots_x.i=nroots_a.i,nroots_fa.r=nroots_c[0].r+nroots_c[1].r*nroots_x.r-nroots_c[1].i*nroots_x.i,nroots_fa.i=nroots_c[0].i+nroots_c[1].r*nroots_x.i+nroots_c[1].i*nroots_x.r,s=[],t=e=2,o=r;2<=o?e<o:e>o;t=2<=o?++e:--e)n=nroots_a.r*nroots_x.r-nroots_a.i*nroots_x.i,nroots_x.i=nroots_a.r*nroots_x.i+nroots_a.i*nroots_x.r,nroots_x.r=n,nroots_fa.r+=nroots_c[t].r*nroots_x.r-nroots_c[t].i*nroots_x.i,s.push(nroots_fa.i+=nroots_c[t].r*nroots_x.i+nroots_c[t].i*nroots_x.r);return s},NROOTS_divpoly=function(r){var e,t,o,s,n,p;for(o=0,o=e=s=r-1;s<=0?e<0:e>0;o=s<=0?++e:--e)nroots_c[o-1].r+=nroots_c[o].r*nroots_a.r-nroots_c[o].i*nroots_a.i,nroots_c[o-1].i+=nroots_c[o].i*nroots_a.r+nroots_c[o].r*nroots_a.i;for(NROOTS_ABS(nroots_c[0])>NROOTS_DELTA&&stop("nroots: residual error"),p=[],o=t=0,n=r-1;0<=n?t<n:t>n;o=0<=n?++t:--t)nroots_c[o].r=nroots_c[o+1].r,p.push(nroots_c[o].i=nroots_c[o+1].i);return p},Eval_numerator=function(){return push(cadr(p1)),Eval(),numerator()},numerator=function(){var r,e;if(0,e=pop(),car(e)===symbol(ADD)&&(push(e),rationalize(),e=pop()),car(e)!==symbol(MULTIPLY)||isplusone(car(cdr(e))))return isrational(e)?(push(e),mp_numerator()):car(e)===symbol(POWER)&&isnegativeterm(caddr(e))?push(one):push(e);for(r=tos,e=cdr(e);iscons(e);)push(car(e)),numerator(),e=cdr(e);return multiply_all(tos-r)},Eval_outer=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),outer(),r.push(p1=cdr(p1));return r},outer=function(){return save(),p2=pop(),p1=pop(),istensor(p1)&&istensor(p2)?yyouter():(push(p1),push(p2),istensor(p1)?tensor_times_scalar():istensor(p2)?scalar_times_tensor():multiply()),restore()},yyouter=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d;for(r=0,t=0,s=0,(a=p1.tensor.ndim+p2.tensor.ndim)>MAXDIM&&stop("outer: rank of result exceeds maximum"),i=p1.tensor.nelem*p2.tensor.nelem,(p3=alloc_tensor(i)).tensor.ndim=a,r=e=0,u=p1.tensor.ndim;0<=u?e<u:e>u;r=0<=u?++e:--e)p3.tensor.dim[r]=p1.tensor.dim[r];for(t=r,r=o=0,l=p2.tensor.ndim;0<=l?o<l:o>l;r=0<=l?++o:--o)p3.tensor.dim[t+r]=p2.tensor.dim[r];for(s=0,r=n=0,c=p1.tensor.nelem;0<=c?n<c:n>c;r=0<=c?++n:--n)for(t=p=0,d=p2.tensor.nelem;0<=d?p<d:p>d;t=0<=d?++p:--p)push(p1.tensor.elem[r]),push(p2.tensor.elem[t]),multiply(),p3.tensor.elem[s++]=pop();return push(p3)},partition=function(){for(save(),p2=pop(),p1=pop(),push_integer(1),p3=pop(),p4=p3,p1=cdr(p1);iscons(p1);)Find(car(p1),p2)?(push(p4),push(car(p1)),multiply(),p4=pop()):(push(p3),push(car(p1)),multiply(),p3=pop()),p1=cdr(p1);return push(p3),push(p4),restore()},Eval_silentpattern=function(){return Eval_pattern(),pop(),push_symbol(NIL)},Eval_pattern=function(){var r,e,t,o,s;return iscons(cdr(p1))||stop("pattern needs at least a template and a transformed version"),r=car(cdr(p1)),(t=car(cdr(cdr(p1))))===symbol(NIL)&&stop("pattern needs at least a template and a transformed version"),s=iscons(cdr(cdr(p1)))?car(cdr(cdr(cdr(p1)))):symbol(NIL),equal(r,t)&&stop("recursive pattern"),o="template: "+print_list(r),o+=" tests: "+print_list(s),DEBUG&&console.log("pattern stringkey: "+o),-1===(e=userSimplificationsInStringForm.indexOf(o))?(userSimplificationsInStringForm.push(o),userSimplificationsInListForm.push(cdr(p1))):(DEBUG&&console.log("pattern already exists, replacing. "+cdr(p1)),userSimplificationsInStringForm[e]=o,userSimplificationsInListForm[e]=cdr(p1)),push_symbol(PATTERN),push(cdr(p1)),list(2)},do_clearPatterns=function(){return userSimplificationsInListForm=[],userSimplificationsInStringForm=[]},Eval_clearpatterns=function(){return do_clearPatterns(),push_symbol(NIL)},Eval_patternsinfo=function(){var r;return""!==(r=patternsinfo())?new_string(r):push_symbol(NIL)},patternsinfo=function(){var r,e,t;for(t="",r=0,e=userSimplificationsInListForm.length;r<e;r++)userSimplificationsInListForm[r],t+=userSimplificationsInListForm+"\n";return t},Eval_polar=function(){return push(cadr(p1)),Eval(),polar()},polar=function(){return evaluatingPolar++,save(),p1=pop(),push(p1),abs(),push(imaginaryunit),push(p1),arg(),multiply(),exponential(),multiply(),evaluatingPolar--,restore()},n_factor_number=0,factor_number=function(){var r;return save(),p1=pop(),equaln(p1,0)||equaln(p1,1)||equaln(p1,-1)?(push(p1),void restore()):(n_factor_number=p1.q.a,r=tos,factor_a(),tos-r>1&&(list(tos-r),push_symbol(MULTIPLY),swap(),cons()),restore())},factor_a=function(){var r,e;for(e=0,n_factor_number.isNegative()&&(n_factor_number=setSignTo(n_factor_number,1),push_integer(-1)),e=r=0;r<1e4;e=++r)if(try_kth_prime(e),0===n_factor_number.compare(1))return;return factor_b()},try_kth_prime=function(r){var e,t,o,s;for(e=0,t=mint(primetab[r]),e=0;;){if(0===n_factor_number.compare(1))return void(e&&push_factor(t,e));if([o,s]=mdivrem(n_factor_number,t),!s.isZero())break;e++,n_factor_number=o}if(e&&push_factor(t,e),-1===mcmp(o,t))return push_factor(n_factor_number,1),n_factor_number=mint(1)},factor_b=function(){var r,e,t,o,s,n,p;for(t=0,o=0,r=mint(1),n=mint(5),p=mint(2),t=1,o=1;;){if(mprime(n_factor_number))return push_factor(n_factor_number,1),0;for(;;){if(esc_flag&&stop("esc"),s=msub(p,n),s=setSignTo(s,1),e=mgcd(s,n_factor_number),!MEQUAL(e,1)){if(push_factor(e,1),0===mcmp(e,n_factor_number))return-1;s=mdiv(n_factor_number,e),n=s=mmod(n,n_factor_number=s),p=s=mmod(p,n_factor_number);break}0==--t&&(p=n,t=o*=2),s=mmul(n,n),n=madd(s,r),n=s=mmod(n,n_factor_number)}}},push_factor=function(r,e){if((p1=new U).k=NUM,p1.q.a=r,p1.q.b=mint(1),push(p1),e>1)return push_symbol(POWER),swap(),(p1=new U).k=NUM,p1.q.a=mint(e),p1.q.b=mint(1),push(p1),list(3)},DEBUG_POWER=!1,Eval_power=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),power()},power=function(){return save(),yypower(),restore()},yypower=function(){var r,e,t,o,s,n,p;if(p=0,p2=pop(),p1=pop(),o=p2,t=p1,DEBUG_POWER&&console.log("POWER: "+p1+" ^ "+p2),equal(p1,one)||isZeroAtomOrTensor(p2))return evaluatingAsFloats?push_double(1):push(one),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(equal(p2,one))return push(p1),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isminusone(p1)&&isminusone(p2))return evaluatingAsFloats?push_double(1):push(one),negate(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isminusone(p1)&&isoneovertwo(p2))return push(imaginaryunit),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isminusone(p1)&&isminusoneovertwo(p2))return push(imaginaryunit),negate(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isminusone(p1)&&!isdouble(p1)&&isrational(p2)&&!isinteger(p2)&&ispositivenumber(p2)&&!evaluatingAsFloats)return DEBUG_POWER&&console.log("   power: -1 ^ rational"),DEBUG_POWER&&console.log(" trick: p2.q.a , p2.q.b "+p2.q.a+" , "+p2.q.b),p2.q.a<p2.q.b?(push_symbol(POWER),push(p1),push(p2),list(3)):(push_symbol(MULTIPLY),push(p1),push_symbol(POWER),push(p1),push_rational(p2.q.a.mod(p2.q.b),p2.q.b),list(3),list(3),DEBUG_POWER&&console.log(" trick applied : "+stack[tos-1])),rect(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isrational(p1)&&isrational(p2))return DEBUG_POWER&&console.log("   power: isrational(p1) && isrational(p2)"),push(p1),push(p2),qpow(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isNumericAtom(p1)&&isNumericAtom(p2))return DEBUG_POWER&&console.log("   power: both base and exponent are either rational or double "),DEBUG_POWER&&console.log("POWER - isNumericAtom(p1) && isNumericAtom(p2)"),push(p1),push(p2),dpow(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(istensor(p1))return DEBUG_POWER&&console.log("   power: istensor(p1) "),power_tensor(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(car(p1)===symbol(ABS)&&iseveninteger(p2)&&!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))))return DEBUG_POWER&&console.log("   power: even power of absolute of real value "),push(cadr(p1)),push(p2),power(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(p1===symbol(E)&&car(p2)===symbol(LOG))return push(cadr(p2)),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(p1===symbol(E)&&isdouble(p2))return DEBUG_POWER&&console.log("   power: p1 == symbol(E) && isdouble(p2) "),push_double(Math.exp(p2.d)),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(p1===symbol(E)&&0!==Find(p2,imaginaryunit)&&0!==Find(p2,symbol(PI))&&!evaluatingPolar&&(push_symbol(POWER),push(p1),push(p2),list(3),DEBUG_POWER&&console.log("   power: turning complex exponential to rect: "+stack[tos-1]),rect(),e=pop(),0===Find(e,symbol(PI))))return DEBUG_POWER&&console.log("   power: turned complex exponential to rect: "+e),void push(e);if(car(p1)===symbol(MULTIPLY)&&isinteger(p2)){for(DEBUG_POWER&&console.log("   power: (a * b) ^ c  ->  (a ^ c) * (b ^ c) "),p1=cdr(p1),push(car(p1)),push(p2),power(),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),power(),multiply(),p1=cdr(p1);DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1])}else{if(n=!1,isNumericAtom(cadr(p1))&&(n=sign(compare_numbers(cadr(p1),zero))),car(p1)===symbol(POWER)&&(isinteger(p2)||n))return push(cadr(p1)),push(caddr(p1)),push(p2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(r=!1,iseveninteger(caddr(p1))&&(push(caddr(p1)),push(p2),multiply(),s=pop(),isone(s)&&(r=!0)),car(p1)===symbol(POWER)&&r)return DEBUG_POWER&&console.log("   power: car(p1) == symbol(POWER) && b_isEven_and_c_isItsInverse "),push(cadr(p1)),abs(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(expanding&&isadd(p1)&&isNumericAtom(p2)&&(push(p2),(p=pop_integer())>1&&!isNaN(p)))return DEBUG_POWER&&console.log("   power: expanding && isadd(p1) && isNumericAtom(p2) "),power_sum(p),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(1===trigmode&&car(p1)===symbol(SIN)&&iseveninteger(p2))return DEBUG_POWER&&console.log("   power: trigmode == 1 && car(p1) == symbol(SIN) && iseveninteger(p2) "),push_integer(1),push(cadr(p1)),cosine(),push_integer(2),power(),subtract(),push(p2),push_rational(1,2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(2===trigmode&&car(p1)===symbol(COS)&&iseveninteger(p2))return DEBUG_POWER&&console.log("   power: trigmode == 2 && car(p1) == symbol(COS) && iseveninteger(p2) "),push_integer(1),push(cadr(p1)),sine(),push_integer(2),power(),subtract(),push(p2),push_rational(1,2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(iscomplexnumber(p1)){if(DEBUG_POWER&&console.log(" power - handling the case (a + ib) ^ n"),isinteger(p2))return push(p1),conjugate(),p3=pop(),push(p3),push(p3),push(p1),multiply(),divide(),isone(p2)||(push(p2),negate(),power()),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isNumericAtom(p2))return push(p1),abs(),push(p2),power(),push_integer(-1),push(p1),arg(),push(p2),multiply(),evaluatingAsFloats||iscomplexnumberdouble(p1)&&isdouble(p2)?push_double(Math.PI):push(symbol(PI)),divide(),power(),multiply(),avoidCalculatingPowersIntoArctans&&Find(stack[tos-1],symbol(ARCTAN))&&(pop(),push_symbol(POWER),push(p1),push(p2),list(3)),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]))}if(!simplify_polar())return DEBUG_POWER&&console.log("   power: nothing can be done "),push_symbol(POWER),push(p1),push(p2),list(3),DEBUG_POWER?console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]):void 0;DEBUG_POWER&&console.log("   power: using simplify_polar")}},power_sum=function(r){var e,t,o,s,n,p,a,i,u,l;for(e=[],t=0,s=0,p=length(p1)-1,push_frame(p*(r+1)),p1=cdr(p1),t=o=0,i=p;0<=i?o<i:o>i;t=0<=i?++o:--o){for(s=n=0,u=r;0<=u?n<=u:n>=u;s=0<=u?++n:--n)push(car(p1)),push_integer(s),power(),stack[frame+t*(r+1)+s]=pop();p1=cdr(p1)}for(push_integer(r),factorial(),p1=pop(),t=a=0,l=p;0<=l?a<l:a>l;t=0<=l?++a:--a)e[t]=0;return push(zero),multinomial_sum(p,r,e,0,r),pop_frame(p*(r+1))},multinomial_sum=function(r,e,t,o,s){var n,p,a,i,u,l,c;if(p=0,!(o<r-1)){for(t[o]=s,push(p1),p=a=0,l=r;0<=l?a<l:a>l;p=0<=l?++a:--a)push_integer(t[p]),factorial(),divide();for(p=i=0,c=r;0<=c?i<c:i>c;p=0<=c?++i:--i)push(stack[frame+p*(e+1)+t[p]]),multiply();return add()}for(p=n=0,u=s;0<=u?n<=u:n>=u;p=0<=u?++n:--n)t[o]=p,multinomial_sum(r,e,t,o+1,s-p)},simplify_polar=function(){var r;switch(r=0,r=isquarterturn(p2)){case 0:break;case 1:return push_integer(1),1;case 2:return push_integer(-1),1;case 3:return push(imaginaryunit),1;case 4:return push(imaginaryunit),negate(),1}if(car(p2)===symbol(ADD)){for(p3=cdr(p2);iscons(p3)&&!(r=isquarterturn(car(p3)));)p3=cdr(p3);switch(r){case 0:return 0;case 1:push_integer(1);break;case 2:push_integer(-1);break;case 3:push(imaginaryunit);break;case 4:push(imaginaryunit),negate()}return push(p2),push(car(p3)),subtract(),exponential(),multiply(),1}return 0},Eval_prime=function(){return push(cadr(p1)),Eval(),prime()},prime=function(){var r;return r=0,((r=pop_integer())<1||r>MAXPRIMETAB)&&stop("prime: Argument out of range."),r=primetab[r-1],push_integer(r)},power_str="^",codeGen=!1,Eval_print=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),printMode),push(symbol(NIL))},Eval_print2dascii=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_2DASCII),push(symbol(NIL))},Eval_printcomputer=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_COMPUTER),push(symbol(NIL))},Eval_printlatex=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_LATEX),push(symbol(NIL))},Eval_printhuman=function(){var r;return r=test_flag,test_flag=0,stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_HUMAN),test_flag=r,push(symbol(NIL))},Eval_printlist=function(){var r;return r=_print(cdr(p1),PRINTMODE_LIST),stringsEmittedByUserPrintouts+=r,push(symbol(NIL))},_print=function(r,e){var t,o;for(t="";iscons(r);)push(car(r)),Eval(),p2=pop(),o=printMode,e===PRINTMODE_COMPUTER?(printMode=PRINTMODE_COMPUTER,t=printline(p2),rememberPrint(t,LAST_FULL_PRINT)):e===PRINTMODE_HUMAN?(printMode=PRINTMODE_HUMAN,t=printline(p2),rememberPrint(t,LAST_PLAIN_PRINT)):e===PRINTMODE_2DASCII?(printMode=PRINTMODE_2DASCII,t=print2dascii(p2),rememberPrint(t,LAST_2DASCII_PRINT)):e===PRINTMODE_LATEX?(printMode=PRINTMODE_LATEX,t=printline(p2),rememberPrint(t,LAST_LATEX_PRINT)):e===PRINTMODE_LIST&&(printMode=PRINTMODE_LIST,t=print_list(p2),rememberPrint(t,LAST_LIST_PRINT)),printMode=o,r=cdr(r);return DEBUG&&console.log("emttedString from display: "+stringsEmittedByUserPrintouts),t},rememberPrint=function(r,e){var t;return scan('"'+r+'"'),t=pop(),set_binding(symbol(e),t)},print_str=function(r){return DEBUG&&console.log("emttedString from print_str: "+stringsEmittedByUserPrintouts),r},print_char=function(r){return r},collectLatexStringFromReturnValue=function(r){var e,t,o;return e=printMode,printMode=PRINTMODE_LATEX,t=codeGen,codeGen=!1,o=(o=print_expr(r)).replace(/_/g,"\\_"),printMode=e,codeGen=t,DEBUG&&console.log("emttedString from collectLatexStringFromReturnValue: "+stringsEmittedByUserPrintouts),o},printline=function(r){return""+print_expr(r)},print_base_of_denom=function(r){var e;return e="",isfraction(r)||car(r)===symbol(ADD)||car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)||lessp(r,zero)?(e+=print_char("("),e+=print_expr(r),e+=print_char(")")):e+=print_expr(r),e},print_expo_of_denom=function(r){var e;return e="",isfraction(r)||car(r)===symbol(ADD)||car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)?(e+=print_char("("),e+=print_expr(r),e+=print_char(")")):e+=print_expr(r),e},print_denom=function(r,e){var t;return t="",save(),p1=cadr(r),p2=caddr(r),isminusone(p2)?(t+=print_base_of_denom(p1),restore(),t):(1===e&&(t+=print_char("(")),push(p2),negate(),p2=pop(),t+=print_power(p1,p2),1===e&&(t+=print_char(")")),restore(),t)},print_a_over_b=function(r){var e,t,o;for(e="",flag=0,o=0,t=0,save(),o=0,t=0,p1=cdr(r),p2=car(p1),isrational(p2)?(push(p2),mp_numerator(),absval(),p3=pop(),push(p2),mp_denominator(),p4=pop(),isplusone(p3)||o++,isplusone(p4)||t++,p1=cdr(p1)):(p3=one,p4=one);iscons(p1);)p2=car(p1),is_denominator(p2)?t++:o++,p1=cdr(p1);if(printMode===PRINTMODE_LATEX&&(e+=print_str("\\frac{")),0===o)e+=print_char("1");else for(flag=0,p1=cdr(r),isrational(car(p1))&&(p1=cdr(p1)),isplusone(p3)||(e+=print_factor(p3),flag=1);iscons(p1);)p2=car(p1),is_denominator(p2)||(flag&&(e+=print_multiply_sign()),e+=print_factor(p2),flag=1),p1=cdr(p1);for(e+=print_str(printMode===PRINTMODE_LATEX?"}{":printMode!==PRINTMODE_HUMAN||test_flag?"/":" / "),t>1&&printMode!==PRINTMODE_LATEX&&(e+=print_char("(")),flag=0,p1=cdr(r),isrational(car(p1))&&(p1=cdr(p1)),isplusone(p4)||(e+=print_factor(p4),flag=1);iscons(p1);)p2=car(p1),is_denominator(p2)&&(flag&&(e+=print_multiply_sign()),e+=print_denom(p2,t),flag=1),p1=cdr(p1);return t>1&&printMode!==PRINTMODE_LATEX&&(e+=print_char(")")),printMode===PRINTMODE_LATEX&&(e+=print_str("}")),restore(),e},print_expr=function(r){var e;if(e="",isadd(r))for(r=cdr(r),"-"===sign_of_term(car(r))&&(e+=print_str("-")),e+=print_term(car(r)),r=cdr(r);iscons(r);)"+"===sign_of_term(car(r))?e+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"+":" + "):e+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"-":" - "),e+=print_term(car(r)),r=cdr(r);else"-"===sign_of_term(r)&&(e+=print_str("-")),e+=print_term(r);return e},sign_of_term=function(r){var e;return e="",car(r)===symbol(MULTIPLY)&&isNumericAtom(cadr(r))&&lessp(cadr(r),zero)||isNumericAtom(r)&&lessp(r,zero)?e+="-":e+="+",e},print_term=function(r){var e,t,o,s,n;if(e="",car(r)===symbol(MULTIPLY)&&any_denominators(r))return e+print_a_over_b(r);if(car(r)===symbol(MULTIPLY)){for(r=cdr(r),isminusone(car(r))&&(r=cdr(r)),n=!1,isNumericAtom(car(r))&&(n=!0),o=!1,printMode===PRINTMODE_LATEX&&iscons(cdr(r))&&isNumberOneOverSomething(car(r))&&(o=!0,t=car(r).q.b.toString()),o?(s=e,e=""):e+=print_factor(car(r)),r=cdr(r);iscons(r);)printMode===PRINTMODE_LATEX&&n&&caar(r)===symbol(POWER)&&isNumericAtom(car(cdr(car(r))))&&(isfraction(car(cdr(cdr(car(r)))))||(e+=" \\cdot ")),e+=print_multiply_sign(),e+=print_factor(car(r)),n=!1,isNumericAtom(car(r))&&(n=!0),r=cdr(r);o&&(e=s+"\\frac{"+e+"}{"+t+"}")}else e+=print_factor(r);return e},print_subexpr=function(r){var e;return e="",e+=print_char("("),(e+=print_expr(r))+print_char(")")},print_factorial_function=function(r){var e;return e="",r=cadr(r),isfraction(r)||car(r)===symbol(ADD)||car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)||car(r)===symbol(FACTORIAL)?e+=print_subexpr(r):e+=print_expr(r),e+print_char("!")},print_ABS_latex=function(r){var e;return e="",e+=print_str("\\left |"),(e+=print_expr(cadr(r)))+print_str(" \\right |")},print_BINOMIAL_latex=function(r){var e;return e="",e+=print_str("\\binom{"),e+=print_expr(cadr(r)),e+=print_str("}{"),(e+=print_expr(caddr(r)))+print_str("} ")},print_DOT_latex=function(r){var e;return e="",e+=print_expr(cadr(r)),(e+=print_str(" \\cdot "))+print_expr(caddr(r))},print_DOT_codegen=function(r){var e;return e="dot(",e+=print_expr(cadr(r)),e+=", ",(e+=print_expr(caddr(r)))+")"},print_SIN_codegen=function(r){var e;return e="Math.sin(",(e+=print_expr(cadr(r)))+")"},print_COS_codegen=function(r){var e;return e="Math.cos(",(e+=print_expr(cadr(r)))+")"},print_TAN_codegen=function(r){var e;return e="Math.tan(",(e+=print_expr(cadr(r)))+")"},print_ARCSIN_codegen=function(r){var e;return e="Math.asin(",(e+=print_expr(cadr(r)))+")"},print_ARCCOS_codegen=function(r){var e;return e="Math.acos(",(e+=print_expr(cadr(r)))+")"},print_ARCTAN_codegen=function(r){var e;return e="Math.atan(",(e+=print_expr(cadr(r)))+")"},print_SQRT_latex=function(r){var e;return e="",e+=print_str("\\sqrt{"),(e+=print_expr(cadr(r)))+print_str("} ")},print_TRANSPOSE_latex=function(r){var e;return e="",e+=print_str("{"),iscons(cadr(r))&&(e+=print_str("(")),e+=print_expr(cadr(r)),iscons(cadr(r))&&(e+=print_str(")")),(e+=print_str("}"))+print_str("^T")},print_TRANSPOSE_codegen=function(r){var e;return e="",e+=print_str("transpose("),(e+=print_expr(cadr(r)))+print_str(")")},print_UNIT_codegen=function(r){var e;return e="",e+=print_str("identity("),(e+=print_expr(cadr(r)))+print_str(")")},print_INV_latex=function(r){var e;return e="",e+=print_str("{"),iscons(cadr(r))&&(e+=print_str("(")),e+=print_expr(cadr(r)),iscons(cadr(r))&&(e+=print_str(")")),(e+=print_str("}"))+print_str("^{-1}")},print_INV_codegen=function(r){var e;return e="",e+=print_str("inv("),(e+=print_expr(cadr(r)))+print_str(")")},print_DEFINT_latex=function(r){var e,t,o,s,n,p,a,i,u;for(e="",t=car(cdr(r)),p=r=cdr(r),n=0;iscons(cdr(cdr(r)));)n++,i=cdr(cdr(r)),e+=print_str("\\int^{"),e+=print_expr(car(cdr(i))),e+=print_str("}_{"),e+=print_expr(car(i)),e+=print_str("} \\! "),r=cdr(i);for(e+=print_expr(t),e+=print_str(" \\,"),r=p,o=s=1,a=n;1<=a?s<=a:s>=a;o=1<=a?++s:--s)u=cdr(r),e+=print_str(" \\mathrm{d} "),e+=print_expr(car(u)),o<n&&(e+=print_str(" \\, ")),r=cdr(cdr(u));return e},print_tensor=function(r){return""+print_tensor_inner(r,0,0)[1]},print_tensor_inner=function(r,e,t){var o,s,n,p,a,i,u;if(o="",o+=print_str("["),e<r.tensor.ndim-1)for(s=n=0,a=r.tensor.dim[e];0<=a?n<a:n>a;s=0<=a?++n:--n)[t,u]=print_tensor_inner(r,e+1,t),o+=u,s!==r.tensor.dim[e]-1&&(o+=print_str(","));else for(s=p=0,i=r.tensor.dim[e];0<=i?p<i:p>i;s=0<=i?++p:--p)o+=print_expr(r.tensor.elem[t]),s!==r.tensor.dim[e]-1&&(o+=print_str(",")),t++;return[t,o+=print_str("]")]},print_tensor_latex=function(r){var e;return e="",r.tensor.ndim<=2&&(e+=print_tensor_inner_latex(!0,r,0,0)[1]),e},print_tensor_inner_latex=function(r,e,t,o){var s,n,p,a,i,u,l;if(s="",r&&(s+="\\begin{bmatrix} "),t<e.tensor.ndim-1)for(n=p=0,i=e.tensor.dim[t];0<=i?p<i:p>i;n=0<=i?++p:--p)[o,l]=print_tensor_inner_latex(0,e,t+1,o),s+=l,n!==e.tensor.dim[t]-1&&(s+=print_str(" \\\\ "));else for(n=a=0,u=e.tensor.dim[t];0<=u?a<u:a>u;n=0<=u?++a:--a)s+=print_expr(e.tensor.elem[o]),n!==e.tensor.dim[t]-1&&(s+=print_str(" & ")),o++;return r&&(s+=" \\end{bmatrix}"),[o,s]},print_SUM_latex=function(r){var e;return e="\\sum_{",e+=print_expr(caddr(r)),e+="=",e+=print_expr(cadddr(r)),e+="}^{",e+=print_expr(caddddr(r)),e+="}{",(e+=print_expr(cadr(r)))+"}"},print_SUM_codegen=function(r){var e,t,o,s;return e=cadr(r),s=caddr(r),t=cadddr(r),o=caddddr(r),"(function(){ var "+s+";  var holderSum = 0;  var lowerlimit = "+print_expr(t)+";  var upperlimit = "+print_expr(o)+";  for ("+s+" = lowerlimit; "+s+" < upperlimit; "+s+"++) {    holderSum += "+print_expr(e)+"; }  return holderSum;})()"},print_TEST_latex=function(r){var e;for(e="\\left\\{ \\begin{array}{ll}",r=cdr(r);iscons(r);){if(cdr(r)===symbol(NIL)){e+="{",e+=print_expr(car(r)),e+="} & otherwise ",e+=" \\\\\\\\";break}e+="{",e+=print_expr(cadr(r)),e+="} & if & ",e+=print_expr(car(r)),e+=" \\\\\\\\",r=cddr(r)}return(e=e.substring(0,e.length-4))+"\\end{array} \\right."},print_TEST_codegen=function(r){var e,t;for(e="(function(){",r=cdr(r),t=0;iscons(r);){if(cdr(r)===symbol(NIL)){e+="else {",e+="return ("+print_expr(car(r))+");",e+="}";break}t&&(e+=" else "),e+="if ("+print_expr(car(r))+"){",e+="return ("+print_expr(cadr(r))+");",e+="}",t++,r=cddr(r)}return e+"})()"},print_TESTLT_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" < ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_TESTLE_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" \\leq ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_TESTGT_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" > ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_TESTGE_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" \\geq ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_TESTEQ_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" = ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_FOR_codegen=function(r){var e,t,o,s;return e=cadr(r),s=caddr(r),t=cadddr(r),o=caddddr(r),"(function(){ var "+s+";  var lowerlimit = "+print_expr(t)+";  var upperlimit = "+print_expr(o)+";  for ("+s+" = lowerlimit; "+s+" < upperlimit; "+s+"++) {    "+print_expr(e)+" } })()"},print_DO_codegen=function(r){var e;for(e="",r=cdr(r);iscons(r);)e+=print_expr(car(r)),r=cdr(r);return e},print_SETQ_codegen=function(r){var e;return e="",e+=print_expr(cadr(r)),e+=" = ",(e+=print_expr(caddr(r)))+"; "},print_PRODUCT_latex=function(r){var e;return e="\\prod_{",e+=print_expr(caddr(r)),e+="=",e+=print_expr(cadddr(r)),e+="}^{",e+=print_expr(caddddr(r)),e+="}{",(e+=print_expr(cadr(r)))+"}"},print_PRODUCT_codegen=function(r){var e,t,o,s;return e=cadr(r),s=caddr(r),t=cadddr(r),o=caddddr(r),"(function(){ var "+s+";  var holderProduct = 1;  var lowerlimit = "+print_expr(t)+";  var upperlimit = "+print_expr(o)+";  for ("+s+" = lowerlimit; "+s+" < upperlimit; "+s+"++) {    holderProduct *= "+print_expr(e)+"; }  return holderProduct;})()"},print_base=function(r){var e;return e="",isadd(cadr(r))||caadr(r)===symbol(MULTIPLY)||caadr(r)===symbol(POWER)||isnegativenumber(cadr(r))?(e+=print_str("("),e+=print_expr(cadr(r)),e+=print_str(")")):isNumericAtom(cadr(r))&&(lessp(cadr(r),zero)||isfraction(cadr(r)))?(e+=print_str("("),e+=print_factor(cadr(r)),e+=print_str(")")):e+=print_factor(cadr(r)),e},print_exponent=function(r){var e;return e="",iscons(caddr(r))||isfraction(caddr(r))||isNumericAtom(caddr(r))&&lessp(caddr(r),zero)?(e+=print_str("("),e+=print_expr(caddr(r)),e+=print_str(")")):e+=print_factor(caddr(r)),e},print_power=function(r,e){var t,o,s,n;if(t="",DEBUG&&console.log("power base: "+r+"  exponent: "+e),isoneovertwo(e))if(equaln(r,2)){if(codeGen)return t+print_str("Math.SQRT2")}else{if(printMode===PRINTMODE_LATEX)return t+=print_str("\\sqrt{"),(t+=print_expr(r))+print_str("}");if(codeGen)return t+=print_str("Math.sqrt("),(t+=print_expr(r))+print_str(")")}if(equaln(get_binding(symbol(PRINT_LEAVE_E_ALONE)),1)&&r===symbol(E))return codeGen?(t+=print_str("Math.exp("),t+=print_expo_of_denom(e),t+=print_str(")")):(printMode===PRINTMODE_LATEX?(t+=print_str("e^{"),t+=print_expr(e),t+=print_str("}")):(t+=print_str("exp("),t+=print_expr(e),t+=print_str(")")),t);if(codeGen)return t+=print_str("Math.pow("),t+=print_base_of_denom(r),t+=print_str(", "),(t+=print_expo_of_denom(e))+print_str(")");if(equaln(get_binding(symbol(PRINT_LEAVE_X_ALONE)),0)||"x"!==r.printname){if(r!==symbol(E)){if(isminusone(e))return t+=print_str(printMode===PRINTMODE_LATEX?"\\frac{1}{":printMode!==PRINTMODE_HUMAN||test_flag?"1/":"1 / "),iscons(r)&&printMode!==PRINTMODE_LATEX?(t+=print_str("("),t+=print_expr(r),t+=print_str(")")):t+=print_expr(r),printMode===PRINTMODE_LATEX&&(t+=print_str("}")),t;if(isnegativeterm(e))return t+=print_str(printMode===PRINTMODE_LATEX?"\\frac{1}{":printMode!==PRINTMODE_HUMAN||test_flag?"1/":"1 / "),push(e),push_integer(-1),multiply(),s=pop(),iscons(r)&&printMode!==PRINTMODE_LATEX?(t+=print_str("("),t+=print_power(r,s),t+=print_str(")")):t+=print_power(r,s),printMode===PRINTMODE_LATEX&&(t+=print_str("}")),t}if(isfraction(e)&&printMode===PRINTMODE_LATEX)return t+=print_str("\\sqrt"),push(e),denominator(),o=pop(),isplustwo(o)||(t+=print_str("["),t+=print_expr(o),t+=print_str("]")),t+=print_str("{"),push(e),numerator(),n=pop(),(t+=print_power(r,e=n))+print_str("}")}return printMode===PRINTMODE_LATEX&&isplusone(e)?t+=print_expr(r):(isadd(r)||isnegativenumber(r)?(t+=print_str("("),t+=print_expr(r),t+=print_str(")")):car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)?(printMode!==PRINTMODE_LATEX&&(t+=print_str("(")),t+=print_factor(r,!0),printMode!==PRINTMODE_LATEX&&(t+=print_str(")"))):isNumericAtom(r)&&(lessp(r,zero)||isfraction(r))?(t+=print_str("("),t+=print_factor(r),t+=print_str(")")):t+=print_factor(r),t+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"^":power_str),printMode===PRINTMODE_LATEX?print_expr(e).length>1?(t+=print_str("{"),t+=print_expr(e),t+=print_str("}")):t+=print_expr(e):iscons(e)||isfraction(e)||isNumericAtom(e)&&lessp(e,zero)?(t+=print_str("("),t+=print_expr(e),t+=print_str(")")):t+=print_factor(e)),t},print_index_function=function(r){var e;if(e="",r=cdr(r),caar(r)===symbol(ADD)||caar(r)===symbol(MULTIPLY)||caar(r)===symbol(POWER)||caar(r)===symbol(FACTORIAL)?e+=print_subexpr(car(r)):e+=print_expr(car(r)),e+=print_str("["),r=cdr(r),iscons(r))for(e+=print_expr(car(r)),r=cdr(r);iscons(r);)e+=print_str(","),e+=print_expr(car(r)),r=cdr(r);return e+print_str("]")},print_factor=function(r,e){var t,o,s,n,p;if(t="",isNumericAtom(r))return t+print_number(r,!1);if(isstr(r))return t+=print_str('"'),(t+=print_str(r.str))+print_str('"');if(istensor(r))return t+(printMode===PRINTMODE_LATEX?print_tensor_latex(r):print_tensor(r));if(car(r)===symbol(MULTIPLY))return e||"-"!==sign_of_term(r)&&printMode===PRINTMODE_LATEX||(t+=print_str(printMode===PRINTMODE_LATEX?" \\left (":"(")),t+=print_expr(r),e||"-"!==sign_of_term(r)&&printMode===PRINTMODE_LATEX||(t+=print_str(printMode===PRINTMODE_LATEX?" \\right ) ":")")),t;if(isadd(r))return e||(t+=print_str("(")),t+=print_expr(r),e||(t+=print_str(")")),t;if(car(r)===symbol(POWER))return o=cadr(r),s=caddr(r),t+print_power(o,s);if(car(r)===symbol(FUNCTION))return n=cadr(r),codeGen||(p=caddr(r),t+=print_str("function "),DEBUG&&console.log("emittedString from print_factor "+stringsEmittedByUserPrintouts),t+=print_list(p),t+=print_str(" -> ")),t+print_expr(n);if(car(r)===symbol(PATTERN))return t+=print_expr(caadr(r)),(t+=print_str(printMode===PRINTMODE_LATEX?" \\rightarrow ":printMode!==PRINTMODE_HUMAN||test_flag?"->":" -> "))+print_expr(car(cdr(cadr(r))));if(car(r)===symbol(INDEX)&&issymbol(cadr(r)))return t+print_index_function(r);if(car(r)===symbol(FACTORIAL))return t+print_factorial_function(r);if(car(r)===symbol(ABS)&&printMode===PRINTMODE_LATEX)return t+print_ABS_latex(r);if(car(r)===symbol(SQRT)&&printMode===PRINTMODE_LATEX)return t+print_SQRT_latex(r);if(car(r)===symbol(TRANSPOSE)){if(printMode===PRINTMODE_LATEX)return t+print_TRANSPOSE_latex(r);if(codeGen)return t+print_TRANSPOSE_codegen(r)}else if(car(r)===symbol(UNIT)){if(codeGen)return t+print_UNIT_codegen(r)}else if(car(r)===symbol(INV)){if(printMode===PRINTMODE_LATEX)return t+print_INV_latex(r);if(codeGen)return t+print_INV_codegen(r)}else{if(car(r)===symbol(BINOMIAL)&&printMode===PRINTMODE_LATEX)return t+print_BINOMIAL_latex(r);if(car(r)===symbol(DEFINT)&&printMode===PRINTMODE_LATEX)return t+print_DEFINT_latex(r);if(isinnerordot(r)){if(printMode===PRINTMODE_LATEX)return t+print_DOT_latex(r);if(codeGen)return t+print_DOT_codegen(r)}else if(car(r)===symbol(SIN)){if(codeGen)return t+print_SIN_codegen(r)}else if(car(r)===symbol(COS)){if(codeGen)return t+print_COS_codegen(r)}else if(car(r)===symbol(TAN)){if(codeGen)return t+print_TAN_codegen(r)}else if(car(r)===symbol(ARCSIN)){if(codeGen)return t+print_ARCSIN_codegen(r)}else if(car(r)===symbol(ARCCOS)){if(codeGen)return t+print_ARCCOS_codegen(r)}else if(car(r)===symbol(ARCTAN)){if(codeGen)return t+print_ARCTAN_codegen(r)}else if(car(r)===symbol(SUM)){if(printMode===PRINTMODE_LATEX)return t+print_SUM_latex(r);if(codeGen)return t+print_SUM_codegen(r)}else if(car(r)===symbol(PRODUCT)){if(printMode===PRINTMODE_LATEX)return t+print_PRODUCT_latex(r);if(codeGen)return t+print_PRODUCT_codegen(r)}else if(car(r)===symbol(FOR)){if(codeGen)return t+print_FOR_codegen(r)}else if(car(r)===symbol(DO)){if(codeGen)return t+print_DO_codegen(r)}else if(car(r)===symbol(TEST)){if(codeGen)return t+print_TEST_codegen(r);if(printMode===PRINTMODE_LATEX)return t+print_TEST_latex(r)}else if(car(r)===symbol(TESTLT)){if(codeGen)return t+"(("+print_expr(cadr(r))+") < ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTLT_latex(r)}else if(car(r)===symbol(TESTLE)){if(codeGen)return t+"(("+print_expr(cadr(r))+") <= ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTLE_latex(r)}else if(car(r)===symbol(TESTGT)){if(codeGen)return t+"(("+print_expr(cadr(r))+") > ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTGT_latex(r)}else if(car(r)===symbol(TESTGE)){if(codeGen)return t+"(("+print_expr(cadr(r))+") >= ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTGE_latex(r)}else if(car(r)===symbol(TESTEQ)){if(codeGen)return t+"(("+print_expr(cadr(r))+") === ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTEQ_latex(r)}else if(car(r)===symbol(FLOOR)){if(codeGen)return t+"Math.floor("+print_expr(cadr(r))+")";if(printMode===PRINTMODE_LATEX)return t+" \\lfloor {"+print_expr(cadr(r))+"} \\rfloor "}else if(car(r)===symbol(CEILING)){if(codeGen)return t+"Math.ceiling("+print_expr(cadr(r))+")";if(printMode===PRINTMODE_LATEX)return t+" \\lceil {"+print_expr(cadr(r))+"} \\rceil "}else if(car(r)===symbol(ROUND)){if(codeGen)return t+"Math.round("+print_expr(cadr(r))+")"}else if(car(r)===symbol(SETQ))return codeGen?t+=print_SETQ_codegen(r):(t+=print_expr(cadr(r)),t+=print_str("="),t+=print_expr(caddr(r)))}if(iscons(r)){if(t+=print_factor(car(r)),r=cdr(r),e||(t+=print_str("(")),iscons(r))for(t+=print_expr(car(r)),r=cdr(r);iscons(r);)t+=print_str(","),t+=print_expr(car(r)),r=cdr(r);return e||(t+=print_str(")")),t}return r===symbol(DERIVATIVE)?t+=print_char("d"):r===symbol(E)?t+=print_str(codeGen?"Math.E":"e"):r===symbol(PI)?t+=print_str(printMode===PRINTMODE_LATEX?"\\pi":"pi"):t+=print_str(get_printname(r)),t},print_list=function(r){var e;switch(e="",r.k){case CONS:for(e+="(",e+=print_list(car(r)),r===cdr(r)&&r!==symbol(NIL)&&console.log("oh no recursive!"),r=cdr(r);iscons(r);)e+=" ",e+=print_list(car(r)),(r=cdr(r))===cdr(r)&&r!==symbol(NIL)&&console.log("oh no recursive!");r!==symbol(NIL)&&(e+=" . ",e+=print_list(r)),e+=")";break;case STR:e+=r.str;break;case NUM:case DOUBLE:e+=print_number(r,!0);break;case SYM:e+=get_printname(r);break;default:e+="<tensor>"}return e},print_multiply_sign=function(){var r;if(r="",printMode===PRINTMODE_LATEX){if(printMode!==PRINTMODE_HUMAN||test_flag)return r;r+=print_str(" ")}return r+print_str(printMode!==PRINTMODE_HUMAN||test_flag||codeGen?"*":" ")},is_denominator=function(r){return car(r)===symbol(POWER)&&cadr(r)!==symbol(E)&&isnegativeterm(caddr(r))?1:0},any_denominators=function(r){var e;for(r=cdr(r);iscons(r);){if(e=car(r),is_denominator(e))return 1;r=cdr(r)}return 0},YMAX=1e4,glyph=function(){class r{}return r.prototype.c=0,r.prototype.x=0,r.prototype.y=0,r}.call(this),chartab=[],charTabIndex=i1=0,ref1=YMAX;0<=ref1?i1<ref1:i1>ref1;charTabIndex=0<=ref1?++i1:--i1)chartab[charTabIndex]=new glyph;for(yindex=0,level=0,emit_x=0,expr_level=0,display_flag=0,printchar_nowrap=function(r){return""+r},printchar=function(r){return printchar_nowrap(r)},print2dascii=function(r){var e,t,o,s;return t=0,o=0,s=0,save(),yindex=0,level=0,emit_x=0,emit_top_expr(r),[t,o,s]=get_size(0,yindex),o>100?(printline(r),void restore()):(e=print_glyphs(),restore(),e)},emit_top_expr=function(r){return car(r)===symbol(SETQ)?(emit_expr(cadr(r)),__emit_str(" = "),void emit_expr(caddr(r))):istensor(r)?emit_tensor(r):emit_expr(r)},will_be_displayed_as_fraction=function(r){if(level>0)return 0;if(isfraction(r))return 1;if(car(r)!==symbol(MULTIPLY))return 0;if(isfraction(cadr(r)))return 1;for(;iscons(r);){if(isdenominator(car(r)))return 1;r=cdr(r)}return 0},emit_expr=function(r){if(expr_level++,car(r)===symbol(ADD))for(r=cdr(r),__is_negative(car(r))&&(__emit_char("-"),will_be_displayed_as_fraction(car(r))&&__emit_char(" ")),emit_term(car(r)),r=cdr(r);iscons(r);)__is_negative(car(r))?(__emit_char(" "),__emit_char("-"),__emit_char(" ")):(__emit_char(" "),__emit_char("+"),__emit_char(" ")),emit_term(car(r)),r=cdr(r);else __is_negative(r)&&(__emit_char("-"),will_be_displayed_as_fraction(r)&&__emit_char(" ")),emit_term(r);return expr_level--},emit_unsigned_expr=function(r){var e;if(car(r)===symbol(ADD)){for(r=cdr(r),emit_term(car(r)),r=cdr(r),e=[];iscons(r);)__is_negative(car(r))?(__emit_char(" "),__emit_char("-"),__emit_char(" ")):(__emit_char(" "),__emit_char("+"),__emit_char(" ")),emit_term(car(r)),e.push(r=cdr(r));return e}return emit_term(r)},__is_negative=function(r){return isnegativenumber(r)||car(r)===symbol(MULTIPLY)&&isnegativenumber(cadr(r))?1:0},emit_term=function(r){var e;return car(r)===symbol(MULTIPLY)?(e=count_denominators(r))&&0===level?emit_fraction(r,e):emit_multiply(r,e):emit_factor(r)},isdenominator=function(r){return car(r)===symbol(POWER)&&cadr(r)!==symbol(E)&&__is_negative(caddr(r))?1:0},count_denominators=function(r){var e,t;for(e=0,r=cdr(r);iscons(r);)t=car(r),isdenominator(t)&&e++,r=cdr(r);return e},emit_multiply=function(r,e){var t;if(0===e){for(r=cdr(r),(isplusone(car(r))||isminusone(car(r)))&&(r=cdr(r)),emit_factor(car(r)),r=cdr(r),t=[];iscons(r);)__emit_char(" "),emit_factor(car(r)),t.push(r=cdr(r));return t}return emit_numerators(r),__emit_char("/"),e>1||isfraction(cadr(r))?(__emit_char("("),emit_denominators(r),__emit_char(")")):emit_denominators(r)},emit_fraction=function(r,e){var t,o,s,n,p;for(t=0,n=0,save(),p3=one,p4=one,isrational(cadr(r))&&(push(cadr(r)),mp_numerator(),absval(),p3=pop(),push(cadr(r)),mp_denominator(),p4=pop()),isdouble(cadr(r))&&(push(cadr(r)),absval(),p3=pop()),n=isplusone(p3)?0:1,p1=cdr(r),isNumericAtom(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)||n++,p1=cdr(p1);for(p=emit_x,o=yindex,t=0,isplusone(p3)||(emit_number(p3,0),t++),p1=cdr(r),isNumericAtom(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)||(t>0&&__emit_char(" "),1===n?emit_expr(p2):emit_factor(p2),t++),p1=cdr(p1);for(0===t&&__emit_char("1"),s=yindex,t=0,isplusone(p4)||(emit_number(p4,0),t++,e++),p1=cdr(r),isrational(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)&&(t>0&&__emit_char(" "),emit_denominator(p2,e),t++),p1=cdr(p1);return fixup_fraction(p,o,s),restore()},emit_numerators=function(r){var e;for(save(),e=0,p1=one,r=cdr(r),isrational(car(r))?(push(car(r)),mp_numerator(),absval(),p1=pop(),r=cdr(r)):isdouble(car(r))&&(push(car(r)),absval(),p1=pop(),r=cdr(r)),e=0,isplusone(p1)||(emit_number(p1,0),e++);iscons(r);)isdenominator(car(r))||(e>0&&__emit_char(" "),emit_factor(car(r)),e++),r=cdr(r);return 0===e&&__emit_char("1"),restore()},emit_denominators=function(r){var e;for(save(),e=0,r=cdr(r),isfraction(car(r))&&(push(car(r)),mp_denominator(),p1=pop(),emit_number(p1,0),e++,r=cdr(r));iscons(r);)isdenominator(car(r))&&(e>0&&__emit_char(" "),emit_denominator(car(r),0),e++),r=cdr(r);return restore()},emit_factor=function(r){istensor(r)?emit_flat_tensor(r):isdouble(r)?emit_number(r,0):car(r)!==symbol(ADD)&&car(r)!==symbol(MULTIPLY)?car(r)!==symbol(POWER)?iscons(r)?emit_function(r):isNumericAtom(r)?0===level?emit_numerical_fraction(r):emit_number(r,0):issymbol(r)?emit_symbol(r):isstr(r)&&emit_string(r):emit_power(r):emit_subexpr(r)},emit_numerical_fraction=function(r){var e,t,o;return save(),push(r),mp_numerator(),absval(),p3=pop(),push(r),mp_denominator(),p4=pop(),isplusone(p4)?(emit_number(p3,0),void restore()):(o=emit_x,e=yindex,emit_number(p3,0),t=yindex,emit_number(p4,0),fixup_fraction(o,e,t),restore())},isfactor=function(r){return iscons(r)&&car(r)!==symbol(ADD)&&car(r)!==symbol(MULTIPLY)&&car(r)!==symbol(POWER)||issymbol(r)?1:isfraction(r)||isnegativenumber(r)?0:isNumericAtom(r)?1:0},emit_power=function(r){var e,t,o;return e=0,t=0,o=0,cadr(r)===symbol(E)?(__emit_str("exp("),emit_expr(caddr(r)),void __emit_char(")")):level>0?void(isminusone(caddr(r))?(__emit_char("1"),__emit_char("/"),isfactor(cadr(r))?emit_factor(cadr(r)):emit_subexpr(cadr(r))):(isfactor(cadr(r))?emit_factor(cadr(r)):emit_subexpr(cadr(r)),__emit_char("^"),isfactor(caddr(r))?emit_factor(caddr(r)):emit_subexpr(caddr(r)))):__is_negative(caddr(r))?(o=emit_x,e=yindex,__emit_char("1"),t=yindex,emit_denominator(r,1),void fixup_fraction(o,e,t)):(e=yindex,isfactor(cadr(r))?emit_factor(cadr(r)):emit_subexpr(cadr(r)),t=yindex,level++,emit_expr(caddr(r)),level--,fixup_power(e,t))},emit_denominator=function(r,e){var t,o;if(!isminusone(caddr(r)))return t=yindex,isfactor(cadr(r))?emit_factor(cadr(r)):emit_subexpr(cadr(r)),o=yindex,level++,emit_unsigned_expr(caddr(r)),level--,fixup_power(t,o);1===e?emit_expr(cadr(r)):emit_factor(cadr(r))},emit_function=function(r){if(car(r)===symbol(INDEX)&&issymbol(cadr(r)))emit_index_function(r);else{if(car(r)!==symbol(FACTORIAL)){if(car(r)===symbol(DERIVATIVE)?__emit_char("d"):emit_symbol(car(r)),__emit_char("("),r=cdr(r),iscons(r))for(emit_expr(car(r)),r=cdr(r);iscons(r);)__emit_char(","),emit_expr(car(r)),r=cdr(r);return __emit_char(")")}emit_factorial_function(r)}},emit_index_function=function(r){if(r=cdr(r),caar(r)===symbol(ADD)||caar(r)===symbol(MULTIPLY)||caar(r)===symbol(POWER)||caar(r)===symbol(FACTORIAL)?emit_subexpr(car(r)):emit_expr(car(r)),__emit_char("["),r=cdr(r),iscons(r))for(emit_expr(car(r)),r=cdr(r);iscons(r);)__emit_char(","),emit_expr(car(r)),r=cdr(r);return __emit_char("]")},emit_factorial_function=function(r){return r=cadr(r),isfraction(r)||car(r)===symbol(ADD)||car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)||car(r)===symbol(FACTORIAL)?emit_subexpr(r):emit_expr(r),__emit_char("!")},emit_subexpr=function(r){return __emit_char("("),emit_expr(r),__emit_char(")")},emit_symbol=function(r){var e,t,o,s,n;if(e=0,r!==symbol(E)){for(n=[],e=t=0,s=(o=get_printname(r)).length;0<=s?t<s:t>s;e=0<=s?++t:--t)n.push(__emit_char(o[e]));return n}__emit_str("exp(1)")},emit_string=function(r){var e,t,o,s;for(e=0,o=r.str,__emit_char('"'),e=t=0,s=o.length;0<=s?t<s:t>s;e=0<=s?++t:--t)__emit_char(o[e]);return __emit_char('"')},fixup_fraction=function(r,e,t){var o,s,n,p,a,i,u,l,c,d,_;for(o=0,u=0,s=0,l=0,d=0,n=0,c=0,_=0,[s,l,d]=get_size(e,t),[n,c,_]=get_size(t,yindex),o=c>l?(c-l)/2:0,o++,move(e,t,o,-(d+s-1)-1),o=c>l?-l:(l-c)/2-l,o++,move(t,yindex,o,1-_),u=c>l?c:l,emit_x=r,i=[],p=0,a=u+=2;0<=a?p<a:p>a;0<=a?++p:--p)i.push(__emit_char("-"));return i},fixup_power=function(r,e){var t,o,s,n,p,a,i;return t=0,o=0,n=0,a=0,s=0,p=0,i=0,[o,n,a]=get_size(r,e),[s,p,i]=get_size(e,yindex),t=-i-s+1,move(e,yindex,0,t+=a-1)},move=function(r,e,t,o){var s,n,p,a,i;for(s=0,i=[],s=n=p=r,a=e;p<=a?n<a:n>a;s=p<=a?++n:--n)chartab[s].x+=t,i.push(chartab[s].y+=o);return i},get_size=function(r,e){var t,o,s,n,p,a,i,u;for(t=0,p=chartab[r].x,s=chartab[r].x,a=chartab[r].y,n=chartab[r].y,t=o=i=r+1,u=e;i<=u?o<u:o>u;t=i<=u?++o:--o)chartab[t].x<p&&(p=chartab[t].x),chartab[t].x>s&&(s=chartab[t].x),chartab[t].y<a&&(a=chartab[t].y),chartab[t].y>n&&(n=chartab[t].y);return[n-a+1,s-p+1,a]},displaychar=function(r){return __emit_char(r)},__emit_char=function(r){if(yindex!==YMAX)return chartab[yindex],chartab[yindex].c=r,chartab[yindex].x=emit_x,chartab[yindex].y=0,yindex++,emit_x++},__emit_str=function(r){var e,t,o,s;for(e=0,s=[],e=t=0,o=r.length;0<=o?t<o:t>o;e=0<=o?++t:--t)s.push(__emit_char(r[e]));return s},emit_number=function(r,e){var t,o,s,n,p,a,i,u,l,c;switch(c="",t=0,r.k){case NUM:for("-"===(c=r.q.a.toString())[0]&&0===e&&(c=c.substring(1)),t=o=0,p=c.length;0<=p?o<p:o>p;t=0<=p?++o:--o)__emit_char(c[t]);if("1"===(c=r.q.b.toString()))break;for(__emit_char("/"),u=[],t=s=0,a=c.length;0<=a?s<a:s>a;t=0<=a?++s:--s)u.push(__emit_char(c[t]));return u;case DOUBLE:for("-"===(c=doubleToReasonableString(r.d))[0]&&0===e&&(c=c.substring(1)),l=[],t=n=0,i=c.length;0<=i?n<i:n>i;t=0<=i?++n:--n)l.push(__emit_char(c[t]));return l}},cmpGlyphs=function(r,e){return r.y<e.y?-1:r.y>e.y?1:r.x<e.x?-1:r.x>e.x?1:0},print_glyphs=function(){var r,e,t,o,s,n,p;for(e=0,r="",(s=chartab.slice(0,yindex)).sort(cmpGlyphs),n=0,p=(chartab=[].concat(s).concat(chartab.slice(yindex)))[0].y,e=t=0,o=yindex;0<=o?t<o:t>o;e=0<=o?++t:--t){for(;chartab[e].y>p;)r+=printchar("\n"),n=0,p++;for(;chartab[e].x>n;)r+=printchar_nowrap(" "),n++;r+=printchar_nowrap(chartab[e].c),n++}return r},buffer="",getdisplaystr=function(){return yindex=0,level=0,emit_x=0,emit_expr(pop()),fill_buf(),buffer},fill_buf=function(){var r,e,t,o,s,n,p,a;for(n=buffer,o=0,r=0,(s=chartab.slice(0,yindex)).sort(cmpGlyphs),p=0,a=(chartab=[].concat(s).concat(chartab.slice(yindex)))[0].y,r=e=0,t=yindex;0<=t?e<t:e>t;r=0<=t?++e:--e){for(;chartab[r].y>a;)n[o++]="\n",p=0,a++;for(;chartab[r].x>p;)n[o++]=" ",p++;n[o++]=chartab[r].c,p++}return n[o++]="\n"},N=100,oneElement=function(){class r{}return r.prototype.x=0,r.prototype.y=0,r.prototype.h=0,r.prototype.w=0,r.prototype.index=0,r.prototype.count=0,r}.call(this),elem=[],elelmIndex=j1=0;j1<1e4;elelmIndex=++j1)elem[elelmIndex]=new oneElement;SPACE_BETWEEN_COLUMNS=3,SPACE_BETWEEN_ROWS=1,emit_tensor=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x;if(p=0,c=0,t=0,o=0,s=0,n=0,b=0,e=0,r.tensor.ndim>2)emit_flat_tensor(r);else{if(!((u=(d=r.tensor.dim[0])*(c=2===r.tensor.ndim?r.tensor.dim[1]:1))>N)){for(v=emit_x,p=a=0,m=u;0<=m?a<m:a>m;p=0<=m?++a:--a)elem[p].index=yindex,elem[p].x=emit_x,emit_expr(r.tensor.elem[p]),elem[p].count=yindex-elem[p].index,[elem[p].h,elem[p].w,elem[p].y]=get_size(elem[p].index,yindex);for(s=0,n=0,p=i=0,f=u;0<=f?i<f:i>f;p=0<=f?++i:--i)elem[p].h>s&&(s=elem[p].h),elem[p].w>n&&(n=elem[p].w);for(y=c*n+(c-1)*SPACE_BETWEEN_COLUMNS,x=-(d*s+(d-1)*SPACE_BETWEEN_ROWS)/2,b=l=0,h=d;0<=h?l<h:l>h;b=0<=h?++l:--l)for(e=_=0,g=c;0<=g?_<g:_>g;e=0<=g?++_:--_)t=v-elem[p=b*c+e].x,o=x-elem[p].y,move(elem[p].index,elem[p].index+elem[p].count,t,o),t=0,e>0&&(t=e*(n+SPACE_BETWEEN_COLUMNS)),o=0,b>0&&(o=b*(s+SPACE_BETWEEN_ROWS)),t+=(n-elem[p].w)/2,o+=(s-elem[p].h)/2,move(elem[p].index,elem[p].index+elem[p].count,t,o);return emit_x=v+y}emit_flat_tensor(r)}},emit_flat_tensor=function(r){return emit_tensor_inner(r,0,0)},emit_tensor_inner=function(r,e,t){var o,s,n;for(o=0,__emit_char("("),o=s=0,n=r.tensor.dim[e];0<=n?s<n:s>n;o=0<=n?++s:--s)e+1===r.tensor.ndim?(emit_expr(r.tensor.elem[t]),t+=1):t=emit_tensor_inner(r,e+1,t),o+1<r.tensor.dim[e]&&__emit_char(",");return __emit_char(")"),t},Eval_product=function(){var r,e,t,o,s,n,p,a,i;if(e=0,r=cadr(p1),t=caddr(p1),issymbol(t)||stop("sum: 2nd arg?"),push(cadddr(p1)),Eval(),o=pop_integer(),isNaN(o))push(p1);else{if(push(caddddr(p1)),Eval(),s=pop_integer(),!isNaN(s)){for(p=get_binding(t),push_integer(1),e=n=a=o,i=s;a<=i?n<=i:n>=i;e=a<=i?++n:--n)push_integer(e),p5=pop(),set_binding(t,p5),push(r),Eval(),DEBUG&&(console.log("product - factor 1: "+stack[tos-1].toString()),console.log("product - factor 2: "+stack[tos-2].toString())),multiply(),DEBUG&&console.log("product - result: "+stack[tos-1].toString());return set_binding(t,p)}push(p1)}},qadd=function(){var r,e,t,o,s,n,p,a;if(n=pop(),s=pop(),e=mmul(s.q.a,n.q.b),t=mmul(s.q.b,n.q.a),p=madd(e,t),!MZERO(p))return o=mmul(s.q.b,n.q.b),r=mgcd(p,o),r=makeSignSameAs(r,o),(a=new U).k=NUM,a.q.a=mdiv(p,r),a.q.b=mdiv(o,r),push(a);push(zero)},qdiv=function(){var r,e,t;return save(),p2=pop(),p1=pop(),MZERO(p2.q.a)&&stop("divide by zero"),MZERO(p1.q.a)?(push(zero),void restore()):(r=mmul(p1.q.a,p2.q.b),e=mmul(p1.q.b,p2.q.a),t=mgcd(r,e),t=makeSignSameAs(t,e),(p1=new U).k=NUM,p1.q.a=mdiv(r,t),p1.q.b=mdiv(e,t),push(p1),restore())},qmul=function(){var r,e,t;return save(),p2=pop(),p1=pop(),MZERO(p1.q.a)||MZERO(p2.q.a)?(push(zero),void restore()):(r=mmul(p1.q.a,p2.q.a),e=mmul(p1.q.b,p2.q.b),t=mgcd(r,e),t=makeSignSameAs(t,e),(p1=new U).k=NUM,p1.q.a=mdiv(r,t),p1.q.b=mdiv(e,t),push(p1),restore())},qpow=function(){return save(),qpowf(),restore()},qpowf=function(){var r,e,t,o,s,n;if(t=0,p2=pop(),p1=pop(),isplusone(p1)||isZeroAtomOrTensor(p2))push_integer(1);else if(isminusone(p1)&&isoneovertwo(p2))push(imaginaryunit);else{if(isZeroAtomOrTensor(p1))return isnegativenumber(p2)&&stop("divide by zero"),void push(zero);if(!isplusone(p2))return isinteger(p2)?(push(p2),t=pop_integer(),isNaN(t)?(push_symbol(POWER),push(p1),push(p2),void list(3)):(s=mpow(p1.q.a,Math.abs(t)),n=mpow(p1.q.b,Math.abs(t)),t<0&&(o=s,s=makeSignSameAs(s=n,n=o),n=makePositive(n)),(p3=new U).k=NUM,p3.q.a=s,p3.q.b=n,void push(p3))):isminusone(p1)?(push(p2),void normalize_angle()):isnegativenumber(p1)?(push(p1),negate(),push(p2),qpow(),push_integer(-1),push(p2),qpow(),void multiply()):isinteger(p1)?is_small_integer(p1)?(push(p1),push(p2),void quickfactor()):isSmall(p2.q.a)&&isSmall(p2.q.b)?(r=p2.q.a,e=p2.q.b,0===(s=mroot(p1.q.a,e))?(push_symbol(POWER),push(p1),push(p2),void list(3)):(n=mpow(s,r),(p3=new U).k=NUM,p2.q.a.isNegative()?(p3.q.a=bigInt(1),p3.q.b=n):(p3.q.a=n,p3.q.b=bigInt(1)),push(p3))):(push_symbol(POWER),push(p1),push(p2),void list(3)):(push(p1),mp_numerator(),push(p2),qpow(),push(p1),mp_denominator(),push(p2),negate(),qpow(),void multiply());push(p1)}},normalize_angle=function(){return save(),p1=pop(),isinteger(p1)?(p1.q.a.isOdd()?push_integer(-1):push_integer(1),void restore()):(push(p1),bignum_truncate(),p2=pop(),isnegativenumber(p1)&&(push(p2),push_integer(-1),add(),p2=pop()),push(p1),push(p2),subtract(),p3=pop(),push_symbol(POWER),push_integer(-1),push(p3),list(3),p2.q.a.isOdd()&&negate(),restore())},is_small_integer=function(r){return isSmall(r.q.a)},quickfactor=function(){var r,e,t,o,s,n;for(e=0,save(),p2=pop(),p1=pop(),r=tos,push(p1),factor_small_number(),n=r,e=t=0,s=o=tos-r;t<s;e=t+=2)push(stack[n+e]),push(stack[n+e+1]),push(p2),multiply(),quickpower();return multiply_all(tos-r-o),p1=pop(),moveTos(r),push(p1),restore()},quickpower=function(){var r;return save(),p2=pop(),p1=pop(),push(p2),bignum_truncate(),p3=pop(),push(p2),push(p3),subtract(),p4=pop(),isZeroAtomOrTensor(p4)||(push_symbol(POWER),push(p1),push(p4),list(3)),push(p3),r=pop_integer(),isNaN(r)?(push_symbol(POWER),push(p1),push(p3),list(3),void restore()):0!==r?(push(p1),bignum_power_number(r),restore()):void restore()},Eval_quotient=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p1=pop())===symbol(NIL)&&(p1=symbol(SYMBOL_X)),push(p1),divpoly()},divpoly=function(){var r,e,t,o,s,n,p,a,i;for(o=0,n=0,i=0,save(),p3=pop(),p2=pop(),p1=pop(),t=tos,r=tos,push(p1),push(p3),n=coeff()-1,e=tos,push(p2),push(p3),i=n-(p=coeff()-1),push_integer(0),p5=pop();i>=0;){for(push(stack[r+n]),push(stack[e+p]),divide(),p4=pop(),o=s=0,a=p;0<=a?s<=a:s>=a;o=0<=a?++s:--s)push(stack[r+i+o]),push(stack[e+o]),push(p4),multiply(),subtract(),stack[r+i+o]=pop();push(p5),push(p4),push(p3),push_integer(i),power(),multiply(),add(),p5=pop(),n--,i--}return moveTos(t),push(p5),restore()},Eval_rationalize=function(){return push(cadr(p1)),Eval(),rationalize()},rationalize=function(){var r;return r=expanding,yyrationalize(),expanding=r},yyrationalize=function(){var r,e,t;if(t=pop(),istensor(t))__rationalize_tensor(t);else{if(expanding=0,car(t)===symbol(ADD)){for(DEBUG&&(printf("rationalize: this is the input expr:\n"),printline(t)),push(one),multiply_denominators(t),r=pop(),DEBUG&&(printf("rationalize: this is the common denominator:\n"),printline(r)),push(zero),e=cdr(t);iscons(e);)push(r),push(car(e)),multiply(),add(),e=cdr(e);return DEBUG&&(printf("rationalize: original expr times common denominator:\n"),printline(stack[tos-1])),Condense(),DEBUG&&(printf("rationalize: after factoring:\n"),printline(stack[tos-1])),push(r),divide(),DEBUG?(printf("rationalize: after dividing by common denom. (and we're done):\n"),printline(stack[tos-1])):void 0}push(t)}},multiply_denominators=function(r){var e;if(car(r)===symbol(ADD)){for(r=cdr(r),e=[];iscons(r);)multiply_denominators_term(car(r)),e.push(r=cdr(r));return e}return multiply_denominators_term(r)},multiply_denominators_term=function(r){var e;if(car(r)===symbol(MULTIPLY)){for(r=cdr(r),e=[];iscons(r);)multiply_denominators_factor(car(r)),e.push(r=cdr(r));return e}return multiply_denominators_factor(r)},multiply_denominators_factor=function(r){if(car(r)===symbol(POWER))return push(r),r=caddr(r),isnegativenumber(r)||car(r)===symbol(MULTIPLY)&&isnegativenumber(cadr(r))?(inverse(),void __lcm()):pop()},__rationalize_tensor=function(r){var e,t,o;if(e=0,push(r),Eval(),r=pop(),istensor(r)){for(e=t=0,o=r.tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)push(r.tensor.elem[e]),rationalize(),r.tensor.elem[e]=pop();return check_tensor_dimensions(r),push(r)}push(r)},__lcm=function(){return save(),p1=pop(),p2=pop(),push(p1),push(p2),multiply(),push(p1),push(p2),gcd(),divide(),restore()},Eval_real=function(){return push(cadr(p1)),Eval(),real()},real=function(){return save(),rect(),p1=pop(),push(p1),push(p1),conjugate(),add(),push_integer(2),divide(),restore()},DEBUG_RECT=!1,Eval_rect=function(){return push(cadr(p1)),Eval(),rect()},rect=function(){var r;if(save(),r=p1=pop(),DEBUG_RECT&&console.log("RECT of "+r),DEBUG_RECT&&console.log("any clock forms in : "+r+" ? "+findPossibleClockForm(r)),issymbol(p1))DEBUG_RECT&&console.log(" rect: simple symbol: "+r),isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))?(push_symbol(YYRECT),push(p1),list(2)):push(p1);else if(isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))||findPossibleExponentialForm(p1)||findPossibleClockForm(p1)||Find(p1,symbol(SIN))&&Find(p1,symbol(COS))&&Find(p1,imaginaryunit))if(car(p1)===symbol(MULTIPLY)&&isimaginaryunit(cadr(p1))&&!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))))push(p1);else if(car(p1)===symbol(ADD))for(DEBUG_RECT&&console.log(" rect - "+r+" is a sum "),push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),rect(),add(),p1=cdr(p1);else DEBUG_RECT&&console.log(" rect - "+r+" is NOT a sum "),push(p1),abs(),DEBUG_RECT&&console.log(" rect - "+r+" abs: "+stack[tos-1].toString()),push(p1),arg(),DEBUG_RECT&&console.log(" rect - "+r+" arg of "+p1+" : "+stack[tos-1].toString()),p1=pop(),push(p1),cosine(),DEBUG_RECT&&console.log(" rect - "+r+" cosine: "+stack[tos-1].toString()),push(imaginaryunit),push(p1),sine(),DEBUG_RECT&&console.log(" rect - "+r+" sine: "+stack[tos-1].toString()),multiply(),DEBUG_RECT&&console.log(" rect - "+r+" i * sine: "+stack[tos-1].toString()),add(),DEBUG_RECT&&console.log(" rect - "+r+" cos + i * sine: "+stack[tos-1].toString()),multiply();else DEBUG_RECT&&console.log(" rect: simple symbol: "+r),push(p1);if(restore(),DEBUG_RECT)return console.log("rect of "+r+" : "+stack[tos-1])},show_power_debug=!1,performing_roots=!1,Eval_roots=function(){return p2=cadr(p1),car(p2)===symbol(SETQ)||car(p2)===symbol(TESTEQ)?(push(cadr(p2)),Eval(),push(caddr(p2)),Eval(),subtract()):(push(p2),Eval(),p2=pop(),car(p2)===symbol(SETQ)||car(p2)===symbol(TESTEQ)?(push(cadr(p2)),Eval(),push(caddr(p2)),Eval(),subtract()):push(p2)),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2)||stop("roots: 1st argument is not a polynomial"),push(p1),push(p2),roots()},hasImaginaryCoeff=function(r){var e,t,o;for(t=!1,e=o=r;o>0;e=o+=-1)if(iscomplexnumber(stack[tos-e])){t=!0;break}return t},isSimpleRoot=function(r){var e,t,o;if(r>2){for(t=!0,isZeroAtomOrTensor(stack[tos-r])&&(t=!1),e=o=r-1;o>1;e=o+=-1)if(!isZeroAtomOrTensor(stack[tos-e])){t=!1;break}}else t=!1;return t},normalisedCoeff=function(){var r,e,t,o,s,n,p,a;for(t=coeff(),r=stack[tos-1],n=[],e=o=1,p=t;1<=p?o<=p:o>=p;e=1<=p?++o:--o)n.push(pop());for(e=s=a=t-1;a<=0?s<=0:s>=0;e=a<=0?++s:--s)push(n[e]),push(r),divide();return t},roots=function(){var r,e,t,o,s,n,p,a;if(e=0,save(),recursionLevelNestedRadicalsRemoval>1)return pop(),pop(),push(symbol(NIL)),void restore();if(performing_roots=!0,r=tos-2,DEBUG&&console.log("checking if "+stack[tos-1].toString()+" is a case of simple roots"),p2=pop(),p1=pop(),push(p1),push(p2),push(p1),push(p2),t=normalisedCoeff(),isSimpleRoot(t)?(DEBUG&&console.log("yes, "+stack[tos-1].toString()+" is a case of simple roots"),s=stack[tos-t],n=stack[tos-1],moveTos(tos-t),pop(),pop(),getSimpleRoots(t,n,s)):(moveTos(tos-t),roots2()),0==(p=tos-r)&&stop("roots: the polynomial is not factorable, try nroots"),1===p)return performing_roots=!1,void restore();for(sort_stack(p),(p1=alloc_tensor(p)).tensor.ndim=1,p1.tensor.dim[0]=p,e=o=0,a=p;0<=a?o<a:o>a;e=0<=a?++o:--o)p1.tensor.elem[e]=stack[r+e];return moveTos(r),push(p1),restore(),performing_roots=!1},getSimpleRoots=function(r,e,t){var o,s,n,p,a,i,u;if(DEBUG&&console.log("getSimpleRoots"),save(),r-=1,push(t),push_rational(1,r),power(),push(e),push_rational(1,r),power(),divide(),s=pop(),r%2==0)for(u=n=1,a=r;n<=a;u=n+=2)push(s),push_integer(-1),push_rational(u,r),power(),multiply(),o=pop(),push(o),push(o),negate();else for(u=p=1,i=r;1<=i?p<=i:p>=i;u=1<=i?++p:--p)push(s),push_integer(-1),push_rational(u,r),power(),multiply(),u%2==0&&negate();return restore()},roots2=function(){var r;if(save(),p2=pop(),p1=pop(),push(p1),push(p2),push(p1),push(p2),r=normalisedCoeff(),hasImaginaryCoeff(r)?(moveTos(tos-r),pop(),pop()):(moveTos(tos-r),factorpoly(),p1=pop()),car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),roots3(),p1=cdr(p1);else push(p1),push(p2),roots3();return restore()},roots3=function(){var r;return save(),p2=pop(),p1=pop(),car(p1)===symbol(POWER)&&ispolyexpandedform(cadr(p1),p2)&&isposint(caddr(p1))?(push(cadr(p1)),push(p2),r=normalisedCoeff(),mini_solve(r)):ispolyexpandedform(p1,p2)&&(push(p1),push(p2),r=normalisedCoeff(),mini_solve(r)),restore()},mini_solve=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M,R,L,k,q,D,P,U,w,B,G,C,F,Y,X,W,z,Z,V,$,H,Q,j,J,K,rr,er,tr,or,sr,nr,pr,ar,ir,ur,lr,cr,dr;if(save(),2===r)return p3=pop(),p4=pop(),push(p4),push(p3),divide(),negate(),void restore();if(3===r)return p3=pop(),p4=pop(),p5=pop(),push(p4),push_integer(2),power(),push_integer(4),push(p3),multiply(),push(p5),multiply(),subtract(),push_rational(1,2),power(),p6=pop(),push(p6),push(p4),subtract(),push(p3),push_integer(2),multiply(),divide(),push(p6),push(p4),add(),negate(),push(p3),divide(),push_rational(1,2),multiply(),void restore();if(4===r||5===r){if(p3=pop(),p4=pop(),p5=pop(),p6=pop(),push(p5),push(p5),multiply(),N=pop(),push(N),push(p5),multiply(),M=pop(),push(p4),push(p4),multiply(),T=pop(),push(T),push(p4),multiply(),O=pop(),push(O),push(p6),multiply(),S=pop(),push(S),push_integer(-4),multiply(),w=pop(),push(O),push_integer(2),multiply(),s=pop(),push(p3),push(p3),multiply(),g=pop(),push(g),push(p3),multiply(),v=pop(),push_integer(3),push(p3),multiply(),n=pop(),push(g),push(p6),multiply(),b=pop(),push(b),push(p6),multiply(),y=pop(),push(b),push_integer(27),multiply(),o=pop(),push(y),push_integer(-27),multiply(),P=pop(),push(n),push_integer(2),multiply(),pop(),push(p3),push(p5),multiply(),A=pop(),push(A),push(p4),multiply(),x=pop(),push(x),push(p6),multiply(),E=pop(),push(A),push_integer(3),multiply(),a=pop(),push_integer(-4),push(p3),push(M),multiply(),multiply(),U=pop(),push(x),push_integer(9),multiply(),negate(),B=pop(),push(E),push_integer(18),multiply(),t=pop(),push(T),push(a),subtract(),_=pop(),push(T),push(N),multiply(),I=pop(),push(p4),negate(),push(n),divide(),G=pop(),4===r){if(DEBUG&&console.log(">>>>>>>>>>>>>>>> actually using cubic formula <<<<<<<<<<<<<<< "),DEBUG&&console.log("cubic: D0: "+_.toString()),push(_),push_integer(3),power(),push_integer(4),multiply(),i=pop(),push(_),simplify(),absValFloat(),m=pop(),DEBUG&&console.log("cubic: D0 as float: "+m.toString()),push(t),push(w),push(I),push(U),push(P),add(),add(),add(),add(),simplify(),absValFloat(),L=pop(),DEBUG&&console.log("cubic: DETERMINANT: "+L.toString()),push(s),push(B),push(o),add(),add(),f=pop(),DEBUG&&console.log("cubic: D1: "+f.toString()),push(f),push_integer(2),power(),push(i),subtract(),push_rational(1,2),power(),simplify(),h=pop(),isZeroAtomOrTensor(L))return isZeroAtomOrTensor(m)?(DEBUG&&console.log(" cubic: DETERMINANT IS ZERO and delta0 is zero"),push(G),void restore()):(DEBUG&&console.log(" cubic: DETERMINANT IS ZERO and delta0 is not zero"),push(p3),push(p6),push_integer(9),multiply(),multiply(),push(p4),push(p5),multiply(),subtract(),push(_),push_integer(2),multiply(),divide(),lr=pop(),push(lr),push(lr),push(x),push_integer(4),multiply(),push(p3),push(p3),push(p6),push_integer(9),multiply(),multiply(),multiply(),negate(),push(O),negate(),add(),add(),push(p3),push(_),multiply(),divide(),void restore());for(e=!1,Q=!1;!e;)push(h),Q&&negate(),push(f),add(),push_rational(1,2),multiply(),push_rational(1,3),power(),simplify(),l=pop(),DEBUG&&console.log("cubic: C: "+l.toString()),push(l),simplify(),absValFloat(),d=pop(),DEBUG&&console.log("cubic: C as absval and float: "+d.toString()),isZeroAtomOrTensor(d)?(DEBUG&&console.log(" cubic: C IS ZERO flipping the sign"),Q=!0):e=!0;return push(l),push(n),multiply(),p=pop(),push(p),push_integer(2),multiply(),u=pop(),push(imaginaryunit),push_integer(3),push_rational(1,2),power(),multiply(),j=pop(),push_integer(1),push(j),add(),nr=pop(),push_integer(1),push(j),subtract(),sr=pop(),push(l),push(n),divide(),c=pop(),push(G),push(c),negate(),push(_),push(p),divide(),negate(),add(),add(),simplify(),push(G),push(c),push(nr),multiply(),push_integer(2),divide(),push(sr),push(_),multiply(),push(u),divide(),add(),add(),simplify(),push(G),push(c),push(sr),multiply(),push_integer(2),divide(),push(nr),push(_),multiply(),push(u),divide(),add(),add(),simplify(),void restore()}if(5===r){if(DEBUG&&console.log(">>>>>>>>>>>>>>>> actually using quartic formula <<<<<<<<<<<<<<< "),p7=pop(),isZeroAtomOrTensor(p4)&&isZeroAtomOrTensor(p6)&&!isZeroAtomOrTensor(p5)&&!isZeroAtomOrTensor(p7)){for(DEBUG&&console.log("biquadratic case"),push(p3),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push(p5),push(symbol(SECRETX)),multiply(),push(p7),add(),add(),push(symbol(SECRETX)),roots(),J=0,K=(pr=pop().tensor.elem).length;J<K;J++)H=pr[J],push(H),push_rational(1,2),power(),simplify(),push(H),push_rational(1,2),power(),negate(),simplify();return void restore()}if(push(p6),push(p6),multiply(),R=pop(),push(p7),push(p7),multiply(),k=pop(),push(k),push(p7),multiply(),q=pop(),push_integer(256),push(v),push(q),multiply(),multiply(),push_integer(-192),push(b),push(k),push(p4),multiply(),multiply(),multiply(),push_integer(-128),push(g),push(N),push(k),multiply(),multiply(),multiply(),push_integer(144),push(y),push(p5),push(p7),multiply(),multiply(),multiply(),push(P),push(R),multiply(),push_integer(144),push(x),push(p4),push(k),multiply(),multiply(),multiply(),push_integer(-6),push(p3),push(T),push(R),push(p7),multiply(),multiply(),multiply(),multiply(),push_integer(-80),push(E),push(p5),push(p7),multiply(),multiply(),multiply(),push_integer(18),push(E),push(R),multiply(),multiply(),push_integer(16),push(A),push(M),push(p7),multiply(),multiply(),multiply(),push_integer(-4),push(A),push(N),push(R),multiply(),multiply(),multiply(),push_integer(-27),push(O),push(p4),push(k),multiply(),multiply(),multiply(),push_integer(18),push(S),push(p5),push(p7),multiply(),multiply(),multiply(),push(w),push(R),multiply(),push_integer(-4),push(I),push(p5),push(p7),multiply(),multiply(),multiply(),push(I),push(R),multiply(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),L=pop(),DEBUG&&console.log("R_determinant: "+L.toString()),push(N),push_integer(-3),push(p4),push(p6),multiply(),multiply(),push_integer(12),push(p3),push(p7),multiply(),multiply(),add(),add(),_=pop(),DEBUG&&console.log("R_DELTA0: "+_.toString()),push_integer(2),push(M),multiply(),push_integer(-9),push(p4),push(p5),push(p6),multiply(),multiply(),multiply(),push_integer(27),push(T),push(p7),multiply(),multiply(),push_integer(27),push(p3),push(R),multiply(),multiply(),push_integer(-72),push(A),push(p7),multiply(),multiply(),add(),add(),add(),add(),f=pop(),DEBUG&&console.log("R_DELTA1: "+f.toString()),push_integer(8),push(A),multiply(),push_integer(-3),push(T),multiply(),add(),push_integer(8),push(g),multiply(),divide(),C=pop(),DEBUG&&console.log("p: "+C.toString()),push(O),push_integer(-4),push(x),multiply(),push_integer(8),push(b),multiply(),add(),add(),push_integer(8),push(v),multiply(),divide(),F=pop(),DEBUG&&console.log("q: "+F.toString()),DEBUG&&console.log("tos 1 "+tos),isZeroAtomOrTensor(p4)){for(C=p5,F=p6,Y=p7,push_rational(5,2),push(C),multiply(),z=pop(),push_integer(2),push(C),push_integer(2),power(),multiply(),push(Y),subtract(),Z=pop(),push(C),push_integer(3),power(),push_integer(2),divide(),push_rational(-1,2),push(C),push(Y),multiply(),multiply(),push_rational(-1,8),push(F),push_integer(2),power(),multiply(),add(),add(),V=pop(),push(symbol(SECRETX)),push_integer(3),power(),push(z),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push(Z),push(symbol(SECRETX)),multiply(),push(V),add(),add(),add(),DEBUG&&console.log("resolventCubic: "+stack[tos-1].toString()),push(symbol(SECRETX)),roots(),ur=pop(),DEBUG&&console.log("resolventCubicSolutions: "+ur),D=null,or=0,er=(ir=ur.tensor.elem).length;or<er;or++)if(H=ir[or],DEBUG&&console.log("examining solution: "+H),push(H),push_integer(2),multiply(),push(C),add(),absValFloat(),dr=pop(),DEBUG&&console.log("abs value is: "+H),!isZeroAtomOrTensor(dr)){D=H;break}return DEBUG&&console.log("chosen solution: "+D),push(D),push_integer(2),multiply(),push(C),add(),push_rational(1,2),power(),simplify(),cr=pop(),push(F),push_integer(2),multiply(),push(cr),divide(),simplify(),W=pop(),push(C),push_integer(3),multiply(),push(D),push_integer(2),multiply(),add(),X=pop(),push(cr),push(X),push(W),add(),negate(),push_rational(1,2),power(),simplify(),add(),push_integer(2),divide(),push(cr),push(X),push(W),add(),negate(),push_rational(1,2),power(),simplify(),subtract(),push_integer(2),divide(),push(cr),negate(),push(X),push(W),subtract(),negate(),push_rational(1,2),power(),simplify(),add(),push_integer(2),divide(),push(cr),negate(),push(X),push(W),subtract(),negate(),push_rational(1,2),power(),simplify(),subtract(),push_integer(2),divide(),void restore()}for(DEBUG&&console.log("tos 2 "+tos),push_integer(8),push(p5),push(p3),multiply(),multiply(),push_integer(-3),push(p4),push_integer(2),power(),multiply(),add(),push_integer(8),push(p3),push_integer(2),power(),multiply(),divide(),C=pop(),DEBUG&&console.log("p for depressed quartic: "+C.toString()),push(p4),push_integer(3),power(),push_integer(-4),push(p3),push(p4),push(p5),multiply(),multiply(),multiply(),push_integer(8),push(p6),push(p3),push_integer(2),power(),multiply(),multiply(),add(),add(),push_integer(8),push(p3),push_integer(3),power(),multiply(),divide(),F=pop(),DEBUG&&console.log("q for depressed quartic: "+F.toString()),push(p4),push_integer(4),power(),push_integer(-3),multiply(),push_integer(256),push(v),push(p7),multiply(),multiply(),push_integer(-64),push(b),push(p4),multiply(),multiply(),push_integer(16),push(T),push(p3),push(p5),multiply(),multiply(),multiply(),add(),add(),add(),push_integer(256),push(p3),push_integer(4),power(),multiply(),divide(),Y=pop(),DEBUG&&console.log("r for depressed quartic: "+Y.toString()),DEBUG&&console.log("tos 4 "+tos),push(symbol(SECRETX)),push_integer(4),power(),DEBUG&&console.log("4 * x^4: "+stack[tos-1].toString()),push(C),push(symbol(SECRETX)),push_integer(2),power(),multiply(),DEBUG&&console.log("R_p * x^2: "+stack[tos-1].toString()),push(F),push(symbol(SECRETX)),multiply(),DEBUG&&console.log("R_q * x: "+stack[tos-1].toString()),push(Y),DEBUG&&console.log("R_r: "+stack[tos-1].toString()),add(),add(),add(),simplify(),DEBUG&&console.log("solving depressed quartic: "+stack[tos-1].toString()),push(symbol(SECRETX)),roots(),$=pop(),DEBUG&&console.log("depressedSolutions: "+$),tr=0,rr=(ar=$.tensor.elem).length;tr<rr;tr++)H=ar[tr],push(H),push(p4),push_integer(4),push(p3),multiply(),divide(),subtract(),simplify(),DEBUG&&console.log("solution from depressed: "+stack[tos-1].toString());return void restore()}}return moveTos(tos-r),restore()},Eval_round=function(){return push(cadr(p1)),Eval(),yround()},yround=function(){return save(),yyround(),restore()},yyround=function(){var r;return r=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(r=Math.round(p1.d),void push_double(r)):isinteger(p1)?void push(p1):(push(p1),yyfloat(),p1=pop(),push_integer(Math.round(p1.d))):(push_symbol(ROUND),push(p1),void list(2))},T_INTEGER=1001,T_DOUBLE=1002,T_SYMBOL=1003,T_FUNCTION=1004,T_NEWLINE=1006,T_STRING=1007,T_GTEQ=1008,T_LTEQ=1009,T_EQ=1010,T_NEQ=1011,T_QUOTASSIGN=1012,token="",newline_flag=0,meta_mode=0,input_str=0,scan_str=0,token_str=0,token_buf=0,lastFoundSymbol=null,symbolsRightOfAssignment=null,symbolsLeftOfAssignment=null,isSymbolLeftOfAssignment=null,scanningParameters=null,functionInvokationsScanningStack=null,skipRootVariableToBeSolved=!1,assignmentFound=null,scanned="",scan=function(r){return DEBUG&&console.log("#### scanning "+r),lastFoundSymbol=null,symbolsRightOfAssignment=[],symbolsLeftOfAssignment=[],isSymbolLeftOfAssignment=!0,scanningParameters=[],functionInvokationsScanningStack=[""],assignmentFound=!1,scanned=r,meta_mode=0,expanding++,input_str=0,scan_str=0,get_next_token(),""===token?(push(symbol(NIL)),expanding--,0):(scan_stmt(),expanding--,assignmentFound||(symbolsInExpressionsWithoutAssignments=symbolsInExpressionsWithoutAssignments.concat(symbolsLeftOfAssignment)),token_str-input_str)},scan_meta=function(r){return scanned=r,meta_mode=1,expanding++,input_str=0,scan_str=0,get_next_token(),""===token?(push(symbol(NIL)),expanding--,0):(scan_stmt(),expanding--,token_str-input_str)},scan_stmt=function(){var r,e,t,o,s,n,p,a,i;if(scan_relation(),r=!1,token===T_QUOTASSIGN&&(r=!0),(token===T_QUOTASSIGN||"="===token)&&(i=lastFoundSymbol,DEBUG&&console.log("assignment!"),assignmentFound=!0,isSymbolLeftOfAssignment=!1,get_next_token(),push_symbol(SETQ),swap(),r&&push_symbol(QUOTE),scan_relation(),r&&list(2),list(3),isSymbolLeftOfAssignment=!0,codeGen)){if(-1!==(o=symbolsRightOfAssignment.indexOf(i))&&(symbolsRightOfAssignment.splice(o,1),symbolsHavingReassignments.push(i)),DEBUG)for(console.log("locally, "+i+" depends on: "),s=0,n=symbolsRightOfAssignment.length;s<n;s++)t=symbolsRightOfAssignment[s],console.log("  "+t);for(null==symbolsDependencies[i]&&(symbolsDependencies[i]=[]),e=symbolsDependencies[i],a=0,p=symbolsRightOfAssignment.length;a<p;a++)t=symbolsRightOfAssignment[a],-1===e.indexOf(t)&&e.push(t);return symbolsRightOfAssignment=[]}},scan_relation=function(){switch(scan_expression(),token){case T_EQ:return push_symbol(TESTEQ),swap(),get_next_token(),scan_expression(),list(3);case T_NEQ:return push_symbol(NOT),swap(),push_symbol(TESTEQ),swap(),get_next_token(),scan_expression(),list(3),list(2);case T_LTEQ:return push_symbol(TESTLE),swap(),get_next_token(),scan_expression(),list(3);case T_GTEQ:return push_symbol(TESTGE),swap(),get_next_token(),scan_expression(),list(3);case"<":return push_symbol(TESTLT),swap(),get_next_token(),scan_expression(),list(3);case">":return push_symbol(TESTGT),swap(),get_next_token(),scan_expression(),list(3)}},scan_expression=function(){var r;switch(r=tos,token){case"+":get_next_token(),scan_term();break;case"-":get_next_token(),scan_term(),negate();break;default:scan_term()}for(;0===newline_flag&&("+"===token||"-"===token);)"+"===token?(get_next_token(),scan_term()):(get_next_token(),scan_term(),negate());if(tos-r>1)return list(tos-r),push_symbol(ADD),swap(),cons()},is_factor=function(){if(("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===dotprod_unicode)return 1;switch(token){case"*":case"/":return 1;case"(":case T_SYMBOL:case T_FUNCTION:case T_INTEGER:case T_DOUBLE:case T_STRING:return newline_flag?(scan_str=token_str,0):1}return 0},simplify_1_in_products=function(r,e){if(r>e&&isrational(stack[r-1])&&equaln(stack[r-1],1))return pop()},multiply_consecutive_constants=function(r,e){if(r>e+1&&isNumericAtom(stack[r-2])&&isNumericAtom(stack[r-1]))return multiply()},scan_term=function(){var r;for(r=tos,scan_factor(),parse_time_simplifications&&simplify_1_in_products(tos,r);is_factor();)"*"===token?(get_next_token(),scan_factor()):"/"===token?(simplify_1_in_products(tos,r),get_next_token(),scan_factor(),inverse()):("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===dotprod_unicode?(get_next_token(),push_symbol(INNER),swap(),scan_factor(),list(3)):scan_factor(),parse_time_simplifications&&(multiply_consecutive_constants(tos,r),simplify_1_in_products(tos,r));return r===tos?push_integer(1):tos-r>1?(list(tos-r),push_symbol(MULTIPLY),swap(),cons()):void 0},scan_power=function(){if("^"===token)return get_next_token(),push_symbol(POWER),swap(),scan_factor(),list(3)},scan_index=function(r){for(get_next_token(),push_symbol(INDEX),swap(),scan_expression();","===token;)get_next_token(),scan_expression();return"]"!==token&&scan_error("] expected"),get_next_token(),list(tos-r)},scan_factor=function(){var r,e;for(e=tos,r=!1,"("===token?scan_subexpr():token===T_SYMBOL?scan_symbol():token===T_FUNCTION?scan_function_call_with_function_name():"["===token?scan_tensor():token===T_INTEGER?(r=!0,bignum_scan_integer(token_buf),get_next_token()):token===T_DOUBLE?(r=!0,bignum_scan_float(token_buf),get_next_token()):token===T_STRING?scan_string():scan_error("syntax error");"["===token||"("===token&&0===newline_flag&&!r;)"["===token?scan_index(e):"("===token&&scan_function_call_without_function_name();for(;"!"===token;)get_next_token(),push_symbol(FACTORIAL),swap(),list(2);for(;("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===transpose_unicode;)get_next_token(),push_symbol(TRANSPOSE),swap(),list(2);return scan_power()},addSymbolRightOfAssignment=function(r){var e,t,o,s;if(-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(r)&&-1===symbolsRightOfAssignment.indexOf(r)&&-1===symbolsRightOfAssignment.indexOf("'"+r)&&!skipRootVariableToBeSolved){for(DEBUG&&console.log("... adding symbol: "+r+" to the set of the symbols right of assignment"),o="",e=t=1,s=functionInvokationsScanningStack.length;1<=s?t<s:t>s;e=1<=s?++t:--t)""!==functionInvokationsScanningStack[e]&&(o+=functionInvokationsScanningStack[e]+"_"+e+"_");return r=o+r,symbolsRightOfAssignment.push(r)}},addSymbolLeftOfAssignment=function(r){var e,t,o,s;if(-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(r)&&-1===symbolsLeftOfAssignment.indexOf(r)&&-1===symbolsLeftOfAssignment.indexOf("'"+r)&&!skipRootVariableToBeSolved){for(DEBUG&&console.log("... adding symbol: "+r+" to the set of the symbols left of assignment"),o="",e=t=1,s=functionInvokationsScanningStack.length;1<=s?t<s:t>s;e=1<=s?++t:--t)""!==functionInvokationsScanningStack[e]&&(o+=functionInvokationsScanningStack[e]+"_"+e+"_");return r=o+r,symbolsLeftOfAssignment.push(r)}},scan_symbol=function(){if(token!==T_SYMBOL&&scan_error("symbol expected"),meta_mode&&1===token_buf.length)switch(token_buf[0]){case"a":push(symbol(METAA));break;case"b":push(symbol(METAB));break;case"x":push(symbol(METAX));break;default:push(usr_symbol(token_buf))}else push(usr_symbol(token_buf));return 0===scanningParameters.length?(DEBUG&&console.log("out of scanning parameters, processing "+token_buf),lastFoundSymbol=token_buf,isSymbolLeftOfAssignment&&addSymbolLeftOfAssignment(token_buf)):(DEBUG&&console.log("still scanning parameters, skipping "+token_buf),isSymbolLeftOfAssignment&&addSymbolRightOfAssignment("'"+token_buf)),DEBUG&&console.log("found symbol: "+token_buf+" left of assignment: "+isSymbolLeftOfAssignment),isSymbolLeftOfAssignment||addSymbolRightOfAssignment(token_buf),get_next_token()},scan_string=function(){return new_string(token_buf),get_next_token()},scan_function_call_with_function_name=function(){var r,e,t,o,s,n;if(DEBUG&&console.log("-- scan_function_call_with_function_name start"),o=1,new U,s=usr_symbol(token_buf),push(s),"roots"!==(r=token_buf)&&"defint"!==r&&"sum"!==r&&"product"!==r&&"for"!==r||functionInvokationsScanningStack.push(token_buf),lastFoundSymbol=token_buf,isSymbolLeftOfAssignment||addSymbolRightOfAssignment(token_buf),get_next_token(),get_next_token(),scanningParameters.push(!0),")"!==token){for(scan_stmt(),o++;","===token;)get_next_token(),2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("roots")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("sum")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("sum_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("product")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("product_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("for")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("for_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("defint")&&(2===o||o>2&&(o-2)%3==0)&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("defint_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),scan_stmt(),skipRootVariableToBeSolved=!1,o++;2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("roots")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_x").test(r)})))}for(scanningParameters.pop(),e=t=0,n=symbolsRightOfAssignment.length;0<=n?t<=n:t>=n;e=0<=n?++t:--t)null!=symbolsRightOfAssignment[e]&&("roots"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"defint"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("defint_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"sum"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("sum_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"product"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("product_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"for"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("for_"+(functionInvokationsScanningStack.length-1)+"_"),"")));if(")"!==token&&scan_error(") expected"),get_next_token(),list(o),"roots"!==r&&"defint"!==r&&"sum"!==r&&"product"!==r&&"for"!==r||functionInvokationsScanningStack.pop(),r===symbol(PATTERN).printname&&(patternHasBeenFound=!0),DEBUG)return console.log("-- scan_function_call_with_function_name end")},scan_function_call_without_function_name=function(){var r;if(DEBUG&&console.log("-- scan_function_call_without_function_name start"),push_symbol(EVAL),swap(),list(2),r=1,get_next_token(),scanningParameters.push(!0),")"!==token)for(scan_stmt(),r++;","===token;)get_next_token(),scan_stmt(),r++;if(scanningParameters.pop(),")"!==token&&scan_error(") expected"),get_next_token(),list(r),DEBUG)return console.log("-- scan_function_call_without_function_name end: "+stack[tos-1])},scan_subexpr=function(){return"("!==token&&scan_error("( expected"),get_next_token(),scan_stmt(),")"!==token&&scan_error(") expected"),get_next_token()},scan_tensor=function(){var r;for(r=0,"["!==token&&scan_error("[ expected"),get_next_token(),scan_stmt(),r=1;","===token;)get_next_token(),scan_stmt(),r++;return build_tensor(r),"]"!==token&&scan_error("] expected"),get_next_token()},scan_error=function(r){for(errorMessage="";input_str!==scan_str&&("\n"!==scanned[input_str]&&"\r"!==scanned[input_str]||input_str+1!==scan_str);)errorMessage+=scanned[input_str++];for(errorMessage+=" ? ";scanned[input_str]&&"\n"!==scanned[input_str]&&"\r"!==scanned[input_str];)errorMessage+=scanned[input_str++];return errorMessage+="\n",stop(r)},build_tensor=function(r){var e,t,o;for(e=0,save(),(p2=alloc_tensor(r)).tensor.ndim=1,p2.tensor.dim[0]=r,e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)p2.tensor.elem[e]=stack[tos-r+e];return check_tensor_dimensions(p2),moveTos(tos-r),push(p2),restore()},get_next_token=function(){for(newline_flag=0;get_token(),token===T_NEWLINE;)newline_flag=1;if(DEBUG)return console.log("get_next_token token: "+token)},get_token=function(){for(;isspace(scanned[scan_str]);){if("\n"===scanned[scan_str]||"\r"===scanned[scan_str])return token=T_NEWLINE,void scan_str++;scan_str++}if(token_str=scan_str,scan_str!==scanned.length){if(!isdigit(scanned[scan_str])&&"."!==scanned[scan_str]){if(isalpha(scanned[scan_str])){for(;isalnumorunderscore(scanned[scan_str]);)scan_str++;return token="("===scanned[scan_str]?T_FUNCTION:T_SYMBOL,void update_token_buf(token_str,scan_str)}if('"'===scanned[scan_str]){for(scan_str++;'"'!==scanned[scan_str];)scan_str===scanned.length-1&&(scan_str++,scan_error("runaway string"),scan_str--),scan_str++;return scan_str++,token=T_STRING,void update_token_buf(token_str+1,scan_str-1)}if("#"===scanned[scan_str]||"-"===scanned[scan_str]&&"-"===scanned[scan_str+1]){for(;scanned[scan_str]&&"\n"!==scanned[scan_str]&&"\r"!==scanned[scan_str];)scan_str++;return scanned[scan_str]&&scan_str++,void(token=T_NEWLINE)}return":"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_QUOTASSIGN)):"="===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_EQ)):"!"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_NEQ)):"<"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_LTEQ)):">"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_GTEQ)):token=scanned[scan_str++]}for(;isdigit(scanned[scan_str]);)scan_str++;if("."===scanned[scan_str]){for(scan_str++;isdigit(scanned[scan_str]);)scan_str++;if("e"===scanned[scan_str]&&("+"===scanned[scan_str+1]||"-"===scanned[scan_str+1]||isdigit(scanned[scan_str+1])))for(scan_str+=2;isdigit(scanned[scan_str]);)scan_str++;token=T_DOUBLE}else token=T_INTEGER;update_token_buf(token_str,scan_str)}else token=""},update_token_buf=function(r,e){return token_buf=scanned.substring(r,e)},$.scan=scan,Eval_sgn=function(){return push(cadr(p1)),Eval(),sgn()},sgn=function(){return save(),yysgn(),restore()},yysgn=function(){return p1=pop(),isdouble(p1)?p1.d>0||0===p1.d?void push_integer(1):void push_integer(-1):isrational(p1)?-1===MSIGN(mmul(p1.q.a,p1.q.b))?void push_integer(-1):MZERO(mmul(p1.q.a,p1.q.b))?void push_integer(0):void push_integer(1):iscomplexnumber(p1)?(push_integer(-1),push(p1),absval(),power(),push(p1),void multiply()):isnegativeterm(p1)?(push_symbol(SGN),push(p1),negate(),list(2),push_integer(-1),void multiply()):(push_symbol(SGN),push(p1),list(2))},Eval_shape=function(){return push(cadr(p1)),Eval(),shape()},shape=function(){var r,e,t,o,s,n,p,a;for(t=0,r=[],e=[],t=o=0,p=MAXDIM;0<=p?o<p:o>p;t=0<=p?++o:--o)r[t]=0,e[t]=0;if(save(),p1=pop(),!istensor(p1))return isZeroAtomOrTensor(p1)||stop("transpose: tensor expected, 1st arg is not a tensor"),push(zero),void restore();for(n=p1.tensor.ndim,(p2=alloc_tensor(n)).tensor.ndim=1,p2.tensor.dim[0]=n,t=s=0,a=n;0<=a?s<a:s>a;t=0<=a?++s:--s)push_integer(p1.tensor.dim[t]),p2.tensor.elem[t]=pop();return push(p2),restore()},Eval_simfac=function(){return push(cadr(p1)),Eval(),simfac()},simfac=function(){var r;if(r=0,save(),p1=pop(),car(p1)===symbol(ADD)){for(r=tos,p1=cdr(p1);p1!==symbol(NIL);)push(car(p1)),simfac_term(),p1=cdr(p1);add_all(tos-r)}else push(p1),simfac_term();return restore()},simfac_term=function(){var r;if(save(),p1=pop(),car(p1)!==symbol(MULTIPLY))return push(p1),void restore();for(r=tos,p1=cdr(p1);p1!==symbol(NIL);)push(car(p1)),p1=cdr(p1);for(;yysimfac(r););return multiply_all_noexpand(tos-r),restore()},yysimfac=function(r){var e,t,o,s,n,p,a,i;for(e=0,t=0,e=o=n=r,p=tos;n<=p?o<p:o>p;e=n<=p?++o:--o)for(p1=stack[e],t=s=a=r,i=tos;a<=i?s<i:s>i;t=a<=i?++s:--s)if(e!==t){if(p2=stack[t],car(p1)===symbol(FACTORIAL)&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&equal(cadr(p1),cadr(p2)))return push(cadr(p1)),push(one),subtract(),factorial(),stack[e]=pop(),stack[t]=one,1;if(car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)&&equal(p1,cadadr(p2)))return push(p1),push_integer(-1),add(),factorial(),reciprocate(),stack[e]=pop(),stack[t]=one,1;if(car(p2)===symbol(FACTORIAL)&&(push(p1),push(cadr(p2)),subtract(),p3=pop(),isplusone(p3)))return push(p1),factorial(),stack[e]=pop(),stack[t]=one,1;if(car(p1)===symbol(POWER)&&isminusone(caddr(p1))&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)&&(push(cadr(p1)),push(cadr(cadr(p2))),subtract(),p3=pop(),isplusone(p3)))return push(cadr(p1)),factorial(),reciprocate(),stack[e]=pop(),stack[t]=one,1;if(car(p1)===symbol(FACTORIAL)&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)){if(push(cadr(p1)),push(cadr(cadr(p2))),subtract(),p3=pop(),isplusone(p3))return stack[e]=cadr(p1),stack[t]=one,1;if(isminusone(p3))return push(cadr(cadr(p2))),reciprocate(),stack[e]=pop(),stack[t]=one,1;if(equaln(p3,2))return stack[e]=cadr(p1),push(cadr(p1)),push_integer(-1),add(),stack[t]=pop(),1;if(equaln(p3,-2))return push(cadr(cadr(p2))),reciprocate(),stack[e]=pop(),push(cadr(cadr(p2))),push_integer(-1),add(),reciprocate(),stack[t]=pop(),1}}return 0},Eval_simplify=function(){return push(cadr(p1)),runUserDefinedSimplifications(),Eval(),simplify()},runUserDefinedSimplifications=function(){var r,e,t,o,s,n,p,a,i,u;if(0!==userSimplificationsInListForm.length&&!Find(cadr(p1),symbol(INTEGRAL))){for(i=expanding,expanding=!1,DEBUG&&console.log("runUserDefinedSimplifications passed: "+stack[tos-1].toString()),Eval(),DEBUG&&console.log("runUserDefinedSimplifications after eval no expanding: "+stack[tos-1].toString()),expanding=i,p1=stack[tos-1],DEBUG&&console.log("patterns to be checked: "),o=0,s=userSimplificationsInListForm.length;o<s;o++)t=userSimplificationsInListForm[o],DEBUG&&console.log("..."+t);for(r=!0,a=0;r&&a<MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES;)for(r=!1,a++,p=0,n=userSimplificationsInListForm.length;p<n;p++){for(t=userSimplificationsInListForm[p],u=!0,e=0;u&&e<MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE;)e++,DEBUG&&console.log("simplify - tos: "+tos+" checking pattern: "+t+" on: "+p1),push_symbol(NIL),(u=transform(t,!0))&&(r=!0),p1=stack[tos-1],DEBUG&&console.log("p1 at this stage of simplification: "+p1);e===MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE&&stop("maximum application of single transformation rule exceeded: "+t)}if(a===MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES&&stop("maximum application of all transformation rules exceeded "),DEBUG)return console.log("METAX = "+get_binding(symbol(METAX))),console.log("METAA = "+get_binding(symbol(METAA))),console.log("METAB = "+get_binding(symbol(METAB)))}},simplifyForCodeGeneration=function(){return save(),runUserDefinedSimplifications(),codeGen=!0,simplify_main(),codeGen=!1,restore()},simplify=function(){return save(),simplify_main(),restore()},simplify_main=function(){var args,fbody;if(p1=pop(),codeGen&&car(p1)===symbol(FUNCTION)&&(fbody=cadr(p1),push(fbody),eval(),simplify(),p3=pop(),args=caddr(p1),push_symbol(FUNCTION),push(p3),push(args),list(3),p1=pop()),!istensor(p1))return Find(p1,symbol(FACTORIAL))&&(push(p1),simfac(),p2=pop(),push(p1),rationalize(),simfac(),p3=pop(),p1=count(p2)<count(p3)?p2:p3),f10(),f1(),f2(),f3(),f4(),f5(),f9(),simplify_polarRect(),do_simplify_nested_radicals&&simplify_nested_radicals()?(DEBUG&&console.log("de-nesting successful into: "+p1.toString()),push(p1),void simplify()):(simplify_rectToClock(),simplify_rational_expressions(),push(p1));simplify_tensor()},simplify_tensor=function(){var r,e,t,o,s;for(r=0,(p2=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,r=e=0,o=p1.tensor.ndim;0<=o?e<o:e>o;r=0<=o?++e:--e)p2.tensor.dim[r]=p1.tensor.dim[r];for(r=t=0,s=p1.tensor.nelem;0<=s?t<s:t>s;r=0<=s?++t:--t)push(p1.tensor.elem[r]),simplify(),p2.tensor.elem[r]=pop();return check_tensor_dimensions(p2),isZeroAtomOrTensor(p2)&&(p2=zero),push(p2)},f1=function(){if(car(p1)===symbol(ADD))return push(p1),rationalize(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},f2=function(){if(car(p1)===symbol(ADD))return push(p1),Condense(),p2=pop(),count(p2)<=count(p1)?p1=p2:void 0},f3=function(){if(push(p1),rationalize(),negate(),rationalize(),negate(),rationalize(),p2=pop(),count(p2)<count(p1))return p1=p2},f10=function(){var r,e,t,o;if(t=car(p1),cdr(p1),(t===symbol(MULTIPLY)||isinnerordot(p1))&&car(car(cdr(p1)))===symbol(TRANSPOSE)&&car(car(cdr(cdr(p1))))===symbol(TRANSPOSE)&&(DEBUG&&console.log("maybe collecting a transpose "+p1),r=cadr(car(cdr(p1))),e=cadr(car(cdr(cdr(p1)))),t===symbol(MULTIPLY)?(push(r),push(e),multiply()):isinnerordot(p1)&&(push(e),push(r),inner()),push_integer(1),push_integer(2),o=expanding,expanding=!1,transpose(),expanding=o,p2=pop(),count(p2)<count(p1)&&(p1=p2),DEBUG))return console.log("collecting a transpose "+p2)},f4=function(){if(!isZeroAtomOrTensor(p1))return push(p1),rationalize(),inverse(),rationalize(),inverse(),rationalize(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},simplify_trig=function(){return save(),p1=pop(),f5(),push(p1),restore()},f5=function(){if(0!==Find(p1,symbol(SIN))||0!==Find(p1,symbol(COS)))return trigmode=1,push(p2=p1),Eval(),p3=pop(),trigmode=2,push(p2),Eval(),p4=pop(),trigmode=0,(count(p4)<count(p3)||nterms(p4)<nterms(p3))&&(p3=p4),count(p3)<count(p1)||nterms(p3)<nterms(p1)?p1=p3:void 0},f9=function(){var r,e;if(car(p1)===symbol(ADD)){for(push_integer(0),p2=cdr(p1);iscons(p2);)push(car(p2)),simplify(),add(),r=p1,e=p2,p1=pop(),simplify_rational_expressions(),push(p1),p1=r,p2=cdr(p2=e);return p2=pop(),count(p2)<count(p1)?p1=p2:void 0}},simplify_rational_expressions=function(){var r,e,t,o;if(push(p1),denominator(),r=pop(),!isone(r)&&(push(p1),numerator(),e=pop(),!isone(e)&&(t=areunivarpolysfactoredorexpandedform(e,r))&&(push(e),push(r),gcd(),push(t),factor(),o=pop(),!isone(o))))return push(e),push(t),factor(),push(o),inverse(),multiply_noexpand(),simplify(),stack[tos-1].toString(),push(r),push(t),factor(),push(o),inverse(),multiply_noexpand(),simplify(),stack[tos-1].toString(),divide(),Condense(),stack[tos-1].toString(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},simplify_rectToClock=function(){if(0!==Find(p1,symbol(SIN))||0!==Find(p1,symbol(COS)))return push(p1),Eval(),clockform(),p2=pop(),DEBUG&&console.log("before simplification clockform: "+p1+" after: "+p2),count(p2)<count(p1)?p1=p2:void 0},simplify_polarRect=function(){if(push(p1),polarRectAMinusOneBase(),Eval(),p2=pop(),count(p2)<count(p1))return p1=p2},polarRectAMinusOneBase=function(){var r;if(save(),p1=pop(),isimaginaryunit(p1))return push(p1),void restore();if(equal(car(p1),symbol(POWER))&&isminusone(cadr(p1)))push(one),negate(),push(caddr(p1)),polarRectAMinusOneBase(),power(),polar(),rect();else if(iscons(p1)){for(r=tos;iscons(p1);)push(car(p1)),polarRectAMinusOneBase(),p1=cdr(p1);list(tos-r)}else push(p1);restore()},nterms=function(r){return car(r)!==symbol(ADD)?1:length(r)-1},simplify_nested_radicals=function(){var r,e,t,o;return recursionLevelNestedRadicalsRemoval>0?(DEBUG&&console.log("denesting bailing out because of too much recursion"),!1):(push(p1),o=take_care_of_nested_radicals(),t=stack[tos-1],r=expanding,expanding=0,yycondense(),expanding=r,e=pop(),countOccurrencesOfSymbol(symbol(POWER),t)<countOccurrencesOfSymbol(symbol(POWER),e)?push(t):push(e),p1=pop(),o)},take_care_of_nested_radicals=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M,R,L,k,q,D,P,U,w;if(recursionLevelNestedRadicalsRemoval>0)return DEBUG&&console.log("denesting bailing out because of too much recursion"),!1;if(save(),p1=pop(),equal(car(p1),symbol(POWER))){if(n=cadr(p1),c=caddr(p1),!isminusone(c)&&equal(car(n),symbol(ADD))&&isfraction(c)&&(equalq(c,1,3)||equalq(c,1,2))){for(d=cadr(n),push(d),take_care_of_nested_radicals(),pop(),P=caddr(n),push(P),take_care_of_nested_radicals(),pop(),O=0,u=n;cdr(u)!==symbol(NIL);)O++,u=cdr(u);if(O>2)return push(p1),restore(),!1;if(i=null,a=[],w=[],car(P)===symbol(MULTIPLY)){if(U=cdr(P),iscons(U))for(;iscons(U);)k=car(U),car(k)===symbol(POWER)?(f=cadr(k),h=caddr(k),equalq(h,1,2)&&(null==i?(i=h,a.push(f)):equal(h,i)&&a.push(f))):w.push(k),U=cdr(U)}else car(P)===symbol(POWER)&&(f=cadr(P),h=caddr(P),null==i&&equalq(h,1,2)&&(i=h,a.push(f)));if(0===a.length)return push(p1),restore(),!1;for(r=d,push_integer(1),g=0,b=a.length;g<b;g++)m=a[g],push(m),multiply();for(t=pop(),push_integer(1),T=0,y=w.length;T<y;T++)m=w[T],push(m),multiply();if(e=pop(),equalq(c,1,3)){if(push(r),negate(),push(t),multiply(),push(e),divide(),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return push(p1),restore(),!1;if(push(p),push_integer(3),push(t),multiply(),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),push(p1),restore(),!1;if(push(p),push(symbol(SECRETX)),multiply(),push_integer(-3),push(r),multiply(),push(e),divide(),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),pop(),push(p1),restore(),!1;push(p),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push_integer(1),push(symbol(SECRETX)),push_integer(3),power(),multiply(),add(),add(),add()}else if(equalq(c,1,2)){if(push(t),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return push(p1),restore(),!1;if(push(p),push_integer(-2),push(r),multiply(),push(e),divide(),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),push(p1),restore(),!1;push(p),push(symbol(SECRETX)),multiply(),push_integer(1),push(symbol(SECRETX)),push_integer(2),power(),multiply(),add(),add()}if(push(symbol(SECRETX)),recursionLevelNestedRadicalsRemoval++,roots(),recursionLevelNestedRadicalsRemoval--,equal(stack[tos-1],symbol(NIL)))return DEBUG&&console.log("roots bailed out because of too much recursion"),pop(),push(p1),restore(),!1;for(L=[],I=0,v=(D=stack[tos-1].tensor.elem).length;I<v;I++)l=D[I],Find(l,symbol(POWER))||L.push(l);if(pop(),0===L.length)return push(p1),restore(),!1;for(R=[],q=[],S=0,x=L.length;S<x;S++)m=L[S],push(m),real(),yyfloat(),R.push(m),q.push(pop().d);return o=R[q.indexOf(Math.max.apply(Math,q))],equalq(c,1,3)?(push(r),push(o),push_integer(3),power(),push_integer(3),push(t),multiply(),push(o),multiply(),add(),divide(),push_rational(1,3),power()):equalq(c,1,2)&&(push(r),push(o),push_integer(2),power(),push(t),add(),divide(),push_rational(1,2),power()),null==(A=pop())?(push(p1),restore(),!1):(push(A),push(o),multiply(),equalq(c,1,3)?(E=pop(),push(A),push(t),push_rational(1,2),power(),multiply(),push(E),add(),simplify()):equalq(c,1,2)&&(E=pop(),push(A),push(t),push_rational(1,2),power(),multiply(),push(E),add(),simplify(),N=pop(),push(N),real(),yyfloat(),M=pop(),isnegativenumber(M)?(push(A),negate(),A=pop(),push(E),negate(),E=pop(),push(A),push(t),push_rational(1,2),power(),multiply(),push(E),add(),simplify()):push(N)),p1=pop(),push(p1),restore(),!0)}return push(p1),restore(),!1}if(iscons(p1)){for(_=tos,s=!1;iscons(p1);)push(car(p1)),s=s||take_care_of_nested_radicals(),p1=cdr(p1);return list(tos-_),restore(),s}return push(p1),restore(),!1},Eval_sin=function(){return push(cadr(p1)),Eval(),sine()},sine=function(){return save(),p1=pop(),car(p1)===symbol(ADD)?sine_of_angle_sum():sine_of_angle(),restore()},sine_of_angle_sum=function(){for(p2=cdr(p1);iscons(p2);){if(p4=car(p2),isnpi(p4))return push(p1),push(p4),subtract(),p3=pop(),push(p3),sine(),push(p4),cosine(),multiply(),push(p3),cosine(),push(p4),sine(),multiply(),void add();p2=cdr(p2)}return sine_of_angle()},sine_of_angle=function(){var r,e;if(car(p1)!==symbol(ARCSIN)){if(isdouble(p1))return r=Math.sin(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(isnegative(p1))return push(p1),negate(),sine(),void negate();if(car(p1)===symbol(ARCTAN))return push(cadr(p1)),push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),push_rational(-1,2),power(),void multiply();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(SIN)),push(p1),void list(2);switch(e%360){case 0:case 180:return push_integer(0);case 30:case 150:return push_rational(1,2);case 210:case 330:return push_rational(-1,2);case 45:case 135:return push_rational(1,2),push_integer(2),push_rational(1,2),power(),multiply();case 225:case 315:return push_rational(-1,2),push_integer(2),push_rational(1,2),power(),multiply();case 60:case 120:return push_rational(1,2),push_integer(3),push_rational(1,2),power(),multiply();case 240:case 300:return push_rational(-1,2),push_integer(3),push_rational(1,2),power(),multiply();case 90:return push_integer(1);case 270:return push_integer(-1);default:return push(symbol(SIN)),push(p1),list(2)}}else push(cadr(p1))},Eval_sinh=function(){return push(cadr(p1)),Eval(),ysinh()},ysinh=function(){return save(),yysinh(),restore()},yysinh=function(){var r;if(r=0,p1=pop(),car(p1)!==symbol(ARCSINH)){if(isdouble(p1))return r=Math.sinh(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(!isZeroAtomOrTensor(p1))return push_symbol(SINH),push(p1),list(2);push(zero)}else push(cadr(p1))},subst=function(){var r,e,t,o,s;if(r=0,save(),p3=pop(),(p2=pop())!==symbol(NIL)&&p3!==symbol(NIL)){if(p1=pop(),istensor(p1)){for((p4=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,r=e=0,o=p1.tensor.ndim;0<=o?e<o:e>o;r=0<=o?++e:--e)p4.tensor.dim[r]=p1.tensor.dim[r];for(r=t=0,s=p1.tensor.nelem;0<=s?t<s:t>s;r=0<=s?++t:--t)push(p1.tensor.elem[r]),push(p2),push(p3),subst(),p4.tensor.elem[r]=pop(),check_tensor_dimensions(p4);push(p4)}else equal(p1,p2)?push(p3):iscons(p1)?(push(car(p1)),push(p2),push(p3),subst(),push(cdr(p1)),push(p2),push(p3),subst(),cons()):push(p1);return restore()}restore()},Eval_sum=function(){var r,e,t,o,s,n,p,a;if(e=0,r=cadr(p1),t=caddr(p1),issymbol(t)||stop("sum: 2nd arg?"),push(cadddr(p1)),Eval(),o=pop_integer(),isNaN(o))push(p1);else{if(push(caddddr(p1)),Eval(),s=pop_integer(),!isNaN(s)){for(p4=get_binding(t),push_integer(0),e=n=p=o,a=s;p<=a?n<=a:n>=a;e=p<=a?++n:--n)push_integer(e),p5=pop(),set_binding(t,p5),push(r),Eval(),add();return set_binding(t,p4)}push(p1)}},Eval_tan=function(){return push(cadr(p1)),Eval(),tangent()},tangent=function(){return save(),yytangent(),restore()},yytangent=function(){var r,e;if(r=0,p1=pop(),car(p1)!==symbol(ARCTAN)){if(isdouble(p1))return r=Math.tan(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(isnegative(p1))return push(p1),negate(),tangent(),void negate();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(TAN)),push(p1),void list(2);switch(e%360){case 0:case 180:return push_integer(0);case 30:case 210:return push_rational(1,3),push_integer(3),push_rational(1,2),power(),multiply();case 150:case 330:return push_rational(-1,3),push_integer(3),push_rational(1,2),power(),multiply();case 45:case 225:return push_integer(1);case 135:case 315:return push_integer(-1);case 60:case 240:return push_integer(3),push_rational(1,2),power();case 120:case 300:return push_integer(3),push_rational(1,2),power(),negate();default:return push(symbol(TAN)),push(p1),list(2)}}else push(cadr(p1))},Eval_tanh=function(){var r;if(r=0,push(cadr(p1)),Eval(),p1=pop(),car(p1)!==symbol(ARCTANH)){if(isdouble(p1))return r=Math.tanh(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(!isZeroAtomOrTensor(p1))return push_symbol(TANH),push(p1),list(2);push(zero)}else push(cadr(p1))},Eval_taylor=function(){return p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(24):push(p2),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),taylor()},taylor=function(){var r,e,t,o;if(r=0,save(),p4=pop(),p3=pop(),p2=pop(),p1=pop(),push(p3),e=pop_integer(),isNaN(e))return push_symbol(TAYLOR),push(p1),push(p2),push(p3),push(p4),list(5),void restore();for(push(p1),push(p2),push(p4),subst(),Eval(),push_integer(1),p5=pop(),r=t=1,o=e;(1<=o?t<=o:t>=o)&&(push(p1),push(p2),derivative(),p1=pop(),!isZeroAtomOrTensor(p1));r=1<=o?++t:--t)push(p5),push(p2),push(p4),subtract(),multiply(),p5=pop(),push(p1),push(p2),push(p4),subst(),Eval(),push(p5),multiply(),push_integer(r),factorial(),divide(),add();return restore()},Eval_tensor=function(){var r,e,t,o,s,n,p,a,i;for(t=0,check_tensor_dimensions(p1),p=p1.tensor.nelem,n=p1.tensor.ndim,(p2=alloc_tensor(p)).tensor.ndim=n,t=o=0,a=n;0<=a?o<a:o>a;t=0<=a?++o:--o)p2.tensor.dim[t]=p1.tensor.dim[t];for(r=p1.tensor.elem,e=p2.tensor.elem,check_tensor_dimensions(p2),t=s=0,i=p;0<=i?s<i:s>i;t=0<=i?++s:--s)push(r[t]),Eval(),e[t]=pop();return check_tensor_dimensions(p1),check_tensor_dimensions(p2),push(p2),promote_tensor()},tensor_plus_tensor=function(){var r,e,t,o,s,n,p,a,i,u,l,c;if(o=0,save(),p2=pop(),(a=(p1=pop()).tensor.ndim)!==p2.tensor.ndim)return push(symbol(NIL)),void restore();for(o=s=0,u=a;0<=u?s<u:s>u;o=0<=u?++s:--s)if(p1.tensor.dim[o]!==p2.tensor.dim[o])return push(symbol(NIL)),void restore();for(i=p1.tensor.nelem,(p3=alloc_tensor(i)).tensor.ndim=a,o=n=0,l=a;0<=l?n<l:n>l;o=0<=l?++n:--n)p3.tensor.dim[o]=p1.tensor.dim[o];for(r=p1.tensor.elem,e=p2.tensor.elem,t=p3.tensor.elem,o=p=0,c=i;0<=c?p<c:p>c;o=0<=c?++p:--p)push(r[o]),push(e[o]),add(),t[o]=pop();return push(p3),restore()},tensor_times_scalar=function(){var r,e,t,o,s,n,p,a,i;for(t=0,save(),p2=pop(),n=(p1=pop()).tensor.ndim,p=p1.tensor.nelem,(p3=alloc_tensor(p)).tensor.ndim=n,t=o=0,a=n;0<=a?o<a:o>a;t=0<=a?++o:--o)p3.tensor.dim[t]=p1.tensor.dim[t];for(r=p1.tensor.elem,e=p3.tensor.elem,t=s=0,i=p;0<=i?s<i:s>i;t=0<=i?++s:--s)push(r[t]),push(p2),multiply(),e[t]=pop();return push(p3),restore()},scalar_times_tensor=function(){var r,e,t,o,s,n,p,a,i;for(t=0,save(),p2=pop(),p1=pop(),n=p2.tensor.ndim,p=p2.tensor.nelem,(p3=alloc_tensor(p)).tensor.ndim=n,t=o=0,a=n;0<=a?o<a:o>a;t=0<=a?++o:--o)p3.tensor.dim[t]=p2.tensor.dim[t];for(r=p2.tensor.elem,e=p3.tensor.elem,t=s=0,i=p;0<=i?s<i:s>i;t=0<=i?++s:--s)push(p1),push(r[t]),multiply(),e[t]=pop();return push(p3),restore()},check_tensor_dimensions=function(r){r.tensor.nelem!==r.tensor.elem.length&&console.log("something wrong in tensor dimensions")},is_square_matrix=function(r){return istensor(r)&&2===r.tensor.ndim&&r.tensor.dim[0]===r.tensor.dim[1]?1:0},d_tensor_tensor=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d;if(o=0,s=0,i=p1.tensor.ndim,u=p1.tensor.nelem,i+1>=MAXDIM)return push_symbol(DERIVATIVE),push(p1),push(p2),void list(3);for((p3=alloc_tensor(u*p2.tensor.nelem)).tensor.ndim=i+1,o=n=0,l=i;0<=l?n<l:n>l;o=0<=l?++n:--n)p3.tensor.dim[o]=p1.tensor.dim[o];for(p3.tensor.dim[i]=p2.tensor.dim[0],r=p1.tensor.elem,e=p2.tensor.elem,t=p3.tensor.elem,o=p=0,c=u;0<=c?p<c:p>c;o=0<=c?++p:--p)for(s=a=0,d=p2.tensor.nelem;0<=d?a<d:a>d;s=0<=d?++a:--a)push(r[o]),push(e[s]),derivative(),t[o*p2.tensor.nelem+s]=pop();return push(p3)},d_scalar_tensor=function(){var r,e,t,o,s;for((p3=alloc_tensor(p2.tensor.nelem)).tensor.ndim=1,p3.tensor.dim[0]=p2.tensor.dim[0],r=p2.tensor.elem,e=p3.tensor.elem,t=o=0,s=p2.tensor.nelem;0<=s?o<s:o>s;t=0<=s?++o:--o)push(p1),push(r[t]),derivative(),e[t]=pop();return push(p3)},d_tensor_scalar=function(){var r,e,t,o,s,n,p;for(t=0,(p3=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,t=o=0,n=p1.tensor.ndim;0<=n?o<n:o>n;t=0<=n?++o:--o)p3.tensor.dim[t]=p1.tensor.dim[t];for(r=p1.tensor.elem,e=p3.tensor.elem,t=s=0,p=p1.tensor.nelem;0<=p?s<p:s>p;t=0<=p?++s:--s)push(r[t]),push(p2),derivative(),e[t]=pop();return push(p3)},compare_tensors=function(r,e){var t,o,s,n,p;if(t=0,r.tensor.ndim<e.tensor.ndim)return-1;if(r.tensor.ndim>e.tensor.ndim)return 1;for(t=o=0,n=r.tensor.ndim;0<=n?o<n:o>n;t=0<=n?++o:--o){if(r.tensor.dim[t]<e.tensor.dim[t])return-1;if(r.tensor.dim[t]>e.tensor.dim[t])return 1}for(t=s=0,p=r.tensor.nelem;0<=p?s<p:s>p;t=0<=p?++s:--s)if(!equal(r.tensor.elem[t],e.tensor.elem[t]))return lessp(r.tensor.elem[t],e.tensor.elem[t])?-1:1;return 0},power_tensor=function(){var r,e,t,o,s,n,p,a;if(r=0,s=0,e=p1.tensor.ndim-1,p1.tensor.dim[0]!==p1.tensor.dim[e])return push_symbol(POWER),push(p1),push(p2),void list(3);if(push(p2),s=pop_integer(),isNaN(s))return push_symbol(POWER),push(p1),push(p2),void list(3);if(0===s){for(2!==p1.tensor.ndim&&stop("power(tensor,0) with tensor rank not equal to 2"),s=p1.tensor.dim[0],(p1=alloc_tensor(s*s)).tensor.ndim=2,p1.tensor.dim[0]=s,p1.tensor.dim[1]=s,r=t=0,n=s;0<=n?t<n:t>n;r=0<=n?++t:--t)p1.tensor.elem[s*r+r]=one;return check_tensor_dimensions(p1),void push(p1)}for(s<0&&(s=-s,push(p1),inv(),p1=pop()),push(p1),a=[],r=o=1,p=s;(1<=p?o<p:o>p)&&(push(p1),inner(),!isZeroAtomOrTensor(stack[tos-1]));r=1<=p?++o:--o)a.push(void 0);return a},copy_tensor=function(){var r,e,t,o,s;for(r=0,save(),p1=pop(),(p2=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,r=e=0,o=p1.tensor.ndim;0<=o?e<o:e>o;r=0<=o?++e:--e)p2.tensor.dim[r]=p1.tensor.dim[r];for(r=t=0,s=p1.tensor.nelem;0<=s?t<s:t>s;r=0<=s?++t:--t)p2.tensor.elem[r]=p1.tensor.elem[r];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),push(p2),restore()},promote_tensor=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(r=0,e=0,t=0,save(),p1=pop(),!istensor(p1))return push(p1),void restore();for(p2=p1.tensor.elem[0],r=o=1,l=p1.tensor.nelem;1<=l?o<l:o>l;r=1<=l?++o:--o)compatible(p2,p1.tensor.elem[r])||stop("Cannot promote tensor due to inconsistent tensor components.");if(!istensor(p2))return push(p1),void restore();for((p=p1.tensor.ndim+p2.tensor.ndim)>MAXDIM&&stop("tensor rank > "+MAXDIM),a=p1.tensor.nelem*p2.tensor.nelem,(p3=alloc_tensor(a)).tensor.ndim=p,r=s=0,c=p1.tensor.ndim;0<=c?s<c:s>c;r=0<=c?++s:--s)p3.tensor.dim[r]=p1.tensor.dim[r];for(e=n=0,d=p2.tensor.ndim;0<=d?n<d:n>d;e=0<=d?++n:--n)p3.tensor.dim[r+e]=p2.tensor.dim[e];for(t=0,r=i=0,_=p1.tensor.nelem;0<=_?i<_:i>_;r=0<=_?++i:--i)for(e=u=0,m=(p2=p1.tensor.elem[r]).tensor.nelem;0<=m?u<m:u>m;e=0<=m?++u:--u)p3.tensor.elem[t++]=p2.tensor.elem[e];return check_tensor_dimensions(p2),check_tensor_dimensions(p3),push(p3),restore()},compatible=function(r,e){var t,o,s;if(!istensor(r)&&!istensor(e))return 1;if(!istensor(r)||!istensor(e))return 0;if(r.tensor.ndim!==e.tensor.ndim)return 0;for(t=o=0,s=r.tensor.ndim;0<=s?o<s:o>s;t=0<=s?++o:--o)if(r.tensor.dim[t]!==e.tensor.dim[t])return 0;return 1},Eval_test=function(){var r,e;for(e=p1,p1=cdr(p1);iscons(p1);){if(cdr(p1)===symbol(NIL))return push(car(p1)),void Eval();if(null==(r=isZeroLikeOrNonZeroLikeOrUndetermined(car(p1))))return void push(e);if(r)return push(cadr(p1)),void Eval();p1=cddr(p1)}return push_integer(0)},Eval_testeq=function(){var r,e,t;if(e=p1,push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),subtract(),t=pop(),r=isZeroLikeOrNonZeroLikeOrUndetermined(t))push_integer(0);else if(null==r||r)if(push(cadr(p1)),Eval(),simplify(),push(caddr(p1)),Eval(),simplify(),subtract(),t=pop(),r=isZeroLikeOrNonZeroLikeOrUndetermined(t))push_integer(0);else{if(null==r||r)return push(e);push_integer(1)}else push_integer(1)},Eval_testge=function(){var r,e;if(e=p1,null!=(r=cmp_args()))return push_integer(r>=0?1:0);push(e)},Eval_testgt=function(){var r,e;if(e=p1,null!=(r=cmp_args()))return push_integer(r>0?1:0);push(e)},Eval_testle=function(){var r,e;if(e=p1,null!=(r=cmp_args()))return push_integer(r<=0?1:0);push(e)},Eval_testlt=function(){var r,e;if(e=p1,null!=(r=cmp_args()))return push_integer(r<0?1:0);push(e)},Eval_not=function(){var r,e;return e=p1,null==(r=isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1)))?push(e):push_integer(r?0:1)},Eval_and=function(){var r,e,t,o;for(r=cdr(o=p1),t=!1;iscons(r);)if(null==(e=isZeroLikeOrNonZeroLikeOrUndetermined(car(r))))t=!0,r=cdr(r);else if(e)r=cdr(r);else if(!e)return void push_integer(0);return t?push(o):push_integer(1)},Eval_or=function(){var r,e,t,o;for(e=cdr(o=p1),t=!1;iscons(e);)if(null==(r=isZeroLikeOrNonZeroLikeOrUndetermined(car(e))))t=!0,e=cdr(e);else{if(r)return void push_integer(1);r||(e=cdr(e))}return t?push(o):push_integer(0)},cmp_args=function(){var r;if(r=0,push(cadr(p1)),Eval(),simplify(),push(caddr(p1)),Eval(),simplify(),subtract(),(p1=pop()).k!==NUM&&p1.k!==DOUBLE&&(push(p1),yyfloat(),Eval(),p1=pop()),isZeroAtomOrTensor(p1))return 0;switch(p1.k){case NUM:r=-1===MSIGN(p1.q.a)?-1:1;break;case DOUBLE:r=p1.d<0?-1:1;break;default:r=null}return r},transform=function(r,e){var t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b;if(save(),p1=null,p4=pop(),p3=pop(),DEBUG&&console.log("         !!!!!!!!!   transform on: "+p3),saveMetaBindings(),set_binding(symbol(METAX),p4),h=tos,push_integer(1),push(p3),push(p4),polyform(),push(p4),t=tos-2,decomp(e),l=tos-t,DEBUG)for(console.log("  "+l+" decomposed elements ====== "),s=n=0,c=l;0<=c?n<c:n>c;s=0<=c?++n:--n)console.log("  decomposition element "+s+": "+stack[tos-1-s]);if(g=!1,e){if(!isNumericAtom(p3))if(f=r,DEBUG&&console.log("applying transform: "+f),DEBUG&&console.log("scanning table entry "+f),push(f),push(symbol(SYMBOL_A_UNDERSCORE)),push(symbol(METAA)),subst(),push(symbol(SYMBOL_B_UNDERSCORE)),push(symbol(METAB)),subst(),push(symbol(SYMBOL_X_UNDERSCORE)),push(symbol(METAX)),subst(),p1=pop(),p5=car(p1),DEBUG&&console.log("template expression: "+p5),p6=cadr(p1),p7=cddr(p1),f_equals_a(h,e))g=!0;else{for(DEBUG&&console.log("p3 at this point: "+p3),b=[],DEBUG&&console.log("car(p3): "+car(p3)),iscons(d=p3)&&(b.push(car(p3)),d=cdr(p3));iscons(d);)_=car(d),d=cdr(d),DEBUG&&console.log("tos before recursive transform: "+tos),push(_),push_symbol(NIL),DEBUG&&console.log("testing: "+_),DEBUG&&console.log("about to try to simplify other term: "+_),m=transform(r,e),g=g||m,b.push(pop()),DEBUG&&console.log("tried to simplify other term: "+_+" ...successful?: "+m+" ...transformed: "+b[b.length-1]);if(0!==b.length){for(i=0,p=b.length;i<p;i++)s=b[i],push(s);list(b.length),p6=pop()}}}else for(u=0,a=r.length;u<a;u++)if(o=r[u],DEBUG&&(console.log("scanning table entry "+o),(o+"").indexOf("f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))")),o&&(scan_meta(o),p1=pop(),p5=cadr(p1),p6=caddr(p1),p7=cdddr(p1),f_equals_a(h,e))){g=!0;break}return moveTos(h),g?(push(p6),Eval(),p1=pop(),g=!0):p1=e?p3:symbol(NIL),restoreMetaBindings(),push(p1),restore(),g},saveMetaBindings=function(){return push(get_binding(symbol(METAA))),push(get_binding(symbol(METAB))),push(get_binding(symbol(METAX)))},restoreMetaBindings=function(){return set_binding(symbol(METAX),pop()),set_binding(symbol(METAB),pop()),set_binding(symbol(METAA),pop())},f_equals_a=function(r,e){var t,o,s,n,p,a,i,u,l;for(t=0,o=0,t=s=a=r,i=tos;a<=i?s<i:s>i;t=a<=i?++s:--s)for(set_binding(symbol(METAA),stack[t]),DEBUG&&console.log("  binding METAA to "+get_binding(symbol(METAA))),o=n=u=r,l=tos;u<=l?n<l:n>l;o=u<=l?++n:--n){for(set_binding(symbol(METAB),stack[o]),DEBUG&&console.log("  binding METAB to "+get_binding(symbol(METAB))),p1=p7;iscons(p1)&&(push(car(p1)),Eval(),p2=pop(),!isZeroAtomOrTensor(p2));)p1=cdr(p1);if(!iscons(p1)&&(push(p3),DEBUG&&console.log("about to evaluate template expression: "+p5+" binding METAA to "+get_binding(symbol(METAA))+" and binding METAB to "+get_binding(symbol(METAB))+" and binding METAX to "+get_binding(symbol(METAX))),push(p5),e&&(p=expanding,expanding=!1),Eval(),e&&(expanding=p),DEBUG&&console.log("  comparing "+stack[tos-1]+" to: "+stack[tos-2]),subtract(),p1=pop(),isZeroAtomOrTensor(p1)))return DEBUG&&(console.log("binding METAA to "+get_binding(symbol(METAA))),console.log("binding METAB to "+get_binding(symbol(METAB))),console.log("binding METAX to "+get_binding(symbol(METAX))),console.log("comparing "+p3+" to: "+p5)),1}return 0},Eval_transpose=function(){return push(cadr(p1)),Eval(),cddr(p1)===symbol(NIL)?(push_integer(1),push_integer(2)):(push(caddr(p1)),Eval(),push(cadddr(p1)),Eval()),transpose()},transpose=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M;for(p=0,u=0,l=0,c=0,_=0,M=0,t=[],o=[],p=d=0,x=MAXDIM;0<=x?d<x:d>x;p=0<=x?++d:--d)t[p]=0,o[p]=0;if(save(),p3=pop(),p2=pop(),p1=pop(),isNumericAtom(p1))return push(p1),void restore();if((isplusone(p2)&&isplustwo(p3)||isplusone(p3)&&isplustwo(p2))&&isidentitymatrix(p1))return push(p1),void restore();if(istranspose(p1)&&(a=car(cdr(cdr(p1))),i=car(cdr(cdr(cdr(p1)))),equal(a,p3)&&equal(i,p2)||equal(i,p3)&&equal(a,p2)||equal(a,symbol(NIL))&&equal(i,symbol(NIL))&&(isplusone(p3)&&isplustwo(p2)||isplusone(p2)&&isplustwo(p3))))return push(car(cdr(p1))),void restore();if(expanding&&isadd(p1)){for(p1=cdr(p1),push(zero);iscons(p1);)push(car(p1)),push(p2),push(p3),transpose(),add(),p1=cdr(p1);restore()}else if(expanding&&ismultiply(p1)){for(p1=cdr(p1),push(one);iscons(p1);)push(car(p1)),push(p2),push(p3),transpose(),multiply(),p1=cdr(p1);restore()}else{if(!expanding||!isinnerordot(p1)){if(!istensor(p1))return isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(TRANSPOSE),push(p1),isplusone(p2)&&isplustwo(p3)||isplusone(p3)&&isplustwo(p2)?list(2):(push(p2),push(p3),list(4)),void restore());if(h=p1.tensor.ndim,g=p1.tensor.nelem,1===h)return push(p1),void restore();for(push(p2),c=pop_integer(),push(p3),_=pop_integer(),(c<1||c>h||_<1||_>h)&&stop("transpose: index out of range"),c--,_--,(p2=alloc_tensor(g)).tensor.ndim=h,p=f=0,A=h;0<=A?f<A:f>A;p=0<=A?++f:--f)p2.tensor.dim[p]=p1.tensor.dim[p];for(p2.tensor.dim[c]=p1.tensor.dim[_],p2.tensor.dim[_]=p1.tensor.dim[c],r=p1.tensor.elem,s=p2.tensor.elem,p=b=0,T=h;0<=T?b<T:b>T;p=0<=T?++b:--b)t[p]=0,o[p]=p1.tensor.dim[p];for(p=y=0,I=g;0<=I?y<I:y>I;p=0<=I?++y:--y){for(M=t[c],t[c]=t[_],t[_]=M,M=o[c],o[c]=o[_],o[_]=M,l=0,u=v=0,O=h;0<=O?v<O:v>O;u=0<=O?++v:--v)l=l*o[u]+t[u];for(M=t[c],t[c]=t[_],t[_]=M,M=o[c],o[c]=o[_],o[_]=M,s[l]=r[p],u=N=S=h-1;(S<=0?N<=0:N>=0)&&!(++t[u]<o[u]);u=S<=0?++N:--N)t[u]=0}return push(p2),restore()}for(p1=cdr(p1),e=[];iscons(p1);)e.push([car(p1),p2,p3]),p1=cdr(p1);for(n=m=E=e.length-1;E<=0?m<=0:m>=0;n=E<=0?++m:--m)push(e[n][0]),push(e[n][1]),push(e[n][2]),transpose(),n!==e.length-1&&inner();restore()}},Eval_user_function=function(){var r,e;if(DEBUG&&console.log("Eval_user_function evaluating: "+car(p1)),car(p1)!==symbol(SYMBOL_D)||get_binding(symbol(SYMBOL_D))!==symbol(SYMBOL_D)){if(push(car(p1)),Eval(),r=pop(),isNumericAtom(r)?stop("expected function invocation, found multiplication instead. Use '*' symbol explicitly for multiplication."):istensor(r)?stop("expected function invocation, found tensor product instead. Use 'dot/inner' explicitly."):isstr(r)&&stop("expected function, found string instead."),p3=car(cdr(r)),p4=car(cdr(cdr(r))),p5=cdr(p1),car(r)===symbol(FUNCTION)&&r!==car(p1)){for(p1=p4,p2=p5,e=tos;iscons(p1)&&iscons(p2);)push(car(p1)),push(car(p2)),p1=cdr(p1),p2=cdr(p2);return list(tos-e),p6=pop(),push(p3),iscons(p6)&&(push(p6),rewrite_args()),Eval()}for(e=tos,push(r),p1=p5;iscons(p1);)push(car(p1)),Eval(),p1=cdr(p1);list(tos-e)}else Eval_derivative()},rewrite_args=function(){var r,e;if(e=0,save(),p2=pop(),p1=pop(),istensor(p1))return e=rewrite_args_tensor(),restore(),e;if(iscons(p1)){for(r=tos,car(p1)===car(p2)?(push_symbol(EVAL),push(car(cdr(p2))),list(2)):push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),e+=rewrite_args(),p1=cdr(p1);return list(tos-r),restore(),e}if(!issymbol(p1))return push(p1),restore(),0;for(p3=p2;iscons(p3);){if(p1===car(p3))return push(cadr(p3)),restore(),1;p3=cddr(p3)}return p3=get_binding(p1),push(p3),p1!==p3&&(push(p2),0===(e=rewrite_args())&&(pop(),push(p1))),restore(),e},rewrite_args_tensor=function(){var r,e,t,o;for(t=0,r=0,push(p1),copy_tensor(),r=e=0,o=(p1=pop()).tensor.nelem;0<=o?e<o:e>o;r=0<=o?++e:--e)push(p1.tensor.elem[r]),push(p2),t+=rewrite_args(),p1.tensor.elem[r]=pop();return check_tensor_dimensions(p1),push(p1),t},Eval_zero=function(){var r,e,t,o,s,n,p,a;for(r=0,e=[],o=0,n=0,r=t=0,p=MAXDIM;0<=p?t<p:t>p;r=0<=p?++t:--t)e[r]=0;for(o=1,n=0,p2=cdr(p1);iscons(p2);){if(push(car(p2)),Eval(),(r=pop_integer())<1||isNaN(r))return void push(zero);o*=r,e[n++]=r,p2=cdr(p2)}if(0!==n){for((p1=alloc_tensor(o)).tensor.ndim=n,r=s=0,a=n;0<=a?s<a:s>a;r=0<=a?++s:--s)p1.tensor.dim[r]=e[r];return push(p1)}push(zero)},allocatedId=0,alloc_tensor=function(r){var e,t,o,s;for(e=0,(o=new U).k=TENSOR,o.tensor=new tensor,o.tensor.nelem=r,e=t=0,s=r;0<=s?t<s:t>s;e=0<=s?++t:--t)o.tensor.elem[e]=zero;return o.tensor.allocatedId=allocatedId,allocatedId++,check_tensor_dimensions(o),o},Find=function(r,e){var t,o,s;if(t=0,equal(r,e))return 1;if(istensor(r)){for(t=o=0,s=r.tensor.nelem;0<=s?o<s:o>s;t=0<=s?++o:--o)if(Find(r.tensor.elem[t],e))return 1;return 0}for(;iscons(r);){if(Find(car(r),e))return 1;r=cdr(r)}return 0},findPossibleClockForm=function(r){var e,t,o;if(e=0,isimaginaryunit(r))return 0;if(car(r)===symbol(POWER)&&!isinteger(caddr(p1))&&Find(cadr(r),imaginaryunit))return 1;if(car(r)===symbol(POWER)&&equaln(cadr(r),-1)&&!isinteger(caddr(p1)))return 1;if(istensor(r)){for(e=t=0,o=r.tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)if(findPossibleClockForm(r.tensor.elem[e]))return 1;return 0}for(;iscons(r);){if(findPossibleClockForm(car(r)))return 1;r=cdr(r)}return 0},findPossibleExponentialForm=function(r){var e,t,o;if(e=0,car(r)===symbol(POWER)&&cadr(r)===symbol(E))return Find(caddr(r),imaginaryunit);if(istensor(r)){for(e=t=0,o=r.tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)if(findPossibleExponentialForm(r.tensor.elem[e]))return 1;return 0}for(;iscons(r);){if(findPossibleExponentialForm(car(r)))return 1;r=cdr(r)}return 0},$.Find=Find,init=function(){var r,e,t;if(r=0,flag=0,reset_after_error(),chainOfUserSymbolsNotFunctionsBeingEvaluated=[],!flag){for(flag=1,r=e=0,t=NSYM;0<=t?e<t:e>t;r=0<=t?++e:--e)symtab[r]=new U,symtab[r].k=SYM,binding[r]=symtab[r],isSymbolReclaimable[r]=!1;return defn()}},defn_str=['version="'+version+'"',"e=exp(1)","i=sqrt(-1)","autoexpand=1","assumeRealVariables=1","trange=[-pi,pi]","xrange=[-10,10]","yrange=[-10,10]","last=0","trace=0","forceFixedPrintout=1","maxFixedPrintoutDigits=6","printLeaveEAlone=1","printLeaveXAlone=0","cross(u,v)=[u[2]*v[3]-u[3]*v[2],u[3]*v[1]-u[1]*v[3],u[1]*v[2]-u[2]*v[1]]","curl(v)=[d(v[3],y)-d(v[2],z),d(v[1],z)-d(v[3],x),d(v[2],x)-d(v[1],y)]","div(v)=d(v[1],x)+d(v[2],y)+d(v[3],z)","ln(x)=log(x)"],defn=function(){var r,e,t,o,s;for(p0=symbol(NIL),p1=symbol(NIL),p2=symbol(NIL),p3=symbol(NIL),p4=symbol(NIL),p5=symbol(NIL),p6=symbol(NIL),p7=symbol(NIL),p8=symbol(NIL),p9=symbol(NIL),std_symbol("abs",ABS),std_symbol("add",ADD),std_symbol("adj",ADJ),std_symbol("and",AND),std_symbol("approxratio",APPROXRATIO),std_symbol("arccos",ARCCOS),std_symbol("arccosh",ARCCOSH),std_symbol("arcsin",ARCSIN),std_symbol("arcsinh",ARCSINH),std_symbol("arctan",ARCTAN),std_symbol("arctanh",ARCTANH),std_symbol("arg",ARG),std_symbol("atomize",ATOMIZE),std_symbol("besselj",BESSELJ),std_symbol("bessely",BESSELY),std_symbol("binding",BINDING),std_symbol("binomial",BINOMIAL),std_symbol("ceiling",CEILING),std_symbol("check",CHECK),std_symbol("choose",CHOOSE),std_symbol("circexp",CIRCEXP),std_symbol("clear",CLEAR),std_symbol("clearall",CLEARALL),std_symbol("clearpatterns",CLEARPATTERNS),std_symbol("clock",CLOCK),std_symbol("coeff",COEFF),std_symbol("cofactor",COFACTOR),std_symbol("condense",CONDENSE),std_symbol("conj",CONJ),std_symbol("contract",CONTRACT),std_symbol("cos",COS),std_symbol("cosh",COSH),std_symbol("decomp",DECOMP),std_symbol("defint",DEFINT),std_symbol("deg",DEGREE),std_symbol("denominator",DENOMINATOR),std_symbol("det",DET),std_symbol("derivative",DERIVATIVE),std_symbol("dim",DIM),std_symbol("dirac",DIRAC),std_symbol("divisors",DIVISORS),std_symbol("do",DO),std_symbol("dot",DOT),std_symbol("draw",DRAW),std_symbol("dsolve",DSOLVE),std_symbol("erf",ERF),std_symbol("erfc",ERFC),std_symbol("eigen",EIGEN),std_symbol("eigenval",EIGENVAL),std_symbol("eigenvec",EIGENVEC),std_symbol("eval",EVAL),std_symbol("exp",EXP),std_symbol("expand",EXPAND),std_symbol("expcos",EXPCOS),std_symbol("expsin",EXPSIN),std_symbol("factor",FACTOR),std_symbol("factorial",FACTORIAL),std_symbol("factorpoly",FACTORPOLY),std_symbol("filter",FILTER),std_symbol("float",FLOATF),std_symbol("floor",FLOOR),std_symbol("for",FOR),std_symbol("function",FUNCTION),std_symbol("Gamma",GAMMA),std_symbol("gcd",GCD),std_symbol("hermite",HERMITE),std_symbol("hilbert",HILBERT),std_symbol("imag",IMAG),std_symbol("component",INDEX),std_symbol("inner",INNER),std_symbol("integral",INTEGRAL),std_symbol("inv",INV),std_symbol("invg",INVG),std_symbol("isinteger",ISINTEGER),std_symbol("isprime",ISPRIME),std_symbol("laguerre",LAGUERRE),std_symbol("lcm",LCM),std_symbol("leading",LEADING),std_symbol("legendre",LEGENDRE),std_symbol("log",LOG),std_symbol("lookup",LOOKUP),std_symbol("mod",MOD),std_symbol("multiply",MULTIPLY),std_symbol("not",NOT),std_symbol("nroots",NROOTS),std_symbol("number",NUMBER),std_symbol("numerator",NUMERATOR),std_symbol("operator",OPERATOR),std_symbol("or",OR),std_symbol("outer",OUTER),std_symbol("pattern",PATTERN),std_symbol("patternsinfo",PATTERNSINFO),std_symbol("polar",POLAR),std_symbol("power",POWER),std_symbol("prime",PRIME),std_symbol("print",PRINT),std_symbol("print2dascii",PRINT2DASCII),std_symbol("printcomputer",PRINTFULL),std_symbol("printlatex",PRINTLATEX),std_symbol("printlist",PRINTLIST),std_symbol("printhuman",PRINTPLAIN),std_symbol("printLeaveEAlone",PRINT_LEAVE_E_ALONE),std_symbol("printLeaveXAlone",PRINT_LEAVE_X_ALONE),std_symbol("product",PRODUCT),std_symbol("quote",QUOTE),std_symbol("quotient",QUOTIENT),std_symbol("rank",RANK),std_symbol("rationalize",RATIONALIZE),std_symbol("real",REAL),std_symbol("rect",YYRECT),std_symbol("roots",ROOTS),std_symbol("round",ROUND),std_symbol("equals",SETQ),std_symbol("sgn",SGN),std_symbol("silentpattern",SILENTPATTERN),std_symbol("simplify",SIMPLIFY),std_symbol("sin",SIN),std_symbol("sinh",SINH),std_symbol("shape",SHAPE),std_symbol("sqrt",SQRT),std_symbol("stop",STOP),std_symbol("subst",SUBST),std_symbol("sum",SUM),std_symbol("symbolsinfo",SYMBOLSINFO),std_symbol("tan",TAN),std_symbol("tanh",TANH),std_symbol("taylor",TAYLOR),std_symbol("test",TEST),std_symbol("testeq",TESTEQ),std_symbol("testge",TESTGE),std_symbol("testgt",TESTGT),std_symbol("testle",TESTLE),std_symbol("testlt",TESTLT),std_symbol("transpose",TRANSPOSE),std_symbol("unit",UNIT),std_symbol("zero",ZERO),std_symbol("nil",NIL),std_symbol("autoexpand",AUTOEXPAND),std_symbol("bake",BAKE),std_symbol("assumeRealVariables",ASSUME_REAL_VARIABLES),std_symbol("last",LAST),std_symbol("lastprint",LAST_PRINT),std_symbol("last2dasciiprint",LAST_2DASCII_PRINT),std_symbol("lastfullprint",LAST_FULL_PRINT),std_symbol("lastlatexprint",LAST_LATEX_PRINT),std_symbol("lastlistprint",LAST_LIST_PRINT),std_symbol("lastplainprint",LAST_PLAIN_PRINT),std_symbol("trace",TRACE),std_symbol("forceFixedPrintout",FORCE_FIXED_PRINTOUT),std_symbol("maxFixedPrintoutDigits",MAX_FIXED_PRINTOUT_DIGITS),std_symbol("~",YYE),std_symbol("$DRAWX",DRAWX),std_symbol("$METAA",METAA),std_symbol("$METAB",METAB),std_symbol("$METAX",METAX),std_symbol("$SECRETX",SECRETX),std_symbol("version",VERSION),std_symbol("pi",PI),std_symbol("a",SYMBOL_A),std_symbol("b",SYMBOL_B),std_symbol("c",SYMBOL_C),std_symbol("d",SYMBOL_D),std_symbol("i",SYMBOL_I),std_symbol("j",SYMBOL_J),std_symbol("n",SYMBOL_N),std_symbol("r",SYMBOL_R),std_symbol("s",SYMBOL_S),std_symbol("t",SYMBOL_T),std_symbol("x",SYMBOL_X),std_symbol("y",SYMBOL_Y),std_symbol("z",SYMBOL_Z),std_symbol("I",SYMBOL_IDENTITY_MATRIX),std_symbol("a_",SYMBOL_A_UNDERSCORE),std_symbol("b_",SYMBOL_B_UNDERSCORE),std_symbol("x_",SYMBOL_X_UNDERSCORE),std_symbol("$C1",C1),std_symbol("$C2",C2),std_symbol("$C3",C3),std_symbol("$C4",C4),std_symbol("$C5",C5),std_symbol("$C6",C6),defineSomeHandyConstants(),o=codeGen,codeGen=!1,e=t=0,s=defn_str.length;0<=s?t<s:t>s;e=0<=s?++t:--t)r=defn_str[e],scan(r),DEBUG&&(console.log("... evaling "+r),console.log("top of stack:"),console.log(print_list(stack[tos-1]))),Eval(),pop();return codeGen=o},defineSomeHandyConstants=function(){return push_integer(0),zero=pop(),push_integer(1),one=pop(),push_double(1),one_as_double=pop(),push_symbol(POWER),DEBUG&&console.log(print_list(stack[tos-1])),push_integer(-1),DEBUG&&console.log(print_list(stack[tos-1])),push_rational(1,2),DEBUG&&console.log(print_list(stack[tos-1])),list(3),DEBUG&&console.log(print_list(stack[tos-1])),imaginaryunit=pop()},mcmp=function(r,e){return r.compare(e)},mcmpint=function(r,e){var t;return t=bigInt(e),mcmp(r,t)},strcmp=function(r,e){return r===e?0:r>e?1:-1},doubleToReasonableString=function(r){var e,t;return codeGen?""+r:(isZeroAtomOrTensor(get_binding(symbol(FORCE_FIXED_PRINTOUT)))?(t=""+r,t=printMode===PRINTMODE_LATEX?/\d*\.\d*e.*/gm.test(t)?t.replace(/e(.*)/gm,"\\mathrm{e}{$1}"):t.replace(/(\d+)e(.*)/gm,"$1.0\\mathrm{e}{$2}"):/\d*\.\d*e.*/gm.test(t)?t.replace(/e(.*)/gm,"*10^($1)"):t.replace(/(\d+)e(.*)/gm,"$1.0*10^($2)")):(push(get_binding(symbol(MAX_FIXED_PRINTOUT_DIGITS))),e=pop_integer(),-1===(t=(t=(t=""+r.toFixed(e)).replace(/(\.\d*?[1-9])0+$/gm,"$1")).replace(/\.0+$/gm,"")).indexOf(".")&&(t+=".0"),parseFloat(t)!==r&&(t=r.toFixed(e)+"...")),t)},clear_term=function(){},isspace=function(r){return null!=r&&(" "===r||"\t"===r||"\n"===r||"\v"===r||"\f"===r||"\r"===r)},isdigit=function(r){return null!=r&&/^\d+$/.test(r)},isalpha=function(r){return null!=r&&-1===r.search(/[^A-Za-z]/)},isalphaOrUnderscore=function(r){return null!=r&&-1===r.search(/[^A-Za-z_]/)},isunderscore=function(r){return null!=r&&-1===r.search(/_/)},isalnumorunderscore=function(r){return null!=r&&(isalphaOrUnderscore(r)||isdigit(r))},count=function(r){var e;if(iscons(r))for(e=0;iscons(r);)e+=count(car(r))+1,r=cdr(r);else e=1;return e},countOccurrencesOfSymbol=function(r,e){var t;if(t=0,iscons(e))for(;iscons(e);)t+=countOccurrencesOfSymbol(r,car(e)),e=cdr(e);else equal(r,e)&&(t=1);return t},countsize=function(r){var e,t,o,s;if(o=0,istensor(r))for(e=t=0,s=r.tensor.nelem;0<=s?t<s:t>s;e=0<=s?++t:--t)o+=r.tensor.elem[e];else if(iscons(r))for(;iscons(r);)o+=count(car(r))+1,r=cdr(r);else o=1;return o},stop=function(r){var e;throw errorMessage+="Stop: ",e=errorMessage+=r,errorMessage="",moveTos(0),new Error(e)},findDependenciesInScript=function(r,e){var t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M,R,L,k,q,D,P,U,w,B,G,C,F,Y,X,W,z,Z,V,$;for(DEBUG&&console.log("stringToBeParsed: "+r),X=(new Date).getTime(),codeGen=!0,symbolsDependencies={},symbolsHavingReassignments=[],symbolsInExpressionsWithoutAssignments=[],patternHasBeenFound=!1,d=0,T=0,n={affectsVariables:[],affectedBy:[]},C=r;;){try{errorMessage="",check_stack(),DEBUG&&console.log("findDependenciesInScript: scanning"),T=scan(r.substring(d)),DEBUG&&console.log("scanned"),pop(),check_stack()}catch(r){a=r,PRINTOUTRESULT&&console.log(a),errorMessage=a+"",reset_after_error();break}if(0===T)break;d+=T}for(_ in Y="",DEBUG&&console.log("all local dependencies ----------------"),Y+="All local dependencies: ",symbolsDependencies){for(V=symbolsDependencies[_],DEBUG&&console.log("variable "+_+" depends on: "),n.affectsVariables.push(_),Y+=" variable "+_+" depends on: ",m=0,f=V.length;m<f;m++)l=V[m],DEBUG&&console.log("    "+l),"'"!==l[0]&&n.affectedBy.push(l),Y+=l+", ";Y+="; "}for(Y+=". ",DEBUG&&console.log("Symbols with reassignments ----------------"),Y+="Symbols with reassignments: ",A=0,h=symbolsHavingReassignments.length;A<h;A++)_=symbolsHavingReassignments[A],-1===n.affectedBy.indexOf(_)&&(n.affectedBy.push(_),Y+=_+", ");for(Y+=". ",DEBUG&&console.log("Symbols in expressions without assignments ----------------"),Y+="Symbols in expressions without assignments: ",I=0,g=symbolsInExpressionsWithoutAssignments.length;I<g;I++)_=symbolsInExpressionsWithoutAssignments[I],-1===n.affectedBy.indexOf(_)&&(n.affectedBy.push(_),Y+=_+", ");if(Y+=". ",n.affectedBy.push("PATTERN_DEPENDENCY"),patternHasBeenFound&&(n.affectsVariables.push("PATTERN_DEPENDENCY"),Y+=" - PATTERN_DEPENDENCY inserted - "),DEBUG&&console.log("All dependencies recursively ----------------"),Y+="All dependencies recursively: ",G=["",""],u="",q="",""===errorMessage&&!e){try{G=run(r,!0)}catch(r){a=r,PRINTOUTRESULT&&console.log(a),errorMessage=a+"",init()}if(""===errorMessage)for(_ in symbolsDependencies){for(codeGen=!0,DEBUG&&console.log("  variable "+_+" is: "+get_binding(usr_symbol(_)).toString()),codeGen=!1,DEBUG&&console.log("  variable "+_+" depends on: "),Y+=" variable "+_+" depends on: ",recursiveDependencies(_,D=[],[],$=[],[],o=[]),S=0,b=$.length;S<b;S++)l=$[S],DEBUG&&console.log("    --\x3e cycle through "+l);for(L=0,y=D.length;L<y;L++)l=D[L],DEBUG&&console.log("    "+l),Y+=l+", ";for(Y+="; ",k=0,v=o.length;k<v;k++)Y+=" "+(l=o[k])+", ";for(DEBUG&&console.log("  code generation:"+_+" is: "+get_binding(usr_symbol(_)).toString()),push(get_binding(usr_symbol(_))),U=[],w=[],B=0,x=D.length;B<x;B++)"'"===(p=D[B])[0]&&(s=p.substring(1),M=usr_symbol(s),O=usr_symbol("AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE"+s),U.push(M),w.push(O),push(M),push(O),subst(),DEBUG&&console.log("after substitution: "+stack[tos-1]));try{simplifyForCodeGeneration()}catch(r){a=r,PRINTOUTRESULT&&console.log(a),errorMessage=a+"",init()}for(c=F=0,P=U.length;0<=P?F<P:F>P;c=0<=P?++F:--F)push(w[c]),push(U[c]),subst();if(clearRenamedVariablesToAvoidBindingToExternalScope(),""===errorMessage){if(W=pop(),collectUserSymbols(W,Z=[]),codeGen=!0,i=W.toString(),codeGen=!1,N=printMode,printMode=PRINTMODE_LATEX,t=W.toString(),printMode=N,-1!==$.indexOf(_))u+="// "+_+" is part of a cyclic dependency, no code generated.",q+="#"+_+" is part of a cyclic dependency, no code generated.";else if(0!==(Z=(Z=Z.filter((function(r){return-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(r+"")}))).filter((function(r){return-1!==D.indexOf(r+"")||-1!==D.indexOf("'"+r)}))).length){for(R="(",z=0,E=Z.length;z<E;z++)(l=Z[z]).printname!==_&&(R+=l.printname+", ");R=R.replace(/, $/gm,""),u+=_+" = function "+(R+=")")+" { return ( "+i+" ); }",q+=_+R+" = "+t}else u+=_+" = "+i+";",q+=_+" = "+t;u+="\n",q+="\n",DEBUG&&console.log("    "+u)}}}return u=u.replace(/\n$/gm,""),q=q.replace(/\n$/gm,""),symbolsDependencies={},symbolsHavingReassignments=[],patternHasBeenFound=!1,symbolsInExpressionsWithoutAssignments=[],DEBUG&&console.log("testable string: "+Y),TIMING_DEBUGS&&console.log("findDependenciesInScript time for: "+C+" : "+((new Date).getTime()-X)+"ms"),[Y,G[0],u,q,G[1],errorMessage,n]},recursiveDependencies=function(r,e,t,o,s,n){var p,a,i,u,l,c,d,_;if(t.push(r),null!=symbolsDependencies[s[s.length-1]]&&-1!==symbolsDependencies[s[s.length-1]].indexOf("'"+r))return DEBUG&&console.log("can't keep following the chain of "+r+" because it's actually a variable bound to a parameter"),-1===e.indexOf("'"+r)&&-1===e.indexOf(r)&&e.push(r),e;if(s.push(r),null==symbolsDependencies[r])return-1===e.indexOf(r)&&e.push(r),e;for(u=0,l=(_=symbolsDependencies[r]).length;u<l;u++)if(a=_[u],-1!==s.indexOf(a)){for(DEBUG&&console.log("  found cycle:"),p="",d=0,c=s.length;d<c;d++)i=s[d],-1===o.indexOf(i)&&o.push(i),DEBUG&&console.log(i+" --\x3e "),p+=i+" --\x3e ";DEBUG&&console.log(" ... then "+a+" again"),p+=" ... then "+a+" again",n.push(p),-1===o.indexOf(a)&&o.push(a)}else recursiveDependencies(a,e,t,o,s,n),s.pop();return e},inited=!1,latexErrorSign="\\rlap{\\large\\color{red}\\bigtriangleup}{\\ \\ \\tiny\\color{red}!}",turnErrorMessageToLatex=function(r){return"$$\\text{"+(r=(r=(r=(r=(r=(r=(r=r.replace(/\n/g,"")).replace(/_/g,"} \\_ \\text{")).replace(new RegExp(String.fromCharCode(transpose_unicode),"g"),"}{}^{T}\\text{")).replace(new RegExp(String.fromCharCode(dotprod_unicode),"g"),"}\\cdot \\text{")).replace("Stop:","}  \\quad \\text{Stop:")).replace("->","}  \\rightarrow \\text{")).replace("?","}\\enspace "+latexErrorSign+" \\enspace  \\text{")).replace(/\n/g,"")+"}$$"},normaliseDots=function(r){return(r=(r=(r=(r=r.replace(new RegExp(String.fromCharCode(8901),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(8226),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(12539),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(55296),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(65381),"g"),String.fromCharCode(dotprod_unicode))},TIMING_DEBUGS=!1,run=function(r,e=!1){var t,o,s,n,p,a,i,u,l,c;if(l=(new Date).getTime(),"selftest"!==(r=normaliseDots(r))){for(inited||(inited=!0,init()),i=0,a=0,o="",t="";;){try{errorMessage="",check_stack(),i=scan(r.substring(a)),p1=pop(),check_stack()}catch(r){p=r,PRINTOUTRESULT&&console.log(p),o+=p.message,e&&(t+=turnErrorMessageToLatex(p.message)),reset_after_error();break}if(0===i)break;a+=i,push(p1);try{stringsEmittedByUserPrintouts="",top_level_eval(),p2=pop(),check_stack(),isstr(p2)&&(DEBUG&&console.log(p2.str),DEBUG&&console.log("\n")),p2===symbol(NIL)?(n=stringsEmittedByUserPrintouts,e&&(s="$$"+stringsEmittedByUserPrintouts+"$$")):(n=print_expr(p2),n+="\n",e&&(s="$$"+collectLatexStringFromReturnValue(p2)+"$$",DEBUG&&console.log("collectedLatexResult: "+s))),o+=n,e&&(t+=s),PRINTOUTRESULT&&(DEBUG&&console.log("printline"),DEBUG&&console.log(n)),PRINTOUTRESULT&&(DEBUG&&console.log("display:"),print2dascii(p2)),e&&(t+="\n")}catch(r){n=(p=r).message,e&&(s=turnErrorMessageToLatex(p.message)),PRINTOUTRESULT&&console.log(n),o+=n,""!==n&&(o+="\n"),e&&(t+=s,t+="\n"),init()}}return"\n"===o[o.length-1]&&(o=o.substring(0,o.length-1)),e&&"\n"===t[t.length-1]&&(t=t.substring(0,t.length-1)),e?(DEBUG&&console.log("allReturnedLatexStrings: "+t),u=[o,t]):u=o,TIMING_DEBUGS&&(c="run time on: "+r+" : "+((new Date).getTime()-l)+"ms",console.log(c)),o="",t="",u}selftest()},check_stack=function(){if(0!==tos&&stop("stack error"),frame!==TOS&&stop("frame error"),0!==chainOfUserSymbolsNotFunctionsBeingEvaluated.length&&stop("symbols evaluation still ongoing?"),0!==evaluatingAsFloats&&stop("numeric evaluation still ongoing?"),0!==evaluatingPolar)return stop("evaluation of polar still ongoing?")},top_level_eval=function(){var r,e,t;if(DEBUG&&console.log("#### top level eval"),trigmode=0,t=symbol(AUTOEXPAND),expanding=isZeroAtomOrTensor(get_binding(t))?0:1,e=top(),Eval(),(r=top())!==symbol(NIL)&&(set_binding(symbol(LAST),r),isZeroAtomOrTensor(get_binding(symbol(BAKE)))||(bake(),r=top()),e!==symbol(SYMBOL_I)&&e!==symbol(SYMBOL_J)||!isimaginaryunit(r))){if(isimaginaryunit(get_binding(symbol(SYMBOL_J))))return push(imaginaryunit),push_symbol(SYMBOL_J),subst();if(isimaginaryunit(get_binding(symbol(SYMBOL_I))))return push(imaginaryunit),push_symbol(SYMBOL_I),subst()}},check_esc_flag=function(){if(esc_flag)return stop("esc key")},clearAlgebraEnvironment=function(){return do_clearall()},computeDependenciesFromAlgebra=function(r){var e,t,o;if(DEBUG&&console.log("computeDependenciesFromAlgebra!!!"),called_from_Algebra_block=!0,r=normaliseDots(r),DEBUG){for(console.log("computeDependenciesFromAlgebra: patterns in the list --------------- "),o=0,t=userSimplificationsInListForm.length;o<t;o++)e=userSimplificationsInListForm[o],console.log(car(e)+","+cdr(e)+")");console.log("...end of list --------------- ")}return called_from_Algebra_block=!1,findDependenciesInScript(r,!0)[6]},computeResultsAndJavaScriptFromAlgebra=function(r){var e,t,o,s,n,p,a,i,u,l,c;if(called_from_Algebra_block=!0,c=(new Date).getTime(),TIMING_DEBUGS&&console.log(" --------- computeResultsAndJavaScriptFromAlgebra input: "+r+" at: "+new Date),u=r=normaliseDots(r),DEBUG){for(console.log("computeResultsAndJavaScriptFromAlgebra: patterns in the list --------------- "),s=0,p=userSimplificationsInListForm.length;s<p;s++)o=userSimplificationsInListForm[s],console.log(car(o)+","+cdr(o)+")");console.log("...end of list --------------- ")}return[l,i,e,a,n,errorMessage,t]=findDependenciesInScript(r),called_from_Algebra_block=!1,""===a&&""===errorMessage||(i+="\n"+a,""!==errorMessage&&(i+="\n"+errorMessage),i=i.replace(/\n/g,"\n\n"),n+="\n$$"+a+"$$",""!==errorMessage&&(n+=turnErrorMessageToLatex(errorMessage)),n=n.replace(/\n/g,"\n\n")),n=(n=n.replace(/\n*/,"")).replace(/\$\$\$\$\n*/g,""),e=(e=e.replace(/Math\./g,"")).replace(/\n/g,"\n\n"),TIMING_DEBUGS&&console.log("computeResultsAndJavaScriptFromAlgebra time (total time from notebook and back) for: "+u+" : "+((new Date).getTime()-c)+"ms"),{code:e,result:n,latexResult:n,dependencyInfo:t}},(null!==exports?exports:this).run=run,(null!==exports?exports:this).findDependenciesInScript=findDependenciesInScript,(null!==exports?exports:this).computeDependenciesFromAlgebra=computeDependenciesFromAlgebra,(null!==exports?exports:this).computeResultsAndJavaScriptFromAlgebra=computeResultsAndJavaScriptFromAlgebra,(null!==exports?exports:this).clearAlgebraEnvironment=clearAlgebraEnvironment,tos=0,nil_symbols=0,push=function(r){return r.isZero,r===symbol(NIL)&&(nil_symbols++,DEBUG&&console.log("pushing symbol(NIL) #"+nil_symbols)),tos>=frame&&stop("stack overflow"),stack[tos++]=r},moveTos=function(r){if(tos<=r)tos=r;else for(;tos>r;)stack[tos]=null,tos--},top=function(){return stack[tos-1]},pop=function(){var r;return 0===tos&&stop("stack underflow"),stack[tos-1],r=stack[--tos],stack[tos]=null,r},push_frame=function(r){var e,t,o,s;for(e=0,(frame-=r)<tos&&stop("frame overflow, circular reference?"),s=[],e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)s.push(stack[frame+e]=symbol(NIL));return s},pop_frame=function(r){if((frame+=r)>TOS)return stop("frame underflow")},save=function(){return(frame-=10)<tos&&stop("frame overflow, circular reference?"),stack[frame+0]=p0,stack[frame+1]=p1,stack[frame+2]=p2,stack[frame+3]=p3,stack[frame+4]=p4,stack[frame+5]=p5,stack[frame+6]=p6,stack[frame+7]=p7,stack[frame+8]=p8,stack[frame+9]=p9},restore=function(){return frame>TOS-10&&stop("frame underflow"),p0=stack[frame+0],p1=stack[frame+1],p2=stack[frame+2],p3=stack[frame+3],p4=stack[frame+4],p5=stack[frame+5],p6=stack[frame+6],p7=stack[frame+7],p8=stack[frame+8],p9=stack[frame+9],frame+=10},swap=function(){var r,e;return r=pop(),e=pop(),push(r),push(e)},dupl=function(){var r;return r=pop(),push(r),push(r)},$.dupl=dupl,$.swap=swap,$.restore=restore,$.save=save,$.push=push,$.pop=pop,Eval_symbolsinfo=function(){var r;return""!==(r=symbolsinfo())?new_string(r):push_symbol(NIL)},symbolsinfo=function(){var r,e,t,o,s,n,p;for(n="",e=t=o=NIL+1,s=symtab.length;o<=s?t<s:t>s;e=o<=s?++t:--t)if(""!==symtab[e].printname)p=symtab[e]+"",r=(binding[e]+"").substring(0,4),n+="symbol: "+p+" size: "+countsize(binding[e])+" value: "+r+"...\n";else if(!1===isSymbolReclaimable[e])break;return n},std_symbol=function(r,e,t){var o;return(o=symtab[e]).printname=r,o.latexPrint=null!=t?t:r},usr_symbol=function(r){var e,t,o;for(e=0,e=t=0,o=NSYM;0<=o?t<o:t>o;e=0<=o?++t:--t){if(r===symtab[e].printname)return symtab[e];if(""===symtab[e].printname)break}return e===NSYM&&stop("symbol table overflow"),symtab[e]=new U,symtab[e].k=SYM,symtab[e].printname=r,binding[e]=symtab[e],isSymbolReclaimable[e]=!1,symtab[e]},get_printname=function(r){return r.k!==SYM&&stop("symbol error"),r.printname},set_binding=function(r,e){var t;return r.k!==SYM&&stop("symbol error"),t=symtab.indexOf(r),-1!==symtab.indexOf(r,t+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> set_binding lookup "+t),isSymbolReclaimable[t]=!1,binding[t]=e},get_binding=function(r){var e;return r.k!==SYM&&stop("symbol error"),e=symtab.indexOf(r),-1!==symtab.indexOf(r,e+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> get_binding lookup "+e),binding[e]},is_usr_symbol=function(r){var e;return r.k===SYM&&(e=symnum(r))>PI&&e!==SYMBOL_I&&e!==SYMBOL_IDENTITY_MATRIX},lookupsTotal=0,symnum=function(r){var e;return lookupsTotal++,r.k!==SYM&&stop("symbol error"),e=symtab.indexOf(r),-1!==symtab.indexOf(r,e+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> symnum lookup "+e+" lookup # "+lookupsTotal),e},push_symbol=function(r){return push(symtab[r])},clear_symbols=function(){var r,e,t,o,s;for(s=[],r=e=t=NIL+1,o=NSYM;t<=o?e<o:e>o;r=t<=o?++e:--e)if(""!==symtab[r].printname)symtab[r]=new U,symtab[r].k=SYM,binding[r]=symtab[r],s.push(isSymbolReclaimable[r]=!1);else if(!1===isSymbolReclaimable[r])break;return s},collectUserSymbols=function(r,e=[]){var t,o,s;if(is_usr_symbol(r)&&-1===e.indexOf(r))e.push(r);else if(istensor(r))for(t=o=0,s=r.tensor.nelem;0<=s?o<s:o>s;t=0<=s?++o:--o)collectUserSymbols(r.tensor.elem[t],e);else for(;iscons(r);)collectUserSymbols(car(r),e),r=cdr(r)},$.get_binding=get_binding,$.set_binding=set_binding,$.usr_symbol=usr_symbol,$.symbolsinfo=symbolsinfo,$.collectUserSymbols=collectUserSymbols,inited||(inited=!0,init()),$.init=init,parse_internal=function(r){return"string"==typeof r?scan(r):"number"==typeof r?r%1==0?push_integer(r):push_double(r):r instanceof U?push(r):(console.warn("unknown argument type",r),push(symbol(NIL)))},parse=function(r){var e,t;try{parse_internal(r),e=pop(),check_stack()}catch(r){throw t=r,reset_after_error(),t}return e},exec=function(r,...e){var t,o,s,n,p,a;for(s=get_binding(usr_symbol(r)),check_stack(),push(s),n=0,p=e.length;n<p;n++)t=e[n],parse_internal(t);list(1+e.length),p1=pop(),push(p1);try{top_level_eval(),a=pop(),check_stack()}catch(r){throw o=r,reset_after_error(),o}return a},$.exec=exec,$.parse=parse,function(){var r,e,t,o,s;for(s=[],t=0,o=(r=["abs","add","adj","and","approxratio","arccos","arccosh","arcsin","arcsinh","arctan","arctanh","arg","atomize","besselj","bessely","binding","binomial","ceiling","check","choose","circexp","clear","clearall","clearpatterns","clock","coeff","cofactor","condense","conj","contract","cos","cosh","decomp","defint","deg","denominator","det","derivative","dim","dirac","divisors","do","dot","draw","dsolve","eigen","eigenval","eigenvec","erf","erfc","eval","exp","expand","expcos","expsin","factor","factorial","factorpoly","filter","float","floor","for","Gamma","gcd","hermite","hilbert","imag","component","inner","integral","inv","invg","isinteger","isprime","laguerre","lcm","leading","legendre","log","mod","multiply","not","nroots","number","numerator","operator","or","outer","pattern","patternsinfo","polar","power","prime","print","print2dascii","printcomputer","printlatex","printlist","printhuman","product","quote","quotient","rank","rationalize","real","rect","roots","round","equals","shape","sgn","silentpattern","simplify","sin","sinh","sqrt","stop","subst","sum","symbolsinfo","tan","tanh","taylor","test","testeq","testge","testgt","testle","testlt","transpose","unit","zero"]).length;t<o;t++)e=r[t],s.push($[e]=exec.bind(this,e))}(),freeze=function(){var r,e,t,o,s;for(e=[],r=[],t=o=0,s=symtab.length;0<=s?o<s:o>s;t=0<=s?++o:--o)!1===isSymbolReclaimable[t]&&(e.push(symtab[t]),r.push(binding[t]));return[e,r,userSimplificationsInListForm.slice(0),zero,one,imaginaryunit,getStateHash()]},unfreeze=function(r){var e,t,o,s,n,p;for([o,e,t,zero,one,imaginaryunit]=r,s=n=0,p=o.length;0<=p?n<p:n>p;s=0<=p?++n:--n)symtab[s]=o[s],binding[s]=e[s];return userSimplificationsInListForm=t.slice(0)},compareState=function(r){return getStateHash()===r},getStateHash=function(){var r,e,t,o,s,n,p;for(r="",e=t=n=NIL+1,p=symtab.length;n<=p?t<p:t>p;e=n<=p?++t:--t)if(""!==symtab[e].printname)r+=" //"+print_list(symtab[e])+" : "+print_list(binding[e]);else if(!1===isSymbolReclaimable[e])break;for(s=0,o=userSimplificationsInListForm.length;s<o;s++)r+=" pattern: "+(e=userSimplificationsInListForm[s]);return DEBUG&&console.log("frozenHash: "+r),r}}).call(this)},736:(r,e,t)=>{var o;r=t.nmd(r);var s=function(r){"use strict";var e=1e7,t=9007199254740992,o=d(t),n="0123456789abcdefghijklmnopqrstuvwxyz",p="function"==typeof BigInt;function a(r,e,t,o){return void 0===r?a[0]:void 0===e||10==+e&&!t?H(r):W(r,e,t,o)}function i(r,e){this.value=r,this.sign=e,this.isSmall=!1}function u(r){this.value=r,this.sign=r<0,this.isSmall=!0}function l(r){this.value=r}function c(r){return-t<r&&r<t}function d(r){return r<1e7?[r]:r<1e14?[r%1e7,Math.floor(r/1e7)]:[r%1e7,Math.floor(r/1e7)%1e7,Math.floor(r/1e14)]}function _(r){m(r);var t=r.length;if(t<4&&R(r,o)<0)switch(t){case 0:return 0;case 1:return r[0];case 2:return r[0]+r[1]*e;default:return r[0]+(r[1]+r[2]*e)*e}return r}function m(r){for(var e=r.length;0===r[--e];);r.length=e+1}function f(r){for(var e=new Array(r),t=-1;++t<r;)e[t]=0;return e}function h(r){return r>0?Math.floor(r):Math.ceil(r)}function g(r,t){var o,s,n=r.length,p=t.length,a=new Array(n),i=0,u=e;for(s=0;s<p;s++)i=(o=r[s]+t[s]+i)>=u?1:0,a[s]=o-i*u;for(;s<n;)i=(o=r[s]+i)===u?1:0,a[s++]=o-i*u;return i>0&&a.push(i),a}function b(r,e){return r.length>=e.length?g(r,e):g(e,r)}function y(r,t){var o,s,n=r.length,p=new Array(n),a=e;for(s=0;s<n;s++)o=r[s]-a+t,t=Math.floor(o/a),p[s]=o-t*a,t+=1;for(;t>0;)p[s++]=t%a,t=Math.floor(t/a);return p}function v(r,t){var o,s,n=r.length,p=t.length,a=new Array(n),i=0,u=e;for(o=0;o<p;o++)(s=r[o]-i-t[o])<0?(s+=u,i=1):i=0,a[o]=s;for(o=p;o<n;o++){if(!((s=r[o]-i)<0)){a[o++]=s;break}s+=u,a[o]=s}for(;o<n;o++)a[o]=r[o];return m(a),a}function x(r,t,o){var s,n,p=r.length,a=new Array(p),l=-t,c=e;for(s=0;s<p;s++)n=r[s]+l,l=Math.floor(n/c),n%=c,a[s]=n<0?n+c:n;return"number"==typeof(a=_(a))?(o&&(a=-a),new u(a)):new i(a,o)}function E(r,t){var o,s,n,p,a=r.length,i=t.length,u=f(a+i),l=e;for(n=0;n<a;++n){p=r[n];for(var c=0;c<i;++c)o=p*t[c]+u[n+c],s=Math.floor(o/l),u[n+c]=o-s*l,u[n+c+1]+=s}return m(u),u}function A(r,t){var o,s,n=r.length,p=new Array(n),a=e,i=0;for(s=0;s<n;s++)o=r[s]*t+i,i=Math.floor(o/a),p[s]=o-i*a;for(;i>0;)p[s++]=i%a,i=Math.floor(i/a);return p}function T(r,e){for(var t=[];e-- >0;)t.push(0);return t.concat(r)}function I(r,e){var t=Math.max(r.length,e.length);if(t<=30)return E(r,e);t=Math.ceil(t/2);var o=r.slice(t),s=r.slice(0,t),n=e.slice(t),p=e.slice(0,t),a=I(s,p),i=I(o,n),u=I(b(s,o),b(p,n)),l=b(b(a,T(v(v(u,a),i),t)),T(i,2*t));return m(l),l}function O(r,t,o){return new i(r<e?A(t,r):E(t,d(r)),o)}function S(r){var t,o,s,n,p=r.length,a=f(p+p),i=e;for(s=0;s<p;s++){o=0-(n=r[s])*n;for(var u=s;u<p;u++)t=n*r[u]*2+a[s+u]+o,o=Math.floor(t/i),a[s+u]=t-o*i;a[s+p]=o}return m(a),a}function N(r,e){var t,o,s,n,p=r.length,a=f(p);for(s=0,t=p-1;t>=0;--t)s=(n=1e7*s+r[t])-(o=h(n/e))*e,a[t]=0|o;return[a,0|s]}function M(r,t){var o,s=H(t);if(p)return[new l(r.value/s.value),new l(r.value%s.value)];var n,c=r.value,g=s.value;if(0===g)throw new Error("Cannot divide by zero");if(r.isSmall)return s.isSmall?[new u(h(c/g)),new u(c%g)]:[a[0],r];if(s.isSmall){if(1===g)return[r,a[0]];if(-1==g)return[r.negate(),a[0]];var b=Math.abs(g);if(b<e){n=_((o=N(c,b))[0]);var y=o[1];return r.sign&&(y=-y),"number"==typeof n?(r.sign!==s.sign&&(n=-n),[new u(n),new u(y)]):[new i(n,r.sign!==s.sign),new u(y)]}g=d(b)}var x=R(c,g);if(-1===x)return[a[0],r];if(0===x)return[a[r.sign===s.sign?1:-1],a[0]];n=(o=c.length+g.length<=200?function(r,t){var o,s,n,p,a,i,u,l=r.length,c=t.length,d=e,m=f(t.length),h=t[c-1],g=Math.ceil(d/(2*h)),b=A(r,g),y=A(t,g);for(b.length<=l&&b.push(0),y.push(0),h=y[c-1],s=l-c;s>=0;s--){for(o=d-1,b[s+c]!==h&&(o=Math.floor((b[s+c]*d+b[s+c-1])/h)),n=0,p=0,i=y.length,a=0;a<i;a++)n+=o*y[a],u=Math.floor(n/d),p+=b[s+a]-(n-u*d),n=u,p<0?(b[s+a]=p+d,p=-1):(b[s+a]=p,p=0);for(;0!==p;){for(o-=1,n=0,a=0;a<i;a++)(n+=b[s+a]-d+y[a])<0?(b[s+a]=n+d,n=0):(b[s+a]=n,n=1);p+=n}m[s]=o}return b=N(b,g)[0],[_(m),_(b)]}(c,g):function(r,t){for(var o,s,n,p,a,i=r.length,u=t.length,l=[],c=[],d=e;i;)if(c.unshift(r[--i]),m(c),R(c,t)<0)l.push(0);else{n=c[(s=c.length)-1]*d+c[s-2],p=t[u-1]*d+t[u-2],s>u&&(n=(n+1)*d),o=Math.ceil(n/p);do{if(R(a=A(t,o),c)<=0)break;o--}while(o);l.push(o),c=v(c,a)}return l.reverse(),[_(l),_(c)]}(c,g))[0];var E=r.sign!==s.sign,T=o[1],I=r.sign;return"number"==typeof n?(E&&(n=-n),n=new u(n)):n=new i(n,E),"number"==typeof T?(I&&(T=-T),T=new u(T)):T=new i(T,I),[n,T]}function R(r,e){if(r.length!==e.length)return r.length>e.length?1:-1;for(var t=r.length-1;t>=0;t--)if(r[t]!==e[t])return r[t]>e[t]?1:-1;return 0}function L(r){var e=r.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function k(r,e){for(var t,o,n,p=r.prev(),a=p,i=0;a.isEven();)a=a.divide(2),i++;r:for(o=0;o<e.length;o++)if(!r.lesser(e[o])&&!(n=s(e[o]).modPow(a,r)).isUnit()&&!n.equals(p)){for(t=i-1;0!=t;t--){if((n=n.square().mod(r)).isUnit())return!1;if(n.equals(p))continue r}return!1}return!0}i.prototype=Object.create(a.prototype),u.prototype=Object.create(a.prototype),l.prototype=Object.create(a.prototype),i.prototype.add=function(r){var e=H(r);if(this.sign!==e.sign)return this.subtract(e.negate());var t=this.value,o=e.value;return e.isSmall?new i(y(t,Math.abs(o)),this.sign):new i(b(t,o),this.sign)},i.prototype.plus=i.prototype.add,u.prototype.add=function(r){var e=H(r),t=this.value;if(t<0!==e.sign)return this.subtract(e.negate());var o=e.value;if(e.isSmall){if(c(t+o))return new u(t+o);o=d(Math.abs(o))}return new i(y(o,Math.abs(t)),t<0)},u.prototype.plus=u.prototype.add,l.prototype.add=function(r){return new l(this.value+H(r).value)},l.prototype.plus=l.prototype.add,i.prototype.subtract=function(r){var e=H(r);if(this.sign!==e.sign)return this.add(e.negate());var t=this.value,o=e.value;return e.isSmall?x(t,Math.abs(o),this.sign):function(r,e,t){var o;return R(r,e)>=0?o=v(r,e):(o=v(e,r),t=!t),"number"==typeof(o=_(o))?(t&&(o=-o),new u(o)):new i(o,t)}(t,o,this.sign)},i.prototype.minus=i.prototype.subtract,u.prototype.subtract=function(r){var e=H(r),t=this.value;if(t<0!==e.sign)return this.add(e.negate());var o=e.value;return e.isSmall?new u(t-o):x(o,Math.abs(t),t>=0)},u.prototype.minus=u.prototype.subtract,l.prototype.subtract=function(r){return new l(this.value-H(r).value)},l.prototype.minus=l.prototype.subtract,i.prototype.negate=function(){return new i(this.value,!this.sign)},u.prototype.negate=function(){var r=this.sign,e=new u(-this.value);return e.sign=!r,e},l.prototype.negate=function(){return new l(-this.value)},i.prototype.abs=function(){return new i(this.value,!1)},u.prototype.abs=function(){return new u(Math.abs(this.value))},l.prototype.abs=function(){return new l(this.value>=0?this.value:-this.value)},i.prototype.multiply=function(r){var t,o,s,n=H(r),p=this.value,u=n.value,l=this.sign!==n.sign;if(n.isSmall){if(0===u)return a[0];if(1===u)return this;if(-1===u)return this.negate();if((t=Math.abs(u))<e)return new i(A(p,t),l);u=d(t)}return new i(-.012*(o=p.length)-.012*(s=u.length)+15e-6*o*s>0?I(p,u):E(p,u),l)},i.prototype.times=i.prototype.multiply,u.prototype._multiplyBySmall=function(r){return c(r.value*this.value)?new u(r.value*this.value):O(Math.abs(r.value),d(Math.abs(this.value)),this.sign!==r.sign)},i.prototype._multiplyBySmall=function(r){return 0===r.value?a[0]:1===r.value?this:-1===r.value?this.negate():O(Math.abs(r.value),this.value,this.sign!==r.sign)},u.prototype.multiply=function(r){return H(r)._multiplyBySmall(this)},u.prototype.times=u.prototype.multiply,l.prototype.multiply=function(r){return new l(this.value*H(r).value)},l.prototype.times=l.prototype.multiply,i.prototype.square=function(){return new i(S(this.value),!1)},u.prototype.square=function(){var r=this.value*this.value;return c(r)?new u(r):new i(S(d(Math.abs(this.value))),!1)},l.prototype.square=function(r){return new l(this.value*this.value)},i.prototype.divmod=function(r){var e=M(this,r);return{quotient:e[0],remainder:e[1]}},l.prototype.divmod=u.prototype.divmod=i.prototype.divmod,i.prototype.divide=function(r){return M(this,r)[0]},l.prototype.over=l.prototype.divide=function(r){return new l(this.value/H(r).value)},u.prototype.over=u.prototype.divide=i.prototype.over=i.prototype.divide,i.prototype.mod=function(r){return M(this,r)[1]},l.prototype.mod=l.prototype.remainder=function(r){return new l(this.value%H(r).value)},u.prototype.remainder=u.prototype.mod=i.prototype.remainder=i.prototype.mod,i.prototype.pow=function(r){var e,t,o,s=H(r),n=this.value,p=s.value;if(0===p)return a[1];if(0===n)return a[0];if(1===n)return a[1];if(-1===n)return s.isEven()?a[1]:a[-1];if(s.sign)return a[0];if(!s.isSmall)throw new Error("The exponent "+s.toString()+" is too large.");if(this.isSmall&&c(e=Math.pow(n,p)))return new u(h(e));for(t=this,o=a[1];!0&p&&(o=o.times(t),--p),0!==p;)p/=2,t=t.square();return o},u.prototype.pow=i.prototype.pow,l.prototype.pow=function(r){var e=H(r),t=this.value,o=e.value,s=BigInt(0),n=BigInt(1),p=BigInt(2);if(o===s)return a[1];if(t===s)return a[0];if(t===n)return a[1];if(t===BigInt(-1))return e.isEven()?a[1]:a[-1];if(e.isNegative())return new l(s);for(var i=this,u=a[1];(o&n)===n&&(u=u.times(i),--o),o!==s;)o/=p,i=i.square();return u},i.prototype.modPow=function(r,e){if(r=H(r),(e=H(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var t=a[1],o=this.mod(e);for(r.isNegative()&&(r=r.multiply(a[-1]),o=o.modInv(e));r.isPositive();){if(o.isZero())return a[0];r.isOdd()&&(t=t.multiply(o).mod(e)),r=r.divide(2),o=o.square().mod(e)}return t},l.prototype.modPow=u.prototype.modPow=i.prototype.modPow,i.prototype.compareAbs=function(r){var e=H(r),t=this.value,o=e.value;return e.isSmall?1:R(t,o)},u.prototype.compareAbs=function(r){var e=H(r),t=Math.abs(this.value),o=e.value;return e.isSmall?t===(o=Math.abs(o))?0:t>o?1:-1:-1},l.prototype.compareAbs=function(r){var e=this.value,t=H(r).value;return(e=e>=0?e:-e)===(t=t>=0?t:-t)?0:e>t?1:-1},i.prototype.compare=function(r){if(r===1/0)return-1;if(r===-1/0)return 1;var e=H(r),t=this.value,o=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:R(t,o)*(this.sign?-1:1)},i.prototype.compareTo=i.prototype.compare,u.prototype.compare=function(r){if(r===1/0)return-1;if(r===-1/0)return 1;var e=H(r),t=this.value,o=e.value;return e.isSmall?t==o?0:t>o?1:-1:t<0!==e.sign?t<0?-1:1:t<0?1:-1},u.prototype.compareTo=u.prototype.compare,l.prototype.compare=function(r){if(r===1/0)return-1;if(r===-1/0)return 1;var e=this.value,t=H(r).value;return e===t?0:e>t?1:-1},l.prototype.compareTo=l.prototype.compare,i.prototype.equals=function(r){return 0===this.compare(r)},l.prototype.eq=l.prototype.equals=u.prototype.eq=u.prototype.equals=i.prototype.eq=i.prototype.equals,i.prototype.notEquals=function(r){return 0!==this.compare(r)},l.prototype.neq=l.prototype.notEquals=u.prototype.neq=u.prototype.notEquals=i.prototype.neq=i.prototype.notEquals,i.prototype.greater=function(r){return this.compare(r)>0},l.prototype.gt=l.prototype.greater=u.prototype.gt=u.prototype.greater=i.prototype.gt=i.prototype.greater,i.prototype.lesser=function(r){return this.compare(r)<0},l.prototype.lt=l.prototype.lesser=u.prototype.lt=u.prototype.lesser=i.prototype.lt=i.prototype.lesser,i.prototype.greaterOrEquals=function(r){return this.compare(r)>=0},l.prototype.geq=l.prototype.greaterOrEquals=u.prototype.geq=u.prototype.greaterOrEquals=i.prototype.geq=i.prototype.greaterOrEquals,i.prototype.lesserOrEquals=function(r){return this.compare(r)<=0},l.prototype.leq=l.prototype.lesserOrEquals=u.prototype.leq=u.prototype.lesserOrEquals=i.prototype.leq=i.prototype.lesserOrEquals,i.prototype.isEven=function(){return 0==(1&this.value[0])},u.prototype.isEven=function(){return 0==(1&this.value)},l.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},i.prototype.isOdd=function(){return 1==(1&this.value[0])},u.prototype.isOdd=function(){return 1==(1&this.value)},l.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},i.prototype.isPositive=function(){return!this.sign},u.prototype.isPositive=function(){return this.value>0},l.prototype.isPositive=u.prototype.isPositive,i.prototype.isNegative=function(){return this.sign},u.prototype.isNegative=function(){return this.value<0},l.prototype.isNegative=u.prototype.isNegative,i.prototype.isUnit=function(){return!1},u.prototype.isUnit=function(){return 1===Math.abs(this.value)},l.prototype.isUnit=function(){return this.abs().value===BigInt(1)},i.prototype.isZero=function(){return!1},u.prototype.isZero=function(){return 0===this.value},l.prototype.isZero=function(){return this.value===BigInt(0)},i.prototype.isDivisibleBy=function(r){var e=H(r);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},l.prototype.isDivisibleBy=u.prototype.isDivisibleBy=i.prototype.isDivisibleBy,i.prototype.isPrime=function(e){var t=L(this);if(t!==r)return t;var o=this.abs(),n=o.bitLength();if(n<=64)return k(o,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var p=Math.log(2)*n.toJSNumber(),a=Math.ceil(!0===e?2*Math.pow(p,2):p),i=[],u=0;u<a;u++)i.push(s(u+2));return k(o,i)},l.prototype.isPrime=u.prototype.isPrime=i.prototype.isPrime,i.prototype.isProbablePrime=function(e,t){var o=L(this);if(o!==r)return o;for(var n=this.abs(),p=e===r?5:e,a=[],i=0;i<p;i++)a.push(s.randBetween(2,n.minus(2),t));return k(n,a)},l.prototype.isProbablePrime=u.prototype.isProbablePrime=i.prototype.isProbablePrime,i.prototype.modInv=function(r){for(var e,t,o,n=s.zero,p=s.one,a=H(r),i=this.abs();!i.isZero();)e=a.divide(i),t=n,o=a,n=p,a=i,p=t.subtract(e.multiply(p)),i=o.subtract(e.multiply(i));if(!a.isUnit())throw new Error(this.toString()+" and "+r.toString()+" are not co-prime");return-1===n.compare(0)&&(n=n.add(r)),this.isNegative()?n.negate():n},l.prototype.modInv=u.prototype.modInv=i.prototype.modInv,i.prototype.next=function(){var r=this.value;return this.sign?x(r,1,this.sign):new i(y(r,1),this.sign)},u.prototype.next=function(){var r=this.value;return r+1<t?new u(r+1):new i(o,!1)},l.prototype.next=function(){return new l(this.value+BigInt(1))},i.prototype.prev=function(){var r=this.value;return this.sign?new i(y(r,1),!0):x(r,1,this.sign)},u.prototype.prev=function(){var r=this.value;return r-1>-t?new u(r-1):new i(o,!0)},l.prototype.prev=function(){return new l(this.value-BigInt(1))};for(var q=[1];2*q[q.length-1]<=e;)q.push(2*q[q.length-1]);var D=q.length,P=q[D-1];function U(r){return Math.abs(r)<=e}function w(r,e,t){e=H(e);for(var o=r.isNegative(),n=e.isNegative(),p=o?r.not():r,a=n?e.not():e,i=0,u=0,l=null,c=null,d=[];!p.isZero()||!a.isZero();)i=(l=M(p,P))[1].toJSNumber(),o&&(i=P-1-i),u=(c=M(a,P))[1].toJSNumber(),n&&(u=P-1-u),p=l[0],a=c[0],d.push(t(i,u));for(var _=0!==t(o?1:0,n?1:0)?s(-1):s(0),m=d.length-1;m>=0;m-=1)_=_.multiply(P).add(s(d[m]));return _}i.prototype.shiftLeft=function(r){var e=H(r).toJSNumber();if(!U(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var t=this;if(t.isZero())return t;for(;e>=D;)t=t.multiply(P),e-=D-1;return t.multiply(q[e])},l.prototype.shiftLeft=u.prototype.shiftLeft=i.prototype.shiftLeft,i.prototype.shiftRight=function(r){var e,t=H(r).toJSNumber();if(!U(t))throw new Error(String(t)+" is too large for shifting.");if(t<0)return this.shiftLeft(-t);for(var o=this;t>=D;){if(o.isZero()||o.isNegative()&&o.isUnit())return o;o=(e=M(o,P))[1].isNegative()?e[0].prev():e[0],t-=D-1}return(e=M(o,q[t]))[1].isNegative()?e[0].prev():e[0]},l.prototype.shiftRight=u.prototype.shiftRight=i.prototype.shiftRight,i.prototype.not=function(){return this.negate().prev()},l.prototype.not=u.prototype.not=i.prototype.not,i.prototype.and=function(r){return w(this,r,(function(r,e){return r&e}))},l.prototype.and=u.prototype.and=i.prototype.and,i.prototype.or=function(r){return w(this,r,(function(r,e){return r|e}))},l.prototype.or=u.prototype.or=i.prototype.or,i.prototype.xor=function(r){return w(this,r,(function(r,e){return r^e}))},l.prototype.xor=u.prototype.xor=i.prototype.xor;var B=1<<30;function G(r){var t=r.value,o="number"==typeof t?t|B:"bigint"==typeof t?t|BigInt(B):t[0]+t[1]*e|1073758208;return o&-o}function C(r,e){if(e.compareTo(r)<=0){var t=C(r,e.square(e)),o=t.p,n=t.e,p=o.multiply(e);return p.compareTo(r)<=0?{p,e:2*n+1}:{p:o,e:2*n}}return{p:s(1),e:0}}function F(r,e){return r=H(r),e=H(e),r.greater(e)?r:e}function Y(r,e){return r=H(r),e=H(e),r.lesser(e)?r:e}function X(r,e){if(r=H(r).abs(),e=H(e).abs(),r.equals(e))return r;if(r.isZero())return e;if(e.isZero())return r;for(var t,o,s=a[1];r.isEven()&&e.isEven();)t=Y(G(r),G(e)),r=r.divide(t),e=e.divide(t),s=s.multiply(t);for(;r.isEven();)r=r.divide(G(r));do{for(;e.isEven();)e=e.divide(G(e));r.greater(e)&&(o=e,e=r,r=o),e=e.subtract(r)}while(!e.isZero());return s.isUnit()?r:r.multiply(s)}i.prototype.bitLength=function(){var r=this;return r.compareTo(s(0))<0&&(r=r.negate().subtract(s(1))),0===r.compareTo(s(0))?s(0):s(C(r,s(2)).e).add(s(1))},l.prototype.bitLength=u.prototype.bitLength=i.prototype.bitLength;var W=function(r,e,t,o){t=t||n,r=String(r),o||(r=r.toLowerCase(),t=t.toLowerCase());var s,p=r.length,a=Math.abs(e),i={};for(s=0;s<t.length;s++)i[t[s]]=s;for(s=0;s<p;s++)if("-"!==(c=r[s])&&c in i&&i[c]>=a){if("1"===c&&1===a)continue;throw new Error(c+" is not a valid digit in base "+e+".")}e=H(e);var u=[],l="-"===r[0];for(s=l?1:0;s<r.length;s++){var c;if((c=r[s])in i)u.push(H(i[c]));else{if("<"!==c)throw new Error(c+" is not a valid character");var d=s;do{s++}while(">"!==r[s]&&s<r.length);u.push(H(r.slice(d+1,s)))}}return z(u,e,l)};function z(r,e,t){var o,s=a[0],n=a[1];for(o=r.length-1;o>=0;o--)s=s.add(r[o].times(n)),n=n.times(e);return t?s.negate():s}function Z(r,e){if((e=s(e)).isZero()){if(r.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(e.equals(-1)){if(r.isZero())return{value:[0],isNegative:!1};if(r.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-r.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var t=Array.apply(null,Array(r.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return t.unshift([1]),{value:[].concat.apply([],t),isNegative:!1}}var o=!1;if(r.isNegative()&&e.isPositive()&&(o=!0,r=r.abs()),e.isUnit())return r.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(r.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:o};for(var n,p=[],a=r;a.isNegative()||a.compareAbs(e)>=0;){n=a.divmod(e),a=n.quotient;var i=n.remainder;i.isNegative()&&(i=e.minus(i).abs(),a=a.next()),p.push(i.toJSNumber())}return p.push(a.toJSNumber()),{value:p.reverse(),isNegative:o}}function V(r,e,t){var o=Z(r,e);return(o.isNegative?"-":"")+o.value.map((function(r){return function(r,e){return r<(e=e||n).length?e[r]:"<"+r+">"}(r,t)})).join("")}function $(r){if(c(+r)){var e=+r;if(e===h(e))return p?new l(BigInt(e)):new u(e);throw new Error("Invalid integer: "+r)}var t="-"===r[0];t&&(r=r.slice(1));var o=r.split(/e/i);if(o.length>2)throw new Error("Invalid integer: "+o.join("e"));if(2===o.length){var s=o[1];if("+"===s[0]&&(s=s.slice(1)),(s=+s)!==h(s)||!c(s))throw new Error("Invalid integer: "+s+" is not a valid exponent.");var n=o[0],a=n.indexOf(".");if(a>=0&&(s-=n.length-a-1,n=n.slice(0,a)+n.slice(a+1)),s<0)throw new Error("Cannot include negative exponent part for integers");r=n+=new Array(s+1).join("0")}if(!/^([0-9][0-9]*)$/.test(r))throw new Error("Invalid integer: "+r);if(p)return new l(BigInt(t?"-"+r:r));for(var d=[],_=r.length,f=_-7;_>0;)d.push(+r.slice(f,_)),(f-=7)<0&&(f=0),_-=7;return m(d),new i(d,t)}function H(r){return"number"==typeof r?function(r){if(p)return new l(BigInt(r));if(c(r)){if(r!==h(r))throw new Error(r+" is not an integer.");return new u(r)}return $(r.toString())}(r):"string"==typeof r?$(r):"bigint"==typeof r?new l(r):r}i.prototype.toArray=function(r){return Z(this,r)},u.prototype.toArray=function(r){return Z(this,r)},l.prototype.toArray=function(r){return Z(this,r)},i.prototype.toString=function(e,t){if(e===r&&(e=10),10!==e)return V(this,e,t);for(var o,s=this.value,n=s.length,p=String(s[--n]);--n>=0;)o=String(s[n]),p+="0000000".slice(o.length)+o;return(this.sign?"-":"")+p},u.prototype.toString=function(e,t){return e===r&&(e=10),10!=e?V(this,e,t):String(this.value)},l.prototype.toString=u.prototype.toString,l.prototype.toJSON=i.prototype.toJSON=u.prototype.toJSON=function(){return this.toString()},i.prototype.valueOf=function(){return parseInt(this.toString(),10)},i.prototype.toJSNumber=i.prototype.valueOf,u.prototype.valueOf=function(){return this.value},u.prototype.toJSNumber=u.prototype.valueOf,l.prototype.valueOf=l.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var Q=0;Q<1e3;Q++)a[Q]=H(Q),Q>0&&(a[-Q]=H(-Q));return a.one=a[1],a.zero=a[0],a.minusOne=a[-1],a.max=F,a.min=Y,a.gcd=X,a.lcm=function(r,e){return r=H(r).abs(),e=H(e).abs(),r.divide(X(r,e)).multiply(e)},a.isInstance=function(r){return r instanceof i||r instanceof u||r instanceof l},a.randBetween=function(r,t,o){r=H(r),t=H(t);var s=o||Math.random,n=Y(r,t),p=F(r,t).subtract(n).add(1);if(p.isSmall)return n.add(Math.floor(s()*p));for(var i=Z(p,e).value,u=[],l=!0,c=0;c<i.length;c++){var d=l?i[c]:e,_=h(s()*d);u.push(_),_<d&&(l=!1)}return n.add(a.fromArray(u,e,!1))},a.fromArray=function(r,e,t){return z(r.map(H),H(e||10),t)},a}();r.hasOwnProperty("exports")&&(r.exports=s),void 0===(o=function(){return s}.call(e,t,e,r))||(r.exports=o)},204:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.convertData=exports.gradientDescent=exports.calculateGradientY=exports.calculateGradientX=exports.calculatePotential=void 0;var environment_1=__webpack_require__(824),point_1=__webpack_require__(134);function calculatePotential(xRange,yRange,step){return new Promise((function(res,rej){for(var result=[],x=xRange[0];x<=xRange[1];x+=step){for(var y=yRange[0];y<=yRange[1];y+=step){var potExpr=environment_1.Environment.getInstance().getPot(new point_1.Point(x,y)),modPotExpr=environment_1.mathify(potExpr);try{var pot=eval(modPotExpr);result.push({point:new point_1.Point(x,y),pot})}catch(r){console.log(modPotExpr,x,y)}}console.log("% done",100*x/xRange[1])}console.log("% done",100),res(result)}))}function calculateGradientX(point){var gradientExpr=environment_1.Environment.getInstance().getGradientX(point),modGradientExpr=environment_1.mathify(gradientExpr);try{var dudx=eval(modGradientExpr);return{point,dudx}}catch(r){console.log(modGradientExpr,point)}}function calculateGradientY(point){var gradientExpr=environment_1.Environment.getInstance().getGradientY(point),modGradientExpr=environment_1.mathify(gradientExpr);try{var dudy=eval(modGradientExpr);return{point,dudy}}catch(r){console.log(modGradientExpr,point)}}function pointsEqual(r,e){return r.x==e.x&&r.y==e.y}function adaptAlpha(r,e,t){return environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))>=.01?r/10:environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))>=1e-4?r:environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))<1e-6?1e3*r:environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))<1e-5?100*r:environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))<1e-4?10*r:void 0}function gradientDescent(r,e,t,o,s,n){return new Promise((function(e,t){var p=[r],a=calculateGradientX(p[0]).dudx,i=calculateGradientY(p[0]).dudy,u=0;for(console.log("gradient5!!!");environment_1.calcDist(new point_1.Point(a,i),new point_1.Point(0,0))>s;){var l=adaptAlpha(o,a,i),c=p[p.length-1].x-l*a,d=p[p.length-1].y-l*i,_=new point_1.Point(c,d);if(p.push(_),n&&!n(p,a,i,u,!1))return p;a=calculateGradientX(p[p.length-1]).dudx,i=calculateGradientY(p[p.length-1]).dudy,++u}n(p,a,i,u,!0),e(p)}))}function convertData(r){for(var e=[],t=[],o=[],s=0;s<r.length;s++)e.push(r[s].point.x),t.push(r[s].point.y),o.push(r[s].pot);return{x:e,y:t,z:o,type:"contour"}}exports.calculatePotential=calculatePotential,exports.calculateGradientX=calculateGradientX,exports.calculateGradientY=calculateGradientY,window.calculateGradientX=calculateGradientX,window.calculateGradientY=calculateGradientY,exports.gradientDescent=gradientDescent,exports.convertData=convertData},405:(r,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.contourChart=void 0,e.contourChart=function(r,e,t){var o=e,s={autosize:!1,width:500,height:500,margin:{l:50,r:50,b:100,t:100,pad:4},paper_bgcolor:"#7f7f7f",plot_bgcolor:"#c7c7c7",shapes:t};Plotly.newPlot(r,o,s)}},50:(r,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Circle=void 0;e.Circle=function(r,e,t){this.cx=r,this.cy=e,this.r=t}},801:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DisplayComponent=void 0;var calculation_1=__webpack_require__(204),chart_1=__webpack_require__(405),circle_1=__webpack_require__(50),environment_1=__webpack_require__(824),point_1=__webpack_require__(134);function createTemplate(r){return'\n\t\t\t<table>\n\t\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<label for="startx_'+r+'">Start x</label>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type="number" id="startx_'+r+'">\n\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<label for="starty_'+r+'">Start y</label>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type="number" id="starty_'+r+'">\n\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<label for="goalx_'+r+'">Goal x</label>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type="number" id="goalx_'+r+'">\n\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<label for="goaly_'+r+'">Goal y</label>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type="number" id="goaly_'+r+'">\n\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<label for="kappa_'+r+'">Kappa</label>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type="number" id="kappa_'+r+'">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><label for="boundary_'+r+'">Boundary<label></td>\n\t\t\t\t<td><input type="text" id="boundary_'+r+'"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><label for="obstacles_'+r+'">Obstacles</label></td>\n\t\t\t\t<td><input type="text" id="obstacles_'+r+'"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><label for="alpha_'+r+'">alpha</label></td>\n\t\t\t\t<td><input type="text" id="alpha_'+r+'"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><label for="epsilon_'+r+'">epsilon</label></td>\n\t\t\t\t<td><input type="text" id="epsilon_'+r+'"></td>\n\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<button id="computePot_'+r+'">Compute Potential</button>\n\t\t\t<button id="computePath_'+r+'">Find Path</button>\n\t\t\t<button id="showObstacles_'+r+'">Show Obstacles</button>\n\t\t\t<div id="contour_chart_container_'+r+'"></div>\n\t\t'}var DisplayComponent=function(){function DisplayComponent(r){this.shapes=[],this.obstacles=[],this.parent=document.getElementById(r),this.svgID=DisplayComponent.getID(),this.divID=this.svgID}return DisplayComponent.getID=function(){var r=Math.max.apply(Math,DisplayComponent.activeID);return DisplayComponent.activeID.push(r+1),r+1},DisplayComponent.prototype.show=function(){var r=this,e=createTemplate(this.svgID),t=document.createElement("div");t.style.border="1px solid black",t.style.display="inline-block",t.style.width="fit-content",t.id="container_"+this.divID,t.innerHTML=e.trim(),t.querySelector("#computePot_"+this.svgID).addEventListener("click",(function(){r.calculatePot()})),t.querySelector("#computePath_"+this.svgID).addEventListener("click",(function(){r.calculatePath()})),t.querySelector("#showObstacles_"+this.svgID).addEventListener("click",(function(){r.showObstacles()})),this.parent.appendChild(t)},DisplayComponent.prototype.getInputs=function(){var r=this.getStart()||new point_1.Point(1,10),e=this.getGoal()||new point_1.Point(19,10),t=this.getBoundary()||new circle_1.Circle(10,10,10),o=this.getObstacles()||[new circle_1.Circle(10,15,2),new circle_1.Circle(10,5,2)],s=this.getKappa()||3,n=this.getAlpha()||1,p=this.getEpsilon()||1e-5;return console.log("Inputs are:",{start:r,goal:e,boundary:t,obstacles:o,kappa:s}),{start:r,goal:e,boundary:t,obstacles:o,kappa:s,alpha:n,epsilon:p}},DisplayComponent.prototype.getStart=function(){var r=parseFloat(document.getElementById("container_"+this.divID).querySelector("#startx_"+this.svgID).value),e=parseFloat(document.getElementById("container_"+this.divID).querySelector("#starty_"+this.svgID).value);if(r&&e)return new point_1.Point(r,e)},DisplayComponent.prototype.getGoal=function(){var r=parseFloat(document.getElementById("container_"+this.divID).querySelector("#goalx_"+this.svgID).value),e=parseFloat(document.getElementById("container_"+this.divID).querySelector("#goaly_"+this.svgID).value);if(r&&e)return new point_1.Point(r,e)},DisplayComponent.prototype.getBoundary=function(){var str=document.getElementById("container_"+this.divID).querySelector("#boundary_"+this.svgID).value;try{var arr=eval(str);return new circle_1.Circle(arr[0][0],arr[0][1],arr[1])}catch(r){}},DisplayComponent.prototype.getObstacles=function(){var str=document.getElementById("container_"+this.divID).querySelector("#obstacles_"+this.svgID).value;try{for(var arr=eval(str),obs=[],i=0;i<arr.length;i++)obs.push(new circle_1.Circle(arr[i][0][0],arr[i][0][1],arr[i][1]));return obs}catch(r){}},DisplayComponent.prototype.getKappa=function(){return parseFloat(document.getElementById("container_"+this.divID).querySelector("#kappa_"+this.svgID).value)},DisplayComponent.prototype.getAlpha=function(){return parseFloat(document.getElementById("container_"+this.divID).querySelector("#alpha_"+this.svgID).value)},DisplayComponent.prototype.getEpsilon=function(){return parseFloat(document.getElementById("container_"+this.divID).querySelector("#epsilon_"+this.svgID).value)},DisplayComponent.prototype.calculatePot=function(){var r=this;console.log("started!!!");var e=this.getInputs(),t=e.goal,o=e.boundary,s=e.obstacles,n=e.kappa;environment_1.Environment.getInstance().set(t,o,s,n),this.obstacles=s,calculation_1.calculatePotential([0,20],[0,20],.5).then((function(e){r.data=e,r.drawChart()}))},DisplayComponent.prototype.calculatePath=function(){var r=this.getInputs(),e=r.start,t=r.goal,o=r.boundary,s=r.obstacles,n=r.kappa,p=r.alpha,a=r.epsilon;environment_1.Environment.getInstance().set(t,o,s,n),calculation_1.gradientDescent(e,t,o,p,a,this.gradientCallback.bind(this)).then((function(r){console.log(r)}))},DisplayComponent.prototype.gradientCallback=function(r,e,t,o,s){return r.length>=2&&this.shapes.push({type:"line",x0:r[r.length-1].x,y0:r[r.length-1].y,x1:r[r.length-2].x,y1:r[r.length-2].y,line:{color:"rgb(255,215,0)",width:2}}),s&&(this.drawChart(),console.log("iter "+o+" qx="+r[r.length-1].x+" qy="+r[r.length-1].y+"\n\t\t\t\tdudx="+e+" dudy="+t+"\n\t\t\t")),o%20==0&&(this.drawChart(),console.log("iter "+o+" qx="+r[r.length-1].x+" qy="+r[r.length-1].y+"\n\t\t\t\tdudx="+e+" dudy="+t+"\n\t\t\t")),1e5!=o},DisplayComponent.prototype.showObstacles=function(){var r;if(this.data){for(var e=[],t=0;t<this.obstacles.length;t++)e.push({type:"circle",xref:"x",yref:"y",x0:this.obstacles[t].cx-this.obstacles[t].r,y0:this.obstacles[t].cy-this.obstacles[t].r,x1:this.obstacles[t].cx+this.obstacles[t].r,y1:this.obstacles[t].cy+this.obstacles[t].r,opacity:.75,fillcolor:"black",line:{color:"black"}});(r=this.shapes).push.apply(r,e),this.drawChart()}},DisplayComponent.prototype.drawChart=function(){chart_1.contourChart("contour_chart_container_"+this.svgID,[calculation_1.convertData(this.data)],this.shapes)},DisplayComponent.activeID=[0],DisplayComponent}();exports.DisplayComponent=DisplayComponent},824:(r,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Environment=e.mathify=e.calcDist=void 0;var o=t(134),s=t(879);function n(r,e){return Math.pow(Math.pow(r.x-e.x,2)+Math.pow(r.y-e.y,2),.5)}window.alg=s,e.calcDist=n,e.mathify=function(r){return r.replace(/\^/g,"**").replace(/\.\.\./g,"")};var p=function(){function r(){}return r.getInstance=function(){return null==r.env&&(r.env=new r),r.env},r.prototype.set=function(r,e,t,o){var n;this.obstacles=t,this.boundary=e,s.run(function(r,e){var t="b = ( -1*( (x - "+r.cx+")^2 + (y - "+r.cy+")^2 ) + "+r.r+"^2 )";return e.forEach((function(r){t=t+"*( (x - "+r.cx+")^2 + (y - "+r.cy+")^2 - "+r.r+"^2 )"})),t}(e,t)),s.run("distance = sqrt( (x - "+(n=r).x+")^2 + (y - "+n.y+")^2 )"),s.run(function(r){return"p = ( (distance^2) / ( distance^(2*"+r+") + b )^(1/"+r+") )"}(o)),s.run("dudx = d(p, x)"),s.run("dudy = d(p, y)"),this.isSet=!0},r.prototype.clear=function(r){s.clear(r),this.isSet=!1},r.prototype.clearAll=function(){s.clearAll(),this.isSet=!1},r.prototype.getPot=function(r){return this.isSet&&this.safePoint(r)?s.eval(s.eval("p","x",r.x.toString()).toString(),"y",r.y.toString()).toString():this.isSet&&!this.safePoint(r)?"1":void 0},r.prototype.getGradientX=function(r){if(this.isSet&&this.safePoint(r)){var e=this.removeDots(s.eval("dudx","x",r.x.toString()).toString());return this.removeDots(s.eval(e,"y",r.y.toString()).toString())}if(this.isSet&&!this.safePoint(r))return"0"},r.prototype.removeDots=function(r){return r.replace(/\.\.\./g,"")},r.prototype.getGradientY=function(r){if(this.isSet&&this.safePoint(r)){var e=this.removeDots(s.eval("dudy","x",r.x.toString()).toString());return this.removeDots(s.eval(e,"y",r.y.toString()).toString())}if(this.isSet&&!this.safePoint(r))return"0"},r.prototype.safePoint=function(r){for(var e=0;e<this.obstacles.length;e++){var t=this.obstacles[e].cx,s=this.obstacles[e].cy,p=this.obstacles[e].r;if(n(r,new o.Point(t,s))<=p)return!1}return!(n(r,new o.Point(this.boundary.cx,this.boundary.cy))>this.boundary.r)},r}();e.Environment=p},607:(r,e,t)=>{"use strict";var o=t(801);function s(){new o.DisplayComponent("main_container").show()}s(),window.addDisplayComponent=s},134:(r,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Point=void 0;var t=function(r,e){this.x=r,this.y=e};e.Point=t,window.Point=t}},__webpack_module_cache__={};function __webpack_require__(r){if(__webpack_module_cache__[r])return __webpack_module_cache__[r].exports;var e=__webpack_module_cache__[r]={id:r,loaded:!1,exports:{}};return __webpack_modules__[r].call(e.exports,e,e.exports,__webpack_require__),e.loaded=!0,e.exports}__webpack_require__.nmd=r=>(r.paths=[],r.children||(r.children=[]),r),__webpack_require__(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yb2JvdGljc2h3MXBhcnQ0LjIvLi9ub2RlX21vZHVsZXMvYWxnZWJyaXRlL2Rpc3QvYWxnZWJyaXRlLmpzIiwid2VicGFjazovL3JvYm90aWNzaHcxcGFydDQuMi8uL25vZGVfbW9kdWxlcy9iaWctaW50ZWdlci9CaWdJbnRlZ2VyLmpzIiwid2VicGFjazovL3JvYm90aWNzaHcxcGFydDQuMi8uL3NyYy9jYWxjdWxhdGlvbi50cyIsIndlYnBhY2s6Ly9yb2JvdGljc2h3MXBhcnQ0LjIvLi9zcmMvY2hhcnQudHMiLCJ3ZWJwYWNrOi8vcm9ib3RpY3NodzFwYXJ0NC4yLy4vc3JjL2NpcmNsZS50cyIsIndlYnBhY2s6Ly9yb2JvdGljc2h3MXBhcnQ0LjIvLi9zcmMvZGlzcGxheWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly9yb2JvdGljc2h3MXBhcnQ0LjIvLi9zcmMvZW52aXJvbm1lbnQudHMiLCJ3ZWJwYWNrOi8vcm9ib3RpY3NodzFwYXJ0NC4yLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL3JvYm90aWNzaHcxcGFydDQuMi8uL3NyYy9wb2ludC50cyIsIndlYnBhY2s6Ly9yb2JvdGljc2h3MXBhcnQ0LjIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcm9ib3RpY3NodzFwYXJ0NC4yL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vcm9ib3RpY3NodzFwYXJ0NC4yL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyIkIiwiQUJTIiwiQUREIiwiQURKIiwiQU5EIiwiQVBQUk9YUkFUSU8iLCJBUkNDT1MiLCJBUkNDT1NIIiwiQVJDU0lOIiwiQVJDU0lOSCIsIkFSQ1RBTiIsIkFSQ1RBTkgiLCJBUkciLCJBU1NVTUVfUkVBTF9WQVJJQUJMRVMiLCJBVE9NSVpFIiwiQVVUT0VYUEFORCIsIkJBS0UiLCJCRVNTRUxKIiwiQkVTU0VMWSIsIkJJTkRJTkciLCJCSU5PTUlBTCIsIkJJTk9NX2NoZWNrX2FyZ3MiLCJCVUYiLCJDMSIsIkMyIiwiQzMiLCJDNCIsIkM1IiwiQzYiLCJDRUlMSU5HIiwiQ0hFQ0siLCJDSE9PU0UiLCJDSVJDRVhQIiwiQ0xFQVIiLCJDTEVBUkFMTCIsIkNMRUFSUEFUVEVSTlMiLCJDTE9DSyIsIkNPRUZGIiwiQ09GQUNUT1IiLCJDT05ERU5TRSIsIkNPTkoiLCJDT05TIiwiQ09OVFJBQ1QiLCJDT1MiLCJDT1NIIiwiQ29uZGVuc2UiLCJERUJVRyIsIkRFQlVHX0FCUyIsIkRFQlVHX0FSRyIsIkRFQlVHX0NMT0NLRk9STSIsIkRFQlVHX0lNQUciLCJERUJVR19JUyIsIkRFQlVHX1BPV0VSIiwiREVCVUdfUkVDVCIsIkRFQ09NUCIsIkRFRklOVCIsIkRFR1JFRSIsIkRFTk9NSU5BVE9SIiwiREVSSVZBVElWRSIsIkRFVCIsIkRFVF9jaGVja19hcmciLCJESU0iLCJESVJBQyIsIkRJVklTT1JTIiwiRE8iLCJET1QiLCJET1VCTEUiLCJEUkFXIiwiRFJBV1giLCJEU09MVkUiLCJFIiwiRUlHRU4iLCJFSUdFTlZBTCIsIkVJR0VOVkVDIiwiRUlHX04iLCJFSUdfY2hlY2tfYXJnIiwiRUlHX3l5ZGQiLCJFSUdfeXlxcSIsIkVSRiIsIkVSRkMiLCJFVkFMIiwiRVhQIiwiRVhQQU5EIiwiRVhQQ09TIiwiRVhQU0lOIiwiRXZhbCIsIkV2YWxfRXZhbCIsIkV2YWxfYWJzIiwiRXZhbF9hZGQiLCJFdmFsX2FkaiIsIkV2YWxfYW5kIiwiRXZhbF9hcHByb3hyYXRpbyIsIkV2YWxfYXJjY29zIiwiRXZhbF9hcmNjb3NoIiwiRXZhbF9hcmNzaW4iLCJFdmFsX2FyY3NpbmgiLCJFdmFsX2FyY3RhbiIsIkV2YWxfYXJjdGFuaCIsIkV2YWxfYXJnIiwiRXZhbF9iZXNzZWxqIiwiRXZhbF9iZXNzZWx5IiwiRXZhbF9iaW5kaW5nIiwiRXZhbF9iaW5vbWlhbCIsIkV2YWxfY2VpbGluZyIsIkV2YWxfY2hlY2siLCJFdmFsX2Nob29zZSIsIkV2YWxfY2lyY2V4cCIsIkV2YWxfY2xlYXIiLCJFdmFsX2NsZWFyYWxsIiwiRXZhbF9jbGVhcnBhdHRlcm5zIiwiRXZhbF9jbG9jayIsIkV2YWxfY29lZmYiLCJFdmFsX2NvZmFjdG9yIiwiRXZhbF9jb25kZW5zZSIsIkV2YWxfY29uaiIsIkV2YWxfY29ucyIsIkV2YWxfY29udHJhY3QiLCJFdmFsX2NvcyIsIkV2YWxfY29zaCIsIkV2YWxfZGVjb21wIiwiRXZhbF9kZWZpbnQiLCJFdmFsX2RlZ3JlZSIsIkV2YWxfZGVub21pbmF0b3IiLCJFdmFsX2Rlcml2YXRpdmUiLCJFdmFsX2RldCIsIkV2YWxfZGltIiwiRXZhbF9kaXJhYyIsIkV2YWxfZGl2aXNvcnMiLCJFdmFsX2RvIiwiRXZhbF9kc29sdmUiLCJFdmFsX2VpZ2VuIiwiRXZhbF9laWdlbnZhbCIsIkV2YWxfZWlnZW52ZWMiLCJFdmFsX2VyZiIsIkV2YWxfZXJmYyIsIkV2YWxfZXhwIiwiRXZhbF9leHBhbmQiLCJFdmFsX2V4cGNvcyIsIkV2YWxfZXhwc2luIiwiRXZhbF9mYWN0b3IiLCJFdmFsX2ZhY3RvcmlhbCIsIkV2YWxfZmFjdG9ycG9seSIsIkV2YWxfZmlsdGVyIiwiRXZhbF9mbG9hdCIsIkV2YWxfZmxvb3IiLCJFdmFsX2ZvciIsIkV2YWxfZnVuY3Rpb25fcmVmZXJlbmNlIiwiRXZhbF9nYW1tYSIsIkV2YWxfZ2NkIiwiRXZhbF9oZXJtaXRlIiwiRXZhbF9oaWxiZXJ0IiwiRXZhbF9pbWFnIiwiRXZhbF9pbmRleCIsIkV2YWxfaW5uZXIiLCJFdmFsX2ludGVncmFsIiwiRXZhbF9pbnYiLCJFdmFsX2ludmciLCJFdmFsX2lzaW50ZWdlciIsIkV2YWxfaXNwcmltZSIsIkV2YWxfbGFndWVycmUiLCJFdmFsX2xjbSIsIkV2YWxfbGVhZGluZyIsIkV2YWxfbGVnZW5kcmUiLCJFdmFsX2xvZyIsIkV2YWxfbG9va3VwIiwiRXZhbF9tb2QiLCJFdmFsX211bHRpcGx5IiwiRXZhbF9ub2V4cGFuZCIsIkV2YWxfbm90IiwiRXZhbF9ucm9vdHMiLCJFdmFsX251bWJlciIsIkV2YWxfbnVtZXJhdG9yIiwiRXZhbF9vcGVyYXRvciIsIkV2YWxfb3IiLCJFdmFsX291dGVyIiwiRXZhbF9wYXR0ZXJuIiwiRXZhbF9wYXR0ZXJuc2luZm8iLCJFdmFsX3BvbGFyIiwiRXZhbF9wb3dlciIsIkV2YWxfcHJlZGljYXRlIiwiRXZhbF9wcmltZSIsIkV2YWxfcHJpbnQiLCJFdmFsX3ByaW50MmRhc2NpaSIsIkV2YWxfcHJpbnRjb21wdXRlciIsIkV2YWxfcHJpbnRodW1hbiIsIkV2YWxfcHJpbnRsYXRleCIsIkV2YWxfcHJpbnRsaXN0IiwiRXZhbF9wcm9kdWN0IiwiRXZhbF9xdW90ZSIsIkV2YWxfcXVvdGllbnQiLCJFdmFsX3JhbmsiLCJFdmFsX3JhdGlvbmFsaXplIiwiRXZhbF9yZWFsIiwiRXZhbF9yZWN0IiwiRXZhbF9yb290cyIsIkV2YWxfcm91bmQiLCJFdmFsX3NldHEiLCJFdmFsX3NnbiIsIkV2YWxfc2hhcGUiLCJFdmFsX3NpbGVudHBhdHRlcm4iLCJFdmFsX3NpbWZhYyIsIkV2YWxfc2ltcGxpZnkiLCJFdmFsX3NpbiIsIkV2YWxfc2luaCIsIkV2YWxfc3FydCIsIkV2YWxfc3RvcCIsIkV2YWxfc3Vic3QiLCJFdmFsX3N1bSIsIkV2YWxfc3ltIiwiRXZhbF9zeW1ib2xzaW5mbyIsIkV2YWxfdGFuIiwiRXZhbF90YW5oIiwiRXZhbF90YXlsb3IiLCJFdmFsX3RlbnNvciIsIkV2YWxfdGVzdCIsIkV2YWxfdGVzdGVxIiwiRXZhbF90ZXN0Z2UiLCJFdmFsX3Rlc3RndCIsIkV2YWxfdGVzdGxlIiwiRXZhbF90ZXN0bHQiLCJFdmFsX3RyYW5zcG9zZSIsIkV2YWxfdW5pdCIsIkV2YWxfdXNlcl9mdW5jdGlvbiIsIkV2YWxfemVybyIsIkV2YWxwb2x5IiwiRkFDVE9SIiwiRkFDVE9SSUFMIiwiRkFDVE9SUE9MWSIsIkZJTFRFUiIsIkZMT0FURiIsIkZMT09SIiwiRk9SIiwiRk9SQ0VfRklYRURfUFJJTlRPVVQiLCJGVU5DVElPTiIsIkZpbmQiLCJHQU1NQSIsIkdDRCIsIkhFUk1JVEUiLCJISUxCRVJUIiwiSU1BRyIsIklOREVYIiwiSU5ORVIiLCJJTlRFR1JBTCIsIklOViIsIklOVkciLCJJTlZfY2hlY2tfYXJnIiwiSU5WX2RlY29tcCIsIklTSU5URUdFUiIsIklTUFJJTUUiLCJMQUdVRVJSRSIsIkxBU1QiLCJMQVNUXzJEQVNDSUlfUFJJTlQiLCJMQVNUX0ZVTExfUFJJTlQiLCJMQVNUX0xBVEVYX1BSSU5UIiwiTEFTVF9MSVNUX1BSSU5UIiwiTEFTVF9QTEFJTl9QUklOVCIsIkxBU1RfUFJJTlQiLCJMQ00iLCJMRUFESU5HIiwiTEVHRU5EUkUiLCJMT0ciLCJMT09LVVAiLCJNIiwiTUFYRElNIiwiTUFYUFJJTUVUQUIiLCJNQVhfQ09OU0VDVVRJVkVfQVBQTElDQVRJT05TX09GX0FMTF9SVUxFUyIsIk1BWF9DT05TRUNVVElWRV9BUFBMSUNBVElPTlNfT0ZfU0lOR0xFX1JVTEUiLCJNQVhfRklYRURfUFJJTlRPVVRfRElHSVRTIiwiTUFYX1BST0dSQU1fU0laRSIsIk1FUVVBTCIsIk1FVEFBIiwiTUVUQUIiLCJNRVRBWCIsIk1MRU5HVEgiLCJNT0QiLCJNU0lHTiIsIk1VTFRJUExZIiwiTVpFUk8iLCJOIiwiTklMIiwiTk9UIiwiTlJPT1RTIiwiTlJPT1RTX0FCUyIsIk5ST09UU19ERUxUQSIsIk5ST09UU19FUFNJTE9OIiwiTlJPT1RTX1JBTkRPTSIsIk5ST09UU19ZTUFYIiwiTlJPT1RTX2RpdnBvbHkiLCJOU1lNIiwiTlVNIiwiTlVNQkVSIiwiTlVNRVJBVE9SIiwiT1BFUkFUT1IiLCJPUiIsIk9VVEVSIiwiUEFUVEVSTiIsIlBBVFRFUk5TSU5GTyIsIlBJIiwiUE9MQVIiLCJQT1dFUiIsIlBSSU1FIiwiUFJJTlQiLCJQUklOVDJEQVNDSUkiLCJQUklOVEZVTEwiLCJQUklOVExBVEVYIiwiUFJJTlRMSVNUIiwiUFJJTlRNT0RFXzJEQVNDSUkiLCJQUklOVE1PREVfQ09NUFVURVIiLCJQUklOVE1PREVfSFVNQU4iLCJQUklOVE1PREVfTEFURVgiLCJQUklOVE1PREVfTElTVCIsIlBSSU5UT1VUUkVTVUxUIiwiUFJJTlRQTEFJTiIsIlBSSU5UX0xFQVZFX0VfQUxPTkUiLCJQUklOVF9MRUFWRV9YX0FMT05FIiwiUFJPRFVDVCIsIlFVT1RFIiwiUVVPVElFTlQiLCJSQU5LIiwiUkFUSU9OQUxJWkUiLCJSRUFMIiwiUk9PVFMiLCJST1VORCIsIlNFQ1JFVFgiLCJTRUxGVEVTVCIsIlNFVFEiLCJTR04iLCJTSEFQRSIsIlNJTEVOVFBBVFRFUk4iLCJTSU1QTElGWSIsIlNJTiIsIlNJTkgiLCJTUEFDRV9CRVRXRUVOX0NPTFVNTlMiLCJTUEFDRV9CRVRXRUVOX1JPV1MiLCJTUVJUIiwiU1RPUCIsIlNUUiIsIlNVQlNUIiwiU1VNIiwiU1lNIiwiU1lNQk9MU0lORk8iLCJTWU1CT0xfQSIsIlNZTUJPTF9BX1VOREVSU0NPUkUiLCJTWU1CT0xfQiIsIlNZTUJPTF9CX1VOREVSU0NPUkUiLCJTWU1CT0xfQyIsIlNZTUJPTF9EIiwiU1lNQk9MX0kiLCJTWU1CT0xfSURFTlRJVFlfTUFUUklYIiwiU1lNQk9MX0oiLCJTWU1CT0xfTiIsIlNZTUJPTF9SIiwiU1lNQk9MX1MiLCJTWU1CT0xfVCIsIlNZTUJPTF9YIiwiU1lNQk9MX1hfVU5ERVJTQ09SRSIsIlNZTUJPTF9ZIiwiU1lNQk9MX1oiLCJUQU4iLCJUQU5IIiwiVEFZTE9SIiwiVEVOU09SIiwiVEVTVCIsIlRFU1RFUSIsIlRFU1RHRSIsIlRFU1RHVCIsIlRFU1RMRSIsIlRFU1RMVCIsIlRJTUlOR19ERUJVR1MiLCJUT1MiLCJUUkFDRSIsIlRSQU5TUE9TRSIsIlRfRE9VQkxFIiwiVF9FUSIsIlRfRlVOQ1RJT04iLCJUX0dURVEiLCJUX0lOVEVHRVIiLCJUX0xURVEiLCJUX05FUSIsIlRfTkVXTElORSIsIlRfUVVPVEFTU0lHTiIsIlRfU1RSSU5HIiwiVF9TWU1CT0wiLCJVIiwiVU5JVCIsIlVTUl9TWU1CT0xTIiwiVkVSU0lPTiIsIllNQVgiLCJZWUUiLCJZWVJFQ1QiLCJaRVJPIiwiX19lbWl0X2NoYXIiLCJfX2VtaXRfc3RyIiwiX19mYWN0b3JfYWRkIiwiX19mYWN0b3JpYWwiLCJfX2lzX25lZ2F0aXZlIiwiX19pc19yYWRpY2FsX251bWJlciIsIl9fbGNtIiwiX19sZWdlbmRyZSIsIl9fbGVnZW5kcmUyIiwiX19sZWdlbmRyZTMiLCJfX25vcm1hbGl6ZV9yYWRpY2FsX2ZhY3RvcnMiLCJfX3JhdGlvbmFsaXplX3RlbnNvciIsIl9wcmludCIsImFicyIsImFic1ZhbEZsb2F0IiwiYWJzdmFsIiwiYWJzdmFsX3RlbnNvciIsImFkZCIsImFkZFN5bWJvbExlZnRPZkFzc2lnbm1lbnQiLCJhZGRTeW1ib2xSaWdodE9mQXNzaWdubWVudCIsImFkZF9hbGwiLCJhZGRfZmFjdG9yX3RvX2FjY3VtdWxhdG9yIiwiYWRkX251bWJlcnMiLCJhZGRfdGVybXMiLCJhZGRmIiwiYWRqIiwiYWxsb2NfdGVuc29yIiwiYWxsb2NhdGVkSWQiLCJhbnlfZGVub21pbmF0b3JzIiwiYXBwcm94QWxsIiwiYXBwcm94TG9ncyIsImFwcHJveExvZ3NPZlJhdGlvbmFscyIsImFwcHJveE9uZVJhdGlvT25seSIsImFwcHJveFJhZGljYWxzIiwiYXBwcm94UmFkaWNhbHNPZlJhdGlvbmFscyIsImFwcHJveFJhdGlvbmFsc09mTG9ncyIsImFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFIiwiYXBwcm94UmF0aW9uYWxzT2ZQb3dlcnNPZlBJIiwiYXBwcm94UmF0aW9uYWxzT2ZSYWRpY2FscyIsImFwcHJveFNpbmVPZlJhdGlvbmFsTXVsdGlwbGVzT2ZQSSIsImFwcHJveFNpbmVPZlJhdGlvbmFscyIsImFwcHJveFRyaWdvbm9tZXRyaWMiLCJhcHByb3hfanVzdF9hbl9pbnRlZ2VyIiwiYXBwcm94X2xvZ2FyaXRobXNPZlJhdGlvbmFscyIsImFwcHJveF9ub3RoaW5nVXNlZnVsIiwiYXBwcm94X3JhZGljYWxPZlJhdGlvIiwiYXBwcm94X3JhdGlvT2ZSYWRpY2FsIiwiYXBwcm94X3JhdGlvbmFsT2ZFIiwiYXBwcm94X3JhdGlvbmFsT2ZQaSIsImFwcHJveF9yYXRpb25hbHNPZkxvZ2FyaXRobXMiLCJhcHByb3hfc2luZV9vZl9waV90aW1lc19yYXRpb25hbCIsImFwcHJveF9zaW5lX29mX3JhdGlvbmFsIiwiYXBwcm94cmF0aW9SZWN1cnNpdmUiLCJhcmNjb3MiLCJhcmNjb3NoIiwiYXJjc2luIiwiYXJjc2luaCIsImFyY3RhbiIsImFyY3RhbmgiLCJhcmV1bml2YXJwb2x5c2ZhY3RvcmVkb3JleHBhbmRlZGZvcm0iLCJhcmciLCJhcmdsaXN0IiwiYXNzaWdubWVudEZvdW5kIiwiYXZvaWRDYWxjdWxhdGluZ1Bvd2Vyc0ludG9BcmN0YW5zIiwiYmFrZSIsImJha2VfcG9seSIsImJha2VfcG9seV90ZXJtIiwiYmVzc2VsaiIsImJlc3NlbHkiLCJiaWdJbnQiLCJiaWdudW1fZmFjdG9yaWFsIiwiYmlnbnVtX2Zsb2F0IiwiYmlnbnVtX3Bvd2VyX251bWJlciIsImJpZ251bV9zY2FuX2Zsb2F0IiwiYmlnbnVtX3NjYW5faW50ZWdlciIsImJpZ251bV90cnVuY2F0ZSIsImJpbmRpbmciLCJiaW5vbWlhbCIsImJ1ZmZlciIsImJ1aWxkX3RlbnNvciIsImNhYWRkciIsImNhYWRyIiwiY2FhciIsImNhZGFkZHIiLCJjYWRhZHIiLCJjYWRhciIsImNhZGRhZGRyIiwiY2FkZGFkciIsImNhZGRhciIsImNhZGRkZHIiLCJjYWRkZHIiLCJjYWRkciIsImNhZHIiLCJjYWxsZWRfZnJvbV9BbGdlYnJhX2Jsb2NrIiwiY2FyIiwiY2RhZGRyIiwiY2RhZHIiLCJjZGFyIiwiY2RkYWRkciIsImNkZGFyIiwiY2RkZGFkZHIiLCJjZGRkZHIiLCJjZGRkciIsImNkZHIiLCJjZHIiLCJjZWlsaW5nIiwiY2hhaW5PZlVzZXJTeW1ib2xzTm90RnVuY3Rpb25zQmVpbmdFdmFsdWF0ZWQiLCJjaGFyVGFiSW5kZXgiLCJjaGFydGFiIiwiY2hlY2tGbG9hdEhhc1dvcmtlZE91dENvbXBsZXRlbHkiLCJjaGVja19lc2NfZmxhZyIsImNoZWNrX3N0YWNrIiwiY2hlY2tfdGVuc29yX2RpbWVuc2lvbnMiLCJjaG9vc2UiLCJjaG9vc2VfY2hlY2tfYXJncyIsImNpcmNleHAiLCJjbGVhckFsZ2VicmFFbnZpcm9ubWVudCIsImNsZWFyUmVuYW1lZFZhcmlhYmxlc1RvQXZvaWRCaW5kaW5nVG9FeHRlcm5hbFNjb3BlIiwiY2xlYXJfc3ltYm9scyIsImNsZWFyX3Rlcm0iLCJjbGVhcmFsbCIsImNsb2NrZm9ybSIsImNtcEdseXBocyIsImNtcF9hcmdzIiwiY21wX2V4cHIiLCJjbXBfdGVybXMiLCJjbXBfdGVybXNfY291bnQiLCJjb2RlR2VuIiwiY29lZmYiLCJjb2ZhY3RvciIsImNvbGxlY3RMYXRleFN0cmluZ0Zyb21SZXR1cm5WYWx1ZSIsImNvbGxlY3RVc2VyU3ltYm9scyIsImNvbWJpbmVfZmFjdG9ycyIsImNvbWJpbmVfZ2FtbWFzIiwiY29tYmluZV90ZXJtcyIsImNvbXBhcmVTdGF0ZSIsImNvbXBhcmVfbnVtYmVycyIsImNvbXBhcmVfcmF0aW9uYWxzIiwiY29tcGFyZV90ZW5zb3JzIiwiY29tcGF0aWJsZSIsImNvbXB1dGVEZXBlbmRlbmNpZXNGcm9tQWxnZWJyYSIsImNvbXB1dGVSZXN1bHRzQW5kSmF2YVNjcmlwdEZyb21BbGdlYnJhIiwiY29tcHV0ZV9mYSIsImNvbmp1Z2F0ZSIsImNvbnMiLCJjb25zQ291bnQiLCJjb250cmFjdCIsImNvbnZlcnRfYmlnbnVtX3RvX2RvdWJsZSIsImNvbnZlcnRfcmF0aW9uYWxfdG9fZG91YmxlIiwiY29weV90ZW5zb3IiLCJjb3NpbmUiLCJjb3NpbmVfb2ZfYW5nbGUiLCJjb3NpbmVfb2ZfYW5nbGVfc3VtIiwiY291bnQiLCJjb3VudE9jY3VycmVuY2VzT2ZTeW1ib2wiLCJjb3VudF9kZW5vbWluYXRvcnMiLCJjb3VudGVyIiwiY291bnRzaXplIiwiZF9zY2FsYXJfc2NhbGFyIiwiZF9zY2FsYXJfc2NhbGFyXzEiLCJkX3NjYWxhcl90ZW5zb3IiLCJkX3RlbnNvcl9zY2FsYXIiLCJkX3RlbnNvcl90ZW5zb3IiLCJkYWJzIiwiZGFyY2NvcyIsImRhcmNjb3NoIiwiZGFyY3NpbiIsImRhcmNzaW5oIiwiZGFyY3RhbiIsImRhcmN0YW5oIiwiZGJlc3NlbGowIiwiZGJlc3NlbGpuIiwiZGJlc3NlbHkwIiwiZGJlc3NlbHluIiwiZGNvcyIsImRjb3NoIiwiZGQiLCJkZWNvbXAiLCJkZWNvbXBfcHJvZHVjdCIsImRlY29tcF9zdW0iLCJkZWZpbmVTb21lSGFuZHlDb25zdGFudHMiLCJkZWZpbmVfdXNlcl9mdW5jdGlvbiIsImRlZm4iLCJkZWZuX3N0ciIsImRlZ3JlZSIsImRlbm9taW5hdG9yIiwiZGVyZiIsImRlcmZjIiwiZGVyaXZhdGl2ZSIsImRlcml2YXRpdmVfb2ZfaW50ZWdyYWwiLCJkZXQiLCJkZXRlcm1pbmFudCIsImRldGciLCJkZnVuY3Rpb24iLCJkaGVybWl0ZSIsImRpcmFjIiwiZGlzcGxheSIsImRpc3BsYXlfZmxhZyIsImRpc3BsYXljaGFyIiwiZGl2aWRlIiwiZGl2aWRlX251bWJlcnMiLCJkaXZpc29ycyIsImRpdmlzb3JzX29uc3RhY2siLCJkaXZwb2x5IiwiZGxvZyIsImRvX2NsZWFyUGF0dGVybnMiLCJkb19jbGVhcmFsbCIsImRvX3NpbXBsaWZ5X25lc3RlZF9yYWRpY2FscyIsImRvbnRDcmVhdGVOZXdSYWRpY2Fsc0luRGVub21pbmF0b3JXaGVuRXZhbGluZ011bHRpcGxpY2F0aW9uIiwiZG90cHJvZF91bmljb2RlIiwiZG91YmxlVG9SZWFzb25hYmxlU3RyaW5nIiwiZHBvdyIsImRwb3dlciIsImRwcm9kdWN0IiwiZHJhd19mbGFnIiwiZHJhd19zdG9wX3JldHVybiIsImRzZ24iLCJkc2luIiwiZHNpbmgiLCJkc3VtIiwiZHRhbiIsImR0YW5oIiwiZHVwbCIsImVpZ2VuIiwiZWxlbG1JbmRleCIsImVsZW0iLCJlbWl0X2Rlbm9taW5hdG9yIiwiZW1pdF9kZW5vbWluYXRvcnMiLCJlbWl0X2V4cHIiLCJlbWl0X2ZhY3RvciIsImVtaXRfZmFjdG9yaWFsX2Z1bmN0aW9uIiwiZW1pdF9mbGF0X3RlbnNvciIsImVtaXRfZnJhY3Rpb24iLCJlbWl0X2Z1bmN0aW9uIiwiZW1pdF9pbmRleF9mdW5jdGlvbiIsImVtaXRfbXVsdGlwbHkiLCJlbWl0X251bWJlciIsImVtaXRfbnVtZXJhdG9ycyIsImVtaXRfbnVtZXJpY2FsX2ZyYWN0aW9uIiwiZW1pdF9wb3dlciIsImVtaXRfc3RyaW5nIiwiZW1pdF9zdWJleHByIiwiZW1pdF9zeW1ib2wiLCJlbWl0X3RlbnNvciIsImVtaXRfdGVuc29yX2lubmVyIiwiZW1pdF90ZXJtIiwiZW1pdF90b3BfZXhwciIsImVtaXRfdW5zaWduZWRfZXhwciIsImVtaXRfeCIsImVxdWFsIiwiZXF1YWxuIiwiZXF1YWxxIiwiZXJmYyIsImVycm9yTWVzc2FnZSIsImVzY19mbGFnIiwiZXZhbHVhdGluZ0FzRmxvYXRzIiwiZXZhbHVhdGluZ1BvbGFyIiwiZXhlYyIsImV4cGFuZCIsImV4cGFuZF9nZXRfQSIsImV4cGFuZF9nZXRfQUYiLCJleHBhbmRfZ2V0X0IiLCJleHBhbmRfZ2V0X0MiLCJleHBhbmRfZ2V0X0NGIiwiZXhwYW5kX3RlbnNvciIsImV4cGFuZGluZyIsImV4cGNvcyIsImV4cG9uZW50aWFsIiwiZXhwcl9sZXZlbCIsImV4cHNpbiIsImYxIiwiZjEwIiwiZjIiLCJmMyIsImY0IiwiZjUiLCJmOSIsImZfZXF1YWxzX2EiLCJmYWN0b3IiLCJmYWN0b3JfYSIsImZhY3Rvcl9hZ2FpbiIsImZhY3Rvcl9iIiwiZmFjdG9yX251bWJlciIsImZhY3Rvcl9zbWFsbF9udW1iZXIiLCJmYWN0b3JfdGVybSIsImZhY3RvcmlhbCIsImZhY3RvcnBvbHkiLCJmYWN0b3JzIiwiZmFjdHBvbHlfZXhwbyIsImZpbGxfYnVmIiwiZmlsdGVyIiwiZmlsdGVyX21haW4iLCJmaWx0ZXJfc3VtIiwiZmlsdGVyX3RlbnNvciIsImZpbmREZXBlbmRlbmNpZXNJblNjcmlwdCIsImZpbmRQb3NzaWJsZUNsb2NrRm9ybSIsImZpbmRQb3NzaWJsZUV4cG9uZW50aWFsRm9ybSIsImZpbmRyb290IiwiZml4dXBfZnJhY3Rpb24iLCJmaXh1cF9wb3dlciIsImZsYWciLCJmbG9hdFRvUmF0aW9Sb3V0aW5lIiwiZm10X2luZGV4IiwiZm10X2xldmVsIiwiZm10X3giLCJmcmFtZSIsImZyZWV6ZSIsImZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrIiwiZ2FtbWEiLCJnYW1tYV9vZl9zdW0iLCJnYW1tYWYiLCJnY2QiLCJnY2RfbWFpbiIsImdjZF9udW1iZXJzIiwiZ2NkX3BvbHlzIiwiZ2NkX3Bvd2Vyc193aXRoX3NhbWVfYmFzZSIsImdjZF9wcm9kdWN0X3Byb2R1Y3QiLCJnY2RfcHJvZHVjdF9zdW0iLCJnY2Rfc3VtIiwiZ2NkX3N1bV9wcm9kdWN0IiwiZ2NkX3N1bV9zdW0iLCJnZW4iLCJnZXRTaW1wbGVSb290cyIsImdldFN0YXRlSGFzaCIsImdldF9iaW5kaW5nIiwiZ2V0X2ZhY3Rvcl9mcm9tX2NvbXBsZXhfcm9vdCIsImdldF9mYWN0b3JfZnJvbV9yZWFsX3Jvb3QiLCJnZXRfaW5uZXJwcm9kX2ZhY3RvcnMiLCJnZXRfbmV4dF90b2tlbiIsImdldF9wcmludG5hbWUiLCJnZXRfc2l6ZSIsImdldF90b2tlbiIsImdldGRpc3BsYXlzdHIiLCJnbHlwaCIsImdwIiwiZ3Vlc3MiLCJoYXNJbWFnaW5hcnlDb2VmZiIsImhhc05lZ2F0aXZlUmF0aW9uYWxFeHBvbmVudCIsImhhc2hfYWRkaXRpb24iLCJoYXNoX2Z1bmN0aW9uIiwiaGFzaF9tdWx0aXBsaWNhdGlvbiIsImhhc2hfcG93ZXIiLCJoYXNoY29kZV92YWx1ZXMiLCJoYXNoZWRfaXRhYiIsImhlcm1pdGUiLCJoaWxiZXJ0IiwiaTEiLCJpbWFnIiwiaW1hZ2luYXJ5dW5pdCIsImluZGV4X2Z1bmN0aW9uIiwiaW5pdCIsImluaXROUm9vdHMiLCJpbml0ZWQiLCJpbm5lciIsImlubmVyX2YiLCJpbnB1dF9zdHIiLCJpbnRlZ3JhbCIsImludGVncmFsX29mX2Zvcm0iLCJpbnRlZ3JhbF9vZl9wcm9kdWN0IiwiaW50ZWdyYWxfb2Zfc3VtIiwiaW52IiwiaW52ZXJzZSIsImludmVydF9udW1iZXIiLCJpbnZnIiwiaXNOdW1iZXJPbmVPdmVyU29tZXRoaW5nIiwiaXNOdW1lcmljQXRvbSIsImlzTnVtZXJpY0F0b21PclRlbnNvciIsImlzU2ltcGxlUm9vdCIsImlzU21hbGwiLCJpc1N5bWJvbExlZnRPZkFzc2lnbm1lbnQiLCJpc1N5bWJvbFJlY2xhaW1hYmxlIiwiaXNaZXJvQXRvbSIsImlzWmVyb0F0b21PclRlbnNvciIsImlzWmVyb0xpa2VPck5vblplcm9MaWtlT3JVbmRldGVybWluZWQiLCJpc1plcm9UZW5zb3IiLCJpc19kZW5vbWluYXRvciIsImlzX2ZhY3RvciIsImlzX3NtYWxsX2ludGVnZXIiLCJpc19zcXVhcmVfbWF0cml4IiwiaXNfdXNyX3N5bWJvbCIsImlzYWRkIiwiaXNhbG51bW9ydW5kZXJzY29yZSIsImlzYWxwaGEiLCJpc2FscGhhT3JVbmRlcnNjb3JlIiwiaXNjb21wbGV4bnVtYmVyIiwiaXNjb21wbGV4bnVtYmVyZG91YmxlIiwiaXNjb25zIiwiaXNkZW5vbWluYXRvciIsImlzZGlnaXQiLCJpc2RvdWJsZSIsImlzZXZlbmludGVnZXIiLCJpc2ZhY3RvciIsImlzZmFjdG9yaWFsIiwiaXNmbG9hdGluZyIsImlzZnJhY3Rpb24iLCJpc2lkZW50aXR5bWF0cml4IiwiaXNpbWFnaW5hcnludW1iZXIiLCJpc2ltYWdpbmFyeW51bWJlcmRvdWJsZSIsImlzaW1hZ2luYXJ5dW5pdCIsImlzaW5uZXJvcmRvdCIsImlzaW50ZWdlciIsImlzaW50ZWdlcmZhY3RvciIsImlzaW50ZWdlcm9yaW50ZWdlcmZsb2F0IiwiaXNpbnYiLCJpc2tleXdvcmQiLCJpc21pbnVzb25lIiwiaXNtaW51c29uZW92ZXJzcXJ0dHdvIiwiaXNtaW51c29uZW92ZXJ0d28iLCJpc211bHRpcGx5IiwiaXNuZWdhdGl2ZSIsImlzbmVnYXRpdmVudW1iZXIiLCJpc25lZ2F0aXZldGVybSIsImlzbm9ubmVnYXRpdmVpbnRlZ2VyIiwiaXNucGkiLCJpc29uZSIsImlzb25lb3ZlciIsImlzb25lb3ZlcnNxcnR0d28iLCJpc29uZW92ZXJ0d28iLCJpc3BsdXNvbmUiLCJpc3BsdXN0d28iLCJpc3BvbHlleHBhbmRlZGZvcm0iLCJpc3BvbHlleHBhbmRlZGZvcm1fZXhwciIsImlzcG9seWV4cGFuZGVkZm9ybV9mYWN0b3IiLCJpc3BvbHlleHBhbmRlZGZvcm1fdGVybSIsImlzcG9seWZhY3RvcmVkb3JleHBhbmRlZGZvcm0iLCJpc3BvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtX2ZhY3RvciIsImlzcG9seWZhY3RvcmVkb3JleHBhbmRlZGZvcm1fcG93ZXIiLCJpc3Bvc2ludCIsImlzcG9zaXRpdmVudW1iZXIiLCJpc3Bvd2VyIiwiaXNxdWFydGVydHVybiIsImlzcmF0aW9uYWwiLCJpc3NwYWNlIiwiaXNzdHIiLCJpc3N5bWJvbCIsImlzc3ltYm9saWMiLCJpc3RlbnNvciIsImlzdHJhbnNwb3NlIiwiaXN1bmRlcnNjb3JlIiwiaXN1bml2YXJwb2x5ZmFjdG9yZWRvcmV4cGFuZGVkZm9ybSIsIml0YWIiLCJpdGFsdV9oYXNoY29kZSIsImoxIiwibGFndWVycmUiLCJsYWd1ZXJyZTIiLCJsYXN0Rm91bmRTeW1ib2wiLCJsYXRleEVycm9yU2lnbiIsImxjbSIsImxlYWRpbmciLCJsZWdlbmRyZSIsImxlbmd0aCIsImxlc3NwIiwibGV2ZWwiLCJsaXN0IiwibGlzdExlbmd0aCIsImxvZ2FyaXRobSIsImxvZ2J1ZiIsImxvb2t1cHNUb3RhbCIsImx1X2RlY29tcCIsIm1hZGQiLCJtYWtlUG9zaXRpdmUiLCJtYWtlU2lnblNhbWVBcyIsIm1ha2VfaGFzaGVkX2l0YWIiLCJtYXNrIiwibWNtcCIsIm1jbXBpbnQiLCJtZGl2IiwibWRpdnJlbSIsIm1ldGFfbW9kZSIsIm1nY2QiLCJtaW5pX3NvbHZlIiwibWludCIsIm1tb2QiLCJtbXVsIiwibW9kIiwibW9uaWMiLCJtb3ZlIiwibW92ZVRvcyIsIm1wX2Nscl9iaXQiLCJtcF9kZW5vbWluYXRvciIsIm1wX251bWVyYXRvciIsIm1wX3NldF9iaXQiLCJtcG93IiwibXByaW1lIiwibXJvb3QiLCJtc2hpZnRyaWdodCIsIm1zdWIiLCJtdG90YWwiLCJtdWx0aW5vbWlhbF9zdW0iLCJtdWx0aXBseSIsIm11bHRpcGx5X2FsbCIsIm11bHRpcGx5X2FsbF9ub2V4cGFuZCIsIm11bHRpcGx5X2NvbnNlY3V0aXZlX2NvbnN0YW50cyIsIm11bHRpcGx5X2Rlbm9taW5hdG9ycyIsIm11bHRpcGx5X2Rlbm9taW5hdG9yc19mYWN0b3IiLCJtdWx0aXBseV9kZW5vbWluYXRvcnNfdGVybSIsIm11bHRpcGx5X25vZXhwYW5kIiwibXVsdGlwbHlfbnVtYmVycyIsIm5fZmFjdG9yX251bWJlciIsIm5lZ2F0ZSIsIm5lZ2F0ZV9leHBhbmQiLCJuZWdhdGVfbm9leHBhbmQiLCJuZWdhdGVfbnVtYmVyIiwibmV3X3N0cmluZyIsIm5ld2xpbmVfZmxhZyIsIm5pbF9zeW1ib2xzIiwibm9ybWFsaXNlRG90cyIsIm5vcm1hbGlzZWRDb2VmZiIsIm5vcm1hbGl6ZV9hbmdsZSIsIm5yb290c19hIiwibnJvb3RzX2IiLCJucm9vdHNfYyIsIm5yb290c19kZiIsIm5yb290c19keCIsIm5yb290c19mYSIsIm5yb290c19mYiIsIm5yb290c194IiwibnJvb3RzX3kiLCJudGVybXMiLCJudGhDYWRyIiwibnVtZXJhdG9yIiwibnVtZXJpY1Jvb3RPZlBvbHlub21pYWwiLCJvIiwib25lIiwib25lRWxlbWVudCIsIm9uZV9hc19kb3VibGUiLCJvdXRfYnVmIiwib3V0X2NvdW50Iiwib3V0X29mX21lbW9yeSIsIm91dGVyIiwicDAiLCJwMSIsInAyIiwicDMiLCJwNCIsInA1IiwicDYiLCJwNyIsInA4IiwicDkiLCJwYXJzZSIsInBhcnNlX2ludGVybmFsIiwicGFyc2VfcDEiLCJwYXJzZV9wMiIsInBhcnNlX3RpbWVfc2ltcGxpZmljYXRpb25zIiwicGFydGl0aW9uIiwicGF0dGVybkhhc0JlZW5Gb3VuZCIsInBhdHRlcm5zaW5mbyIsInBlZWsiLCJwZXJmb3JtaW5nX3Jvb3RzIiwicG9sYXIiLCJwb2xhclJlY3RBTWludXNPbmVCYXNlIiwicG9seWNvZWZmIiwicG9seWZvcm0iLCJwb3AiLCJwb3BfZG91YmxlIiwicG9wX2ZyYW1lIiwicG9wX2ludGVnZXIiLCJwb3dlciIsInBvd2VyX3N0ciIsInBvd2VyX3N1bSIsInBvd2VyX3RlbnNvciIsInByZWRlZmluZWRTeW1ib2xzSW5HbG9iYWxTY29wZV9kb05vdFRyYWNrSW5EZXBlbmRlbmNpZXMiLCJwcmltZSIsInByaW1ldGFiIiwicHJpbnQyZGFzY2lpIiwicHJpbnRNb2RlIiwicHJpbnRfQUJTX2xhdGV4IiwicHJpbnRfQVJDQ09TX2NvZGVnZW4iLCJwcmludF9BUkNTSU5fY29kZWdlbiIsInByaW50X0FSQ1RBTl9jb2RlZ2VuIiwicHJpbnRfQklOT01JQUxfbGF0ZXgiLCJwcmludF9DT1NfY29kZWdlbiIsInByaW50X0RFRklOVF9sYXRleCIsInByaW50X0RPVF9jb2RlZ2VuIiwicHJpbnRfRE9UX2xhdGV4IiwicHJpbnRfRE9fY29kZWdlbiIsInByaW50X0ZPUl9jb2RlZ2VuIiwicHJpbnRfSU5WX2NvZGVnZW4iLCJwcmludF9JTlZfbGF0ZXgiLCJwcmludF9QUk9EVUNUX2NvZGVnZW4iLCJwcmludF9QUk9EVUNUX2xhdGV4IiwicHJpbnRfU0VUUV9jb2RlZ2VuIiwicHJpbnRfU0lOX2NvZGVnZW4iLCJwcmludF9TUVJUX2xhdGV4IiwicHJpbnRfU1VNX2NvZGVnZW4iLCJwcmludF9TVU1fbGF0ZXgiLCJwcmludF9UQU5fY29kZWdlbiIsInByaW50X1RFU1RFUV9sYXRleCIsInByaW50X1RFU1RHRV9sYXRleCIsInByaW50X1RFU1RHVF9sYXRleCIsInByaW50X1RFU1RMRV9sYXRleCIsInByaW50X1RFU1RMVF9sYXRleCIsInByaW50X1RFU1RfY29kZWdlbiIsInByaW50X1RFU1RfbGF0ZXgiLCJwcmludF9UUkFOU1BPU0VfY29kZWdlbiIsInByaW50X1RSQU5TUE9TRV9sYXRleCIsInByaW50X1VOSVRfY29kZWdlbiIsInByaW50X2Ffb3Zlcl9iIiwicHJpbnRfYmFzZSIsInByaW50X2Jhc2Vfb2ZfZGVub20iLCJwcmludF9jaGFyIiwicHJpbnRfZGVub20iLCJwcmludF9kb3VibGUiLCJwcmludF9leHBvX29mX2Rlbm9tIiwicHJpbnRfZXhwb25lbnQiLCJwcmludF9leHByIiwicHJpbnRfZmFjdG9yIiwicHJpbnRfZmFjdG9yaWFsX2Z1bmN0aW9uIiwicHJpbnRfZ2x5cGhzIiwicHJpbnRfaW5kZXhfZnVuY3Rpb24iLCJwcmludF9saXN0IiwicHJpbnRfbXVsdGlwbHlfc2lnbiIsInByaW50X251bWJlciIsInByaW50X3Bvd2VyIiwicHJpbnRfc3RyIiwicHJpbnRfc3ViZXhwciIsInByaW50X3RlbnNvciIsInByaW50X3RlbnNvcl9pbm5lciIsInByaW50X3RlbnNvcl9pbm5lcl9sYXRleCIsInByaW50X3RlbnNvcl9sYXRleCIsInByaW50X3Rlcm0iLCJwcmludGNoYXIiLCJwcmludGNoYXJfbm93cmFwIiwicHJpbnRsaW5lIiwicHJvZ3JhbV9idWYiLCJwcm9tb3RlX3RlbnNvciIsInB1c2giLCJwdXNoVHJ5Tm90VG9EdXBsaWNhdGUiLCJwdXNoX2NhcnMiLCJwdXNoX2RvdWJsZSIsInB1c2hfZmFjdG9yIiwicHVzaF9mcmFtZSIsInB1c2hfaWRlbnRpdHlfbWF0cml4IiwicHVzaF9pbnRlZ2VyIiwicHVzaF9yYXRpb25hbCIsInB1c2hfc3ltYm9sIiwicHVzaF90ZXJtX2ZhY3RvcnMiLCJwdXNoX3Rlcm1zIiwicHVzaF96ZXJvX21hdHJpeCIsInFhZGQiLCJxZGl2IiwicW11bCIsInFwb3ciLCJxcG93ZiIsInF1aWNrZmFjdG9yIiwicXVpY2twb3dlciIsInJhdGlvbmFsIiwicmF0aW9uYWxpemUiLCJyYXRpb25hbGl6ZV9jb2VmZmljaWVudHMiLCJyZWFsIiwicmVjaXByb2NhdGUiLCJyZWN0IiwicmVjdXJzaW9uTGV2ZWxOZXN0ZWRSYWRpY2Fsc1JlbW92YWwiLCJyZWN1cnNpdmVEZXBlbmRlbmNpZXMiLCJyZWYiLCJyZWYxIiwicmVtZW1iZXJQcmludCIsInJlbW92ZV9uZWdhdGl2ZV9leHBvbmVudHMiLCJyZXNldF9hZnRlcl9lcnJvciIsInJlc3RvcmUiLCJyZXN0b3JlTWV0YUJpbmRpbmdzIiwicmV3cml0ZV9hcmdzIiwicmV3cml0ZV9hcmdzX3RlbnNvciIsInJvb3RzIiwicm9vdHMyIiwicm9vdHMzIiwicnVuIiwicnVuVXNlckRlZmluZWRTaW1wbGlmaWNhdGlvbnMiLCJzYXZlIiwic2F2ZU1ldGFCaW5kaW5ncyIsInNjYWxhcl90aW1lc190ZW5zb3IiLCJzY2FuIiwic2Nhbl9lcnJvciIsInNjYW5fZXhwcmVzc2lvbiIsInNjYW5fZmFjdG9yIiwic2Nhbl9mdW5jdGlvbl9jYWxsX3dpdGhfZnVuY3Rpb25fbmFtZSIsInNjYW5fZnVuY3Rpb25fY2FsbF93aXRob3V0X2Z1bmN0aW9uX25hbWUiLCJzY2FuX2luZGV4Iiwic2Nhbl9tZXRhIiwic2Nhbl9wb3dlciIsInNjYW5fcmVsYXRpb24iLCJzY2FuX3N0bXQiLCJzY2FuX3N0ciIsInNjYW5fc3RyaW5nIiwic2Nhbl9zdWJleHByIiwic2Nhbl9zeW1ib2wiLCJzY2FuX3RlbnNvciIsInNjYW5fdGVybSIsInNjYW5uZWQiLCJzY2FubmluZ1BhcmFtZXRlcnMiLCJzZXRNIiwic2V0U2lnblRvIiwic2V0X2JpbmRpbmciLCJzZXRfY29tcG9uZW50Iiwic2V0cV9pbmRleGVkIiwic2ZhY19wcm9kdWN0Iiwic2ZhY19wcm9kdWN0X2YiLCJzZ24iLCJzaGFwZSIsInNob3dfcG93ZXJfZGVidWciLCJzaWduIiwic2lnbl9vZl90ZXJtIiwic2ltZmFjIiwic2ltZmFjX3Rlcm0iLCJzaW1wbGVDb21wbGV4aXR5TWVhc3VyZSIsInNpbXBsaWZ5Iiwic2ltcGxpZnlGb3JDb2RlR2VuZXJhdGlvbiIsInNpbXBsaWZ5XzFfaW5fcHJvZHVjdHMiLCJzaW1wbGlmeV9tYWluIiwic2ltcGxpZnlfbmVzdGVkX3JhZGljYWxzIiwic2ltcGxpZnlfcG9sYXIiLCJzaW1wbGlmeV9wb2xhclJlY3QiLCJzaW1wbGlmeV9yYXRpb25hbF9leHByZXNzaW9ucyIsInNpbXBsaWZ5X3JlY3RUb0Nsb2NrIiwic2ltcGxpZnlfdGVuc29yIiwic2ltcGxpZnlfdHJpZyIsInNpbXBsaWZ5ZmFjdG9yaWFscyIsInNpbmUiLCJzaW5lX29mX2FuZ2xlIiwic2luZV9vZl9hbmdsZV9zdW0iLCJza2lwUm9vdFZhcmlhYmxlVG9CZVNvbHZlZCIsInNvcnRfc3RhY2siLCJzcXVhcmUiLCJzc3FydCIsInN0YWNrIiwic3RhY2tBZGRzQ291bnQiLCJzdGRfc3ltYm9sIiwic3RlcCIsInN0ZXAyIiwic3RvcCIsInN0cmNtcCIsInN0cmluZ3NFbWl0dGVkQnlVc2VyUHJpbnRvdXRzIiwic3ViZiIsInN1YnN0Iiwic3VidHJhY3QiLCJzdWJ0cmFjdF9udW1iZXJzIiwic3dhcCIsInN5bWJvbCIsInN5bWJvbHNEZXBlbmRlbmNpZXMiLCJzeW1ib2xzSGF2aW5nUmVhc3NpZ25tZW50cyIsInN5bWJvbHNJbkV4cHJlc3Npb25zV2l0aG91dEFzc2lnbm1lbnRzIiwic3ltYm9sc0xlZnRPZkFzc2lnbm1lbnQiLCJzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnQiLCJzeW1ib2xzaW5mbyIsInN5bW51bSIsInN5bXRhYiIsInRha2VfY2FyZV9vZl9uZXN0ZWRfcmFkaWNhbHMiLCJ0YW5nZW50IiwidGF5bG9yIiwidGVuc29yIiwidGVuc29yX3BsdXNfdGVuc29yIiwidGVuc29yX3RpbWVzX3NjYWxhciIsInRlc3RBcHByb3giLCJ0ZXN0X2ZsYWciLCJ0ZXh0X21ldHJpYyIsInRoZVJhbmRvbSIsInRva2VuIiwidG9rZW5fYnVmIiwidG9rZW5fc3RyIiwidG9wIiwidG9wX2xldmVsX2V2YWwiLCJ0b3MiLCJ0cmFuc2Zvcm0iLCJ0cmFuc3Bvc2UiLCJ0cmFuc3Bvc2VfdW5pY29kZSIsInRyaWdtb2RlIiwidHJpdmlhbF9kaXZpZGUiLCJ0cnlfa3RoX3ByaW1lIiwidHVybkVycm9yTWVzc2FnZVRvTGF0ZXgiLCJ1Y21wIiwidW5mcmVlemUiLCJ1bmlxdWUiLCJ1bmlxdWVfZiIsInVwZGF0ZV90b2tlbl9idWYiLCJ1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybSIsInVzZXJTaW1wbGlmaWNhdGlvbnNJblN0cmluZ0Zvcm0iLCJ1c3Jfc3ltYm9sIiwidmVyYm9zaW5nIiwidmVyc2lvbiIsIndpbGxfYmVfZGlzcGxheWVkX2FzX2ZyYWN0aW9uIiwieWJpbm9taWFsIiwieWNvc2giLCJ5ZGlyYWMiLCJ5ZXJmIiwieWVyZmMiLCJ5Zmxvb3IiLCJ5aW5kZXgiLCJ5cm91bmQiLCJ5c2luaCIsInl5YXJnIiwieXliZXNzZWxqIiwieXliZXNzZWx5IiwieXljZWlsaW5nIiwieXljb25kZW5zZSIsInl5Y29udHJhY3QiLCJ5eWNvc2giLCJ5eWRlZ3JlZSIsInl5ZGV0ZyIsInl5ZGl2cG9seSIsInl5ZXJmIiwieXllcmZjIiwieXlleHBhbmQiLCJ5eWZhY3RvcnBvbHkiLCJ5eWZsb2F0IiwieXlmbG9vciIsInl5aGVybWl0ZSIsInl5aGVybWl0ZTIiLCJ5eWludmciLCJ5eWxjbSIsInl5bG9nIiwieXltdWx0aXBseSIsInl5b3V0ZXIiLCJ5eXBvd2VyIiwieXlyYXRpb25hbGl6ZSIsInl5cm91bmQiLCJ5eXNnbiIsInl5c2ltZmFjIiwieXlzaW5oIiwieXl0YW5nZW50IiwiemVybyIsInp6ZmxvYXQiLCJoYXNQcm9wIiwiaGFzT3duUHJvcGVydHkiLCJwcm90b3R5cGUiLCJhIiwiYiIsImNhbGwiLCJ0aGlzIiwicSIsInByaW50bmFtZSIsInN0ciIsImQiLCJrIiwidGFnIiwiZGltIiwicmVzdWx0cyIsIm5kaW0iLCJuZWxlbSIsImgiLCJ3IiwibiIsImFzY2VudCIsImRlc2NlbnQiLCJ3aWR0aCIsImNlaWwiLCJpIiwiaiIsInByaW1lcyIsIk1hdGgiLCJzcXJ0IiwieCIsInAiLCJzdGFydENvdW50IiwiaXNQb3NpdGl2ZSIsImlzWmVybyIsInRvU3RyaW5nIiwiZXF1YWxzIiwiZXhwb3J0cyIsInRoZUFyZ3VtZW50IiwiY29uc29sZSIsInRyYWNlIiwibG9nIiwiYW55RmFjdG9yc1lldCIsImlucHV0Iiwic3Vic2V0T2ZTdGFjayIsInNsaWNlIiwic29ydCIsImNvbmNhdCIsInQiLCJzIiwibDEiLCJtMSIsInJlZjIiLCJyZWYzIiwicmVmNCIsInJlZjUiLCJyZWY2IiwicmVmNyIsInJlZjgiLCJyZWY5IiwibnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCIsInByZWNpc2lvbiIsInNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QiLCJzdXBwb3NlZGx5VGhlRmxvYXQiLCJ0aGVGbG9hdCIsInRoZVJhdGlvIiwic3BsaXQiLCJwb3ciLCJkZWNpbWFsIiwiQWNjdXJhY3lGYWN0b3IiLCJEZWNpbWFsU2lnbiIsIkZyYWN0aW9uRGVub21pbmF0b3IiLCJGcmFjdGlvbk51bWVyYXRvciIsIlByZXZpb3VzRGVub21pbmF0b3IiLCJTY3JhdGNoVmFsdWUiLCJaIiwicmV0IiwiaXNOYU4iLCJmbG9vciIsImJlc3RSZXN1bHRTb0ZhciIsImNvbXBsZXhpdHkiLCJlcnJvciIsImh5cG90aGVzaXMiLCJsZW4iLCJsaWtlbHlNdWx0aXBsaWVyIiwibWluaW11bUNvbXBsZXhpdHkiLCJyYXRpbyIsIk51bWJlciIsIk1BWF9WQUxVRSIsInJvdW5kIiwibGVuMSIsImFwcHJveFJhZGljYWxzT2ZSYXRpb25hbHNSZXN1bHQiLCJhcHByb3hSYXRpb25hbHNPZlJhZGljYWxzUmVzdWx0IiwiYXBwcm94TG9nc09mUmF0aW9uYWxzUmVzdWx0IiwiYXBwcm94UmF0aW9uYWxzT2ZMb2dzUmVzdWx0IiwiYXBwcm94U2luZU9mUmF0aW9uYWxNdWx0aXBsZXNPZlBJUmVzdWx0IiwiYXBwcm94U2luZU9mUmF0aW9uYWxzUmVzdWx0IiwiZnJhY3Rpb24iLCJzaW4iLCJhcHByb3hMb2dzUmVzdWx0IiwiYXBwcm94UmFkaWNhbHNSZXN1bHQiLCJhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mRVJlc3VsdCIsImFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZQSVJlc3VsdCIsImFwcHJveFRyaWdvbm9tZXRyaWNSZXN1bHQiLCJiZXN0QXBwcm94U29GYXIiLCJjb25zdGFudHNTdW0iLCJjb25zdGFudHNTdW1NaW4iLCJhUmVzdWx0IiwiYyIsInRoZVN1bSIsIkFycmF5IiwiaTIiLCJpMyIsImoyIiwiajMiLCJrMyIsImwyIiwibDMiLCJsZW4yIiwibGVuMyIsImxlbjQiLCJsZW41IiwibGVuNiIsImxlbjciLCJtMiIsIm0zIiwibjEiLCJuMiIsIm8xIiwibzIiLCJvcmlnaW5hbFZhbHVlIiwicTEiLCJxMiIsInIxIiwicjIiLCJyZXR1cm5lZCIsInJldHVybmVkRnJhY3Rpb24iLCJyZXR1cm5lZFZhbHVlIiwiczEiLCJzMiIsInQxIiwidDIiLCJ1MSIsInUyIiwidjEiLCJ2MiIsInZhbHVlIiwieDEiLCJ4MiIsInoxIiwiejIiLCJ0b0ZpeGVkIiwiYWNvcyIsImFzaW4iLCJhdGFuIiwieSIsInoiLCJqbiIsInluIiwiZ2VxIiwiTUlOX1NBRkVfSU5URUdFUiIsImxlcSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpc05lZ2F0aXZlIiwicXN1YiIsImFiIiwiYmEiLCJtaW51c09uZSIsImV4cG8iLCJ0b0pTTnVtYmVyIiwicXVvdGllbnRBbmRSZW1haW5kZXIiLCJkaXZtb2QiLCJxdW90aWVudCIsInJlbWFpbmRlciIsImFjY3VtdWxhdG9yIiwiYnVmIiwic2NvdW50ZXIiLCJzaWduXyIsInN1YnN0cmluZyIsInBhcnNlRmxvYXQiLCJzaWduZWQiLCJhQXNTdHJpbmciLCJkZW5vbWluYXRvclN0cmluZyIsInNoaWZ0UmlnaHQiLCJpbmRleE9mIiwiaW5kZXhGb3VuZCIsInZhcmlhYmxlVG9CZUNsZWFyZWQiLCJwcmV2X2V4cGFuZGluZyIsInJvdyIsImNvbCIsImFpIiwiYW4iLCJsIiwibSIsImNvcyIsImNvc2giLCJ0b0JlUHVzaGVkIiwiZ2VuZXJhbFRyYW5zZm9ybSIsImJyZWFrRnJvbU91dGhlcldoaWxlIiwiYmFzZSIsInJlc3VsdCIsInRoZXRhIiwib3AiLCJyZWYxMCIsInByaW50c3RyIiwicmVmMTEiLCJyZXN1bHRzMSIsImNjIiwic3MiLCJhbnMiLCJleHAiLCJ3aWxsRXZhbHVhdGVBc0Zsb2F0cyIsImN5Y2xlU3RyaW5nIiwicG9zaXRpb25JZlN5bWJvbEFscmVhZHlCZWluZ0V2YWx1YXRlZCIsImNvbnNfaGVhZCIsIkV2YWxfYXRvbWl6ZSIsIkV2YWxfZHJhdyIsImNoZWNrUmVzdWx0IiwiZHNvbHZlIiwib3JpZyIsInRoZVRlbnNvciIsImNoZWNraW5nVGhlRGl2aXNpb24iLCJkaXZpZGVuZCIsImZvdW5kQ29tcGxleFJvb3QiLCJmb3VuZFJlYWxSb290IiwicHJldmlvdXNGYWN0b3Jpc2F0aW9uIiwicmVtYWluaW5nUG9seSIsIndoaWNoUm9vdHNBcmVXZUZpbmRpbmciLCJhMCIsIm5hMCIsIm5hbiIsInJvb3RzVHJpZXNfaSIsInJvb3RzVHJpZXNfaiIsIm5vZGVUb0NoZWNrIiwibnVtYmVyT2ZFcyIsIm51bWJlck9mTXVsdHMiLCJudW1iZXJPZlBJcyIsIm51bWJlck9mUG93ZXJzIiwibnVtYmVyT2ZTdW1zIiwibG9vcGluZ1ZhcmlhYmxlIiwicG9seVZhciIsImRpZmZlcmVuY2UiLCJtb3JldGhlQXJndW1lbnRzIiwib3BlcmFuZHMiLCJyZWZpbmVkT3BlcmFuZHMiLCJzaGlmdCIsInRoZUFyZ3VtZW50cyIsImFyZzEiLCJhcmcyIiwiYXJnMyIsInN1YnRyYWN0aW9uUmVzdWx0IiwiYWsiLCJiayIsInRyZWUiLCJmYWN0b3JzX2FjY3VtdWxhdG9yIiwiaGMiLCJ0YWIiLCJ1IiwiaGFsZiIsImNvbnN0YW50IiwiYXJnX2hhc2giLCJuYW1lIiwiRXJyb3IiLCJ0ZXJtcyIsInN1bSIsInRlcm0iLCJ0ZXJtX3NldCIsInByb2R1Y3QiLCJiYXNlX2hhc2giLCJleHBfaGFzaCIsImNvbnN0ZXhwIiwiZiIsImtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlYWNoRW50cnkiLCJyZXN1bHRzMiIsInZhbHVlT3JQcmVkaWNhdGUiLCJldmFsbGVkQXJndW1lbnQiLCJpc0V2ZW4iLCJtaW51c3NpZ24iLCJjb21wYXJlQWJzIiwidiIsInRvUmV0dXJuIiwiaXNQcm9iYWJsZVByaW1lIiwiaW5kZXgiLCJhbmQiLCJzaGlmdExlZnQiLCJub3QiLCJvciIsImFwcGVuZCIsIl9nYW1tYSIsInIiLCJyYW5kb20iLCJucmFicyIsImZpcnN0QXJndW1lbnQiLCJwYXR0ZXJuUG9zaXRpb24iLCJzZWNvbmRBcmd1bWVudCIsInN0cmluZ0tleSIsInRoaXJkQXJndW1lbnQiLCJwYXR0ZXJuc2luZm9Ub0JlUHJpbnRlZCIsImNvbXBhcmUiLCJiaWdpbnRfb25lIiwiZyIsInhwcmltZSIsImJfaXNFdmVuX2FuZF9jX2lzSXRzSW52ZXJzZSIsImhvcGVmdWxseVNpbXBsaWZpZWQiLCJpbnB1dEJhc2UiLCJpbnB1dEV4cCIsImlzVGhpc09uZSIsImlzX2FfbW9yZVRoYW5aZXJvIiwib3JpZ2luYWxfdGVzdF9mbGFnIiwiYmVlblByaW50ZWQiLCJwYXNzZWRQcmludE1vZGUiLCJvcmlnUHJpbnRNb2RlIiwidGhlU3RyaW5nIiwidGhlVHlwZU9mUHJpbnQiLCJwYXJzZWRTdHJpbmciLCJvcmlnaW5hbENvZGVHZW4iLCJyZXR1cm5lZFN0cmluZyIsInJlcGxhY2UiLCJkZW5vbSIsIm51bWJlck9uZU92ZXJTb21ldGhpbmciLCJvcmlnQWNjdW11bGF0b3IiLCJwcmV2aW91c0ZhY3Rvcldhc0FOdW1iZXIiLCJmdW5jdGlvbkJvZHkiLCJudW1iZXJPZkludGVncmFscyIsIm9yaWdpbmFsSW50ZWdyYWwiLCJ0aGVJbnRlZ3JhbCIsInRoZVZhcmlhYmxlIiwicmV0U3RyaW5nIiwiZmlyc3RMZXZlbCIsImJvZHkiLCJsb3dlcmxpbWl0IiwidXBwZXJsaW1pdCIsInZhcmlhYmxlIiwiaG93TWFueUlmcyIsImV4cG9uZW50IiwiZGVub21FeHBvbmVudCIsIm5ld0V4cG9uZW50IiwibnVtRXhwb25lbnQiLCJvbWl0UGFyZW5zIiwiZmJvZHkiLCJwYXJhbWV0ZXJzIiwiY2hhcmFjdGVyIiwiazEiLCJrMiIsInBQcmludE5hbWUiLCJwU3RyaW5nIiwiZHgiLCJoMSIsImgyIiwidzEiLCJ3MiIsInkxIiwieTIiLCJkeSIsIm1heF94IiwibWF4X3kiLCJtaW5feCIsIm1pbl95IiwiZW1pdF9zaWduIiwidG1wU3RyaW5nIiwic0luZGV4IiwidG1wQnVmZmVyIiwiZWgiLCJldyIsIm5jb2wiLCJucm93IiwiaW5kZXhWYXJpYWJsZSIsIm9sZEluZGV4VmFyaWFibGVWYWx1ZSIsImdjZEJldHdlZW5OdW1lcmF0b3JBbmREZW5vbWluYXRvciIsInFhZGRfYWIiLCJxYWRkX2JhIiwicWFkZF9kZW5vbWluYXRvciIsInFhZGRfZnJhYzEiLCJxYWRkX2ZyYWMyIiwicWFkZF9udW1lcmF0b3IiLCJyZXN1bHRTdW0iLCJhYSIsImJiIiwiaXNPZGQiLCJzdGFja0luZGV4IiwiZGl2aXNvciIsImNvbW1vbkRlbm9taW5hdG9yIiwiZWFjaFRlcm0iLCJwcmludGYiLCJpbWFnaW5hcnlDb2VmZmljaWVudHMiLCJpc1NpbXBsZVJvb3RQb2x5bm9taWFsIiwiZGl2aWRlQnkiLCJtaW5pU3RhY2siLCJsYXN0Q29lZmYiLCJsZWFkaW5nQ29lZmYiLCJhU29sIiwiY29tbW9uUGFydCIsInJvb3RzT2ZPbmUiLCJDX0NIRUNLRURfQVNfTk9UX1pFUk8iLCJSXzE4X2FfYl9jX2QiLCJSXzI3X2EyX2QiLCJSXzJfYjMiLCJSXzNfYSIsIlJfM19hX0MiLCJSXzNfYV9jIiwiUl80X0RFTFRBMDMiLCJSXzZfYV9DIiwiUl9DIiwiUl9DX292ZXJfM2EiLCJSX0Nfc2ltcGxpZmllZF90b0NoZWNrSWZaZXJvIiwiUl9ERUxUQTAiLCJSX0RFTFRBMF90b0JlQ2hlY2tlZElmWmVybyIsIlJfREVMVEExIiwiUl9RIiwiUl9hMiIsIlJfYTJfZCIsIlJfYTJfZDIiLCJSX2EzIiwiUl9hX2JfYyIsIlJfYV9iX2NfZCIsIlJfYV9jIiwiUl9iMiIsIlJfYjJfYzIiLCJSX2IzIiwiUl9iM19kIiwiUl9jMiIsIlJfYzMiLCJSX2QyIiwiUl9kZXRlcm1pbmFudCIsIlJfZTIiLCJSX2UzIiwiUl9tIiwiUl9tMjdfYTJfZDIiLCJSX200X2FfYzMiLCJSX200X2IzX2QiLCJSX205X2FfYl9jIiwiUl9tX2Jfb3Zlcl8zYSIsIlJfcCIsIlJfcSIsIlJfciIsIlRocmVlUFBsdXMyTSIsIlR3b1FPdmVyc3FydFBQbHVzMk0iLCJjb2VmZjIiLCJjb2VmZjMiLCJjb2VmZjQiLCJkZXByZXNzZWRTb2x1dGlvbnMiLCJlYWNoU29sdXRpb24iLCJmbGlwU2lnbk9GUVNvQ0lzTm90WmVybyIsImlfc3FydDMiLCJvbmVfbWludXNfaV9zcXJ0MyIsIm9uZV9wbHVzX2lfc3FydDMiLCJyZXNvbHZlbnRDdWJpY1NvbHV0aW9ucyIsInJvb3Rfc29sdXRpb24iLCJzcXJ0UFBsdXMyTSIsInRvQmVDaGVja2VkSUZaZXJvIiwiYXNzaWdubWVudElzT2ZRdW90ZWRUeXBlIiwiZXhpc3RpbmdEZXBlbmRlbmNpZXMiLCJpbmRleE9mU3ltYm9sTGVmdE9mQXNzaWdubWVudCIsInN5bWJvbExlZnRPZkFzc2lnbm1lbnQiLCJzcGxpY2UiLCJjaGFyQ29kZUF0IiwiZmlyc3RGYWN0b3JJc051bWJlciIsInRoZVN5bWJvbCIsInByZWZpeFZhciIsImZ1bmN0aW9uTmFtZSIsIlJlZ0V4cCIsInRlc3QiLCJlcnJtc2ciLCJhdExlYXN0T25lU3VjY2Vzc0luUm91bGRPZlJ1bGVzQXBwbGljYXRpb25zIiwiZWFjaENvbnNlY3V0aXZlUnVsZUFwcGxpY2F0aW9uIiwiZWFjaFNpbXBsaWZpY2F0aW9uIiwibnVtYmVyT2ZSdWxlc0FwcGxpY2F0aW9ucyIsIm9yaWdpbmFsZXhwYW5kaW5nIiwic3VjY2VzcyIsImFyZ3MiLCJldmFsIiwiY2FycDEiLCJvbGRwMSIsIm9sZHAyIiwibnVtIiwidGhlR0NEIiwic2ltcGxpZmljYXRpb25XaXRoQ29uZGVuc2UiLCJzaW1wbGlmaWNhdGlvbldpdGhvdXRDb25kZW5zZSIsInNvbWV0aGluZ1NpbXBsaWZpZWQiLCJBIiwiQiIsIkMiLCJTT0xVVElPTiIsImFueVJhZGljYWxTaW1wbGlmaWNhdGlvbldvcmtlZCIsImNoZWNrU2l6ZSIsImNvbW1vbkJhc2VzIiwiY29tbW9uSW5uZXJFeHBvbmVudCIsImNvdW50aW5nVGVybXMiLCJmaXJzdFRlcm0iLCJpbm5lcmJhc2UiLCJpbm5lcmV4cG9uZW50IiwibG93ZXJjYXNlX2EiLCJsb3dlcmNhc2VfYiIsIm51bWJlck9mVGVybXMiLCJwb3NzaWJsZU5ld0V4cHJlc3Npb24iLCJwb3NzaWJsZU5ld0V4cHJlc3Npb25WYWx1ZSIsInBvc3NpYmxlUmF0aW9uYWxTb2x1dGlvbnMiLCJwb3NzaWJsZVNvbHV0aW9ucyIsInBvdGVudGlhbFBvd2VyIiwicmVhbE9mcG9zc2libGVSYXRpb25hbFNvbHV0aW9ucyIsInNlY29uZFRlcm0iLCJzZWNvbmRUZXJtRmFjdG9yIiwidGVybXNUaGF0QXJlTm90UG93ZXJzIiwibWF4IiwiYXBwbHkiLCJzaW5oIiwidGFuIiwidGFuaCIsImNvbXBhcmlzb24iLCJ3aG9sZUFuZEV4cHJlc3Npb24iLCJhbmRQcmVkaWNhdGVzIiwic29tZVByZWRpY2F0ZVVua25vd24iLCJvclByZWRpY2F0ZXMiLCJ3aG9sZU9yRXhwcmVzc2lvbiIsImJvb2ttYXJrVG9zVG9QcmludERlY29tcHMiLCJlYWNoVHJhbnNmb3JtRW50cnkiLCJudW1iZXJPZkRlY29tcHMiLCJyZXN0VGVybSIsInRoZVRyYW5zZm9ybSIsInRyYW5zZm9ybV9oIiwidHJhbnNmb3JtYXRpb25TdWNjZXNzZnVsIiwidHJhbnNmb3JtZWRUZXJtcyIsImZlYV9pIiwiZmVhX2oiLCJpbm5lclRyYW5zcFN3aXRjaDEiLCJpbm5lclRyYW5zcFN3aXRjaDIiLCJib2R5QW5kRm9ybWFsQXJndW1lbnRzIiwiZGVmaW5pdGlvbk9mSW50ZXJlc3QiLCJkZWZuX2kiLCJzdHIxIiwic3RyMiIsIm1heEZpeGVkUHJpbnRvdXREaWdpdHMiLCJzdHJpbmdSZXByZXNlbnRhdGlvbiIsInNlYXJjaCIsIm5lZWRsZSIsIm1lc3NhZ2UiLCJzdHJpbmdUb0JlUGFyc2VkIiwiZG9udEdlbmVyYXRlQ29kZSIsImJvZHlGb3JSZWFkYWJsZVN1bW1hcnlPZkdlbmVyYXRlZENvZGUiLCJjeWNsZXNEZXNjcmlwdGlvbnMiLCJkZVF1b3RlZERlcCIsImRlcGVuZGVuY3lJbmZvIiwiZWFjaERlcGVuZGVuY3kiLCJnZW5lcmF0ZWRCb2R5IiwiZ2VuZXJhdGVkQ29kZSIsImluZGV4T2ZFYWNoUmVwbGFjZW1lbnQiLCJpbmRleE9mUGFydFJlbWFpbmluZ1RvQmVQYXJzZWQiLCJuZXdVc2VyU3ltYm9sIiwib3JpZ2luYWxVc2VyU3ltYm9sIiwicmVhZGFibGVTdW1tYXJ5T2ZHZW5lcmF0ZWRDb2RlIiwicmVjdXJzZWREZXBlbmRlbmNpZXMiLCJyZXBsYWNlbWVudHNGcm9tIiwicmVwbGFjZW1lbnRzVG8iLCJzY3JpcHRFdmFsdWF0aW9uIiwic3RyaW5nVG9CZVJ1biIsInRlc3RhYmxlU3RyaW5nIiwidGltZVN0YXJ0RnJvbUFsZ2VicmEiLCJ0b0JlUHJpbnRlZCIsInVzZXJWYXJpYWJsZXNNZW50aW9uZWQiLCJ2YXJpYWJsZXNXaXRoQ3ljbGVzIiwiRGF0ZSIsImdldFRpbWUiLCJhZmZlY3RzVmFyaWFibGVzIiwiYWZmZWN0ZWRCeSIsImVycm9yMSIsInZhcmlhYmxlVG9CZUNoZWNrZWQiLCJhcnJheVdoZXJlRGVwZW5kZW5jaWVzV2lsbEJlQWRkZWQiLCJ2YXJpYWJsZXNBbHJlYWR5Rmxlc2hlZE91dCIsImNoYWluQmVpbmdDaGVja2VkIiwiY3ljbGVzRGVzY3JpcHRpb24iLCJ0aGVFcnJvck1lc3NhZ2UiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJzdHJpbmdUb05vcm1hbGlzZSIsImdlbmVyYXRlTGF0ZXgiLCJhbGxSZXR1cm5lZExhdGV4U3RyaW5ncyIsImFsbFJldHVybmVkUGxhaW5TdHJpbmdzIiwiY29sbGVjdGVkTGF0ZXhSZXN1bHQiLCJjb2xsZWN0ZWRQbGFpblJlc3VsdCIsInN0cmluZ1RvQmVSZXR1cm5lZCIsInRpbWVTdGFydCIsInRpbWluZ0RlYnVnV3JpdGUiLCJzZWxmdGVzdCIsIm9yaWdpbmFsQXJndW1lbnQiLCJzaG91bGRBdXRvZXhwYW5kIiwiY29kZUZyb21BbGdlYnJhQmxvY2siLCJjb2RlIiwibGF0ZXhSZXN1bHQiLCJyZWFkYWJsZVN1bW1hcnlPZkNvZGUiLCJ0ZXN0YWJsZVN0cmluZ0lzSWdub3JlZEhlcmUiLCJzdGFja1BvcyIsImVsZW1lbnRUb0JlUmV0dXJuZWQiLCJzeW1ib2xzaW5mb1RvQmVQcmludGVkIiwiYmluZGluZ2kiLCJzeW10YWJpIiwibGF0ZXhQcmludCIsInRoZVN5bW51bSIsImFyZ3UiLCJ3YXJuIiwiZGF0YSIsImFyZ3VzIiwiZm4iLCJidWlsdGluX2ZucyIsImJpbmQiLCJmcm96ZW5Db250ZW50cyIsImZyb3plblN5bWJvbHMiLCJmcm96ZW4iLCJmcm96ZW5QYXR0ZXJucyIsInByZXZpb3VzSGFzaCIsImZyb3plbkhhc2giLCJCQVNFIiwiTUFYX0lOVCIsIk1BWF9JTlRfQVJSIiwic21hbGxUb0FycmF5IiwiREVGQVVMVF9BTFBIQUJFVCIsInN1cHBvcnRzTmF0aXZlQmlnSW50IiwiQmlnSW50IiwiSW50ZWdlciIsInJhZGl4IiwiYWxwaGFiZXQiLCJjYXNlU2Vuc2l0aXZlIiwicGFyc2VWYWx1ZSIsInBhcnNlQmFzZSIsIkJpZ0ludGVnZXIiLCJTbWFsbEludGVnZXIiLCJOYXRpdmVCaWdJbnQiLCJpc1ByZWNpc2UiLCJhcnJheVRvU21hbGwiLCJhcnIiLCJ0cmltIiwiY3JlYXRlQXJyYXkiLCJ0cnVuY2F0ZSIsImxfYSIsImxfYiIsImNhcnJ5IiwiYWRkQW55IiwiYWRkU21hbGwiLCJhX2wiLCJiX2wiLCJib3Jyb3ciLCJzdWJ0cmFjdFNtYWxsIiwibXVsdGlwbHlMb25nIiwiYV9pIiwibXVsdGlwbHlTbWFsbCIsIm11bHRpcGx5S2FyYXRzdWJhIiwiYWMiLCJiZCIsImFiY2QiLCJtdWx0aXBseVNtYWxsQW5kQXJyYXkiLCJkaXZNb2RTbWFsbCIsImxhbWJkYSIsImRpdk1vZEFueSIsInNlbGYiLCJxdW90aWVudERpZ2l0IiwiZGl2aXNvck1vc3RTaWduaWZpY2FudERpZ2l0IiwiZGl2TW9kMSIsInhsZW4iLCJoaWdoeCIsImhpZ2h5IiwiY2hlY2siLCJwYXJ0IiwidW5zaGlmdCIsInJldmVyc2UiLCJkaXZNb2QyIiwicVNpZ24iLCJtU2lnbiIsImlzQmFzaWNQcmltZSIsImlzVW5pdCIsImlzRGl2aXNpYmxlQnkiLCJsZXNzZXIiLCJtaWxsZXJSYWJpblRlc3QiLCJuUHJldiIsInByZXYiLCJuZXh0IiwibW9kUG93IiwiT2JqZWN0IiwiY3JlYXRlIiwicGx1cyIsInN1YnRyYWN0QW55IiwibWludXMiLCJzbWFsbCIsInRpbWVzIiwiX211bHRpcGx5QnlTbWFsbCIsIm92ZXIiLCJfMCIsIl8xIiwiXzIiLCJtb2RJbnYiLCJJbmZpbml0eSIsImNvbXBhcmVUbyIsImVxIiwibm90RXF1YWxzIiwibmVxIiwiZ3JlYXRlciIsImd0IiwibHQiLCJncmVhdGVyT3JFcXVhbHMiLCJsZXNzZXJPckVxdWFscyIsImlzUHJpbWUiLCJzdHJpY3QiLCJ1bmRlZmluZWQiLCJiaXRzIiwiYml0TGVuZ3RoIiwibG9nTiIsIml0ZXJhdGlvbnMiLCJybmciLCJyYW5kQmV0d2VlbiIsImxhc3RUIiwibGFzdFIiLCJuZXdUIiwibmV3UiIsInBvd2Vyc09mVHdvIiwicG93ZXJzMkxlbmd0aCIsImhpZ2hlc3RQb3dlcjIiLCJzaGlmdF9pc1NtYWxsIiwiYml0d2lzZSIsInhTaWduIiwieVNpZ24iLCJ4UmVtIiwieVJlbSIsInhEaWdpdCIsInlEaWdpdCIsInhEaXZNb2QiLCJ5RGl2TW9kIiwicmVtUXVvIiwieG9yIiwiTE9CTUFTS19JIiwicm91Z2hMT0IiLCJpbnRlZ2VyTG9nYXJpdGhtIiwidG1wIiwiZSIsIm1pbiIsInRleHQiLCJ0b0xvd2VyQ2FzZSIsImFic0Jhc2UiLCJhbHBoYWJldFZhbHVlcyIsImRpZ2l0cyIsInN0YXJ0IiwicGFyc2VCYXNlRnJvbUFycmF5IiwidmFsIiwidG9CYXNlIiwibWFwIiwidmFsdWVPZiIsIm5lZyIsIm91dCIsImxlZnQiLCJkaWdpdCIsInRvQmFzZVN0cmluZyIsImpvaW4iLCJwYXJzZVN0cmluZ1ZhbHVlIiwiZGVjaW1hbFBsYWNlIiwicGFyc2VOdW1iZXJWYWx1ZSIsInRvQXJyYXkiLCJ0b0pTT04iLCJwYXJzZUludCIsImlzSW5zdGFuY2UiLCJ1c2VkUk5HIiwibG93IiwicmFuZ2UiLCJyZXN0cmljdGVkIiwiZnJvbUFycmF5IiwibW9kdWxlIiwiY2FsY3VsYXRlUG90ZW50aWFsIiwieFJhbmdlIiwieVJhbmdlIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsInBvdEV4cHIiLCJFbnZpcm9ubWVudCIsImdldEluc3RhbmNlIiwiZ2V0UG90IiwiUG9pbnQiLCJtb2RQb3RFeHByIiwibWF0aGlmeSIsInBvdCIsInBvaW50IiwiY2FsY3VsYXRlR3JhZGllbnRYIiwiZ3JhZGllbnRFeHByIiwiZ2V0R3JhZGllbnRYIiwibW9kR3JhZGllbnRFeHByIiwiZHVkeCIsImNhbGN1bGF0ZUdyYWRpZW50WSIsImdldEdyYWRpZW50WSIsImR1ZHkiLCJwb2ludHNFcXVhbCIsImFkYXB0QWxwaGEiLCJhbHBoYSIsImNhbGNEaXN0IiwiZ3JhZGllbnREZXNjZW50IiwiZ29hbCIsImJvdW5kYXJ5IiwiZXBzaWxvbiIsImNiIiwicmVxIiwiYWxwaGFfc3RhciIsIm5ld19wb2ludCIsImNvbnZlcnREYXRhIiwidmFscyIsInR5cGUiLCJ3aW5kb3ciLCJzdmdJZCIsInNoYXBlcyIsImNoYXJ0RGF0YSIsImxheW91dCIsImF1dG9zaXplIiwiaGVpZ2h0IiwibWFyZ2luIiwicGFkIiwicGFwZXJfYmdjb2xvciIsInBsb3RfYmdjb2xvciIsIlBsb3RseSIsIm5ld1Bsb3QiLCJDaXJjbGUiLCJjeCIsImN5IiwiY3JlYXRlVGVtcGxhdGUiLCJpZCIsInBhcmVudElEIiwib2JzdGFjbGVzIiwicGFyZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN2Z0lEIiwiRGlzcGxheUNvbXBvbmVudCIsImdldElEIiwiZGl2SUQiLCJhY3RpdmVJRCIsInNob3ciLCJ0ZW1wbGF0ZSIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImJvcmRlciIsImlubmVySFRNTCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiY2FsY3VsYXRlUG90IiwiY2FsY3VsYXRlUGF0aCIsInNob3dPYnN0YWNsZXMiLCJhcHBlbmRDaGlsZCIsImdldElucHV0cyIsImdldFN0YXJ0IiwiZ2V0R29hbCIsImdldEJvdW5kYXJ5IiwiZ2V0T2JzdGFjbGVzIiwia2FwcGEiLCJnZXRLYXBwYSIsImdldEFscGhhIiwiZ2V0RXBzaWxvbiIsIm9icyIsInNldCIsInRoZW4iLCJkcmF3Q2hhcnQiLCJncmFkaWVudENhbGxiYWNrIiwicGF0aCIsInRlcm1pbmF0ZWQiLCJ4MCIsInkwIiwibGluZSIsImNvbG9yIiwieHJlZiIsInlyZWYiLCJvcGFjaXR5IiwiZmlsbGNvbG9yIiwiY29udG91ckNoYXJ0IiwiYWxnIiwiZW52IiwicV9nb2FsIiwiZm9yRWFjaCIsImdldFJlcHVsc2l2ZSIsImdldFBvdGVudGlhbCIsImlzU2V0IiwiY2xlYXIiLCJjbGVhckFsbCIsInNhZmVQb2ludCIsImV2IiwicmVtb3ZlRG90cyIsImFkZERpc3BsYXlDb21wb25lbnQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibm1kIiwicGF0aHMiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6ImtHQUNBLFdBczRCRSxJQUFJQSxFQUFHQyxJQUFLQyxJQUFLQyxJQUFLQyxJQUFLQyxZQUFhQyxPQUFRQyxRQUFTQyxPQUFRQyxRQUFTQyxPQUFRQyxRQUFTQyxJQUFLQyxzQkFBdUJDLFFBQVNDLFdBQVlDLEtBQU1DLFFBQVNDLFFBQVNDLFFBQVNDLFNBQVVDLGlCQUFrQkMsSUFBS0MsR0FBSUMsR0FBSUMsR0FBSUMsR0FBSUMsR0FBSUMsR0FBSUMsUUFBU0MsTUFBT0MsT0FBUUMsUUFBU0MsTUFBT0MsU0FBVUMsY0FBZUMsTUFBT0MsTUFBT0MsU0FBVUMsU0FBVUMsS0FBTUMsS0FBTUMsU0FBVUMsSUFBS0MsS0FBTUMsU0FBVUMsTUFBT0MsVUFBV0MsVUFBV0MsZ0JBQWlCQyxXQUFZQyxTQUFVQyxZQUFhQyxXQUFZQyxPQUFRQyxPQUFRQyxPQUFRQyxZQUFhQyxXQUFZQyxJQUFLQyxjQUFlQyxJQUFLQyxNQUFPQyxTQUFVQyxHQUFJQyxJQUFLQyxPQUFRQyxLQUFNQyxNQUFPQyxPQUFRQyxFQUFHQyxNQUFPQyxTQUFVQyxTQUFVQyxNQUFPQyxjQUFlQyxTQUFVQyxTQUFVQyxJQUFLQyxLQUFNQyxLQUFNQyxJQUFLQyxPQUFRQyxPQUFRQyxPQUFRQyxLQUFNQyxVQUFXQyxTQUFVQyxTQUFVQyxTQUFVQyxTQUFVQyxpQkFBa0JDLFlBQWFDLGFBQWNDLFlBQWFDLGFBQWNDLFlBQWFDLGFBQWNDLFNBQVVDLGFBQWNDLGFBQWNDLGFBQWNDLGNBQWVDLGFBQWNDLFdBQVlDLFlBQWFDLGFBQWNDLFdBQVlDLGNBQWVDLG1CQUFvQkMsV0FBWUMsV0FBWUMsY0FBZUMsY0FBZUMsVUFBV0MsVUFBV0MsY0FBZUMsU0FBVUMsVUFBV0MsWUFBYUMsWUFBYUMsWUFBYUMsaUJBQWtCQyxnQkFBaUJDLFNBQVVDLFNBQVVDLFdBQVlDLGNBQWVDLFFBQVNDLFlBQWFDLFdBQVlDLGNBQWVDLGNBQWVDLFNBQVVDLFVBQVdDLFNBQVVDLFlBQWFDLFlBQWFDLFlBQWFDLFlBQWFDLGVBQWdCQyxnQkFBaUJDLFlBQWFDLFdBQVlDLFdBQVlDLFNBQVVDLHdCQUF5QkMsV0FBWUMsU0FBVUMsYUFBY0MsYUFBY0MsVUFBV0MsV0FBWUMsV0FBWUMsY0FBZUMsU0FBVUMsVUFBV0MsZUFBZ0JDLGFBQWNDLGNBQWVDLFNBQVVDLGFBQWNDLGNBQWVDLFNBQVVDLFlBQWFDLFNBQVVDLGNBQWVDLGNBQWVDLFNBQVVDLFlBQWFDLFlBQWFDLGVBQWdCQyxjQUFlQyxRQUFTQyxXQUFZQyxhQUFjQyxrQkFBbUJDLFdBQVlDLFdBQVlDLGVBQWdCQyxXQUFZQyxXQUFZQyxrQkFBbUJDLG1CQUFvQkMsZ0JBQWlCQyxnQkFBaUJD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QUFJLEVBQUcsR0FBSSxJQUFLLElBQUssQ0FBQyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxHQUFJLEdBQUksR0FBSSxJQUFLLEVBQUcsR0FBSSxFQUFHLElBQUssRUFBRyxHQUFJLElBQUssQ0FBQyxFQUFHLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksR0FBSSxFQUFHLElBQUssR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLElBQUssQ0FBQyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQUssR0FBSSxFQUFHLEVBQUcsSUFBSyxJQUFLLEVBQUcsRUFBRyxJQUFLLElBQUssQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLElBQUssRUFBRyxHQUFJLEVBQUcsSUFBSyxFQUFHLElBQUssQ0FBQyxFQUFHLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLElBQUssQ0FBQyxFQUFHLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxJQUFLLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFBSyxHQUFJLEdBQUksR0FBSSxJQUFLLEdBQUksQ0FBQyxFQUFHLEVBQUcsR0FBSSxFQUFHLElBQUssRUFBRyxFQUFHLElBQUssRUFBRyxJQUFLLEdBQUksR0FBSSxFQUFHLElBQUssR0FBSSxJQUFLLEdBQUksQ0FBQyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFBSyxHQUFJLEdBQUksQ0FBQyxFQUFHLEVBQUcsSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxHQUFJLEdBQUksRUFBRyxH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QUlBLEdBTEUsRUFBQTRtQixRQVNQNEIsT0FBUTVCLE1BQVFBLElDUmxCMkcseUJBQTJCLEdBRy9CLFNBQVNDLG9CQUFvQkMsR0FFNUIsR0FBR0YseUJBQXlCRSxHQUMzQixPQUFPRix5QkFBeUJFLEdBQVUvMEIsUUFHM0MsSUFBSXV0QixFQUFTc0gseUJBQXlCRSxHQUFZLENBQ2pEaEUsR0FBSWdFLEVBQ0pDLFFBQVEsRUFDUmgxQixRQUFTLElBVVYsT0FOQWkxQixvQkFBb0JGLEdBQVU5MkIsS0FBS3N2QixFQUFPdnRCLFFBQVN1dEIsRUFBUUEsRUFBT3Z0QixRQUFTODBCLHFCQUczRXZILEVBQU95SCxRQUFTLEVBR1R6SCxFQUFPdnRCLFFDdkJmODBCLG9CQUFvQkksSUFBTzNILElBQzFCQSxFQUFPNEgsTUFBUSxHQUNWNUgsRUFBTzZILFdBQVU3SCxFQUFPNkgsU0FBVyxJQUNqQzdILEdDRFJ1SCxvQkFBb0IsTSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNS4xXG4oZnVuY3Rpb24oKSB7XG5cbiAgLyogYXJnID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICB6XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGFuZ2xlIG9mIGNvbXBsZXggei5cblxuICAqL1xuICAvKlxuICAgQXJndW1lbnQgKGFuZ2xlKSBvZiBjb21wbGV4IHpcblxuICAgIHogICAgYXJnKHopXG4gICAgLSAgICAtLS0tLS1cblxuICAgIGEgICAgMFxuXG4gICAgLWEgICAgLXBpICAgICAgU2VlIG5vdGUgMyBiZWxvd1xuXG4gICAgKC0xKV5hICAgIGEgcGlcblxuICAgIGV4cChhICsgaSBiKSAgYlxuXG4gICAgYSBiICAgIGFyZyhhKSArIGFyZyhiKVxuXG4gICAgYSArIGkgYiAgICBhcmN0YW4oYi9hKVxuXG4gIFJlc3VsdCBieSBxdWFkcmFudFxuXG4gICAgeiAgICBhcmcoeilcbiAgICAtICAgIC0tLS0tLVxuXG4gICAgMSArIGkgICAgMS80IHBpXG5cbiAgICAxIC0gaSAgICAtMS80IHBpXG5cbiAgICAtMSArIGkgICAgMy80IHBpXG5cbiAgICAtMSAtIGkgICAgLTMvNCBwaVxuXG4gIE5vdGVzXG5cbiAgICAxLiBIYW5kbGVzIG1peGVkIHBvbGFyIGFuZCByZWN0YW5ndWxhciBmb3JtcywgZS5nLiAxICsgZXhwKGkgcGkvMylcblxuICAgIDIuIFN5bWJvbHMgaW4geiBhcmUgYXNzdW1lZCB0byBiZSBwb3NpdGl2ZSBhbmQgcmVhbC5cblxuICAgIDMuIE5lZ2F0aXZlIGRpcmVjdGlvbiBhZGRzIC1waSB0byBhbmdsZS5cblxuICAgICAgIEV4YW1wbGU6IHogPSAoLTEpXigxLzMpLCBhYnMoeikgPSAxLzMgcGksIGFicygteikgPSAtMi8zIHBpXG5cbiAgICA0LiBqZWFuLWZyYW5jb2lzLmRlYnJvdXggcmVwb3J0cyB0aGF0IHdoZW4gej0oYStpKmIpLyhjK2kqZCkgdGhlblxuXG4gICAgICBhcmcobnVtZXJhdG9yKHopKSAtIGFyZyhkZW5vbWluYXRvcih6KSlcblxuICAgICAgIG11c3QgYmUgdXNlZCB0byBnZXQgdGhlIGNvcnJlY3QgYW5zd2VyLiBOb3cgdGhlIG9wZXJhdGlvbiBpc1xuICAgICAgIGF1dG9tYXRpYy5cbiAgKi9cbiAgLypcbiAgIFJldHVybnMgdGhlIGNvZWZmaWNpZW50IG9mIHRoZSBpbWFnaW5hcnkgcGFydCBvZiBjb21wbGV4IHpcblxuICAgIHogICAgaW1hZyh6KVxuICAgIC0gICAgLS0tLS0tLVxuXG4gICAgYSArIGkgYiAgICBiXG5cbiAgICBleHAoaSBhKSAgc2luKGEpXG4gICovXG4gIC8qIFBvd2VyIGZ1bmN0aW9uXG5cbiAgICBJbnB1dDogICAgcHVzaCAgQmFzZVxuXG4gICAgICAgIHB1c2ggIEV4cG9uZW50XG5cbiAgICBPdXRwdXQ6ICAgIFJlc3VsdCBvbiBzdGFja1xuICAqL1xuICAvKlxuICBDb252ZXJ0IGNvbXBsZXggeiB0byByZWN0YW5ndWxhciBmb3JtXG5cbiAgICBJbnB1dDogICAgcHVzaCAgelxuXG4gICAgT3V0cHV0OiAgICBSZXN1bHQgb24gc3RhY2tcbiAgKi9cbiAgLyogZGV0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICBtXG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGRldGVybWluYW50IG9mIG1hdHJpeCBtLlxuICBVc2VzIEdhdXNzaWFuIGVsaW1pbmF0aW9uIGZvciBudW1lcmljYWwgbWF0cmljZXMuXG5cbiAgRXhhbXBsZTpcblxuICAgIGRldCgoKDEsMiksKDMsNCkpKVxuICAgID4gLTJcblxuICAqL1xuICAvKiBhZGogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIG1cblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgUmV0dXJucyB0aGUgYWRqdW5jdCBvZiBtYXRyaXggbS4gVGhlIGludmVyc2Ugb2YgbSBpcyBlcXVhbCB0byBhZGoobSkgZGl2aWRlZCBieSBkZXQobSkuXG5cbiAgKi9cbiAgLypcbiAgIEd1ZXNzZXMgYSByYXRpb25hbCBmb3IgZWFjaCBmbG9hdCBpbiB0aGUgcGFzc2VkIGV4cHJlc3Npb25cbiAgKi9cbiAgLyogYXJjY29zID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICB4XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGludmVyc2UgY29zaW5lIG9mIHguXG5cbiAgKi9cbiAgLyogYXJjY29zaCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgeFxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBSZXR1cm5zIHRoZSBpbnZlcnNlIGh5cGVyYm9saWMgY29zaW5lIG9mIHguXG5cbiAgKi9cbiAgLyogYXJjc2luID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICB4XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGludmVyc2Ugc2luZSBvZiB4LlxuXG4gICovXG4gIC8qIGFyY3NpbmggPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIHhcblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgUmV0dXJucyB0aGUgaW52ZXJzZSBoeXBlcmJvbGljIHNpbmUgb2YgeC5cblxuICAqL1xuICAvKiBhcmN0YW4gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIHhcblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgUmV0dXJucyB0aGUgaW52ZXJzZSB0YW5nZW50IG9mIHguXG5cbiAgKi9cbiAgLyogYXJjdGFuaCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgeFxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBSZXR1cm5zIHRoZSBpbnZlcnNlIGh5cGVyYm9saWMgdGFuZ2VudCBvZiB4LlxuXG4gICovXG4gIC8qIGJlc3NlbGogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIHgsblxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIFJldHVybnMgYSBzb2x1dGlvbiB0byB0aGUgQmVzc2VsIGRpZmZlcmVudGlhbCBlcXVhdGlvbiAoQmVzc2VsIGZ1bmN0aW9uIG9mIGZpcnN0IGtpbmQpLlxuXG4gIFJlY3VycmVuY2UgcmVsYXRpb246XG5cbiAgICBiZXNzZWxqKHgsbikgPSAoMi94KSAobi0xKSBiZXNzZWxqKHgsbi0xKSAtIGJlc3NlbGooeCxuLTIpXG5cbiAgICBiZXNzZWxqKHgsMS8yKSA9IHNxcnQoMi9waS94KSBzaW4oeClcblxuICAgIGJlc3NlbGooeCwtMS8yKSA9IHNxcnQoMi9waS94KSBjb3MoeClcblxuICBGb3IgbmVnYXRpdmUgbiwgcmVvcmRlciB0aGUgcmVjdXJyZW5jZSByZWxhdGlvbiBhczpcblxuICAgIGJlc3NlbGooeCxuLTIpID0gKDIveCkgKG4tMSkgYmVzc2Vsaih4LG4tMSkgLSBiZXNzZWxqKHgsbilcblxuICBTdWJzdGl0dXRlIG4rMiBmb3IgbiB0byBvYnRhaW5cblxuICAgIGJlc3NlbGooeCxuKSA9ICgyL3gpIChuKzEpIGJlc3NlbGooeCxuKzEpIC0gYmVzc2Vsaih4LG4rMilcblxuICBFeGFtcGxlczpcblxuICAgIGJlc3NlbGooeCwzLzIpID0gKDEveCkgYmVzc2Vsaih4LDEvMikgLSBiZXNzZWxqKHgsLTEvMilcblxuICAgIGJlc3NlbGooeCwtMy8yKSA9IC0oMS94KSBiZXNzZWxqKHgsLTEvMikgLSBiZXNzZWxqKHgsMS8yKVxuXG4gICovXG4gIC8qIGJlc3NlbHkgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIHgsblxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIEJlc3NlbCBmdW5jdGlvbiBvZiBzZWNvbmQga2luZC5cblxuICAqL1xuICAvKiBjZWlsaW5nID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICB4XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgUmV0dXJucyB0aGUgc21hbGxlc3QgaW50ZWdlciBub3QgbGVzcyB0aGFuIHguXG5cbiAgKi9cbiAgLyogY2hlY2sgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIHBcblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgUmV0dXJucyB3aGV0aGVyIHRoZSBwcmVkaWNhdGUgcCBpcyB0cnVlL2ZhbHNlIG9yIHVua25vd246XG4gIDAgaWYgZmFsc2UsIDEgaWYgdHJ1ZSBvciByZW1haW5zIHVuZXZhbHVhdGVkIGlmIHVua25vd24uXG4gIE5vdGUgdGhhdCBpZiBcImNoZWNrXCIgaXMgcGFzc2VkIGFuIGFzc2lnbm1lbnQsIGl0IHR1cm5zIGl0IGludG8gYSB0ZXN0LFxuICBpLmUuIGNoZWNrKGEgPSBiKSBpcyB0dXJuZWQgaW50byBjaGVjayhhPT1iKSBcbiAgc28gXCJhXCIgaXMgbm90IGFzc2lnbmVkIGFueXRoaW5nLlxuICBMaWtlIGluIG1hbnkgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzLCBcImNoZWNrXCIgYWxzbyBnaXZlcyB0cnV0aHluZXNzL2ZhbHN5bmVzc1xuICBmb3IgbnVtZXJpYyB2YWx1ZXMuIEluIHdoaWNoIGNhc2UsIFwidHJ1ZVwiIGlzIHJldHVybmVkIGZvciBub24temVybyB2YWx1ZXMuXG4gIFBvdGVudGlhbCBpbXByb3ZlbWVudHM6IFwiY2hlY2tcIiBjYW4ndCBldmFsdWF0ZSBzdHJpbmdzIHlldC5cblxuICAqL1xuICAvKiBjaG9vc2UgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIG4sa1xuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIFJldHVybnMgdGhlIG51bWJlciBvZiBjb21iaW5hdGlvbnMgb2YgbiBpdGVtcyB0YWtlbiBrIGF0IGEgdGltZS5cblxuICBGb3IgZXhhbXBsZSwgdGhlIG51bWJlciBvZiBmaXZlIGNhcmQgaGFuZHMgaXMgY2hvb3NlKDUyLDUpXG5cbiAgYGBgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiFcbiAgICAgICAgY2hvb3NlKG4saykgPSAtLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgICAgICAgIGshIChuIC0gaykhXG4gIGBgYFxuICAqL1xuICAvKiBjaXJjZXhwID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICB4XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgUmV0dXJucyBleHByZXNzaW9uIHggd2l0aCBjaXJjdWxhciBhbmQgaHlwZXJib2xpYyBmdW5jdGlvbnMgY29udmVydGVkIHRvIGV4cG9uZW50aWFsIGZvcm1zLiBTb21ldGltZXMgdGhpcyB3aWxsIHNpbXBsaWZ5IGFuIGV4cHJlc3Npb24uXG5cbiAgKi9cbiAgLyogY2xlYXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIHhcblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBDb21wbGV0ZWx5IHdpcGVzIGEgdmFyaWFibGUgZnJvbSB0aGUgZW52aXJvbm1lbnQgKHdoaWxlIGRvaW5nIHggPSBxdW90ZSh4KSBqdXN0IHVuYXNzaWducyBpdCkuXG5cbiAgKi9cbiAgLyogY2xlYXJhbGwgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgQ29tcGxldGVseSB3aXBlcyBhbGwgdmFyaWFibGVzIGZyb20gdGhlIGVudmlyb25tZW50LlxuXG4gICovXG4gIC8qIGNvZmFjdG9yID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICBtLGksalxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBDb2ZhY3RvciBvZiBhIG1hdHJpeCBjb21wb25lbnQuXG4gIExldCBjIGJlIHRoZSBjb2ZhY3RvciBtYXRyaXggb2YgbWF0cml4IG0sIGkuZS4gdHJhbnBvc2UoYykgPSBhZGoobSkuXG4gIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBjW2ksal0uXG5cbiAgKi9cbiAgLyogY29uaiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgelxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBSZXR1cm5zIHRoZSBjb21wbGV4IGNvbmp1Z2F0ZSBvZiB6LlxuXG4gICovXG4gIC8qIGNvbnRyYWN0ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICBhLGksalxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBDb250cmFjdCBhY3Jvc3MgdGVuc29yIGluZGljZXMgaS5lLiByZXR1cm5zIFwiYVwiIHN1bW1lZCBvdmVyIGluZGljZXMgaSBhbmQgai5cbiAgSWYgaSBhbmQgaiBhcmUgb21pdHRlZCB0aGVuIDEgYW5kIDIgYXJlIHVzZWQuXG4gIGNvbnRyYWN0KG0pIGlzIGVxdWl2YWxlbnQgdG8gdGhlIHRyYWNlIG9mIG1hdHJpeCBtLlxuXG4gICovXG4gIC8qIGNvc2ggPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIHhcblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgUmV0dXJucyB0aGUgaHlwZXJib2xpYyBjb3NpbmUgb2YgeFxuXG4gIGBgYFxuICAgICAgICAgICAgICBleHAoeCkgKyBleHAoLXgpXG4gICAgY29zaCh4KSA9IC0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICAgICAgIDJcbiAgYGBgXG5cbiAgKi9cbiAgLyogZGVnID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICBwLHhcblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgUmV0dXJucyB0aGUgZGVncmVlIG9mIHBvbHlub21pYWwgcCh4KS5cblxuICAqL1xuICAvKiBkZW5vbWluYXRvciA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgeFxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBSZXR1cm5zIHRoZSBkZW5vbWluYXRvciBvZiBleHByZXNzaW9uIHguXG5cbiAgKi9cbiAgLyogZGltID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICBtLG5cblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgUmV0dXJucyB0aGUgY2FyZGluYWxpdHkgb2YgdGhlIG50aCBpbmRleCBvZiB0ZW5zb3IgXCJtXCIuXG5cbiAgKi9cbiAgLyogZG8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIGEsYiwuLi5cblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgRXZhbHVhdGVzIGVhY2ggYXJndW1lbnQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYXJndW1lbnQuXG5cbiAgKi9cbiAgLyogZWlnZW52YWwgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIG1cblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQ29tcHV0ZSBlaWdlbnZhbHVlcyBvZiBtLiBTZWUgXCJlaWdlblwiIGZvciBtb3JlIGluZm8uXG5cbiAgKi9cbiAgLyogZWlnZW52ZWMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIG1cblxuICBHZW5lcmFsIGRlc2NyaXB0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQ29tcHV0ZSBlaWdlbnZlY3RvcnMgb2YgbS4gU2VlIFwiZWlnZW5cIiBmb3IgbW9yZSBpbmZvLlxuXG4gICovXG4gIC8qIGVyZiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBBdXRob3JzXG4gIC0tLS0tLS1cbiAgcGhpbGlwcGUuYmlsbGV0QG5vb3MuZnJcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgeFxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBFcnJvciBmdW5jdGlvbiBlcmYoeCkuXG4gIGVyZigteCk9ZXJmKHgpXG5cbiAgKi9cbiAgLypcbiAgUmVtb3ZlIHRlcm1zIHRoYXQgaW52b2x2ZSBhIGdpdmVuIHN5bWJvbCBvciBleHByZXNzaW9uLiBGb3IgZXhhbXBsZS4uLlxuXG4gICAgZmlsdGVyKHheMiArIHggKyAxLCB4KSAgICA9PiAgMVxuXG4gICAgZmlsdGVyKHheMiArIHggKyAxLCB4XjIpICA9PiAgeCArIDFcbiAgKi9cbiAgLyogZG90ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICBhLGIsLi4uXG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgVGhlIGlubmVyIChvciBkb3QpIG9wZXJhdG9yIGdpdmVzIHByb2R1Y3RzIG9mIHZlY3RvcnMsXG4gIG1hdHJpY2VzLCBhbmQgdGVuc29ycy5cblxuICBOb3RlIHRoYXQgZm9yIEFsZ2Vicml0ZSwgdGhlIGVsZW1lbnRzIG9mIGEgdmVjdG9yL21hdHJpeFxuICBjYW4gb25seSBiZSBzY2FsYXJzLiBUaGlzIGFsbG93cyBmb3IgZXhhbXBsZSB0byBmbGVzaCBvdXRcbiAgbWF0cml4IG11bHRpcGxpY2F0aW9uIHVzaW5nIHRoZSB1c3VhbCBtdWx0aXBsaWNhdGlvbi5cbiAgU28gZm9yIGV4YW1wbGUgYmxvY2stcmVwcmVzZW50YXRpb25zIGFyZSBub3QgYWxsb3dlZC5cblxuICBUaGVyZSBpcyBhbiBhd2VmdWwgbG90IG9mIGNvbmZ1c2lvbiBiZXR3ZWVuIHN3IHBhY2thZ2VzIG9uXG4gIHdoYXQgZG90IGFuZCBpbm5lciBkby5cblxuICBGaXJzdCBvZmYsIHRoZSBcImRvdFwiIG9wZXJhdG9yIGlzIGRpZmZlcmVudCBmcm9tIHRoZVxuICBtYXRoZW1hdGljYWwgbm90aW9uIG9mIGRvdCBwcm9kdWN0LCB3aGljaCBjYW4gYmVcbiAgc2xpZ2h0bHkgY29uZnVzaW5nLlxuXG4gIFRoZSBtYXRoZW1hdGljYWwgbm90aW9uIG9mIGRvdCBwcm9kdWN0IGlzIGhlcmU6XG4gICAgaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9Eb3RQcm9kdWN0Lmh0bWxcblxuICBIb3dldmVyLCBcImRvdFwiIGRvZXMgdGhhdCBhbmQgYSBidW5jaCBvZiBvdGhlciB0aGluZ3MsXG4gIGkuZS4gaW4gQWxnZWJyaXRlXG4gIGRvdC9pbm5lciBkb2VzIHdoYXQgdGhlIGRvdCBvZiBNYXRoZW1hdGljYSBkb2VzLCBpLmUuOlxuXG4gIHNjYWxhciBwcm9kdWN0IG9mIHZlY3RvcnM6XG5cbiAgICBpbm5lcigoYSwgYiwgYyksICh4LCB5LCB6KSlcbiAgICA+IGEgeCArIGIgeSArIGMgelxuXG4gIHByb2R1Y3RzIG9mIG1hdHJpY2VzIGFuZCB2ZWN0b3JzOlxuXG4gICAgaW5uZXIoKChhLCBiKSwgKGMsZCkpLCAoeCwgeSkpXG4gICAgPiAoYSB4ICsgYiB5LGMgeCArIGQgeSlcblxuICAgIGlubmVyKCh4LCB5KSwgKChhLCBiKSwgKGMsZCkpKVxuICAgID4gKGEgeCArIGMgeSxiIHggKyBkIHkpXG5cbiAgICBpbm5lcigoeCwgeSksICgoYSwgYiksIChjLGQpKSwgKHIsIHMpKVxuICAgID4gYSByIHggKyBiIHMgeCArIGMgciB5ICsgZCBzIHlcblxuICBtYXRyaXggcHJvZHVjdDpcblxuICAgIGlubmVyKCgoYSxiKSwoYyxkKSksKChyLHMpLCh0LHUpKSlcbiAgICA+ICgoYSByICsgYiB0LGEgcyArIGIgdSksKGMgciArIGQgdCxjIHMgKyBkIHUpKVxuXG4gIHRoZSBcImRvdC9pbm5lclwiIG9wZXJhdG9yIGlzIGFzc29jaWF0aXZlIGFuZFxuICBkaXN0cmlidXRpdmUgYnV0IG5vdCBjb21tdXRhdGl2ZS5cblxuICBJbiBNYXRoZW1hdGljYSwgSW5uZXIgaXMgYSBnZW5lcmFsaXNhdGlvbiBvZiBEb3Qgd2hlcmVcbiAgdGhlIHVzZXIgY2FuIHNwZWNpZnkgdGhlIG11bHRpcGxpY2F0aW9uIGFuZCB0aGUgYWRkaXRpb25cbiAgb3BlcmF0b3JzLlxuICBCdXQgaGVyZSBpbiBBbGdlYnJpdGUgdGhleSBkbyB0aGUgc2FtZSB0aGluZy5cblxuICAgaHR0cHM6Ly9yZWZlcmVuY2Uud29sZnJhbS5jb20vbGFuZ3VhZ2UvcmVmL0RvdC5odG1sXG4gICBodHRwczovL3JlZmVyZW5jZS53b2xmcmFtLmNvbS9sYW5ndWFnZS9yZWYvSW5uZXIuaHRtbFxuXG4gICBodHRwOi8vdWsubWF0aHdvcmtzLmNvbS9oZWxwL21hdGxhYi9yZWYvZG90Lmh0bWxcbiAgIGh0dHA6Ly91ay5tYXRod29ya3MuY29tL2hlbHAvbWF0bGFiL3JlZi9tdGltZXMuaHRtbFxuXG4gICovXG4gIC8qXG4gICBMYWd1ZXJyZSBmdW5jdGlvblxuXG4gIEV4YW1wbGVcblxuICAgIGxhZ3VlcnJlKHgsMylcblxuICBSZXN1bHRcblxuICAgICAgIDEgICAzICAgIDMgICAyXG4gICAgLSAtLS0geCAgKyAtLS0geCAgLSAzIHggKyAxXG4gICAgICAgNiAgICAgICAgMlxuXG4gIFRoZSBjb21wdXRhdGlvbiB1c2VzIHRoZSBmb2xsb3dpbmcgcmVjdXJyZW5jZSByZWxhdGlvbi5cblxuICAgIEwoeCwwLGspID0gMVxuXG4gICAgTCh4LDEsaykgPSAteCArIGsgKyAxXG5cbiAgICBuKkwoeCxuLGspID0gKDIqKG4tMSkrMS14K2spKkwoeCxuLTEsaykgLSAobi0xK2spKkwoeCxuLTIsaylcblxuICBJbiB0aGUgXCJmb3JcIiBsb29wIGkgPSBuLTEgc28gdGhlIHJlY3VycmVuY2UgcmVsYXRpb24gYmVjb21lc1xuXG4gICAgKGkrMSkqTCh4LG4saykgPSAoMippKzEteCtrKSpMKHgsbi0xLGspIC0gKGkraykqTCh4LG4tMixrKVxuICAqL1xuICAvKlxuICAgUmV0dXJuIHRoZSBsZWFkaW5nIGNvZWZmaWNpZW50IG9mIGEgcG9seW5vbWlhbC5cblxuICBFeGFtcGxlXG5cbiAgICBsZWFkaW5nKDV4XjIreCsxLHgpXG5cbiAgUmVzdWx0XG5cbiAgICA1XG5cbiAgVGhlIHJlc3VsdCBpcyB1bmRlZmluZWQgaWYgUCBpcyBub3QgYSBwb2x5bm9taWFsLlxuICAqL1xuICAvKlxuICAgTGVnZW5kcmUgZnVuY3Rpb25cblxuICBFeGFtcGxlXG5cbiAgICBsZWdlbmRyZSh4LDMsMClcblxuICBSZXN1bHRcblxuICAgICA1ICAgMyAgICAzXG4gICAgLS0tIHggIC0gLS0tIHhcbiAgICAgMiAgICAgICAgMlxuXG4gIFRoZSBjb21wdXRhdGlvbiB1c2VzIHRoZSBmb2xsb3dpbmcgcmVjdXJyZW5jZSByZWxhdGlvbi5cblxuICAgIFAoeCwwKSA9IDFcblxuICAgIFAoeCwxKSA9IHhcblxuICAgIG4qUCh4LG4pID0gKDIqKG4tMSkrMSkqeCpQKHgsbi0xKSAtIChuLTEpKlAoeCxuLTIpXG5cbiAgSW4gdGhlIFwiZm9yXCIgbG9vcCB3ZSBoYXZlIGkgPSBuLTEgc28gdGhlIHJlY3VycmVuY2UgcmVsYXRpb24gYmVjb21lc1xuXG4gICAgKGkrMSkqUCh4LG4pID0gKDIqaSsxKSp4KlAoeCxuLTEpIC0gaSpQKHgsbi0yKVxuXG4gIEZvciBtID4gMFxuXG4gICAgUCh4LG4sbSkgPSAoLTEpXm0gKiAoMS14XjIpXihtLzIpICogZF5tL2R4Xm0gUCh4LG4pXG4gICovXG4gIC8qXG4gIENvbnZlcnQgY29tcGxleCB6IHRvIHBvbGFyIGZvcm1cblxuICAgIElucHV0OiAgICBwdXNoICB6XG5cbiAgICBPdXRwdXQ6ICAgIFJlc3VsdCBvbiBzdGFja1xuXG4gICAgcG9sYXIoeikgPSBhYnMoeikgKiBleHAoaSAqIGFyZyh6KSlcbiAgKi9cbiAgLypcbiAgIFJldHVybnMgdGhlIHJlYWwgcGFydCBvZiBjb21wbGV4IHpcblxuICAgIHogICAgcmVhbCh6KVxuICAgIC0gICAgLS0tLS0tLVxuXG4gICAgYSArIGkgYiAgICBhXG5cbiAgICBleHAoaSBhKSAgY29zKGEpXG4gICovXG4gIC8qXG4gIFRheWxvciBleHBhbnNpb24gb2YgYSBmdW5jdGlvblxuXG4gICAgcHVzaChGKVxuICAgIHB1c2goWClcbiAgICBwdXNoKE4pXG4gICAgcHVzaChBKVxuICAgIHRheWxvcigpXG4gICovXG4gIC8qXG4gIC8vIHVwIHRvIDEwMCBibG9ja3Mgb2YgMTAwLDAwMCBhdG9tc1xuXG4gICNkZWZpbmUgTSAxMDBcbiAgI2RlZmluZSBOIDEwMDAwMFxuXG4gIFUgKm1lbVtNXVxuICBpbnQgbWNvdW50XG5cbiAgVSAqZnJlZV9saXN0XG4gIGludCBmcmVlX2NvdW50XG5cbiAgVSAqXG4gIGFsbG9jKHZvaWQpXG4gIHtcbiAgICBVICpwXG4gICAgaWYgKGZyZWVfY291bnQgPT0gMCkge1xuICAgICAgaWYgKG1jb3VudCA9PSAwKVxuICAgICAgICBhbGxvY19tZW0oKVxuICAgICAgZWxzZSB7XG4gICAgICAgIGdjKClcbiAgICAgICAgaWYgKGZyZWVfY291bnQgPCBOICogbWNvdW50IC8gMilcbiAgICAgICAgICBhbGxvY19tZW0oKVxuICAgICAgfVxuICAgICAgaWYgKGZyZWVfY291bnQgPT0gMClcbiAgICAgICAgc3RvcChcImF0b20gc3BhY2UgZXhoYXVzdGVkXCIpXG4gICAgfVxuICAgIHAgPSBmcmVlX2xpc3RcbiAgICBmcmVlX2xpc3QgPSBmcmVlX2xpc3QtPnUuY29ucy5jZHJcbiAgICBmcmVlX2NvdW50LS1cbiAgICByZXR1cm4gcFxuICB9XG4gICAqL1xuICAvKlxuICAgQ29tcGFyZSBhZGphY2VudCB0ZXJtcyBpbiBzW10gYW5kIGNvbWJpbmUgaWYgcG9zc2libGUuXG5cbiAgICBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdGVybXMgcmVtYWluaW5nIGluIHNbXS5cblxuICAgIG4gIG51bWJlciBvZiB0ZXJtcyBpbiBzW10gaW5pdGlhbGx5XG4gICovXG4gIC8qIGNyb3NzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdCwgc2NyaXB0X2RlZmluZWRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgdSx2XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdmVjdG9ycyB1IGFuZCB2LlxuXG4gICovXG4gIC8qIGN1cmwgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0LCBzY3JpcHRfZGVmaW5lZFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICB1XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGN1cmwgb2YgdmVjdG9yIHUuXG5cbiAgKi9cbiAgLypcbiAgICBDbGVhciBhbGwgcGF0dGVybnNcbiAgKi9cbiAgLypcbiAgaWYgMFxuXG4gICAqIGxlZnQgYnJhY2VcblxuICAgIGZvciAoaSA9IDA7IGkgPCBoOyBpKyspIHtcbiAgICAgIGlmICh5aW5kZXggPT0gWU1BWClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNoYXJ0YWJbeWluZGV4XS5jID0gJ3wnXG4gICAgICBjaGFydGFiW3lpbmRleF0ueCA9IHggLSAyXG4gICAgICBjaGFydGFiW3lpbmRleF0ueSA9IHkgKyBpXG4gICAgICB5aW5kZXgrK1xuICAgIH1cblxuICAgKiByaWdodCBicmFjZVxuXG4gICAgZW1pdF94KytcblxuICAgIGZvciAoaSA9IDA7IGkgPCBoOyBpKyspIHtcbiAgICAgIGlmICh5aW5kZXggPT0gWU1BWClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNoYXJ0YWJbeWluZGV4XS5jID0gJ3wnXG4gICAgICBjaGFydGFiW3lpbmRleF0ueCA9IGVtaXRfeFxuICAgICAgY2hhcnRhYlt5aW5kZXhdLnkgPSB5ICsgaVxuICAgICAgeWluZGV4KytcbiAgICB9XG5cbiAgICBlbWl0X3grK1xuXG4gIGVuZGlmXG4gICAqL1xuICAvKlxuICAgRm9yIGV4YW1wbGUuLi5cblxuICAgIHB1c2goRilcbiAgICBwdXNoKFgpXG4gICAgZmlsdGVyKClcbiAgICBGID0gcG9wKClcbiAgKi9cbiAgLypcbiAgIFN5bWJvbGljIGFkZGl0aW9uXG5cbiAgICBUZXJtcyBpbiBhIHN1bSBhcmUgY29tYmluZWQgaWYgdGhleSBhcmUgaWRlbnRpY2FsIG1vZHVsbyByYXRpb25hbFxuICAgIGNvZWZmaWNpZW50cy5cblxuICAgIEZvciBleGFtcGxlLCBBICsgMkEgYmVjb21lcyAzQS5cblxuICAgIEhvd2V2ZXIsIHRoZSBzdW0gQSArIHNxcnQoMikgQSBpcyBub3QgbW9kaWZpZWQuXG5cbiAgICBDb21iaW5pbmcgdGVybXMgY2FuIGxlYWQgdG8gc2Vjb25kLW9yZGVyIGVmZmVjdHMuXG5cbiAgICBGb3IgZXhhbXBsZSwgY29uc2lkZXIgdGhlIGNhc2Ugb2ZcblxuICAgICAgMS9zcXJ0KDIpIEEgKyAzL3NxcnQoMikgQSArIHNxcnQoMikgQVxuXG4gICAgVGhlIGZpcnN0IHR3byB0ZXJtcyBhcmUgY29tYmluZWQgdG8geWllbGQgMiBzcXJ0KDIpIEEuXG5cbiAgICBUaGlzIHJlc3VsdCBjYW4gbm93IGJlIGNvbWJpbmVkIHdpdGggdGhlIHRoaXJkIHRlcm0gdG8geWllbGRcblxuICAgICAgMyBzcXJ0KDIpIEFcbiAgKi9cbiAgLypcbiAgIFRhYmxlIG9mIGludGVncmFsc1xuXG4gIFRoZSBzeW1ib2wgZiBpcyBqdXN0IGEgZHVtbXkgc3ltYm9sIGZvciBjcmVhdGluZyBhIGxpc3QgZihBLEIsQyxDLC4uLikgd2hlcmVcblxuICAgIEEgIGlzIHRoZSB0ZW1wbGF0ZSBleHByZXNzaW9uXG5cbiAgICBCICBpcyB0aGUgcmVzdWx0IGV4cHJlc3Npb25cblxuICAgIEMgIGlzIGFuIG9wdGlvbmFsIGxpc3Qgb2YgY29uZGl0aW9uYWwgZXhwcmVzc2lvbnNcbiAgKi9cbiAgLypcbiAgIFBhcnRpdGlvbiBhIHRlcm1cblxuICAgIElucHV0IHN0YWNrOlxuXG4gICAgICB0ZXJtIChmYWN0b3Igb3IgcHJvZHVjdCBvZiBmYWN0b3JzKVxuXG4gICAgICBmcmVlIHZhcmlhYmxlXG5cbiAgICBPdXRwdXQgc3RhY2s6XG5cbiAgICAgIGNvbnN0YW50IGV4cHJlc3Npb25cblxuICAgICAgdmFyaWFibGUgZXhwcmVzc2lvblxuICAqL1xuICAvKlxuICAgIFN1YnN0aXR1dGUgbmV3IGV4cHIgZm9yIG9sZCBleHByIGluIGV4cHIuXG5cbiAgICBJbnB1dDogIHB1c2ggIGV4cHJcblxuICAgICAgcHVzaCAgb2xkIGV4cHJcblxuICAgICAgcHVzaCAgbmV3IGV4cHJcblxuICAgIE91dHB1dDogIFJlc3VsdCBvbiBzdGFja1xuICAqL1xuICB2YXIgJCwgQUJTLCBBREQsIEFESiwgQU5ELCBBUFBST1hSQVRJTywgQVJDQ09TLCBBUkNDT1NILCBBUkNTSU4sIEFSQ1NJTkgsIEFSQ1RBTiwgQVJDVEFOSCwgQVJHLCBBU1NVTUVfUkVBTF9WQVJJQUJMRVMsIEFUT01JWkUsIEFVVE9FWFBBTkQsIEJBS0UsIEJFU1NFTEosIEJFU1NFTFksIEJJTkRJTkcsIEJJTk9NSUFMLCBCSU5PTV9jaGVja19hcmdzLCBCVUYsIEMxLCBDMiwgQzMsIEM0LCBDNSwgQzYsIENFSUxJTkcsIENIRUNLLCBDSE9PU0UsIENJUkNFWFAsIENMRUFSLCBDTEVBUkFMTCwgQ0xFQVJQQVRURVJOUywgQ0xPQ0ssIENPRUZGLCBDT0ZBQ1RPUiwgQ09OREVOU0UsIENPTkosIENPTlMsIENPTlRSQUNULCBDT1MsIENPU0gsIENvbmRlbnNlLCBERUJVRywgREVCVUdfQUJTLCBERUJVR19BUkcsIERFQlVHX0NMT0NLRk9STSwgREVCVUdfSU1BRywgREVCVUdfSVMsIERFQlVHX1BPV0VSLCBERUJVR19SRUNULCBERUNPTVAsIERFRklOVCwgREVHUkVFLCBERU5PTUlOQVRPUiwgREVSSVZBVElWRSwgREVULCBERVRfY2hlY2tfYXJnLCBESU0sIERJUkFDLCBESVZJU09SUywgRE8sIERPVCwgRE9VQkxFLCBEUkFXLCBEUkFXWCwgRFNPTFZFLCBFLCBFSUdFTiwgRUlHRU5WQUwsIEVJR0VOVkVDLCBFSUdfTiwgRUlHX2NoZWNrX2FyZywgRUlHX3l5ZGQsIEVJR195eXFxLCBFUkYsIEVSRkMsIEVWQUwsIEVYUCwgRVhQQU5ELCBFWFBDT1MsIEVYUFNJTiwgRXZhbCwgRXZhbF9FdmFsLCBFdmFsX2FicywgRXZhbF9hZGQsIEV2YWxfYWRqLCBFdmFsX2FuZCwgRXZhbF9hcHByb3hyYXRpbywgRXZhbF9hcmNjb3MsIEV2YWxfYXJjY29zaCwgRXZhbF9hcmNzaW4sIEV2YWxfYXJjc2luaCwgRXZhbF9hcmN0YW4sIEV2YWxfYXJjdGFuaCwgRXZhbF9hcmcsIEV2YWxfYmVzc2VsaiwgRXZhbF9iZXNzZWx5LCBFdmFsX2JpbmRpbmcsIEV2YWxfYmlub21pYWwsIEV2YWxfY2VpbGluZywgRXZhbF9jaGVjaywgRXZhbF9jaG9vc2UsIEV2YWxfY2lyY2V4cCwgRXZhbF9jbGVhciwgRXZhbF9jbGVhcmFsbCwgRXZhbF9jbGVhcnBhdHRlcm5zLCBFdmFsX2Nsb2NrLCBFdmFsX2NvZWZmLCBFdmFsX2NvZmFjdG9yLCBFdmFsX2NvbmRlbnNlLCBFdmFsX2NvbmosIEV2YWxfY29ucywgRXZhbF9jb250cmFjdCwgRXZhbF9jb3MsIEV2YWxfY29zaCwgRXZhbF9kZWNvbXAsIEV2YWxfZGVmaW50LCBFdmFsX2RlZ3JlZSwgRXZhbF9kZW5vbWluYXRvciwgRXZhbF9kZXJpdmF0aXZlLCBFdmFsX2RldCwgRXZhbF9kaW0sIEV2YWxfZGlyYWMsIEV2YWxfZGl2aXNvcnMsIEV2YWxfZG8sIEV2YWxfZHNvbHZlLCBFdmFsX2VpZ2VuLCBFdmFsX2VpZ2VudmFsLCBFdmFsX2VpZ2VudmVjLCBFdmFsX2VyZiwgRXZhbF9lcmZjLCBFdmFsX2V4cCwgRXZhbF9leHBhbmQsIEV2YWxfZXhwY29zLCBFdmFsX2V4cHNpbiwgRXZhbF9mYWN0b3IsIEV2YWxfZmFjdG9yaWFsLCBFdmFsX2ZhY3RvcnBvbHksIEV2YWxfZmlsdGVyLCBFdmFsX2Zsb2F0LCBFdmFsX2Zsb29yLCBFdmFsX2ZvciwgRXZhbF9mdW5jdGlvbl9yZWZlcmVuY2UsIEV2YWxfZ2FtbWEsIEV2YWxfZ2NkLCBFdmFsX2hlcm1pdGUsIEV2YWxfaGlsYmVydCwgRXZhbF9pbWFnLCBFdmFsX2luZGV4LCBFdmFsX2lubmVyLCBFdmFsX2ludGVncmFsLCBFdmFsX2ludiwgRXZhbF9pbnZnLCBFdmFsX2lzaW50ZWdlciwgRXZhbF9pc3ByaW1lLCBFdmFsX2xhZ3VlcnJlLCBFdmFsX2xjbSwgRXZhbF9sZWFkaW5nLCBFdmFsX2xlZ2VuZHJlLCBFdmFsX2xvZywgRXZhbF9sb29rdXAsIEV2YWxfbW9kLCBFdmFsX211bHRpcGx5LCBFdmFsX25vZXhwYW5kLCBFdmFsX25vdCwgRXZhbF9ucm9vdHMsIEV2YWxfbnVtYmVyLCBFdmFsX251bWVyYXRvciwgRXZhbF9vcGVyYXRvciwgRXZhbF9vciwgRXZhbF9vdXRlciwgRXZhbF9wYXR0ZXJuLCBFdmFsX3BhdHRlcm5zaW5mbywgRXZhbF9wb2xhciwgRXZhbF9wb3dlciwgRXZhbF9wcmVkaWNhdGUsIEV2YWxfcHJpbWUsIEV2YWxfcHJpbnQsIEV2YWxfcHJpbnQyZGFzY2lpLCBFdmFsX3ByaW50Y29tcHV0ZXIsIEV2YWxfcHJpbnRodW1hbiwgRXZhbF9wcmludGxhdGV4LCBFdmFsX3ByaW50bGlzdCwgRXZhbF9wcm9kdWN0LCBFdmFsX3F1b3RlLCBFdmFsX3F1b3RpZW50LCBFdmFsX3JhbmssIEV2YWxfcmF0aW9uYWxpemUsIEV2YWxfcmVhbCwgRXZhbF9yZWN0LCBFdmFsX3Jvb3RzLCBFdmFsX3JvdW5kLCBFdmFsX3NldHEsIEV2YWxfc2duLCBFdmFsX3NoYXBlLCBFdmFsX3NpbGVudHBhdHRlcm4sIEV2YWxfc2ltZmFjLCBFdmFsX3NpbXBsaWZ5LCBFdmFsX3NpbiwgRXZhbF9zaW5oLCBFdmFsX3NxcnQsIEV2YWxfc3RvcCwgRXZhbF9zdWJzdCwgRXZhbF9zdW0sIEV2YWxfc3ltLCBFdmFsX3N5bWJvbHNpbmZvLCBFdmFsX3RhbiwgRXZhbF90YW5oLCBFdmFsX3RheWxvciwgRXZhbF90ZW5zb3IsIEV2YWxfdGVzdCwgRXZhbF90ZXN0ZXEsIEV2YWxfdGVzdGdlLCBFdmFsX3Rlc3RndCwgRXZhbF90ZXN0bGUsIEV2YWxfdGVzdGx0LCBFdmFsX3RyYW5zcG9zZSwgRXZhbF91bml0LCBFdmFsX3VzZXJfZnVuY3Rpb24sIEV2YWxfemVybywgRXZhbHBvbHksIEZBQ1RPUiwgRkFDVE9SSUFMLCBGQUNUT1JQT0xZLCBGSUxURVIsIEZMT0FURiwgRkxPT1IsIEZPUiwgRk9SQ0VfRklYRURfUFJJTlRPVVQsIEZVTkNUSU9OLCBGaW5kLCBHQU1NQSwgR0NELCBIRVJNSVRFLCBISUxCRVJULCBJTUFHLCBJTkRFWCwgSU5ORVIsIElOVEVHUkFMLCBJTlYsIElOVkcsIElOVl9jaGVja19hcmcsIElOVl9kZWNvbXAsIElTSU5URUdFUiwgSVNQUklNRSwgTEFHVUVSUkUsIExBU1QsIExBU1RfMkRBU0NJSV9QUklOVCwgTEFTVF9GVUxMX1BSSU5ULCBMQVNUX0xBVEVYX1BSSU5ULCBMQVNUX0xJU1RfUFJJTlQsIExBU1RfUExBSU5fUFJJTlQsIExBU1RfUFJJTlQsIExDTSwgTEVBRElORywgTEVHRU5EUkUsIExPRywgTE9PS1VQLCBNLCBNQVhESU0sIE1BWFBSSU1FVEFCLCBNQVhfQ09OU0VDVVRJVkVfQVBQTElDQVRJT05TX09GX0FMTF9SVUxFUywgTUFYX0NPTlNFQ1VUSVZFX0FQUExJQ0FUSU9OU19PRl9TSU5HTEVfUlVMRSwgTUFYX0ZJWEVEX1BSSU5UT1VUX0RJR0lUUywgTUFYX1BST0dSQU1fU0laRSwgTUVRVUFMLCBNRVRBQSwgTUVUQUIsIE1FVEFYLCBNTEVOR1RILCBNT0QsIE1TSUdOLCBNVUxUSVBMWSwgTVpFUk8sIE4sIE5JTCwgTk9ULCBOUk9PVFMsIE5ST09UU19BQlMsIE5ST09UU19ERUxUQSwgTlJPT1RTX0VQU0lMT04sIE5ST09UU19SQU5ET00sIE5ST09UU19ZTUFYLCBOUk9PVFNfZGl2cG9seSwgTlNZTSwgTlVNLCBOVU1CRVIsIE5VTUVSQVRPUiwgT1BFUkFUT1IsIE9SLCBPVVRFUiwgUEFUVEVSTiwgUEFUVEVSTlNJTkZPLCBQSSwgUE9MQVIsIFBPV0VSLCBQUklNRSwgUFJJTlQsIFBSSU5UMkRBU0NJSSwgUFJJTlRGVUxMLCBQUklOVExBVEVYLCBQUklOVExJU1QsIFBSSU5UTU9ERV8yREFTQ0lJLCBQUklOVE1PREVfQ09NUFVURVIsIFBSSU5UTU9ERV9IVU1BTiwgUFJJTlRNT0RFX0xBVEVYLCBQUklOVE1PREVfTElTVCwgUFJJTlRPVVRSRVNVTFQsIFBSSU5UUExBSU4sIFBSSU5UX0xFQVZFX0VfQUxPTkUsIFBSSU5UX0xFQVZFX1hfQUxPTkUsIFBST0RVQ1QsIFFVT1RFLCBRVU9USUVOVCwgUkFOSywgUkFUSU9OQUxJWkUsIFJFQUwsIFJPT1RTLCBST1VORCwgU0VDUkVUWCwgU0VMRlRFU1QsIFNFVFEsIFNHTiwgU0hBUEUsIFNJTEVOVFBBVFRFUk4sIFNJTVBMSUZZLCBTSU4sIFNJTkgsIFNQQUNFX0JFVFdFRU5fQ09MVU1OUywgU1BBQ0VfQkVUV0VFTl9ST1dTLCBTUVJULCBTVE9QLCBTVFIsIFNVQlNULCBTVU0sIFNZTSwgU1lNQk9MU0lORk8sIFNZTUJPTF9BLCBTWU1CT0xfQV9VTkRFUlNDT1JFLCBTWU1CT0xfQiwgU1lNQk9MX0JfVU5ERVJTQ09SRSwgU1lNQk9MX0MsIFNZTUJPTF9ELCBTWU1CT0xfSSwgU1lNQk9MX0lERU5USVRZX01BVFJJWCwgU1lNQk9MX0osIFNZTUJPTF9OLCBTWU1CT0xfUiwgU1lNQk9MX1MsIFNZTUJPTF9ULCBTWU1CT0xfWCwgU1lNQk9MX1hfVU5ERVJTQ09SRSwgU1lNQk9MX1ksIFNZTUJPTF9aLCBUQU4sIFRBTkgsIFRBWUxPUiwgVEVOU09SLCBURVNULCBURVNURVEsIFRFU1RHRSwgVEVTVEdULCBURVNUTEUsIFRFU1RMVCwgVElNSU5HX0RFQlVHUywgVE9TLCBUUkFDRSwgVFJBTlNQT1NFLCBUX0RPVUJMRSwgVF9FUSwgVF9GVU5DVElPTiwgVF9HVEVRLCBUX0lOVEVHRVIsIFRfTFRFUSwgVF9ORVEsIFRfTkVXTElORSwgVF9RVU9UQVNTSUdOLCBUX1NUUklORywgVF9TWU1CT0wsIFUsIFVOSVQsIFVTUl9TWU1CT0xTLCBWRVJTSU9OLCBZTUFYLCBZWUUsIFlZUkVDVCwgWkVSTywgX19lbWl0X2NoYXIsIF9fZW1pdF9zdHIsIF9fZmFjdG9yX2FkZCwgX19mYWN0b3JpYWwsIF9faXNfbmVnYXRpdmUsIF9faXNfcmFkaWNhbF9udW1iZXIsIF9fbGNtLCBfX2xlZ2VuZHJlLCBfX2xlZ2VuZHJlMiwgX19sZWdlbmRyZTMsIF9fbm9ybWFsaXplX3JhZGljYWxfZmFjdG9ycywgX19yYXRpb25hbGl6ZV90ZW5zb3IsIF9wcmludCwgYWJzLCBhYnNWYWxGbG9hdCwgYWJzdmFsLCBhYnN2YWxfdGVuc29yLCBhZGQsIGFkZFN5bWJvbExlZnRPZkFzc2lnbm1lbnQsIGFkZFN5bWJvbFJpZ2h0T2ZBc3NpZ25tZW50LCBhZGRfYWxsLCBhZGRfZmFjdG9yX3RvX2FjY3VtdWxhdG9yLCBhZGRfbnVtYmVycywgYWRkX3Rlcm1zLCBhZGRmLCBhZGosIGFsbG9jX3RlbnNvciwgYWxsb2NhdGVkSWQsIGFueV9kZW5vbWluYXRvcnMsIGFwcHJveEFsbCwgYXBwcm94TG9ncywgYXBwcm94TG9nc09mUmF0aW9uYWxzLCBhcHByb3hPbmVSYXRpb09ubHksIGFwcHJveFJhZGljYWxzLCBhcHByb3hSYWRpY2Fsc09mUmF0aW9uYWxzLCBhcHByb3hSYXRpb25hbHNPZkxvZ3MsIGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFLCBhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUEksIGFwcHJveFJhdGlvbmFsc09mUmFkaWNhbHMsIGFwcHJveFNpbmVPZlJhdGlvbmFsTXVsdGlwbGVzT2ZQSSwgYXBwcm94U2luZU9mUmF0aW9uYWxzLCBhcHByb3hUcmlnb25vbWV0cmljLCBhcHByb3hfanVzdF9hbl9pbnRlZ2VyLCBhcHByb3hfbG9nYXJpdGhtc09mUmF0aW9uYWxzLCBhcHByb3hfbm90aGluZ1VzZWZ1bCwgYXBwcm94X3JhZGljYWxPZlJhdGlvLCBhcHByb3hfcmF0aW9PZlJhZGljYWwsIGFwcHJveF9yYXRpb25hbE9mRSwgYXBwcm94X3JhdGlvbmFsT2ZQaSwgYXBwcm94X3JhdGlvbmFsc09mTG9nYXJpdGhtcywgYXBwcm94X3NpbmVfb2ZfcGlfdGltZXNfcmF0aW9uYWwsIGFwcHJveF9zaW5lX29mX3JhdGlvbmFsLCBhcHByb3hyYXRpb1JlY3Vyc2l2ZSwgYXJjY29zLCBhcmNjb3NoLCBhcmNzaW4sIGFyY3NpbmgsIGFyY3RhbiwgYXJjdGFuaCwgYXJldW5pdmFycG9seXNmYWN0b3JlZG9yZXhwYW5kZWRmb3JtLCBhcmcsIGFyZ2xpc3QsIGFzc2lnbm1lbnRGb3VuZCwgYXZvaWRDYWxjdWxhdGluZ1Bvd2Vyc0ludG9BcmN0YW5zLCBiYWtlLCBiYWtlX3BvbHksIGJha2VfcG9seV90ZXJtLCBiZXNzZWxqLCBiZXNzZWx5LCBiaWdJbnQsIGJpZ251bV9mYWN0b3JpYWwsIGJpZ251bV9mbG9hdCwgYmlnbnVtX3Bvd2VyX251bWJlciwgYmlnbnVtX3NjYW5fZmxvYXQsIGJpZ251bV9zY2FuX2ludGVnZXIsIGJpZ251bV90cnVuY2F0ZSwgYmluZGluZywgYmlub21pYWwsIGJ1ZmZlciwgYnVpbGRfdGVuc29yLCBjYWFkZHIsIGNhYWRyLCBjYWFyLCBjYWRhZGRyLCBjYWRhZHIsIGNhZGFyLCBjYWRkYWRkciwgY2FkZGFkciwgY2FkZGFyLCBjYWRkZGRyLCBjYWRkZHIsIGNhZGRyLCBjYWRyLCBjYWxsZWRfZnJvbV9BbGdlYnJhX2Jsb2NrLCBjYXIsIGNkYWRkciwgY2RhZHIsIGNkYXIsIGNkZGFkZHIsIGNkZGFyLCBjZGRkYWRkciwgY2RkZGRyLCBjZGRkciwgY2RkciwgY2RyLCBjZWlsaW5nLCBjaGFpbk9mVXNlclN5bWJvbHNOb3RGdW5jdGlvbnNCZWluZ0V2YWx1YXRlZCwgY2hhclRhYkluZGV4LCBjaGFydGFiLCBjaGVja0Zsb2F0SGFzV29ya2VkT3V0Q29tcGxldGVseSwgY2hlY2tfZXNjX2ZsYWcsIGNoZWNrX3N0YWNrLCBjaGVja190ZW5zb3JfZGltZW5zaW9ucywgY2hvb3NlLCBjaG9vc2VfY2hlY2tfYXJncywgY2lyY2V4cCwgY2xlYXJBbGdlYnJhRW52aXJvbm1lbnQsIGNsZWFyUmVuYW1lZFZhcmlhYmxlc1RvQXZvaWRCaW5kaW5nVG9FeHRlcm5hbFNjb3BlLCBjbGVhcl9zeW1ib2xzLCBjbGVhcl90ZXJtLCBjbGVhcmFsbCwgY2xvY2tmb3JtLCBjbXBHbHlwaHMsIGNtcF9hcmdzLCBjbXBfZXhwciwgY21wX3Rlcm1zLCBjbXBfdGVybXNfY291bnQsIGNvZGVHZW4sIGNvZWZmLCBjb2ZhY3RvciwgY29sbGVjdExhdGV4U3RyaW5nRnJvbVJldHVyblZhbHVlLCBjb2xsZWN0VXNlclN5bWJvbHMsIGNvbWJpbmVfZmFjdG9ycywgY29tYmluZV9nYW1tYXMsIGNvbWJpbmVfdGVybXMsIGNvbXBhcmVTdGF0ZSwgY29tcGFyZV9udW1iZXJzLCBjb21wYXJlX3JhdGlvbmFscywgY29tcGFyZV90ZW5zb3JzLCBjb21wYXRpYmxlLCBjb21wdXRlRGVwZW5kZW5jaWVzRnJvbUFsZ2VicmEsIGNvbXB1dGVSZXN1bHRzQW5kSmF2YVNjcmlwdEZyb21BbGdlYnJhLCBjb21wdXRlX2ZhLCBjb25qdWdhdGUsIGNvbnMsIGNvbnNDb3VudCwgY29udHJhY3QsIGNvbnZlcnRfYmlnbnVtX3RvX2RvdWJsZSwgY29udmVydF9yYXRpb25hbF90b19kb3VibGUsIGNvcHlfdGVuc29yLCBjb3NpbmUsIGNvc2luZV9vZl9hbmdsZSwgY29zaW5lX29mX2FuZ2xlX3N1bSwgY291bnQsIGNvdW50T2NjdXJyZW5jZXNPZlN5bWJvbCwgY291bnRfZGVub21pbmF0b3JzLCBjb3VudGVyLCBjb3VudHNpemUsIGRfc2NhbGFyX3NjYWxhciwgZF9zY2FsYXJfc2NhbGFyXzEsIGRfc2NhbGFyX3RlbnNvciwgZF90ZW5zb3Jfc2NhbGFyLCBkX3RlbnNvcl90ZW5zb3IsIGRhYnMsIGRhcmNjb3MsIGRhcmNjb3NoLCBkYXJjc2luLCBkYXJjc2luaCwgZGFyY3RhbiwgZGFyY3RhbmgsIGRiZXNzZWxqMCwgZGJlc3NlbGpuLCBkYmVzc2VseTAsIGRiZXNzZWx5biwgZGNvcywgZGNvc2gsIGRkLCBkZWNvbXAsIGRlY29tcF9wcm9kdWN0LCBkZWNvbXBfc3VtLCBkZWZpbmVTb21lSGFuZHlDb25zdGFudHMsIGRlZmluZV91c2VyX2Z1bmN0aW9uLCBkZWZuLCBkZWZuX3N0ciwgZGVncmVlLCBkZW5vbWluYXRvciwgZGVyZiwgZGVyZmMsIGRlcml2YXRpdmUsIGRlcml2YXRpdmVfb2ZfaW50ZWdyYWwsIGRldCwgZGV0ZXJtaW5hbnQsIGRldGcsIGRmdW5jdGlvbiwgZGhlcm1pdGUsIGRpcmFjLCBkaXNwbGF5LCBkaXNwbGF5X2ZsYWcsIGRpc3BsYXljaGFyLCBkaXZpZGUsIGRpdmlkZV9udW1iZXJzLCBkaXZpc29ycywgZGl2aXNvcnNfb25zdGFjaywgZGl2cG9seSwgZGxvZywgZG9fY2xlYXJQYXR0ZXJucywgZG9fY2xlYXJhbGwsIGRvX3NpbXBsaWZ5X25lc3RlZF9yYWRpY2FscywgZG9udENyZWF0ZU5ld1JhZGljYWxzSW5EZW5vbWluYXRvcldoZW5FdmFsaW5nTXVsdGlwbGljYXRpb24sIGRvdHByb2RfdW5pY29kZSwgZG91YmxlVG9SZWFzb25hYmxlU3RyaW5nLCBkcG93LCBkcG93ZXIsIGRwcm9kdWN0LCBkcmF3X2ZsYWcsIGRyYXdfc3RvcF9yZXR1cm4sIGRzZ24sIGRzaW4sIGRzaW5oLCBkc3VtLCBkdGFuLCBkdGFuaCwgZHVwbCwgZWlnZW4sIGVsZWxtSW5kZXgsIGVsZW0sIGVtaXRfZGVub21pbmF0b3IsIGVtaXRfZGVub21pbmF0b3JzLCBlbWl0X2V4cHIsIGVtaXRfZmFjdG9yLCBlbWl0X2ZhY3RvcmlhbF9mdW5jdGlvbiwgZW1pdF9mbGF0X3RlbnNvciwgZW1pdF9mcmFjdGlvbiwgZW1pdF9mdW5jdGlvbiwgZW1pdF9pbmRleF9mdW5jdGlvbiwgZW1pdF9tdWx0aXBseSwgZW1pdF9udW1iZXIsIGVtaXRfbnVtZXJhdG9ycywgZW1pdF9udW1lcmljYWxfZnJhY3Rpb24sIGVtaXRfcG93ZXIsIGVtaXRfc3RyaW5nLCBlbWl0X3N1YmV4cHIsIGVtaXRfc3ltYm9sLCBlbWl0X3RlbnNvciwgZW1pdF90ZW5zb3JfaW5uZXIsIGVtaXRfdGVybSwgZW1pdF90b3BfZXhwciwgZW1pdF91bnNpZ25lZF9leHByLCBlbWl0X3gsIGVxdWFsLCBlcXVhbG4sIGVxdWFscSwgZXJmYywgZXJyb3JNZXNzYWdlLCBlc2NfZmxhZywgZXZhbHVhdGluZ0FzRmxvYXRzLCBldmFsdWF0aW5nUG9sYXIsIGV4ZWMsIGV4cGFuZCwgZXhwYW5kX2dldF9BLCBleHBhbmRfZ2V0X0FGLCBleHBhbmRfZ2V0X0IsIGV4cGFuZF9nZXRfQywgZXhwYW5kX2dldF9DRiwgZXhwYW5kX3RlbnNvciwgZXhwYW5kaW5nLCBleHBjb3MsIGV4cG9uZW50aWFsLCBleHByX2xldmVsLCBleHBzaW4sIGYxLCBmMTAsIGYyLCBmMywgZjQsIGY1LCBmOSwgZl9lcXVhbHNfYSwgZmFjdG9yLCBmYWN0b3JfYSwgZmFjdG9yX2FnYWluLCBmYWN0b3JfYiwgZmFjdG9yX251bWJlciwgZmFjdG9yX3NtYWxsX251bWJlciwgZmFjdG9yX3Rlcm0sIGZhY3RvcmlhbCwgZmFjdG9ycG9seSwgZmFjdG9ycywgZmFjdHBvbHlfZXhwbywgZmlsbF9idWYsIGZpbHRlciwgZmlsdGVyX21haW4sIGZpbHRlcl9zdW0sIGZpbHRlcl90ZW5zb3IsIGZpbmREZXBlbmRlbmNpZXNJblNjcmlwdCwgZmluZFBvc3NpYmxlQ2xvY2tGb3JtLCBmaW5kUG9zc2libGVFeHBvbmVudGlhbEZvcm0sIGZpbmRyb290LCBmaXh1cF9mcmFjdGlvbiwgZml4dXBfcG93ZXIsIGZsYWcsIGZsb2F0VG9SYXRpb1JvdXRpbmUsIGZtdF9pbmRleCwgZm10X2xldmVsLCBmbXRfeCwgZnJhbWUsIGZyZWV6ZSwgZnVuY3Rpb25JbnZva2F0aW9uc1NjYW5uaW5nU3RhY2ssIGdhbW1hLCBnYW1tYV9vZl9zdW0sIGdhbW1hZiwgZ2NkLCBnY2RfbWFpbiwgZ2NkX251bWJlcnMsIGdjZF9wb2x5cywgZ2NkX3Bvd2Vyc193aXRoX3NhbWVfYmFzZSwgZ2NkX3Byb2R1Y3RfcHJvZHVjdCwgZ2NkX3Byb2R1Y3Rfc3VtLCBnY2Rfc3VtLCBnY2Rfc3VtX3Byb2R1Y3QsIGdjZF9zdW1fc3VtLCBnZW4sIGdldFNpbXBsZVJvb3RzLCBnZXRTdGF0ZUhhc2gsIGdldF9iaW5kaW5nLCBnZXRfZmFjdG9yX2Zyb21fY29tcGxleF9yb290LCBnZXRfZmFjdG9yX2Zyb21fcmVhbF9yb290LCBnZXRfaW5uZXJwcm9kX2ZhY3RvcnMsIGdldF9uZXh0X3Rva2VuLCBnZXRfcHJpbnRuYW1lLCBnZXRfc2l6ZSwgZ2V0X3Rva2VuLCBnZXRkaXNwbGF5c3RyLCBnbHlwaCwgZ3AsIGd1ZXNzLCBoYXNJbWFnaW5hcnlDb2VmZiwgaGFzTmVnYXRpdmVSYXRpb25hbEV4cG9uZW50LCBoYXNoX2FkZGl0aW9uLCBoYXNoX2Z1bmN0aW9uLCBoYXNoX211bHRpcGxpY2F0aW9uLCBoYXNoX3Bvd2VyLCBoYXNoY29kZV92YWx1ZXMsIGhhc2hlZF9pdGFiLCBoZXJtaXRlLCBoaWxiZXJ0LCBpMSwgaW1hZywgaW1hZ2luYXJ5dW5pdCwgaW5kZXhfZnVuY3Rpb24sIGluaXQsIGluaXROUm9vdHMsIGluaXRlZCwgaW5uZXIsIGlubmVyX2YsIGlucHV0X3N0ciwgaW50ZWdyYWwsIGludGVncmFsX29mX2Zvcm0sIGludGVncmFsX29mX3Byb2R1Y3QsIGludGVncmFsX29mX3N1bSwgaW52LCBpbnZlcnNlLCBpbnZlcnRfbnVtYmVyLCBpbnZnLCBpc051bWJlck9uZU92ZXJTb21ldGhpbmcsIGlzTnVtZXJpY0F0b20sIGlzTnVtZXJpY0F0b21PclRlbnNvciwgaXNTaW1wbGVSb290LCBpc1NtYWxsLCBpc1N5bWJvbExlZnRPZkFzc2lnbm1lbnQsIGlzU3ltYm9sUmVjbGFpbWFibGUsIGlzWmVyb0F0b20sIGlzWmVyb0F0b21PclRlbnNvciwgaXNaZXJvTGlrZU9yTm9uWmVyb0xpa2VPclVuZGV0ZXJtaW5lZCwgaXNaZXJvVGVuc29yLCBpc19kZW5vbWluYXRvciwgaXNfZmFjdG9yLCBpc19zbWFsbF9pbnRlZ2VyLCBpc19zcXVhcmVfbWF0cml4LCBpc191c3Jfc3ltYm9sLCBpc2FkZCwgaXNhbG51bW9ydW5kZXJzY29yZSwgaXNhbHBoYSwgaXNhbHBoYU9yVW5kZXJzY29yZSwgaXNjb21wbGV4bnVtYmVyLCBpc2NvbXBsZXhudW1iZXJkb3VibGUsIGlzY29ucywgaXNkZW5vbWluYXRvciwgaXNkaWdpdCwgaXNkb3VibGUsIGlzZXZlbmludGVnZXIsIGlzZmFjdG9yLCBpc2ZhY3RvcmlhbCwgaXNmbG9hdGluZywgaXNmcmFjdGlvbiwgaXNpZGVudGl0eW1hdHJpeCwgaXNpbWFnaW5hcnludW1iZXIsIGlzaW1hZ2luYXJ5bnVtYmVyZG91YmxlLCBpc2ltYWdpbmFyeXVuaXQsIGlzaW5uZXJvcmRvdCwgaXNpbnRlZ2VyLCBpc2ludGVnZXJmYWN0b3IsIGlzaW50ZWdlcm9yaW50ZWdlcmZsb2F0LCBpc2ludiwgaXNrZXl3b3JkLCBpc21pbnVzb25lLCBpc21pbnVzb25lb3ZlcnNxcnR0d28sIGlzbWludXNvbmVvdmVydHdvLCBpc211bHRpcGx5LCBpc25lZ2F0aXZlLCBpc25lZ2F0aXZlbnVtYmVyLCBpc25lZ2F0aXZldGVybSwgaXNub25uZWdhdGl2ZWludGVnZXIsIGlzbnBpLCBpc29uZSwgaXNvbmVvdmVyLCBpc29uZW92ZXJzcXJ0dHdvLCBpc29uZW92ZXJ0d28sIGlzcGx1c29uZSwgaXNwbHVzdHdvLCBpc3BvbHlleHBhbmRlZGZvcm0sIGlzcG9seWV4cGFuZGVkZm9ybV9leHByLCBpc3BvbHlleHBhbmRlZGZvcm1fZmFjdG9yLCBpc3BvbHlleHBhbmRlZGZvcm1fdGVybSwgaXNwb2x5ZmFjdG9yZWRvcmV4cGFuZGVkZm9ybSwgaXNwb2x5ZmFjdG9yZWRvcmV4cGFuZGVkZm9ybV9mYWN0b3IsIGlzcG9seWZhY3RvcmVkb3JleHBhbmRlZGZvcm1fcG93ZXIsIGlzcG9zaW50LCBpc3Bvc2l0aXZlbnVtYmVyLCBpc3Bvd2VyLCBpc3F1YXJ0ZXJ0dXJuLCBpc3JhdGlvbmFsLCBpc3NwYWNlLCBpc3N0ciwgaXNzeW1ib2wsIGlzc3ltYm9saWMsIGlzdGVuc29yLCBpc3RyYW5zcG9zZSwgaXN1bmRlcnNjb3JlLCBpc3VuaXZhcnBvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtLCBpdGFiLCBpdGFsdV9oYXNoY29kZSwgajEsIGxhZ3VlcnJlLCBsYWd1ZXJyZTIsIGxhc3RGb3VuZFN5bWJvbCwgbGF0ZXhFcnJvclNpZ24sIGxjbSwgbGVhZGluZywgbGVnZW5kcmUsIGxlbmd0aCwgbGVzc3AsIGxldmVsLCBsaXN0LCBsaXN0TGVuZ3RoLCBsb2dhcml0aG0sIGxvZ2J1ZiwgbG9va3Vwc1RvdGFsLCBsdV9kZWNvbXAsIG1hZGQsIG1ha2VQb3NpdGl2ZSwgbWFrZVNpZ25TYW1lQXMsIG1ha2VfaGFzaGVkX2l0YWIsIG1hc2ssIG1jbXAsIG1jbXBpbnQsIG1kaXYsIG1kaXZyZW0sIG1ldGFfbW9kZSwgbWdjZCwgbWluaV9zb2x2ZSwgbWludCwgbW1vZCwgbW11bCwgbW9kLCBtb25pYywgbW92ZSwgbW92ZVRvcywgbXBfY2xyX2JpdCwgbXBfZGVub21pbmF0b3IsIG1wX251bWVyYXRvciwgbXBfc2V0X2JpdCwgbXBvdywgbXByaW1lLCBtcm9vdCwgbXNoaWZ0cmlnaHQsIG1zdWIsIG10b3RhbCwgbXVsdGlub21pYWxfc3VtLCBtdWx0aXBseSwgbXVsdGlwbHlfYWxsLCBtdWx0aXBseV9hbGxfbm9leHBhbmQsIG11bHRpcGx5X2NvbnNlY3V0aXZlX2NvbnN0YW50cywgbXVsdGlwbHlfZGVub21pbmF0b3JzLCBtdWx0aXBseV9kZW5vbWluYXRvcnNfZmFjdG9yLCBtdWx0aXBseV9kZW5vbWluYXRvcnNfdGVybSwgbXVsdGlwbHlfbm9leHBhbmQsIG11bHRpcGx5X251bWJlcnMsIG5fZmFjdG9yX251bWJlciwgbmVnYXRlLCBuZWdhdGVfZXhwYW5kLCBuZWdhdGVfbm9leHBhbmQsIG5lZ2F0ZV9udW1iZXIsIG5ld19zdHJpbmcsIG5ld2xpbmVfZmxhZywgbmlsX3N5bWJvbHMsIG5vcm1hbGlzZURvdHMsIG5vcm1hbGlzZWRDb2VmZiwgbm9ybWFsaXplX2FuZ2xlLCBucm9vdHNfYSwgbnJvb3RzX2IsIG5yb290c19jLCBucm9vdHNfZGYsIG5yb290c19keCwgbnJvb3RzX2ZhLCBucm9vdHNfZmIsIG5yb290c194LCBucm9vdHNfeSwgbnRlcm1zLCBudGhDYWRyLCBudW1lcmF0b3IsIG51bWVyaWNSb290T2ZQb2x5bm9taWFsLCBvLCBvbmUsIG9uZUVsZW1lbnQsIG9uZV9hc19kb3VibGUsIG91dF9idWYsIG91dF9jb3VudCwgb3V0X29mX21lbW9yeSwgb3V0ZXIsIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUsIHA2LCBwNywgcDgsIHA5LCBwYXJzZSwgcGFyc2VfaW50ZXJuYWwsIHBhcnNlX3AxLCBwYXJzZV9wMiwgcGFyc2VfdGltZV9zaW1wbGlmaWNhdGlvbnMsIHBhcnRpdGlvbiwgcGF0dGVybkhhc0JlZW5Gb3VuZCwgcGF0dGVybnNpbmZvLCBwZWVrLCBwZXJmb3JtaW5nX3Jvb3RzLCBwb2xhciwgcG9sYXJSZWN0QU1pbnVzT25lQmFzZSwgcG9seWNvZWZmLCBwb2x5Zm9ybSwgcG9wLCBwb3BfZG91YmxlLCBwb3BfZnJhbWUsIHBvcF9pbnRlZ2VyLCBwb3dlciwgcG93ZXJfc3RyLCBwb3dlcl9zdW0sIHBvd2VyX3RlbnNvciwgcHJlZGVmaW5lZFN5bWJvbHNJbkdsb2JhbFNjb3BlX2RvTm90VHJhY2tJbkRlcGVuZGVuY2llcywgcHJpbWUsIHByaW1ldGFiLCBwcmludDJkYXNjaWksIHByaW50TW9kZSwgcHJpbnRfQUJTX2xhdGV4LCBwcmludF9BUkNDT1NfY29kZWdlbiwgcHJpbnRfQVJDU0lOX2NvZGVnZW4sIHByaW50X0FSQ1RBTl9jb2RlZ2VuLCBwcmludF9CSU5PTUlBTF9sYXRleCwgcHJpbnRfQ09TX2NvZGVnZW4sIHByaW50X0RFRklOVF9sYXRleCwgcHJpbnRfRE9UX2NvZGVnZW4sIHByaW50X0RPVF9sYXRleCwgcHJpbnRfRE9fY29kZWdlbiwgcHJpbnRfRk9SX2NvZGVnZW4sIHByaW50X0lOVl9jb2RlZ2VuLCBwcmludF9JTlZfbGF0ZXgsIHByaW50X1BST0RVQ1RfY29kZWdlbiwgcHJpbnRfUFJPRFVDVF9sYXRleCwgcHJpbnRfU0VUUV9jb2RlZ2VuLCBwcmludF9TSU5fY29kZWdlbiwgcHJpbnRfU1FSVF9sYXRleCwgcHJpbnRfU1VNX2NvZGVnZW4sIHByaW50X1NVTV9sYXRleCwgcHJpbnRfVEFOX2NvZGVnZW4sIHByaW50X1RFU1RFUV9sYXRleCwgcHJpbnRfVEVTVEdFX2xhdGV4LCBwcmludF9URVNUR1RfbGF0ZXgsIHByaW50X1RFU1RMRV9sYXRleCwgcHJpbnRfVEVTVExUX2xhdGV4LCBwcmludF9URVNUX2NvZGVnZW4sIHByaW50X1RFU1RfbGF0ZXgsIHByaW50X1RSQU5TUE9TRV9jb2RlZ2VuLCBwcmludF9UUkFOU1BPU0VfbGF0ZXgsIHByaW50X1VOSVRfY29kZWdlbiwgcHJpbnRfYV9vdmVyX2IsIHByaW50X2Jhc2UsIHByaW50X2Jhc2Vfb2ZfZGVub20sIHByaW50X2NoYXIsIHByaW50X2Rlbm9tLCBwcmludF9kb3VibGUsIHByaW50X2V4cG9fb2ZfZGVub20sIHByaW50X2V4cG9uZW50LCBwcmludF9leHByLCBwcmludF9mYWN0b3IsIHByaW50X2ZhY3RvcmlhbF9mdW5jdGlvbiwgcHJpbnRfZ2x5cGhzLCBwcmludF9pbmRleF9mdW5jdGlvbiwgcHJpbnRfbGlzdCwgcHJpbnRfbXVsdGlwbHlfc2lnbiwgcHJpbnRfbnVtYmVyLCBwcmludF9wb3dlciwgcHJpbnRfc3RyLCBwcmludF9zdWJleHByLCBwcmludF90ZW5zb3IsIHByaW50X3RlbnNvcl9pbm5lciwgcHJpbnRfdGVuc29yX2lubmVyX2xhdGV4LCBwcmludF90ZW5zb3JfbGF0ZXgsIHByaW50X3Rlcm0sIHByaW50Y2hhciwgcHJpbnRjaGFyX25vd3JhcCwgcHJpbnRsaW5lLCBwcm9ncmFtX2J1ZiwgcHJvbW90ZV90ZW5zb3IsIHB1c2gsIHB1c2hUcnlOb3RUb0R1cGxpY2F0ZSwgcHVzaF9jYXJzLCBwdXNoX2RvdWJsZSwgcHVzaF9mYWN0b3IsIHB1c2hfZnJhbWUsIHB1c2hfaWRlbnRpdHlfbWF0cml4LCBwdXNoX2ludGVnZXIsIHB1c2hfcmF0aW9uYWwsIHB1c2hfc3ltYm9sLCBwdXNoX3Rlcm1fZmFjdG9ycywgcHVzaF90ZXJtcywgcHVzaF96ZXJvX21hdHJpeCwgcWFkZCwgcWRpdiwgcW11bCwgcXBvdywgcXBvd2YsIHF1aWNrZmFjdG9yLCBxdWlja3Bvd2VyLCByYXRpb25hbCwgcmF0aW9uYWxpemUsIHJhdGlvbmFsaXplX2NvZWZmaWNpZW50cywgcmVhbCwgcmVjaXByb2NhdGUsIHJlY3QsIHJlY3Vyc2lvbkxldmVsTmVzdGVkUmFkaWNhbHNSZW1vdmFsLCByZWN1cnNpdmVEZXBlbmRlbmNpZXMsIHJlZiwgcmVmMSwgcmVtZW1iZXJQcmludCwgcmVtb3ZlX25lZ2F0aXZlX2V4cG9uZW50cywgcmVzZXRfYWZ0ZXJfZXJyb3IsIHJlc3RvcmUsIHJlc3RvcmVNZXRhQmluZGluZ3MsIHJld3JpdGVfYXJncywgcmV3cml0ZV9hcmdzX3RlbnNvciwgcm9vdHMsIHJvb3RzMiwgcm9vdHMzLCBydW4sIHJ1blVzZXJEZWZpbmVkU2ltcGxpZmljYXRpb25zLCBzYXZlLCBzYXZlTWV0YUJpbmRpbmdzLCBzY2FsYXJfdGltZXNfdGVuc29yLCBzY2FuLCBzY2FuX2Vycm9yLCBzY2FuX2V4cHJlc3Npb24sIHNjYW5fZmFjdG9yLCBzY2FuX2Z1bmN0aW9uX2NhbGxfd2l0aF9mdW5jdGlvbl9uYW1lLCBzY2FuX2Z1bmN0aW9uX2NhbGxfd2l0aG91dF9mdW5jdGlvbl9uYW1lLCBzY2FuX2luZGV4LCBzY2FuX21ldGEsIHNjYW5fcG93ZXIsIHNjYW5fcmVsYXRpb24sIHNjYW5fc3RtdCwgc2Nhbl9zdHIsIHNjYW5fc3RyaW5nLCBzY2FuX3N1YmV4cHIsIHNjYW5fc3ltYm9sLCBzY2FuX3RlbnNvciwgc2Nhbl90ZXJtLCBzY2FubmVkLCBzY2FubmluZ1BhcmFtZXRlcnMsIHNldE0sIHNldFNpZ25Ubywgc2V0X2JpbmRpbmcsIHNldF9jb21wb25lbnQsIHNldHFfaW5kZXhlZCwgc2ZhY19wcm9kdWN0LCBzZmFjX3Byb2R1Y3RfZiwgc2duLCBzaGFwZSwgc2hvd19wb3dlcl9kZWJ1Zywgc2lnbiwgc2lnbl9vZl90ZXJtLCBzaW1mYWMsIHNpbWZhY190ZXJtLCBzaW1wbGVDb21wbGV4aXR5TWVhc3VyZSwgc2ltcGxpZnksIHNpbXBsaWZ5Rm9yQ29kZUdlbmVyYXRpb24sIHNpbXBsaWZ5XzFfaW5fcHJvZHVjdHMsIHNpbXBsaWZ5X21haW4sIHNpbXBsaWZ5X25lc3RlZF9yYWRpY2Fscywgc2ltcGxpZnlfcG9sYXIsIHNpbXBsaWZ5X3BvbGFyUmVjdCwgc2ltcGxpZnlfcmF0aW9uYWxfZXhwcmVzc2lvbnMsIHNpbXBsaWZ5X3JlY3RUb0Nsb2NrLCBzaW1wbGlmeV90ZW5zb3IsIHNpbXBsaWZ5X3RyaWcsIHNpbXBsaWZ5ZmFjdG9yaWFscywgc2luZSwgc2luZV9vZl9hbmdsZSwgc2luZV9vZl9hbmdsZV9zdW0sIHNraXBSb290VmFyaWFibGVUb0JlU29sdmVkLCBzb3J0X3N0YWNrLCBzcXVhcmUsIHNzcXJ0LCBzdGFjaywgc3RhY2tBZGRzQ291bnQsIHN0ZF9zeW1ib2wsIHN0ZXAsIHN0ZXAyLCBzdG9wLCBzdHJjbXAsIHN0cmluZ3NFbWl0dGVkQnlVc2VyUHJpbnRvdXRzLCBzdWJmLCBzdWJzdCwgc3VidHJhY3QsIHN1YnRyYWN0X251bWJlcnMsIHN3YXAsIHN5bWJvbCwgc3ltYm9sc0RlcGVuZGVuY2llcywgc3ltYm9sc0hhdmluZ1JlYXNzaWdubWVudHMsIHN5bWJvbHNJbkV4cHJlc3Npb25zV2l0aG91dEFzc2lnbm1lbnRzLCBzeW1ib2xzTGVmdE9mQXNzaWdubWVudCwgc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50LCBzeW1ib2xzaW5mbywgc3ltbnVtLCBzeW10YWIsIHRha2VfY2FyZV9vZl9uZXN0ZWRfcmFkaWNhbHMsIHRhbmdlbnQsIHRheWxvciwgdGVuc29yLCB0ZW5zb3JfcGx1c190ZW5zb3IsIHRlbnNvcl90aW1lc19zY2FsYXIsIHRlc3RBcHByb3gsIHRlc3RfZmxhZywgdGV4dF9tZXRyaWMsIHRoZVJhbmRvbSwgdG9rZW4sIHRva2VuX2J1ZiwgdG9rZW5fc3RyLCB0b3AsIHRvcF9sZXZlbF9ldmFsLCB0b3MsIHRyYW5zZm9ybSwgdHJhbnNwb3NlLCB0cmFuc3Bvc2VfdW5pY29kZSwgdHJpZ21vZGUsIHRyaXZpYWxfZGl2aWRlLCB0cnlfa3RoX3ByaW1lLCB0dXJuRXJyb3JNZXNzYWdlVG9MYXRleCwgdWNtcCwgdW5mcmVlemUsIHVuaXF1ZSwgdW5pcXVlX2YsIHVwZGF0ZV90b2tlbl9idWYsIHVzZXJTaW1wbGlmaWNhdGlvbnNJbkxpc3RGb3JtLCB1c2VyU2ltcGxpZmljYXRpb25zSW5TdHJpbmdGb3JtLCB1c3Jfc3ltYm9sLCB2ZXJib3NpbmcsIHZlcnNpb24sIHdpbGxfYmVfZGlzcGxheWVkX2FzX2ZyYWN0aW9uLCB5Ymlub21pYWwsIHljb3NoLCB5ZGlyYWMsIHllcmYsIHllcmZjLCB5Zmxvb3IsIHlpbmRleCwgeXJvdW5kLCB5c2luaCwgeXlhcmcsIHl5YmVzc2VsaiwgeXliZXNzZWx5LCB5eWNlaWxpbmcsIHl5Y29uZGVuc2UsIHl5Y29udHJhY3QsIHl5Y29zaCwgeXlkZWdyZWUsIHl5ZGV0ZywgeXlkaXZwb2x5LCB5eWVyZiwgeXllcmZjLCB5eWV4cGFuZCwgeXlmYWN0b3Jwb2x5LCB5eWZsb2F0LCB5eWZsb29yLCB5eWhlcm1pdGUsIHl5aGVybWl0ZTIsIHl5aW52ZywgeXlsY20sIHl5bG9nLCB5eW11bHRpcGx5LCB5eW91dGVyLCB5eXBvd2VyLCB5eXJhdGlvbmFsaXplLCB5eXJvdW5kLCB5eXNnbiwgeXlzaW1mYWMsIHl5c2luaCwgeXl0YW5nZW50LCB6ZXJvLCB6emZsb2F0LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBiaWdJbnQgPSByZXF1aXJlKCdiaWctaW50ZWdlcicpO1xuXG4gIC8vIGFsc28gY2hhbmdlIHRoZSB2ZXJzaW9uIGluIHRoZSBwYWNrYWdlLmpzb24gZmlsZVxuICB2ZXJzaW9uID0gXCIxLjMuMVwiO1xuXG4gIFNFTEZURVNUID0gMTtcblxuICAvLyBzaXplIG9mIHRoZSBzeW1ib2wgdGFibGVcbiAgTlNZTSA9IDEwMDA7XG5cbiAgREVCVUcgPSBmYWxzZTtcblxuICBQUklOVE9VVFJFU1VMVCA9IGZhbHNlO1xuXG4gIC8vIHByaW50aW5nLXJlbGF0ZWQgY29uc3RhbnRzXG4gIFBSSU5UTU9ERV9MQVRFWCA9IFwiUFJJTlRNT0RFX0xBVEVYXCI7XG5cbiAgUFJJTlRNT0RFXzJEQVNDSUkgPSBcIlBSSU5UTU9ERV8yREFTQ0lJXCI7XG5cbiAgUFJJTlRNT0RFX0NPTVBVVEVSID0gXCJQUklOVE1PREVfQ09NUFVURVJcIjtcblxuICBQUklOVE1PREVfSFVNQU4gPSBcIlBSSU5UTU9ERV9IVU1BTlwiO1xuXG4gIFBSSU5UTU9ERV9MSVNUID0gXCJQUklOVE1PREVfTElTVFwiO1xuXG4gIC8vIHdoZW4gdGhlIHVzZXIgdXNlcyB0aGUgZ2VuZXJpYyBcInByaW50XCIgc3RhdGVtZW50XG4gIC8vIHRoaXMgc2V0dGluZyBraWNrcy1pbi5cbiAgcHJpbnRNb2RlID0gUFJJTlRNT0RFX0NPTVBVVEVSO1xuXG4gIGRvbnRDcmVhdGVOZXdSYWRpY2Fsc0luRGVub21pbmF0b3JXaGVuRXZhbGluZ011bHRpcGxpY2F0aW9uID0gdHJ1ZTtcblxuICByZWN1cnNpb25MZXZlbE5lc3RlZFJhZGljYWxzUmVtb3ZhbCA9IDA7XG5cbiAgZG9fc2ltcGxpZnlfbmVzdGVkX3JhZGljYWxzID0gdHJ1ZTtcblxuICBhdm9pZENhbGN1bGF0aW5nUG93ZXJzSW50b0FyY3RhbnMgPSB0cnVlO1xuXG4gIHJhdGlvbmFsID0gKGZ1bmN0aW9uKCkge1xuICAgIC8vIFN5bWJvbGljIGV4cHJlc3Npb25zIGFyZSBidWlsdCBieSBjb25uZWN0aW5nIFUgc3RydWN0cy5cblxuICAgIC8vIEZvciBleGFtcGxlLCAoYSBiICsgYykgaXMgYnVpbHQgbGlrZSB0aGlzOlxuXG4gICAgLy8gICAgICAgICAgIF9fX19fX18gICAgICBfX19fX19fICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX19fX19fXG4gICAgLy8gICAgICAgICAgfENPTlMgICB8LS0tPnxDT05TICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tPnxDT05TICAgfFxuICAgIC8vICAgICAgICAgIHwgICAgICAgfCAgICB8ICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAgICAvLyAgICAgICAgICB8X19fX19fX3wgICAgfF9fX19fX198ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfF9fX19fX198XG4gICAgLy8gICAgICAgICAgICAgIHwgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgLy8gICAgICAgICAgIF9fX3ZfX18gICAgICBfX192X19fICAgICAgX19fX19fXyAgICAgIF9fX19fX18gICAgICBfX192X19fXG4gICAgLy8gICAgICAgICAgfEFERCAgICB8ICAgIHxDT05TICAgfC0tLT58Q09OUyAgIHwtLS0+fENPTlMgICB8ICAgIHxTWU0gYyAgfFxuICAgIC8vICAgICAgICAgIHwgICAgICAgfCAgICB8ICAgICAgIHwgICAgfCAgICAgICB8ICAgIHwgICAgICAgfCAgICB8ICAgICAgIHxcbiAgICAvLyAgICAgICAgICB8X19fX19fX3wgICAgfF9fX19fX198ICAgIHxfX19fX19ffCAgICB8X19fX19fX3wgICAgfF9fX19fX198XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgfCAgICAgICAgICAgIHxcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIF9fX3ZfX18gICAgICBfX192X19fICAgICAgX19fdl9fX1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICB8TVVMICAgIHwgICAgfFNZTSBhICB8ICAgIHxTWU0gYiAgfFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHwgICAgfCAgICAgICB8ICAgIHwgICAgICAgfFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICB8X19fX19fX3wgICAgfF9fX19fX198ICAgIHxfX19fX19ffFxuICAgIGNsYXNzIHJhdGlvbmFsIHt9O1xuXG4gICAgcmF0aW9uYWwucHJvdG90eXBlLmEgPSBudWxsOyAvLyBhIGJpZ0ludGVnZXJcblxuICAgIHJhdGlvbmFsLnByb3RvdHlwZS5iID0gbnVsbDsgLy8gYSBiaWdJbnRlZ2VyXG5cbiAgICByZXR1cm4gcmF0aW9uYWw7XG5cbiAgfSkuY2FsbCh0aGlzKTtcblxuICBVID0gKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIFUge1xuICAgICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBwcmludF9leHByKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0b0xhdGV4U3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gY29sbGVjdExhdGV4U3RyaW5nRnJvbVJldHVyblZhbHVlKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jb25zID0ge307XG4gICAgICAgIHRoaXMuY29ucy5jYXIgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbnMuY2RyID0gbnVsbDtcbiAgICAgICAgdGhpcy5xID0gbmV3IHJhdGlvbmFsKCk7XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgVS5wcm90b3R5cGUuY29ucyA9IG51bGw7IC8vIHdpbGwgaGF2ZSBhIGNhciBhbmQgY2RyXG5cbiAgICBVLnByb3RvdHlwZS5wcmludG5hbWUgPSBcIlwiO1xuXG4gICAgVS5wcm90b3R5cGUuc3RyID0gXCJcIjtcblxuICAgIFUucHJvdG90eXBlLnRlbnNvciA9IG51bGw7XG5cbiAgICAvLyByYXRpb25hbCBudW1iZXIgYSBvdmVyIGJcbiAgICBVLnByb3RvdHlwZS5xID0gbnVsbDsgLy8gd2lsbCBwb2ludCB0byBhIHJhdGlvbmFsXG5cbiAgICBVLnByb3RvdHlwZS5kID0gMC4wOyAvLyBhIGRvdWJsZVxuXG4gICAgVS5wcm90b3R5cGUuayA9IDA7XG5cbiAgICBVLnByb3RvdHlwZS50YWcgPSAwO1xuXG4gICAgcmV0dXJuIFU7XG5cbiAgfSkuY2FsbCh0aGlzKTtcblxuICBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuXG4gIC8vIHRoZSBmb2xsb3dpbmcgZW51bSBpcyBmb3Igc3RydWN0IFUsIG1lbWJlciBrXG4gIENPTlMgPSAwO1xuXG4gIE5VTSA9IDE7XG5cbiAgRE9VQkxFID0gMjtcblxuICBTVFIgPSAzO1xuXG4gIFRFTlNPUiA9IDQ7XG5cbiAgU1lNID0gNTtcblxuICAvLyB0aGUgZm9sbG93aW5nIGVudW0gaXMgZm9yIGluZGV4aW5nIHRoZSBzeW1ib2wgdGFibGVcblxuICAvLyBzdGFuZGFyZCBmdW5jdGlvbnMgZmlyc3QsIHRoZW4gbmlsLCB0aGVuIGV2ZXJ5dGhpbmcgZWxzZVxuICBjb3VudGVyID0gMDtcblxuICBBQlMgPSBjb3VudGVyKys7XG5cbiAgQUREID0gY291bnRlcisrO1xuXG4gIEFESiA9IGNvdW50ZXIrKztcblxuICBBTkQgPSBjb3VudGVyKys7XG5cbiAgQVBQUk9YUkFUSU8gPSBjb3VudGVyKys7XG5cbiAgQVJDQ09TID0gY291bnRlcisrO1xuXG4gIEFSQ0NPU0ggPSBjb3VudGVyKys7XG5cbiAgQVJDU0lOID0gY291bnRlcisrO1xuXG4gIEFSQ1NJTkggPSBjb3VudGVyKys7XG5cbiAgQVJDVEFOID0gY291bnRlcisrO1xuXG4gIEFSQ1RBTkggPSBjb3VudGVyKys7XG5cbiAgQVJHID0gY291bnRlcisrO1xuXG4gIEFUT01JWkUgPSBjb3VudGVyKys7XG5cbiAgQkVTU0VMSiA9IGNvdW50ZXIrKztcblxuICBCRVNTRUxZID0gY291bnRlcisrO1xuXG4gIEJJTkRJTkcgPSBjb3VudGVyKys7XG5cbiAgQklOT01JQUwgPSBjb3VudGVyKys7XG5cbiAgQ0VJTElORyA9IGNvdW50ZXIrKztcblxuICBDSEVDSyA9IGNvdW50ZXIrKztcblxuICBDSE9PU0UgPSBjb3VudGVyKys7XG5cbiAgQ0lSQ0VYUCA9IGNvdW50ZXIrKztcblxuICBDTEVBUiA9IGNvdW50ZXIrKztcblxuICBDTEVBUkFMTCA9IGNvdW50ZXIrKztcblxuICBDTEVBUlBBVFRFUk5TID0gY291bnRlcisrO1xuXG4gIENMT0NLID0gY291bnRlcisrO1xuXG4gIENPRUZGID0gY291bnRlcisrO1xuXG4gIENPRkFDVE9SID0gY291bnRlcisrO1xuXG4gIENPTkRFTlNFID0gY291bnRlcisrO1xuXG4gIENPTkogPSBjb3VudGVyKys7XG5cbiAgQ09OVFJBQ1QgPSBjb3VudGVyKys7XG5cbiAgQ09TID0gY291bnRlcisrO1xuXG4gIENPU0ggPSBjb3VudGVyKys7XG5cbiAgREVDT01QID0gY291bnRlcisrO1xuXG4gIERFRklOVCA9IGNvdW50ZXIrKztcblxuICBERUdSRUUgPSBjb3VudGVyKys7XG5cbiAgREVOT01JTkFUT1IgPSBjb3VudGVyKys7XG5cbiAgREVSSVZBVElWRSA9IGNvdW50ZXIrKztcblxuICBERVQgPSBjb3VudGVyKys7XG5cbiAgRElNID0gY291bnRlcisrO1xuXG4gIERJUkFDID0gY291bnRlcisrO1xuXG4gIERJVklTT1JTID0gY291bnRlcisrO1xuXG4gIERPID0gY291bnRlcisrO1xuXG4gIERPVCA9IGNvdW50ZXIrKztcblxuICBEUkFXID0gY291bnRlcisrO1xuXG4gIERTT0xWRSA9IGNvdW50ZXIrKztcblxuICBFSUdFTiA9IGNvdW50ZXIrKztcblxuICBFSUdFTlZBTCA9IGNvdW50ZXIrKztcblxuICBFSUdFTlZFQyA9IGNvdW50ZXIrKztcblxuICBFUkYgPSBjb3VudGVyKys7XG5cbiAgRVJGQyA9IGNvdW50ZXIrKztcblxuICBFVkFMID0gY291bnRlcisrO1xuXG4gIEVYUCA9IGNvdW50ZXIrKztcblxuICBFWFBBTkQgPSBjb3VudGVyKys7XG5cbiAgRVhQQ09TID0gY291bnRlcisrO1xuXG4gIEVYUFNJTiA9IGNvdW50ZXIrKztcblxuICBGQUNUT1IgPSBjb3VudGVyKys7XG5cbiAgRkFDVE9SSUFMID0gY291bnRlcisrO1xuXG4gIEZBQ1RPUlBPTFkgPSBjb3VudGVyKys7XG5cbiAgRklMVEVSID0gY291bnRlcisrO1xuXG4gIEZMT0FURiA9IGNvdW50ZXIrKztcblxuICBGTE9PUiA9IGNvdW50ZXIrKztcblxuICBGT1IgPSBjb3VudGVyKys7XG5cbiAgRlVOQ1RJT04gPSBjb3VudGVyKys7XG5cbiAgR0FNTUEgPSBjb3VudGVyKys7XG5cbiAgR0NEID0gY291bnRlcisrO1xuXG4gIEhFUk1JVEUgPSBjb3VudGVyKys7XG5cbiAgSElMQkVSVCA9IGNvdW50ZXIrKztcblxuICBJTUFHID0gY291bnRlcisrO1xuXG4gIElOREVYID0gY291bnRlcisrO1xuXG4gIElOTkVSID0gY291bnRlcisrO1xuXG4gIElOVEVHUkFMID0gY291bnRlcisrO1xuXG4gIElOViA9IGNvdW50ZXIrKztcblxuICBJTlZHID0gY291bnRlcisrO1xuXG4gIElTSU5URUdFUiA9IGNvdW50ZXIrKztcblxuICBJU1BSSU1FID0gY291bnRlcisrO1xuXG4gIExBR1VFUlJFID0gY291bnRlcisrO1xuXG4gIC8vICBMQVBMQUNFID0gY291bnRlcisrXG4gIExDTSA9IGNvdW50ZXIrKztcblxuICBMRUFESU5HID0gY291bnRlcisrO1xuXG4gIExFR0VORFJFID0gY291bnRlcisrO1xuXG4gIExPRyA9IGNvdW50ZXIrKztcblxuICBMT09LVVAgPSBjb3VudGVyKys7XG5cbiAgTU9EID0gY291bnRlcisrO1xuXG4gIE1VTFRJUExZID0gY291bnRlcisrO1xuXG4gIE5PVCA9IGNvdW50ZXIrKztcblxuICBOUk9PVFMgPSBjb3VudGVyKys7XG5cbiAgTlVNQkVSID0gY291bnRlcisrO1xuXG4gIE5VTUVSQVRPUiA9IGNvdW50ZXIrKztcblxuICBPUEVSQVRPUiA9IGNvdW50ZXIrKztcblxuICBPUiA9IGNvdW50ZXIrKztcblxuICBPVVRFUiA9IGNvdW50ZXIrKztcblxuICBQQVRURVJOID0gY291bnRlcisrO1xuXG4gIFBBVFRFUk5TSU5GTyA9IGNvdW50ZXIrKztcblxuICBQT0xBUiA9IGNvdW50ZXIrKztcblxuICBQT1dFUiA9IGNvdW50ZXIrKztcblxuICBQUklNRSA9IGNvdW50ZXIrKztcblxuICBQUklOVF9MRUFWRV9FX0FMT05FID0gY291bnRlcisrO1xuXG4gIFBSSU5UX0xFQVZFX1hfQUxPTkUgPSBjb3VudGVyKys7XG5cbiAgUFJJTlQgPSBjb3VudGVyKys7XG5cbiAgUFJJTlQyREFTQ0lJID0gY291bnRlcisrO1xuXG4gIFBSSU5URlVMTCA9IGNvdW50ZXIrKztcblxuICBQUklOVExBVEVYID0gY291bnRlcisrO1xuXG4gIFBSSU5UTElTVCA9IGNvdW50ZXIrKztcblxuICBQUklOVFBMQUlOID0gY291bnRlcisrO1xuXG4gIFBST0RVQ1QgPSBjb3VudGVyKys7XG5cbiAgUVVPVEUgPSBjb3VudGVyKys7XG5cbiAgUVVPVElFTlQgPSBjb3VudGVyKys7XG5cbiAgUkFOSyA9IGNvdW50ZXIrKztcblxuICBSQVRJT05BTElaRSA9IGNvdW50ZXIrKztcblxuICBSRUFMID0gY291bnRlcisrO1xuXG4gIFJPVU5EID0gY291bnRlcisrO1xuXG4gIFlZUkVDVCA9IGNvdW50ZXIrKztcblxuICBST09UUyA9IGNvdW50ZXIrKztcblxuICBTRVRRID0gY291bnRlcisrO1xuXG4gIFNHTiA9IGNvdW50ZXIrKztcblxuICBTSUxFTlRQQVRURVJOID0gY291bnRlcisrO1xuXG4gIFNJTVBMSUZZID0gY291bnRlcisrO1xuXG4gIFNJTiA9IGNvdW50ZXIrKztcblxuICBTSU5IID0gY291bnRlcisrO1xuXG4gIFNIQVBFID0gY291bnRlcisrO1xuXG4gIFNRUlQgPSBjb3VudGVyKys7XG5cbiAgU1RPUCA9IGNvdW50ZXIrKztcblxuICBTVUJTVCA9IGNvdW50ZXIrKztcblxuICBTVU0gPSBjb3VudGVyKys7XG5cbiAgU1lNQk9MU0lORk8gPSBjb3VudGVyKys7XG5cbiAgVEFOID0gY291bnRlcisrO1xuXG4gIFRBTkggPSBjb3VudGVyKys7XG5cbiAgVEFZTE9SID0gY291bnRlcisrO1xuXG4gIFRFU1QgPSBjb3VudGVyKys7XG5cbiAgVEVTVEVRID0gY291bnRlcisrO1xuXG4gIFRFU1RHRSA9IGNvdW50ZXIrKztcblxuICBURVNUR1QgPSBjb3VudGVyKys7XG5cbiAgVEVTVExFID0gY291bnRlcisrO1xuXG4gIFRFU1RMVCA9IGNvdW50ZXIrKztcblxuICBUUkFOU1BPU0UgPSBjb3VudGVyKys7XG5cbiAgVU5JVCA9IGNvdW50ZXIrKztcblxuICBaRVJPID0gY291bnRlcisrO1xuXG4gIC8vIEFMTCBUSEUgU1lNQk9MUyBBQk9WRSBOSUwgQVJFIEtFWVdPUkRTLFxuICAvLyBXSElDSCBNRUFOUyBUSEFUIFVTRVIgQ0FOTk9UIFJFREVGSU5FIFRIRU1cbiAgTklMID0gY291bnRlcisrOyAvLyBuaWwgZ29lcyBoZXJlLCBhZnRlciBzdGFuZGFyZCBmdW5jdGlvbnNcblxuICBMQVNUID0gY291bnRlcisrO1xuXG4gIExBU1RfUFJJTlQgPSBjb3VudGVyKys7XG5cbiAgTEFTVF8yREFTQ0lJX1BSSU5UID0gY291bnRlcisrO1xuXG4gIExBU1RfRlVMTF9QUklOVCA9IGNvdW50ZXIrKztcblxuICBMQVNUX0xBVEVYX1BSSU5UID0gY291bnRlcisrO1xuXG4gIExBU1RfTElTVF9QUklOVCA9IGNvdW50ZXIrKztcblxuICBMQVNUX1BMQUlOX1BSSU5UID0gY291bnRlcisrO1xuXG4gIEFVVE9FWFBBTkQgPSBjb3VudGVyKys7XG5cbiAgQkFLRSA9IGNvdW50ZXIrKztcblxuICBBU1NVTUVfUkVBTF9WQVJJQUJMRVMgPSBjb3VudGVyKys7XG5cbiAgVFJBQ0UgPSBjb3VudGVyKys7XG5cbiAgRk9SQ0VfRklYRURfUFJJTlRPVVQgPSBjb3VudGVyKys7XG5cbiAgTUFYX0ZJWEVEX1BSSU5UT1VUX0RJR0lUUyA9IGNvdW50ZXIrKztcblxuICBZWUUgPSBjb3VudGVyKys7XG5cbiAgRFJBV1ggPSBjb3VudGVyKys7IC8vIHNwZWNpYWwgcHVycG9zZSBpbnRlcm5hbCBzeW1ib2xzXG5cbiAgTUVUQUEgPSBjb3VudGVyKys7XG5cbiAgTUVUQUIgPSBjb3VudGVyKys7XG5cbiAgTUVUQVggPSBjb3VudGVyKys7XG5cbiAgU0VDUkVUWCA9IGNvdW50ZXIrKztcblxuICBWRVJTSU9OID0gY291bnRlcisrO1xuXG4gIFBJID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9BID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9CID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9DID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9EID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9JID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9KID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9OID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9SID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9TID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9UID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9YID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9ZID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9aID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9JREVOVElUWV9NQVRSSVggPSBjb3VudGVyKys7XG5cbiAgU1lNQk9MX0FfVU5ERVJTQ09SRSA9IGNvdW50ZXIrKztcblxuICBTWU1CT0xfQl9VTkRFUlNDT1JFID0gY291bnRlcisrO1xuXG4gIFNZTUJPTF9YX1VOREVSU0NPUkUgPSBjb3VudGVyKys7XG5cbiAgQzEgPSBjb3VudGVyKys7XG5cbiAgQzIgPSBjb3VudGVyKys7XG5cbiAgQzMgPSBjb3VudGVyKys7XG5cbiAgQzQgPSBjb3VudGVyKys7XG5cbiAgQzUgPSBjb3VudGVyKys7XG5cbiAgQzYgPSBjb3VudGVyKys7XG5cbiAgVVNSX1NZTUJPTFMgPSBjb3VudGVyKys7IC8vIHRoaXMgbXVzdCBiZSBsYXN0XG5cbiAgRSA9IFlZRTtcblxuICAvLyBUT1MgY2Fubm90IGJlIGFyYml0cmFyaWx5IGxhcmdlIGJlY2F1c2UgdGhlIE9TIHNlZyBmYXVsdHMgb24gZGVlcCByZWN1cnNpb24uXG4gIC8vIEZvciBleGFtcGxlLCBhIGNpcmN1bGFyIGV2YWx1YXRpb24gbGlrZSB4PXgrMSBjYW4gY2F1c2UgYSBzZWcgZmF1bHQuXG4gIC8vIEF0IHRoaXMgc2V0dGluZyAoMTAwLDAwMCkgdGhlIGV2YWx1YXRpb24gc3RhY2sgb3ZlcnJ1bnMgYmVmb3JlIHNlZyBmYXVsdC5cbiAgVE9TID0gMTAwMDAwO1xuXG4gIEJVRiA9IDEwMDAwO1xuXG4gIE1BWF9QUk9HUkFNX1NJWkUgPSAxMDAwMDE7XG5cbiAgTUFYUFJJTUVUQUIgPSAxMDAwMDtcblxuICBNQVhfQ09OU0VDVVRJVkVfQVBQTElDQVRJT05TX09GX0FMTF9SVUxFUyA9IDU7XG5cbiAgTUFYX0NPTlNFQ1VUSVZFX0FQUExJQ0FUSU9OU19PRl9TSU5HTEVfUlVMRSA9IDEwO1xuXG4gIC8vZGVmaW5lIF9VU0VfTUFUSF9ERUZJTkVTIC8vIGZvciBNUyBDKytcbiAgTUFYRElNID0gMjQ7XG5cbiAgLy8gbmVlZGVkIGZvciB0aGUgbWVjaGFuaXNtIHRvXG4gIC8vIGZpbmQgYWxsIGRlcGVuZGVuY2llcyBiZXR3ZWVuIHZhcmlhYmxlc1xuICAvLyBpbiBhIHNjcmlwdFxuICBzeW1ib2xzRGVwZW5kZW5jaWVzID0ge307XG5cbiAgc3ltYm9sc0hhdmluZ1JlYXNzaWdubWVudHMgPSBbXTtcblxuICBzeW1ib2xzSW5FeHByZXNzaW9uc1dpdGhvdXRBc3NpZ25tZW50cyA9IFtdO1xuXG4gIHBhdHRlcm5IYXNCZWVuRm91bmQgPSBmYWxzZTtcblxuICBwcmVkZWZpbmVkU3ltYm9sc0luR2xvYmFsU2NvcGVfZG9Ob3RUcmFja0luRGVwZW5kZW5jaWVzID0gW1wicmF0aW9uYWxpemVcIiwgXCJhYnNcIiwgXCJlXCIsIFwiaVwiLCBcInBpXCIsIFwic2luXCIsIFwiY2VpbGluZ1wiLCBcImNvc1wiLCBcInJvb3RzXCIsIFwiaW50ZWdyYWxcIiwgXCJkZXJpdmF0aXZlXCIsIFwiZGVmaW50XCIsIFwic3FydFwiLCBcImVpZ1wiLCBcImNvdlwiLCBcImRlaWdcIiwgXCJkY292XCIsIFwiZmxvYXRcIiwgXCJmbG9vclwiLCBcInByb2R1Y3RcIiwgXCJyb290XCIsIFwicm91bmRcIiwgXCJzdW1cIiwgXCJ0ZXN0XCIsIFwidW5pdFwiXTtcblxuICAvLyB5b3UgY2FuIGRvIHNvbWUgbGl0dGxlIHNpbXBsaWZpY2F0aW9uc1xuICAvLyBhdCBwYXJzZSB0aW1lLCBzdWNoIGFzIGNhbGN1bGF0aW5nIGF3YXlcbiAgLy8gaW1tZWRpYXRlbHkgc2ltcGxlIG9wZXJhdGlvbnMgb25cbiAgLy8gY29uc3RhbnRzLCByZW1vdmluZyAxcyBmcm9tIHByb2R1Y3RzXG4gIC8vIGV0Yy5cbiAgcGFyc2VfdGltZV9zaW1wbGlmaWNhdGlvbnMgPSB0cnVlO1xuXG4gIGNoYWluT2ZVc2VyU3ltYm9sc05vdEZ1bmN0aW9uc0JlaW5nRXZhbHVhdGVkID0gW107XG5cbiAgc3RyaW5nc0VtaXR0ZWRCeVVzZXJQcmludG91dHMgPSBcIlwiO1xuXG4gIC8vIGZsYWcgdXNlIHRvIHBvdGVudGlhbGx5IHN3aXRjaCBvbi9vZmYgc29tZSBxdWlya3MgXCJkZWVwXCJcbiAgLy8gaW4gdGhlIGNvZGUgZHVlIHRvIGNhbGwgZnJvbSBBbGdlYnJhIGJsb2NrLlxuICAvLyBDdXJyZW50bHkgbm90IHVzZWQuXG4gIGNhbGxlZF9mcm9tX0FsZ2VicmFfYmxvY2sgPSBmYWxzZTtcblxuICB0ZW5zb3IgPSAoZnVuY3Rpb24oKSB7XG4gICAgY2xhc3MgdGVuc29yIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRpbSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgbywgcmVmLCByZXN1bHRzO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKG8gPSAwLCByZWYgPSBNQVhESU07ICgwIDw9IHJlZiA/IG8gPD0gcmVmIDogbyA+PSByZWYpOyAwIDw9IHJlZiA/IG8rKyA6IG8tLSkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSkoKTtcbiAgICAgICAgdGhpcy5lbGVtID0gW107XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgdGVuc29yLnByb3RvdHlwZS5uZGltID0gMDsgLy8gbnVtYmVyIG9mIGRpbWVuc2lvbnNcblxuICAgIHRlbnNvci5wcm90b3R5cGUuZGltID0gbnVsbDsgLy8gZGltZW5zaW9uIGxlbmd0aCwgZm9yIGVhY2ggZGltZW5zaW9uXG5cbiAgICB0ZW5zb3IucHJvdG90eXBlLm5lbGVtID0gMDsgLy8gdG90YWwgbnVtYmVyIG9mIGVsZW1lbnRzXG5cbiAgICB0ZW5zb3IucHJvdG90eXBlLmVsZW0gPSBudWxsOyAvLyBhbiBhcnJheSBjb250YWluaW5nIGFsbCB0aGUgZGF0YVxuXG4gICAgcmV0dXJuIHRlbnNvcjtcblxuICB9KS5jYWxsKHRoaXMpO1xuXG4gIGRpc3BsYXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgY2xhc3MgZGlzcGxheSB7fTtcblxuICAgIGRpc3BsYXkucHJvdG90eXBlLmggPSAwO1xuXG4gICAgZGlzcGxheS5wcm90b3R5cGUudyA9IDA7XG5cbiAgICBkaXNwbGF5LnByb3RvdHlwZS5uID0gMDtcblxuICAgIGRpc3BsYXkucHJvdG90eXBlLmEgPSBbXTsgLy8gd2lsbCBjb250YWluIGFuIGFycmF5IG9mIGMseCx5IChjb2xvcix4LHkpXG5cbiAgICByZXR1cm4gZGlzcGxheTtcblxuICB9KS5jYWxsKHRoaXMpO1xuXG4gIHRleHRfbWV0cmljID0gKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIHRleHRfbWV0cmljIHt9O1xuXG4gICAgdGV4dF9tZXRyaWMucHJvdG90eXBlLmFzY2VudCA9IDA7XG5cbiAgICB0ZXh0X21ldHJpYy5wcm90b3R5cGUuZGVzY2VudCA9IDA7XG5cbiAgICB0ZXh0X21ldHJpYy5wcm90b3R5cGUud2lkdGggPSAwO1xuXG4gICAgcmV0dXJuIHRleHRfbWV0cmljO1xuXG4gIH0pLmNhbGwodGhpcyk7XG5cbiAgdG9zID0gMDsgLy8gdG9wIG9mIHN0YWNrXG5cbiAgZXhwYW5kaW5nID0gMDtcblxuICBldmFsdWF0aW5nQXNGbG9hdHMgPSAwO1xuXG4gIGV2YWx1YXRpbmdQb2xhciA9IDA7XG5cbiAgZm10X3ggPSAwO1xuXG4gIGZtdF9pbmRleCA9IDA7XG5cbiAgZm10X2xldmVsID0gMDtcblxuICB2ZXJib3NpbmcgPSAwO1xuXG4gIHByaW1ldGFiID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBjZWlsLCBpLCBqLCBwcmltZXM7XG4gICAgcHJpbWVzID0gWzJdO1xuICAgIGkgPSAzO1xuICAgIHdoaWxlIChwcmltZXMubGVuZ3RoIDwgTUFYUFJJTUVUQUIpIHtcbiAgICAgIGogPSAwO1xuICAgICAgY2VpbCA9IE1hdGguc3FydChpKTtcbiAgICAgIHdoaWxlIChqIDwgcHJpbWVzLmxlbmd0aCAmJiBwcmltZXNbal0gPD0gY2VpbCkge1xuICAgICAgICBpZiAoaSAlIHByaW1lc1tqXSA9PT0gMCkge1xuICAgICAgICAgIGogPSAtMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgICBpZiAoaiAhPT0gLTEpIHtcbiAgICAgICAgcHJpbWVzLnB1c2goaSk7XG4gICAgICB9XG4gICAgICBpICs9IDI7XG4gICAgfVxuICAgIHByaW1lc1tNQVhQUklNRVRBQl0gPSAwO1xuICAgIHJldHVybiBwcmltZXM7XG4gIH0pKCk7XG5cbiAgZXNjX2ZsYWcgPSAwO1xuXG4gIGRyYXdfZmxhZyA9IDA7XG5cbiAgbXRvdGFsID0gMDtcblxuICB0cmlnbW9kZSA9IDA7XG5cbiAgbG9nYnVmID0gXCJcIjtcblxuICBwcm9ncmFtX2J1ZiA9IFwiXCI7XG5cbiAgLy8gd2lsbCBjb250YWluIHRoZSB2YXJpYWJsZSBuYW1lc1xuICBzeW10YWIgPSBbXTtcblxuICAvLyB3aWxsIGNvbnRhaW4gdGhlIGNvbnRlbnRzIG9mIHRoZSB2YXJpYWJsZVxuICAvLyBpbiB0aGUgY29ycmVzcG9uZGluZyBwb3NpdGlvbiBpbiBzeW10YWIgYXJyYXlcbiAgYmluZGluZyA9IFtdO1xuXG4gIGlzU3ltYm9sUmVjbGFpbWFibGUgPSBbXTtcblxuICBhcmdsaXN0ID0gW107IC8vIHdpbGwgY29udGFpbiBVXG5cbiAgc3RhY2sgPSBbXTsgLy8gd2lsbCBjb250YWluICpVXG5cbiAgZnJhbWUgPSAwO1xuXG4gIHAwID0gbnVsbDsgLy8gd2lsbCBjb250YWluIFVcblxuICBwMSA9IG51bGw7IC8vIHdpbGwgY29udGFpbiBVXG5cbiAgcDIgPSBudWxsOyAvLyB3aWxsIGNvbnRhaW4gVVxuXG4gIHAzID0gbnVsbDsgLy8gd2lsbCBjb250YWluIFVcblxuICBwNCA9IG51bGw7IC8vIHdpbGwgY29udGFpbiBVXG5cbiAgcDUgPSBudWxsOyAvLyB3aWxsIGNvbnRhaW4gVVxuXG4gIHA2ID0gbnVsbDsgLy8gd2lsbCBjb250YWluIFVcblxuICBwNyA9IG51bGw7IC8vIHdpbGwgY29udGFpbiBVXG5cbiAgcDggPSBudWxsOyAvLyB3aWxsIGNvbnRhaW4gVVxuXG4gIHA5ID0gbnVsbDsgLy8gd2lsbCBjb250YWluIFVcblxuICB6ZXJvID0gbnVsbDsgLy8gd2lsbCBjb250YWluIFVcblxuICBvbmUgPSBudWxsOyAvLyB3aWxsIGNvbnRhaW4gVVxuXG4gIG9uZV9hc19kb3VibGUgPSBudWxsO1xuXG4gIGltYWdpbmFyeXVuaXQgPSBudWxsOyAvLyB3aWxsIGNvbnRhaW4gVVxuXG4gIG91dF9idWYgPSBcIlwiO1xuXG4gIG91dF9jb3VudCA9IDA7XG5cbiAgdGVzdF9mbGFnID0gMDtcblxuICBjb2RlR2VuID0gZmFsc2U7XG5cbiAgZHJhd19zdG9wX3JldHVybiA9IG51bGw7IC8vIGV4dGVybiBqbXBfYnVmID8/Pz8/XG5cbiAgdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm0gPSBbXTtcblxuICB1c2VyU2ltcGxpZmljYXRpb25zSW5TdHJpbmdGb3JtID0gW107XG5cbiAgdHJhbnNwb3NlX3VuaWNvZGUgPSA3NDg4O1xuXG4gIGRvdHByb2RfdW5pY29kZSA9IDE4MztcblxuICBzeW1ib2wgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHN5bXRhYlt4XTtcbiAgfTtcblxuICBpc2NvbnMgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIHAuayA9PT0gQ09OUztcbiAgfTtcblxuICBpc3JhdGlvbmFsID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBwLmsgPT09IE5VTTtcbiAgfTtcblxuICBpc2RvdWJsZSA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gcC5rID09PSBET1VCTEU7XG4gIH07XG5cbiAgaXNOdW1lcmljQXRvbSA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gaXNyYXRpb25hbChwKSB8fCBpc2RvdWJsZShwKTtcbiAgfTtcblxuICBpc3N0ciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gcC5rID09PSBTVFI7XG4gIH07XG5cbiAgaXN0ZW5zb3IgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKHAgPT0gbnVsbCkge1xuICAgICAgZGVidWdnZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwLmsgPT09IFRFTlNPUjtcbiAgICB9XG4gIH07XG5cbiAgLy8gYmVjYXVzZSBvZiByZWN1cnNpb24sIHdlIGNvbnNpZGVyIGEgc2NhbGFyIHRvIGJlXG4gIC8vIGEgdGVuc29yLCBzbyBhIG51bWVyaWMgc2NhbGFyIHdpbGwgcmV0dXJuIHRydWVcbiAgaXNOdW1lcmljQXRvbU9yVGVuc29yID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhLCBpLCBuLCBvLCByZWY7XG4gICAgaWYgKGlzTnVtZXJpY0F0b20ocCkgfHwgcCA9PT0gc3ltYm9sKFNZTUJPTF9JREVOVElUWV9NQVRSSVgpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKCFpc3RlbnNvcihwKSAmJiAhaXNOdW1lcmljQXRvbShwKSkge1xuICAgICAgLy9jb25zb2xlLmxvZyBcInAgbm90IGFuIGF0b20gbm9yIGEgdGVuc29yOiBcIiArIHBcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBuID0gcC50ZW5zb3IubmVsZW07XG4gICAgYSA9IHAudGVuc29yLmVsZW07XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBpZiAoIWlzTnVtZXJpY0F0b21PclRlbnNvcihhW2ldKSkge1xuICAgICAgICAvL2NvbnNvbGUubG9nIFwibm9uLW51bWVyaWMgZWxlbWVudDogXCIgKyBhW2ldXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMTtcbiAgfTtcblxuICBpc3N5bWJvbCA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gcC5rID09PSBTWU07XG4gIH07XG5cbiAgaXNrZXl3b3JkID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBpc3N5bWJvbChwKSAmJiBzeW1udW0ocCkgPCBOSUw7XG4gIH07XG5cbiAgY2FyID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChpc2NvbnMocCkpIHtcbiAgICAgIHJldHVybiBwLmNvbnMuY2FyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3ltYm9sKE5JTCk7XG4gICAgfVxuICB9O1xuXG4gIGNkciA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoaXNjb25zKHApKSB7XG4gICAgICByZXR1cm4gcC5jb25zLmNkcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN5bWJvbChOSUwpO1xuICAgIH1cbiAgfTtcblxuICBjYWFyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIoY2FyKHApKTtcbiAgfTtcblxuICBjYWRyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIoY2RyKHApKTtcbiAgfTtcblxuICBjZGFyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjZHIoY2FyKHApKTtcbiAgfTtcblxuICBjZGRyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjZHIoY2RyKHApKTtcbiAgfTtcblxuICBjYWFkciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2FyKGNhcihjZHIocCkpKTtcbiAgfTtcblxuICBjYWRkciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2FyKGNkcihjZHIocCkpKTtcbiAgfTtcblxuICBjYWRhciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2FyKGNkcihjYXIocCkpKTtcbiAgfTtcblxuICBjZGFkciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2RyKGNhcihjZHIocCkpKTtcbiAgfTtcblxuICBjZGRhciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2RyKGNkcihjYXIocCkpKTtcbiAgfTtcblxuICBjZGRkciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2RyKGNkcihjZHIocCkpKTtcbiAgfTtcblxuICBjYWFkZHIgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGNhcihjYXIoY2RyKGNkcihwKSkpKTtcbiAgfTtcblxuICBjYWRhZHIgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGNhcihjZHIoY2FyKGNkcihwKSkpKTtcbiAgfTtcblxuICBjYWRkYXIgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGNhcihjZHIoY2RyKGNhcihwKSkpKTtcbiAgfTtcblxuICBjZGFkZHIgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGNkcihjYXIoY2RyKGNkcihwKSkpKTtcbiAgfTtcblxuICBjYWRkZHIgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGNhcihjZHIoY2RyKGNkcihwKSkpKTtcbiAgfTtcblxuICBjZGRkZHIgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGNkcihjZHIoY2RyKGNkcihwKSkpKTtcbiAgfTtcblxuICBjYWRkZGRyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIoY2RyKGNkcihjZHIoY2RyKHApKSkpKTtcbiAgfTtcblxuICBjYWRhZGRyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIoY2RyKGNhcihjZHIoY2RyKHApKSkpKTtcbiAgfTtcblxuICBjZGRhZGRyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjZHIoY2RyKGNhcihjZHIoY2RyKHApKSkpKTtcbiAgfTtcblxuICBjYWRkYWRyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIoY2RyKGNkcihjYXIoY2RyKHApKSkpKTtcbiAgfTtcblxuICBjZGRkYWRkciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2RyKGNkcihjZHIoY2FyKGNkcihjZHIocCkpKSkpKTtcbiAgfTtcblxuICBjYWRkYWRkciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2FyKGNkcihjZHIoY2FyKGNkcihjZHIocCkpKSkpKTtcbiAgfTtcblxuICAvLyBub3QgdXNlZCB5ZXRcbiAgbGlzdExlbmd0aCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgc3RhcnRDb3VudDtcbiAgICBzdGFydENvdW50ID0gLTE7XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgcCA9IGNkcihwKTtcbiAgICAgIHN0YXJ0Q291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0Q291bnQ7XG4gIH07XG5cbiAgLy8gbm90IHVzZWQgeWV0XG4gIG50aENhZHIgPSBmdW5jdGlvbihwLCBuKSB7XG4gICAgdmFyIHN0YXJ0Q291bnQ7XG4gICAgc3RhcnRDb3VudCA9IDA7XG4gICAgd2hpbGUgKHN0YXJ0Q291bnQgPD0gbikge1xuICAgICAgcCA9IGNkcihwKTtcbiAgICAgIHN0YXJ0Q291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIGNhcihwKTtcbiAgfTtcblxuICBpc2FkZCA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2FyKHApID09PSBzeW1ib2woQUREKTtcbiAgfTtcblxuICBpc211bHRpcGx5ID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIocCkgPT09IHN5bWJvbChNVUxUSVBMWSk7XG4gIH07XG5cbiAgaXNwb3dlciA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gY2FyKHApID09PSBzeW1ib2woUE9XRVIpO1xuICB9O1xuXG4gIGlzZmFjdG9yaWFsID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIocCkgPT09IHN5bWJvbChGQUNUT1JJQUwpO1xuICB9O1xuXG4gIGlzaW5uZXJvcmRvdCA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gKGNhcihwKSA9PT0gc3ltYm9sKElOTkVSKSkgfHwgKGNhcihwKSA9PT0gc3ltYm9sKERPVCkpO1xuICB9O1xuXG4gIGlzdHJhbnNwb3NlID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIocCkgPT09IHN5bWJvbChUUkFOU1BPU0UpO1xuICB9O1xuXG4gIGlzaW52ID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBjYXIocCkgPT09IHN5bWJvbChJTlYpO1xuICB9O1xuXG4gIC8vIFRPRE8gdGhpcyBpcyBhIGJpdCBvZiBhIHNoYWxsb3cgY2hlY2ssIHdlIHNob3VsZFxuICAvLyBjaGVjayB3aGVuIHdlIGFyZSBwYXNzZWQgYW4gYWN0dWFsIHRlbnNvciBhbmQgcG9zc2libHlcbiAgLy8gY2FjaGUgdGhlIHRlc3QgcmVzdWx0LlxuICBpc2lkZW50aXR5bWF0cml4ID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBwID09PSBzeW1ib2woU1lNQk9MX0lERU5USVRZX01BVFJJWCk7XG4gIH07XG5cbiAgTVNJR04gPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKHAuaXNQb3NpdGl2ZSgpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKHAuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9O1xuXG4gIE1MRU5HVEggPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIHAudG9TdHJpbmcoKS5sZW5ndGg7XG4gIH07XG5cbiAgTVpFUk8gPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIHAuaXNaZXJvKCk7XG4gIH07XG5cbiAgTUVRVUFMID0gZnVuY3Rpb24ocCwgbikge1xuICAgIGlmIChwID09IG51bGwpIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgIH1cbiAgICByZXR1cm4gcC5lcXVhbHMobik7XG4gIH07XG5cbiAgcmVzZXRfYWZ0ZXJfZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBtb3ZlVG9zKDApO1xuICAgIGVzY19mbGFnID0gMDtcbiAgICBkcmF3X2ZsYWcgPSAwO1xuICAgIGZyYW1lID0gVE9TO1xuICAgIGV2YWx1YXRpbmdBc0Zsb2F0cyA9IDA7XG4gICAgcmV0dXJuIGV2YWx1YXRpbmdQb2xhciA9IDA7XG4gIH07XG5cbiAgJCA9IHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiICYmIGV4cG9ydHMgIT09IG51bGwgPyBleHBvcnRzIDogdGhpcztcblxuICAkLnZlcnNpb24gPSB2ZXJzaW9uO1xuXG4gICQuaXNhZGQgPSBpc2FkZDtcblxuICAkLmlzbXVsdGlwbHkgPSBpc211bHRpcGx5O1xuXG4gICQuaXNwb3dlciA9IGlzcG93ZXI7XG5cbiAgJC5pc2ZhY3RvcmlhbCA9IGlzZmFjdG9yaWFsO1xuXG4gICQuY2FyID0gY2FyO1xuXG4gICQuY2RyID0gY2RyO1xuXG4gICQuY2FhciA9IGNhYXI7XG5cbiAgJC5jYWRyID0gY2FkcjtcblxuICAkLmNkYXIgPSBjZGFyO1xuXG4gICQuY2RkciA9IGNkZHI7XG5cbiAgJC5jYWFkciA9IGNhYWRyO1xuXG4gICQuY2FkZHIgPSBjYWRkcjtcblxuICAkLmNhZGFyID0gY2FkYXI7XG5cbiAgJC5jZGFkciA9IGNkYWRyO1xuXG4gICQuY2RkYXIgPSBjZGRhcjtcblxuICAkLmNkZGRyID0gY2RkZHI7XG5cbiAgJC5jYWFkZHIgPSBjYWFkZHI7XG5cbiAgJC5jYWRhZHIgPSBjYWRhZHI7XG5cbiAgJC5jYWRkYXIgPSBjYWRkYXI7XG5cbiAgJC5jZGFkZHIgPSBjZGFkZHI7XG5cbiAgJC5jYWRkZHIgPSBjYWRkZHI7XG5cbiAgJC5jZGRkZHIgPSBjZGRkZHI7XG5cbiAgJC5jYWRkZGRyID0gY2FkZGRkcjtcblxuICAkLmNhZGFkZHIgPSBjYWRhZGRyO1xuXG4gICQuY2RkYWRkciA9IGNkZGFkZHI7XG5cbiAgJC5jYWRkYWRyID0gY2FkZGFkcjtcblxuICAkLmNkZGRhZGRyID0gY2RkZGFkZHI7XG5cbiAgJC5jYWRkYWRkciA9IGNhZGRhZGRyO1xuXG4gICQuc3ltYm9sID0gc3ltYm9sO1xuXG4gICQuaXNjb25zID0gaXNjb25zO1xuXG4gICQuaXNyYXRpb25hbCA9IGlzcmF0aW9uYWw7XG5cbiAgJC5pc2RvdWJsZSA9IGlzZG91YmxlO1xuXG4gICQuaXNOdW1lcmljQXRvbSA9IGlzTnVtZXJpY0F0b207XG5cbiAgJC5pc3N0ciA9IGlzc3RyO1xuXG4gICQuaXN0ZW5zb3IgPSBpc3RlbnNvcjtcblxuICAkLmlzc3ltYm9sID0gaXNzeW1ib2w7XG5cbiAgJC5pc2tleXdvcmQgPSBpc2tleXdvcmQ7XG5cbiAgJC5DT05TID0gQ09OUztcblxuICAkLk5VTSA9IE5VTTtcblxuICAkLkRPVUJMRSA9IERPVUJMRTtcblxuICAkLlNUUiA9IFNUUjtcblxuICAkLlRFTlNPUiA9IFRFTlNPUjtcblxuICAkLlNZTSA9IFNZTTtcblxuICBcbiAgLy8oZG9jcyBhcmUgZ2VuZXJhdGVkIGZyb20gdG9wLWxldmVsIGNvbW1lbnRzLCBrZWVwIGFuIGV5ZSBvbiB0aGUgZm9ybWF0dGluZyEpXG4gIC8qIGFicyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgeFxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBSZXR1cm5zIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiBhIHJlYWwgbnVtYmVyLCB0aGUgbWFnbml0dWRlIG9mIGEgY29tcGxleCBudW1iZXIsIG9yIHRoZSB2ZWN0b3IgbGVuZ3RoLlxuXG4gICovXG4gIC8qXG4gICBBYnNvbHV0ZSB2YWx1ZSBvZiBhIG51bWJlcixvciBtYWduaXR1ZGUgb2YgY29tcGxleCB6LCBvciBub3JtIG9mIGEgdmVjdG9yXG5cbiAgICB6ICAgIGFicyh6KVxuICAgIC0gICAgLS0tLS0tXG5cbiAgICBhICAgIGFcblxuICAgIC1hICAgIGFcblxuICAgICgtMSleYSAgICAxXG5cbiAgICBleHAoYSArIGkgYikgIGV4cChhKVxuXG4gICAgYSBiICAgIGFicyhhKSBhYnMoYilcblxuICAgIGEgKyBpIGIgICAgc3FydChhXjIgKyBiXjIpXG5cbiAgTm90ZXNcblxuICAgIDEuIEhhbmRsZXMgbWl4ZWQgcG9sYXIgYW5kIHJlY3Rhbmd1bGFyIGZvcm1zLCBlLmcuIDEgKyBleHAoaSBwaS8zKVxuXG4gICAgMi4gamVhbi1mcmFuY29pcy5kZWJyb3V4IHJlcG9ydHMgdGhhdCB3aGVuIHo9KGEraSpiKS8oYytpKmQpIHRoZW5cblxuICAgICAgYWJzKG51bWVyYXRvcih6KSkgLyBhYnMoZGVub21pbmF0b3IoeikpXG5cbiAgICAgICBtdXN0IGJlIHVzZWQgdG8gZ2V0IHRoZSBjb3JyZWN0IGFuc3dlci4gTm93IHRoZSBvcGVyYXRpb24gaXNcbiAgICAgICBhdXRvbWF0aWMuXG4gICovXG4gIERFQlVHX0FCUyA9IGZhbHNlO1xuXG4gIEV2YWxfYWJzID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBhYnMoKTtcbiAgfTtcblxuICBhYnNWYWxGbG9hdCA9IGZ1bmN0aW9uKCkge1xuICAgIEV2YWwoKTtcbiAgICBhYnN2YWwoKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIHp6ZmxvYXQoKTtcbiAgfTtcblxuICAvLyB6emZsb2F0IG9mIGFuIGFicyBkb2Vzbid0IG5lY2Vzc2FyaWx5IHJlc3VsdCBpbiBhIGRvdWJsZVxuICAvLyAsIGZvciBleGFtcGxlIGlmIHRoZXJlIGFyZSB2YXJpYWJsZXMuIEJ1dFxuICAvLyBpbiBtYW55IG9mIHRoZSB0ZXN0cyB0aGVyZSBzaG91bGQgYmUgaW5kZWVkXG4gIC8vIGEgZmxvYXQsIHRoZXNlIHR3byBsaW5lcyBjb21lIGhhbmR5IHRvIGhpZ2hsaWdodFxuICAvLyB3aGVuIHRoYXQgZG9lc24ndCBoYXBwZW4gZm9yIHRob3NlIHRlc3RzLlxuICAvL2lmICFpc2RvdWJsZShzdGFja1t0b3MtMV0pXG4gIC8vICBzdG9wKFwiYWJzVmFsRmxvYXQgc2hvdWxkIHJldHVybiBhIGRvdWJsZSBhbmQgaW5zdGVhZCBnb3Q6IFwiICsgc3RhY2tbdG9zLTFdKVxuICBhYnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGhlQXJndW1lbnQ7XG4gICAgdGhlQXJndW1lbnQgPSB0b3AoKTtcbiAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICBjb25zb2xlLnRyYWNlKFwiPj4+PiAgQUJTIG9mIFwiICsgdGhlQXJndW1lbnQpO1xuICAgIH1cbiAgICBudW1lcmF0b3IoKTtcbiAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkFCUyBudW1lcmF0b3IgXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIGFic3ZhbCgpO1xuICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQUJTVkFMIG51bWVyYXRvcjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIHB1c2godGhlQXJndW1lbnQpO1xuICAgIGRlbm9taW5hdG9yKCk7XG4gICAgaWYgKERFQlVHX0FCUykge1xuICAgICAgY29uc29sZS5sb2coXCJBQlMgZGVub21pbmF0b3I6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgIH1cbiAgICBhYnN2YWwoKTtcbiAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkFCU1ZBTCBkZW5vbWluYXRvcjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIGRpdmlkZSgpO1xuICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQUJTVkFMIGRpdmlkZWQ6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgIH1cbiAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coXCI8PDw8PDw8ICBBQlNcIik7XG4gICAgfVxuICB9O1xuXG4gIGFic3ZhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbnlGYWN0b3JzWWV0LCBpbnB1dDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpbnB1dCA9IHAxO1xuICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiQUJTIG9mIFwiICsgcDEpO1xuICAgIH1cbiAgICAvLyBoYW5kbGUgYWxsIHRoZSBcIm51bWJlclwiIGNhc2VzIGZpcnN0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgYWJzOiBcIiArIHAxICsgXCIganVzdCB6ZXJvXCIpO1xuICAgICAgfVxuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgLS0+IEFCUyBvZiBcIiArIGlucHV0ICsgXCIgOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICAgIH1cbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzbmVnYXRpdmVudW1iZXIocDEpKSB7XG4gICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIGFiczogXCIgKyBwMSArIFwiIGp1c3QgYSBuZWdhdGl2ZVwiKTtcbiAgICAgIH1cbiAgICAgIHB1c2gocDEpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc3Bvc2l0aXZlbnVtYmVyKHAxKSkge1xuICAgICAgaWYgKERFQlVHX0FCUykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiBhYnM6IFwiICsgcDEgKyBcIiBqdXN0IGEgcG9zaXRpdmVcIik7XG4gICAgICB9XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgLS0+IEFCUyBvZiBcIiArIGlucHV0ICsgXCIgOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICAgIH1cbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHAxID09PSBzeW1ib2woUEkpKSB7XG4gICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIGFiczogXCIgKyBwMSArIFwiIG9mIFBJXCIpO1xuICAgICAgfVxuICAgICAgcHVzaChwMSk7XG4gICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIC0tPiBBQlMgb2YgXCIgKyBpbnB1dCArIFwiIDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vID8/PyBzaG91bGQgdGhlcmUgYmUgYSBzaG9ydGN1dCBjYXNlIGhlcmUgZm9yIHRoZSBpbWFnaW5hcnkgdW5pdD9cblxuICAgIC8vIG5vdyBoYW5kbGUgZGVjb21wb3NpdGlvbiBjYXNlcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyB3ZSBjYXRjaCB0aGUgXCJhZGRcIiwgXCJwb3dlclwiLCBcIm11bHRpcGx5XCIgY2FzZXMgZmlyc3QsXG4gICAgLy8gYmVmb3JlIGZhbGxpbmcgYmFjayB0byB0aGVcbiAgICAvLyBuZWdhdGl2ZS9wb3NpdGl2ZSBjYXNlcyBiZWNhdXNlIHRoZXJlIGFyZSBzb21lXG4gICAgLy8gc2ltcGxpZmljYXRpb24gdGhheSB3ZSBtaWdodCBiZSBhYmxlIHRvIGRvLlxuICAgIC8vIE5vdGUgdGhhdCBmb3IgdGhpcyByb3V0aW5lIHRvIGdpdmUgYSBjb3JyZWN0IHJlc3VsdCwgdGhpc1xuICAgIC8vIG11c3QgYmUgYSBzdW0gd2hlcmUgYSBjb21wbGV4IG51bWJlciBhcHBlYXJzLlxuICAgIC8vIElmIHdlIGFwcGx5IHRoaXMgdG8gXCJhK2JcIiwgd2UgZ2V0IGFuIGluY29ycmVjdCByZXN1bHQuXG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBREQpICYmIChmaW5kUG9zc2libGVDbG9ja0Zvcm0ocDEpIHx8IGZpbmRQb3NzaWJsZUV4cG9uZW50aWFsRm9ybShwMSkgfHwgRmluZChwMSwgaW1hZ2luYXJ5dW5pdCkpKSB7XG4gICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIGFiczogXCIgKyBwMSArIFwiIGlzIGEgc3VtXCIpO1xuICAgICAgfVxuICAgICAgaWYgKERFQlVHX0FCUykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImFicyBvZiBhIHN1bVwiKTtcbiAgICAgIH1cbiAgICAgIC8vIHN1bVxuICAgICAgcHVzaChwMSk7XG4gICAgICByZWN0KCk7IC8vIGNvbnZlcnQgcG9sYXIgdGVybXMsIGlmIGFueVxuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmVhbCgpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgaW1hZygpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIGFkZCgpO1xuICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBzaW1wbGlmeV90cmlnKCk7XG4gICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIC0tPiBBQlMgb2YgXCIgKyBpbnB1dCArIFwiIDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woUE9XRVIpICYmIGVxdWFsbihjYWRyKHAxKSwgLTEpKSB7XG4gICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIGFiczogXCIgKyBwMSArIFwiIGlzIC0xIHRvIGFueSBwb3dlclwiKTtcbiAgICAgIH1cbiAgICAgIC8vIC0xIHRvIGFueSBwb3dlclxuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgYWJzOiBudW1lcmljLCBzbyByZXN1bHQgaXMgMS4wXCIpO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hfZG91YmxlKDEuMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgYWJzOiBzeW1ib2xpYywgc28gcmVzdWx0IGlzIDFcIik7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgfVxuICAgICAgaWYgKERFQlVHX0FCUykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAtLT4gQUJTIG9mIFwiICsgaW5wdXQgKyBcIiA6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhYnMoYV5iKSBpcyBlcXVhbCB0byBhYnMoYSleYiBJRiBiIGlzIHBvc2l0aXZlXG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChQT1dFUikgJiYgaXNwb3NpdGl2ZW51bWJlcihjYWRkcihwMSkpKSB7XG4gICAgICBpZiAoREVCVUdfQUJTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIGFiczogXCIgKyBwMSArIFwiIGlzIHNvbWV0aGluZyB0byB0aGUgcG93ZXIgb2YgYSBwb3NpdGl2ZSBudW1iZXJcIik7XG4gICAgICB9XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIGFicygpO1xuICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgLS0+IEFCUyBvZiBcIiArIGlucHV0ICsgXCIgOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICAgIH1cbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYWJzKGVec29tZXRoaW5nKVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woUE9XRVIpICYmIGNhZHIocDEpID09PSBzeW1ib2woRSkpIHtcbiAgICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgYWJzOiBcIiArIHAxICsgXCIgaXMgYW4gZXhwb25lbnRpYWxcIik7XG4gICAgICB9XG4gICAgICAvLyBleHBvbmVudGlhbFxuICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgICAgcmVhbCgpO1xuICAgICAgZXhwb25lbnRpYWwoKTtcbiAgICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgLS0+IEFCUyBvZiBcIiArIGlucHV0ICsgXCIgOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICAgIH1cbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgYWJzOiBcIiArIHAxICsgXCIgaXMgYSBwcm9kdWN0XCIpO1xuICAgICAgfVxuICAgICAgLy8gcHJvZHVjdFxuICAgICAgYW55RmFjdG9yc1lldCA9IGZhbHNlO1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgYWJzdmFsKCk7XG4gICAgICAgIGlmIChhbnlGYWN0b3JzWWV0KSB7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBhbnlGYWN0b3JzWWV0ID0gdHJ1ZTtcbiAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgfVxuICAgICAgaWYgKERFQlVHX0FCUykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAtLT4gQUJTIG9mIFwiICsgaW5wdXQgKyBcIiA6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFCUykpIHtcbiAgICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgYWJzOiBcIiArIHAxICsgXCIgaXMgYWJzIG9mIGEgYWJzXCIpO1xuICAgICAgfVxuICAgICAgLy8gYWJzIG9mIGEgYWJzXG4gICAgICBwdXNoX3N5bWJvbChBQlMpO1xuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICBsaXN0KDIpO1xuICAgICAgaWYgKERFQlVHX0FCUykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAtLT4gQUJTIG9mIFwiICsgaW5wdXQgKyBcIiA6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKlxuICAgICAqIEV2YWx1YXRpb24gdmlhIHp6ZmxvYXQoKVxuICAgICAqIC4uLndoaWxlIHRoaXMgaXMgaW4gdGhlb3J5IGEgcG93ZXJmdWwgbWVjaGFuaXNtLCBJJ3ZlIGNvbW1lbnRlZCBpdFxuICAgICAqIG91dCBiZWNhdXNlIEkndmUgcmVmaW5lZCB0aGlzIG1ldGhvZCBlbm91Z2ggdG8gbm90IG5lZWQgdGhpcy5cbiAgICAgKiBFdmFsaW5nIHZpYSB6emZsb2F0KCkgaXMgaW4gcHJpbmNpcGxlIG1vcmUgcHJvYmxlbWF0aWMgYmVjYXVzZSBpdCBjb3VsZFxuICAgICAqIHJlcXVpcmUgZnVydGhlciBldmFsdWF0aW9ucyB3aGljaCBjb3VsZCBlbmQgdXAgaW4gZnVydGhlciBcImFic1wiIHdoaWNoXG4gICAgICogd291bGQgZW5kIHVwIGluIGluZmluaXRlIGxvb3BzLiBCZXR0ZXIgbm90IHVzZSBpdCBpZiBub3QgbmVjZXNzYXJ5LlxuXG4gICAgICogd2UgbG9vayBkaXJlY3RseSBhdCB0aGUgZmxvYXQgZXZhbHVhdGlvbiBvZiB0aGUgYXJndW1lbnRcbiAgICAgKiB0byBzZWUgaWYgd2UgZW5kIHVwIHdpdGggYSBudW1iZXIsIHdoaWNoIHdvdWxkIG1lYW4gdGhhdCB0aGVyZVxuICAgICAqIGlzIG5vIGltYWdpbmFyeSBjb21wb25lbnQgYW5kIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgaW5wdXRcbiAgICAgKiAob3IgaXRzIG5lZ2F0aW9uKSBhcyB0aGUgcmVzdWx0LlxuICAgIHB1c2ggcDFcbiAgICB6emZsb2F0KClcbiAgICBmbG9hdEV2YWx1YXRpb24gPSBwb3AoKVxuXG4gICAgaWYgKGlzbmVnYXRpdmVudW1iZXIoZmxvYXRFdmFsdWF0aW9uKSlcbiAgICAgIGlmIERFQlVHX0FCUyB0aGVuIGNvbnNvbGUubG9nIFwiIGFiczogXCIgKyBwMSArIFwiIGp1c3QgYSBuZWdhdGl2ZVwiXG4gICAgICBwdXNoKHAxKVxuICAgICAgbmVnYXRlKClcbiAgICAgIHJlc3RvcmUoKVxuICAgICAgcmV0dXJuXG5cbiAgICBpZiAoaXNwb3NpdGl2ZW51bWJlcihmbG9hdEV2YWx1YXRpb24pKVxuICAgICAgaWYgREVCVUdfQUJTIHRoZW4gY29uc29sZS5sb2cgXCIgYWJzOiBcIiArIHAxICsgXCIganVzdCBhIHBvc2l0aXZlXCJcbiAgICAgIHB1c2gocDEpXG4gICAgICBpZiBERUJVR19BQlMgdGhlbiBjb25zb2xlLmxvZyBcIiAtLT4gQUJTIG9mIFwiICsgaW5wdXQgKyBcIiA6IFwiICsgc3RhY2tbdG9zLTFdXG4gICAgICByZXN0b3JlKClcbiAgICAgIHJldHVyblxuICAgICAqL1xuICAgIGlmIChpc3RlbnNvcihwMSkpIHtcbiAgICAgIGFic3ZhbF90ZW5zb3IoKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzbmVnYXRpdmV0ZXJtKHAxKSB8fCAoY2FyKHAxKSA9PT0gc3ltYm9sKEFERCkgJiYgaXNuZWdhdGl2ZXRlcm0oY2FkcihwMSkpKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHAxID0gcG9wKCk7XG4gICAgfVxuICAgIGlmIChERUJVR19BQlMpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiIGFiczogXCIgKyBwMSArIFwiIGlzIG5vdGhpbmcgZGVjb21wb3NhYmxlXCIpO1xuICAgIH1cbiAgICBwdXNoX3N5bWJvbChBQlMpO1xuICAgIHB1c2gocDEpO1xuICAgIGxpc3QoMik7XG4gICAgaWYgKERFQlVHX0FCUykge1xuICAgICAgY29uc29sZS5sb2coXCIgLS0+IEFCUyBvZiBcIiArIGlucHV0ICsgXCIgOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBhbHNvIGNhbGxlZCB0aGUgXCJub3JtXCIgb2YgYSB2ZWN0b3JcbiAgYWJzdmFsX3RlbnNvciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChwMS50ZW5zb3IubmRpbSAhPT0gMSkge1xuICAgICAgc3RvcChcImFicyh0ZW5zb3IpIHdpdGggdGVuc29yIHJhbmsgPiAxXCIpO1xuICAgIH1cbiAgICBwdXNoKHAxKTtcbiAgICBwdXNoKHAxKTtcbiAgICBjb25qdWdhdGUoKTtcbiAgICBpbm5lcigpO1xuICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgcG93ZXIoKTtcbiAgICBzaW1wbGlmeSgpO1xuICAgIHJldHVybiBFdmFsKCk7XG4gIH07XG5cbiAgZmxhZyA9IDA7XG5cbiAgRXZhbF9hZGQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaDtcbiAgICBoID0gdG9zO1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHAyID0gcG9wKCk7XG4gICAgICBwdXNoX3Rlcm1zKHAyKTtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZF90ZXJtcyh0b3MgLSBoKTtcbiAgfTtcblxuICAvLyBBZGQgbiB0ZXJtcywgcmV0dXJucyBvbmUgZXhwcmVzc2lvbiBvbiB0aGUgc3RhY2suXG4gIHN0YWNrQWRkc0NvdW50ID0gMDtcblxuICBhZGRfdGVybXMgPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGgsIGksIGkxLCBqMSwgbywgcmVmLCByZWYxLCByZXN1bHRzLCBzLCBzdWJzZXRPZlN0YWNrO1xuICAgIHN0YWNrQWRkc0NvdW50Kys7XG4gICAgaSA9IDA7XG4gICAgaCA9IHRvcyAtIG47XG4gICAgcyA9IGg7XG4gICAgLy8gZW5zdXJlIG5vIGluZmluaXRlIGxvb3AsIHVzZSBcImZvclwiXG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInN0YWNrIGJlZm9yZSBhZGRpbmcgdGVybXMgI1wiICsgc3RhY2tBZGRzQ291bnQpO1xuICAgIH1cbiAgICAvL2lmIHN0YWNrQWRkc0NvdW50ID09IDEzN1xuICAgIC8vICBkZWJ1Z2dlclxuICAgIGlmIChERUJVRykge1xuICAgICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IHRvczsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgICAgY29uc29sZS5sb2cocHJpbnRfbGlzdChzdGFja1tpXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGkgPSBpMSA9IDA7IGkxIDwgMTA7IGkgPSArK2kxKSB7XG4gICAgICBpZiAobiA8IDIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBmbGFnID0gMDtcbiAgICAgIC8vcXNvcnQocywgbiwgc2l6ZW9mIChVICopLCBjbXBfdGVybXMpXG4gICAgICBzdWJzZXRPZlN0YWNrID0gc3RhY2suc2xpY2UoaCwgaCArIG4pO1xuICAgICAgc3Vic2V0T2ZTdGFjay5zb3J0KGNtcF90ZXJtcyk7XG4gICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIGgpLmNvbmNhdChzdWJzZXRPZlN0YWNrKS5jb25jYXQoc3RhY2suc2xpY2UoaCArIG4pKTtcbiAgICAgIGlmIChmbGFnID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbiA9IGNvbWJpbmVfdGVybXMoaCwgbik7XG4gICAgfVxuICAgIG1vdmVUb3MoaCArIG4pO1xuICAgIHN3aXRjaCAobikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgICAgcHVzaF9kb3VibGUoMC4wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoKHplcm8pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxpc3Qobik7XG4gICAgICAgIHAxID0gcG9wKCk7XG4gICAgICAgIHB1c2hfc3ltYm9sKEFERCk7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBjb25zKCk7XG4gICAgfVxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJzdGFjayBhZnRlciBhZGRpbmcgdGVybXMgI1wiICsgc3RhY2tBZGRzQ291bnQpO1xuICAgIH1cbiAgICAvL2lmIHN0YWNrQWRkc0NvdW50ID09IDVcbiAgICAvLyAgZGVidWdnZXJcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IGoxID0gMCwgcmVmMSA9IHRvczsgKDAgPD0gcmVmMSA/IGoxIDwgcmVmMSA6IGoxID4gcmVmMSk7IGkgPSAwIDw9IHJlZjEgPyArK2oxIDogLS1qMSkge1xuICAgICAgICByZXN1bHRzLnB1c2goY29uc29sZS5sb2cocHJpbnRfbGlzdChzdGFja1tpXSkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgfTtcblxuICAvLyBDb21wYXJlIHRlcm1zIGZvciBvcmRlciwgY2xvYmJlcnMgcDEgYW5kIHAyLlxuICBjbXBfdGVybXNfY291bnQgPSAwO1xuXG4gIGNtcF90ZXJtcyA9IGZ1bmN0aW9uKHAxLCBwMikge1xuICAgIHZhciBpLCBvLCByZWYsIHQ7XG4gICAgY21wX3Rlcm1zX2NvdW50Kys7XG4gICAgLy9pZiBjbXBfdGVybXNfY291bnQgPT0gNTJcbiAgICAvLyAgZGVidWdnZXJcbiAgICBpID0gMDtcbiAgICAvLyBudW1iZXJzIGNhbiBiZSBjb21iaW5lZFxuICAgIGlmIChpc051bWVyaWNBdG9tKHAxKSAmJiBpc051bWVyaWNBdG9tKHAyKSkge1xuICAgICAgZmxhZyA9IDE7XG4gICAgICAvL2lmIERFQlVHIHRoZW4gY29uc29sZS5sb2cgXCJjbXBfdGVybXMgI1wiICsgY21wX3Rlcm1zX2NvdW50ICsgXCIgcmV0dXJucyAwXCJcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvLyBjb25ncnVlbnQgdGVuc29ycyBjYW4gYmUgY29tYmluZWRcbiAgICBpZiAoaXN0ZW5zb3IocDEpICYmIGlzdGVuc29yKHAyKSkge1xuICAgICAgaWYgKHAxLnRlbnNvci5uZGltIDwgcDIudGVuc29yLm5kaW0pIHtcbiAgICAgICAgLy9pZiBERUJVRyB0aGVuIGNvbnNvbGUubG9nIFwiY21wX3Rlcm1zICNcIiArIGNtcF90ZXJtc19jb3VudCArIFwiIHJldHVybnMgLTFcIlxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAocDEudGVuc29yLm5kaW0gPiBwMi50ZW5zb3IubmRpbSkge1xuICAgICAgICAvL2lmIERFQlVHIHRoZW4gY29uc29sZS5sb2cgXCJjbXBfdGVybXMgI1wiICsgY21wX3Rlcm1zX2NvdW50ICsgXCIgcmV0dXJucyAxXCJcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gcDEudGVuc29yLm5kaW07ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICAgIGlmIChwMS50ZW5zb3IuZGltW2ldIDwgcDIudGVuc29yLmRpbVtpXSkge1xuICAgICAgICAgIC8vaWYgREVCVUcgdGhlbiBjb25zb2xlLmxvZyBcImNtcF90ZXJtcyAjXCIgKyBjbXBfdGVybXNfY291bnQgKyBcIiByZXR1cm5zIC0xXCJcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHAxLnRlbnNvci5kaW1baV0gPiBwMi50ZW5zb3IuZGltW2ldKSB7XG4gICAgICAgICAgLy9pZiBERUJVRyB0aGVuIGNvbnNvbGUubG9nIFwiY21wX3Rlcm1zICNcIiArIGNtcF90ZXJtc19jb3VudCArIFwiIHJldHVybnMgMVwiXG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZsYWcgPSAxO1xuICAgICAgLy9pZiBERUJVRyB0aGVuIGNvbnNvbGUubG9nIFwiY21wX3Rlcm1zICNcIiArIGNtcF90ZXJtc19jb3VudCArIFwiIHJldHVybnMgMFwiXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIGlmIChpc051bWVyaWNBdG9tKGNhcihwMSkpKSB7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgICAgaWYgKGNkcihwMSkgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgICAgcDEgPSBjYXIocDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjYXIocDIpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgICBpZiAoaXNOdW1lcmljQXRvbShjYXIocDIpKSkge1xuICAgICAgICBwMiA9IGNkcihwMik7XG4gICAgICAgIGlmIChjZHIocDIpID09PSBzeW1ib2woTklMKSkge1xuICAgICAgICAgIHAyID0gY2FyKHAyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0ID0gY21wX2V4cHIocDEsIHAyKTtcbiAgICBpZiAodCA9PT0gMCkge1xuICAgICAgZmxhZyA9IDE7XG4gICAgfVxuICAgIC8vaWYgREVCVUcgdGhlbiBjb25zb2xlLmxvZyBcImNtcF90ZXJtcyAjXCIgKyBjbXBfdGVybXNfY291bnQgKyBcIiByZXR1cm5zIFwiICsgdFxuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIGNvbWJpbmVfdGVybXMgPSBmdW5jdGlvbihzLCBuKSB7XG4gICAgdmFyIGksIGkxLCBqLCBqMSwgbDEsIG0xLCBvLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlZjYsIHJlZjcsIHJlZjgsIHJlZjksIHQ7XG4gICAgLy9kZWJ1Z2dlclxuXG4gICAgLy8gSSBoYWQgdG8gdHVybiB0aGUgY29mZmVlc2NyaXB0IGZvciBsb29wIGludG9cbiAgICAvLyBhIG1vcmUgbXVuZGFuZSB3aGlsZSBsb29wIGJlY2F1c2UgdGhlIGlcbiAgICAvLyB2YXJpYWJsZSB3YXMgY2hhbmdlZCBmcm9tIHdpdGhpbiB0aGUgYm9keSxcbiAgICAvLyB3aGljaCBpcyBzb21ldGhpbmcgdGhhdCBpcyBub3Qgc3VwcG9zZWQgdG9cbiAgICAvLyBoYXBwZW4gaW4gdGhlIGNvZmZlZXNjcmlwdCAndmVjdG9yJyBmb3JtLlxuICAgIC8vIEFsc28gdGhpcyBtZWFucyBJIGhhZCB0byBhZGQgYSAnaSsrJyBqdXMgYmVmb3JlXG4gICAgLy8gdGhlIGVuZCBvZiB0aGUgYm9keSBhbmQgYmVmb3JlIHRoZSBcImNvbnRpbnVlXCJzXG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCAobiAtIDEpKSB7XG4gICAgICBjaGVja19lc2NfZmxhZygpO1xuICAgICAgcDMgPSBzdGFja1tzICsgaV07XG4gICAgICBwNCA9IHN0YWNrW3MgKyBpICsgMV07XG4gICAgICBpZiAoaXN0ZW5zb3IocDMpICYmIGlzdGVuc29yKHA0KSkge1xuICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgcHVzaChwNCk7XG4gICAgICAgIHRlbnNvcl9wbHVzX3RlbnNvcigpO1xuICAgICAgICBwMSA9IHBvcCgpO1xuICAgICAgICBpZiAocDEgIT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgICAgc3RhY2tbcyArIGldID0gcDE7XG4gICAgICAgICAgZm9yIChqID0gbyA9IHJlZiA9IGkgKyAxLCByZWYxID0gbiAtIDE7IChyZWYgPD0gcmVmMSA/IG8gPCByZWYxIDogbyA+IHJlZjEpOyBqID0gcmVmIDw9IHJlZjEgPyArK28gOiAtLW8pIHtcbiAgICAgICAgICAgIHN0YWNrW3MgKyBqXSA9IHN0YWNrW3MgKyBqICsgMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIG4tLTtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc3RlbnNvcihwMykgfHwgaXN0ZW5zb3IocDQpKSB7XG4gICAgICAgIGkrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNOdW1lcmljQXRvbShwMykgJiYgaXNOdW1lcmljQXRvbShwNCkpIHtcbiAgICAgICAgcHVzaChwMyk7XG4gICAgICAgIHB1c2gocDQpO1xuICAgICAgICBhZGRfbnVtYmVycygpO1xuICAgICAgICBwMSA9IHBvcCgpO1xuICAgICAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAxKSkge1xuICAgICAgICAgIGZvciAoaiA9IGkxID0gcmVmMiA9IGksIHJlZjMgPSBuIC0gMjsgKHJlZjIgPD0gcmVmMyA/IGkxIDwgcmVmMyA6IGkxID4gcmVmMyk7IGogPSByZWYyIDw9IHJlZjMgPyArK2kxIDogLS1pMSkge1xuICAgICAgICAgICAgc3RhY2tbcyArIGpdID0gc3RhY2tbcyArIGogKyAyXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbiAtPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YWNrW3MgKyBpXSA9IHAxO1xuICAgICAgICAgIGZvciAoaiA9IGoxID0gcmVmNCA9IGkgKyAxLCByZWY1ID0gbiAtIDE7IChyZWY0IDw9IHJlZjUgPyBqMSA8IHJlZjUgOiBqMSA+IHJlZjUpOyBqID0gcmVmNCA8PSByZWY1ID8gKytqMSA6IC0tajEpIHtcbiAgICAgICAgICAgIHN0YWNrW3MgKyBqXSA9IHN0YWNrW3MgKyBqICsgMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgICAgIGkrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNOdW1lcmljQXRvbShwMykgfHwgaXNOdW1lcmljQXRvbShwNCkpIHtcbiAgICAgICAgaSsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgcDEgPSBvbmVfYXNfZG91YmxlO1xuICAgICAgICBwMiA9IG9uZV9hc19kb3VibGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwMSA9IG9uZTtcbiAgICAgICAgcDIgPSBvbmU7XG4gICAgICB9XG4gICAgICB0ID0gMDtcbiAgICAgIGlmIChjYXIocDMpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICAgIHAzID0gY2RyKHAzKTtcbiAgICAgICAgdCA9IDE7XG4gICAgICAgIGlmIChpc051bWVyaWNBdG9tKGNhcihwMykpKSB7XG4gICAgICAgICAgcDEgPSBjYXIocDMpO1xuICAgICAgICAgIHAzID0gY2RyKHAzKTtcbiAgICAgICAgICBpZiAoY2RyKHAzKSA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgICAgICAgIHAzID0gY2FyKHAzKTtcbiAgICAgICAgICAgIHQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcihwNCkgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgICAgcDQgPSBjZHIocDQpO1xuICAgICAgICBpZiAoaXNOdW1lcmljQXRvbShjYXIocDQpKSkge1xuICAgICAgICAgIHAyID0gY2FyKHA0KTtcbiAgICAgICAgICBwNCA9IGNkcihwNCk7XG4gICAgICAgICAgaWYgKGNkcihwNCkgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgICAgICBwNCA9IGNhcihwNCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWVxdWFsKHAzLCBwNCkpIHtcbiAgICAgICAgaSsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBhZGRfbnVtYmVycygpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDEpKSB7XG4gICAgICAgIGZvciAoaiA9IGwxID0gcmVmNiA9IGksIHJlZjcgPSBuIC0gMjsgKHJlZjYgPD0gcmVmNyA/IGwxIDwgcmVmNyA6IGwxID4gcmVmNyk7IGogPSByZWY2IDw9IHJlZjcgPyArK2wxIDogLS1sMSkge1xuICAgICAgICAgIHN0YWNrW3MgKyBqXSA9IHN0YWNrW3MgKyBqICsgMl07XG4gICAgICAgIH1cbiAgICAgICAgbiAtPSAyO1xuICAgICAgICBpLS07XG4gICAgICAgIGkrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGlmICh0KSB7XG4gICAgICAgIHB1c2goc3ltYm9sKE1VTFRJUExZKSk7XG4gICAgICAgIHB1c2gocDMpO1xuICAgICAgICBjb25zKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHAzKTtcbiAgICAgIH1cbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBzdGFja1tzICsgaV0gPSBwb3AoKTtcbiAgICAgIGZvciAoaiA9IG0xID0gcmVmOCA9IGkgKyAxLCByZWY5ID0gbiAtIDE7IChyZWY4IDw9IHJlZjkgPyBtMSA8IHJlZjkgOiBtMSA+IHJlZjkpOyBqID0gcmVmOCA8PSByZWY5ID8gKyttMSA6IC0tbTEpIHtcbiAgICAgICAgc3RhY2tbcyArIGpdID0gc3RhY2tbcyArIGogKyAxXTtcbiAgICAgIH1cbiAgICAgIG4tLTtcbiAgICAgIGktLTtcbiAgICAgIC8vIHRoaXMgaSsrIGlzIHRvIG1hdGNoIHRoZSB3aGlsZVxuICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfTtcblxuICBwdXNoX3Rlcm1zID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBwdXNoKGNhcihwKSk7XG4gICAgICAgIHJlc3VsdHMucHVzaChwID0gY2RyKHApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gZWxzZSBpZiAoIWlzWmVyb0F0b20ocCkpIHtcbiAgICAgIHJldHVybiBwdXNoKHApO1xuICAgIH1cbiAgfTtcblxuICAvLyBhZGQgdHdvIGV4cHJlc3Npb25zXG4gIGFkZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoO1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaCA9IHRvcztcbiAgICBwdXNoX3Rlcm1zKHAxKTtcbiAgICBwdXNoX3Rlcm1zKHAyKTtcbiAgICBhZGRfdGVybXModG9zIC0gaCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBhZGRfYWxsID0gZnVuY3Rpb24oaykge1xuICAgIHZhciBoLCBpLCBvLCByZWYsIHM7XG4gICAgaSA9IDA7XG4gICAgc2F2ZSgpO1xuICAgIHMgPSB0b3MgLSBrO1xuICAgIGggPSB0b3M7XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IGs7ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBwdXNoX3Rlcm1zKHN0YWNrW3MgKyBpXSk7XG4gICAgfVxuICAgIGFkZF90ZXJtcyh0b3MgLSBoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIG1vdmVUb3ModG9zIC0gayk7XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBzdWJ0cmFjdCA9IGZ1bmN0aW9uKCkge1xuICAgIG5lZ2F0ZSgpO1xuICAgIHJldHVybiBhZGQoKTtcbiAgfTtcblxuICBFdmFsX2FkaiA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gYWRqKCk7XG4gIH07XG5cbiAgYWRqID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvTm90aGluZywgaSwgaTEsIGosIG4sIG8sIHJlZiwgcmVmMTtcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBuID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXN0ZW5zb3IocDEpICYmIHAxLnRlbnNvci5uZGltID09PSAyICYmIHAxLnRlbnNvci5kaW1bMF0gPT09IHAxLnRlbnNvci5kaW1bMV0pIHtcbiAgICAgIGRvTm90aGluZyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3AoXCJhZGo6IHNxdWFyZSBtYXRyaXggZXhwZWN0ZWRcIik7XG4gICAgfVxuICAgIG4gPSBwMS50ZW5zb3IuZGltWzBdO1xuICAgIHAyID0gYWxsb2NfdGVuc29yKG4gKiBuKTtcbiAgICBwMi50ZW5zb3IubmRpbSA9IDI7XG4gICAgcDIudGVuc29yLmRpbVswXSA9IG47XG4gICAgcDIudGVuc29yLmRpbVsxXSA9IG47XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBmb3IgKGogPSBpMSA9IDAsIHJlZjEgPSBuOyAoMCA8PSByZWYxID8gaTEgPCByZWYxIDogaTEgPiByZWYxKTsgaiA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgIGNvZmFjdG9yKHAxLCBuLCBpLCBqKTtcbiAgICAgICAgcDIudGVuc29yLmVsZW1bbiAqIGogKyBpXSA9IHBvcCgpOyAvLyB0cmFuc3Bvc2VcbiAgICAgIH1cbiAgICB9XG4gICAgcHVzaChwMik7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBFdmFsX2FwcHJveHJhdGlvID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRoZUFyZ3VtZW50O1xuICAgIHRoZUFyZ3VtZW50ID0gY2FkcihwMSk7XG4gICAgcHVzaCh0aGVBcmd1bWVudCk7XG4gICAgcmV0dXJuIGFwcHJveHJhdGlvUmVjdXJzaXZlKCk7XG4gIH07XG5cbiAgYXBwcm94cmF0aW9SZWN1cnNpdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaTEsIG8sIHJlZiwgcmVmMTtcbiAgICBpID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXN0ZW5zb3IocDEpKSB7XG4gICAgICBwNCA9IGFsbG9jX3RlbnNvcihwMS50ZW5zb3IubmVsZW0pO1xuICAgICAgcDQudGVuc29yLm5kaW0gPSBwMS50ZW5zb3IubmRpbTtcbiAgICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBwMS50ZW5zb3IubmRpbTsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgICAgcDQudGVuc29yLmRpbVtpXSA9IHAxLnRlbnNvci5kaW1baV07XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSBpMSA9IDAsIHJlZjEgPSBwMS50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgICAgcHVzaChwMS50ZW5zb3IuZWxlbVtpXSk7XG4gICAgICAgIGFwcHJveHJhdGlvUmVjdXJzaXZlKCk7XG4gICAgICAgIHA0LnRlbnNvci5lbGVtW2ldID0gcG9wKCk7XG4gICAgICAgIGNoZWNrX3RlbnNvcl9kaW1lbnNpb25zKHA0KTtcbiAgICAgIH1cbiAgICAgIHB1c2gocDQpO1xuICAgIH0gZWxzZSBpZiAocDEuayA9PT0gRE9VQkxFKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGFwcHJveE9uZVJhdGlvT25seSgpO1xuICAgIH0gZWxzZSBpZiAoaXNjb25zKHAxKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIGFwcHJveHJhdGlvUmVjdXJzaXZlKCk7XG4gICAgICBwdXNoKGNkcihwMSkpO1xuICAgICAgYXBwcm94cmF0aW9SZWN1cnNpdmUoKTtcbiAgICAgIGNvbnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMSk7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgYXBwcm94T25lUmF0aW9Pbmx5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QsIHByZWNpc2lvbiwgc3BsaXRCZWZvcmVBbmRBZnRlckRvdCwgc3VwcG9zZWRseVRoZUZsb2F0LCB0aGVGbG9hdCwgdGhlUmF0aW87XG4gICAgenpmbG9hdCgpO1xuICAgIHN1cHBvc2VkbHlUaGVGbG9hdCA9IHBvcCgpO1xuICAgIGlmIChzdXBwb3NlZGx5VGhlRmxvYXQuayA9PT0gRE9VQkxFKSB7XG4gICAgICB0aGVGbG9hdCA9IHN1cHBvc2VkbHlUaGVGbG9hdC5kO1xuICAgICAgc3BsaXRCZWZvcmVBbmRBZnRlckRvdCA9IHRoZUZsb2F0LnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpO1xuICAgICAgaWYgKHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QgPSBzcGxpdEJlZm9yZUFuZEFmdGVyRG90WzFdLmxlbmd0aDtcbiAgICAgICAgcHJlY2lzaW9uID0gMSAvIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90KTtcbiAgICAgICAgdGhlUmF0aW8gPSBmbG9hdFRvUmF0aW9Sb3V0aW5lKHRoZUZsb2F0LCBwcmVjaXNpb24pO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKHRoZVJhdGlvWzBdLCB0aGVSYXRpb1sxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoX2ludGVnZXIodGhlRmxvYXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB3ZSBkaWRuJ3QgbWFuYWdlLCBqdXN0IGxlYXZlIHVuZXhwcmVzc2VkXG4gICAgcHVzaF9zeW1ib2woQVBQUk9YUkFUSU8pO1xuICAgIHB1c2godGhlQXJndW1lbnQpO1xuICAgIHJldHVybiBsaXN0KDIpO1xuICB9O1xuXG4gIC8vIG9yaWdpbmFsIHJvdXRpbmUgYnkgSm9obiBLZW5uZWR5LCBzZWVcbiAgLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTExMDI3MTAwODQ3L2h0dHA6Ly9ob21lcGFnZS5zbWMuZWR1L2tlbm5lZHlfam9obi9ERUMyRlJBQy5QREZcbiAgLy8gY291cnRlc3kgb2YgTWljaGFlbCBCb3JjaGVyZHNcbiAgLy8gd2hvIHBvcnRlZCB0aGlzIHRvIEphdmFTY3JpcHQgdW5kZXIgTUlUIGxpY2VuY2VcbiAgLy8gYWxzbyBzZWVcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dlb2dlYnJhL2dlb2dlYnJhL2Jsb2IvbWFzdGVyL2NvbW1vbi9zcmMvbWFpbi9qYXZhL29yZy9nZW9nZWJyYS9jb21tb24va2VybmVsL2FsZ29zL0FsZ29GcmFjdGlvblRleHQuamF2YVxuICAvLyBwb3RlbnRpYWwgb3RoZXIgd2F5cyB0byBkbyB0aGlzOlxuICAvLyAgIGh0dHBzOi8vcm9zZXR0YWNvZGUub3JnL3dpa2kvQ29udmVydF9kZWNpbWFsX251bWJlcl90b19yYXRpb25hbFxuICAvLyAgIGh0dHA6Ly93d3cuaG9tZXNjaG9vbG1hdGgubmV0L3RlYWNoaW5nL3JhdGlvbmFsX251bWJlcnMucGhwXG4gIC8vICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NTcyNy9ob3ctdG8tY29udmVydC1mbG9hdHMtdG8taHVtYW4tcmVhZGFibGUtZnJhY3Rpb25zXG4gIGZsb2F0VG9SYXRpb1JvdXRpbmUgPSBmdW5jdGlvbihkZWNpbWFsLCBBY2N1cmFjeUZhY3Rvcikge1xuICAgIHZhciBEZWNpbWFsU2lnbiwgRnJhY3Rpb25EZW5vbWluYXRvciwgRnJhY3Rpb25OdW1lcmF0b3IsIFByZXZpb3VzRGVub21pbmF0b3IsIFNjcmF0Y2hWYWx1ZSwgWiwgcmV0O1xuICAgIEZyYWN0aW9uTnVtZXJhdG9yID0gdm9pZCAwO1xuICAgIEZyYWN0aW9uRGVub21pbmF0b3IgPSB2b2lkIDA7XG4gICAgRGVjaW1hbFNpZ24gPSB2b2lkIDA7XG4gICAgWiA9IHZvaWQgMDtcbiAgICBQcmV2aW91c0Rlbm9taW5hdG9yID0gdm9pZCAwO1xuICAgIFNjcmF0Y2hWYWx1ZSA9IHZvaWQgMDtcbiAgICByZXQgPSBbMCwgMF07XG4gICAgaWYgKGlzTmFOKGRlY2ltYWwpKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICAvLyByZXR1cm4gMC8wIFxuICAgIGlmIChkZWNpbWFsID09PSAyZTMwOCkge1xuICAgICAgcmV0WzBdID0gMTtcbiAgICAgIHJldFsxXSA9IDA7XG4gICAgICAvLyAxLzBcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGlmIChkZWNpbWFsID09PSAtMmUzMDgpIHtcbiAgICAgIHJldFswXSA9IC0xO1xuICAgICAgcmV0WzFdID0gMDtcbiAgICAgIC8vIC0xLzBcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGlmIChkZWNpbWFsIDwgMC4wKSB7XG4gICAgICBEZWNpbWFsU2lnbiA9IC0xLjA7XG4gICAgfSBlbHNlIHtcbiAgICAgIERlY2ltYWxTaWduID0gMS4wO1xuICAgIH1cbiAgICBkZWNpbWFsID0gTWF0aC5hYnMoZGVjaW1hbCk7XG4gICAgaWYgKE1hdGguYWJzKGRlY2ltYWwgLSBNYXRoLmZsb29yKGRlY2ltYWwpKSA8IEFjY3VyYWN5RmFjdG9yKSB7XG4gICAgICAvLyBoYW5kbGVzIGV4YWN0IGludGVnZXJzIGluY2x1ZGluZyAwIFxuICAgICAgRnJhY3Rpb25OdW1lcmF0b3IgPSBkZWNpbWFsICogRGVjaW1hbFNpZ247XG4gICAgICBGcmFjdGlvbkRlbm9taW5hdG9yID0gMS4wO1xuICAgICAgcmV0WzBdID0gRnJhY3Rpb25OdW1lcmF0b3I7XG4gICAgICByZXRbMV0gPSBGcmFjdGlvbkRlbm9taW5hdG9yO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgaWYgKGRlY2ltYWwgPCAxLjBlLTE5KSB7XG4gICAgICAvLyBYID0gMCBhbHJlYWR5IHRha2VuIGNhcmUgb2YgXG4gICAgICBGcmFjdGlvbk51bWVyYXRvciA9IERlY2ltYWxTaWduO1xuICAgICAgRnJhY3Rpb25EZW5vbWluYXRvciA9IDk5OTk5OTk5OTk5OTk5OTk5OTkuMDtcbiAgICAgIHJldFswXSA9IEZyYWN0aW9uTnVtZXJhdG9yO1xuICAgICAgcmV0WzFdID0gRnJhY3Rpb25EZW5vbWluYXRvcjtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGlmIChkZWNpbWFsID4gMS4wZTE5KSB7XG4gICAgICBGcmFjdGlvbk51bWVyYXRvciA9IDk5OTk5OTk5OTk5OTk5OTk5OTkuMCAqIERlY2ltYWxTaWduO1xuICAgICAgRnJhY3Rpb25EZW5vbWluYXRvciA9IDEuMDtcbiAgICAgIHJldFswXSA9IEZyYWN0aW9uTnVtZXJhdG9yO1xuICAgICAgcmV0WzFdID0gRnJhY3Rpb25EZW5vbWluYXRvcjtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIFogPSBkZWNpbWFsO1xuICAgIFByZXZpb3VzRGVub21pbmF0b3IgPSAwLjA7XG4gICAgRnJhY3Rpb25EZW5vbWluYXRvciA9IDEuMDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgWiA9IDEuMCAvIChaIC0gTWF0aC5mbG9vcihaKSk7XG4gICAgICBTY3JhdGNoVmFsdWUgPSBGcmFjdGlvbkRlbm9taW5hdG9yO1xuICAgICAgRnJhY3Rpb25EZW5vbWluYXRvciA9IEZyYWN0aW9uRGVub21pbmF0b3IgKiBNYXRoLmZsb29yKFopICsgUHJldmlvdXNEZW5vbWluYXRvcjtcbiAgICAgIFByZXZpb3VzRGVub21pbmF0b3IgPSBTY3JhdGNoVmFsdWU7XG4gICAgICBGcmFjdGlvbk51bWVyYXRvciA9IE1hdGguZmxvb3IoZGVjaW1hbCAqIEZyYWN0aW9uRGVub21pbmF0b3IgKyAwLjUpO1xuICAgICAgLy8gUm91bmRpbmcgRnVuY3Rpb25cbiAgICAgIGlmICghKE1hdGguYWJzKGRlY2ltYWwgLSAoRnJhY3Rpb25OdW1lcmF0b3IgLyBGcmFjdGlvbkRlbm9taW5hdG9yKSkgPiBBY2N1cmFjeUZhY3RvciAmJiBaICE9PSBNYXRoLmZsb29yKFopKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgRnJhY3Rpb25OdW1lcmF0b3IgPSBEZWNpbWFsU2lnbiAqIEZyYWN0aW9uTnVtZXJhdG9yO1xuICAgIHJldFswXSA9IEZyYWN0aW9uTnVtZXJhdG9yO1xuICAgIHJldFsxXSA9IEZyYWN0aW9uRGVub21pbmF0b3I7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBhcHByb3hfanVzdF9hbl9pbnRlZ2VyID0gMDtcblxuICBhcHByb3hfc2luZV9vZl9yYXRpb25hbCA9IDE7XG5cbiAgYXBwcm94X3NpbmVfb2ZfcGlfdGltZXNfcmF0aW9uYWwgPSAyO1xuXG4gIGFwcHJveF9yYXRpb25hbE9mUGkgPSAzO1xuXG4gIGFwcHJveF9yYWRpY2FsT2ZSYXRpbyA9IDQ7XG5cbiAgYXBwcm94X25vdGhpbmdVc2VmdWwgPSA1O1xuXG4gIGFwcHJveF9yYXRpb09mUmFkaWNhbCA9IDY7XG5cbiAgYXBwcm94X3JhdGlvbmFsT2ZFID0gNztcblxuICBhcHByb3hfbG9nYXJpdGhtc09mUmF0aW9uYWxzID0gODtcblxuICBhcHByb3hfcmF0aW9uYWxzT2ZMb2dhcml0aG1zID0gOTtcblxuICBhcHByb3hSYXRpb25hbHNPZlJhZGljYWxzID0gZnVuY3Rpb24odGhlRmxvYXQpIHtcbiAgICB2YXIgYmVzdFJlc3VsdFNvRmFyLCBjb21wbGV4aXR5LCBlcnJvciwgaHlwb3RoZXNpcywgaSwgaTEsIGosIGxlbiwgbGlrZWx5TXVsdGlwbGllciwgbWluaW11bUNvbXBsZXhpdHksIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QsIG8sIHByZWNpc2lvbiwgcmF0aW8sIHJlZiwgcmVzdWx0LCBzcGxpdEJlZm9yZUFuZEFmdGVyRG90O1xuICAgIHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QgPSB0aGVGbG9hdC50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcbiAgICBpZiAoc3BsaXRCZWZvcmVBbmRBZnRlckRvdC5sZW5ndGggPT09IDIpIHtcbiAgICAgIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QgPSBzcGxpdEJlZm9yZUFuZEFmdGVyRG90WzFdLmxlbmd0aDtcbiAgICAgIHByZWNpc2lvbiA9IDEgLyBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXCJcIiArIE1hdGguZmxvb3IodGhlRmxvYXQpLCBhcHByb3hfanVzdF9hbl9pbnRlZ2VyLCBNYXRoLmZsb29yKHRoZUZsb2F0KSwgMSwgMl07XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwicHJlY2lzaW9uOiBcIiArIHByZWNpc2lvbik7XG4gICAgLy8gc2ltcGxlIHJhZGljYWxzLlxuICAgIGJlc3RSZXN1bHRTb0ZhciA9IG51bGw7XG4gICAgbWluaW11bUNvbXBsZXhpdHkgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIHJlZiA9IFsyLCAzLCA1LCA2LCA3LCA4LCAxMF07XG4gICAgZm9yIChvID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgbyA8IGxlbjsgbysrKSB7XG4gICAgICBpID0gcmVmW29dO1xuICAgICAgZm9yIChqID0gaTEgPSAxOyBpMSA8PSAxMDsgaiA9ICsraTEpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJpLGo6IFwiICsgaSArIFwiLFwiICsgalxuICAgICAgICBoeXBvdGhlc2lzID0gTWF0aC5zcXJ0KGkpIC8gajtcbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJoeXBvdGhlc2lzOiBcIiArIGh5cG90aGVzaXNcbiAgICAgICAgaWYgKE1hdGguYWJzKGh5cG90aGVzaXMpID4gMWUtMTApIHtcbiAgICAgICAgICByYXRpbyA9IHRoZUZsb2F0IC8gaHlwb3RoZXNpcztcbiAgICAgICAgICBsaWtlbHlNdWx0aXBsaWVyID0gTWF0aC5yb3VuZChyYXRpbyk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJyYXRpbzogXCIgKyByYXRpb1xuICAgICAgICAgIGVycm9yID0gTWF0aC5hYnMoMSAtIHJhdGlvIC8gbGlrZWx5TXVsdGlwbGllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmF0aW8gPSAxO1xuICAgICAgICAgIGxpa2VseU11bHRpcGxpZXIgPSAxO1xuICAgICAgICAgIGVycm9yID0gTWF0aC5hYnModGhlRmxvYXQgLSBoeXBvdGhlc2lzKTtcbiAgICAgICAgfVxuICAgICAgICAvL2NvbnNvbGUubG9nICBcImVycm9yOiBcIiArIGVycm9yXG4gICAgICAgIGlmIChlcnJvciA8IDIgKiBwcmVjaXNpb24pIHtcbiAgICAgICAgICBjb21wbGV4aXR5ID0gc2ltcGxlQ29tcGxleGl0eU1lYXN1cmUobGlrZWx5TXVsdGlwbGllciwgaSwgaik7XG4gICAgICAgICAgaWYgKGNvbXBsZXhpdHkgPCBtaW5pbXVtQ29tcGxleGl0eSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyBcIk1JTklNVU0gTVVMVElQTElFUiBTTyBGQVJcIlxuICAgICAgICAgICAgbWluaW11bUNvbXBsZXhpdHkgPSBjb21wbGV4aXR5O1xuICAgICAgICAgICAgcmVzdWx0ID0gbGlrZWx5TXVsdGlwbGllciArIFwiICogc3FydCggXCIgKyBpICsgXCIgKSAvIFwiICsgajtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgcmVzdWx0ICsgXCIgZXJyb3I6IFwiICsgZXJyb3JcbiAgICAgICAgICAgIGJlc3RSZXN1bHRTb0ZhciA9IFtyZXN1bHQsIGFwcHJveF9yYXRpb09mUmFkaWNhbCwgbGlrZWx5TXVsdGlwbGllciwgaSwgal07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0UmVzdWx0U29GYXI7XG4gIH07XG5cbiAgYXBwcm94UmFkaWNhbHNPZlJhdGlvbmFscyA9IGZ1bmN0aW9uKHRoZUZsb2F0KSB7XG4gICAgdmFyIGJlc3RSZXN1bHRTb0ZhciwgY29tcGxleGl0eSwgZXJyb3IsIGh5cG90aGVzaXMsIGksIGkxLCBqLCBsZW4sIGxlbjEsIGxpa2VseU11bHRpcGxpZXIsIG1pbmltdW1Db21wbGV4aXR5LCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90LCBvLCBwcmVjaXNpb24sIHJhdGlvLCByZWYsIHJlZjEsIHJlc3VsdCwgc3BsaXRCZWZvcmVBbmRBZnRlckRvdDtcbiAgICBzcGxpdEJlZm9yZUFuZEFmdGVyRG90ID0gdGhlRmxvYXQudG9TdHJpbmcoKS5zcGxpdChcIi5cIik7XG4gICAgaWYgKHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QubGVuZ3RoID09PSAyKSB7XG4gICAgICBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90ID0gc3BsaXRCZWZvcmVBbmRBZnRlckRvdFsxXS5sZW5ndGg7XG4gICAgICBwcmVjaXNpb24gPSAxIC8gTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW1wiXCIgKyBNYXRoLmZsb29yKHRoZUZsb2F0KSwgYXBwcm94X2p1c3RfYW5faW50ZWdlciwgTWF0aC5mbG9vcih0aGVGbG9hdCksIDEsIDJdO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcInByZWNpc2lvbjogXCIgKyBwcmVjaXNpb24pO1xuICAgIC8vIHNpbXBsZSByYWRpY2Fscy5cbiAgICBiZXN0UmVzdWx0U29GYXIgPSBudWxsO1xuICAgIG1pbmltdW1Db21wbGV4aXR5ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICByZWYgPSBbMSwgMiwgMywgNSwgNiwgNywgOCwgMTBdO1xuICAgIC8vIHRoaXMgb25lIGNhdGNoZXMgdGhpbmdzIGxpa2UgTWF0aC5zcXJ0KDMvNCksIGJ1dFxuICAgIC8vIHRoaW5ncyBsaWtlIE1hdGguc3FydCgxLzIpIGFyZSBjYXVnaHQgYnkgdGhlIHBhcmFncmFwaFxuICAgIC8vIGFib3ZlIChhbmQgaW4gYSBiZXR0ZXIgZm9ybSlcbiAgICBmb3IgKG8gPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBvIDwgbGVuOyBvKyspIHtcbiAgICAgIGkgPSByZWZbb107XG4gICAgICByZWYxID0gWzEsIDIsIDMsIDUsIDYsIDcsIDgsIDEwXTtcbiAgICAgIGZvciAoaTEgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGkxIDwgbGVuMTsgaTErKykge1xuICAgICAgICBqID0gcmVmMVtpMV07XG4gICAgICAgIC8vY29uc29sZS5sb2cgIFwiaSxqOiBcIiArIGkgKyBcIixcIiArIGpcbiAgICAgICAgaHlwb3RoZXNpcyA9IE1hdGguc3FydChpIC8gaik7XG4gICAgICAgIC8vY29uc29sZS5sb2cgIFwiaHlwb3RoZXNpczogXCIgKyBoeXBvdGhlc2lzXG4gICAgICAgIGlmIChNYXRoLmFicyhoeXBvdGhlc2lzKSA+IDFlLTEwKSB7XG4gICAgICAgICAgcmF0aW8gPSB0aGVGbG9hdCAvIGh5cG90aGVzaXM7XG4gICAgICAgICAgbGlrZWx5TXVsdGlwbGllciA9IE1hdGgucm91bmQocmF0aW8pO1xuICAgICAgICAgIC8vY29uc29sZS5sb2cgIFwicmF0aW86IFwiICsgcmF0aW9cbiAgICAgICAgICBlcnJvciA9IE1hdGguYWJzKDEgLSByYXRpbyAvIGxpa2VseU11bHRpcGxpZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhdGlvID0gMTtcbiAgICAgICAgICBsaWtlbHlNdWx0aXBsaWVyID0gMTtcbiAgICAgICAgICBlcnJvciA9IE1hdGguYWJzKHRoZUZsb2F0IC0gaHlwb3RoZXNpcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJlcnJvcjogXCIgKyBlcnJvclxuICAgICAgICBpZiAoZXJyb3IgPCAyICogcHJlY2lzaW9uKSB7XG4gICAgICAgICAgY29tcGxleGl0eSA9IHNpbXBsZUNvbXBsZXhpdHlNZWFzdXJlKGxpa2VseU11bHRpcGxpZXIsIGksIGopO1xuICAgICAgICAgIGlmIChjb21wbGV4aXR5IDwgbWluaW11bUNvbXBsZXhpdHkpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgXCJNSU5JTVVNIE1VTFRJUExJRVIgU08gRkFSXCJcbiAgICAgICAgICAgIG1pbmltdW1Db21wbGV4aXR5ID0gY29tcGxleGl0eTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGxpa2VseU11bHRpcGxpZXIgKyBcIiAqIChzcXJ0KCBcIiArIGkgKyBcIiAvIFwiICsgaiArIFwiIClcIjtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgcmVzdWx0ICsgXCIgZXJyb3I6IFwiICsgZXJyb3JcbiAgICAgICAgICAgIGJlc3RSZXN1bHRTb0ZhciA9IFtyZXN1bHQsIGFwcHJveF9yYWRpY2FsT2ZSYXRpbywgbGlrZWx5TXVsdGlwbGllciwgaSwgal07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0UmVzdWx0U29GYXI7XG4gIH07XG5cbiAgYXBwcm94UmFkaWNhbHMgPSBmdW5jdGlvbih0aGVGbG9hdCkge1xuICAgIHZhciBhcHByb3hSYWRpY2Fsc09mUmF0aW9uYWxzUmVzdWx0LCBhcHByb3hSYXRpb25hbHNPZlJhZGljYWxzUmVzdWx0LCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90LCBwcmVjaXNpb24sIHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3Q7XG4gICAgc3BsaXRCZWZvcmVBbmRBZnRlckRvdCA9IHRoZUZsb2F0LnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpO1xuICAgIGlmIChzcGxpdEJlZm9yZUFuZEFmdGVyRG90Lmxlbmd0aCA9PT0gMikge1xuICAgICAgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCA9IHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3RbMV0ubGVuZ3RoO1xuICAgICAgcHJlY2lzaW9uID0gMSAvIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtcIlwiICsgTWF0aC5mbG9vcih0aGVGbG9hdCksIGFwcHJveF9qdXN0X2FuX2ludGVnZXIsIE1hdGguZmxvb3IodGhlRmxvYXQpLCAxLCAyXTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJwcmVjaXNpb246IFwiICsgcHJlY2lzaW9uKTtcbiAgICAvLyBzaW1wbGUgcmFkaWNhbHMuXG5cbiAgICAvLyB3ZSBhbHdheXMgcHJlZmVyIGEgcmF0aW9uYWwgb2YgYSByYWRpY2FsIG9mIGFuIGludGVnZXJcbiAgICAvLyB0byBhIHJhZGljYWwgb2YgYSByYXRpb25hbC4gUmFkaWNhbHMgb2YgcmF0aW9uYWxzIGdlbmVyYXRlXG4gICAgLy8gcmFkaWNhbHMgYXQgdGhlIGRlbm9taW5hdG9yIHdoaWNoIHdlJ2QgcmF0aGVyIGF2b2lkXG4gICAgYXBwcm94UmF0aW9uYWxzT2ZSYWRpY2Fsc1Jlc3VsdCA9IGFwcHJveFJhdGlvbmFsc09mUmFkaWNhbHModGhlRmxvYXQpO1xuICAgIGlmIChhcHByb3hSYXRpb25hbHNPZlJhZGljYWxzUmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBhcHByb3hSYXRpb25hbHNPZlJhZGljYWxzUmVzdWx0O1xuICAgIH1cbiAgICBhcHByb3hSYWRpY2Fsc09mUmF0aW9uYWxzUmVzdWx0ID0gYXBwcm94UmFkaWNhbHNPZlJhdGlvbmFscyh0aGVGbG9hdCk7XG4gICAgaWYgKGFwcHJveFJhZGljYWxzT2ZSYXRpb25hbHNSZXN1bHQgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFwcHJveFJhZGljYWxzT2ZSYXRpb25hbHNSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGFwcHJveExvZ3MgPSBmdW5jdGlvbih0aGVGbG9hdCkge1xuICAgIHZhciBhcHByb3hMb2dzT2ZSYXRpb25hbHNSZXN1bHQsIGFwcHJveFJhdGlvbmFsc09mTG9nc1Jlc3VsdCwgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCwgcHJlY2lzaW9uLCBzcGxpdEJlZm9yZUFuZEFmdGVyRG90O1xuICAgIHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QgPSB0aGVGbG9hdC50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcbiAgICBpZiAoc3BsaXRCZWZvcmVBbmRBZnRlckRvdC5sZW5ndGggPT09IDIpIHtcbiAgICAgIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QgPSBzcGxpdEJlZm9yZUFuZEFmdGVyRG90WzFdLmxlbmd0aDtcbiAgICAgIHByZWNpc2lvbiA9IDEgLyBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXCJcIiArIE1hdGguZmxvb3IodGhlRmxvYXQpLCBhcHByb3hfanVzdF9hbl9pbnRlZ2VyLCBNYXRoLmZsb29yKHRoZUZsb2F0KSwgMSwgMl07XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwicHJlY2lzaW9uOiBcIiArIHByZWNpc2lvbik7XG4gICAgLy8gd2UgYWx3YXlzIHByZWZlciBhIHJhdGlvbmFsIG9mIGEgbG9nIHRvIGEgbG9nIG9mXG4gICAgLy8gYSByYXRpb25hbFxuICAgIGFwcHJveFJhdGlvbmFsc09mTG9nc1Jlc3VsdCA9IGFwcHJveFJhdGlvbmFsc09mTG9ncyh0aGVGbG9hdCk7XG4gICAgaWYgKGFwcHJveFJhdGlvbmFsc09mTG9nc1Jlc3VsdCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gYXBwcm94UmF0aW9uYWxzT2ZMb2dzUmVzdWx0O1xuICAgIH1cbiAgICBhcHByb3hMb2dzT2ZSYXRpb25hbHNSZXN1bHQgPSBhcHByb3hMb2dzT2ZSYXRpb25hbHModGhlRmxvYXQpO1xuICAgIGlmIChhcHByb3hMb2dzT2ZSYXRpb25hbHNSZXN1bHQgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFwcHJveExvZ3NPZlJhdGlvbmFsc1Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgYXBwcm94UmF0aW9uYWxzT2ZMb2dzID0gZnVuY3Rpb24odGhlRmxvYXQpIHtcbiAgICB2YXIgYmVzdFJlc3VsdFNvRmFyLCBjb21wbGV4aXR5LCBlcnJvciwgaHlwb3RoZXNpcywgaSwgaTEsIGosIGxpa2VseU11bHRpcGxpZXIsIG1pbmltdW1Db21wbGV4aXR5LCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90LCBvLCBwcmVjaXNpb24sIHJhdGlvLCByZXN1bHQsIHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3Q7XG4gICAgc3BsaXRCZWZvcmVBbmRBZnRlckRvdCA9IHRoZUZsb2F0LnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpO1xuICAgIGlmIChzcGxpdEJlZm9yZUFuZEFmdGVyRG90Lmxlbmd0aCA9PT0gMikge1xuICAgICAgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCA9IHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3RbMV0ubGVuZ3RoO1xuICAgICAgcHJlY2lzaW9uID0gMSAvIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtcIlwiICsgTWF0aC5mbG9vcih0aGVGbG9hdCksIGFwcHJveF9qdXN0X2FuX2ludGVnZXIsIE1hdGguZmxvb3IodGhlRmxvYXQpLCAxLCAyXTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJwcmVjaXNpb246IFwiICsgcHJlY2lzaW9uKTtcbiAgICBiZXN0UmVzdWx0U29GYXIgPSBudWxsO1xuICAgIG1pbmltdW1Db21wbGV4aXR5ID0gTnVtYmVyLk1BWF9WQUxVRTtcbi8vIHNpbXBsZSByYXRpb25hbHMgb2YgbG9nc1xuICAgIGZvciAoaSA9IG8gPSAyOyBvIDw9IDU7IGkgPSArK28pIHtcbiAgICAgIGZvciAoaiA9IGkxID0gMTsgaTEgPD0gNTsgaiA9ICsraTEpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJpLGo6IFwiICsgaSArIFwiLFwiICsgalxuICAgICAgICBoeXBvdGhlc2lzID0gTWF0aC5sb2coaSkgLyBqO1xuICAgICAgICAvL2NvbnNvbGUubG9nICBcImh5cG90aGVzaXM6IFwiICsgaHlwb3RoZXNpc1xuICAgICAgICBpZiAoTWF0aC5hYnMoaHlwb3RoZXNpcykgPiAxZS0xMCkge1xuICAgICAgICAgIHJhdGlvID0gdGhlRmxvYXQgLyBoeXBvdGhlc2lzO1xuICAgICAgICAgIGxpa2VseU11bHRpcGxpZXIgPSBNYXRoLnJvdW5kKHJhdGlvKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nICBcInJhdGlvOiBcIiArIHJhdGlvXG4gICAgICAgICAgZXJyb3IgPSBNYXRoLmFicygxIC0gcmF0aW8gLyBsaWtlbHlNdWx0aXBsaWVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByYXRpbyA9IDE7XG4gICAgICAgICAgbGlrZWx5TXVsdGlwbGllciA9IDE7XG4gICAgICAgICAgZXJyb3IgPSBNYXRoLmFicyh0aGVGbG9hdCAtIGh5cG90aGVzaXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vY29uc29sZS5sb2cgIFwiZXJyb3I6IFwiICsgZXJyb3JcblxuICAgICAgICAvLyBpdCBkb2VzIGhhcHBlbiB0aGF0IGR1ZSB0byByb3VuZGluZ3MgXG4gICAgICAgIC8vIGEgXCJoaWdoZXIgbXVsdGlwbGVcIiBpcyBwaWNrZWQsIHdoaWNoIGlzIG9idmlvdXNseVxuICAgICAgICAvLyB1bmludGVuZGVkLlxuICAgICAgICAvLyBFLmcuIDEgKiBsb2coMSAvIDMgKSBkb2Vzbid0IG1hdGNoIGxvZyggMyApIEJVVFxuICAgICAgICAvLyBpdCBtYXRjaGVzIC01ICogbG9nKCAzICkgLyA1XG4gICAgICAgIC8vIHNvIHdlIGF2b2lkIGFueSBjYXNlIHdoZXJlIHRoZSBtdWx0aXBsaWVyIGlzIGEgbXVsdGlwbGVcbiAgICAgICAgLy8gb2YgdGhlIGRpdmlzb3IuXG4gICAgICAgIGlmIChsaWtlbHlNdWx0aXBsaWVyICE9PSAxICYmIE1hdGguYWJzKE1hdGguZmxvb3IobGlrZWx5TXVsdGlwbGllciAvIGopKSA9PT0gTWF0aC5hYnMobGlrZWx5TXVsdGlwbGllciAvIGopKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIDwgMi4yICogcHJlY2lzaW9uKSB7XG4gICAgICAgICAgY29tcGxleGl0eSA9IHNpbXBsZUNvbXBsZXhpdHlNZWFzdXJlKGxpa2VseU11bHRpcGxpZXIsIGksIGopO1xuICAgICAgICAgIGlmIChjb21wbGV4aXR5IDwgbWluaW11bUNvbXBsZXhpdHkpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgXCJNSU5JTVVNIE1VTFRJUExJRVIgU08gRkFSXCJcbiAgICAgICAgICAgIG1pbmltdW1Db21wbGV4aXR5ID0gY29tcGxleGl0eTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGxpa2VseU11bHRpcGxpZXIgKyBcIiAqIGxvZyggXCIgKyBpICsgXCIgKSAvIFwiICsgajtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgcmVzdWx0ICsgXCIgZXJyb3I6IFwiICsgZXJyb3JcbiAgICAgICAgICAgIGJlc3RSZXN1bHRTb0ZhciA9IFtyZXN1bHQsIGFwcHJveF9yYXRpb25hbHNPZkxvZ2FyaXRobXMsIGxpa2VseU11bHRpcGxpZXIsIGksIGpdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmVzdFJlc3VsdFNvRmFyO1xuICB9O1xuXG4gIGFwcHJveExvZ3NPZlJhdGlvbmFscyA9IGZ1bmN0aW9uKHRoZUZsb2F0KSB7XG4gICAgdmFyIGJlc3RSZXN1bHRTb0ZhciwgY29tcGxleGl0eSwgZXJyb3IsIGh5cG90aGVzaXMsIGksIGkxLCBqLCBsaWtlbHlNdWx0aXBsaWVyLCBtaW5pbXVtQ29tcGxleGl0eSwgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCwgbywgcHJlY2lzaW9uLCByYXRpbywgcmVzdWx0LCBzcGxpdEJlZm9yZUFuZEFmdGVyRG90O1xuICAgIHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QgPSB0aGVGbG9hdC50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcbiAgICBpZiAoc3BsaXRCZWZvcmVBbmRBZnRlckRvdC5sZW5ndGggPT09IDIpIHtcbiAgICAgIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QgPSBzcGxpdEJlZm9yZUFuZEFmdGVyRG90WzFdLmxlbmd0aDtcbiAgICAgIHByZWNpc2lvbiA9IDEgLyBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXCJcIiArIE1hdGguZmxvb3IodGhlRmxvYXQpLCBhcHByb3hfanVzdF9hbl9pbnRlZ2VyLCBNYXRoLmZsb29yKHRoZUZsb2F0KSwgMSwgMl07XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwicHJlY2lzaW9uOiBcIiArIHByZWNpc2lvbik7XG4gICAgYmVzdFJlc3VsdFNvRmFyID0gbnVsbDtcbiAgICBtaW5pbXVtQ29tcGxleGl0eSA9IE51bWJlci5NQVhfVkFMVUU7XG4vLyBzaW1wbGUgbG9ncyBvZiByYXRpb25hbHNcbiAgICBmb3IgKGkgPSBvID0gMTsgbyA8PSA1OyBpID0gKytvKSB7XG4gICAgICBmb3IgKGogPSBpMSA9IDE7IGkxIDw9IDU7IGogPSArK2kxKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2cgIFwiaSxqOiBcIiArIGkgKyBcIixcIiArIGpcbiAgICAgICAgaHlwb3RoZXNpcyA9IE1hdGgubG9nKGkgLyBqKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJoeXBvdGhlc2lzOiBcIiArIGh5cG90aGVzaXNcbiAgICAgICAgaWYgKE1hdGguYWJzKGh5cG90aGVzaXMpID4gMWUtMTApIHtcbiAgICAgICAgICByYXRpbyA9IHRoZUZsb2F0IC8gaHlwb3RoZXNpcztcbiAgICAgICAgICBsaWtlbHlNdWx0aXBsaWVyID0gTWF0aC5yb3VuZChyYXRpbyk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJyYXRpbzogXCIgKyByYXRpb1xuICAgICAgICAgIGVycm9yID0gTWF0aC5hYnMoMSAtIHJhdGlvIC8gbGlrZWx5TXVsdGlwbGllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmF0aW8gPSAxO1xuICAgICAgICAgIGxpa2VseU11bHRpcGxpZXIgPSAxO1xuICAgICAgICAgIGVycm9yID0gTWF0aC5hYnModGhlRmxvYXQgLSBoeXBvdGhlc2lzKTtcbiAgICAgICAgfVxuICAgICAgICAvL2NvbnNvbGUubG9nICBcImVycm9yOiBcIiArIGVycm9yXG4gICAgICAgIGlmIChlcnJvciA8IDEuOTYgKiBwcmVjaXNpb24pIHtcbiAgICAgICAgICBjb21wbGV4aXR5ID0gc2ltcGxlQ29tcGxleGl0eU1lYXN1cmUobGlrZWx5TXVsdGlwbGllciwgaSwgaik7XG4gICAgICAgICAgaWYgKGNvbXBsZXhpdHkgPCBtaW5pbXVtQ29tcGxleGl0eSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyBcIk1JTklNVU0gTVVMVElQTElFUiBTTyBGQVJcIlxuICAgICAgICAgICAgbWluaW11bUNvbXBsZXhpdHkgPSBjb21wbGV4aXR5O1xuICAgICAgICAgICAgcmVzdWx0ID0gbGlrZWx5TXVsdGlwbGllciArIFwiICogbG9nKCBcIiArIGkgKyBcIiAvIFwiICsgaiArIFwiIClcIjtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgcmVzdWx0ICsgXCIgZXJyb3I6IFwiICsgZXJyb3JcbiAgICAgICAgICAgIGJlc3RSZXN1bHRTb0ZhciA9IFtyZXN1bHQsIGFwcHJveF9sb2dhcml0aG1zT2ZSYXRpb25hbHMsIGxpa2VseU11bHRpcGxpZXIsIGksIGpdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmVzdFJlc3VsdFNvRmFyO1xuICB9O1xuXG4gIGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFID0gZnVuY3Rpb24odGhlRmxvYXQpIHtcbiAgICB2YXIgYmVzdFJlc3VsdFNvRmFyLCBjb21wbGV4aXR5LCBlcnJvciwgaHlwb3RoZXNpcywgaSwgaTEsIGosIGxpa2VseU11bHRpcGxpZXIsIG1pbmltdW1Db21wbGV4aXR5LCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90LCBvLCBwcmVjaXNpb24sIHJhdGlvLCByZXN1bHQsIHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3Q7XG4gICAgc3BsaXRCZWZvcmVBbmRBZnRlckRvdCA9IHRoZUZsb2F0LnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpO1xuICAgIGlmIChzcGxpdEJlZm9yZUFuZEFmdGVyRG90Lmxlbmd0aCA9PT0gMikge1xuICAgICAgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCA9IHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3RbMV0ubGVuZ3RoO1xuICAgICAgcHJlY2lzaW9uID0gMSAvIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtcIlwiICsgTWF0aC5mbG9vcih0aGVGbG9hdCksIGFwcHJveF9qdXN0X2FuX2ludGVnZXIsIE1hdGguZmxvb3IodGhlRmxvYXQpLCAxLCAyXTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJwcmVjaXNpb246IFwiICsgcHJlY2lzaW9uKTtcbiAgICBiZXN0UmVzdWx0U29GYXIgPSBudWxsO1xuICAgIG1pbmltdW1Db21wbGV4aXR5ID0gTnVtYmVyLk1BWF9WQUxVRTtcbi8vIHNpbXBsZSByYXRpb25hbHMgb2YgYSBmZXcgcG93ZXJzIG9mIGVcbiAgICBmb3IgKGkgPSBvID0gMTsgbyA8PSAyOyBpID0gKytvKSB7XG4gICAgICBmb3IgKGogPSBpMSA9IDE7IGkxIDw9IDEyOyBqID0gKytpMSkge1xuICAgICAgICAvL2NvbnNvbGUubG9nICBcImksajogXCIgKyBpICsgXCIsXCIgKyBqXG4gICAgICAgIGh5cG90aGVzaXMgPSBNYXRoLnBvdyhNYXRoLkUsIGkpIC8gajtcbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJoeXBvdGhlc2lzOiBcIiArIGh5cG90aGVzaXNcbiAgICAgICAgaWYgKE1hdGguYWJzKGh5cG90aGVzaXMpID4gMWUtMTApIHtcbiAgICAgICAgICByYXRpbyA9IHRoZUZsb2F0IC8gaHlwb3RoZXNpcztcbiAgICAgICAgICBsaWtlbHlNdWx0aXBsaWVyID0gTWF0aC5yb3VuZChyYXRpbyk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJyYXRpbzogXCIgKyByYXRpb1xuICAgICAgICAgIGVycm9yID0gTWF0aC5hYnMoMSAtIHJhdGlvIC8gbGlrZWx5TXVsdGlwbGllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmF0aW8gPSAxO1xuICAgICAgICAgIGxpa2VseU11bHRpcGxpZXIgPSAxO1xuICAgICAgICAgIGVycm9yID0gTWF0aC5hYnModGhlRmxvYXQgLSBoeXBvdGhlc2lzKTtcbiAgICAgICAgfVxuICAgICAgICAvL2NvbnNvbGUubG9nICBcImVycm9yOiBcIiArIGVycm9yXG4gICAgICAgIGlmIChlcnJvciA8IDIgKiBwcmVjaXNpb24pIHtcbiAgICAgICAgICBjb21wbGV4aXR5ID0gc2ltcGxlQ29tcGxleGl0eU1lYXN1cmUobGlrZWx5TXVsdGlwbGllciwgaSwgaik7XG4gICAgICAgICAgaWYgKGNvbXBsZXhpdHkgPCBtaW5pbXVtQ29tcGxleGl0eSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyBcIk1JTklNVU0gTVVMVElQTElFUiBTTyBGQVJcIlxuICAgICAgICAgICAgbWluaW11bUNvbXBsZXhpdHkgPSBjb21wbGV4aXR5O1xuICAgICAgICAgICAgcmVzdWx0ID0gbGlrZWx5TXVsdGlwbGllciArIFwiICogKGUgXiBcIiArIGkgKyBcIiApIC8gXCIgKyBqO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyByZXN1bHQgKyBcIiBlcnJvcjogXCIgKyBlcnJvclxuICAgICAgICAgICAgYmVzdFJlc3VsdFNvRmFyID0gW3Jlc3VsdCwgYXBwcm94X3JhdGlvbmFsT2ZFLCBsaWtlbHlNdWx0aXBsaWVyLCBpLCBqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlc3RSZXN1bHRTb0ZhcjtcbiAgfTtcblxuICBhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUEkgPSBmdW5jdGlvbih0aGVGbG9hdCkge1xuICAgIHZhciBiZXN0UmVzdWx0U29GYXIsIGNvbXBsZXhpdHksIGVycm9yLCBoeXBvdGhlc2lzLCBpLCBpMSwgaiwgbGlrZWx5TXVsdGlwbGllciwgbWluaW11bUNvbXBsZXhpdHksIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QsIG8sIHByZWNpc2lvbiwgcmF0aW8sIHJlc3VsdCwgc3BsaXRCZWZvcmVBbmRBZnRlckRvdDtcbiAgICBzcGxpdEJlZm9yZUFuZEFmdGVyRG90ID0gdGhlRmxvYXQudG9TdHJpbmcoKS5zcGxpdChcIi5cIik7XG4gICAgaWYgKHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QubGVuZ3RoID09PSAyKSB7XG4gICAgICBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90ID0gc3BsaXRCZWZvcmVBbmRBZnRlckRvdFsxXS5sZW5ndGg7XG4gICAgICBwcmVjaXNpb24gPSAxIC8gTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW1wiXCIgKyBNYXRoLmZsb29yKHRoZUZsb2F0KSwgYXBwcm94X2p1c3RfYW5faW50ZWdlciwgTWF0aC5mbG9vcih0aGVGbG9hdCksIDEsIDJdO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcInByZWNpc2lvbjogXCIgKyBwcmVjaXNpb24pO1xuICAgIGJlc3RSZXN1bHRTb0ZhciA9IG51bGw7XG4gICAgLy8gaGVyZSB3ZSBkbyBzb21ldGhuZyBhIGxpdHRsZSBzcGVjaWFsOiBzaW5jZVxuICAgIC8vIHRoZSBwb3dlcnMgb2YgcGkgY2FuIGdldCBxdWl0ZSBiaWcsIHRoZXJlIG1pZ2h0XG4gICAgLy8gYmUgbXVsdGlwbGUgaHlwb3RoZXNpcyB3aGVyZSBtb3JlIG9mIHRoZVxuICAgIC8vIG1hZ25pdHVkZSBpcyBzaGlmdGVkIHRvIHRoZSBtdWx0aXBsaWVyLCBhbmQgc29tZVxuICAgIC8vIHdoZXJlIG1vcmUgb2YgdGhlIG1hZ25pdHVkZSBpcyBzaGlmdGVkIHRvd2FyZHMgdGhlXG4gICAgLy8gZXhwb25lbnQgb2YgcGkuIFNvIHdlIHByZWZlciB0aGUgaHlwb3RoZXNlcyB3aXRoIHRoZVxuICAgIC8vIGxvd2VyIG11bHRpcGxpZXIgc2luY2UgaXQncyBsaWtlbHkgdG8gaW5zZXJ0IG1vcmVcbiAgICAvLyBpbmZvcm1hdGlvbi5cbiAgICBtaW5pbXVtQ29tcGxleGl0eSA9IE51bWJlci5NQVhfVkFMVUU7XG4vLyBzaW1wbGUgcmF0aW9uYWxzIG9mIGEgZmV3IHBvd2VycyBvZiBQSVxuICAgIGZvciAoaSA9IG8gPSAxOyBvIDw9IDU7IGkgPSArK28pIHtcbiAgICAgIGZvciAoaiA9IGkxID0gMTsgaTEgPD0gMTI7IGogPSArK2kxKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2cgIFwiaSxqOiBcIiArIGkgKyBcIixcIiArIGpcbiAgICAgICAgaHlwb3RoZXNpcyA9IE1hdGgucG93KE1hdGguUEksIGkpIC8gajtcbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJoeXBvdGhlc2lzOiBcIiArIGh5cG90aGVzaXNcbiAgICAgICAgaWYgKE1hdGguYWJzKGh5cG90aGVzaXMpID4gMWUtMTApIHtcbiAgICAgICAgICByYXRpbyA9IHRoZUZsb2F0IC8gaHlwb3RoZXNpcztcbiAgICAgICAgICBsaWtlbHlNdWx0aXBsaWVyID0gTWF0aC5yb3VuZChyYXRpbyk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJyYXRpbzogXCIgKyByYXRpb1xuICAgICAgICAgIGVycm9yID0gTWF0aC5hYnMoMSAtIHJhdGlvIC8gbGlrZWx5TXVsdGlwbGllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmF0aW8gPSAxO1xuICAgICAgICAgIGxpa2VseU11bHRpcGxpZXIgPSAxO1xuICAgICAgICAgIGVycm9yID0gTWF0aC5hYnModGhlRmxvYXQgLSBoeXBvdGhlc2lzKTtcbiAgICAgICAgfVxuICAgICAgICAvL2NvbnNvbGUubG9nICBcImVycm9yOiBcIiArIGVycm9yXG4gICAgICAgIGlmIChlcnJvciA8IDIgKiBwcmVjaXNpb24pIHtcbiAgICAgICAgICBjb21wbGV4aXR5ID0gc2ltcGxlQ29tcGxleGl0eU1lYXN1cmUobGlrZWx5TXVsdGlwbGllciwgaSwgaik7XG4gICAgICAgICAgaWYgKGNvbXBsZXhpdHkgPCBtaW5pbXVtQ29tcGxleGl0eSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyBcIk1JTklNVU0gTVVMVElQTElFUiBTTyBGQVJcIlxuICAgICAgICAgICAgbWluaW11bUNvbXBsZXhpdHkgPSBjb21wbGV4aXR5O1xuICAgICAgICAgICAgcmVzdWx0ID0gbGlrZWx5TXVsdGlwbGllciArIFwiICogKHBpIF4gXCIgKyBpICsgXCIgKSAvIFwiICsgaiArIFwiIClcIjtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgcmVzdWx0ICsgXCIgZXJyb3I6IFwiICsgZXJyb3JcbiAgICAgICAgICAgIGJlc3RSZXN1bHRTb0ZhciA9IFtyZXN1bHQsIGFwcHJveF9yYXRpb25hbE9mUGksIGxpa2VseU11bHRpcGxpZXIsIGksIGpdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvL2NvbnNvbGUubG9nIFwiYXBwcm94UmF0aW9uYWxzT2ZQb3dlcnNPZlBJIHJldHVybmluZzogXCIgKyBiZXN0UmVzdWx0U29GYXJcbiAgICByZXR1cm4gYmVzdFJlc3VsdFNvRmFyO1xuICB9O1xuXG4gIGFwcHJveFRyaWdvbm9tZXRyaWMgPSBmdW5jdGlvbih0aGVGbG9hdCkge1xuICAgIHZhciBhcHByb3hTaW5lT2ZSYXRpb25hbE11bHRpcGxlc09mUElSZXN1bHQsIGFwcHJveFNpbmVPZlJhdGlvbmFsc1Jlc3VsdCwgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCwgcHJlY2lzaW9uLCBzcGxpdEJlZm9yZUFuZEFmdGVyRG90O1xuICAgIHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QgPSB0aGVGbG9hdC50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcbiAgICBpZiAoc3BsaXRCZWZvcmVBbmRBZnRlckRvdC5sZW5ndGggPT09IDIpIHtcbiAgICAgIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QgPSBzcGxpdEJlZm9yZUFuZEFmdGVyRG90WzFdLmxlbmd0aDtcbiAgICAgIHByZWNpc2lvbiA9IDEgLyBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXCJcIiArIE1hdGguZmxvb3IodGhlRmxvYXQpLCBhcHByb3hfanVzdF9hbl9pbnRlZ2VyLCBNYXRoLmZsb29yKHRoZUZsb2F0KSwgMSwgMl07XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwicHJlY2lzaW9uOiBcIiArIHByZWNpc2lvbik7XG4gICAgLy8gd2UgYWx3YXlzIHByZWZlciBhIHNpbiBvZiBhIHJhdGlvbmFsIHdpdGhvdXQgdGhlIFBJXG4gICAgYXBwcm94U2luZU9mUmF0aW9uYWxzUmVzdWx0ID0gYXBwcm94U2luZU9mUmF0aW9uYWxzKHRoZUZsb2F0KTtcbiAgICBpZiAoYXBwcm94U2luZU9mUmF0aW9uYWxzUmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBhcHByb3hTaW5lT2ZSYXRpb25hbHNSZXN1bHQ7XG4gICAgfVxuICAgIGFwcHJveFNpbmVPZlJhdGlvbmFsTXVsdGlwbGVzT2ZQSVJlc3VsdCA9IGFwcHJveFNpbmVPZlJhdGlvbmFsTXVsdGlwbGVzT2ZQSSh0aGVGbG9hdCk7XG4gICAgaWYgKGFwcHJveFNpbmVPZlJhdGlvbmFsTXVsdGlwbGVzT2ZQSVJlc3VsdCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gYXBwcm94U2luZU9mUmF0aW9uYWxNdWx0aXBsZXNPZlBJUmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBhcHByb3hTaW5lT2ZSYXRpb25hbHMgPSBmdW5jdGlvbih0aGVGbG9hdCkge1xuICAgIHZhciBiZXN0UmVzdWx0U29GYXIsIGNvbXBsZXhpdHksIGVycm9yLCBmcmFjdGlvbiwgaHlwb3RoZXNpcywgaSwgaTEsIGosIGxpa2VseU11bHRpcGxpZXIsIG1pbmltdW1Db21wbGV4aXR5LCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90LCBvLCBwcmVjaXNpb24sIHJhdGlvLCByZXN1bHQsIHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3Q7XG4gICAgc3BsaXRCZWZvcmVBbmRBZnRlckRvdCA9IHRoZUZsb2F0LnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpO1xuICAgIGlmIChzcGxpdEJlZm9yZUFuZEFmdGVyRG90Lmxlbmd0aCA9PT0gMikge1xuICAgICAgbnVtYmVyT2ZEaWdpdHNBZnRlclRoZURvdCA9IHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3RbMV0ubGVuZ3RoO1xuICAgICAgcHJlY2lzaW9uID0gMSAvIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtcIlwiICsgTWF0aC5mbG9vcih0aGVGbG9hdCksIGFwcHJveF9qdXN0X2FuX2ludGVnZXIsIE1hdGguZmxvb3IodGhlRmxvYXQpLCAxLCAyXTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJwcmVjaXNpb246IFwiICsgcHJlY2lzaW9uKTtcbiAgICBiZXN0UmVzdWx0U29GYXIgPSBudWxsO1xuICAgIG1pbmltdW1Db21wbGV4aXR5ID0gTnVtYmVyLk1BWF9WQUxVRTtcbi8vIHdlIG9ubHkgY2hlY2sgdmVyeSBzaW1wbGUgcmF0aW9uYWxzIGJlY2F1c2UgdGhleSBiZWdpbiB0byBnZXQgdHJpY2t5XG4vLyBxdWlja2x5LCBhbHNvIHRoZXkgY29sbGlkZSBvZnRlbiB3aXRoIHRoZSBcInJhdGlvbmFsIG9mIHBpXCIgaHlwb3RoZXNpcy5cbi8vIEZvciBleGFtcGxlIHNpbigxMSkgaXMgdmVlZXJ5IGNsb3NlIHRvIDEgKC0wLjk5OTk5MDIwNjU1KVxuLy8gKHNlZTogaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9BbG1vc3RJbnRlZ2VyLmh0bWwgKVxuLy8gd2Ugc3RvcCBhdCByYXRpb25hbHMgdGhhdCBtZW50aW9uIHVwIHRvIDEwXG4gICAgZm9yIChpID0gbyA9IDE7IG8gPD0gNDsgaSA9ICsrbykge1xuICAgICAgZm9yIChqID0gaTEgPSAxOyBpMSA8PSA0OyBqID0gKytpMSkge1xuICAgICAgICAvL2NvbnNvbGUubG9nICBcImksajogXCIgKyBpICsgXCIsXCIgKyBqXG4gICAgICAgIGZyYWN0aW9uID0gaSAvIGo7XG4gICAgICAgIGh5cG90aGVzaXMgPSBNYXRoLnNpbihmcmFjdGlvbik7XG4gICAgICAgIC8vY29uc29sZS5sb2cgIFwiaHlwb3RoZXNpczogXCIgKyBoeXBvdGhlc2lzXG4gICAgICAgIGlmIChNYXRoLmFicyhoeXBvdGhlc2lzKSA+IDFlLTEwKSB7XG4gICAgICAgICAgcmF0aW8gPSB0aGVGbG9hdCAvIGh5cG90aGVzaXM7XG4gICAgICAgICAgbGlrZWx5TXVsdGlwbGllciA9IE1hdGgucm91bmQocmF0aW8pO1xuICAgICAgICAgIC8vY29uc29sZS5sb2cgIFwicmF0aW86IFwiICsgcmF0aW9cbiAgICAgICAgICBlcnJvciA9IE1hdGguYWJzKDEgLSByYXRpbyAvIGxpa2VseU11bHRpcGxpZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhdGlvID0gMTtcbiAgICAgICAgICBsaWtlbHlNdWx0aXBsaWVyID0gMTtcbiAgICAgICAgICBlcnJvciA9IE1hdGguYWJzKHRoZUZsb2F0IC0gaHlwb3RoZXNpcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJlcnJvcjogXCIgKyBlcnJvclxuICAgICAgICBpZiAoZXJyb3IgPCAyICogcHJlY2lzaW9uKSB7XG4gICAgICAgICAgY29tcGxleGl0eSA9IHNpbXBsZUNvbXBsZXhpdHlNZWFzdXJlKGxpa2VseU11bHRpcGxpZXIsIGksIGopO1xuICAgICAgICAgIGlmIChjb21wbGV4aXR5IDwgbWluaW11bUNvbXBsZXhpdHkpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgXCJNSU5JTVVNIE1VTFRJUExJRVIgU08gRkFSXCJcbiAgICAgICAgICAgIG1pbmltdW1Db21wbGV4aXR5ID0gY29tcGxleGl0eTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGxpa2VseU11bHRpcGxpZXIgKyBcIiAqIHNpbiggXCIgKyBpICsgXCIvXCIgKyBqICsgXCIgKVwiO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyByZXN1bHQgKyBcIiBlcnJvcjogXCIgKyBlcnJvclxuICAgICAgICAgICAgYmVzdFJlc3VsdFNvRmFyID0gW3Jlc3VsdCwgYXBwcm94X3NpbmVfb2ZfcmF0aW9uYWwsIGxpa2VseU11bHRpcGxpZXIsIGksIGpdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmVzdFJlc3VsdFNvRmFyO1xuICB9O1xuXG4gIGFwcHJveFNpbmVPZlJhdGlvbmFsTXVsdGlwbGVzT2ZQSSA9IGZ1bmN0aW9uKHRoZUZsb2F0KSB7XG4gICAgdmFyIGJlc3RSZXN1bHRTb0ZhciwgY29tcGxleGl0eSwgZXJyb3IsIGZyYWN0aW9uLCBoeXBvdGhlc2lzLCBpLCBpMSwgaiwgbGlrZWx5TXVsdGlwbGllciwgbWluaW11bUNvbXBsZXhpdHksIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QsIG8sIHByZWNpc2lvbiwgcmF0aW8sIHJlc3VsdCwgc3BsaXRCZWZvcmVBbmRBZnRlckRvdDtcbiAgICBzcGxpdEJlZm9yZUFuZEFmdGVyRG90ID0gdGhlRmxvYXQudG9TdHJpbmcoKS5zcGxpdChcIi5cIik7XG4gICAgaWYgKHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QubGVuZ3RoID09PSAyKSB7XG4gICAgICBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90ID0gc3BsaXRCZWZvcmVBbmRBZnRlckRvdFsxXS5sZW5ndGg7XG4gICAgICBwcmVjaXNpb24gPSAxIC8gTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW1wiXCIgKyBNYXRoLmZsb29yKHRoZUZsb2F0KSwgYXBwcm94X2p1c3RfYW5faW50ZWdlciwgTWF0aC5mbG9vcih0aGVGbG9hdCksIDEsIDJdO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcInByZWNpc2lvbjogXCIgKyBwcmVjaXNpb24pO1xuICAgIGJlc3RSZXN1bHRTb0ZhciA9IG51bGw7XG4gICAgbWluaW11bUNvbXBsZXhpdHkgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuLy8gY2hlY2sgcmF0aW9uYWwgbXVsdGlwbGVzIG9mIHBpXG4gICAgZm9yIChpID0gbyA9IDE7IG8gPD0gMTM7IGkgPSArK28pIHtcbiAgICAgIGZvciAoaiA9IGkxID0gMTsgaTEgPD0gMTM7IGogPSArK2kxKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2cgIFwiaSxqOiBcIiArIGkgKyBcIixcIiArIGpcbiAgICAgICAgZnJhY3Rpb24gPSBpIC8gajtcbiAgICAgICAgaHlwb3RoZXNpcyA9IE1hdGguc2luKE1hdGguUEkgKiBmcmFjdGlvbik7XG4gICAgICAgIC8vY29uc29sZS5sb2cgIFwiaHlwb3RoZXNpczogXCIgKyBoeXBvdGhlc2lzXG4gICAgICAgIGlmIChNYXRoLmFicyhoeXBvdGhlc2lzKSA+IDFlLTEwKSB7XG4gICAgICAgICAgcmF0aW8gPSB0aGVGbG9hdCAvIGh5cG90aGVzaXM7XG4gICAgICAgICAgbGlrZWx5TXVsdGlwbGllciA9IE1hdGgucm91bmQocmF0aW8pO1xuICAgICAgICAgIC8vY29uc29sZS5sb2cgIFwicmF0aW86IFwiICsgcmF0aW9cbiAgICAgICAgICBlcnJvciA9IE1hdGguYWJzKDEgLSByYXRpbyAvIGxpa2VseU11bHRpcGxpZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhdGlvID0gMTtcbiAgICAgICAgICBsaWtlbHlNdWx0aXBsaWVyID0gMTtcbiAgICAgICAgICBlcnJvciA9IE1hdGguYWJzKHRoZUZsb2F0IC0gaHlwb3RoZXNpcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyAgXCJlcnJvcjogXCIgKyBlcnJvclxuICAgICAgICAvLyBtYWdpYyBudW1iZXIgMjMgY29tZXMgZnJvbSB0aGUgY2FzZSBzaW4ocGkvMTApXG4gICAgICAgIGlmIChlcnJvciA8IDIzICogcHJlY2lzaW9uKSB7XG4gICAgICAgICAgY29tcGxleGl0eSA9IHNpbXBsZUNvbXBsZXhpdHlNZWFzdXJlKGxpa2VseU11bHRpcGxpZXIsIGksIGopO1xuICAgICAgICAgIGlmIChjb21wbGV4aXR5IDwgbWluaW11bUNvbXBsZXhpdHkpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgXCJNSU5JTVVNIE1VTFRJUExJRVIgU08gRkFSXCJcbiAgICAgICAgICAgIG1pbmltdW1Db21wbGV4aXR5ID0gY29tcGxleGl0eTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGxpa2VseU11bHRpcGxpZXIgKyBcIiAqIHNpbiggXCIgKyBpICsgXCIvXCIgKyBqICsgXCIgKiBwaSApXCI7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nIHJlc3VsdCArIFwiIGVycm9yOiBcIiArIGVycm9yXG4gICAgICAgICAgICBiZXN0UmVzdWx0U29GYXIgPSBbcmVzdWx0LCBhcHByb3hfc2luZV9vZl9waV90aW1lc19yYXRpb25hbCwgbGlrZWx5TXVsdGlwbGllciwgaSwgal07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0UmVzdWx0U29GYXI7XG4gIH07XG5cbiAgYXBwcm94QWxsID0gZnVuY3Rpb24odGhlRmxvYXQpIHtcbiAgICB2YXIgTE9HX0VYUExBTkFUSU9OUywgYXBwcm94TG9nc1Jlc3VsdCwgYXBwcm94UmFkaWNhbHNSZXN1bHQsIGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFUmVzdWx0LCBhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUElSZXN1bHQsIGFwcHJveFRyaWdvbm9tZXRyaWNSZXN1bHQsIGJlc3RBcHByb3hTb0ZhciwgY29uc3RhbnRzU3VtLCBjb25zdGFudHNTdW1NaW4sIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QsIHByZWNpc2lvbiwgc3BsaXRCZWZvcmVBbmRBZnRlckRvdDtcbiAgICBzcGxpdEJlZm9yZUFuZEFmdGVyRG90ID0gdGhlRmxvYXQudG9TdHJpbmcoKS5zcGxpdChcIi5cIik7XG4gICAgaWYgKHNwbGl0QmVmb3JlQW5kQWZ0ZXJEb3QubGVuZ3RoID09PSAyKSB7XG4gICAgICBudW1iZXJPZkRpZ2l0c0FmdGVyVGhlRG90ID0gc3BsaXRCZWZvcmVBbmRBZnRlckRvdFsxXS5sZW5ndGg7XG4gICAgICBwcmVjaXNpb24gPSAxIC8gTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzQWZ0ZXJUaGVEb3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW1wiXCIgKyBNYXRoLmZsb29yKHRoZUZsb2F0KSwgYXBwcm94X2p1c3RfYW5faW50ZWdlciwgTWF0aC5mbG9vcih0aGVGbG9hdCksIDEsIDJdO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcInByZWNpc2lvbjogXCIgKyBwcmVjaXNpb24pO1xuICAgIGNvbnN0YW50c1N1bU1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgY29uc3RhbnRzU3VtID0gMDtcbiAgICBiZXN0QXBwcm94U29GYXIgPSBudWxsO1xuICAgIExPR19FWFBMQU5BVElPTlMgPSB0cnVlO1xuICAgIGFwcHJveFJhZGljYWxzUmVzdWx0ID0gYXBwcm94UmFkaWNhbHModGhlRmxvYXQpO1xuICAgIGlmIChhcHByb3hSYWRpY2Fsc1Jlc3VsdCAhPSBudWxsKSB7XG4gICAgICBjb25zdGFudHNTdW0gPSBzaW1wbGVDb21wbGV4aXR5TWVhc3VyZShhcHByb3hSYWRpY2Fsc1Jlc3VsdCk7XG4gICAgICBpZiAoY29uc3RhbnRzU3VtIDwgY29uc3RhbnRzU3VtTWluKSB7XG4gICAgICAgIGlmIChMT0dfRVhQTEFOQVRJT05TKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJiZXR0ZXIgZXhwbGFuYXRpb24gYnkgYXBwcm94UmFkaWNhbHM6IFwiICsgYXBwcm94UmFkaWNhbHNSZXN1bHQgKyBcIiBjb21wbGV4aXR5OiBcIiArIGNvbnN0YW50c1N1bSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RhbnRzU3VtTWluID0gY29uc3RhbnRzU3VtO1xuICAgICAgICBiZXN0QXBwcm94U29GYXIgPSBhcHByb3hSYWRpY2Fsc1Jlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChMT0dfRVhQTEFOQVRJT05TKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJzdWJwYXIgZXhwbGFuYXRpb24gYnkgYXBwcm94UmFkaWNhbHM6IFwiICsgYXBwcm94UmFkaWNhbHNSZXN1bHQgKyBcIiBjb21wbGV4aXR5OiBcIiArIGNvbnN0YW50c1N1bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXBwcm94TG9nc1Jlc3VsdCA9IGFwcHJveExvZ3ModGhlRmxvYXQpO1xuICAgIGlmIChhcHByb3hMb2dzUmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIGNvbnN0YW50c1N1bSA9IHNpbXBsZUNvbXBsZXhpdHlNZWFzdXJlKGFwcHJveExvZ3NSZXN1bHQpO1xuICAgICAgaWYgKGNvbnN0YW50c1N1bSA8IGNvbnN0YW50c1N1bU1pbikge1xuICAgICAgICBpZiAoTE9HX0VYUExBTkFUSU9OUykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiYmV0dGVyIGV4cGxhbmF0aW9uIGJ5IGFwcHJveExvZ3M6IFwiICsgYXBwcm94TG9nc1Jlc3VsdCArIFwiIGNvbXBsZXhpdHk6IFwiICsgY29uc3RhbnRzU3VtKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdGFudHNTdW1NaW4gPSBjb25zdGFudHNTdW07XG4gICAgICAgIGJlc3RBcHByb3hTb0ZhciA9IGFwcHJveExvZ3NSZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoTE9HX0VYUExBTkFUSU9OUykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic3VicGFyIGV4cGxhbmF0aW9uIGJ5IGFwcHJveExvZ3M6IFwiICsgYXBwcm94TG9nc1Jlc3VsdCArIFwiIGNvbXBsZXhpdHk6IFwiICsgY29uc3RhbnRzU3VtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mRVJlc3VsdCA9IGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFKHRoZUZsb2F0KTtcbiAgICBpZiAoYXBwcm94UmF0aW9uYWxzT2ZQb3dlcnNPZkVSZXN1bHQgIT0gbnVsbCkge1xuICAgICAgY29uc3RhbnRzU3VtID0gc2ltcGxlQ29tcGxleGl0eU1lYXN1cmUoYXBwcm94UmF0aW9uYWxzT2ZQb3dlcnNPZkVSZXN1bHQpO1xuICAgICAgaWYgKGNvbnN0YW50c1N1bSA8IGNvbnN0YW50c1N1bU1pbikge1xuICAgICAgICBpZiAoTE9HX0VYUExBTkFUSU9OUykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiYmV0dGVyIGV4cGxhbmF0aW9uIGJ5IGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFOiBcIiArIGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFUmVzdWx0ICsgXCIgY29tcGxleGl0eTogXCIgKyBjb25zdGFudHNTdW0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0YW50c1N1bU1pbiA9IGNvbnN0YW50c1N1bTtcbiAgICAgICAgYmVzdEFwcHJveFNvRmFyID0gYXBwcm94UmF0aW9uYWxzT2ZQb3dlcnNPZkVSZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoTE9HX0VYUExBTkFUSU9OUykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic3VicGFyIGV4cGxhbmF0aW9uIGJ5IGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFOiBcIiArIGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFUmVzdWx0ICsgXCIgY29tcGxleGl0eTogXCIgKyBjb25zdGFudHNTdW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZQSVJlc3VsdCA9IGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZQSSh0aGVGbG9hdCk7XG4gICAgaWYgKGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZQSVJlc3VsdCAhPSBudWxsKSB7XG4gICAgICBjb25zdGFudHNTdW0gPSBzaW1wbGVDb21wbGV4aXR5TWVhc3VyZShhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUElSZXN1bHQpO1xuICAgICAgaWYgKGNvbnN0YW50c1N1bSA8IGNvbnN0YW50c1N1bU1pbikge1xuICAgICAgICBpZiAoTE9HX0VYUExBTkFUSU9OUykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiYmV0dGVyIGV4cGxhbmF0aW9uIGJ5IGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZQSTogXCIgKyBhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUElSZXN1bHQgKyBcIiBjb21wbGV4aXR5OiBcIiArIGNvbnN0YW50c1N1bSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RhbnRzU3VtTWluID0gY29uc3RhbnRzU3VtO1xuICAgICAgICBiZXN0QXBwcm94U29GYXIgPSBhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUElSZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoTE9HX0VYUExBTkFUSU9OUykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic3VicGFyIGV4cGxhbmF0aW9uIGJ5IGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZQSTogXCIgKyBhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUElSZXN1bHQgKyBcIiBjb21wbGV4aXR5OiBcIiArIGNvbnN0YW50c1N1bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXBwcm94VHJpZ29ub21ldHJpY1Jlc3VsdCA9IGFwcHJveFRyaWdvbm9tZXRyaWModGhlRmxvYXQpO1xuICAgIGlmIChhcHByb3hUcmlnb25vbWV0cmljUmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIGNvbnN0YW50c1N1bSA9IHNpbXBsZUNvbXBsZXhpdHlNZWFzdXJlKGFwcHJveFRyaWdvbm9tZXRyaWNSZXN1bHQpO1xuICAgICAgaWYgKGNvbnN0YW50c1N1bSA8IGNvbnN0YW50c1N1bU1pbikge1xuICAgICAgICBpZiAoTE9HX0VYUExBTkFUSU9OUykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiYmV0dGVyIGV4cGxhbmF0aW9uIGJ5IGFwcHJveFRyaWdvbm9tZXRyaWM6IFwiICsgYXBwcm94VHJpZ29ub21ldHJpY1Jlc3VsdCArIFwiIGNvbXBsZXhpdHk6IFwiICsgY29uc3RhbnRzU3VtKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdGFudHNTdW1NaW4gPSBjb25zdGFudHNTdW07XG4gICAgICAgIGJlc3RBcHByb3hTb0ZhciA9IGFwcHJveFRyaWdvbm9tZXRyaWNSZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoTE9HX0VYUExBTkFUSU9OUykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic3VicGFyIGV4cGxhbmF0aW9uIGJ5IGFwcHJveFRyaWdvbm9tZXRyaWM6IFwiICsgYXBwcm94VHJpZ29ub21ldHJpY1Jlc3VsdCArIFwiIGNvbXBsZXhpdHk6IFwiICsgY29uc3RhbnRzU3VtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmVzdEFwcHJveFNvRmFyO1xuICB9O1xuXG4gIHNpbXBsZUNvbXBsZXhpdHlNZWFzdXJlID0gZnVuY3Rpb24oYVJlc3VsdCwgYiwgYykge1xuICAgIHZhciB0aGVTdW07XG4gICAgdGhlU3VtID0gbnVsbDtcbiAgICBpZiAoYVJlc3VsdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAvLyB3ZSB3YW50IFBJIGFuZCBFIHRvIHNvbWV3aGF0IGluY3JlYXNlIHRoZVxuICAgICAgLy8gY29tcGxleGl0eSBvZiB0aGUgZXhwcmVzc2lvbiwgc28gYmFzaWNhbGx5IHRoZXkgY291bnRcbiAgICAgIC8vIG1vcmUgdGhhbiBhbnkgaW50ZWdlciBsb3dlciB0aGFuIDMsIGkuZS4gd2UgY29uc2lkZXJcbiAgICAgIC8vIDEsMiwzIHRvIGJlIG1vcmUgZnVuZGFtZW50YWwgdGhhbiBQSSBvciBFLlxuICAgICAgc3dpdGNoIChhUmVzdWx0WzFdKSB7XG4gICAgICAgIGNhc2UgYXBwcm94X3NpbmVfb2ZfcGlfdGltZXNfcmF0aW9uYWw6XG4gICAgICAgICAgdGhlU3VtID0gNDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gZXhwb25lbnRzIG9mIFBJIGFuZCBFIG5lZWQgdG8gYmUgcGVuYWxpc2VkIGFzIHdlbGxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZXkgY29tZSB0byBleHBsYWluIGFueSBiaWcgbnVtYmVyXG4gICAgICAgIC8vIHNvIHdlIGNvdW50IHRoZW0ganVzdCBhcyBtdWNoIGFzIHRoZSBtdWx0aXBsaWVyXG4gICAgICAgIGNhc2UgYXBwcm94X3JhdGlvbmFsT2ZQaTpcbiAgICAgICAgICB0aGVTdW0gPSBNYXRoLnBvdyg0LCBNYXRoLmFicyhhUmVzdWx0WzNdKSkgKiBNYXRoLmFicyhhUmVzdWx0WzJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhcHByb3hfcmF0aW9uYWxPZkU6XG4gICAgICAgICAgdGhlU3VtID0gTWF0aC5wb3coMywgTWF0aC5hYnMoYVJlc3VsdFszXSkpICogTWF0aC5hYnMoYVJlc3VsdFsyXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhlU3VtID0gMDtcbiAgICAgIH1cbiAgICAgIHRoZVN1bSArPSBNYXRoLmFicyhhUmVzdWx0WzJdKSAqIChNYXRoLmFicyhhUmVzdWx0WzNdKSArIE1hdGguYWJzKGFSZXN1bHRbNF0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhlU3VtICs9IE1hdGguYWJzKGFSZXN1bHQpICogKE1hdGguYWJzKGIpICsgTWF0aC5hYnMoYykpO1xuICAgIH1cbiAgICBcbiAgICAvLyBoZWF2aWx5IGRpc2NvdW50IHVuaXQgY29uc3RhbnRzXG4gICAgaWYgKGFSZXN1bHRbMl0gPT09IDEpIHtcbiAgICAgIHRoZVN1bSAtPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGVTdW0gKz0gMTtcbiAgICB9XG4gICAgaWYgKGFSZXN1bHRbM10gPT09IDEpIHtcbiAgICAgIHRoZVN1bSAtPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGVTdW0gKz0gMTtcbiAgICB9XG4gICAgaWYgKGFSZXN1bHRbNF0gPT09IDEpIHtcbiAgICAgIHRoZVN1bSAtPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGVTdW0gKz0gMTtcbiAgICB9XG4gICAgaWYgKHRoZVN1bSA8IDApIHtcbiAgICAgIHRoZVN1bSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGVTdW07XG4gIH07XG5cbiAgdGVzdEFwcHJveCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlcnJvciwgZnJhY3Rpb24sIGksIGkxLCBpMiwgaTMsIGosIGoxLCBqMiwgajMsIGszLCBsMSwgbDIsIGwzLCBsZW4sIGxlbjEsIGxlbjIsIGxlbjMsIGxlbjQsIGxlbjUsIGxlbjYsIGxlbjcsIG0xLCBtMiwgbTMsIG4xLCBuMiwgbywgbzEsIG8yLCBvcmlnaW5hbFZhbHVlLCBxMSwgcTIsIHIxLCByMiwgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZWY2LCByZWY3LCByZXR1cm5lZCwgcmV0dXJuZWRGcmFjdGlvbiwgcmV0dXJuZWRWYWx1ZSwgczEsIHMyLCB0MSwgdDIsIHUxLCB1MiwgdjEsIHYyLCB2YWx1ZSwgeDEsIHgyLCB6MSwgejI7XG4gICAgcmVmID0gWzIsIDMsIDUsIDYsIDcsIDgsIDEwXTtcbiAgICBmb3IgKG8gPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBvIDwgbGVuOyBvKyspIHtcbiAgICAgIGkgPSByZWZbb107XG4gICAgICByZWYxID0gWzIsIDMsIDUsIDYsIDcsIDgsIDEwXTtcbiAgICAgIGZvciAoaTEgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGkxIDwgbGVuMTsgaTErKykge1xuICAgICAgICBqID0gcmVmMVtpMV07XG4gICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgY29udGludWU7IC8vIHRoaXMgaXMganVzdCAxXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0YXBwcm94UmFkaWNhbHMgdGVzdGluZzogXCIgKyBcIjEgKiBzcXJ0KCBcIiArIGkgKyBcIiApIC8gXCIgKyBqKTtcbiAgICAgICAgZnJhY3Rpb24gPSBpIC8gajtcbiAgICAgICAgdmFsdWUgPSBNYXRoLnNxcnQoaSkgLyBqO1xuICAgICAgICByZXR1cm5lZCA9IGFwcHJveFJhZGljYWxzKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IHJldHVybmVkWzJdICogTWF0aC5zcXJ0KHJldHVybmVkWzNdKSAvIHJldHVybmVkWzRdO1xuICAgICAgICBpZiAoTWF0aC5hYnModmFsdWUgLSByZXR1cm5lZFZhbHVlKSA+IDFlLTE1KSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RhcHByb3hSYWRpY2FsczogXCIgKyBcIjEgKiBzcXJ0KCBcIiArIGkgKyBcIiApIC8gXCIgKyBqICsgXCIgLiBvYnRhaW5lZDogXCIgKyByZXR1cm5lZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmVmMiA9IFsyLCAzLCA1LCA2LCA3LCA4LCAxMF07XG4gICAgZm9yIChqMSA9IDAsIGxlbjIgPSByZWYyLmxlbmd0aDsgajEgPCBsZW4yOyBqMSsrKSB7XG4gICAgICBpID0gcmVmMltqMV07XG4gICAgICByZWYzID0gWzIsIDMsIDUsIDYsIDcsIDgsIDEwXTtcbiAgICAgIGZvciAobDEgPSAwLCBsZW4zID0gcmVmMy5sZW5ndGg7IGwxIDwgbGVuMzsgbDErKykge1xuICAgICAgICBqID0gcmVmM1tsMV07XG4gICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgY29udGludWU7IC8vIHRoaXMgaXMganVzdCAxXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0YXBwcm94UmFkaWNhbHMgdGVzdGluZyB3aXRoIDQgZGlnaXRzOiBcIiArIFwiMSAqIHNxcnQoIFwiICsgaSArIFwiICkgLyBcIiArIGopO1xuICAgICAgICBmcmFjdGlvbiA9IGkgLyBqO1xuICAgICAgICBvcmlnaW5hbFZhbHVlID0gTWF0aC5zcXJ0KGkpIC8gajtcbiAgICAgICAgdmFsdWUgPSBvcmlnaW5hbFZhbHVlLnRvRml4ZWQoNCk7XG4gICAgICAgIHJldHVybmVkID0gYXBwcm94UmFkaWNhbHModmFsdWUpO1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gcmV0dXJuZWRbMl0gKiBNYXRoLnNxcnQocmV0dXJuZWRbM10pIC8gcmV0dXJuZWRbNF07XG4gICAgICAgIGlmIChNYXRoLmFicyhvcmlnaW5hbFZhbHVlIC0gcmV0dXJuZWRWYWx1ZSkgPiAxZS0xNSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCB0ZXN0YXBwcm94UmFkaWNhbHMgd2l0aCA0IGRpZ2l0czogXCIgKyBcIjEgKiBzcXJ0KCBcIiArIGkgKyBcIiApIC8gXCIgKyBqICsgXCIgLiBvYnRhaW5lZDogXCIgKyByZXR1cm5lZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmVmNCA9IFsyLCAzLCA1LCA2LCA3LCA4LCAxMF07XG4gICAgZm9yIChtMSA9IDAsIGxlbjQgPSByZWY0Lmxlbmd0aDsgbTEgPCBsZW40OyBtMSsrKSB7XG4gICAgICBpID0gcmVmNFttMV07XG4gICAgICByZWY1ID0gWzIsIDMsIDUsIDYsIDcsIDgsIDEwXTtcbiAgICAgIGZvciAobjEgPSAwLCBsZW41ID0gcmVmNS5sZW5ndGg7IG4xIDwgbGVuNTsgbjErKykge1xuICAgICAgICBqID0gcmVmNVtuMV07XG4gICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgY29udGludWU7IC8vIHRoaXMgaXMganVzdCAxXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0YXBwcm94UmFkaWNhbHMgdGVzdGluZzogXCIgKyBcIjEgKiBzcXJ0KCBcIiArIGkgKyBcIiAvIFwiICsgaiArIFwiIClcIik7XG4gICAgICAgIGZyYWN0aW9uID0gaSAvIGo7XG4gICAgICAgIHZhbHVlID0gTWF0aC5zcXJ0KGkgLyBqKTtcbiAgICAgICAgcmV0dXJuZWQgPSBhcHByb3hSYWRpY2Fscyh2YWx1ZSk7XG4gICAgICAgIGlmIChyZXR1cm5lZCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IHJldHVybmVkWzJdICogTWF0aC5zcXJ0KHJldHVybmVkWzNdIC8gcmV0dXJuZWRbNF0pO1xuICAgICAgICAgIGlmIChyZXR1cm5lZFsxXSA9PT0gYXBwcm94X3JhZGljYWxPZlJhdGlvICYmIE1hdGguYWJzKHZhbHVlIC0gcmV0dXJuZWRWYWx1ZSkgPiAxZS0xNSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RhcHByb3hSYWRpY2FsczogXCIgKyBcIjEgKiBzcXJ0KCBcIiArIGkgKyBcIiAvIFwiICsgaiArIFwiICkgLiBvYnRhaW5lZDogXCIgKyByZXR1cm5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlZjYgPSBbMSwgMiwgMywgNSwgNiwgNywgOCwgMTBdO1xuICAgIGZvciAobzEgPSAwLCBsZW42ID0gcmVmNi5sZW5ndGg7IG8xIDwgbGVuNjsgbzErKykge1xuICAgICAgaSA9IHJlZjZbbzFdO1xuICAgICAgcmVmNyA9IFsxLCAyLCAzLCA1LCA2LCA3LCA4LCAxMF07XG4gICAgICBmb3IgKHExID0gMCwgbGVuNyA9IHJlZjcubGVuZ3RoOyBxMSA8IGxlbjc7IHExKyspIHtcbiAgICAgICAgaiA9IHJlZjdbcTFdO1xuICAgICAgICBpZiAoaSA9PT0gMSAmJiBqID09PSAxKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0YXBwcm94UmFkaWNhbHMgdGVzdGluZyB3aXRoIDQgZGlnaXRzOjogXCIgKyBcIjEgKiBzcXJ0KCBcIiArIGkgKyBcIiAvIFwiICsgaiArIFwiIClcIik7XG4gICAgICAgIGZyYWN0aW9uID0gaSAvIGo7XG4gICAgICAgIG9yaWdpbmFsVmFsdWUgPSBNYXRoLnNxcnQoaSAvIGopO1xuICAgICAgICB2YWx1ZSA9IG9yaWdpbmFsVmFsdWUudG9GaXhlZCg0KTtcbiAgICAgICAgcmV0dXJuZWQgPSBhcHByb3hSYWRpY2Fscyh2YWx1ZSk7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSByZXR1cm5lZFsyXSAqIE1hdGguc3FydChyZXR1cm5lZFszXSAvIHJldHVybmVkWzRdKTtcbiAgICAgICAgaWYgKHJldHVybmVkWzFdID09PSBhcHByb3hfcmFkaWNhbE9mUmF0aW8gJiYgTWF0aC5hYnMob3JpZ2luYWxWYWx1ZSAtIHJldHVybmVkVmFsdWUpID4gMWUtMTUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdGFwcHJveFJhZGljYWxzIHdpdGggNCBkaWdpdHM6OiBcIiArIFwiMSAqIHNxcnQoIFwiICsgaSArIFwiIC8gXCIgKyBqICsgXCIgKSAuIG9idGFpbmVkOiBcIiArIHJldHVybmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGkgPSByMSA9IDE7IHIxIDw9IDU7IGkgPSArK3IxKSB7XG4gICAgICBmb3IgKGogPSBzMSA9IDE7IHMxIDw9IDU7IGogPSArK3MxKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidGVzdEFwcHJveEFsbCB0ZXN0aW5nOiBcIiArIFwiMSAqIGxvZyhcIiArIGkgKyBcIiApIC8gXCIgKyBqKTtcbiAgICAgICAgZnJhY3Rpb24gPSBpIC8gajtcbiAgICAgICAgdmFsdWUgPSBNYXRoLmxvZyhpKSAvIGo7XG4gICAgICAgIHJldHVybmVkID0gYXBwcm94QWxsKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IHJldHVybmVkWzJdICogTWF0aC5sb2cocmV0dXJuZWRbM10pIC8gcmV0dXJuZWRbNF07XG4gICAgICAgIGlmIChNYXRoLmFicyh2YWx1ZSAtIHJldHVybmVkVmFsdWUpID4gMWUtMTUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogXCIgKyBcIjEgKiBsb2coXCIgKyBpICsgXCIgKSAvIFwiICsgaiArIFwiIC4gb2J0YWluZWQ6IFwiICsgcmV0dXJuZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IHQxID0gMTsgdDEgPD0gNTsgaSA9ICsrdDEpIHtcbiAgICAgIGZvciAoaiA9IHUxID0gMTsgdTEgPD0gNTsgaiA9ICsrdTEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0QXBwcm94QWxsIHRlc3Rpbmcgd2l0aCA0IGRpZ2l0czogXCIgKyBcIjEgKiBsb2coXCIgKyBpICsgXCIgKSAvIFwiICsgaik7XG4gICAgICAgIGZyYWN0aW9uID0gaSAvIGo7XG4gICAgICAgIG9yaWdpbmFsVmFsdWUgPSBNYXRoLmxvZyhpKSAvIGo7XG4gICAgICAgIHZhbHVlID0gb3JpZ2luYWxWYWx1ZS50b0ZpeGVkKDQpO1xuICAgICAgICByZXR1cm5lZCA9IGFwcHJveEFsbCh2YWx1ZSk7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSByZXR1cm5lZFsyXSAqIE1hdGgubG9nKHJldHVybmVkWzNdKSAvIHJldHVybmVkWzRdO1xuICAgICAgICBpZiAoTWF0aC5hYnMob3JpZ2luYWxWYWx1ZSAtIHJldHVybmVkVmFsdWUpID4gMWUtMTUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbCB3aXRoIDQgZGlnaXRzOiBcIiArIFwiMSAqIGxvZyhcIiArIGkgKyBcIiApIC8gXCIgKyBqICsgXCIgLiBvYnRhaW5lZDogXCIgKyByZXR1cm5lZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gdjEgPSAxOyB2MSA8PSA1OyBpID0gKyt2MSkge1xuICAgICAgZm9yIChqID0geDEgPSAxOyB4MSA8PSA1OyBqID0gKyt4MSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRlc3RBcHByb3hBbGwgdGVzdGluZzogXCIgKyBcIjEgKiBsb2coXCIgKyBpICsgXCIgLyBcIiArIGogKyBcIiApXCIpO1xuICAgICAgICBmcmFjdGlvbiA9IGkgLyBqO1xuICAgICAgICB2YWx1ZSA9IE1hdGgubG9nKGkgLyBqKTtcbiAgICAgICAgcmV0dXJuZWQgPSBhcHByb3hBbGwodmFsdWUpO1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gcmV0dXJuZWRbMl0gKiBNYXRoLmxvZyhyZXR1cm5lZFszXSAvIHJldHVybmVkWzRdKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHZhbHVlIC0gcmV0dXJuZWRWYWx1ZSkgPiAxZS0xNSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCB0ZXN0QXBwcm94QWxsOiBcIiArIFwiMSAqIGxvZyhcIiArIGkgKyBcIiAvIFwiICsgaiArIFwiIClcIiArIFwiIC4gb2J0YWluZWQ6IFwiICsgcmV0dXJuZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IHoxID0gMTsgejEgPD0gNTsgaSA9ICsrejEpIHtcbiAgICAgIGZvciAoaiA9IGkyID0gMTsgaTIgPD0gNTsgaiA9ICsraTIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0QXBwcm94QWxsIHRlc3Rpbmcgd2l0aCA0IGRpZ2l0czogXCIgKyBcIjEgKiBsb2coXCIgKyBpICsgXCIgLyBcIiArIGogKyBcIiApXCIpO1xuICAgICAgICBmcmFjdGlvbiA9IGkgLyBqO1xuICAgICAgICBvcmlnaW5hbFZhbHVlID0gTWF0aC5sb2coaSAvIGopO1xuICAgICAgICB2YWx1ZSA9IG9yaWdpbmFsVmFsdWUudG9GaXhlZCg0KTtcbiAgICAgICAgcmV0dXJuZWQgPSBhcHByb3hBbGwodmFsdWUpO1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gcmV0dXJuZWRbMl0gKiBNYXRoLmxvZyhyZXR1cm5lZFszXSAvIHJldHVybmVkWzRdKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG9yaWdpbmFsVmFsdWUgLSByZXR1cm5lZFZhbHVlKSA+IDFlLTE1KSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGwgd2l0aCA0IGRpZ2l0czogXCIgKyBcIjEgKiBsb2coXCIgKyBpICsgXCIgLyBcIiArIGogKyBcIiApXCIgKyBcIiAuIG9idGFpbmVkOiBcIiArIHJldHVybmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGkgPSBqMiA9IDE7IGoyIDw9IDI7IGkgPSArK2oyKSB7XG4gICAgICBmb3IgKGogPSBsMiA9IDE7IGwyIDw9IDEyOyBqID0gKytsMikge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRlc3RBcHByb3hBbGwgdGVzdGluZzogXCIgKyBcIjEgKiAoZSBeIFwiICsgaSArIFwiICkgLyBcIiArIGopO1xuICAgICAgICBmcmFjdGlvbiA9IGkgLyBqO1xuICAgICAgICB2YWx1ZSA9IE1hdGgucG93KE1hdGguRSwgaSkgLyBqO1xuICAgICAgICByZXR1cm5lZCA9IGFwcHJveEFsbCh2YWx1ZSk7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSByZXR1cm5lZFsyXSAqIE1hdGgucG93KE1hdGguRSwgcmV0dXJuZWRbM10pIC8gcmV0dXJuZWRbNF07XG4gICAgICAgIGlmIChNYXRoLmFicyh2YWx1ZSAtIHJldHVybmVkVmFsdWUpID4gMWUtMTUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogXCIgKyBcIjEgKiAoZSBeIFwiICsgaSArIFwiICkgLyBcIiArIGogKyBcIiAuIG9idGFpbmVkOiBcIiArIHJldHVybmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGkgPSBtMiA9IDE7IG0yIDw9IDI7IGkgPSArK20yKSB7XG4gICAgICBmb3IgKGogPSBuMiA9IDE7IG4yIDw9IDEyOyBqID0gKytuMikge1xuICAgICAgICBjb25zb2xlLmxvZyhcImFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFIHRlc3Rpbmcgd2l0aCA0IGRpZ2l0czogXCIgKyBcIjEgKiAoZSBeIFwiICsgaSArIFwiICkgLyBcIiArIGopO1xuICAgICAgICBmcmFjdGlvbiA9IGkgLyBqO1xuICAgICAgICBvcmlnaW5hbFZhbHVlID0gTWF0aC5wb3coTWF0aC5FLCBpKSAvIGo7XG4gICAgICAgIHZhbHVlID0gb3JpZ2luYWxWYWx1ZS50b0ZpeGVkKDQpO1xuICAgICAgICByZXR1cm5lZCA9IGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IHJldHVybmVkWzJdICogTWF0aC5wb3coTWF0aC5FLCByZXR1cm5lZFszXSkgLyByZXR1cm5lZFs0XTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG9yaWdpbmFsVmFsdWUgLSByZXR1cm5lZFZhbHVlKSA+IDFlLTE1KSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsIGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZFIHdpdGggNCBkaWdpdHM6IFwiICsgXCIxICogKGUgXiBcIiArIGkgKyBcIiApIC8gXCIgKyBqICsgXCIgLiBvYnRhaW5lZDogXCIgKyByZXR1cm5lZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gbzIgPSAxOyBvMiA8PSAyOyBpID0gKytvMikge1xuICAgICAgZm9yIChqID0gcTIgPSAxOyBxMiA8PSAxMjsgaiA9ICsrcTIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0QXBwcm94QWxsIHRlc3Rpbmc6IFwiICsgXCIxICogcGkgXiBcIiArIGkgKyBcIiAvIFwiICsgaik7XG4gICAgICAgIGZyYWN0aW9uID0gaSAvIGo7XG4gICAgICAgIHZhbHVlID0gTWF0aC5wb3coTWF0aC5QSSwgaSkgLyBqO1xuICAgICAgICByZXR1cm5lZCA9IGFwcHJveEFsbCh2YWx1ZSk7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSByZXR1cm5lZFsyXSAqIE1hdGgucG93KE1hdGguUEksIHJldHVybmVkWzNdKSAvIHJldHVybmVkWzRdO1xuICAgICAgICBpZiAoTWF0aC5hYnModmFsdWUgLSByZXR1cm5lZFZhbHVlKSA+IDFlLTE1KSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IFwiICsgXCIxICogcGkgXiBcIiArIGkgKyBcIiAvIFwiICsgaiArIFwiICkgLiBvYnRhaW5lZDogXCIgKyByZXR1cm5lZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gcjIgPSAxOyByMiA8PSAyOyBpID0gKytyMikge1xuICAgICAgZm9yIChqID0gczIgPSAxOyBzMiA8PSAxMjsgaiA9ICsrczIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUEkgdGVzdGluZyB3aXRoIDQgZGlnaXRzOiBcIiArIFwiMSAqIHBpIF4gXCIgKyBpICsgXCIgLyBcIiArIGopO1xuICAgICAgICBmcmFjdGlvbiA9IGkgLyBqO1xuICAgICAgICBvcmlnaW5hbFZhbHVlID0gTWF0aC5wb3coTWF0aC5QSSwgaSkgLyBqO1xuICAgICAgICB2YWx1ZSA9IG9yaWdpbmFsVmFsdWUudG9GaXhlZCg0KTtcbiAgICAgICAgcmV0dXJuZWQgPSBhcHByb3hSYXRpb25hbHNPZlBvd2Vyc09mUEkodmFsdWUpO1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gcmV0dXJuZWRbMl0gKiBNYXRoLnBvdyhNYXRoLlBJLCByZXR1cm5lZFszXSkgLyByZXR1cm5lZFs0XTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG9yaWdpbmFsVmFsdWUgLSByZXR1cm5lZFZhbHVlKSA+IDFlLTE1KSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsIGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZQSSB3aXRoIDQgZGlnaXRzOiBcIiArIFwiMSAqIHBpIF4gXCIgKyBpICsgXCIgLyBcIiArIGogKyBcIiApIC4gb2J0YWluZWQ6IFwiICsgcmV0dXJuZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IHQyID0gMTsgdDIgPD0gNDsgaSA9ICsrdDIpIHtcbiAgICAgIGZvciAoaiA9IHUyID0gMTsgdTIgPD0gNDsgaiA9ICsrdTIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0QXBwcm94QWxsIHRlc3Rpbmc6IFwiICsgXCIxICogc2luKCBcIiArIGkgKyBcIi9cIiArIGogKyBcIiApXCIpO1xuICAgICAgICBmcmFjdGlvbiA9IGkgLyBqO1xuICAgICAgICB2YWx1ZSA9IE1hdGguc2luKGZyYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuZWQgPSBhcHByb3hBbGwodmFsdWUpO1xuICAgICAgICByZXR1cm5lZEZyYWN0aW9uID0gcmV0dXJuZWRbM10gLyByZXR1cm5lZFs0XTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IHJldHVybmVkWzJdICogTWF0aC5zaW4ocmV0dXJuZWRGcmFjdGlvbik7XG4gICAgICAgIGlmIChNYXRoLmFicyh2YWx1ZSAtIHJldHVybmVkVmFsdWUpID4gMWUtMTUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogXCIgKyBcIjEgKiBzaW4oIFwiICsgaSArIFwiL1wiICsgaiArIFwiICkgLiBvYnRhaW5lZDogXCIgKyByZXR1cm5lZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4vLyA1IGRpZ2l0cyBjcmVhdGUgbm8gcHJvYmxlbVxuICAgIGZvciAoaSA9IHYyID0gMTsgdjIgPD0gNDsgaSA9ICsrdjIpIHtcbiAgICAgIGZvciAoaiA9IHgyID0gMTsgeDIgPD0gNDsgaiA9ICsreDIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0QXBwcm94QWxsIHRlc3Rpbmcgd2l0aCA1IGRpZ2l0czogXCIgKyBcIjEgKiBzaW4oIFwiICsgaSArIFwiL1wiICsgaiArIFwiIClcIik7XG4gICAgICAgIGZyYWN0aW9uID0gaSAvIGo7XG4gICAgICAgIG9yaWdpbmFsVmFsdWUgPSBNYXRoLnNpbihmcmFjdGlvbik7XG4gICAgICAgIHZhbHVlID0gb3JpZ2luYWxWYWx1ZS50b0ZpeGVkKDUpO1xuICAgICAgICByZXR1cm5lZCA9IGFwcHJveEFsbCh2YWx1ZSk7XG4gICAgICAgIGlmIChyZXR1cm5lZCA9PSBudWxsKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGwgd2l0aCA1IGRpZ2l0czogXCIgKyBcIjEgKiBzaW4oIFwiICsgaSArIFwiL1wiICsgaiArIFwiICkgLiBvYnRhaW5lZDogIHVuZGVmaW5lZCBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuZWRGcmFjdGlvbiA9IHJldHVybmVkWzNdIC8gcmV0dXJuZWRbNF07XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSByZXR1cm5lZFsyXSAqIE1hdGguc2luKHJldHVybmVkRnJhY3Rpb24pO1xuICAgICAgICBlcnJvciA9IE1hdGguYWJzKG9yaWdpbmFsVmFsdWUgLSByZXR1cm5lZFZhbHVlKTtcbiAgICAgICAgaWYgKGVycm9yID4gMWUtMTQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbCB3aXRoIDUgZGlnaXRzOiBcIiArIFwiMSAqIHNpbiggXCIgKyBpICsgXCIvXCIgKyBqICsgXCIgKSAuIG9idGFpbmVkOiBcIiArIHJldHVybmVkICsgXCIgZXJyb3I6IFwiICsgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuLy8gNCBkaWdpdHMgY3JlYXRlIHR3byBjb2xsaXNpb25zXG4gICAgZm9yIChpID0gejIgPSAxOyB6MiA8PSA0OyBpID0gKyt6Mikge1xuICAgICAgZm9yIChqID0gaTMgPSAxOyBpMyA8PSA0OyBqID0gKytpMykge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRlc3RBcHByb3hBbGwgdGVzdGluZyB3aXRoIDQgZGlnaXRzOiBcIiArIFwiMSAqIHNpbiggXCIgKyBpICsgXCIvXCIgKyBqICsgXCIgKVwiKTtcbiAgICAgICAgZnJhY3Rpb24gPSBpIC8gajtcbiAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IE1hdGguc2luKGZyYWN0aW9uKTtcbiAgICAgICAgdmFsdWUgPSBvcmlnaW5hbFZhbHVlLnRvRml4ZWQoNCk7XG4gICAgICAgIHJldHVybmVkID0gYXBwcm94QWxsKHZhbHVlKTtcbiAgICAgICAgaWYgKHJldHVybmVkID09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbCB3aXRoIDQgZGlnaXRzOiBcIiArIFwiMSAqIHNpbiggXCIgKyBpICsgXCIvXCIgKyBqICsgXCIgKSAuIG9idGFpbmVkOiAgdW5kZWZpbmVkIFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5lZEZyYWN0aW9uID0gcmV0dXJuZWRbM10gLyByZXR1cm5lZFs0XTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IHJldHVybmVkWzJdICogTWF0aC5zaW4ocmV0dXJuZWRGcmFjdGlvbik7XG4gICAgICAgIGVycm9yID0gTWF0aC5hYnMob3JpZ2luYWxWYWx1ZSAtIHJldHVybmVkVmFsdWUpO1xuICAgICAgICBpZiAoZXJyb3IgPiAxZS0xNCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCB0ZXN0QXBwcm94QWxsIHdpdGggNCBkaWdpdHM6IFwiICsgXCIxICogc2luKCBcIiArIGkgKyBcIi9cIiArIGogKyBcIiApIC4gb2J0YWluZWQ6IFwiICsgcmV0dXJuZWQgKyBcIiBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFsdWUgPSAwO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjBcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDBcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMC4wO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjBcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDAuMFwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSAwLjAwO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjBcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDAuMDBcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMC4wMDA7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMFwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogMC4wMDBcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMC4wMDAwO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjBcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDAuMDAwMFwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSAxO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDFcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMS4wO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDEuMFwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSAxLjAwO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDEuMDBcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMS4wMDA7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogMS4wMDBcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMS4wMDAwO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDEuMDAwMFwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSAxLjAwMDAwO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDEuMDAwMDBcIik7XG4gICAgfVxuICAgIHZhbHVlID0gTWF0aC5zcXJ0KDIpO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjEgKiBzcXJ0KCAyICkgLyAxXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCB0ZXN0QXBwcm94QWxsOiBNYXRoLnNxcnQoMilcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMS40MTtcbiAgICBpZiAoYXBwcm94QWxsKHZhbHVlKVswXSAhPT0gXCIxICogc3FydCggMiApIC8gMVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogMS40MVwiKTtcbiAgICB9XG4gICAgLy8gaWYgd2UgbmFycm93IGRvd24gdG8gYSBwYXJ0aWN1bGFyIGZhbWlseSB0aGVuIHdlIGNhbiBnZXRcbiAgICAvLyBhbiBPSyBndWVzcyBldmVuIHdpdGggZmV3IGRpZ2l0cywgZXhwZWNpYWxseSBmb3IgcmVhbGx5IFwiZmFtb3VzXCIgbnVtYmVyc1xuICAgIHZhbHVlID0gMS40O1xuICAgIGlmIChhcHByb3hSYWRpY2Fscyh2YWx1ZSlbMF0gIT09IFwiMSAqIHNxcnQoIDIgKSAvIDFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIGFwcHJveFJhZGljYWxzOiAxLjRcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMC42O1xuICAgIGlmIChhcHByb3hMb2dzKHZhbHVlKVswXSAhPT0gXCIxICogbG9nKCAyICkgLyAxXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCBhcHByb3hMb2dzOiAwLjZcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMC42OTtcbiAgICBpZiAoYXBwcm94TG9ncyh2YWx1ZSlbMF0gIT09IFwiMSAqIGxvZyggMiApIC8gMVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgYXBwcm94TG9nczogMC42OVwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSAwLjc7XG4gICAgaWYgKGFwcHJveExvZ3ModmFsdWUpWzBdICE9PSBcIjEgKiBsb2coIDIgKSAvIDFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIGFwcHJveExvZ3M6IDAuN1wiKTtcbiAgICB9XG4gICAgdmFsdWUgPSAxLjA5O1xuICAgIGlmIChhcHByb3hMb2dzKHZhbHVlKVswXSAhPT0gXCIxICogbG9nKCAzICkgLyAxXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCBhcHByb3hMb2dzOiAxLjA5XCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IDEuMDk7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMSAqIGxvZyggMyApIC8gMVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgYXBwcm94QWxsOiAxLjA5XCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IDEuMDk4O1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjEgKiBsb2coIDMgKSAvIDFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIGFwcHJveEFsbDogMS4wOThcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMS4xO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjEgKiBsb2coIDMgKSAvIDFcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIGFwcHJveEFsbDogMS4xXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IDEuMTE7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMSAqIGxvZyggMyApIC8gMVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgYXBwcm94QWxsOiAxLjExXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IE1hdGguc3FydCgzKTtcbiAgICBpZiAoYXBwcm94QWxsKHZhbHVlKVswXSAhPT0gXCIxICogc3FydCggMyApIC8gMVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogTWF0aC5zcXJ0KDMpXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IDEuMDAwMDtcbiAgICBpZiAoYXBwcm94QWxsKHZhbHVlKVswXSAhPT0gXCIxXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCB0ZXN0QXBwcm94QWxsOiAxLjAwMDBcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMy4xNDE1OTI7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMSAqIChwaSBeIDEgKSAvIDEgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogMy4xNDE1OTJcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMzEuNDE1OTI7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMTAgKiAocGkgXiAxICkgLyAxIClcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDMxLjQxNTkyXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IDMxNC4xNTkyO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjEwMCAqIChwaSBeIDEgKSAvIDEgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogMzE0LjE1OTJcIik7XG4gICAgfVxuICAgIHZhbHVlID0gMzE0MTU5MjYuNTM1ODk3OTM7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMTAwMDAwMDAgKiAocGkgXiAxICkgLyAxIClcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IDMxNDE1OTI2LjUzNTg5NzkzXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IE1hdGguc3FydCgyKTtcbiAgICBpZiAoYXBwcm94VHJpZ29ub21ldHJpYyh2YWx1ZSlbMF0gIT09IFwiMiAqIHNpbiggMS80ICogcGkgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgYXBwcm94VHJpZ29ub21ldHJpYzogTWF0aC5zcXJ0KDIpXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IE1hdGguc3FydCgzKTtcbiAgICBpZiAoYXBwcm94VHJpZ29ub21ldHJpYyh2YWx1ZSlbMF0gIT09IFwiMiAqIHNpbiggMS8zICogcGkgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgYXBwcm94VHJpZ29ub21ldHJpYzogTWF0aC5zcXJ0KDMpXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IChNYXRoLnNxcnQoNikgLSBNYXRoLnNxcnQoMikpIC8gNDtcbiAgICBpZiAoYXBwcm94QWxsKHZhbHVlKVswXSAhPT0gXCIxICogc2luKCAxLzEyICogcGkgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogKE1hdGguc3FydCg2KSAtIE1hdGguc3FydCgyKSkvNFwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSBNYXRoLnNxcnQoMiAtIE1hdGguc3FydCgyKSkgLyAyO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjEgKiBzaW4oIDEvOCAqIHBpIClcIikge1xuICAgICAgY29uc29sZS5sb2coXCJmYWlsIHRlc3RBcHByb3hBbGw6IE1hdGguc3FydCgyIC0gTWF0aC5zcXJ0KDIpKS8yXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IChNYXRoLnNxcnQoNikgKyBNYXRoLnNxcnQoMikpIC8gNDtcbiAgICBpZiAoYXBwcm94QWxsKHZhbHVlKVswXSAhPT0gXCIxICogc2luKCA1LzEyICogcGkgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogKE1hdGguc3FydCg2KSArIE1hdGguc3FydCgyKSkvNFwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSBNYXRoLnNxcnQoMiArIE1hdGguc3FydCgzKSkgLyAyO1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjEgKiBzaW4oIDUvMTIgKiBwaSApXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCB0ZXN0QXBwcm94QWxsOiBNYXRoLnNxcnQoMiArIE1hdGguc3FydCgzKSkvMlwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSAoTWF0aC5zcXJ0KDUpIC0gMSkgLyA0O1xuICAgIGlmIChhcHByb3hBbGwodmFsdWUpWzBdICE9PSBcIjEgKiBzaW4oIDEvMTAgKiBwaSApXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCB0ZXN0QXBwcm94QWxsOiAoTWF0aC5zcXJ0KDUpIC0gMSkvNFwiKTtcbiAgICB9XG4gICAgdmFsdWUgPSBNYXRoLnNxcnQoMTAgLSAyICogTWF0aC5zcXJ0KDUpKSAvIDQ7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMSAqIHNpbiggMS81ICogcGkgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogTWF0aC5zcXJ0KDEwIC0gMipNYXRoLnNxcnQoNSkpLzRcIik7XG4gICAgfVxuICAgIC8vIHRoaXMgaGFzIGEgcmFkaWNhbCBmb3JtIGJ1dCBpdCdzIHRvbyBsb25nIHRvIHdyaXRlXG4gICAgdmFsdWUgPSBNYXRoLnNpbihNYXRoLlBJIC8gNyk7XG4gICAgaWYgKGFwcHJveEFsbCh2YWx1ZSlbMF0gIT09IFwiMSAqIHNpbiggMS83ICogcGkgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgdGVzdEFwcHJveEFsbDogTWF0aC5zaW4oTWF0aC5QSS83KVwiKTtcbiAgICB9XG4gICAgLy8gdGhpcyBoYXMgYSByYWRpY2FsIGZvcm0gYnV0IGl0J3MgdG9vIGxvbmcgdG8gd3JpdGVcbiAgICB2YWx1ZSA9IE1hdGguc2luKE1hdGguUEkgLyA5KTtcbiAgICBpZiAoYXBwcm94QWxsKHZhbHVlKVswXSAhPT0gXCIxICogc2luKCAxLzkgKiBwaSApXCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCB0ZXN0QXBwcm94QWxsOiBNYXRoLnNpbihNYXRoLlBJLzkpXCIpO1xuICAgIH1cbiAgICB2YWx1ZSA9IDE4MzYuMTUyNjc7XG4gICAgaWYgKGFwcHJveFJhdGlvbmFsc09mUG93ZXJzT2ZQSSh2YWx1ZSlbMF0gIT09IFwiNiAqIChwaSBeIDUgKSAvIDEgKVwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhaWwgYXBwcm94UmF0aW9uYWxzT2ZQb3dlcnNPZlBJOiAxODM2LjE1MjY3XCIpO1xuICAgIH1cbiAgICBmb3IgKGkgPSBqMyA9IDE7IGozIDw9IDEzOyBpID0gKytqMykge1xuICAgICAgZm9yIChqID0gazMgPSAxOyBrMyA8PSAxMzsgaiA9ICsrazMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJhcHByb3hUcmlnb25vbWV0cmljIHRlc3Rpbmc6IFwiICsgXCIxICogc2luKCBcIiArIGkgKyBcIi9cIiArIGogKyBcIiAqIHBpIClcIik7XG4gICAgICAgIGZyYWN0aW9uID0gaSAvIGo7XG4gICAgICAgIHZhbHVlID0gTWF0aC5zaW4oTWF0aC5QSSAqIGZyYWN0aW9uKTtcbiAgICAgICAgLy8gd2Ugc3BlY2lmaWNhbGx5IHNlYXJjaCBmb3Igc2luZXMgb2YgcmF0aW9uYWwgbXVsdGlwbGVzIG9mIFBJXG4gICAgICAgIC8vIGJlY2F1c2UgdG9vIG1hbnkgb2YgdGhlbSB3b3VsZCBiZSBwaWNrZWQgdXAgYXMgc2ltcGxlXG4gICAgICAgIC8vIHJhdGlvbmFscy5cbiAgICAgICAgcmV0dXJuZWQgPSBhcHByb3hUcmlnb25vbWV0cmljKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuZWRGcmFjdGlvbiA9IHJldHVybmVkWzNdIC8gcmV0dXJuZWRbNF07XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSByZXR1cm5lZFsyXSAqIE1hdGguc2luKE1hdGguUEkgKiByZXR1cm5lZEZyYWN0aW9uKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHZhbHVlIC0gcmV0dXJuZWRWYWx1ZSkgPiAxZS0xNSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbCBhcHByb3hUcmlnb25vbWV0cmljOiBcIiArIFwiMSAqIHNpbiggXCIgKyBpICsgXCIvXCIgKyBqICsgXCIgKiBwaSApIC4gb2J0YWluZWQ6IFwiICsgcmV0dXJuZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoaSA9IGwzID0gMTsgbDMgPD0gMTM7IGkgPSArK2wzKSB7XG4gICAgICBmb3IgKGogPSBtMyA9IDE7IG0zIDw9IDEzOyBqID0gKyttMykge1xuICAgICAgICAvLyB3aXRoIGZvdXIgZGlnaXRzLCB0aGVyZSBhcmUgdHdvIGNvbGxpc2lvbnMgd2l0aCB0aGVcbiAgICAgICAgLy8gXCJzaW1wbGUgZnJhY3Rpb25cIiBhcmd1bWVudCBoeXBvdGVzaXMsIHdoaWNoIHdlIHByZWZlciBzaW5jZVxuICAgICAgICAvLyBpdCdzIGEgc2ltcGxlciBleHByZXNzaW9uLCBzbyBsZXQncyBza2lwIHRob3NlXG4gICAgICAgIC8vIHR3byB0ZXN0c1xuICAgICAgICBpZiAoaSA9PT0gNSAmJiBqID09PSAxMSB8fCBpID09PSA2ICYmIGogPT09IDExKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJhcHByb3hUcmlnb25vbWV0cmljIHRlc3Rpbmcgd2l0aCA0IGRpZ2l0czogXCIgKyBcIjEgKiBzaW4oIFwiICsgaSArIFwiL1wiICsgaiArIFwiICogcGkgKVwiKTtcbiAgICAgICAgZnJhY3Rpb24gPSBpIC8gajtcbiAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IE1hdGguc2luKE1hdGguUEkgKiBmcmFjdGlvbik7XG4gICAgICAgIHZhbHVlID0gb3JpZ2luYWxWYWx1ZS50b0ZpeGVkKDQpO1xuICAgICAgICAvLyB3ZSBzcGVjaWZpY2FsbHkgc2VhcmNoIGZvciBzaW5lcyBvZiByYXRpb25hbCBtdWx0aXBsZXMgb2YgUElcbiAgICAgICAgLy8gYmVjYXVzZSB0b28gbWFueSBvZiB0aGVtIHdvdWxkIGJlIHBpY2tlZCB1cCBhcyBzaW1wbGVcbiAgICAgICAgLy8gcmF0aW9uYWxzLlxuICAgICAgICByZXR1cm5lZCA9IGFwcHJveFRyaWdvbm9tZXRyaWModmFsdWUpO1xuICAgICAgICByZXR1cm5lZEZyYWN0aW9uID0gcmV0dXJuZWRbM10gLyByZXR1cm5lZFs0XTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IHJldHVybmVkWzJdICogTWF0aC5zaW4oTWF0aC5QSSAqIHJldHVybmVkRnJhY3Rpb24pO1xuICAgICAgICBlcnJvciA9IE1hdGguYWJzKG9yaWdpbmFsVmFsdWUgLSByZXR1cm5lZFZhbHVlKTtcbiAgICAgICAgaWYgKGVycm9yID4gMWUtMTQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWwgYXBwcm94VHJpZ29ub21ldHJpYyB3aXRoIDQgZGlnaXRzOiBcIiArIFwiMSAqIHNpbiggXCIgKyBpICsgXCIvXCIgKyBqICsgXCIgKiBwaSApIC4gb2J0YWluZWQ6IFwiICsgcmV0dXJuZWQgKyBcIiBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnNvbGUubG9nKFwidGVzdEFwcHJveCBkb25lXCIpO1xuICB9O1xuXG4gICQuYXBwcm94UmFkaWNhbHMgPSBhcHByb3hSYWRpY2FscztcblxuICAkLmFwcHJveFJhdGlvbmFsc09mTG9ncyA9IGFwcHJveFJhdGlvbmFsc09mTG9ncztcblxuICAkLmFwcHJveEFsbCA9IGFwcHJveEFsbDtcblxuICAkLnRlc3RBcHByb3ggPSB0ZXN0QXBwcm94O1xuXG4gIEV2YWxfYXJjY29zID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBhcmNjb3MoKTtcbiAgfTtcblxuICBhcmNjb3MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZCwgZXJybm8sIG47XG4gICAgbiA9IDA7XG4gICAgZCA9IDAuMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKENPUykpIHtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBlcnJubyA9IDA7XG4gICAgICBkID0gTWF0aC5hY29zKHAxLmQpO1xuICAgICAgaWYgKGVycm5vKSB7XG4gICAgICAgIHN0b3AoXCJhcmNjb3MgZnVuY3Rpb24gYXJndW1lbnQgaXMgbm90IGluIHRoZSBpbnRlcnZhbCBbLTEsMV1cIik7XG4gICAgICB9XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gaWYgcDEgPT0gMS9zcXJ0KDIpIHRoZW4gcmV0dXJuIDEvNCpwaSAoNDUgZGVncmVlcylcbiAgICAvLyBzZWNvbmQgaWYgY2F0Y2hlcyB0aGUgb3RoZXIgd2F5IG9mIHNheWluZyBpdCwgc3FydCgyKS8yXG4gICAgaWYgKChpc29uZW92ZXJzcXJ0dHdvKHAxKSkgfHwgKGNhcihwMSkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgZXF1YWxxKGNhcihjZHIocDEpKSwgMSwgMikgJiYgY2FyKGNhcihjZHIoY2RyKHAxKSkpKSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBlcXVhbG4oY2FyKGNkcihjYXIoY2RyKGNkcihwMSkpKSkpLCAyKSAmJiBlcXVhbHEoY2FyKGNkcihjZHIoY2FyKGNkcihjZHIocDEpKSkpKSksIDEsIDIpKSkge1xuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJIC8gNC4wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgNCk7XG4gICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIH1cbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gaWYgcDEgPT0gLTEvc3FydCgyKSB0aGVuIHJldHVybiAzLzQqcGkgKDEzNSBkZWdyZWVzKVxuICAgIC8vIHNlY29uZCBpZiBjYXRjaGVzIHRoZSBvdGhlciB3YXkgb2Ygc2F5aW5nIGl0LCAtc3FydCgyKS8yXG4gICAgaWYgKChpc21pbnVzb25lb3ZlcnNxcnR0d28ocDEpKSB8fCAoY2FyKHAxKSA9PT0gc3ltYm9sKE1VTFRJUExZKSAmJiBlcXVhbHEoY2FyKGNkcihwMSkpLCAtMSwgMikgJiYgY2FyKGNhcihjZHIoY2RyKHAxKSkpKSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBlcXVhbG4oY2FyKGNkcihjYXIoY2RyKGNkcihwMSkpKSkpLCAyKSAmJiBlcXVhbHEoY2FyKGNkcihjZHIoY2FyKGNkcihjZHIocDEpKSkpKSksIDEsIDIpKSkge1xuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJICogMy4wIC8gNC4wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMywgNCk7XG4gICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIH1cbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFpc3JhdGlvbmFsKHAxKSkge1xuICAgICAgcHVzaF9zeW1ib2woQVJDQ09TKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbGlzdCgyKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgc3dpdGNoIChuKSB7XG4gICAgICBjYXNlIC0yOlxuICAgICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaF9zeW1ib2woUEkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAtMTpcbiAgICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICAgIHB1c2hfZG91YmxlKE1hdGguUEkgKiAyLjAgLyAzLjApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2hfcmF0aW9uYWwoMiwgMyk7XG4gICAgICAgICAgcHVzaF9zeW1ib2woUEkpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJIC8gMi4wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSAvIDMuMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAzKTtcbiAgICAgICAgICBwdXNoX3N5bWJvbChQSSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICAgIHB1c2hfZG91YmxlKDAuMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHB1c2hfc3ltYm9sKEFSQ0NPUyk7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBsaXN0KDIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIEV2YWxfYXJjY29zaCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gYXJjY29zaCgpO1xuICB9O1xuXG4gIGFyY2Nvc2ggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZDtcbiAgICBkID0gMC4wO1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woQ09TSCkpIHtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBkID0gcDEuZDtcbiAgICAgIGlmIChkIDwgMS4wKSB7XG4gICAgICAgIHN0b3AoXCJhcmNjb3NoIGZ1bmN0aW9uIGFyZ3VtZW50IGlzIGxlc3MgdGhhbiAxLjBcIik7XG4gICAgICB9XG4gICAgICBkID0gTWF0aC5sb2coZCArIE1hdGguc3FydChkICogZCAtIDEuMCkpO1xuICAgICAgcHVzaF9kb3VibGUoZCk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc3BsdXNvbmUocDEpKSB7XG4gICAgICBwdXNoKHplcm8pO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoX3N5bWJvbChBUkNDT1NIKTtcbiAgICBwdXNoKHAxKTtcbiAgICBsaXN0KDIpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgRXZhbF9hcmNzaW4gPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIGFyY3NpbigpO1xuICB9O1xuXG4gIGFyY3NpbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkLCBlcnJubywgbjtcbiAgICBuID0gMDtcbiAgICBkID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFNJTikpIHtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBlcnJubyA9IDA7XG4gICAgICBkID0gTWF0aC5hc2luKHAxLmQpO1xuICAgICAgaWYgKGVycm5vKSB7XG4gICAgICAgIHN0b3AoXCJhcmNzaW4gZnVuY3Rpb24gYXJndW1lbnQgaXMgbm90IGluIHRoZSBpbnRlcnZhbCBbLTEsMV1cIik7XG4gICAgICB9XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gaWYgcDEgPT0gMS9zcXJ0KDIpIHRoZW4gcmV0dXJuIDEvNCpwaSAoNDUgZGVncmVlcylcbiAgICAvLyBzZWNvbmQgaWYgY2F0Y2hlcyB0aGUgb3RoZXIgd2F5IG9mIHNheWluZyBpdCwgc3FydCgyKS8yXG4gICAgaWYgKChpc29uZW92ZXJzcXJ0dHdvKHAxKSkgfHwgKGNhcihwMSkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgZXF1YWxxKGNhcihjZHIocDEpKSwgMSwgMikgJiYgY2FyKGNhcihjZHIoY2RyKHAxKSkpKSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBlcXVhbG4oY2FyKGNkcihjYXIoY2RyKGNkcihwMSkpKSkpLCAyKSAmJiBlcXVhbHEoY2FyKGNkcihjZHIoY2FyKGNkcihjZHIocDEpKSkpKSksIDEsIDIpKSkge1xuICAgICAgcHVzaF9yYXRpb25hbCgxLCA0KTtcbiAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGlmIHAxID09IC0xL3NxcnQoMikgdGhlbiByZXR1cm4gLTEvNCpwaSAoLTQ1IGRlZ3JlZXMpXG4gICAgLy8gc2Vjb25kIGlmIGNhdGNoZXMgdGhlIG90aGVyIHdheSBvZiBzYXlpbmcgaXQsIC1zcXJ0KDIpLzJcbiAgICBpZiAoKGlzbWludXNvbmVvdmVyc3FydHR3byhwMSkpIHx8IChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpICYmIGVxdWFscShjYXIoY2RyKHAxKSksIC0xLCAyKSAmJiBjYXIoY2FyKGNkcihjZHIocDEpKSkpID09PSBzeW1ib2woUE9XRVIpICYmIGVxdWFsbihjYXIoY2RyKGNhcihjZHIoY2RyKHAxKSkpKSksIDIpICYmIGVxdWFscShjYXIoY2RyKGNkcihjYXIoY2RyKGNkcihwMSkpKSkpKSwgMSwgMikpKSB7XG4gICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKC1NYXRoLlBJIC8gNC4wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoLTEsIDQpO1xuICAgICAgICBwdXNoX3N5bWJvbChQSSk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICB9XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXNyYXRpb25hbChwMSkpIHtcbiAgICAgIHB1c2hfc3ltYm9sKEFSQ1NJTik7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocDEpO1xuICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgIHN3aXRjaCAobikge1xuICAgICAgY2FzZSAtMjpcbiAgICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICAgIHB1c2hfZG91YmxlKC1NYXRoLlBJIC8gMi4wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKC0xLCAyKTtcbiAgICAgICAgICBwdXNoX3N5bWJvbChQSSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgLTE6XG4gICAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgICBwdXNoX2RvdWJsZSgtTWF0aC5QSSAvIDYuMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaF9yYXRpb25hbCgtMSwgNik7XG4gICAgICAgICAgcHVzaF9zeW1ib2woUEkpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgICBwdXNoX2RvdWJsZSgwLjApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2goemVybyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJIC8gNi4wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDYpO1xuICAgICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSAvIDIuMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgICBwdXNoX3N5bWJvbChQSSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHB1c2hfc3ltYm9sKEFSQ1NJTik7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBsaXN0KDIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIEV2YWxfYXJjc2luaCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gYXJjc2luaCgpO1xuICB9O1xuXG4gIGFyY3NpbmggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZDtcbiAgICBkID0gMC4wO1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woU0lOSCkpIHtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBkID0gcDEuZDtcbiAgICAgIGQgPSBNYXRoLmxvZyhkICsgTWF0aC5zcXJ0KGQgKiBkICsgMS4wKSk7XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgIHB1c2goemVybyk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2hfc3ltYm9sKEFSQ1NJTkgpO1xuICAgIHB1c2gocDEpO1xuICAgIGxpc3QoMik7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBFdmFsX2FyY3RhbiA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gYXJjdGFuKCk7XG4gIH07XG5cbiAgYXJjdGFuID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQsIGVycm5vO1xuICAgIGQgPSAwO1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woVEFOKSkge1xuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShwMSkpIHtcbiAgICAgIGVycm5vID0gMDtcbiAgICAgIGQgPSBNYXRoLmF0YW4ocDEuZCk7XG4gICAgICBpZiAoZXJybm8pIHtcbiAgICAgICAgc3RvcChcImFyY3RhbiBmdW5jdGlvbiBlcnJvclwiKTtcbiAgICAgIH1cbiAgICAgIHB1c2hfZG91YmxlKGQpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAxKSkge1xuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzbmVnYXRpdmUocDEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIG5lZ2F0ZSgpO1xuICAgICAgYXJjdGFuKCk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYXJjdGFuKHNpbihhKSAvIGNvcyhhKSkgP1xuICAgIGlmIChGaW5kKHAxLCBzeW1ib2woU0lOKSkgJiYgRmluZChwMSwgc3ltYm9sKENPUykpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIG51bWVyYXRvcigpO1xuICAgICAgcDIgPSBwb3AoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgZGVub21pbmF0b3IoKTtcbiAgICAgIHAzID0gcG9wKCk7XG4gICAgICBpZiAoY2FyKHAyKSA9PT0gc3ltYm9sKFNJTikgJiYgY2FyKHAzKSA9PT0gc3ltYm9sKENPUykgJiYgZXF1YWwoY2FkcihwMiksIGNhZHIocDMpKSkge1xuICAgICAgICBwdXNoKGNhZHIocDIpKTtcbiAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGFyY3RhbigxL3NxcnQoMykpIC0+IHBpLzZcbiAgICAvLyBzZWNvbmQgaWYgY2F0Y2hlcyB0aGUgb3RoZXIgd2F5IG9mIHNheWluZyBpdCwgc3FydCgzKS8zXG4gICAgaWYgKChjYXIocDEpID09PSBzeW1ib2woUE9XRVIpICYmIGVxdWFsbihjYWRyKHAxKSwgMykgJiYgZXF1YWxxKGNhZGRyKHAxKSwgLTEsIDIpKSB8fCAoY2FyKHAxKSA9PT0gc3ltYm9sKE1VTFRJUExZKSAmJiBlcXVhbHEoY2FyKGNkcihwMSkpLCAxLCAzKSAmJiBjYXIoY2FyKGNkcihjZHIocDEpKSkpID09PSBzeW1ib2woUE9XRVIpICYmIGVxdWFsbihjYXIoY2RyKGNhcihjZHIoY2RyKHAxKSkpKSksIDMpICYmIGVxdWFscShjYXIoY2RyKGNkcihjYXIoY2RyKGNkcihwMSkpKSkpKSwgMSwgMikpKSB7XG4gICAgICBwdXNoX3JhdGlvbmFsKDEsIDYpO1xuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2goc3ltYm9sKFBJKSk7XG4gICAgICB9XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhcmN0YW4oMSkgLT4gcGkvNFxuICAgIGlmIChlcXVhbG4ocDEsIDEpKSB7XG4gICAgICBwdXNoX3JhdGlvbmFsKDEsIDQpO1xuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2goc3ltYm9sKFBJKSk7XG4gICAgICB9XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhcmN0YW4oc3FydCgzKSkgLT4gcGkvM1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woUE9XRVIpICYmIGVxdWFsbihjYWRyKHAxKSwgMykgJiYgZXF1YWxxKGNhZGRyKHAxKSwgMSwgMikpIHtcbiAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMyk7XG4gICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKE1hdGguUEkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaChzeW1ib2woUEkpKTtcbiAgICAgIH1cbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2hfc3ltYm9sKEFSQ1RBTik7XG4gICAgcHVzaChwMSk7XG4gICAgbGlzdCgyKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIEV2YWxfYXJjdGFuaCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gYXJjdGFuaCgpO1xuICB9O1xuXG4gIGFyY3RhbmggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZDtcbiAgICBkID0gMC4wO1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woVEFOSCkpIHtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBkID0gcDEuZDtcbiAgICAgIGlmIChkIDwgLTEuMCB8fCBkID4gMS4wKSB7XG4gICAgICAgIHN0b3AoXCJhcmN0YW5oIGZ1bmN0aW9uIGFyZ3VtZW50IGlzIG5vdCBpbiB0aGUgaW50ZXJ2YWwgWy0xLDFdXCIpO1xuICAgICAgfVxuICAgICAgZCA9IE1hdGgubG9nKCgxLjAgKyBkKSAvICgxLjAgLSBkKSkgLyAyLjA7XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgIHB1c2goemVybyk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2hfc3ltYm9sKEFSQ1RBTkgpO1xuICAgIHB1c2gocDEpO1xuICAgIGxpc3QoMik7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBERUJVR19BUkcgPSBmYWxzZTtcblxuICBFdmFsX2FyZyA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gYXJnKCk7XG4gIH07XG5cbiAgYXJnID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgcHVzaChwMSk7XG4gICAgbnVtZXJhdG9yKCk7XG4gICAgeXlhcmcoKTtcbiAgICBwdXNoKHAxKTtcbiAgICBkZW5vbWluYXRvcigpO1xuICAgIHl5YXJnKCk7XG4gICAgc3VidHJhY3QoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vZGVmaW5lIFJFIHAyXG4gIC8vZGVmaW5lIElNIHAzXG4gIHl5YXJnID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgLy8gY2FzZSBvZiBwbGFpbiBudW1iZXJcbiAgICBpZiAoaXNwb3NpdGl2ZW51bWJlcihwMSkgfHwgcDEgPT09IHN5bWJvbChQSSkpIHtcbiAgICAgIGlmIChpc2RvdWJsZShwMSkgfHwgZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNuZWdhdGl2ZW51bWJlcihwMSkpIHtcbiAgICAgIGlmIChpc2RvdWJsZShwMSkgfHwgZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKE1hdGguUEkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaChzeW1ib2woUEkpKTtcbiAgICAgIH1cbiAgICAgIG5lZ2F0ZSgpO1xuICAgIC8vIHlvdSdkIHRoaW5rIHRoYXQgc29tZXRoaW5nIGxpa2VcbiAgICAvLyBhcmcoYSkgaXMgYWx3YXlzIDAgd2hlbiBhIGlzIHJlYWwgYnV0IG5vLFxuICAgIC8vIGFyZyhhKSBpcyBwaSB3aGVuIGEgaXMgbmVnYXRpdmUgc28gd2UgaGF2ZVxuICAgIC8vIHRvIGxlYXZlIHVuZXhwcmVzc2VkXG4gICAgfSBlbHNlIGlmIChpc3N5bWJvbChwMSkpIHtcbiAgICAgIHB1c2hfc3ltYm9sKEFSRyk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgfSBlbHNlIGlmIChjYXIocDEpID09PSBzeW1ib2woUE9XRVIpICYmIGVxdWFsbihjYWRyKHAxKSwgLTEpKSB7XG4gICAgICAvLyAtMSB0byBhIHBvd2VyXG4gICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKE1hdGguUEkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaChzeW1ib2woUEkpKTtcbiAgICAgIH1cbiAgICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgfSBlbHNlIGlmIChjYXIocDEpID09PSBzeW1ib2woUE9XRVIpICYmIGNhZHIocDEpID09PSBzeW1ib2woRSkpIHtcbiAgICAgIC8vIGV4cG9uZW50aWFsXG4gICAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgICBpbWFnKCk7XG4gICAgLy8gYXJnKGFeKDEvMikpIGlzIGFsd2F5cyBlcXVhbCB0byAxLzIgKiBhcmcoYSlcbiAgICAvLyB0aGlzIGNhbiBvYnZpb3VzbHkgYmUgbWFkZSBtb3JlIGdlbmVyaWMgVE9ET1xuICAgIH0gZWxzZSBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBpc29uZW92ZXJ0d28oY2FkZHIocDEpKSkge1xuICAgICAgaWYgKERFQlVHX0FSRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImFyZyBvZiBhIHNxcnQ6IFwiICsgcDEpO1xuICAgICAgfVxuICAgICAgaWYgKERFQlVHX0FSRykge1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgIH1cbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgYXJnKCk7XG4gICAgICBpZiAoREVCVUdfQVJHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiID0gMS8yICogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgIH0gZWxzZSBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgLy8gcHJvZHVjdCBvZiBmYWN0b3JzXG4gICAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBhcmcoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICAvLyBzdW0gb2YgdGVybXNcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmVjdCgpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmVhbCgpO1xuICAgICAgcDIgPSBwb3AoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgaW1hZygpO1xuICAgICAgcDMgPSBwb3AoKTtcbiAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDIpKSB7XG4gICAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoKHN5bWJvbChQSSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc25lZ2F0aXZlKHAzKSkge1xuICAgICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBhcmN0YW4oKTtcbiAgICAgICAgaWYgKGlzbmVnYXRpdmUocDIpKSB7XG4gICAgICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzbmVnYXRpdmUocDMpKSB7XG4gICAgICAgICAgICBzdWJ0cmFjdCgpOyAvLyBxdWFkcmFudCAxIC0+IDNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWRkKCk7IC8vIHF1YWRyYW50IDQgLT4gMlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWlzWmVyb0F0b21PclRlbnNvcihnZXRfYmluZGluZyhzeW1ib2woQVNTVU1FX1JFQUxfVkFSSUFCTEVTKSkpKSB7XG4gICAgICAgIC8vIGlmIHdlIGFzc3VtZSBhbGwgcGFzc2VkIHZhbHVlcyBhcmUgcmVhbFxuICAgICAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiB3ZSBkb24ndCBhc3N1bWUgYWxsIHBhc3NlZCB2YWx1ZXMgYXJlIHJlYWwsIGFsbFxuICAgICAgICAvLyB3ZSBjb24gZG8gaXMgdG8gbGVhdmUgdW5leHByZXNzZWRcbiAgICAgICAgcHVzaF9zeW1ib2woQVJHKTtcbiAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIGxpc3QoMik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gcHJldHR5IHByaW50XG4gIGJha2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCwgcywgdCwgeCwgeSwgejtcbiAgICBoID0gMDtcbiAgICBzID0gMDtcbiAgICB0ID0gMDtcbiAgICB4ID0gMDtcbiAgICB5ID0gMDtcbiAgICB6ID0gMDtcbiAgICBleHBhbmRpbmcrKztcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBzID0gaXNwb2x5ZXhwYW5kZWRmb3JtKHAxLCBzeW1ib2woU1lNQk9MX1MpKTtcbiAgICB0ID0gaXNwb2x5ZXhwYW5kZWRmb3JtKHAxLCBzeW1ib2woU1lNQk9MX1QpKTtcbiAgICB4ID0gaXNwb2x5ZXhwYW5kZWRmb3JtKHAxLCBzeW1ib2woU1lNQk9MX1gpKTtcbiAgICB5ID0gaXNwb2x5ZXhwYW5kZWRmb3JtKHAxLCBzeW1ib2woU1lNQk9MX1kpKTtcbiAgICB6ID0gaXNwb2x5ZXhwYW5kZWRmb3JtKHAxLCBzeW1ib2woU1lNQk9MX1opKTtcbiAgICBpZiAocyA9PT0gMSAmJiB0ID09PSAwICYmIHggPT09IDAgJiYgeSA9PT0gMCAmJiB6ID09PSAwKSB7XG4gICAgICBwMiA9IHN5bWJvbChTWU1CT0xfUyk7XG4gICAgICBiYWtlX3BvbHkoKTtcbiAgICB9IGVsc2UgaWYgKHMgPT09IDAgJiYgdCA9PT0gMSAmJiB4ID09PSAwICYmIHkgPT09IDAgJiYgeiA9PT0gMCkge1xuICAgICAgcDIgPSBzeW1ib2woU1lNQk9MX1QpO1xuICAgICAgYmFrZV9wb2x5KCk7XG4gICAgfSBlbHNlIGlmIChzID09PSAwICYmIHQgPT09IDAgJiYgeCA9PT0gMSAmJiB5ID09PSAwICYmIHogPT09IDApIHtcbiAgICAgIHAyID0gc3ltYm9sKFNZTUJPTF9YKTtcbiAgICAgIGJha2VfcG9seSgpO1xuICAgIH0gZWxzZSBpZiAocyA9PT0gMCAmJiB0ID09PSAwICYmIHggPT09IDAgJiYgeSA9PT0gMSAmJiB6ID09PSAwKSB7XG4gICAgICBwMiA9IHN5bWJvbChTWU1CT0xfWSk7XG4gICAgICBiYWtlX3BvbHkoKTtcbiAgICB9IGVsc2UgaWYgKHMgPT09IDAgJiYgdCA9PT0gMCAmJiB4ID09PSAwICYmIHkgPT09IDAgJiYgeiA9PT0gMSkge1xuICAgICAgcDIgPSBzeW1ib2woU1lNQk9MX1opO1xuICAgICAgYmFrZV9wb2x5KCk7XG4gICAgLy8gZG9uJ3QgYmFrZSB0aGUgY29udGVudHMgb2Ygc29tZSBjb25zdHJ1Y3RzIHN1Y2ggYXMgXCJmb3JcIlxuICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byBldmFsdWF0ZSB0aGUgYm9keSBvZlxuICAgIC8vIHN1Y2ggY29uc3RydWN0cyBcInN0YXRpY2FsbHlcIiwgaS5lLiB3aXRob3V0IGZ1bGx5IHJ1bm5pbmdcbiAgICAvLyB0aGUgbG9vcHMuXG4gICAgfSBlbHNlIGlmICgoaXNjb25zKHAxKSkgJiYgY2FyKHAxKSAhPT0gc3ltYm9sKEZPUikpIHtcbiAgICAgIGggPSB0b3M7XG4gICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgYmFrZSgpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgICBsaXN0KHRvcyAtIGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICB9XG4gICAgcmVzdG9yZSgpO1xuICAgIHJldHVybiBleHBhbmRpbmctLTtcbiAgfTtcblxuICBwb2x5Zm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoO1xuICAgIGggPSAwO1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzcG9seWV4cGFuZGVkZm9ybShwMSwgcDIpKSB7XG4gICAgICBiYWtlX3BvbHkoKTtcbiAgICB9IGVsc2UgaWYgKGlzY29ucyhwMSkpIHtcbiAgICAgIGggPSB0b3M7XG4gICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIHBvbHlmb3JtKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICAgIGxpc3QodG9zIC0gaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGJha2VfcG9seSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBoLCBpLCBrLCBuLCBvLCByZWY7XG4gICAgaCA9IDA7XG4gICAgaSA9IDA7XG4gICAgayA9IDA7XG4gICAgbiA9IDA7XG4gICAgLy9VICoqYVxuICAgIGEgPSB0b3M7XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMik7XG4gICAgayA9IGNvZWZmKCk7XG4gICAgaCA9IHRvcztcbiAgICBmb3IgKGkgPSBvID0gcmVmID0gayAtIDE7IG8gPj0gMDsgaSA9IG8gKz0gLTEpIHtcbiAgICAgIHAxID0gc3RhY2tbYSArIGldO1xuICAgICAgYmFrZV9wb2x5X3Rlcm0oaSk7XG4gICAgfVxuICAgIG4gPSB0b3MgLSBoO1xuICAgIGlmIChuID4gMSkge1xuICAgICAgbGlzdChuKTtcbiAgICAgIHB1c2goc3ltYm9sKEFERCkpO1xuICAgICAgc3dhcCgpO1xuICAgICAgY29ucygpO1xuICAgIH1cbiAgICBwMSA9IHBvcCgpO1xuICAgIG1vdmVUb3ModG9zIC0gayk7XG4gICAgcmV0dXJuIHB1c2gocDEpO1xuICB9O1xuXG4gIC8vIHAxIHBvaW50cyB0byBjb2VmZmljaWVudCBvZiBwMiBeIGtcblxuICAvLyBrIGlzIGFuIGludFxuICBiYWtlX3BvbHlfdGVybSA9IGZ1bmN0aW9uKGspIHtcbiAgICB2YXIgaCwgbjtcbiAgICBoID0gMDtcbiAgICBuID0gMDtcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAxKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBjb25zdGFudCB0ZXJtP1xuICAgIGlmIChrID09PSAwKSB7XG4gICAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaCA9IHRvcztcbiAgICAvLyBjb2VmZmljaWVudFxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghZXF1YWxuKHAxLCAxKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgfVxuICAgIC8vIHggXiBrXG4gICAgaWYgKGsgPT09IDEpIHtcbiAgICAgIHB1c2gocDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHN5bWJvbChQT1dFUikpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoX2ludGVnZXIoayk7XG4gICAgICBsaXN0KDMpO1xuICAgIH1cbiAgICBuID0gdG9zIC0gaDtcbiAgICBpZiAobiA+IDEpIHtcbiAgICAgIGxpc3Qobik7XG4gICAgICBwdXNoKHN5bWJvbChNVUxUSVBMWSkpO1xuICAgICAgc3dhcCgpO1xuICAgICAgcmV0dXJuIGNvbnMoKTtcbiAgICB9XG4gIH07XG5cbiAgRXZhbF9iZXNzZWxqID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIGJlc3NlbGooKTtcbiAgfTtcblxuICBiZXNzZWxqID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHl5YmVzc2VsaigpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy9kZWZpbmUgWCBwMVxuICAvL2RlZmluZSBOIHAyXG4gIC8vZGVmaW5lIFNHTiBwM1xuICB5eWJlc3NlbGogPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZCwgbjtcbiAgICBkID0gMC4wO1xuICAgIG4gPSAwO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBwdXNoKHAyKTtcbiAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICAvLyBudW1lcmljYWwgcmVzdWx0XG4gICAgaWYgKGlzZG91YmxlKHAxKSAmJiAhaXNOYU4obikpIHtcbiAgICAgIGQgPSBqbihuLCBwMS5kKTtcbiAgICAgIHB1c2hfZG91YmxlKGQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBiZXNzZWooMCwwKSA9IDFcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAxKSAmJiBpc1plcm9BdG9tT3JUZW5zb3IocDIpKSB7XG4gICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJlc3NlbGooMCxuKSA9IDBcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAxKSAmJiAhaXNOYU4obikpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gaGFsZiBhcmd1bWVudHNcbiAgICBpZiAocDIuayA9PT0gTlVNICYmIE1FUVVBTChwMi5xLmIsIDIpKSB7XG4gICAgICAvLyBuID0gMS8yXG4gICAgICBpZiAoTUVRVUFMKHAyLnEuYSwgMSkpIHtcbiAgICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICAgIHB1c2hfZG91YmxlKDIuMCAvIE1hdGguUEkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBwdXNoX3N5bWJvbChQSSk7XG4gICAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgc2luZSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBuID0gLTEvMlxuICAgICAgaWYgKE1FUVVBTChwMi5xLmEsIC0xKSkge1xuICAgICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgICAgcHVzaF9kb3VibGUoMi4wIC8gTWF0aC5QSSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBjb3NpbmUoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYmVzc2Vsaih4LG4pID0gKDIveCkgKG4tc2duKG4pKSBiZXNzZWxqKHgsbi1zZ24obikpIC0gYmVzc2Vsaih4LG4tMipzZ24obikpXG4gICAgICBwdXNoX2ludGVnZXIoTVNJR04ocDIucS5hKSk7XG4gICAgICBwMyA9IHBvcCgpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBkaXZpZGUoKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHN1YnRyYWN0KCk7XG4gICAgICBiZXNzZWxqKCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHN1YnRyYWN0KCk7XG4gICAgICBiZXNzZWxqKCk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL2lmIDAgIyB0ZXN0IGNhc2VzIG5lZWRlZFxuICAgIGlmIChpc25lZ2F0aXZldGVybShwMSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICBwb3dlcigpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHB1c2hfc3ltYm9sKEJFU1NFTEopO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbGlzdCgzKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc25lZ2F0aXZldGVybShwMikpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBwdXNoX3N5bWJvbChCRVNTRUxKKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL2VuZGlmXG4gICAgcHVzaChzeW1ib2woQkVTU0VMSikpO1xuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIHJldHVybiBsaXN0KDMpO1xuICB9O1xuXG4gIEV2YWxfYmVzc2VseSA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBiZXNzZWx5KCk7XG4gIH07XG5cbiAgYmVzc2VseSA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICB5eWJlc3NlbHkoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vZGVmaW5lIFggcDFcbiAgLy9kZWZpbmUgTiBwMlxuICB5eWJlc3NlbHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZCwgbjtcbiAgICBkID0gMC4wO1xuICAgIG4gPSAwO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBwdXNoKHAyKTtcbiAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAoaXNkb3VibGUocDEpICYmICFpc05hTihuKSkge1xuICAgICAgZCA9IHluKG4sIHAxLmQpO1xuICAgICAgcHVzaF9kb3VibGUoZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc25lZ2F0aXZldGVybShwMikpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBwdXNoX3N5bWJvbChCRVNTRUxZKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoX3N5bWJvbChCRVNTRUxZKTtcbiAgICBwdXNoKHAxKTtcbiAgICBwdXNoKHAyKTtcbiAgICBsaXN0KDMpO1xuICB9O1xuXG4gIC8vZG91YmxlIGNvbnZlcnRfcmF0aW9uYWxfdG9fZG91YmxlKFUgKilcbiAgLy9kb3VibGUgY29udmVydF9iaWdudW1fdG9fZG91YmxlKHVuc2lnbmVkIGludCAqKVxuICAvL2ludCBnZSh1bnNpZ25lZCBpbnQgKiwgdW5zaWduZWQgaW50ICosIGludClcbiAgbWludCA9IGZ1bmN0aW9uKGEpIHtcbiAgICByZXR1cm4gYmlnSW50KGEpO1xuICB9O1xuXG4gIGlzU21hbGwgPSBmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuIGEuZ2VxKE51bWJlci5NSU5fU0FGRV9JTlRFR0VSKSAmJiBhLmxlcShOdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG4gIH07XG5cbiAgLy8gYiBpcyArMSBvciAtMSwgYSBpcyBhIGJpZ2ludFxuICBzZXRTaWduVG8gPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgaWYgKGEuaXNQb3NpdGl2ZSgpKSB7XG4gICAgICBpZiAoYiA8IDApIHtcbiAgICAgICAgcmV0dXJuIGEubXVsdGlwbHkoYmlnSW50KC0xKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGEgaXMgbmVnYXRpdmVcbiAgICAgIGlmIChiID4gMCkge1xuICAgICAgICByZXR1cm4gYS5tdWx0aXBseShiaWdJbnQoLTEpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgbWFrZVNpZ25TYW1lQXMgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgaWYgKGEuaXNQb3NpdGl2ZSgpKSB7XG4gICAgICBpZiAoYi5pc05lZ2F0aXZlKCkpIHtcbiAgICAgICAgcmV0dXJuIGEubXVsdGlwbHkoYmlnSW50KC0xKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGEgaXMgbmVnYXRpdmVcbiAgICAgIGlmIChiLmlzUG9zaXRpdmUoKSkge1xuICAgICAgICByZXR1cm4gYS5tdWx0aXBseShiaWdJbnQoLTEpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgbWFrZVBvc2l0aXZlID0gZnVuY3Rpb24oYSkge1xuICAgIGlmIChhLmlzTmVnYXRpdmUoKSkge1xuICAgICAgcmV0dXJuIGEubXVsdGlwbHkoYmlnSW50KC0xKSk7XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIC8vIG4gaXMgYW4gaW50XG4gIC8qXG4gIG10b3RhbCA9IDBcbiAgTVBfTUlOX1NJWkUgPSAyXG4gIE1QX01BWF9GUkVFICA9IDEwMDBcblxuICBtbmV3ID0gKG4pIC0+XG4gICAgaWYgKG4gPCBNUF9NSU5fU0laRSlcbiAgICAgIG4gPSBNUF9NSU5fU0laRVxuICAgIGlmIChuID09IE1QX01JTl9TSVpFICYmIG1mcmVlY291bnQpXG4gICAgICBwID0gZnJlZV9zdGFja1stLW1mcmVlY291bnRdXG4gICAgZWxzZVxuICAgICAgcCA9IFtdICModW5zaWduZWQgaW50ICopIG1hbGxvYygobiArIDMpICogc2l6ZW9mIChpbnQpKVxuICAgICAgI2lmIChwID09IDApXG4gICAqICBzdG9wKFwibWFsbG9jIGZhaWx1cmVcIilcbiAgICBwWzBdID0gblxuICAgIG10b3RhbCArPSBuXG4gICAgcmV0dXJuIHBbM11cbiAgICovXG4gIC8vIHAgaXMgdGhlIGluZGV4IG9mIGFycmF5IG9mIGludHNcbiAgLy8gISEhIGFycmF5IHdhc24ndCBwYXNzZWQgaGVyZVxuICAvKlxuICBmcmVlX3N0YWNrID0gW11cblxuICBtZnJlZSA9IChhcnJheSwgcCkgLT5cbiAgICBwIC09IDNcbiAgICBtdG90YWwgLT0gYXJyYXlbcF1cbiAgICBpZiAoYXJyYXlbcF0gPT0gTVBfTUlOX1NJWkUgJiYgbWZyZWVjb3VudCA8IE1QX01BWF9GUkVFKVxuICAgICAgZnJlZV9zdGFja1ttZnJlZWNvdW50KytdID0gcFxuICAgIGVsc2VcbiAgICAgIGZyZWUocClcbiAgKi9cbiAgLy8gY29udmVydCBpbnQgdG8gYmlnbnVtXG5cbiAgLy8gbiBpcyBhbiBpbnRcbiAgLypcbiAgbWludCA9IChuKSAtPlxuICAgIHAgPSBtbmV3KDEpXG4gICAgaWYgKG4gPCAwKVxuICAgKiAhISEgdGhpcyBpcyBGVVxuICAgKiBNU0lHTihwKSA9IC0xXG4gICAgICBmdSA9IHRydWVcbiAgICBlbHNlXG4gICAqICEhISB0aGlzIGlzIEZVXG4gICAgICAjTVNJR04ocCkgPSAxXG4gICAgICBmdSA9IHRydWVcbiAgICogISEhIHRoaXMgaXMgRlVcbiAgICAjTUxFTkdUSChwKSA9IDFcbiAgICBwWzBdID0gTWF0aC5hYnMobilcbiAgICByZXR1cm4gcFxuICAgKi9cbiAgLy8gY29weSBiaWdudW1cblxuICAvLyBhIGlzIGFuIGFycmF5IG9mIGludHNcbiAgLypcbiAgbWNvcHkgPSAoYSkgLT5cbiAgICAjdW5zaWduZWQgaW50ICpiXG5cbiAgICBiID0gbW5ldyhNTEVOR1RIKGEpKVxuXG4gICAqICEhISBmdVxuICAgICNNU0lHTihiKSA9IE1TSUdOKGEpXG4gICAgI01MRU5HVEgoYikgPSBNTEVOR1RIKGEpXG5cbiAgICBmb3IgaSBpbiBbMC4uLk1MRU5HVEgoYSldXG4gICAgICBiW2ldID0gYVtpXVxuXG4gICAgcmV0dXJuIGJcbiAgICovXG4gIC8qXG4gICAqIFxuICAgKiBnZSBub3QgaW52b2tlZCBmcm9tIGFueXdoZXJlIC0gaXMgeW91IG5lZWQgZ2VcbiAgICoganVzdCB1c2UgdGhlIGJpZ051bSdzIGdlIGltcGxlbWVudGF0aW9uXG4gICAqIGxlYXZpbmcgaXQgaGVyZSBqdXN0IGluIGNhc2UgSSBkZWNpZGUgdG8gYmFja3BvcnQgdG8gQ1xuICAgKlxuICAgKiBhID49IGIgP1xuICAgKiBhbmQgYW5kIGIgYXJyYXlzIG9mIGludHMsIGxlbiBpcyBhbiBpbnRcbiAgZ2UgPSAoYSwgYiwgbGVuKSAtPlxuICAgIGkgPSAwXG4gICAgZm9yIGkgaW4gWzAuLi5sZW5dXG4gICAgICBpZiAoYVtpXSA9PSBiW2ldKVxuICAgICAgICBjb250aW51ZVxuICAgICAgZWxzZVxuICAgICAgICBicmVha1xuICAgIGlmIChhW2ldID49IGJbaV0pXG4gICAgICByZXR1cm4gMVxuICAgIGVsc2VcbiAgICAgIHJldHVybiAwXG4gICAqL1xuICBhZGRfbnVtYmVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBiLCB0aGVSZXN1bHQ7XG4gICAgYSA9IDEuMDtcbiAgICBiID0gMS4wO1xuICAgIC8vaWYgREVCVUcgdGhlbiBjb25zb2xlLmxvZyhcImFkZF9udW1iZXJzIGFkZGluZyBudW1iZXJzOiBcIiArIHByaW50X2xpc3Qoc3RhY2tbdG9zIC0gMV0pICsgXCIgYW5kIFwiICsgcHJpbnRfbGlzdChzdGFja1t0b3MgLSAyXSkpXG4gICAgaWYgKGlzcmF0aW9uYWwoc3RhY2tbdG9zIC0gMV0pICYmIGlzcmF0aW9uYWwoc3RhY2tbdG9zIC0gMl0pKSB7XG4gICAgICBxYWRkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgYSA9IHAxLmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBjb252ZXJ0X3JhdGlvbmFsX3RvX2RvdWJsZShwMSk7XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShwMikpIHtcbiAgICAgIGIgPSBwMi5kO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gY29udmVydF9yYXRpb25hbF90b19kb3VibGUocDIpO1xuICAgIH1cbiAgICB0aGVSZXN1bHQgPSBhICsgYjtcbiAgICBwdXNoX2RvdWJsZSh0aGVSZXN1bHQpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgc3VidHJhY3RfbnVtYmVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBiO1xuICAgIGEgPSAwLjA7XG4gICAgYiA9IDAuMDtcbiAgICBpZiAoaXNyYXRpb25hbChzdGFja1t0b3MgLSAxXSkgJiYgaXNyYXRpb25hbChzdGFja1t0b3MgLSAyXSkpIHtcbiAgICAgIHFzdWIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2F2ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBhID0gcDEuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGNvbnZlcnRfcmF0aW9uYWxfdG9fZG91YmxlKHAxKTtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAyKSkge1xuICAgICAgYiA9IHAyLmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSBjb252ZXJ0X3JhdGlvbmFsX3RvX2RvdWJsZShwMik7XG4gICAgfVxuICAgIHB1c2hfZG91YmxlKGEgLSBiKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIG11bHRpcGx5X251bWJlcnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYjtcbiAgICBhID0gMC4wO1xuICAgIGIgPSAwLjA7XG4gICAgaWYgKGlzcmF0aW9uYWwoc3RhY2tbdG9zIC0gMV0pICYmIGlzcmF0aW9uYWwoc3RhY2tbdG9zIC0gMl0pKSB7XG4gICAgICBxbXVsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgYSA9IHAxLmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBjb252ZXJ0X3JhdGlvbmFsX3RvX2RvdWJsZShwMSk7XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShwMikpIHtcbiAgICAgIGIgPSBwMi5kO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gY29udmVydF9yYXRpb25hbF90b19kb3VibGUocDIpO1xuICAgIH1cbiAgICBwdXNoX2RvdWJsZShhICogYik7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBkaXZpZGVfbnVtYmVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBiO1xuICAgIGEgPSAwLjA7XG4gICAgYiA9IDAuMDtcbiAgICBpZiAoaXNyYXRpb25hbChzdGFja1t0b3MgLSAxXSkgJiYgaXNyYXRpb25hbChzdGFja1t0b3MgLSAyXSkpIHtcbiAgICAgIHFkaXYoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2F2ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAyKSkge1xuICAgICAgc3RvcChcImRpdmlkZSBieSB6ZXJvXCIpO1xuICAgIH1cbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBhID0gcDEuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGNvbnZlcnRfcmF0aW9uYWxfdG9fZG91YmxlKHAxKTtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAyKSkge1xuICAgICAgYiA9IHAyLmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSBjb252ZXJ0X3JhdGlvbmFsX3RvX2RvdWJsZShwMik7XG4gICAgfVxuICAgIHB1c2hfZG91YmxlKGEgLyBiKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGludmVydF9udW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYjtcbiAgICAvL3Vuc2lnbmVkIGludCAqYSwgKmJcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAxKSkge1xuICAgICAgc3RvcChcImRpdmlkZSBieSB6ZXJvXCIpO1xuICAgIH1cbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBwdXNoX2RvdWJsZSgxIC8gcDEuZCk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGEgPSBiaWdJbnQocDEucS5hKTtcbiAgICBiID0gYmlnSW50KHAxLnEuYik7XG4gICAgYiA9IG1ha2VTaWduU2FtZUFzKGIsIGEpO1xuICAgIGEgPSBzZXRTaWduVG8oYSwgMSk7XG4gICAgcDEgPSBuZXcgVSgpO1xuICAgIHAxLmsgPSBOVU07XG4gICAgcDEucS5hID0gYjtcbiAgICBwMS5xLmIgPSBhO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gYSBhbmQgYiBhcmUgVXNcbiAgY29tcGFyZV9yYXRpb25hbHMgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIGFiLCBiYSwgdDtcbiAgICB0ID0gMDtcbiAgICAvL3Vuc2lnbmVkIGludCAqYWIsICpiYVxuICAgIGFiID0gbW11bChhLnEuYSwgYi5xLmIpO1xuICAgIGJhID0gbW11bChhLnEuYiwgYi5xLmEpO1xuICAgIHQgPSBtY21wKGFiLCBiYSk7XG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gYSBhbmQgYiBhcmUgVXNcbiAgY29tcGFyZV9udW1iZXJzID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciB4LCB5O1xuICAgIHggPSAwLjA7XG4gICAgeSA9IDAuMDtcbiAgICBpZiAoaXNyYXRpb25hbChhKSAmJiBpc3JhdGlvbmFsKGIpKSB7XG4gICAgICByZXR1cm4gY29tcGFyZV9yYXRpb25hbHMoYSwgYik7XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShhKSkge1xuICAgICAgeCA9IGEuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IGNvbnZlcnRfcmF0aW9uYWxfdG9fZG91YmxlKGEpO1xuICAgIH1cbiAgICBpZiAoaXNkb3VibGUoYikpIHtcbiAgICAgIHkgPSBiLmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSBjb252ZXJ0X3JhdGlvbmFsX3RvX2RvdWJsZShiKTtcbiAgICB9XG4gICAgaWYgKHggPCB5KSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmICh4ID4geSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIG5lZ2F0ZV9udW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAxKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAocDEuaykge1xuICAgICAgY2FzZSBOVU06XG4gICAgICAgIHAyID0gbmV3IFUoKTtcbiAgICAgICAgcDIuayA9IE5VTTtcbiAgICAgICAgcDIucS5hID0gYmlnSW50KHAxLnEuYS5tdWx0aXBseShiaWdJbnQubWludXNPbmUpKTtcbiAgICAgICAgcDIucS5iID0gYmlnSW50KHAxLnEuYik7XG4gICAgICAgIHB1c2gocDIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRE9VQkxFOlxuICAgICAgICBwdXNoX2RvdWJsZSgtcDEuZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3RvcChcImJ1ZyBjYXVnaHQgaW4gbXBfbmVnYXRlX251bWJlclwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBiaWdudW1fdHJ1bmNhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYTtcbiAgICAvL3Vuc2lnbmVkIGludCAqYVxuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGEgPSBtZGl2KHAxLnEuYSwgcDEucS5iKTtcbiAgICBwMSA9IG5ldyBVKCk7XG4gICAgcDEuayA9IE5VTTtcbiAgICBwMS5xLmEgPSBhO1xuICAgIHAxLnEuYiA9IGJpZ0ludCgxKTtcbiAgICBwdXNoKHAxKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIG1wX251bWVyYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChwMS5rICE9PSBOVU0pIHtcbiAgICAgIHB1c2gob25lKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcDIgPSBuZXcgVSgpO1xuICAgIHAyLmsgPSBOVU07XG4gICAgcDIucS5hID0gYmlnSW50KHAxLnEuYSk7XG4gICAgcDIucS5iID0gYmlnSW50KDEpO1xuICAgIHB1c2gocDIpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgbXBfZGVub21pbmF0b3IgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAocDEuayAhPT0gTlVNKSB7XG4gICAgICBwdXNoKG9uZSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHAyID0gbmV3IFUoKTtcbiAgICBwMi5rID0gTlVNO1xuICAgIHAyLnEuYSA9IGJpZ0ludChwMS5xLmIpO1xuICAgIHAyLnEuYiA9IGJpZ0ludCgxKTtcbiAgICBwdXNoKHAyKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIGV4cG8gaXMgYW4gaW50ZWdlclxuICBiaWdudW1fcG93ZXJfbnVtYmVyID0gZnVuY3Rpb24oZXhwbykge1xuICAgIHZhciBhLCBiLCB0O1xuICAgIC8vdW5zaWduZWQgaW50ICphLCAqYiwgKnRcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBhID0gbXBvdyhwMS5xLmEsIE1hdGguYWJzKGV4cG8pKTtcbiAgICBiID0gbXBvdyhwMS5xLmIsIE1hdGguYWJzKGV4cG8pKTtcbiAgICBpZiAoZXhwbyA8IDApIHtcbiAgICAgIC8vIHN3YXAgYSBhbmQgYlxuICAgICAgdCA9IGE7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0O1xuICAgICAgYSA9IG1ha2VTaWduU2FtZUFzKGEsIGIpO1xuICAgICAgYiA9IHNldFNpZ25UbyhiLCAxKTtcbiAgICB9XG4gICAgcDEgPSBuZXcgVSgpO1xuICAgIHAxLmsgPSBOVU07XG4gICAgcDEucS5hID0gYTtcbiAgICBwMS5xLmIgPSBiO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gcCBhbiBhcnJheSBvZiBpbnRzXG4gIGNvbnZlcnRfYmlnbnVtX3RvX2RvdWJsZSA9IGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gcC50b0pTTnVtYmVyKCk7XG4gIH07XG5cbiAgLy8gcCBpcyBhIFVcbiAgY29udmVydF9yYXRpb25hbF90b19kb3VibGUgPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIHF1b3RpZW50QW5kUmVtYWluZGVyLCByZXN1bHQ7XG4gICAgaWYgKHAucSA9PSBudWxsKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgcXVvdGllbnRBbmRSZW1haW5kZXIgPSBwLnEuYS5kaXZtb2QocC5xLmIpO1xuICAgIHJlc3VsdCA9IHF1b3RpZW50QW5kUmVtYWluZGVyLnF1b3RpZW50ICsgcXVvdGllbnRBbmRSZW1haW5kZXIucmVtYWluZGVyIC8gcC5xLmIudG9KU051bWJlcigpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gbiBhbiBpbnRlZ2VyXG4gIHB1c2hfaW50ZWdlciA9IGZ1bmN0aW9uKG4pIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwicHVzaGluZyBpbnRlZ2VyIFwiICsgbik7XG4gICAgfVxuICAgIHNhdmUoKTtcbiAgICBwMSA9IG5ldyBVKCk7XG4gICAgcDEuayA9IE5VTTtcbiAgICBwMS5xLmEgPSBiaWdJbnQobik7XG4gICAgcDEucS5iID0gYmlnSW50KDEpO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gZCBhIGRvdWJsZVxuICBwdXNoX2RvdWJsZSA9IGZ1bmN0aW9uKGQpIHtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBuZXcgVSgpO1xuICAgIHAxLmsgPSBET1VCTEU7XG4gICAgcDEuZCA9IGQ7XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBhLGIgcGFydHMgb2YgYSByYXRpb25hbFxuICBwdXNoX3JhdGlvbmFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIC8qXG4gICAgc2F2ZSgpXG4gICAgcDEgPSBuZXcgVSgpXG4gICAgcDEuayA9IE5VTVxuICAgIHAxLnEuYSA9IGJpZ0ludChhKVxuICAgIHAxLnEuYiA9IGJpZ0ludChiKVxuICAgICMjIEZJWE1FIC0tIG5vcm1hbGl6ZSAjI1xuICAgIHB1c2gocDEpXG4gICAgcmVzdG9yZSgpXG4gICAgICovXG4gICAgdmFyIHA7XG4gICAgcCA9IG5ldyBVKCk7XG4gICAgcC5rID0gTlVNO1xuICAgIHAucS5hID0gYmlnSW50KGEpO1xuICAgIHAucS5iID0gYmlnSW50KGIpO1xuICAgIHJldHVybiBwdXNoKHApO1xuICB9O1xuXG4gIHBvcF9pbnRlZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG47XG4gICAgbiA9IDAvMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBzd2l0Y2ggKHAxLmspIHtcbiAgICAgIGNhc2UgTlVNOlxuICAgICAgICBpZiAoaXNpbnRlZ2VyKHAxKSAmJiBpc1NtYWxsKHAxLnEuYSkpIHtcbiAgICAgICAgICBuID0gcDEucS5hLnRvSlNOdW1iZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRE9VQkxFOlxuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInBvcHBpbmcgaW50ZWdlciBidXQgZG91YmxlIGlzIGZvdW5kXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChNYXRoLmZsb29yKHAxLmQpID09PSBwMS5kKSB7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi4uLmFsdG91Z2ggaXQncyBhbiBpbnRlZ2VyXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuID0gcDEuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN0b3JlKCk7XG4gICAgcmV0dXJuIG47XG4gIH07XG5cbiAgLy8gcCBpcyBhIFUsIGZsYWcgaXMgYW4gaW50XG4gIHByaW50X2RvdWJsZSA9IGZ1bmN0aW9uKHAsIGZsYWcpIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGJ1ZjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgYnVmID0gZG91YmxlVG9SZWFzb25hYmxlU3RyaW5nKHAuZCk7XG4gICAgaWYgKGZsYWcgPT09IDEgJiYgYnVmID09PSAnLScpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihidWYgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKGJ1Zik7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICAvLyBzIGlzIGEgc3RyaW5nXG4gIGJpZ251bV9zY2FuX2ludGVnZXIgPSBmdW5jdGlvbihzKSB7XG4gICAgdmFyIGEsIHNjb3VudGVyLCBzaWduXztcbiAgICAvL3Vuc2lnbmVkIGludCAqYVxuICAgIC8vY2hhciBzaWduXG4gICAgc2F2ZSgpO1xuICAgIHNjb3VudGVyID0gMDtcbiAgICBzaWduXyA9IHNbc2NvdW50ZXJdO1xuICAgIGlmIChzaWduXyA9PT0gJysnIHx8IHNpZ25fID09PSAnLScpIHtcbiAgICAgIHNjb3VudGVyKys7XG4gICAgfVxuICAgIC8vICEhISEgc29tZSBtZXNzIGluIGhlcmUsIGFkZGVkIGFuIGFyZ3VtZW50XG4gICAgYSA9IGJpZ0ludChzLnN1YnN0cmluZyhzY291bnRlcikpO1xuICAgIHAxID0gbmV3IFUoKTtcbiAgICBwMS5rID0gTlVNO1xuICAgIHAxLnEuYSA9IGE7XG4gICAgcDEucS5iID0gYmlnSW50KDEpO1xuICAgIHB1c2gocDEpO1xuICAgIGlmIChzaWduXyA9PT0gJy0nKSB7XG4gICAgICBuZWdhdGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBzIGEgc3RyaW5nXG4gIGJpZ251bV9zY2FuX2Zsb2F0ID0gZnVuY3Rpb24ocykge1xuICAgIHJldHVybiBwdXNoX2RvdWJsZShwYXJzZUZsb2F0KHMpKTtcbiAgfTtcblxuICAvLyBnaXZlcyB0aGUgY2FwYWJpbGl0eSBvZiBwcmludGluZyB0aGUgdW5zaWduZWRcbiAgLy8gdmFsdWUuIFRoaXMgaXMgaGFuZHkgYmVjYXVzZSBwcmludGluZyBvZiB0aGUgc2lnblxuICAvLyBtaWdodCBiZSB0YWtlbiBjYXJlIG9mIFwidXBzdHJlYW1cIlxuICAvLyBlLmcuIHdoZW4gcHJpbnRpbmcgYSBiYXNlIGVsZXZhdGVkIHRvIGEgbmVnYXRpdmUgZXhwb25lbnRcbiAgLy8gcHJpbnRzIHRoZSBpbnZlcnNlIG9mIHRoZSBiYXNlIHBvd2VyZWQgdG8gdGhlIHVuc2lnbmVkXG4gIC8vIGV4cG9uZW50LlxuICAvLyBwIGlzIGEgVVxuICBwcmludF9udW1iZXIgPSBmdW5jdGlvbihwLCBzaWduZWQpIHtcbiAgICB2YXIgYUFzU3RyaW5nLCBhY2N1bXVsYXRvciwgYnVmLCBkZW5vbWluYXRvclN0cmluZztcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgZGVub21pbmF0b3JTdHJpbmcgPSBcIlwiO1xuICAgIGJ1ZiA9IFwiXCI7XG4gICAgc3dpdGNoIChwLmspIHtcbiAgICAgIGNhc2UgTlVNOlxuICAgICAgICBhQXNTdHJpbmcgPSBwLnEuYS50b1N0cmluZygpO1xuICAgICAgICBpZiAoIXNpZ25lZCkge1xuICAgICAgICAgIGlmIChhQXNTdHJpbmdbMF0gPT09IFwiLVwiKSB7XG4gICAgICAgICAgICBhQXNTdHJpbmcgPSBhQXNTdHJpbmcuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVggJiYgaXNmcmFjdGlvbihwKSkge1xuICAgICAgICAgIGFBc1N0cmluZyA9IFwiXFxcXGZyYWN7XCIgKyBhQXNTdHJpbmcgKyBcIn17XCI7XG4gICAgICAgIH1cbiAgICAgICAgYWNjdW11bGF0b3IgKz0gYUFzU3RyaW5nO1xuICAgICAgICBpZiAoaXNmcmFjdGlvbihwKSkge1xuICAgICAgICAgIGlmIChwcmludE1vZGUgIT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gXCIvXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbm9taW5hdG9yU3RyaW5nID0gcC5xLmIudG9TdHJpbmcoKTtcbiAgICAgICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgICAgIGRlbm9taW5hdG9yU3RyaW5nICs9IFwifVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBkZW5vbWluYXRvclN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRE9VQkxFOlxuICAgICAgICBhQXNTdHJpbmcgPSBkb3VibGVUb1JlYXNvbmFibGVTdHJpbmcocC5kKTtcbiAgICAgICAgaWYgKCFzaWduZWQpIHtcbiAgICAgICAgICBpZiAoYUFzU3RyaW5nWzBdID09PSBcIi1cIikge1xuICAgICAgICAgICAgYUFzU3RyaW5nID0gYUFzU3RyaW5nLnN1YnN0cmluZygxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWNjdW11bGF0b3IgKz0gYUFzU3RyaW5nO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgZ2NkX251bWJlcnMgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIC8vICBpZiAoIWlzaW50ZWdlcihwMSkgfHwgIWlzaW50ZWdlcihwMikpXG4gICAgLy8gICAgc3RvcChcImludGVnZXIgYXJncyBleHBlY3RlZCBmb3IgZ2NkXCIpXG4gICAgcDMgPSBuZXcgVSgpO1xuICAgIHAzLmsgPSBOVU07XG4gICAgcDMucS5hID0gbWdjZChwMS5xLmEsIHAyLnEuYSk7XG4gICAgcDMucS5iID0gbWdjZChwMS5xLmIsIHAyLnEuYik7XG4gICAgcDMucS5hID0gc2V0U2lnblRvKHAzLnEuYSwgMSk7XG4gICAgcHVzaChwMyk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBwb3BfZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQ7XG4gICAgZCA9IDAuMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBzd2l0Y2ggKHAxLmspIHtcbiAgICAgIGNhc2UgTlVNOlxuICAgICAgICBkID0gY29udmVydF9yYXRpb25hbF90b19kb3VibGUocDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRE9VQkxFOlxuICAgICAgICBkID0gcDEuZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBkID0gMC4wO1xuICAgIH1cbiAgICByZXN0b3JlKCk7XG4gICAgcmV0dXJuIGQ7XG4gIH07XG5cbiAgYmlnbnVtX2Zsb2F0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQ7XG4gICAgZCA9IDAuMDtcbiAgICBkID0gY29udmVydF9yYXRpb25hbF90b19kb3VibGUocG9wKCkpO1xuICAgIHJldHVybiBwdXNoX2RvdWJsZShkKTtcbiAgfTtcblxuICAvL3N0YXRpYyB1bnNpZ25lZCBpbnQgKl9fZmFjdG9yaWFsKGludClcblxuICAvLyBuIGlzIGFuIGludFxuICBiaWdudW1fZmFjdG9yaWFsID0gZnVuY3Rpb24obikge1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IG5ldyBVKCk7XG4gICAgcDEuayA9IE5VTTtcbiAgICBwMS5xLmEgPSBfX2ZhY3RvcmlhbChuKTtcbiAgICBwMS5xLmIgPSBiaWdJbnQoMSk7XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBuIGlzIGFuIGludFxuICBfX2ZhY3RvcmlhbCA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgYSwgYiwgaSwgbywgcmVmLCB0O1xuICAgIGkgPSAwO1xuICAgIC8vdW5zaWduZWQgaW50ICphLCAqYiwgKnRcbiAgICBpZiAobiA9PT0gMCB8fCBuID09PSAxKSB7XG4gICAgICBhID0gYmlnSW50KDEpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIGEgPSBiaWdJbnQoMik7XG4gICAgYiA9IGJpZ0ludCgwKTtcbiAgICBpZiAoMyA8PSBuKSB7XG4gICAgICBmb3IgKGkgPSBvID0gMywgcmVmID0gbjsgKDMgPD0gcmVmID8gbyA8PSByZWYgOiBvID49IHJlZik7IGkgPSAzIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgICBiID0gYmlnSW50KGkpO1xuICAgICAgICB0ID0gbW11bChhLCBiKTtcbiAgICAgICAgYSA9IHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIG1hc2sgPSBbMHgwMDAwMDAwMSwgMHgwMDAwMDAwMiwgMHgwMDAwMDAwNCwgMHgwMDAwMDAwOCwgMHgwMDAwMDAxMCwgMHgwMDAwMDAyMCwgMHgwMDAwMDA0MCwgMHgwMDAwMDA4MCwgMHgwMDAwMDEwMCwgMHgwMDAwMDIwMCwgMHgwMDAwMDQwMCwgMHgwMDAwMDgwMCwgMHgwMDAwMTAwMCwgMHgwMDAwMjAwMCwgMHgwMDAwNDAwMCwgMHgwMDAwODAwMCwgMHgwMDAxMDAwMCwgMHgwMDAyMDAwMCwgMHgwMDA0MDAwMCwgMHgwMDA4MDAwMCwgMHgwMDEwMDAwMCwgMHgwMDIwMDAwMCwgMHgwMDQwMDAwMCwgMHgwMDgwMDAwMCwgMHgwMTAwMDAwMCwgMHgwMjAwMDAwMCwgMHgwNDAwMDAwMCwgMHgwODAwMDAwMCwgMHgxMDAwMDAwMCwgMHgyMDAwMDAwMCwgMHg0MDAwMDAwMCwgMHg4MDAwMDAwMF07XG5cbiAgLy8gdW5zaWduZWQgaW50ICp4LCB1bnNpZ25lZCBpbnQga1xuICBtcF9zZXRfYml0ID0gZnVuY3Rpb24oeCwgaykge1xuICAgIGNvbnNvbGUubG9nKFwibm90IGltcGxlbWVudGVkIHlldFwiKTtcbiAgICBkZWJ1Z2dlcjtcbiAgICByZXR1cm4geFtrIC8gMzJdIHw9IG1hc2tbayAlIDMyXTtcbiAgfTtcblxuICAvLyB1bnNpZ25lZCBpbnQgKngsIHVuc2lnbmVkIGludCBrXG4gIG1wX2Nscl9iaXQgPSBmdW5jdGlvbih4LCBrKSB7XG4gICAgY29uc29sZS5sb2coXCJub3QgaW1wbGVtZW50ZWQgeWV0XCIpO1xuICAgIGRlYnVnZ2VyO1xuICAgIHJldHVybiB4W2sgLyAzMl0gJj0gfm1hc2tbayAlIDMyXTtcbiAgfTtcblxuICAvLyB1bnNpZ25lZCBpbnQgKmFcbiAgbXNoaWZ0cmlnaHQgPSBmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuIGEgPSBhLnNoaWZ0UmlnaHQoKTtcbiAgfTtcblxuICAvLyAgQmlub21pYWwgY29lZmZpY2llbnRcblxuICAvLyAgSW5wdXQ6ICAgIHRvcy0yICAgIG5cblxuICAvLyAgICAgIHRvcy0xICAgIGtcblxuICAvLyAgT3V0cHV0OiAgICBCaW5vbWlhbCBjb2VmZmljaWVudCBvbiBzdGFja1xuXG4gIC8vICBiaW5vbWlhbChuLCBrKSA9IG4hIC8gayEgLyAobiAtIGspIVxuXG4gIC8vICBUaGUgYmlub21pYWwgY29lZmZpY2llbnQgdmFuaXNoZXMgZm9yIGsgPCAwIG9yIGsgPiBuLiAoQT1CLCBwLiAxOSlcbiAgRXZhbF9iaW5vbWlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBiaW5vbWlhbCgpO1xuICB9O1xuXG4gIGJpbm9taWFsID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHliaW5vbWlhbCgpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy9kZWZpbmUgTiBwMVxuICAvL2RlZmluZSBLIHAyXG4gIHliaW5vbWlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoQklOT01fY2hlY2tfYXJncygpID09PSAwKSB7XG4gICAgICBwdXNoKHplcm8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoKHAxKTtcbiAgICBmYWN0b3JpYWwoKTtcbiAgICBwdXNoKHAyKTtcbiAgICBmYWN0b3JpYWwoKTtcbiAgICBkaXZpZGUoKTtcbiAgICBwdXNoKHAxKTtcbiAgICBwdXNoKHAyKTtcbiAgICBzdWJ0cmFjdCgpO1xuICAgIGZhY3RvcmlhbCgpO1xuICAgIHJldHVybiBkaXZpZGUoKTtcbiAgfTtcblxuICBCSU5PTV9jaGVja19hcmdzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGlzTnVtZXJpY0F0b20ocDEpICYmIGxlc3NwKHAxLCB6ZXJvKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmIChpc051bWVyaWNBdG9tKHAyKSAmJiBsZXNzcChwMiwgemVybykpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljQXRvbShwMSkgJiYgaXNOdW1lcmljQXRvbShwMikgJiYgbGVzc3AocDEsIHAyKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX2NlaWxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIGNlaWxpbmcoKTtcbiAgfTtcblxuICBjZWlsaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHl5Y2VpbGluZygpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgeXljZWlsaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQsIGRvTm90aGluZztcbiAgICBkID0gMC4wO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKCFpc051bWVyaWNBdG9tKHAxKSkge1xuICAgICAgcHVzaF9zeW1ib2woQ0VJTElORyk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShwMSkpIHtcbiAgICAgIGQgPSBNYXRoLmNlaWwocDEuZCk7XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzaW50ZWdlcihwMSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwMyA9IG5ldyBVKCk7XG4gICAgcDMuayA9IE5VTTtcbiAgICBwMy5xLmEgPSBtZGl2KHAxLnEuYSwgcDEucS5iKTtcbiAgICBwMy5xLmIgPSBtaW50KDEpO1xuICAgIHB1c2gocDMpO1xuICAgIGlmIChpc25lZ2F0aXZlbnVtYmVyKHAxKSkge1xuICAgICAgcmV0dXJuIGRvTm90aGluZyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgIHJldHVybiBhZGQoKTtcbiAgICB9XG4gIH07XG5cbiAgRXZhbF9jaG9vc2UgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gY2hvb3NlKCk7XG4gIH07XG5cbiAgLy8gUmVzdWx0IHZhbmlzaGVzIGZvciBrIDwgMCBvciBrID4gbi4gKEE9QiwgcC4gMTkpXG5cbiAgLy9kZWZpbmUgTiBwMVxuICAvL2RlZmluZSBLIHAyXG4gIGNob29zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGNob29zZV9jaGVja19hcmdzKCkgPT09IDApIHtcbiAgICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgZmFjdG9yaWFsKCk7XG4gICAgcHVzaChwMik7XG4gICAgZmFjdG9yaWFsKCk7XG4gICAgZGl2aWRlKCk7XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMik7XG4gICAgc3VidHJhY3QoKTtcbiAgICBmYWN0b3JpYWwoKTtcbiAgICBkaXZpZGUoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGNob29zZV9jaGVja19hcmdzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGlzTnVtZXJpY0F0b20ocDEpICYmIGxlc3NwKHAxLCB6ZXJvKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmIChpc051bWVyaWNBdG9tKHAyKSAmJiBsZXNzcChwMiwgemVybykpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljQXRvbShwMSkgJiYgaXNOdW1lcmljQXRvbShwMikgJiYgbGVzc3AocDEsIHAyKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX2NpcmNleHAgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgY2lyY2V4cCgpO1xuICAgIC8vIG5vcm1hbGl6ZVxuICAgIHJldHVybiBFdmFsKCk7XG4gIH07XG5cbiAgY2lyY2V4cCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoLCBpLCBvLCByZWY7XG4gICAgaSA9IDA7XG4gICAgaCA9IDA7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChDT1MpKSB7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIGV4cGNvcygpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFNJTikpIHtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgZXhwc2luKCk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woVEFOKSkge1xuICAgICAgcDEgPSBjYWRyKHAxKTtcbiAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBleHBvbmVudGlhbCgpO1xuICAgICAgcDIgPSBwb3AoKTtcbiAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIGV4cG9uZW50aWFsKCk7XG4gICAgICBwMyA9IHBvcCgpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHN1YnRyYWN0KCk7XG4gICAgICBwdXNoKGltYWdpbmFyeXVuaXQpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBhZGQoKTtcbiAgICAgIGRpdmlkZSgpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKENPU0gpKSB7XG4gICAgICBwMSA9IGNhZHIocDEpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBleHBvbmVudGlhbCgpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIGV4cG9uZW50aWFsKCk7XG4gICAgICBhZGQoKTtcbiAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFNJTkgpKSB7XG4gICAgICBwMSA9IGNhZHIocDEpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBleHBvbmVudGlhbCgpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIGV4cG9uZW50aWFsKCk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woVEFOSCkpIHtcbiAgICAgIHAxID0gY2FkcihwMSk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBleHBvbmVudGlhbCgpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgc3VidHJhY3QoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgYWRkKCk7XG4gICAgICBkaXZpZGUoKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzY29ucyhwMSkpIHtcbiAgICAgIGggPSB0b3M7XG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBjaXJjZXhwKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICAgIGxpc3QodG9zIC0gaCk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwMS5rID09PSBURU5TT1IpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgY29weV90ZW5zb3IoKTtcbiAgICAgIHAxID0gcG9wKCk7XG4gICAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gcDEudGVuc29yLm5lbGVtOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgICBwdXNoKHAxLnRlbnNvci5lbGVtW2ldKTtcbiAgICAgICAgY2lyY2V4cCgpO1xuICAgICAgICBwMS50ZW5zb3IuZWxlbVtpXSA9IHBvcCgpO1xuICAgICAgfVxuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgRXZhbF9jbGVhcmFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIGRvX2NsZWFyYWxsKCk7XG4gICAgcmV0dXJuIHB1c2goc3ltYm9sKE5JTCkpO1xuICB9O1xuXG4gIGRvX2NsZWFyYWxsID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRlc3RfZmxhZyA9PT0gMCkge1xuICAgICAgY2xlYXJfdGVybSgpO1xuICAgIH1cbiAgICBkb19jbGVhclBhdHRlcm5zKCk7XG4gICAgY2xlYXJfc3ltYm9scygpO1xuICAgIGRlZm4oKTtcbiAgICByZXR1cm4gY29kZUdlbiA9IGZhbHNlO1xuICB9O1xuXG4gIC8vIGNsZWFyYWxsIGZyb20gYXBwbGljYXRpb24gR1VJIGNvZGVcbiAgY2xlYXJhbGwgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcnVuKFwiY2xlYXJhbGxcIik7XG4gIH07XG5cbiAgLy8gdGhpcyB0cmFuc2Zvcm1hdGlvbiBpcyBkb25lIGluIHJ1bi5jb2ZmZWUsIHNlZSB0aGVyZVxuICAvLyBmb3IgbW9yZSBpbmZvLlxuICBjbGVhclJlbmFtZWRWYXJpYWJsZXNUb0F2b2lkQmluZGluZ1RvRXh0ZXJuYWxTY29wZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBvLCByZWYsIHJlc3VsdHM7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBzeW10YWIubGVuZ3RoOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgaWYgKHN5bXRhYltpXS5wcmludG5hbWUuaW5kZXhPZihcIkFWT0lEX0JJTkRJTkdfVE9fRVhURVJOQUxfU0NPUEVfVkFMVUVcIikgIT09IC0xKSB7XG4gICAgICAgIC8vIGp1c3QgY2xlYXIgaXRcbiAgICAgICAgc3ltdGFiW2ldLmsgPSBTWU07XG4gICAgICAgIHN5bXRhYltpXS5wcmludG5hbWUgPSBcIlwiO1xuICAgICAgICBiaW5kaW5nW2ldID0gc3ltdGFiW2ldO1xuICAgICAgICByZXN1bHRzLnB1c2goaXNTeW1ib2xSZWNsYWltYWJsZVtpXSA9IHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIEV2YWxfY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5kZXhGb3VuZCwgdmFyaWFibGVUb0JlQ2xlYXJlZDtcbiAgICBwMiA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMikpIHtcbiAgICAgIHZhcmlhYmxlVG9CZUNsZWFyZWQgPSBjYXIocDIpO1xuICAgICAgLy9jb25zb2xlLmxvZyB2YXJpYWJsZVRvQmVDbGVhcmVkICsgXCJcIlxuICAgICAgaWYgKHZhcmlhYmxlVG9CZUNsZWFyZWQuayAhPT0gU1lNKSB7XG4gICAgICAgIHN0b3AoXCJzeW1ib2wgZXJyb3JcIik7XG4gICAgICB9XG4gICAgICAvL2NvbnNvbGUubG9nIFwiZ2V0dGluZyBiaW5kaW5nIG9mIFwiICsgcC50b1N0cmluZygpXG4gICAgICAvL2lmIHAudG9TdHJpbmcoKSA9PSBcImFhYVwiXG4gICAgICAvLyAgZGVidWdnZXJcbiAgICAgIGluZGV4Rm91bmQgPSBzeW10YWIuaW5kZXhPZih2YXJpYWJsZVRvQmVDbGVhcmVkKTtcbiAgICAgIHN5bXRhYltpbmRleEZvdW5kXS5rID0gU1lNO1xuICAgICAgc3ltdGFiW2luZGV4Rm91bmRdLnByaW50bmFtZSA9IFwiXCI7XG4gICAgICBiaW5kaW5nW2luZGV4Rm91bmRdID0gc3ltdGFiW2luZGV4Rm91bmRdO1xuICAgICAgaXNTeW1ib2xSZWNsYWltYWJsZVtpbmRleEZvdW5kXSA9IHRydWU7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgfVxuICAgIHJldHVybiBwdXNoKHN5bWJvbChOSUwpKTtcbiAgfTtcblxuICAvKlxuICAgQ29udmVydCBjb21wbGV4IHogdG8gY2xvY2sgZm9ybVxuXG4gICAgSW5wdXQ6ICAgIHB1c2ggIHpcblxuICAgIE91dHB1dDogICAgUmVzdWx0IG9uIHN0YWNrXG5cbiAgICBjbG9jayh6KSA9IGFicyh6KSAqICgtMSkgXiAoYXJnKHopIC8gcGkpXG5cbiAgICBGb3IgZXhhbXBsZSwgY2xvY2soZXhwKGkgcGkvMykpIGdpdmVzIHRoZSByZXN1bHQgKC0xKV4oMS8zKVxuICAqL1xuICAvLyBQLlMuIEkgY291bGRuJ3QgZmluZCBpbmRlcGVuZGVudCBkZWZpbml0aW9uL2Frbm93bGVkZ21lbnRcbiAgLy8gb2YgdGhlIG5hbWluZyBcImNsb2NrIGZvcm1cIiBhbnl3aGVyZSBvbiB0aGUgd2ViLCBzZWVtcyBsaWtlIGFcbiAgLy8gbmFtaW5nIHNwZWNpZmljIHRvIGVpZ2VubWF0aC5cbiAgLy8gQ2xvY2sgZm9ybSBpcyBhbm90aGVyIHdheSB0byBleHByZXNzIGEgY29tcGxleCBudW1iZXIsIGFuZFxuICAvLyBpdCBoYXMgdGhyZWUgYWR2YW50YWdlc1xuICAvLyAgIDEpIGl0J3MgdW5pZm9ybSB3aXRoIGhvdyBmb3IgZXhhbXBsZVxuICAvLyAgICAgIGkgaXMgZXhwcmVzc2VkIGkuZS4gKC0xKV4oMS8yKVxuICAvLyAgIDIpIGl0J3MgdmVyeSBjb21wYWN0XG4gIC8vICAgMykgaXQncyBhIHN0cmFpZ2hmb3J3YXJkIG5vdGF0aW9uIGZvciByb290cyBvZiAxIGFuZCAtMVxuICBERUJVR19DTE9DS0ZPUk0gPSBmYWxzZTtcblxuICBFdmFsX2Nsb2NrID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBjbG9ja2Zvcm0oKTtcbiAgfTtcblxuICBjbG9ja2Zvcm0gPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgLy9pZiAxXG4gICAgcDEgPSBwb3AoKTtcbiAgICBwdXNoKHAxKTtcbiAgICBhYnMoKTtcbiAgICBpZiAoREVCVUdfQ0xPQ0tGT1JNKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNsb2NrZm9ybTogYWJzIG9mIFwiICsgcDEgKyBcIiA6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgIH1cbiAgICAvLyBwdXNoaW5nIHRoZSBleHByZXNzaW9uICgtMSleLi4uIGJ1dCBub3RlXG4gICAgLy8gdGhhdCB3ZSBjYW4ndCB1c2UgXCJwb3dlclwiLCBhcyBcInBvd2VyXCIgZXZhbHVhdGVzXG4gICAgLy8gY2xvY2sgZm9ybXMgaW50byByZWN0YW5ndWxhciBmb3JtIChzZWUgXCItMSBeIHJhdGlvbmFsXCJcbiAgICAvLyBzZWN0aW9uIGluIHBvd2VyKVxuICAgIHB1c2hfc3ltYm9sKFBPV0VSKTtcbiAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgIHB1c2gocDEpO1xuICAgIGFyZygpO1xuICAgIGlmIChERUJVR19DTE9DS0ZPUk0pIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY2xvY2tmb3JtOiBhcmcgb2YgXCIgKyBwMSArIFwiIDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgIHB1c2hfZG91YmxlKE1hdGguUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHN5bWJvbChQSSkpO1xuICAgIH1cbiAgICBkaXZpZGUoKTtcbiAgICBpZiAoREVCVUdfQ0xPQ0tGT1JNKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNsb2NrZm9ybTogZGl2aWRlIDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIGxpc3QoMyk7XG4gICAgaWYgKERFQlVHX0NMT0NLRk9STSkge1xuICAgICAgY29uc29sZS5sb2coXCJjbG9ja2Zvcm06IHBvd2VyIDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIG11bHRpcGx5KCk7XG4gICAgaWYgKERFQlVHX0NMT0NLRk9STSkge1xuICAgICAgY29uc29sZS5sb2coXCJjbG9ja2Zvcm06IG11bHRpcGx5IDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIC8vZWxzZVxuICAgIC8qXG4gICAgcDEgPSBwb3AoKVxuICAgIHB1c2gocDEpXG4gICAgYWJzKClcbiAgICBwdXNoKHN5bWJvbChFKSlcbiAgICBwdXNoKHAxKVxuICAgIGFyZygpXG4gICAgcHVzaChpbWFnaW5hcnl1bml0KVxuICAgIG11bHRpcGx5KClcbiAgICBwb3dlcigpXG4gICAgbXVsdGlwbHkoKVxuICAgICovXG4gICAgLy9lbmRpZlxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLyogY29lZmYgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgVGFnc1xuICAtLS0tXG4gIHNjcmlwdGluZywgSlMsIGludGVybmFsLCB0cmVlbm9kZSwgZ2VuZXJhbCBjb25jZXB0XG5cbiAgUGFyYW1ldGVyc1xuICAtLS0tLS0tLS0tXG4gIHAseCxuXG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGNvZWZmaWNpZW50IG9mIHhebiBpbiBwb2x5bm9taWFsIHAuIFRoZSB4IGFyZ3VtZW50IGNhbiBiZSBvbWl0dGVkIGZvciBwb2x5bm9taWFscyBpbiB4LlxuXG4gICovXG4gIC8vZGVmaW5lIFAgcDFcbiAgLy9kZWZpbmUgWCBwMlxuICAvL2RlZmluZSBOIHAzXG4gIEV2YWxfY29lZmYgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMyA9IHBvcCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAocDMgPT09IHN5bWJvbChOSUwpKSB7IC8vIHAzIGlzIE4gICMgb25seSAyIGFyZ3M/XG4gICAgICBwMyA9IHAyO1xuICAgICAgcDIgPSBzeW1ib2woU1lNQk9MX1gpOyAvLyBwMiBpcyBYXG4gICAgfVxuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIHB1c2gocDMpO1xuICAgIHBvd2VyKCk7XG4gICAgZGl2aWRlKCk7XG4gICAgcHVzaChwMik7XG4gICAgcmV0dXJuIGZpbHRlcigpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgUHV0IHBvbHlub21pYWwgY29lZmZpY2llbnRzIG9uIHRoZSBzdGFja1xuXG4gIC8vICBJbnB1dDogIHRvcy0yICAgIHAoeCkgKHRoZSBwb2x5bm9taWFsKVxuXG4gIC8vICAgICAgdG9zLTEgICAgeCAodGhlIHZhcmlhYmxlKVxuXG4gIC8vICBPdXRwdXQ6ICAgIFJldHVybnMgbnVtYmVyIG9mIGNvZWZmaWNpZW50cyBvbiBzdGFja1xuXG4gIC8vICAgICAgdG9zLW4gICAgQ29lZmZpY2llbnQgb2YgeF4wXG5cbiAgLy8gICAgICB0b3MtMSAgICBDb2VmZmljaWVudCBvZiB4XihuLTEpXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBjb2VmZiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoLCBuLCBwcmV2X2V4cGFuZGluZztcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGggPSB0b3M7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKHplcm8pO1xuICAgICAgc3Vic3QoKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHAzID0gcG9wKCk7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIGlmIChlcXVhbChwMSwgemVybykpIHtcbiAgICAgICAgbiA9IHRvcyAtIGg7XG4gICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICB9XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHJldl9leHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgICBleHBhbmRpbmcgPSAxO1xuICAgICAgZGl2aWRlKCk7XG4gICAgICBleHBhbmRpbmcgPSBwcmV2X2V4cGFuZGluZztcbiAgICAgIC8vY29uc29sZS5sb2coXCJqdXN0IGRpdmlkZWQ6IFwiICsgc3RhY2tbdG9zLTFdLnRvU3RyaW5nKCkpXG4gICAgICBwMSA9IHBvcCgpO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX2NvZmFjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvTm90aGluZywgaSwgaiwgbjtcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBuID0gMDtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBpZiAoaXN0ZW5zb3IocDIpICYmIHAyLnRlbnNvci5uZGltID09PSAyICYmIHAyLnRlbnNvci5kaW1bMF0gPT09IHAyLnRlbnNvci5kaW1bMV0pIHtcbiAgICAgIGRvTm90aGluZyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3AoXCJjb2ZhY3RvcjogMXN0IGFyZzogc3F1YXJlIG1hdHJpeCBleHBlY3RlZFwiKTtcbiAgICB9XG4gICAgbiA9IHAyLnRlbnNvci5kaW1bMF07XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBpID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAoaSA8IDEgfHwgaSA+IG4pIHtcbiAgICAgIHN0b3AoXCJjb2ZhY3RvcjogMm5kIGFyZzogcm93IGluZGV4IGV4cGVjdGVkXCIpO1xuICAgIH1cbiAgICBwdXNoKGNhZGRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBqID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAoaiA8IDEgfHwgaiA+IG4pIHtcbiAgICAgIHN0b3AoXCJjb2ZhY3RvcjogM3JkIGFyZzogY29sdW1uIGluZGV4IGV4cGVjdGVkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gY29mYWN0b3IocDIsIG4sIGkgLSAxLCBqIC0gMSk7XG4gIH07XG5cbiAgY29mYWN0b3IgPSBmdW5jdGlvbihwLCBuLCByb3csIGNvbCkge1xuICAgIHZhciBpLCBpMSwgaiwgbywgcmVmLCByZWYxO1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgZm9yIChqID0gaTEgPSAwLCByZWYxID0gbjsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGogPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgICBpZiAoaSAhPT0gcm93ICYmIGogIT09IGNvbCkge1xuICAgICAgICAgIHB1c2gocC50ZW5zb3IuZWxlbVtuICogaSArIGpdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBkZXRlcm1pbmFudChuIC0gMSk7XG4gICAgaWYgKChyb3cgKyBjb2wpICUgMikge1xuICAgICAgcmV0dXJuIG5lZ2F0ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBDb25kZW5zZSBhbiBleHByZXNzaW9uIGJ5IGZhY3RvcmluZyBjb21tb24gdGVybXMuXG4gIEV2YWxfY29uZGVuc2UgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIENvbmRlbnNlKCk7XG4gIH07XG5cbiAgQ29uZGVuc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJldl9leHBhbmRpbmc7XG4gICAgcHJldl9leHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgZXhwYW5kaW5nID0gMDtcbiAgICBzYXZlKCk7XG4gICAgeXljb25kZW5zZSgpO1xuICAgIHJlc3RvcmUoKTtcbiAgICByZXR1cm4gZXhwYW5kaW5nID0gcHJldl9leHBhbmRpbmc7XG4gIH07XG5cbiAgeXljb25kZW5zZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vZXhwYW5kaW5nID0gMFxuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGNhcihwMSkgIT09IHN5bWJvbChBREQpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZ2V0IGdjZCBvZiBhbGwgdGVybXNcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgcHVzaChjYXIocDMpKTtcbiAgICBwMyA9IGNkcihwMyk7XG4gICAgd2hpbGUgKGlzY29ucyhwMykpIHtcbiAgICAgIHB1c2goY2FyKHAzKSk7XG4gICAgICAvL2NvbnNvbGUubG9nIFwiY2FsY3VsYXRpbmcgZ2NkIGJldHdlZW46IFwiICsgc3RhY2tbdG9zIC0gMV0gKyBcIiBhbmQgXCIgKyBzdGFja1t0b3MgLSAyXVxuICAgICAgZ2NkKCk7XG4gICAgICAvL2NvbnNvbGUubG9nIFwicGFydGlhbCBnY2Q6IFwiICsgc3RhY2tbdG9zIC0gMV1cbiAgICAgIHAzID0gY2RyKHAzKTtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyBcImNvbmRlbnNlOiB0aGlzIGlzIHRoZSBnY2Qgb2YgYWxsIHRoZSB0ZXJtczogXCIgKyBzdGFja1t0b3MgLSAxXVxuXG4gICAgLy8gZGl2aWRlIGVhY2ggdGVybSBieSBnY2RcbiAgICBpbnZlcnNlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwdXNoKHplcm8pO1xuICAgIHAzID0gY2RyKHAxKTtcbiAgICB3aGlsZSAoaXNjb25zKHAzKSkge1xuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKGNhcihwMykpO1xuICAgICAgLy9tdWx0aXBseSgpXG4gICAgICBtdWx0aXBseV9ub2V4cGFuZCgpO1xuICAgICAgYWRkKCk7XG4gICAgICBwMyA9IGNkcihwMyk7XG4gICAgfVxuICAgIC8vIFdlIG11bHRpcGxpZWQgYWJvdmUgdy9vIGV4cGFuZGluZyBzbyBzb21lIGZhY3RvcnMgY2FuY2VsbGVkLlxuXG4gICAgLy8gTm93IHdlIGV4cGFuZCB3aGljaCBub3JtYWxpemVzIHRoZSByZXN1bHQgYW5kLCBpbiBzb21lIGNhc2VzLFxuICAgIC8vIHNpbXBsaWZpZXMgaXQgdG9vIChzZWUgdGVzdCBjYXNlIEgpLlxuICAgIHl5ZXhwYW5kKCk7XG4gICAgLy8gbXVsdGlwbHkgcmVzdWx0IGJ5IGdjZFxuICAgIHB1c2gocDIpO1xuICAgIHJldHVybiBkaXZpZGUoKTtcbiAgfTtcblxuICBFdmFsX2NvbmogPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBwdXNoKHAxKTtcbiAgICBpZiAoIUZpbmQocDEsIGltYWdpbmFyeXVuaXQpKSB7IC8vIGV4YW1wbGU6ICgtMSleKDEvMylcbiAgICAgIHBvbGFyKCk7XG4gICAgICBjb25qdWdhdGUoKTtcbiAgICAgIHJldHVybiBjbG9ja2Zvcm0oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbmp1Z2F0ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBjYXJlZnVsIGlzIHlvdSBwYXNzIHRoaXMgb25lIGFuIGV4cHJlc3Npb24gd2l0aFxuICAvLyBpIChpbnN0ZWFkIG9mICgtMSleKDEvMikpIHRoZW4gdGhpcyBkb2Vzbid0IHdvcmshXG4gIGNvbmp1Z2F0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICBuZWdhdGUoKTtcbiAgICBzdWJzdCgpO1xuICAgIHJldHVybiBFdmFsKCk7XG4gIH07XG5cbiAgLy8gQ29ucyB0d28gdGhpbmdzIG9uIHRoZSBzdGFjay5cbiAgY29uc0NvdW50ID0gMDtcblxuICBjb25zID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHA7XG4gICAgY29uc0NvdW50Kys7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNvbnMgdG9zOiBcIiArIHRvcyArIFwiICMgXCIgKyBjb25zQ291bnQpO1xuICAgIH1cbiAgICAvL2lmIGNvbnNDb3VudCA9PSA0NDRcbiAgICAvLyAgZGVidWdnZXJcbiAgICAvLyBhdXRvIHZhciBvaywgbm8gb3Bwb3J0dW5pdHkgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiBhZnRlciBwID0gYWxsb2MoKVxuICAgIHAgPSBuZXcgVSgpO1xuICAgIHAuayA9IENPTlM7XG4gICAgcC5jb25zLmNkciA9IHBvcCgpO1xuICAgIGlmIChwID09PSBwLmNvbnMuY2RyKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICAgIGNvbnNvbGUubG9nKFwic29tZXRoaW5nIHdyb25nIHAgPT0gaXRzIGNkclwiKTtcbiAgICB9XG4gICAgcC5jb25zLmNhciA9IHBvcCgpO1xuICAgIC8qXG4gICAgY29uc29sZS5sb2cgXCJjb25zIG5ldyBjZHIuayA9IFwiICsgcC5jb25zLmNkci5rICsgXCJcXG5vciBtb3JlIGluIGRldGFpbDpcIlxuICAgIGNvbnNvbGUubG9nIHByaW50X2xpc3QgcC5jb25zLmNkclxuICAgIGNvbnNvbGUubG9nIFwiY29ucyBuZXcgY2FyLmsgPSBcIiArIHAuY29ucy5jYXIuayArIFwiXFxub3IgbW9yZSBpbiBkZXRhaWw6XCJcbiAgICBjb25zb2xlLmxvZyBwcmludF9saXN0IHAuY29ucy5jYXJcbiAgICAqL1xuICAgIHJldHVybiBwdXNoKHApO1xuICB9O1xuXG4gIEV2YWxfY29udHJhY3QgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgaWYgKGNkZHIocDEpID09PSBzeW1ib2woTklMKSkge1xuICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBwdXNoKGNhZGRkcihwMSkpO1xuICAgICAgRXZhbCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29udHJhY3QoKTtcbiAgfTtcblxuICBjb250cmFjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICB5eWNvbnRyYWN0KCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICB5eWNvbnRyYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEsIGFpLCBhbiwgYiwgaCwgaSwgaTEsIGosIGoxLCBrLCBsLCBsMSwgbSwgbTEsIG4sIG4xLCBuZGltLCBuZWxlbSwgbywgbzEsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNjtcbiAgICBoID0gMDtcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBrID0gMDtcbiAgICBsID0gMDtcbiAgICBtID0gMDtcbiAgICBuID0gMDtcbiAgICBuZGltID0gMDtcbiAgICBuZWxlbSA9IDA7XG4gICAgYWkgPSBbXTtcbiAgICBhbiA9IFtdO1xuICAgIHAzID0gcG9wKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmICghaXN0ZW5zb3IocDEpKSB7XG4gICAgICBpZiAoIWlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgICAgc3RvcChcImNvbnRyYWN0OiB0ZW5zb3IgZXhwZWN0ZWQsIDFzdCBhcmcgaXMgbm90IGEgdGVuc29yXCIpO1xuICAgICAgfVxuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaChwMik7XG4gICAgbCA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgcHVzaChwMyk7XG4gICAgbSA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgbmRpbSA9IHAxLnRlbnNvci5uZGltO1xuICAgIGlmIChsIDwgMSB8fCBsID4gbmRpbSB8fCBtIDwgMSB8fCBtID4gbmRpbSB8fCBsID09PSBtIHx8IHAxLnRlbnNvci5kaW1bbCAtIDFdICE9PSBwMS50ZW5zb3IuZGltW20gLSAxXSkge1xuICAgICAgc3RvcChcImNvbnRyYWN0OiBpbmRleCBvdXQgb2YgcmFuZ2VcIik7XG4gICAgfVxuICAgIGwtLTtcbiAgICBtLS07XG4gICAgbiA9IHAxLnRlbnNvci5kaW1bbF07XG4gICAgLy8gbmVsZW0gaXMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBcImJcIlxuICAgIG5lbGVtID0gMTtcbiAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gbmRpbTsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgIGlmIChpICE9PSBsICYmIGkgIT09IG0pIHtcbiAgICAgICAgbmVsZW0gKj0gcDEudGVuc29yLmRpbVtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyBcIm5lbGVtOlwiICsgbmVsZW1cbiAgICBwMiA9IGFsbG9jX3RlbnNvcihuZWxlbSk7XG4gICAgLy9jb25zb2xlLmxvZyBcInAyOlwiICsgcDJcbiAgICBwMi50ZW5zb3IubmRpbSA9IG5kaW0gLSAyO1xuICAgIGogPSAwO1xuICAgIGZvciAoaSA9IGkxID0gMCwgcmVmMSA9IG5kaW07ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgIGlmIChpICE9PSBsICYmIGkgIT09IG0pIHtcbiAgICAgICAgcDIudGVuc29yLmRpbVtqKytdID0gcDEudGVuc29yLmRpbVtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgYSA9IHAxLnRlbnNvci5lbGVtO1xuICAgIGIgPSBwMi50ZW5zb3IuZWxlbTtcbi8vY29uc29sZS5sb2cgXCJhOiBcIiArIGFcbi8vY29uc29sZS5sb2cgXCJiOiBcIiArIGJcbiAgICBmb3IgKGkgPSBqMSA9IDAsIHJlZjIgPSBuZGltOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBhaVtpXSA9IDA7XG4gICAgICBhbltpXSA9IHAxLnRlbnNvci5kaW1baV07XG4gICAgfVxuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMyA9IG5lbGVtOyAoMCA8PSByZWYzID8gbDEgPCByZWYzIDogbDEgPiByZWYzKTsgaSA9IDAgPD0gcmVmMyA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwdXNoKHplcm8pO1xuICAgICAgZm9yIChqID0gbTEgPSAwLCByZWY0ID0gbjsgKDAgPD0gcmVmNCA/IG0xIDwgcmVmNCA6IG0xID4gcmVmNCk7IGogPSAwIDw9IHJlZjQgPyArK20xIDogLS1tMSkge1xuICAgICAgICBhaVtsXSA9IGo7XG4gICAgICAgIGFpW21dID0gajtcbiAgICAgICAgaCA9IDA7XG4gICAgICAgIGZvciAoayA9IG4xID0gMCwgcmVmNSA9IG5kaW07ICgwIDw9IHJlZjUgPyBuMSA8IHJlZjUgOiBuMSA+IHJlZjUpOyBrID0gMCA8PSByZWY1ID8gKytuMSA6IC0tbjEpIHtcbiAgICAgICAgICBoID0gKGggKiBhbltrXSkgKyBhaVtrXTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKGFbaF0pO1xuICAgICAgICAvL2NvbnNvbGUubG9nIFwiYVtoXTogXCIgKyBhW2hdXG4gICAgICAgIGFkZCgpO1xuICAgICAgfVxuICAgICAgLy9jb25zb2xlLmxvZyBcInRvczogXCIgKyBzdGFja1t0b3MtMV1cbiAgICAgIGJbaV0gPSBwb3AoKTtcbi8vY29uc29sZS5sb2cgXCJiW2ldOiBcIiArIGJbaV1cbiAgICAgIGZvciAoaiA9IG8xID0gcmVmNiA9IG5kaW0gLSAxOyAocmVmNiA8PSAwID8gbzEgPD0gMCA6IG8xID49IDApOyBqID0gcmVmNiA8PSAwID8gKytvMSA6IC0tbzEpIHtcbiAgICAgICAgaWYgKGogPT09IGwgfHwgaiA9PT0gbSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgrK2FpW2pdIDwgYW5bal0pIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBhaVtqXSA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZWxlbSA9PT0gMSkge1xuICAgICAgcmV0dXJuIHB1c2goYlswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoKHAyKTtcbiAgICB9XG4gIH07XG5cbiAgLy9jb25zb2xlLmxvZyBcInJldHVybmluZzogXCIgKyBzdGFja1t0b3MtMV1cbiAgLyogY29zID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICB4XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGNvc2luZSBvZiB4LlxuXG4gICovXG4gIEV2YWxfY29zID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBjb3NpbmUoKTtcbiAgfTtcblxuICBjb3NpbmUgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIGNvc2luZV9vZl9hbmdsZV9zdW0oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29zaW5lX29mX2FuZ2xlKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gVXNlIGFuZ2xlIHN1bSBmb3JtdWxhIGZvciBzcGVjaWFsIGFuZ2xlcy5cblxuICAvL2RlZmluZSBBIHAzXG4gIC8vZGVmaW5lIEIgcDRcbiAgY29zaW5lX29mX2FuZ2xlX3N1bSA9IGZ1bmN0aW9uKCkge1xuICAgIHAyID0gY2RyKHAxKTtcbiAgICB3aGlsZSAoaXNjb25zKHAyKSkge1xuICAgICAgcDQgPSBjYXIocDIpO1xuICAgICAgaWYgKGlzbnBpKHA0KSkgeyAvLyBwNCBpcyBCXG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgc3VidHJhY3QoKTtcbiAgICAgICAgcDMgPSBwb3AoKTtcbiAgICAgICAgcHVzaChwMyk7XG4gICAgICAgIGNvc2luZSgpO1xuICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgY29zaW5lKCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIHB1c2gocDMpO1xuICAgICAgICBzaW5lKCk7XG4gICAgICAgIHB1c2gocDQpO1xuICAgICAgICBzaW5lKCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHAyID0gY2RyKHAyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvc2luZV9vZl9hbmdsZSgpO1xuICB9O1xuXG4gIGNvc2luZV9vZl9hbmdsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkLCBuO1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woQVJDQ09TKSkge1xuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShwMSkpIHtcbiAgICAgIGQgPSBNYXRoLmNvcyhwMS5kKTtcbiAgICAgIGlmIChNYXRoLmFicyhkKSA8IDFlLTEwKSB7XG4gICAgICAgIGQgPSAwLjA7XG4gICAgICB9XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gY29zaW5lIGZ1bmN0aW9uIGlzIHN5bW1ldHJpYywgY29zKC14KSA9IGNvcyh4KVxuICAgIGlmIChpc25lZ2F0aXZlKHAxKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHAxID0gcG9wKCk7XG4gICAgfVxuICAgIC8vIGNvcyhhcmN0YW4oeCkpID0gMSAvIHNxcnQoMSArIHheMilcblxuICAgIC8vIHNlZSBwLiAxNzMgb2YgdGhlIENSQyBIYW5kYm9vayBvZiBNYXRoZW1hdGljYWwgU2NpZW5jZXNcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFSQ1RBTikpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIGFkZCgpO1xuICAgICAgcHVzaF9yYXRpb25hbCgtMSwgMik7XG4gICAgICBwb3dlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBtdWx0aXBseSBieSAxODAvcGkgdG8gZ28gZnJvbSByYWRpYW5zIHRvIGRlZ3JlZXMuXG4gICAgLy8gd2UgZ28gZnJvbSByYWRpYW5zIHRvIGRlZ3JlZXMgYmVjYXVzZSBpdCdzIG11Y2hcbiAgICAvLyBlYXNpZXIgdG8gY2FsY3VsYXRlIHN5bWJvbGljIHJlc3VsdHMgb2YgbW9zdCAobm90IGFsbCkgXCJjbGFzc2ljXCJcbiAgICAvLyBhbmdsZXMgKGUuZy4gMzAsNDUsNjAuLi4pIGlmIHdlIGNhbGN1bGF0ZSB0aGUgZGVncmVlc1xuICAgIC8vIGFuZCB0aGUgd2UgZG8gYSBzd2l0Y2ggb24gdGhhdC5cbiAgICAvLyBBbHRlcm5hdGl2ZWx5LCB3ZSBjb3VsZCBsb29rIGF0IHRoZSBmcmFjdGlvbiBvZiBwaVxuICAgIC8vIChlLmcuIDYwIGRlZ3JlZXMgaXMgMS8zIHBpKSBidXQgdGhhdCdzIG1vcmVcbiAgICAvLyBjb252b2x1dGVkIGFzIHdlJ2QgbmVlZCB0byBsb29rIGF0IGJvdGggbnVtZXJhdG9yIGFuZFxuICAgIC8vIGRlbm9taW5hdG9yLlxuICAgIHB1c2gocDEpO1xuICAgIHB1c2hfaW50ZWdlcigxODApO1xuICAgIG11bHRpcGx5KCk7XG4gICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICB9XG4gICAgZGl2aWRlKCk7XG4gICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgLy8gbW9zdCBcImdvb2RcIiAoaS5lLiBjb21wYWN0KSB0cmlnb25vbWV0cmljIHJlc3VsdHNcbiAgICAvLyBoYXBwZW4gZm9yIGEgcm91bmQgbnVtYmVyIG9mIGRlZ3JlZXMuIFRoZXJlIGFyZSBzb21lIGV4Y2VwdGlvbnNcbiAgICAvLyB0aG91Z2gsIGUuZy4gMjIuNSBkZWdyZWVzLCB3aGljaCB3ZSBkb24ndCBjYXB0dXJlIGhlcmUuXG4gICAgaWYgKG4gPCAwIHx8IGlzTmFOKG4pKSB7XG4gICAgICBwdXNoKHN5bWJvbChDT1MpKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbGlzdCgyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoIChuICUgMzYwKSB7XG4gICAgICBjYXNlIDkwOlxuICAgICAgY2FzZSAyNzA6XG4gICAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMCk7XG4gICAgICBjYXNlIDYwOlxuICAgICAgY2FzZSAzMDA6XG4gICAgICAgIHJldHVybiBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgY2FzZSAxMjA6XG4gICAgICBjYXNlIDI0MDpcbiAgICAgICAgcmV0dXJuIHB1c2hfcmF0aW9uYWwoLTEsIDIpO1xuICAgICAgY2FzZSA0NTpcbiAgICAgIGNhc2UgMzE1OlxuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHJldHVybiBtdWx0aXBseSgpO1xuICAgICAgY2FzZSAxMzU6XG4gICAgICBjYXNlIDIyNTpcbiAgICAgICAgcHVzaF9yYXRpb25hbCgtMSwgMik7XG4gICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gICAgICBjYXNlIDMwOlxuICAgICAgY2FzZSAzMzA6XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gICAgICBjYXNlIDE1MDpcbiAgICAgIGNhc2UgMjEwOlxuICAgICAgICBwdXNoX3JhdGlvbmFsKC0xLCAyKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDMpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgIGNhc2UgMTgwOlxuICAgICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHB1c2goc3ltYm9sKENPUykpO1xuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgcmV0dXJuIGxpc3QoMik7XG4gICAgfVxuICB9O1xuXG4gIEV2YWxfY29zaCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4geWNvc2goKTtcbiAgfTtcblxuICB5Y29zaCA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICB5eWNvc2goKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHl5Y29zaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkO1xuICAgIGQgPSAwLjA7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFSQ0NPU0gpKSB7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgZCA9IE1hdGguY29zaChwMS5kKTtcbiAgICAgIGlmIChNYXRoLmFicyhkKSA8IDFlLTEwKSB7XG4gICAgICAgIGQgPSAwLjA7XG4gICAgICB9XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgIHB1c2gob25lKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaF9zeW1ib2woQ09TSCk7XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIGxpc3QoMik7XG4gIH07XG5cbiAgLy8gdGhpcyBmdW5jdGlvbiBleHRyYWN0IHBhcnRzIHN1YnRyZWVzIGZyb20gYSB0cmVlLlxuICAvLyBJdCBpcyB1c2VkIGluIHR3b1xuICAvLyBwbGFjZXMgdGhhdCBoYXZlIHRvIGRvIHdpdGggcGF0dGVybiBtYXRjaGluZy5cbiAgLy8gT25lIGlzIGZvciBpbnRlZ3JhbHMsIHdoZXJlIGFuIGV4cHJlc3Npb24gb3IgaXRzXG4gIC8vIHN1YnBhcnRzIGFyZSBtYXRjaGVkIGFnYWluc3QgY2FzZXMgaW4gYW5cbiAgLy8gaW50ZWdyYWxzIHRhYmxlLlxuICAvLyBBbm90aGVyIG9uZSBpcyBmb3IgYXBwbHlnaW5nIHRyYW5mb3JtYXRpb24gcGF0dGVybnNcbiAgLy8gZGVmaW5lZCB2aWEgUEFUVEVSTiwgYWdhaW4gcGF0dGVybnMgYXJlIGFwcGxpZWQgdG9cbiAgLy8gZWl0aGVyIHRoZSB3aG9sZSBleHByZXNzaW9uIG9yIGFueSBvZiBpdHMgcGFydHMuXG5cbiAgLy8gdW5jbGVhciB0byBtZSBhdCB0aGUgbW9tZW50XG4gIC8vIHdoeSB0aGlzIGlzIGV4cG9zZWQgYXMgc29tZXRoaW5nIHRoYXQgY2FuXG4gIC8vIGJlIGV2YWxsZWQuIE5ldmVyIGNhbGxlZC5cbiAgRXZhbF9kZWNvbXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaDtcbiAgICBzYXZlKCk7XG4gICAgY29uc29sZS5sb2coXCJFdmFsX2RlY29tcCBpcyBiZWluZyBjYWxsZWQhISEhISEhISEhISEhISEhISEhIVwiKTtcbiAgICBoID0gdG9zO1xuICAgIHB1c2goc3ltYm9sKE5JTCkpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKHAxID09PSBzeW1ib2woTklMKSkge1xuICAgICAgZ3Vlc3MoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMSk7XG4gICAgfVxuICAgIGRlY29tcChmYWxzZSk7XG4gICAgbGlzdCh0b3MgLSBoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHB1c2hUcnlOb3RUb0R1cGxpY2F0ZSA9IGZ1bmN0aW9uKHRvQmVQdXNoZWQpIHtcbiAgICBpZiAodG9zID4gMCkge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29tcGFyaW5nIFwiICsgdG9CZVB1c2hlZCArIFwiIHRvOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICAgIH1cbiAgICAgIGlmIChlcXVhbCh0b0JlUHVzaGVkLCBzdGFja1t0b3MgLSAxXSkpIHtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJza2lwcGluZyBcIiArIHRvQmVQdXNoZWQgKyBcIiBiZWNhdXNlIGl0J3MgYWxyZWFkeSBvbiBzdGFjayBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHVzaCh0b0JlUHVzaGVkKTtcbiAgfTtcblxuICAvLyByZXR1cm5zIGNvbnN0YW50IGV4cHJlc3Npb25zIG9uIHRoZSBzdGFja1xuICBkZWNvbXAgPSBmdW5jdGlvbihnZW5lcmFsVHJhbnNmb3JtKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiREVDT01QT1NJTkcgXCIgKyBwMSk7XG4gICAgfVxuICAgIC8vIGlzIHRoZSBlbnRpcmUgZXhwcmVzc2lvbiBjb25zdGFudD9cbiAgICBpZiAoZ2VuZXJhbFRyYW5zZm9ybSkge1xuICAgICAgaWYgKCFpc2NvbnMocDEpKSB7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiIGdyb3VuZCB0aGluZzogXCIgKyBwMSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaFRyeU5vdFRvRHVwbGljYXRlKHAxKTtcbiAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChGaW5kKHAxLCBwMikgPT09IDApIHtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgZW50aXJlIGV4cHJlc3Npb24gaXMgY29uc3RhbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaFRyeU5vdFRvRHVwbGljYXRlKHAxKTtcbiAgICAgICAgLy9wdXNoKHAxKTsgICMgbWF5IG5lZWQgbGF0ZXIgZm9yIHB1c2hpbmcgYm90aCArYSwgLWFcbiAgICAgICAgLy9uZWdhdGUoKVxuICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gc3VtP1xuICAgIGlmIChpc2FkZChwMSkpIHtcbiAgICAgIGRlY29tcF9zdW0oZ2VuZXJhbFRyYW5zZm9ybSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHByb2R1Y3Q/XG4gICAgaWYgKGlzbXVsdGlwbHkocDEpKSB7XG4gICAgICBkZWNvbXBfcHJvZHVjdChnZW5lcmFsVHJhbnNmb3JtKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbmFpdmUgZGVjb21wIGlmIG5vdCBzdW0gb3IgcHJvZHVjdFxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCIgbmFpdmUgZGVjb21wXCIpO1xuICAgIH1cbiAgICBwMyA9IGNkcihwMSk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInN0YXJ0aWcgcDM6IFwiICsgcDMpO1xuICAgIH1cbiAgICB3aGlsZSAoaXNjb25zKHAzKSkge1xuICAgICAgLy8gZm9yIGEgZ2VuZXJhbCB0cmFuc2Zvcm1hdGlvbnMsXG4gICAgICAvLyB3ZSB3YW50IHRvIG1hdGNoIGFueSBwYXJ0IG9mIHRoZSB0cmVlIHNvXG4gICAgICAvLyB3ZSBuZWVkIHRvIHB1c2ggdGhlIHN1YnRyZWUgYXMgd2VsbFxuICAgICAgLy8gYXMgcmVjdXJzZSB0byBpdHMgcGFydHNcbiAgICAgIGlmIChnZW5lcmFsVHJhbnNmb3JtKSB7XG4gICAgICAgIHB1c2goY2FyKHAzKSk7XG4gICAgICB9XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWN1cnNpdmUgZGVjb21wb3NpdGlvblwiKTtcbiAgICAgIH1cbiAgICAgIHB1c2goY2FyKHAzKSk7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjYXIocDMpOiBcIiArIGNhcihwMykpO1xuICAgICAgfVxuICAgICAgcHVzaChwMik7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJwMjogXCIgKyBwMik7XG4gICAgICB9XG4gICAgICBkZWNvbXAoZ2VuZXJhbFRyYW5zZm9ybSk7XG4gICAgICBwMyA9IGNkcihwMyk7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgZGVjb21wX3N1bSA9IGZ1bmN0aW9uKGdlbmVyYWxUcmFuc2Zvcm0pIHtcbiAgICB2YXIgaDtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiIGRlY29tcG9zaW5nIHRoZSBzdW0gXCIpO1xuICAgIH1cbiAgICBoID0gMDtcbiAgICAvLyBkZWNvbXAgdGVybXMgaW52b2x2aW5nIHhcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMykpIHtcbiAgICAgIGlmIChGaW5kKGNhcihwMyksIHAyKSB8fCBnZW5lcmFsVHJhbnNmb3JtKSB7XG4gICAgICAgIHB1c2goY2FyKHAzKSk7XG4gICAgICAgIHB1c2gocDIpO1xuICAgICAgICBkZWNvbXAoZ2VuZXJhbFRyYW5zZm9ybSk7XG4gICAgICB9XG4gICAgICBwMyA9IGNkcihwMyk7XG4gICAgfVxuICAgIC8vIGFkZCB0b2dldGhlciBhbGwgY29uc3RhbnQgdGVybXNcbiAgICBoID0gdG9zO1xuICAgIHAzID0gY2RyKHAxKTtcbiAgICB3aGlsZSAoaXNjb25zKHAzKSkge1xuICAgICAgaWYgKEZpbmQoY2FyKHAzKSwgcDIpID09PSAwKSB7XG4gICAgICAgIHB1c2hUcnlOb3RUb0R1cGxpY2F0ZShjYXIocDMpKTtcbiAgICAgIH1cbiAgICAgIHAzID0gY2RyKHAzKTtcbiAgICB9XG4gICAgaWYgKHRvcyAtIGgpIHtcbiAgICAgIGFkZF9hbGwodG9zIC0gaCk7XG4gICAgICBwMyA9IHBvcCgpO1xuICAgICAgcHVzaFRyeU5vdFRvRHVwbGljYXRlKHAzKTtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgcmV0dXJuIG5lZ2F0ZSgpOyAvLyBuZWVkIGJvdGggK2EsIC1hIGZvciBzb21lIGludGVncmFsc1xuICAgIH1cbiAgfTtcblxuICBkZWNvbXBfcHJvZHVjdCA9IGZ1bmN0aW9uKGdlbmVyYWxUcmFuc2Zvcm0pIHtcbiAgICB2YXIgaDtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiIGRlY29tcG9zaW5nIHRoZSBwcm9kdWN0IFwiKTtcbiAgICB9XG4gICAgaCA9IDA7XG4gICAgLy8gZGVjb21wIGZhY3RvcnMgaW52b2x2aW5nIHhcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMykpIHtcbiAgICAgIGlmIChGaW5kKGNhcihwMyksIHAyKSB8fCBnZW5lcmFsVHJhbnNmb3JtKSB7XG4gICAgICAgIHB1c2goY2FyKHAzKSk7XG4gICAgICAgIHB1c2gocDIpO1xuICAgICAgICBkZWNvbXAoZ2VuZXJhbFRyYW5zZm9ybSk7XG4gICAgICB9XG4gICAgICBwMyA9IGNkcihwMyk7XG4gICAgfVxuICAgIC8vIG11bHRpcGx5IHRvZ2V0aGVyIGFsbCBjb25zdGFudCBmYWN0b3JzXG4gICAgaCA9IHRvcztcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMykpIHtcbiAgICAgIGlmIChGaW5kKGNhcihwMyksIHAyKSA9PT0gMCkge1xuICAgICAgICBwdXNoVHJ5Tm90VG9EdXBsaWNhdGUoY2FyKHAzKSk7XG4gICAgICB9XG4gICAgICBwMyA9IGNkcihwMyk7XG4gICAgfVxuICAgIGlmICh0b3MgLSBoKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbHlfYWxsKHRvcyAtIGgpO1xuICAgIH1cbiAgfTtcblxuICAvL3AzID0gcG9wKCk7ICAjIG1heSBuZWVkIGxhdGVyIGZvciBwdXNoaW5nIGJvdGggK2EsIC1hXG4gIC8vcHVzaChwMylcbiAgLy9wdXNoKHAzKVxuICAvL25lZ2F0ZSgpXG4gIC8vIFN0b3JlIGEgZnVuY3Rpb24gZGVmaW5pdGlvblxuXG4gIC8vIEV4YW1wbGU6XG5cbiAgLy8gICAgICBmKHgseSk9eF55XG5cbiAgLy8gRm9yIHRoaXMgZGVmaW5pdGlvbiwgcDEgcG9pbnRzIHRvIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlLlxuXG4gIC8vICAgICBwMVxuICAvLyAgICAgIHxcbiAgLy8gICBfX192X18gICAgX19fX19fICAgICAgICAgICAgICAgICAgICAgICAgX19fX19fIFxuICAvLyAgfENPTlMgIHwtPnxDT05TICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tPnxDT05TICB8XG4gIC8vICB8X19fX19ffCAgfF9fX19fX3wgICAgICAgICAgICAgICAgICAgICAgfF9fX19fX3xcbiAgLy8gICAgICB8ICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAvLyAgIF9fX3ZfXyAgICBfX192X18gICAgX19fX19fICAgIF9fX19fXyAgICBfX192X18gICAgX19fX19fICAgIF9fX19fX1xuICAvLyAgfFNFVFEgIHwgIHxDT05TICB8LT58Q09OUyAgfC0+fENPTlMgIHwgIHxDT05TICB8LT58Q09OUyAgfC0+fENPTlMgIHxcbiAgLy8gIHxfX19fX198ICB8X19fX19ffCAgfF9fX19fX3wgIHxfX19fX198ICB8X19fX19ffCAgfF9fX19fX3wgIHxfX19fX198XG4gIC8vICAgICAgICAgICAgICAgIHwgICAgICAgICB8ICAgICAgICAgfCAgICAgICAgIHwgICAgICAgICB8ICAgICAgICAgfFxuICAvLyAgICAgICAgICAgICBfX192X18gICAgX19fdl9fICAgIF9fX3ZfXyAgICBfX192X18gICAgX19fdl9fICAgIF9fX3ZfX1xuICAvLyAgICAgICAgICAgIHxTWU0gZiB8ICB8U1lNIHggfCAgfFNZTSB5IHwgIHxQT1dFUiB8ICB8U1lNIHggfCAgfFNZTSB5IHxcbiAgLy8gICAgICAgICAgICB8X19fX19ffCAgfF9fX19fX3wgIHxfX19fX198ICB8X19fX19ffCAgfF9fX19fX3wgIHxfX19fX198XG5cbiAgLy8gdGhlIHJlc3VsdCAoaW4gZikgaXMgYSBGVU5DVElPTiBub2RlXG4gIC8vIHRoYXQgY29udGFpbnMgYm90aCB0aGUgYm9keSBhbmQgdGhlIGFyZ3VtZW50IGxpc3QuXG5cbiAgLy8gV2UgaGF2ZVxuXG4gIC8vICBjYWFkcihwMSkgcG9pbnRzIHRvIHRoZSBmdW5jdGlvbiBuYW1lIGkuZS4gZlxuICAvLyAgY2RhZHIocDEpIHBvaW50cyB0byB0aGUgYXJndW1lbnRzIGkuZS4gdGhlIGxpc3QgKHggeSlcbiAgLy8gIGNhZGRyKHAxKSBwb2ludHMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkgaS5lLiAocG93ZXIgeCB5KVxuXG4gIC8vZGVmaW5lIEYgcDMgIyBGIHBvaW50cyB0byB0aGUgZnVuY3Rpb24gbmFtZVxuICAvL2RlZmluZSBBIHA0ICMgQSBwb2ludHMgdG8gdGhlIGFyZ3VtZW50IGxpc3RcbiAgLy9kZWZpbmUgQiBwNSAjIEIgcG9pbnRzIHRvIHRoZSBmdW5jdGlvbiBib2R5XG4gIGRlZmluZV91c2VyX2Z1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcDMgPSBjYWFkcihwMSk7XG4gICAgcDQgPSBjZGFkcihwMSk7XG4gICAgcDUgPSBjYWRkcihwMSk7XG4gICAgaWYgKCFpc3N5bWJvbChwMykpIHsgLy8gcDMgaXMgRlxuICAgICAgc3RvcChcImZ1bmN0aW9uIG5hbWU/XCIpO1xuICAgIH1cbiAgICAvLyBldmFsdWF0ZSBmdW5jdGlvbiBib2R5IChtYXliZSlcbiAgICBpZiAoY2FyKHA1KSA9PT0gc3ltYm9sKEVWQUwpKSB7IC8vIHA1IGlzIEJcbiAgICAgIHB1c2goY2FkcihwNSkpO1xuICAgICAgRXZhbCgpO1xuICAgICAgcDUgPSBwb3AoKTsgLy8gcDUgaXMgQlxuICAgIH1cbiAgICBcbiAgICAvLyBub3RlIGhvdywgdW5sZXNzIGV4cGxpY2l0bHkgZm9yY2VkIGJ5IGFuIGV2YWwsXG4gICAgLy8gKGhhbmRsZWQgYnkgdGhlIGlmIGp1c3QgYWJvdmUpXG4gICAgLy8gd2UgZG9uJ3QgZXZhbC9zaW1wbGlmeVxuICAgIC8vIHRoZSBib2R5LlxuICAgIC8vIFdoeT8gYmVjYXVzZSBpdCdzIHRoZSBlYXNpZXN0IHdheVxuICAgIC8vIHRvIHNvbHZlIHNjb3BlIHByb2JsZW1zIGkuZS5cbiAgICAvLyAgIHggPSAwXG4gICAgLy8gICBmKHgpID0geCArIDFcbiAgICAvLyAgIGYoNCkgIyB3b3VsZCByZXBseSAxXG4gICAgLy8gd2hpY2ggd291bGQgbmVlZCB0byBvdGhlcndpc2VcbiAgICAvLyBiZSBzb2x2ZWQgYnkgc29tZSBzY29wZSBkZXZpY2VcbiAgICAvLyBzb21laG93XG4gICAgcHVzaF9zeW1ib2woRlVOQ1RJT04pO1xuICAgIHB1c2gocDUpO1xuICAgIHB1c2gocDQpO1xuICAgIGxpc3QoMyk7XG4gICAgcDUgPSBwb3AoKTtcbiAgICBzZXRfYmluZGluZyhwMywgcDUpO1xuICAgIHJldHVybiBwdXNoX3N5bWJvbChOSUwpO1xuICB9O1xuXG4gIEV2YWxfZnVuY3Rpb25fcmVmZXJlbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHB1c2gocDEpO1xuICB9O1xuXG4gIC8qIGRlZmludCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgZix4LGEsYlsseSxjLGQuLi5dXG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIGRlZmluaXRlIGludGVncmFsIG9mIGYgd2l0aCByZXNwZWN0IHRvIHggZXZhbHVhdGVkIGZyb20gXCJhXCIgdG8gYi5cbiAgVGhlIGFyZ3VtZW50IGxpc3QgY2FuIGJlIGV4dGVuZGVkIGZvciBtdWx0aXBsZSBpbnRlZ3JhbHMgKG9yIFwiaXRlcmF0ZWRcbiAgaW50ZWdyYWxzXCIpLCBmb3IgZXhhbXBsZSBhIGRvdWJsZSBpbnRlZ3JhbCAod2hpY2ggY2FuIHJlcHJlc2VudCBmb3JcbiAgZXhhbXBsZSBhIHZvbHVtZSB1bmRlciBhIHN1cmZhY2UpLCBvciBhIHRyaXBsZSBpbnRlZ3JhbCwgZXRjLiBGb3JcbiAgZXhhbXBsZSwgZGVmaW50KGYseCxhLGIseSxjLGQpLlxuXG4gICovXG4gIC8vZGVmaW5lIEYgcDJcbiAgLy9kZWZpbmUgWCBwM1xuICAvL2RlZmluZSBBIHA0XG4gIC8vZGVmaW5lIEIgcDVcbiAgRXZhbF9kZWZpbnQgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDIgPSBwb3AoKTsgLy8gcDIgaXMgRlxuICAgIHAxID0gY2RkcihwMSk7XG4gICAgLy8gZGVmaW50IGNhbiBoYW5kbGUgbXVsdGlwbGVcbiAgICAvLyBpbnRlZ3JhbHMsIHNvIHdlIGxvb3Agb3ZlciB0aGVcbiAgICAvLyBtdWx0aXBsZSBpbnRlZ3JhbHMgaGVyZVxuICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgRXZhbCgpO1xuICAgICAgcDMgPSBwb3AoKTsgLy8gcDMgaXMgWFxuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHA0ID0gcG9wKCk7IC8vIHA0IGlzIEFcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBwNSA9IHBvcCgpOyAvLyBwNSBpcyBCXG4gICAgICBcbiAgICAgIC8vIG9idGFpbiB0aGUgcHJpbWl0aXZlIG9mIEYgYWdhaW5zdCB0aGVcbiAgICAgIC8vIHNwZWNpZmllZCB2YXJpYWJsZSBYXG4gICAgICAvLyBub3RlIHRoYXQgdGhlIHByaW1pdGl2ZSBjaGFuZ2VzIG92ZXJcbiAgICAgIC8vIHRoZSBjYWxjdWxhdGlvbiBvZiB0aGUgbXVsdGlwbGVcbiAgICAgIC8vIGludGVncmFscy5cbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBpbnRlZ3JhbCgpO1xuICAgICAgcDIgPSBwb3AoKTsgLy8gY29udGFpbnMgdGhlIGFudGlkZXJpdmF0aXZlIG9mIEZcbiAgICAgIFxuICAgICAgLy8gZXZhbHVhdGUgdGhlIGludGVncmFsIGluIEFcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBwdXNoKHA1KTtcbiAgICAgIHN1YnN0KCk7XG4gICAgICBFdmFsKCk7XG4gICAgICAvLyBldmFsdWF0ZSB0aGUgaW50ZWdyYWwgaW4gQlxuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgc3Vic3QoKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIC8vIGludGVncmFsIGJldHdlZW4gQiBhbmQgQSBpcyB0aGVcbiAgICAgIC8vIHN1YnRyYWN0aW9uLiBOb3RlIHRoYXQgdGhpcyBjb3VsZFxuICAgICAgLy8gYmUgYSBudW1iZXIgYnV0IGFsc28gYSBmdW5jdGlvbi5cbiAgICAgIC8vIGFuZCB3ZSBtaWdodCBoYXZlIHRvIGludGVncmF0ZSB0aGlzXG4gICAgICAvLyBudW1iZXIvZnVuY3Rpb24gYWdhaW4gZG9pbmcgdGhlIHdoaWxlXG4gICAgICAvLyBsb29wIGFnYWluIGlmIHRoaXMgaXMgYSBtdWx0aXBsZVxuICAgICAgLy8gaW50ZWdyYWwuXG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgcDIgPSBwb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDIpO1xuICB9O1xuXG4gIEV2YWxfZGVncmVlID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAocDEgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICBndWVzcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZ3JlZSgpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgRmluZCB0aGUgZGVncmVlIG9mIGEgcG9seW5vbWlhbFxuXG4gIC8vICBJbnB1dDogICAgdG9zLTIgICAgcCh4KVxuXG4gIC8vICAgICAgdG9zLTEgICAgeFxuXG4gIC8vICBPdXRwdXQ6ICAgIFJlc3VsdCBvbiBzdGFja1xuXG4gIC8vICBOb3RlOiBGaW5kcyB0aGUgbGFyZ2VzdCBudW1lcmljYWwgcG93ZXIgb2YgeC4gRG9lcyBub3QgY2hlY2sgZm9yXG4gIC8vICB3ZWlyZG5lc3MgaW4gcCh4KS5cblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy9kZWZpbmUgUE9MWSBwMVxuICAvL2RlZmluZSBYIHAyXG4gIC8vZGVmaW5lIERFR1JFRSBwM1xuICBkZWdyZWUgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHAzID0gemVybztcbiAgICB5eWRlZ3JlZShwMSk7XG4gICAgcHVzaChwMyk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICB5eWRlZ3JlZSA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgcmVzdWx0cztcbiAgICBpZiAoZXF1YWwocCwgcDIpKSB7XG4gICAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAzKSkge1xuICAgICAgICByZXR1cm4gcDMgPSBvbmU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYXIocCkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIGlmIChlcXVhbChjYWRyKHApLCBwMikgJiYgaXNOdW1lcmljQXRvbShjYWRkcihwKSkgJiYgbGVzc3AocDMsIGNhZGRyKHApKSkge1xuICAgICAgICByZXR1cm4gcDMgPSBjYWRkcihwKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzY29ucyhwKSkge1xuICAgICAgcCA9IGNkcihwKTtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgICAgeXlkZWdyZWUoY2FyKHApKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHAgPSBjZHIocCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICB9O1xuXG4gIEV2YWxfZGVub21pbmF0b3IgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIGRlbm9taW5hdG9yKCk7XG4gIH07XG5cbiAgZGVub21pbmF0b3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCwgdGhlQXJndW1lbnQ7XG4gICAgaCA9IDA7XG4gICAgdGhlQXJndW1lbnQgPSBwb3AoKTtcbiAgICAvL2NvbnNvbGUudHJhY2UgXCJkZW5vbWluYXRvciBvZjogXCIgKyB0aGVBcmd1bWVudFxuICAgIGlmIChjYXIodGhlQXJndW1lbnQpID09PSBzeW1ib2woQUREKSkge1xuICAgICAgcHVzaCh0aGVBcmd1bWVudCk7XG4gICAgICByYXRpb25hbGl6ZSgpO1xuICAgICAgdGhlQXJndW1lbnQgPSBwb3AoKTtcbiAgICB9XG4gICAgaWYgKGNhcih0aGVBcmd1bWVudCkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgIWlzcGx1c29uZShjYXIoY2RyKHRoZUFyZ3VtZW50KSkpKSB7XG4gICAgICBoID0gdG9zO1xuICAgICAgdGhlQXJndW1lbnQgPSBjZHIodGhlQXJndW1lbnQpO1xuICAgICAgd2hpbGUgKGlzY29ucyh0aGVBcmd1bWVudCkpIHtcbiAgICAgICAgcHVzaChjYXIodGhlQXJndW1lbnQpKTtcbiAgICAgICAgZGVub21pbmF0b3IoKTtcbiAgICAgICAgdGhlQXJndW1lbnQgPSBjZHIodGhlQXJndW1lbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG11bHRpcGx5X2FsbCh0b3MgLSBoKTtcbiAgICB9IGVsc2UgaWYgKGlzcmF0aW9uYWwodGhlQXJndW1lbnQpKSB7XG4gICAgICBwdXNoKHRoZUFyZ3VtZW50KTtcbiAgICAgIHJldHVybiBtcF9kZW5vbWluYXRvcigpO1xuICAgIH0gZWxzZSBpZiAoY2FyKHRoZUFyZ3VtZW50KSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBpc25lZ2F0aXZldGVybShjYWRkcih0aGVBcmd1bWVudCkpKSB7XG4gICAgICBwdXNoKHRoZUFyZ3VtZW50KTtcbiAgICAgIHJldHVybiByZWNpcHJvY2F0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHVzaChvbmUpO1xuICAgIH1cbiAgfTtcblxuICAvLyBkZXJpdmF0aXZlXG5cbiAgLy9kZWZpbmUgRiBwM1xuICAvL2RlZmluZSBYIHA0XG4gIC8vZGVmaW5lIE4gcDVcbiAgRXZhbF9kZXJpdmF0aXZlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvTm90aGluZywgaSwgaTEsIG4sIG8sIHJlZiwgcmVmMTtcbiAgICAvLyBldmFsdWF0ZSAxc3QgYXJnIHRvIGdldCBmdW5jdGlvbiBGXG4gICAgaSA9IDA7XG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHB1c2goY2FyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIC8vIGV2YWx1YXRlIDJuZCBhcmcgYW5kIHRoZW4uLi5cblxuICAgIC8vIGV4YW1wbGUgIHJlc3VsdCBvZiAybmQgYXJnICB3aGF0IHRvIGRvXG5cbiAgICAvLyBkKGYpICAgIG5pbCAgICAgIGd1ZXNzIFgsIE4gPSBuaWxcbiAgICAvLyBkKGYsMikgIDIgICAgICBndWVzcyBYLCBOID0gMlxuICAgIC8vIGQoZix4KSAgeCAgICAgIFggPSB4LCBOID0gbmlsXG4gICAgLy8gZChmLHgsMikgIHggICAgICBYID0geCwgTiA9IDJcbiAgICAvLyBkKGYseCx5KSAgeCAgICAgIFggPSB4LCBOID0geVxuICAgIHAxID0gY2RyKHAxKTtcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGlmIChwMiA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIGd1ZXNzKCk7XG4gICAgICBwdXNoKHN5bWJvbChOSUwpKTtcbiAgICB9IGVsc2UgaWYgKGlzTnVtZXJpY0F0b20ocDIpKSB7XG4gICAgICBndWVzcygpO1xuICAgICAgcHVzaChwMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICB9XG4gICAgcDUgPSBwb3AoKTtcbiAgICBwNCA9IHBvcCgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIC8vIHA1IChOKSBtaWdodCBiZSBhIHN5bWJvbCBpbnN0ZWFkIG9mIGEgbnVtYmVyXG4gICAgICBpZiAoaXNOdW1lcmljQXRvbShwNSkpIHsgLy8gcDUgaXMgTlxuICAgICAgICBwdXNoKHA1KTtcbiAgICAgICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgICAgIGlmIChpc05hTihuKSkge1xuICAgICAgICAgIHN0b3AoXCJudGggZGVyaXZhdGl2ZTogY2hlY2sgblwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIGlmIChuID49IDApIHtcbiAgICAgICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICAgICAgcHVzaChwNCk7XG4gICAgICAgICAgZGVyaXZhdGl2ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gLW47XG4gICAgICAgIGZvciAoaSA9IGkxID0gMCwgcmVmMSA9IG47ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgICBpbnRlZ3JhbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwMyA9IHBvcCgpO1xuICAgICAgaWYgKHA1ID09PSBzeW1ib2woTklMKSkgeyAvLyBwNSBpcyBOXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gb3RoZXJ3aXNlLi4uXG5cbiAgICAgIC8vIE4gICAgYXJnMSAgICB3aGF0IHRvIGRvXG5cbiAgICAgIC8vIG51bWJlciAgbmlsICAgIGJyZWFrXG4gICAgICAvLyBudW1iZXIgIG51bWJlciAgICBOID0gYXJnMSwgY29udGludWVcbiAgICAgIC8vIG51bWJlciAgc3ltYm9sICAgIFggPSBhcmcxLCBOID0gYXJnMiwgY29udGludWVcblxuICAgICAgLy8gc3ltYm9sICBuaWwgICAgWCA9IE4sIE4gPSBuaWwsIGNvbnRpbnVlXG4gICAgICAvLyBzeW1ib2wgIG51bWJlciAgICBYID0gTiwgTiA9IGFyZzEsIGNvbnRpbnVlXG4gICAgICAvLyBzeW1ib2wgIHN5bWJvbCAgICBYID0gTiwgTiA9IGFyZzEsIGNvbnRpbnVlXG4gICAgICBpZiAoaXNOdW1lcmljQXRvbShwNSkpIHsgLy8gcDUgaXMgTlxuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgIEV2YWwoKTtcbiAgICAgICAgcDUgPSBwb3AoKTtcbiAgICAgICAgaWYgKHA1ID09PSBzeW1ib2woTklMKSkgeyAvLyBwNSBpcyBOXG4gICAgICAgICAgYnJlYWs7IC8vIGFyZ2xpc3QgZXhoYXVzdGVkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtZXJpY0F0b20ocDUpKSB7IC8vIHA1IGlzIE5cbiAgICAgICAgICBkb05vdGhpbmcgPSAxOyAvLyBOID0gYXJnMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHA0ID0gcDU7XG4gICAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgICAgRXZhbCgpO1xuICAgICAgICAgIHA1ID0gcG9wKCk7IC8vIHA1IGlzIE4gICMgTiA9IGFyZzJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcDQgPSBwNTtcbiAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBFdmFsKCk7XG4gICAgICAgIHA1ID0gcG9wKCk7IC8vIHA1IGlzIE4gICMgTiA9IGFyZzFcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDMpOyAvLyBwMyBpcyBGICMgZmluYWwgcmVzdWx0XG4gIH07XG5cbiAgZGVyaXZhdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzTnVtZXJpY0F0b20ocDIpKSB7XG4gICAgICBzdG9wKFwidW5kZWZpbmVkIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAoaXN0ZW5zb3IocDEpKSB7XG4gICAgICBpZiAoaXN0ZW5zb3IocDIpKSB7XG4gICAgICAgIGRfdGVuc29yX3RlbnNvcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZF90ZW5zb3Jfc2NhbGFyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc3RlbnNvcihwMikpIHtcbiAgICAgICAgZF9zY2FsYXJfdGVuc29yKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkX3NjYWxhcl9zY2FsYXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBkX3NjYWxhcl9zY2FsYXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNzeW1ib2wocDIpKSB7XG4gICAgICByZXR1cm4gZF9zY2FsYXJfc2NhbGFyXzEoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRXhhbXBsZTogZChzaW4oY29zKHgpKSxjb3MoeCkpXG4gICAgICAvLyBSZXBsYWNlIGNvcyh4KSA8LSBYLCBmaW5kIGRlcml2YXRpdmUsIHRoZW4gZG8gWCA8LSBjb3MoeClcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSk7XG4gICAgICBzdWJzdCgpO1xuICAgICAgcHVzaChzeW1ib2woU0VDUkVUWCkpO1xuICAgICAgZGVyaXZhdGl2ZSgpO1xuICAgICAgcHVzaChzeW1ib2woU0VDUkVUWCkpO1xuICAgICAgcHVzaChwMik7XG4gICAgICByZXR1cm4gc3Vic3QoKTsgLy8gY29zKFgpIC0+IGNvcyhjb3MoeCkpXG4gICAgfVxuICB9O1xuXG4gIGRfc2NhbGFyX3NjYWxhcl8xID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gZCh4LHgpP1xuICAgIGlmIChlcXVhbChwMSwgcDIpKSB7XG4gICAgICBwdXNoKG9uZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXNjb25zKHAxKSkge1xuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzYWRkKHAxKSkge1xuICAgICAgZHN1bSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgZHByb2R1Y3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIGRwb3dlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKERFUklWQVRJVkUpKSB7XG4gICAgICBkZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKExPRykpIHtcbiAgICAgIGRsb2coKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChTSU4pKSB7XG4gICAgICBkc2luKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woQ09TKSkge1xuICAgICAgZGNvcygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFRBTikpIHtcbiAgICAgIGR0YW4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBUkNTSU4pKSB7XG4gICAgICBkYXJjc2luKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woQVJDQ09TKSkge1xuICAgICAgZGFyY2NvcygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFSQ1RBTikpIHtcbiAgICAgIGRhcmN0YW4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChTSU5IKSkge1xuICAgICAgZHNpbmgoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChDT1NIKSkge1xuICAgICAgZGNvc2goKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChUQU5IKSkge1xuICAgICAgZHRhbmgoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBUkNTSU5IKSkge1xuICAgICAgZGFyY3NpbmgoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBUkNDT1NIKSkge1xuICAgICAgZGFyY2Nvc2goKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBUkNUQU5IKSkge1xuICAgICAgZGFyY3RhbmgoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBQlMpKSB7XG4gICAgICBkYWJzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woU0dOKSkge1xuICAgICAgZHNnbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEhFUk1JVEUpKSB7XG4gICAgICBkaGVybWl0ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEVSRikpIHtcbiAgICAgIGRlcmYoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChFUkZDKSkge1xuICAgICAgZGVyZmMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChCRVNTRUxKKSkge1xuICAgICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihjYWRkcihwMSkpKSB7XG4gICAgICAgIGRiZXNzZWxqMCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGJlc3NlbGpuKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woQkVTU0VMWSkpIHtcbiAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoY2FkZHIocDEpKSkge1xuICAgICAgICBkYmVzc2VseTAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRiZXNzZWx5bigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKElOVEVHUkFMKSAmJiBjYWRkcihwMSkgPT09IHAyKSB7XG4gICAgICBkZXJpdmF0aXZlX29mX2ludGVncmFsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBkZnVuY3Rpb24oKTtcbiAgfTtcblxuICBkc3VtID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGg7XG4gICAgaCA9IHRvcztcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGRlcml2YXRpdmUoKTtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZF9hbGwodG9zIC0gaCk7XG4gIH07XG5cbiAgZHByb2R1Y3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaTEsIGosIG4sIG8sIHJlZiwgcmVmMTtcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBuID0gMDtcbiAgICBuID0gbGVuZ3RoKHAxKSAtIDE7XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBwMyA9IGNkcihwMSk7XG4gICAgICBmb3IgKGogPSBpMSA9IDAsIHJlZjEgPSBuOyAoMCA8PSByZWYxID8gaTEgPCByZWYxIDogaTEgPiByZWYxKTsgaiA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgIHB1c2goY2FyKHAzKSk7XG4gICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgcHVzaChwMik7XG4gICAgICAgICAgZGVyaXZhdGl2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHAzID0gY2RyKHAzKTtcbiAgICAgIH1cbiAgICAgIG11bHRpcGx5X2FsbChuKTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZF9hbGwobik7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICAgICAgIHZcbiAgLy8gIHkgPSB1XG5cbiAgLy8gIGxvZyB5ID0gdiBsb2cgdVxuXG4gIC8vICAxIGR5ICAgdiBkdSAgICAgICAgICAgZHZcbiAgLy8gIC0gLS0gPSAtIC0tICsgKGxvZyB1KSAtLVxuICAvLyAgeSBkeCAgIHUgZHggICAgICAgICAgIGR4XG5cbiAgLy8gIGR5ICAgIHYgIHYgZHUgICAgICAgICAgIGR2XG4gIC8vICAtLSA9IHUgICgtIC0tICsgKGxvZyB1KSAtLSlcbiAgLy8gIGR4ICAgICAgIHUgZHggICAgICAgICAgIGR4XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBkcG93ZXIgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgZGl2aWRlKCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChwMik7XG4gICAgZGVyaXZhdGl2ZSgpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgbG9nYXJpdGhtKCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGFkZCgpO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiBtdWx0aXBseSgpO1xuICB9O1xuXG4gIGRsb2cgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBkZXJpdmF0aXZlKCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcmV0dXJuIGRpdmlkZSgpO1xuICB9O1xuXG4gIC8vICBkZXJpdmF0aXZlIG9mIGRlcml2YXRpdmVcblxuICAvLyAgZXhhbXBsZTogZChkKGYoeCx5KSx5KSx4KVxuXG4gIC8vICBwMSA9IGQoZih4LHkpLHkpXG5cbiAgLy8gIHAyID0geFxuXG4gIC8vICBjYWRyKHAxKSA9IGYoeCx5KVxuXG4gIC8vICBjYWRkcihwMSkgPSB5XG4gIGRkID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gZChmKHgseSkseClcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBkZXJpdmF0aXZlKCk7XG4gICAgcDMgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAzKSA9PT0gc3ltYm9sKERFUklWQVRJVkUpKSB7XG4gICAgICAvLyBzb3J0IGR4IHRlcm1zXG4gICAgICBwdXNoX3N5bWJvbChERVJJVkFUSVZFKTtcbiAgICAgIHB1c2hfc3ltYm9sKERFUklWQVRJVkUpO1xuICAgICAgcHVzaChjYWRyKHAzKSk7XG4gICAgICBpZiAobGVzc3AoY2FkZHIocDMpLCBjYWRkcihwMSkpKSB7XG4gICAgICAgIHB1c2goY2FkZHIocDMpKTtcbiAgICAgICAgbGlzdCgzKTtcbiAgICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgICAgICBsaXN0KDMpO1xuICAgICAgICBwdXNoKGNhZGRyKHAzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGlzdCgzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMyk7XG4gICAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgICByZXR1cm4gZGVyaXZhdGl2ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBkZXJpdmF0aXZlIG9mIGEgZ2VuZXJpYyBmdW5jdGlvblxuICBkZnVuY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgaWYgKHAzID09PSBzeW1ib2woTklMKSB8fCBGaW5kKHAzLCBwMikpIHtcbiAgICAgIHB1c2hfc3ltYm9sKERFUklWQVRJVkUpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHJldHVybiBsaXN0KDMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHVzaCh6ZXJvKTtcbiAgICB9XG4gIH07XG5cbiAgZHNpbiA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBjb3NpbmUoKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkY29zID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChwMik7XG4gICAgZGVyaXZhdGl2ZSgpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHNpbmUoKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIHJldHVybiBuZWdhdGUoKTtcbiAgfTtcblxuICBkdGFuID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChwMik7XG4gICAgZGVyaXZhdGl2ZSgpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIGNvc2luZSgpO1xuICAgIHB1c2hfaW50ZWdlcigtMik7XG4gICAgcG93ZXIoKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkYXJjc2luID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChwMik7XG4gICAgZGVyaXZhdGl2ZSgpO1xuICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgcG93ZXIoKTtcbiAgICBzdWJ0cmFjdCgpO1xuICAgIHB1c2hfcmF0aW9uYWwoLTEsIDIpO1xuICAgIHBvd2VyKCk7XG4gICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gIH07XG5cbiAgZGFyY2NvcyA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgIHBvd2VyKCk7XG4gICAgc3VidHJhY3QoKTtcbiAgICBwdXNoX3JhdGlvbmFsKC0xLCAyKTtcbiAgICBwb3dlcigpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcmV0dXJuIG5lZ2F0ZSgpO1xuICB9O1xuXG4gIC8vICAgICAgICBXaXRob3V0IHNpbXBsaWZ5ICBXaXRoIHNpbXBsaWZ5XG5cbiAgLy8gIGQoYXJjdGFuKHkveCkseCkgIC15Lyh4XjIqKHleMi94XjIrMSkpICAteS8oeF4yK3leMilcblxuICAvLyAgZChhcmN0YW4oeS94KSx5KSAgMS8oeCooeV4yL3heMisxKSkgIHgvKHheMit5XjIpXG4gIGRhcmN0YW4gPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBkZXJpdmF0aXZlKCk7XG4gICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICBwb3dlcigpO1xuICAgIGFkZCgpO1xuICAgIGludmVyc2UoKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIHJldHVybiBzaW1wbGlmeSgpO1xuICB9O1xuXG4gIGRzaW5oID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChwMik7XG4gICAgZGVyaXZhdGl2ZSgpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHljb3NoKCk7XG4gICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gIH07XG5cbiAgZGNvc2ggPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBkZXJpdmF0aXZlKCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgeXNpbmgoKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkdGFuaCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICB5Y29zaCgpO1xuICAgIHB1c2hfaW50ZWdlcigtMik7XG4gICAgcG93ZXIoKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkYXJjc2luaCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgcG93ZXIoKTtcbiAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgYWRkKCk7XG4gICAgcHVzaF9yYXRpb25hbCgtMSwgMik7XG4gICAgcG93ZXIoKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkYXJjY29zaCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgcG93ZXIoKTtcbiAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgIGFkZCgpO1xuICAgIHB1c2hfcmF0aW9uYWwoLTEsIDIpO1xuICAgIHBvd2VyKCk7XG4gICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gIH07XG5cbiAgZGFyY3RhbmggPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBkZXJpdmF0aXZlKCk7XG4gICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICBwb3dlcigpO1xuICAgIHN1YnRyYWN0KCk7XG4gICAgaW52ZXJzZSgpO1xuICAgIHJldHVybiBtdWx0aXBseSgpO1xuICB9O1xuXG4gIGRhYnMgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBkZXJpdmF0aXZlKCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgc2duKCk7XG4gICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gIH07XG5cbiAgZHNnbiA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBkaXJhYygpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgIHJldHVybiBtdWx0aXBseSgpO1xuICB9O1xuXG4gIGRoZXJtaXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChwMik7XG4gICAgZGVyaXZhdGl2ZSgpO1xuICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgIGFkZCgpO1xuICAgIGhlcm1pdGUoKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkZXJmID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgIHBvd2VyKCk7XG4gICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGV4cG9uZW50aWFsKCk7XG4gICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICB9XG4gICAgcHVzaF9yYXRpb25hbCgtMSwgMik7XG4gICAgcG93ZXIoKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkZXJmYyA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICBwb3dlcigpO1xuICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBleHBvbmVudGlhbCgpO1xuICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgIHB1c2hfZG91YmxlKE1hdGguUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoX3N5bWJvbChQSSk7XG4gICAgfVxuICAgIHB1c2hfcmF0aW9uYWwoLTEsIDIpO1xuICAgIHBvd2VyKCk7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBwdXNoX2ludGVnZXIoLTIpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChwMik7XG4gICAgZGVyaXZhdGl2ZSgpO1xuICAgIHJldHVybiBtdWx0aXBseSgpO1xuICB9O1xuXG4gIGRiZXNzZWxqMCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgYmVzc2VsaigpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkYmVzc2Vsam4gPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBkZXJpdmF0aXZlKCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgYWRkKCk7XG4gICAgYmVzc2VsaigpO1xuICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgZGl2aWRlKCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIGJlc3NlbGooKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGFkZCgpO1xuICAgIHJldHVybiBtdWx0aXBseSgpO1xuICB9O1xuXG4gIGRiZXNzZWx5MCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIHB1c2gocDIpO1xuICAgIGRlcml2YXRpdmUoKTtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgYmVzc2VsaigpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgfTtcblxuICBkYmVzc2VseW4gPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBkZXJpdmF0aXZlKCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgYWRkKCk7XG4gICAgYmVzc2VseSgpO1xuICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgZGl2aWRlKCk7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIGJlc3NlbHkoKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGFkZCgpO1xuICAgIHJldHVybiBtdWx0aXBseSgpO1xuICB9O1xuXG4gIGRlcml2YXRpdmVfb2ZfaW50ZWdyYWwgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcHVzaChjYWRyKHAxKSk7XG4gIH07XG5cbiAgREVUX2NoZWNrX2FyZyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghaXN0ZW5zb3IocDEpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2UgaWYgKHAxLnRlbnNvci5uZGltICE9PSAyKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2UgaWYgKHAxLnRlbnNvci5kaW1bMF0gIT09IHAxLnRlbnNvci5kaW1bMV0pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH07XG5cbiAgZGV0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEsIGksIGkxLCBuLCBvLCByZWYsIHJlZjE7XG4gICAgaSA9IDA7XG4gICAgbiA9IDA7XG4gICAgLy9VICoqYVxuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChERVRfY2hlY2tfYXJnKCkgPT09IDApIHtcbiAgICAgIHB1c2hfc3ltYm9sKERFVCk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG4gPSBwMS50ZW5zb3IubmVsZW07XG4gICAgYSA9IHAxLnRlbnNvci5lbGVtO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgaWYgKCFpc051bWVyaWNBdG9tKGFbaV0pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA9PT0gbikge1xuICAgICAgeXlkZXRnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IGkxID0gMCwgcmVmMSA9IHAxLnRlbnNvci5uZWxlbTsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGkgPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgICBwdXNoKHAxLnRlbnNvci5lbGVtW2ldKTtcbiAgICAgIH1cbiAgICAgIGRldGVybWluYW50KHAxLnRlbnNvci5kaW1bMF0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIGRldGVybWluYW50IG9mIG4gKiBuIG1hdHJpeCBlbGVtZW50cyBvbiB0aGUgc3RhY2tcbiAgZGV0ZXJtaW5hbnQgPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGEsIGJyZWFrRnJvbU91dGhlcldoaWxlLCBoLCBpLCBpMSwgaiwgaywgbywgcSwgcmVmLCByZWYxLCBzLCBzaWduXywgdDtcbiAgICBoID0gMDtcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBrID0gMDtcbiAgICBxID0gMDtcbiAgICBzID0gMDtcbiAgICBzaWduXyA9IDA7XG4gICAgdCA9IDA7XG4gICAgYSA9IFtdO1xuICAgIC8vaW50ICphLCAqYywgKmRcbiAgICBoID0gdG9zIC0gbiAqIG47XG4vL2EgPSAoaW50ICopIG1hbGxvYygzICogbiAqIHNpemVvZiAoaW50KSlcblxuICAgIC8vaWYgKGEgPT0gTlVMTClcbi8vICBvdXRfb2ZfbWVtb3J5KClcbiAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gbjsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgIGFbaV0gPSBpO1xuICAgICAgYVtpICsgbl0gPSAwO1xuICAgICAgYVtpICsgbiArIG5dID0gMTtcbiAgICB9XG4gICAgc2lnbl8gPSAxO1xuICAgIHB1c2goemVybyk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGlmIChzaWduXyA9PT0gMSkge1xuICAgICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gaTEgPSAwLCByZWYxID0gbjsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGkgPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgICBrID0gbiAqIGFbaV0gKyBpO1xuICAgICAgICBwdXNoKHN0YWNrW2ggKyBrXSk7XG4gICAgICAgIG11bHRpcGx5KCk7IC8vIEZJWE1FIC0tIHByb2JsZW0gaGVyZVxuICAgICAgfVxuICAgICAgYWRkKCk7XG4gICAgICAvLyBuZXh0IHBlcm11dGF0aW9uIChLbnV0aCdzIGFsZ29yaXRobSBQKVxuICAgICAgaiA9IG4gLSAxO1xuICAgICAgcyA9IDA7XG4gICAgICBicmVha0Zyb21PdXRoZXJXaGlsZSA9IGZhbHNlO1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgcSA9IGFbbiArIGpdICsgYVtuICsgbiArIGpdO1xuICAgICAgICBpZiAocSA8IDApIHtcbiAgICAgICAgICBhW24gKyBuICsgal0gPSAtYVtuICsgbiArIGpdO1xuICAgICAgICAgIGotLTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocSA9PT0gaiArIDEpIHtcbiAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWtGcm9tT3V0aGVyV2hpbGUgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMrKztcbiAgICAgICAgICBhW24gKyBuICsgal0gPSAtYVtuICsgbiArIGpdO1xuICAgICAgICAgIGotLTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChicmVha0Zyb21PdXRoZXJXaGlsZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHQgPSBhW2ogLSBhW24gKyBqXSArIHNdO1xuICAgICAgYVtqIC0gYVtuICsgal0gKyBzXSA9IGFbaiAtIHEgKyBzXTtcbiAgICAgIGFbaiAtIHEgKyBzXSA9IHQ7XG4gICAgICBhW24gKyBqXSA9IHE7XG4gICAgICBzaWduXyA9IC1zaWduXztcbiAgICB9XG4gICAgc3RhY2tbaF0gPSBzdGFja1t0b3MgLSAxXTtcbiAgICByZXR1cm4gbW92ZVRvcyhoICsgMSk7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBJbnB1dDogICAgTWF0cml4IG9uIHN0YWNrXG5cbiAgLy8gIE91dHB1dDogICAgRGV0ZXJtaW5hbnQgb24gc3RhY2tcblxuICAvLyAgTm90ZTpcblxuICAvLyAgVXNlcyBHYXVzc2lhbiBlbGltaW5hdGlvbiB3aGljaCBpcyBmYXN0ZXIgZm9yIG51bWVyaWNhbCBtYXRyaWNlcy5cblxuICAvLyAgR2F1c3NpYW4gRWxpbWluYXRpb24gd29ya3MgYnkgd2Fsa2luZyBkb3duIHRoZSBkaWFnb25hbCBhbmQgY2xlYXJpbmdcbiAgLy8gIG91dCB0aGUgY29sdW1ucyBiZWxvdyBpdC5cblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGRldGcgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoREVUX2NoZWNrX2FyZygpID09PSAwKSB7XG4gICAgICBwdXNoX3N5bWJvbChERVQpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBsaXN0KDIpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB5eWRldGcoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHl5ZGV0ZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBuLCBvLCByZWY7XG4gICAgaSA9IDA7XG4gICAgbiA9IDA7XG4gICAgbiA9IHAxLnRlbnNvci5kaW1bMF07XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG4gKiBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcHVzaChwMS50ZW5zb3IuZWxlbVtpXSk7XG4gICAgfVxuICAgIGx1X2RlY29tcChuKTtcbiAgICBtb3ZlVG9zKHRvcyAtIG4gKiBuKTtcbiAgICByZXR1cm4gcHVzaChwMSk7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBJbnB1dDogICAgbiAqIG4gbWF0cml4IGVsZW1lbnRzIG9uIHN0YWNrXG5cbiAgLy8gIE91dHB1dDogICAgcDEgIGRldGVybWluYW50XG5cbiAgLy8gICAgICBwMiAgbWFuZ2xlZFxuXG4gIC8vICAgICAgdXBwZXIgZGlhZ29uYWwgbWF0cml4IG9uIHN0YWNrXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBNID0gZnVuY3Rpb24oaCwgbiwgaSwgaikge1xuICAgIHJldHVybiBzdGFja1toICsgbiAqIGkgKyBqXTtcbiAgfTtcblxuICBzZXRNID0gZnVuY3Rpb24oaCwgbiwgaSwgaiwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3RhY2tbaCArIG4gKiBpICsgal0gPSB2YWx1ZTtcbiAgfTtcblxuICBsdV9kZWNvbXAgPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGQsIGgsIGksIGkxLCBqLCBqMSwgbDEsIG0xLCBvLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlZjYsIHJlZjcsIHJlZjg7XG4gICAgZCA9IDA7XG4gICAgaCA9IDA7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgaCA9IHRvcyAtIG4gKiBuO1xuICAgIHAxID0gb25lO1xuICAgIGZvciAoZCA9IG8gPSAwLCByZWYgPSBuIC0gMTsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBkID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgIC8vIGRpYWdvbmFsIGVsZW1lbnQgemVybz9cbiAgICAgIGlmIChlcXVhbChNKGgsIG4sIGQsIGQpLCB6ZXJvKSkge1xuLy8gZmluZCBhIG5ldyByb3dcbiAgICAgICAgZm9yIChpID0gaTEgPSByZWYxID0gZCArIDEsIHJlZjIgPSBuOyAocmVmMSA8PSByZWYyID8gaTEgPCByZWYyIDogaTEgPiByZWYyKTsgaSA9IHJlZjEgPD0gcmVmMiA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgICAgaWYgKCFlcXVhbChNKGgsIG4sIGksIGQpLCB6ZXJvKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBuKSB7XG4gICAgICAgICAgcDEgPSB6ZXJvO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4vLyBleGNoYW5nZSByb3dzXG4gICAgICAgIGZvciAoaiA9IGoxID0gcmVmMyA9IGQsIHJlZjQgPSBuOyAocmVmMyA8PSByZWY0ID8gajEgPCByZWY0IDogajEgPiByZWY0KTsgaiA9IHJlZjMgPD0gcmVmNCA/ICsrajEgOiAtLWoxKSB7XG4gICAgICAgICAgcDIgPSBNKGgsIG4sIGQsIGopO1xuICAgICAgICAgIHNldE0oaCwgbiwgZCwgaiwgTShoLCBuLCBpLCBqKSk7XG4gICAgICAgICAgc2V0TShoLCBuLCBpLCBqLCBwMik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmVnYXRlIGRldFxuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgIHAxID0gcG9wKCk7XG4gICAgICB9XG4gICAgICAvLyB1cGRhdGUgZGV0XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2goTShoLCBuLCBkLCBkKSk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcDEgPSBwb3AoKTtcbi8vIHVwZGF0ZSBsb3dlciBkaWFnb25hbCBtYXRyaXhcbiAgICAgIGZvciAoaSA9IGwxID0gcmVmNSA9IGQgKyAxLCByZWY2ID0gbjsgKHJlZjUgPD0gcmVmNiA/IGwxIDwgcmVmNiA6IGwxID4gcmVmNik7IGkgPSByZWY1IDw9IHJlZjYgPyArK2wxIDogLS1sMSkge1xuICAgICAgICAvLyBtdWx0aXBsaWVyXG4gICAgICAgIHB1c2goTShoLCBuLCBpLCBkKSk7XG4gICAgICAgIHB1c2goTShoLCBuLCBkLCBkKSk7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgcDIgPSBwb3AoKTtcbiAgICAgICAgLy8gdXBkYXRlIG9uZSByb3dcbiAgICAgICAgc2V0TShoLCBuLCBpLCBkLCB6ZXJvKTtcbiAgICAgICAgZm9yIChqID0gbTEgPSByZWY3ID0gZCArIDEsIHJlZjggPSBuOyAocmVmNyA8PSByZWY4ID8gbTEgPCByZWY4IDogbTEgPiByZWY4KTsgaiA9IHJlZjcgPD0gcmVmOCA/ICsrbTEgOiAtLW0xKSB7XG4gICAgICAgICAgcHVzaChNKGgsIG4sIGQsIGopKTtcbiAgICAgICAgICBwdXNoKHAyKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2goTShoLCBuLCBpLCBqKSk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgc2V0TShoLCBuLCBpLCBqLCBwb3AoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gbGFzdCBkaWFnb25hbCBlbGVtZW50XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChNKGgsIG4sIG4gLSAxLCBuIC0gMSkpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcmV0dXJuIHAxID0gcG9wKCk7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBBdXRob3IgOiBwaGlsaXBwZS5iaWxsZXRAbm9vcy5mclxuXG4gIC8vICBEaXJhYyBmdW5jdGlvbiBkaXJhYyh4KVxuICAvLyAgZGlyYWMoLXgpPWRpcmFjKHgpXG4gIC8vICBkaXJhYyhiLWEpPWRpcmFjKGEtYilcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBFdmFsX2RpcmFjID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBkaXJhYygpO1xuICB9O1xuXG4gIGRpcmFjID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHlkaXJhYygpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy9kZWZpbmUgcDEgcDFcbiAgeWRpcmFjID0gZnVuY3Rpb24oKSB7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNkb3VibGUocDEpKSB7XG4gICAgICBpZiAocDEuZCA9PT0gMCkge1xuICAgICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNyYXRpb25hbChwMSkpIHtcbiAgICAgIGlmIChNWkVSTyhtbXVsKHAxLnEuYSwgcDEucS5iKSkpIHtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIHB1c2hfc3ltYm9sKERJUkFDKTtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgbGlzdCgyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzbmVnYXRpdmV0ZXJtKHAxKSkge1xuICAgICAgcHVzaF9zeW1ib2woRElSQUMpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc25lZ2F0aXZldGVybShwMSkgfHwgKGNhcihwMSkgPT09IHN5bWJvbChBREQpICYmIGlzbmVnYXRpdmV0ZXJtKGNhZHIocDEpKSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICBwMSA9IHBvcCgpO1xuICAgIH1cbiAgICBwdXNoX3N5bWJvbChESVJBQyk7XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIGxpc3QoMik7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBHZW5lcmF0ZSBhbGwgZGl2aXNvcnMgb2YgYSB0ZXJtXG5cbiAgLy8gIElucHV0OiAgICBUZXJtIG9uIHN0YWNrIChmYWN0b3IgKiBmYWN0b3IgKiAuLi4pXG5cbiAgLy8gIE91dHB1dDogICAgRGl2aXNvcnMgb24gc3RhY2tcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGRpdmlzb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGgsIGksIG4sIG8sIHJlZiwgc3Vic2V0T2ZTdGFjaztcbiAgICBpID0gMDtcbiAgICBoID0gMDtcbiAgICBuID0gMDtcbiAgICBzYXZlKCk7XG4gICAgaCA9IHRvcyAtIDE7XG4gICAgZGl2aXNvcnNfb25zdGFjaygpO1xuICAgIG4gPSB0b3MgLSBoO1xuICAgIC8vcXNvcnQoc3RhY2sgKyBoLCBuLCBzaXplb2YgKFUgKiksIF9fY21wKVxuICAgIHN1YnNldE9mU3RhY2sgPSBzdGFjay5zbGljZShoLCBoICsgbik7XG4gICAgc3Vic2V0T2ZTdGFjay5zb3J0KGNtcF9leHByKTtcbiAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIGgpLmNvbmNhdChzdWJzZXRPZlN0YWNrKS5jb25jYXQoc3RhY2suc2xpY2UoaCArIG4pKTtcbiAgICBwMSA9IGFsbG9jX3RlbnNvcihuKTtcbiAgICBwMS50ZW5zb3IubmRpbSA9IDE7XG4gICAgcDEudGVuc29yLmRpbVswXSA9IG47XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBwMS50ZW5zb3IuZWxlbVtpXSA9IHN0YWNrW2ggKyBpXTtcbiAgICB9XG4gICAgbW92ZVRvcyhoKTtcbiAgICBwdXNoKHAxKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGRpdmlzb3JzX29uc3RhY2sgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCwgaSwgaywgbiwgbywgcmVmO1xuICAgIGggPSAwO1xuICAgIGkgPSAwO1xuICAgIGsgPSAwO1xuICAgIG4gPSAwO1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGggPSB0b3M7XG4gICAgLy8gcHVzaCBhbGwgb2YgdGhlIHRlcm0ncyBmYWN0b3JzXG4gICAgaWYgKGlzTnVtZXJpY0F0b20ocDEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGZhY3Rvcl9zbWFsbF9udW1iZXIoKTtcbiAgICB9IGVsc2UgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIF9fZmFjdG9yX2FkZCgpO1xuICAgIC8vcHJpbnRmKFwiPj4+XFxuXCIpXG4gICAgLy9mb3IgKGkgPSBoOyBpIDwgdG9zOyBpKyspXG4gICAgLy9wcmludChzdGRvdXQsIHN0YWNrW2ldKVxuICAgIC8vcHJpbnRmKFwiPDw8XFxuXCIpXG4gICAgfSBlbHNlIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICBpZiAoaXNOdW1lcmljQXRvbShjYXIocDEpKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBmYWN0b3Jfc21hbGxfbnVtYmVyKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIHAyID0gY2FyKHAxKTtcbiAgICAgICAgaWYgKGNhcihwMikgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgICAgICBwdXNoKGNhZHIocDIpKTtcbiAgICAgICAgICBwdXNoKGNhZGRyKHAyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaChwMik7XG4gICAgICAgICAgcHVzaChvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhcihwMSkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gob25lKTtcbiAgICB9XG4gICAgayA9IHRvcztcbiAgICAvLyBjb250cnVjdCBkaXZpc29ycyBieSByZWN1cnNpdmUgZGVzY2VudFxuICAgIHB1c2gob25lKTtcbiAgICBnZW4oaCwgayk7XG4gICAgLy8gbW92ZVxuICAgIG4gPSB0b3MgLSBrO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgc3RhY2tbaCArIGldID0gc3RhY2tbayArIGldO1xuICAgIH1cbiAgICBtb3ZlVG9zKGggKyBuKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgR2VuZXJhdGUgZGl2aXNvcnNcblxuICAvLyAgSW5wdXQ6ICAgIEJhc2UtZXhwb25lbnQgcGFpcnMgb24gc3RhY2tcblxuICAvLyAgICAgIGggIGZpcnN0IHBhaXJcblxuICAvLyAgICAgIGsgIGp1c3QgcGFzdCBsYXN0IHBhaXJcblxuICAvLyAgT3V0cHV0OiAgICBEaXZpc29ycyBvbiBzdGFja1xuXG4gIC8vICBGb3IgZXhhbXBsZSwgZmFjdG9yIGxpc3QgMiAyIDMgMSByZXN1bHRzIGluIDYgZGl2aXNvcnMsXG5cbiAgLy8gICAgMVxuICAvLyAgICAzXG4gIC8vICAgIDJcbiAgLy8gICAgNlxuICAvLyAgICA0XG4gIC8vICAgIDEyXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vZGVmaW5lIEFDQ1VNIHAxXG4gIC8vZGVmaW5lIEJBU0UgcDJcbiAgLy9kZWZpbmUgRVhQTyBwM1xuICBnZW4gPSBmdW5jdGlvbihoLCBrKSB7XG4gICAgdmFyIGV4cG8sIGksIG8sIHJlZjtcbiAgICBleHBvID0gMDtcbiAgICBpID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaCA9PT0gaykge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHAyID0gc3RhY2tbaCArIDBdO1xuICAgIHAzID0gc3RhY2tbaCArIDFdO1xuICAgIHB1c2gocDMpO1xuICAgIGV4cG8gPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmICghaXNOYU4oZXhwbykpIHtcbiAgICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBNYXRoLmFicyhleHBvKTsgKDAgPD0gcmVmID8gbyA8PSByZWYgOiBvID49IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIHB1c2hfaW50ZWdlcihzaWduKGV4cG8pICogaSk7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGdlbihoICsgMiwgayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBGYWN0b3IgQUREIGV4cHJlc3Npb25cblxuICAvLyAgSW5wdXQ6ICAgIEV4cHJlc3Npb24gb24gc3RhY2tcblxuICAvLyAgT3V0cHV0OiAgICBGYWN0b3JzIG9uIHN0YWNrXG5cbiAgLy8gIEVhY2ggZmFjdG9yIGNvbnNpc3RzIG9mIHR3byBleHByZXNzaW9ucywgdGhlIGZhY3RvciBpdHNlbGYgZm9sbG93ZWRcbiAgLy8gIGJ5IHRoZSBleHBvbmVudC5cblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIF9fZmFjdG9yX2FkZCA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIC8vIGdldCBnY2Qgb2YgYWxsIHRlcm1zXG4gICAgcDMgPSBjZHIocDEpO1xuICAgIHB1c2goY2FyKHAzKSk7XG4gICAgcDMgPSBjZHIocDMpO1xuICAgIHdoaWxlIChpc2NvbnMocDMpKSB7XG4gICAgICBwdXNoKGNhcihwMykpO1xuICAgICAgZ2NkKCk7XG4gICAgICBwMyA9IGNkcihwMyk7XG4gICAgfVxuICAgIC8vIGNoZWNrIGdjZFxuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKGlzcGx1c29uZShwMikpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChvbmUpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBwdXNoIGZhY3RvcmVkIGdjZFxuICAgIGlmIChpc051bWVyaWNBdG9tKHAyKSkge1xuICAgICAgcHVzaChwMik7XG4gICAgICBmYWN0b3Jfc21hbGxfbnVtYmVyKCk7XG4gICAgfSBlbHNlIGlmIChjYXIocDIpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwMyA9IGNkcihwMik7XG4gICAgICBpZiAoaXNOdW1lcmljQXRvbShjYXIocDMpKSkge1xuICAgICAgICBwdXNoKGNhcihwMykpO1xuICAgICAgICBmYWN0b3Jfc21hbGxfbnVtYmVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKGNhcihwMykpO1xuICAgICAgICBwdXNoKG9uZSk7XG4gICAgICB9XG4gICAgICBwMyA9IGNkcihwMyk7XG4gICAgICB3aGlsZSAoaXNjb25zKHAzKSkge1xuICAgICAgICBwdXNoKGNhcihwMykpO1xuICAgICAgICBwdXNoKG9uZSk7XG4gICAgICAgIHAzID0gY2RyKHAzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKG9uZSk7XG4gICAgfVxuICAgIC8vIGRpdmlkZSBlYWNoIHRlcm0gYnkgZ2NkXG4gICAgcHVzaChwMik7XG4gICAgaW52ZXJzZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcHVzaCh6ZXJvKTtcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMykpIHtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaChjYXIocDMpKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBhZGQoKTtcbiAgICAgIHAzID0gY2RyKHAzKTtcbiAgICB9XG4gICAgcHVzaChvbmUpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gcG93ZXIgZnVuY3Rpb24gZm9yIGRvdWJsZSBwcmVjaXNpb24gZmxvYXRpbmcgcG9pbnRcbiAgZHBvdyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBiLCBiYXNlLCBleHBvLCByZXN1bHQsIHRoZXRhO1xuICAgIGEgPSAwLjA7XG4gICAgYiA9IDAuMDtcbiAgICBiYXNlID0gMC4wO1xuICAgIGV4cG8gPSAwLjA7XG4gICAgcmVzdWx0ID0gMC4wO1xuICAgIHRoZXRhID0gMC4wO1xuICAgIGV4cG8gPSBwb3BfZG91YmxlKCk7XG4gICAgYmFzZSA9IHBvcF9kb3VibGUoKTtcbiAgICAvLyBkaXZpZGUgYnkgemVybz9cbiAgICBpZiAoYmFzZSA9PT0gMC4wICYmIGV4cG8gPCAwLjApIHtcbiAgICAgIHN0b3AoXCJkaXZpZGUgYnkgemVyb1wiKTtcbiAgICB9XG4gICAgLy8gbm9ubmVnYXRpdmUgYmFzZSBvciBpbnRlZ2VyIHBvd2VyP1xuICAgIGlmIChiYXNlID49IDAuMCB8fCAoZXhwbyAlIDEuMCkgPT09IDAuMCkge1xuICAgICAgcmVzdWx0ID0gTWF0aC5wb3coYmFzZSwgZXhwbyk7XG4gICAgICBwdXNoX2RvdWJsZShyZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXN1bHQgPSBNYXRoLnBvdyhNYXRoLmFicyhiYXNlKSwgZXhwbyk7XG4gICAgdGhldGEgPSBNYXRoLlBJICogZXhwbztcbiAgICAvLyB0aGlzIGVuc3VyZXMgdGhlIHJlYWwgcGFydCBpcyAwLjAgaW5zdGVhZCBvZiBhIHRpbnkgZnJhY3Rpb25cbiAgICBpZiAoKGV4cG8gJSAwLjUpID09PSAwLjApIHtcbiAgICAgIGEgPSAwLjA7XG4gICAgICBiID0gTWF0aC5zaW4odGhldGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gTWF0aC5jb3ModGhldGEpO1xuICAgICAgYiA9IE1hdGguc2luKHRoZXRhKTtcbiAgICB9XG4gICAgcHVzaF9kb3VibGUoYSAqIHJlc3VsdCk7XG4gICAgcHVzaF9kb3VibGUoYiAqIHJlc3VsdCk7XG4gICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICBtdWx0aXBseSgpO1xuICAgIHJldHVybiBhZGQoKTtcbiAgfTtcblxuICAvKiBlaWdlbiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgbVxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBDb21wdXRlIGVpZ2VudmFsdWVzIGFuZCBlaWdlbnZlY3RvcnMuIE1hdHJpeCBtIG11c3QgYmUgYm90aCBudW1lcmljYWwgYW5kIHN5bW1ldHJpYy5cbiAgVGhlIGVpZ2VudmFsIGZ1bmN0aW9uIHJldHVybnMgYSBtYXRyaXggd2l0aCB0aGUgZWlnZW52YWx1ZXMgYWxvbmcgdGhlIGRpYWdvbmFsLlxuICBUaGUgZWlnZW52ZWMgZnVuY3Rpb24gcmV0dXJucyBhIG1hdHJpeCB3aXRoIHRoZSBlaWdlbnZlY3RvcnMgYXJyYW5nZWQgYXMgcm93IHZlY3RvcnMuXG4gIFRoZSBlaWdlbiBmdW5jdGlvbiBkb2VzIG5vdCByZXR1cm4gYW55dGhpbmcgYnV0IHN0b3JlcyB0aGUgZWlnZW52YWx1ZSBtYXRyaXggaW4gRFxuICBhbmQgdGhlIGVpZ2VudmVjdG9yIG1hdHJpeCBpbiBRLlxuXG4gIElucHV0OiAgICBzdGFja1t0b3MgLSAxXSAgICBzeW1tZXRyaWMgbWF0cml4XG5cbiAgT3V0cHV0OiAgICBEICAgICAgZGlhZ25vbmFsIG1hdHJpeFxuICAgICAgICBRICAgICAgZWlnZW52ZWN0b3IgbWF0cml4XG5cbiAgRCBhbmQgUSBoYXZlIHRoZSBwcm9wZXJ0eSB0aGF0XG5cbiAgICBBID09IGRvdCh0cmFuc3Bvc2UoUSksRCxRKVxuXG4gIHdoZXJlIEEgaXMgdGhlIG9yaWdpbmFsIG1hdHJpeC5cblxuICBUaGUgZWlnZW52YWx1ZXMgYXJlIG9uIHRoZSBkaWFnb25hbCBvZiBELlxuICBUaGUgZWlnZW52ZWN0b3JzIGFyZSByb3cgdmVjdG9ycyBpbiBRLlxuXG4gIFRoZSBlaWdlbnZhbHVlIHJlbGF0aW9uOlxuXG4gICAgQSBYID0gbGFtYmRhIFhcblxuICBjYW4gYmUgY2hlY2tlZCBhcyBmb2xsb3dzOlxuXG4gICAgbGFtYmRhID0gRFsxLDFdXG4gICAgWCA9IFFbMV1cbiAgICBkb3QoQSxYKSAtIGxhbWJkYSBYXG5cbiAgRXhhbXBsZSAxLiBDaGVjayB0aGUgcmVsYXRpb24gQVggPSBsYW1iZGEgWCB3aGVyZSBsYW1iZGEgaXMgYW4gZWlnZW52YWx1ZSBhbmQgWCBpcyB0aGUgYXNzb2NpYXRlZCBlaWdlbnZlY3Rvci5cblxuICBFbnRlcjpcblxuICAgICAgIEEgPSBoaWxiZXJ0KDMpXG5cbiAgICAgICBlaWdlbihBKVxuXG4gICAgICAgbGFtYmRhID0gRFsxLDFdXG5cbiAgICAgICBYID0gUVsxXVxuXG4gICAgICAgZG90KEEsWCkgLSBsYW1iZGEgWFxuXG4gIFJlc3VsdDpcblxuICAgICAgIC0xLjE2NDM1ZS0xNFxuXG4gICAgICAgLTYuNDY3MDVlLTE1XG5cbiAgICAgICAtNC41NTE5MWUtMTVcblxuICBFeGFtcGxlIDI6IENoZWNrIHRoZSByZWxhdGlvbiBBID0gUVREUS5cblxuICBFbnRlcjpcblxuICAgIEEgLSBkb3QodHJhbnNwb3NlKFEpLEQsUSlcblxuICBSZXN1bHQ6IFxuXG4gICAgNi4yNzM2NWUtMTIgICAgLTEuNTgyMzZlLTExICAgMS44MTkwMmUtMTFcblxuICAgIC0xLjU4MjM2ZS0xMSAgIC0xLjk1MzY1ZS0xMSAgIDIuNTY1MTRlLTEyXG5cbiAgICAxLjgxOTAyZS0xMSAgICAyLjU2NTE0ZS0xMiAgICAxLjMyNjI3ZS0xMVxuXG4gICovXG4gIC8vZGVmaW5lIEQoaSwgaikgeXlkZFtFSUdfTiAqIChpKSArIChqKV1cbiAgLy9kZWZpbmUgUShpLCBqKSB5eXFxW0VJR19OICogKGkpICsgKGopXVxuICBFSUdfTiA9IDA7XG5cbiAgRUlHX3l5ZGQgPSBbXTtcblxuICBFSUdfeXlxcSA9IFtdO1xuXG4gIEV2YWxfZWlnZW4gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoRUlHX2NoZWNrX2FyZygpID09PSAwKSB7XG4gICAgICBzdG9wKFwiZWlnZW46IGFyZ3VtZW50IGlzIG5vdCBhIHNxdWFyZSBtYXRyaXhcIik7XG4gICAgfVxuICAgIGVpZ2VuKEVJR0VOKTtcbiAgICBwMSA9IHVzcl9zeW1ib2woXCJEXCIpO1xuICAgIHNldF9iaW5kaW5nKHAxLCBwMik7XG4gICAgcDEgPSB1c3Jfc3ltYm9sKFwiUVwiKTtcbiAgICBzZXRfYmluZGluZyhwMSwgcDMpO1xuICAgIHJldHVybiBwdXNoKHN5bWJvbChOSUwpKTtcbiAgfTtcblxuICBFdmFsX2VpZ2VudmFsID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKEVJR19jaGVja19hcmcoKSA9PT0gMCkge1xuICAgICAgcHVzaF9zeW1ib2woRUlHRU5WQUwpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBsaXN0KDIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlaWdlbihFSUdFTlZBTCk7XG4gICAgcmV0dXJuIHB1c2gocDIpO1xuICB9O1xuXG4gIEV2YWxfZWlnZW52ZWMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoRUlHX2NoZWNrX2FyZygpID09PSAwKSB7XG4gICAgICBwdXNoX3N5bWJvbChFSUdFTlZFQyk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVpZ2VuKEVJR0VOVkVDKTtcbiAgICByZXR1cm4gcHVzaChwMyk7XG4gIH07XG5cbiAgRUlHX2NoZWNrX2FyZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBpMSwgaiwgajEsIGwxLCBvLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQ7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHl5ZmxvYXQoKTtcbiAgICBFdmFsKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoIWlzdGVuc29yKHAxKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChwMS50ZW5zb3IubmRpbSAhPT0gMiB8fCBwMS50ZW5zb3IuZGltWzBdICE9PSBwMS50ZW5zb3IuZGltWzFdKSB7XG4gICAgICBzdG9wKFwiZWlnZW46IGFyZ3VtZW50IGlzIG5vdCBhIHNxdWFyZSBtYXRyaXhcIik7XG4gICAgfVxuICAgIEVJR19OID0gcDEudGVuc29yLmRpbVswXTtcbiAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gRUlHX047ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBmb3IgKGogPSBpMSA9IDAsIHJlZjEgPSBFSUdfTjsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGogPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgICBpZiAoIWlzZG91YmxlKHAxLnRlbnNvci5lbGVtW0VJR19OICogaSArIGpdKSkge1xuICAgICAgICAgIHN0b3AoXCJlaWdlbjogbWF0cml4IGlzIG5vdCBudW1lcmljYWxcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gajEgPSAwLCByZWYyID0gRUlHX04gLSAxOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBmb3IgKGogPSBsMSA9IHJlZjMgPSBpICsgMSwgcmVmNCA9IEVJR19OOyAocmVmMyA8PSByZWY0ID8gbDEgPCByZWY0IDogbDEgPiByZWY0KTsgaiA9IHJlZjMgPD0gcmVmNCA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhwMS50ZW5zb3IuZWxlbVtFSUdfTiAqIGkgKyBqXS5kIC0gcDEudGVuc29yLmVsZW1bRUlHX04gKiBqICsgaV0uZCkgPiAxZS0xMCkge1xuICAgICAgICAgIHN0b3AoXCJlaWdlbjogbWF0cml4IGlzIG5vdCBzeW1tZXRyaWNhbFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMTtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIElucHV0OiAgICBwMSAgICBtYXRyaXhcblxuICAvLyAgT3V0cHV0OiAgICBwMiAgICBlaWdlbnZhbHVlc1xuXG4gIC8vICAgICAgcDMgICAgZWlnZW52ZWN0b3JzXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBlaWdlbiA9IGZ1bmN0aW9uKG9wKSB7XG4gICAgdmFyIGksIGkxLCBqLCBqMSwgbDEsIG0xLCBuMSwgbywgbzEsIHExLCByMSwgcmVmLCByZWYxLCByZWYxMCwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNiwgcmVmNywgcmVmOCwgcmVmOSwgcmVzdWx0cywgczE7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4vLyBtYWxsb2Mgd29ya2luZyB2YXJzXG5cbiAgICAvL0VJR195eWRkID0gKGRvdWJsZSAqKSBtYWxsb2MobiAqIG4gKiBzaXplb2YgKGRvdWJsZSkpXG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IEVJR19OICogRUlHX047ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBFSUdfeXlkZFtpXSA9IDAuMDtcbiAgICB9XG4vL2lmIChFSUdfeXlkZCA9PSBOVUxMKVxuLy8gIHN0b3AoXCJtYWxsb2MgZmFpbHVyZVwiKVxuXG4gICAgLy9FSUdfeXlxcSA9IChkb3VibGUgKikgbWFsbG9jKG4gKiBuICogc2l6ZW9mIChkb3VibGUpKVxuICAgIGZvciAoaSA9IGkxID0gMCwgcmVmMSA9IEVJR19OICogRUlHX047ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgIEVJR195eXFxW2ldID0gMC4wO1xuICAgIH1cbi8vaWYgKEVJR195eXFxID09IE5VTEwpXG4vLyAgc3RvcChcIm1hbGxvYyBmYWlsdXJlXCIpXG5cbiAgICAvLyBpbml0aWFsaXplIERcbiAgICBmb3IgKGkgPSBqMSA9IDAsIHJlZjIgPSBFSUdfTjsgKDAgPD0gcmVmMiA/IGoxIDwgcmVmMiA6IGoxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2oxIDogLS1qMSkge1xuICAgICAgRUlHX3l5ZGRbRUlHX04gKiBpICsgaV0gPSBwMS50ZW5zb3IuZWxlbVtFSUdfTiAqIGkgKyBpXS5kO1xuICAgICAgZm9yIChqID0gbDEgPSByZWYzID0gaSArIDEsIHJlZjQgPSBFSUdfTjsgKHJlZjMgPD0gcmVmNCA/IGwxIDwgcmVmNCA6IGwxID4gcmVmNCk7IGogPSByZWYzIDw9IHJlZjQgPyArK2wxIDogLS1sMSkge1xuICAgICAgICBFSUdfeXlkZFtFSUdfTiAqIGkgKyBqXSA9IHAxLnRlbnNvci5lbGVtW0VJR19OICogaSArIGpdLmQ7XG4gICAgICAgIEVJR195eWRkW0VJR19OICogaiArIGldID0gcDEudGVuc29yLmVsZW1bRUlHX04gKiBpICsgal0uZDtcbiAgICAgIH1cbiAgICB9XG4vLyBpbml0aWFsaXplIFFcbiAgICBmb3IgKGkgPSBtMSA9IDAsIHJlZjUgPSBFSUdfTjsgKDAgPD0gcmVmNSA/IG0xIDwgcmVmNSA6IG0xID4gcmVmNSk7IGkgPSAwIDw9IHJlZjUgPyArK20xIDogLS1tMSkge1xuICAgICAgRUlHX3l5cXFbRUlHX04gKiBpICsgaV0gPSAxLjA7XG4gICAgICBmb3IgKGogPSBuMSA9IHJlZjYgPSBpICsgMSwgcmVmNyA9IEVJR19OOyAocmVmNiA8PSByZWY3ID8gbjEgPCByZWY3IDogbjEgPiByZWY3KTsgaiA9IHJlZjYgPD0gcmVmNyA/ICsrbjEgOiAtLW4xKSB7XG4gICAgICAgIEVJR195eXFxW0VJR19OICogaSArIGpdID0gMC4wO1xuICAgICAgICBFSUdfeXlxcVtFSUdfTiAqIGogKyBpXSA9IDAuMDtcbiAgICAgIH1cbiAgICB9XG4vLyBzdGVwIHVwIHRvIDEwMCB0aW1lc1xuICAgIGZvciAoaSA9IG8xID0gMDsgbzEgPCAxMDA7IGkgPSArK28xKSB7XG4gICAgICBpZiAoc3RlcCgpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA9PT0gMTAwKSB7XG4gICAgICBwcmludHN0cihcIlxcbm5vdGU6IGVpZ2VuIGRpZCBub3QgY29udmVyZ2VcXG5cIik7XG4gICAgfVxuICAgIC8vIHAyID0gRFxuICAgIGlmIChvcCA9PT0gRUlHRU4gfHwgb3AgPT09IEVJR0VOVkFMKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGNvcHlfdGVuc29yKCk7XG4gICAgICBwMiA9IHBvcCgpO1xuICAgICAgZm9yIChpID0gcTEgPSAwLCByZWY4ID0gRUlHX047ICgwIDw9IHJlZjggPyBxMSA8IHJlZjggOiBxMSA+IHJlZjgpOyBpID0gMCA8PSByZWY4ID8gKytxMSA6IC0tcTEpIHtcbiAgICAgICAgZm9yIChqID0gcjEgPSAwLCByZWY5ID0gRUlHX047ICgwIDw9IHJlZjkgPyByMSA8IHJlZjkgOiByMSA+IHJlZjkpOyBqID0gMCA8PSByZWY5ID8gKytyMSA6IC0tcjEpIHtcbiAgICAgICAgICBwdXNoX2RvdWJsZShFSUdfeXlkZFtFSUdfTiAqIGkgKyBqXSk7XG4gICAgICAgICAgcDIudGVuc29yLmVsZW1bRUlHX04gKiBpICsgal0gPSBwb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBwMyA9IFFcbiAgICBpZiAob3AgPT09IEVJR0VOIHx8IG9wID09PSBFSUdFTlZFQykge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBjb3B5X3RlbnNvcigpO1xuICAgICAgcDMgPSBwb3AoKTtcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IHMxID0gMCwgcmVmMTAgPSBFSUdfTjsgKDAgPD0gcmVmMTAgPyBzMSA8IHJlZjEwIDogczEgPiByZWYxMCk7IGkgPSAwIDw9IHJlZjEwID8gKytzMSA6IC0tczEpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcmVmMTEsIHJlc3VsdHMxLCB0MTtcbiAgICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICAgIGZvciAoaiA9IHQxID0gMCwgcmVmMTEgPSBFSUdfTjsgKDAgPD0gcmVmMTEgPyB0MSA8IHJlZjExIDogdDEgPiByZWYxMSk7IGogPSAwIDw9IHJlZjExID8gKyt0MSA6IC0tdDEpIHtcbiAgICAgICAgICAgIHB1c2hfZG91YmxlKEVJR195eXFxW0VJR19OICogaSArIGpdKTtcbiAgICAgICAgICAgIHJlc3VsdHMxLnB1c2gocDMudGVuc29yLmVsZW1bRUlHX04gKiBpICsgal0gPSBwb3AoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzMTtcbiAgICAgICAgfSkoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gIH07XG5cbiAgLy8gZnJlZSB3b3JraW5nIHZhcnNcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIEV4YW1wbGU6IHAgPSAxLCBxID0gM1xuXG4gIC8vICAgIGMgIDAgIHMgIDBcblxuICAvLyAgICAwICAxICAwICAwXG4gIC8vICBHID1cbiAgLy8gICAgLXMgIDAgIGMgIDBcblxuICAvLyAgICAwICAwICAwICAxXG5cbiAgLy8gIFRoZSBlZmZlY3Qgb2YgbXVsdGlwbHlpbmcgRyB0aW1lcyBBIGlzLi4uXG5cbiAgLy8gIHJvdyAxIG9mIEEgICAgPSBjIChyb3cgMSBvZiBBICkgKyBzIChyb3cgMyBvZiBBIClcbiAgLy8gICAgICAgICAgICBuKzEgICAgICAgICAgICAgICAgbiAgICAgICAgICAgICAgICAgblxuXG4gIC8vICByb3cgMyBvZiBBICAgID0gYyAocm93IDMgb2YgQSApIC0gcyAocm93IDEgb2YgQSApXG4gIC8vICAgICAgICAgICAgbisxICAgICAgICAgICAgICAgIG4gICAgICAgICAgICAgICAgIG5cblxuICAvLyAgSW4gdGVybXMgb2YgY29tcG9uZW50cyB0aGUgb3ZlcmFsbCBlZmZlY3QgaXMuLi5cblxuICAvLyAgcm93IDEgPSBjIHJvdyAxICsgcyByb3cgM1xuXG4gIC8vICAgIEFbMSwxXSA9IGMgQVsxLDFdICsgcyBBWzMsMV1cblxuICAvLyAgICBBWzEsMl0gPSBjIEFbMSwyXSArIHMgQVszLDJdXG5cbiAgLy8gICAgQVsxLDNdID0gYyBBWzEsM10gKyBzIEFbMywzXVxuXG4gIC8vICAgIEFbMSw0XSA9IGMgQVsxLDRdICsgcyBBWzMsNF1cblxuICAvLyAgcm93IDMgPSBjIHJvdyAzIC0gcyByb3cgMVxuXG4gIC8vICAgIEFbMywxXSA9IGMgQVszLDFdIC0gcyBBWzEsMV1cblxuICAvLyAgICBBWzMsMl0gPSBjIEFbMywyXSAtIHMgQVsxLDJdXG5cbiAgLy8gICAgQVszLDNdID0gYyBBWzMsM10gLSBzIEFbMSwzXVxuXG4gIC8vICAgIEFbMyw0XSA9IGMgQVszLDRdIC0gcyBBWzEsNF1cblxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUXG4gIC8vICBUaGUgZWZmZWN0IG9mIG11bHRpcGx5aW5nIEEgdGltZXMgRyAgaXMuLi5cblxuICAvLyAgY29sIDEgb2YgQSAgICA9IGMgKGNvbCAxIG9mIEEgKSArIHMgKGNvbCAzIG9mIEEgKVxuICAvLyAgICAgICAgICAgIG4rMSAgICAgICAgICAgICAgICBuICAgICAgICAgICAgICAgICBuXG5cbiAgLy8gIGNvbCAzIG9mIEEgICAgPSBjIChjb2wgMyBvZiBBICkgLSBzIChjb2wgMSBvZiBBIClcbiAgLy8gICAgICAgICAgICBuKzEgICAgICAgICAgICAgICAgbiAgICAgICAgICAgICAgICAgblxuXG4gIC8vICBJbiB0ZXJtcyBvZiBjb21wb25lbnRzIHRoZSBvdmVyYWxsIGVmZmVjdCBpcy4uLlxuXG4gIC8vICBjb2wgMSA9IGMgY29sIDEgKyBzIGNvbCAzXG5cbiAgLy8gICAgQVsxLDFdID0gYyBBWzEsMV0gKyBzIEFbMSwzXVxuXG4gIC8vICAgIEFbMiwxXSA9IGMgQVsyLDFdICsgcyBBWzIsM11cblxuICAvLyAgICBBWzMsMV0gPSBjIEFbMywxXSArIHMgQVszLDNdXG5cbiAgLy8gICAgQVs0LDFdID0gYyBBWzQsMV0gKyBzIEFbNCwzXVxuXG4gIC8vICBjb2wgMyA9IGMgY29sIDMgLSBzIGNvbCAxXG5cbiAgLy8gICAgQVsxLDNdID0gYyBBWzEsM10gLSBzIEFbMSwxXVxuXG4gIC8vICAgIEFbMiwzXSA9IGMgQVsyLDNdIC0gcyBBWzIsMV1cblxuICAvLyAgICBBWzMsM10gPSBjIEFbMywzXSAtIHMgQVszLDFdXG5cbiAgLy8gICAgQVs0LDNdID0gYyBBWzQsM10gLSBzIEFbNCwxXVxuXG4gIC8vICBXaGF0IHdlIHdhbnQgdG8gZG8gaXMganVzdCBjb21wdXRlIHRoZSB1cHBlciB0cmlhbmdsZSBvZiBBIHNpbmNlIHdlXG4gIC8vICBrbm93IHRoZSBsb3dlciB0cmlhbmdsZSBpcyBpZGVudGljYWwuXG5cbiAgLy8gIEluIG90aGVyIHdvcmRzLCB3ZSBqdXN0IHdhbnQgdG8gdXBkYXRlIGNvbXBvbmVudHMgQVtpLGpdIHdoZXJlIGkgPCBqLlxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgRXhhbXBsZTogcCA9IDIsIHEgPSA1XG5cbiAgLy8gICAgICAgIHAgICAgICBxXG5cbiAgLy8gICAgICBqPTEgIGo9MiAgaj0zICBqPTQgIGo9NSAgaj02XG5cbiAgLy8gICAgaT0xICAuICBBWzEsMl0gIC4gIC4gIEFbMSw1XSAgLlxuXG4gIC8vICBwICBpPTIgIEFbMiwxXSAgQVsyLDJdICBBWzIsM10gIEFbMiw0XSAgQVsyLDVdICBBWzIsNl1cblxuICAvLyAgICBpPTMgIC4gIEFbMywyXSAgLiAgLiAgQVszLDVdICAuXG5cbiAgLy8gICAgaT00ICAuICBBWzQsMl0gIC4gIC4gIEFbNCw1XSAgLlxuXG4gIC8vICBxICBpPTUgIEFbNSwxXSAgQVs1LDJdICBBWzUsM10gIEFbNSw0XSAgQVs1LDVdICBBWzUsNl1cblxuICAvLyAgICBpPTYgIC4gIEFbNiwyXSAgLiAgLiAgQVs2LDVdICAuXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBUaGlzIGlzIHdoYXQgQiA9IEdBIGRvZXM6XG5cbiAgLy8gIHJvdyAyID0gYyByb3cgMiArIHMgcm93IDVcblxuICAvLyAgICBCWzIsMV0gPSBjICogQVsyLDFdICsgcyAqIEFbNSwxXVxuICAvLyAgICBCWzIsMl0gPSBjICogQVsyLDJdICsgcyAqIEFbNSwyXVxuICAvLyAgICBCWzIsM10gPSBjICogQVsyLDNdICsgcyAqIEFbNSwzXVxuICAvLyAgICBCWzIsNF0gPSBjICogQVsyLDRdICsgcyAqIEFbNSw0XVxuICAvLyAgICBCWzIsNV0gPSBjICogQVsyLDVdICsgcyAqIEFbNSw1XVxuICAvLyAgICBCWzIsNl0gPSBjICogQVsyLDZdICsgcyAqIEFbNSw2XVxuXG4gIC8vICByb3cgNSA9IGMgcm93IDUgLSBzIHJvdyAyXG5cbiAgLy8gICAgQls1LDFdID0gYyAqIEFbNSwxXSArIHMgKiBBWzIsMV1cbiAgLy8gICAgQls1LDJdID0gYyAqIEFbNSwyXSArIHMgKiBBWzIsMl1cbiAgLy8gICAgQls1LDNdID0gYyAqIEFbNSwzXSArIHMgKiBBWzIsM11cbiAgLy8gICAgQls1LDRdID0gYyAqIEFbNSw0XSArIHMgKiBBWzIsNF1cbiAgLy8gICAgQls1LDVdID0gYyAqIEFbNSw1XSArIHMgKiBBWzIsNV1cbiAgLy8gICAgQls1LDZdID0gYyAqIEFbNSw2XSArIHMgKiBBWzIsNl1cblxuICAvLyAgICAgICAgICAgICAgICAgVFxuICAvLyAgVGhpcyBpcyB3aGF0IEJHICBkb2VzOlxuXG4gIC8vICBjb2wgMiA9IGMgY29sIDIgKyBzIGNvbCA1XG5cbiAgLy8gICAgQlsxLDJdID0gYyAqIEFbMSwyXSArIHMgKiBBWzEsNV1cbiAgLy8gICAgQlsyLDJdID0gYyAqIEFbMiwyXSArIHMgKiBBWzIsNV1cbiAgLy8gICAgQlszLDJdID0gYyAqIEFbMywyXSArIHMgKiBBWzMsNV1cbiAgLy8gICAgQls0LDJdID0gYyAqIEFbNCwyXSArIHMgKiBBWzQsNV1cbiAgLy8gICAgQls1LDJdID0gYyAqIEFbNSwyXSArIHMgKiBBWzUsNV1cbiAgLy8gICAgQls2LDJdID0gYyAqIEFbNiwyXSArIHMgKiBBWzYsNV1cblxuICAvLyAgY29sIDUgPSBjIGNvbCA1IC0gcyBjb2wgMlxuXG4gIC8vICAgIEJbMSw1XSA9IGMgKiBBWzEsNV0gLSBzICogQVsxLDJdXG4gIC8vICAgIEJbMiw1XSA9IGMgKiBBWzIsNV0gLSBzICogQVsyLDJdXG4gIC8vICAgIEJbMyw1XSA9IGMgKiBBWzMsNV0gLSBzICogQVszLDJdXG4gIC8vICAgIEJbNCw1XSA9IGMgKiBBWzQsNV0gLSBzICogQVs0LDJdXG4gIC8vICAgIEJbNSw1XSA9IGMgKiBBWzUsNV0gLSBzICogQVs1LDJdXG4gIC8vICAgIEJbNiw1XSA9IGMgKiBBWzYsNV0gLSBzICogQVs2LDJdXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBTdGVwIDE6IEp1c3QgZG8gdXBwZXIgdHJpYW5nbGUgKGkgPCBqKSwgQlsyLDVdID0gMFxuXG4gIC8vICAgIEJbMSwyXSA9IGMgKiBBWzEsMl0gKyBzICogQVsxLDVdXG5cbiAgLy8gICAgQlsyLDNdID0gYyAqIEFbMiwzXSArIHMgKiBBWzUsM11cbiAgLy8gICAgQlsyLDRdID0gYyAqIEFbMiw0XSArIHMgKiBBWzUsNF1cbiAgLy8gICAgQlsyLDZdID0gYyAqIEFbMiw2XSArIHMgKiBBWzUsNl1cblxuICAvLyAgICBCWzEsNV0gPSBjICogQVsxLDVdIC0gcyAqIEFbMSwyXVxuICAvLyAgICBCWzMsNV0gPSBjICogQVszLDVdIC0gcyAqIEFbMywyXVxuICAvLyAgICBCWzQsNV0gPSBjICogQVs0LDVdIC0gcyAqIEFbNCwyXVxuXG4gIC8vICAgIEJbNSw2XSA9IGMgKiBBWzUsNl0gKyBzICogQVsyLDZdXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBTdGVwIDI6IFRyYW5zcG9zZSB3aGVyZSBpID4gaiBzaW5jZSBBW2ksal0gPT0gQVtqLGldXG5cbiAgLy8gICAgQlsxLDJdID0gYyAqIEFbMSwyXSArIHMgKiBBWzEsNV1cblxuICAvLyAgICBCWzIsM10gPSBjICogQVsyLDNdICsgcyAqIEFbMyw1XVxuICAvLyAgICBCWzIsNF0gPSBjICogQVsyLDRdICsgcyAqIEFbNCw1XVxuICAvLyAgICBCWzIsNl0gPSBjICogQVsyLDZdICsgcyAqIEFbNSw2XVxuXG4gIC8vICAgIEJbMSw1XSA9IGMgKiBBWzEsNV0gLSBzICogQVsxLDJdXG4gIC8vICAgIEJbMyw1XSA9IGMgKiBBWzMsNV0gLSBzICogQVsyLDNdXG4gIC8vICAgIEJbNCw1XSA9IGMgKiBBWzQsNV0gLSBzICogQVsyLDRdXG5cbiAgLy8gICAgQls1LDZdID0gYyAqIEFbNSw2XSArIHMgKiBBWzIsNl1cblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIFN0ZXAgMzogU2FtZSBhcyBhYm92ZSBleGNlcHQgcmVvcmRlclxuXG4gIC8vICBrIDwgcCAgICAoayA9IDEpXG5cbiAgLy8gICAgQVsxLDJdID0gYyAqIEFbMSwyXSArIHMgKiBBWzEsNV1cbiAgLy8gICAgQVsxLDVdID0gYyAqIEFbMSw1XSAtIHMgKiBBWzEsMl1cblxuICAvLyAgcCA8IGsgPCBxICAoayA9IDMuLjQpXG5cbiAgLy8gICAgQVsyLDNdID0gYyAqIEFbMiwzXSArIHMgKiBBWzMsNV1cbiAgLy8gICAgQVszLDVdID0gYyAqIEFbMyw1XSAtIHMgKiBBWzIsM11cblxuICAvLyAgICBBWzIsNF0gPSBjICogQVsyLDRdICsgcyAqIEFbNCw1XVxuICAvLyAgICBBWzQsNV0gPSBjICogQVs0LDVdIC0gcyAqIEFbMiw0XVxuXG4gIC8vICBxIDwgayAgICAoayA9IDYpXG5cbiAgLy8gICAgQVsyLDZdID0gYyAqIEFbMiw2XSArIHMgKiBBWzUsNl1cbiAgLy8gICAgQVs1LDZdID0gYyAqIEFbNSw2XSAtIHMgKiBBWzIsNl1cblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY291bnQsIGksIGkxLCBqLCBvLCByZWYsIHJlZjEsIHJlZjI7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgY291bnQgPSAwO1xuLy8gZm9yIGVhY2ggdXBwZXIgdHJpYW5nbGUgXCJvZmYtZGlhZ29uYWxcIiBjb21wb25lbnQgZG8gc3RlcDJcbiAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gRUlHX04gLSAxOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgZm9yIChqID0gaTEgPSByZWYxID0gaSArIDEsIHJlZjIgPSBFSUdfTjsgKHJlZjEgPD0gcmVmMiA/IGkxIDwgcmVmMiA6IGkxID4gcmVmMik7IGogPSByZWYxIDw9IHJlZjIgPyArK2kxIDogLS1pMSkge1xuICAgICAgICBpZiAoRUlHX3l5ZGRbRUlHX04gKiBpICsgal0gIT09IDAuMCkge1xuICAgICAgICAgIHN0ZXAyKGksIGopO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xuICB9O1xuXG4gIHN0ZXAyID0gZnVuY3Rpb24ocCwgcSkge1xuICAgIHZhciBjLCBjYywgaTEsIGoxLCBrLCBvLCByZWYsIHJlZjEsIHJlZjIsIHMsIHNzLCB0LCB0aGV0YTtcbiAgICBrID0gMDtcbiAgICB0ID0gMC4wO1xuICAgIHRoZXRhID0gMC4wO1xuICAgIGMgPSAwLjA7XG4gICAgY2MgPSAwLjA7XG4gICAgcyA9IDAuMDtcbiAgICBzcyA9IDAuMDtcbiAgICAvLyBjb21wdXRlIGMgYW5kIHNcblxuICAgIC8vIGZyb20gTnVtZXJpY2FsIFJlY2lwZXMgKGV4Y2VwdCB0aGV5IGhhdmUgYV9xcSAtIGFfcHApXG4gICAgdGhldGEgPSAwLjUgKiAoRUlHX3l5ZGRbRUlHX04gKiBwICsgcF0gLSBFSUdfeXlkZFtFSUdfTiAqIHEgKyBxXSkgLyBFSUdfeXlkZFtFSUdfTiAqIHAgKyBxXTtcbiAgICB0ID0gMS4wIC8gKE1hdGguYWJzKHRoZXRhKSArIE1hdGguc3FydCh0aGV0YSAqIHRoZXRhICsgMS4wKSk7XG4gICAgaWYgKHRoZXRhIDwgMC4wKSB7XG4gICAgICB0ID0gLXQ7XG4gICAgfVxuICAgIGMgPSAxLjAgLyBNYXRoLnNxcnQodCAqIHQgKyAxLjApO1xuICAgIHMgPSB0ICogYztcbi8vIEQgPSBHRFxuXG4gICAgLy8gd2hpY2ggbWVhbnMgXCJhZGQgcm93c1wiXG4gICAgZm9yIChrID0gbyA9IDAsIHJlZiA9IEVJR19OOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGsgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgY2MgPSBFSUdfeXlkZFtFSUdfTiAqIHAgKyBrXTtcbiAgICAgIHNzID0gRUlHX3l5ZGRbRUlHX04gKiBxICsga107XG4gICAgICBFSUdfeXlkZFtFSUdfTiAqIHAgKyBrXSA9IGMgKiBjYyArIHMgKiBzcztcbiAgICAgIEVJR195eWRkW0VJR19OICogcSArIGtdID0gYyAqIHNzIC0gcyAqIGNjO1xuICAgIH1cbi8vIEQgPSBEIHRyYW5zcG9zZShHKVxuXG4gICAgLy8gd2hpY2ggbWVhbnMgXCJhZGQgY29sdW1uc1wiXG4gICAgZm9yIChrID0gaTEgPSAwLCByZWYxID0gRUlHX047ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBrID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgIGNjID0gRUlHX3l5ZGRbRUlHX04gKiBrICsgcF07XG4gICAgICBzcyA9IEVJR195eWRkW0VJR19OICogayArIHFdO1xuICAgICAgRUlHX3l5ZGRbRUlHX04gKiBrICsgcF0gPSBjICogY2MgKyBzICogc3M7XG4gICAgICBFSUdfeXlkZFtFSUdfTiAqIGsgKyBxXSA9IGMgKiBzcyAtIHMgKiBjYztcbiAgICB9XG4vLyBRID0gR1FcblxuICAgIC8vIHdoaWNoIG1lYW5zIFwiYWRkIHJvd3NcIlxuICAgIGZvciAoayA9IGoxID0gMCwgcmVmMiA9IEVJR19OOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgayA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBjYyA9IEVJR195eXFxW0VJR19OICogcCArIGtdO1xuICAgICAgc3MgPSBFSUdfeXlxcVtFSUdfTiAqIHEgKyBrXTtcbiAgICAgIEVJR195eXFxW0VJR19OICogcCArIGtdID0gYyAqIGNjICsgcyAqIHNzO1xuICAgICAgRUlHX3l5cXFbRUlHX04gKiBxICsga10gPSBjICogc3MgLSBzICogY2M7XG4gICAgfVxuICAgIEVJR195eWRkW0VJR19OICogcCArIHFdID0gMC4wO1xuICAgIHJldHVybiBFSUdfeXlkZFtFSUdfTiAqIHEgKyBwXSA9IDAuMDtcbiAgfTtcblxuICBFdmFsX2VyZiA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4geWVyZigpO1xuICB9O1xuXG4gIHllcmYgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgeXllcmYoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHl5ZXJmID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQ7XG4gICAgZCA9IDAuMDtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChpc2RvdWJsZShwMSkpIHtcbiAgICAgIGQgPSAxLjAgLSBlcmZjKHAxLmQpO1xuICAgICAgcHVzaF9kb3VibGUoZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDEpKSB7XG4gICAgICBwdXNoKHplcm8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNuZWdhdGl2ZXRlcm0ocDEpKSB7XG4gICAgICBwdXNoX3N5bWJvbChFUkYpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaF9zeW1ib2woRVJGKTtcbiAgICBwdXNoKHAxKTtcbiAgICBsaXN0KDIpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgQXV0aG9yIDogcGhpbGlwcGUuYmlsbGV0QG5vb3MuZnJcblxuICAvLyAgZXJmYyh4KVxuXG4gIC8vICBHVyAgQWRkZWQgZXJmYygpIGZyb20gTnVtZXJpY2FsIFJlY2lwZXMgaW4gQ1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgRXZhbF9lcmZjID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiB5ZXJmYygpO1xuICB9O1xuXG4gIHllcmZjID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHl5ZXJmYygpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgeXllcmZjID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQ7XG4gICAgZCA9IDAuMDtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChpc2RvdWJsZShwMSkpIHtcbiAgICAgIGQgPSBlcmZjKHAxLmQpO1xuICAgICAgcHVzaF9kb3VibGUoZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDEpKSB7XG4gICAgICBwdXNoKG9uZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2hfc3ltYm9sKEVSRkMpO1xuICAgIHB1c2gocDEpO1xuICAgIGxpc3QoMik7XG4gIH07XG5cbiAgLy8gZnJvbSBOdW1lcmljYWwgUmVjaXBlcyBpbiBDXG4gIGVyZmMgPSBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGFucywgdCwgejtcbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDEuMDtcbiAgICB9XG4gICAgdCA9IDAuMDtcbiAgICB6ID0gMC4wO1xuICAgIGFucyA9IDAuMDtcbiAgICB6ID0gTWF0aC5hYnMoeCk7XG4gICAgdCA9IDEuMCAvICgxLjAgKyAwLjUgKiB6KTtcbiAgICBhbnMgPSB0ICogTWF0aC5leHAoLXogKiB6IC0gMS4yNjU1MTIyMyArIHQgKiAoMS4wMDAwMjM2OCArIHQgKiAoMC4zNzQwOTE5NiArIHQgKiAoMC4wOTY3ODQxOCArIHQgKiAoLTAuMTg2Mjg4MDYgKyB0ICogKDAuMjc4ODY4MDcgKyB0ICogKC0xLjEzNTIwMzk4ICsgdCAqICgxLjQ4ODUxNTg3ICsgdCAqICgtMC44MjIxNTIyMyArIHQgKiAwLjE3MDg3Mjc3KSkpKSkpKSkpO1xuICAgIGlmICh4ID49IDAuMCkge1xuICAgICAgcmV0dXJuIGFucztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDIuMCAtIGFucztcbiAgICB9XG4gIH07XG5cbiAgLy8gRXZhbHVhdGUgYW4gZXhwcmVzc2lvbiwgZm9yIGV4YW1wbGUuLi5cblxuICAvLyAgcHVzaChwMSlcbiAgLy8gIEV2YWwoKVxuICAvLyAgcDIgPSBwb3AoKVxuICBFdmFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHdpbGxFdmFsdWF0ZUFzRmxvYXRzO1xuICAgIGNoZWNrX2VzY19mbGFnKCk7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKHAxID09IG51bGwpIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgIH1cbiAgICBpZiAoIWV2YWx1YXRpbmdBc0Zsb2F0cyAmJiBpc2Zsb2F0aW5nKHAxKSkge1xuICAgICAgd2lsbEV2YWx1YXRlQXNGbG9hdHMgPSB0cnVlO1xuICAgICAgZXZhbHVhdGluZ0FzRmxvYXRzKys7XG4gICAgfVxuICAgIHN3aXRjaCAocDEuaykge1xuICAgICAgY2FzZSBDT05TOlxuICAgICAgICBFdmFsX2NvbnMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE5VTTpcbiAgICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICAgIHB1c2hfZG91YmxlKGNvbnZlcnRfcmF0aW9uYWxfdG9fZG91YmxlKHAxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgIGNhc2UgU1RSOlxuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRFTlNPUjpcbiAgICAgICAgRXZhbF90ZW5zb3IoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNZTTpcbiAgICAgICAgRXZhbF9zeW0oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzdG9wKFwiYXRvbT9cIik7XG4gICAgfVxuICAgIGlmICh3aWxsRXZhbHVhdGVBc0Zsb2F0cykge1xuICAgICAgZXZhbHVhdGluZ0FzRmxvYXRzLS07XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgRXZhbF9zeW0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3ljbGVTdHJpbmcsIGksIG8sIHBvc2l0aW9uSWZTeW1ib2xBbHJlYWR5QmVpbmdFdmFsdWF0ZWQsIHJlZiwgcmVmMTtcbiAgICAvLyBub3RlIHRoYXQgZnVuY3Rpb24gY2FsbHMgYXJlIG5vdCBwcm9jZXNzZWQgaGVyZVxuICAgIC8vIGJlY2F1c2UsIHNpbmNlIHRoZXkgaGF2ZSBhbiBhcmd1bWVudCAoYXQgbGVhc3QgYW4gZW1wdHkgb25lKVxuICAgIC8vIHRoZXkgYXJlIGFjdHVhbGx5IENPTnMsIHdoaWNoIGlzIGEgYnJhbmNoIG9mIHRoZVxuICAgIC8vIHN3aXRjaCBiZWZvcmUgdGhlIG9uZSB0aGF0IGNhbGxzIHRoaXMgZnVuY3Rpb25cblxuICAgIC8vIGJhcmUga2V5d29yZD9cbiAgICAvLyBJZiBpdCdzIGEga2V5d29yZCwgdGhlbiB3ZSBkb24ndCBsb29rXG4gICAgLy8gYXQgdGhlIGJpbmRpbmcgYXJyYXksIGJlY2F1c2Uga2V5d29yZHNcbiAgICAvLyBhcmUgbm90IHJlZGVmaW5hYmxlLiBcbiAgICBpZiAoaXNrZXl3b3JkKHAxKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHN5bWJvbChMQVNUKSk7XG4gICAgICBsaXN0KDIpO1xuICAgICAgRXZhbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocDEgPT09IHN5bWJvbChQSSkgJiYgZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICBwdXNoX2RvdWJsZShNYXRoLlBJKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRXZhbHVhdGUgc3ltYm9sJ3MgYmluZGluZ1xuICAgIHAyID0gZ2V0X2JpbmRpbmcocDEpO1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJsb29rZWQgdXA6IFwiICsgcDEgKyBcIiB3aGljaCBjb250YWluczogXCIgKyBwMik7XG4gICAgfVxuICAgIHB1c2gocDIpO1xuICAgIC8vIGRpZmZlcmVudGx5IGZyb20gc3RhbmRhcmQgTGlzcCxcbiAgICAvLyBoZXJlIHRoZSBldmFsdWF0aW9uIGlzIG5vdFxuICAgIC8vIG9uZS1zdGVwIG9ubHksIHJhdGhlciBpdCBrZWVwcyBldmFsdWF0aW5nXG4gICAgLy8gXCJhbGwgdGhlIHdheVwiIHVudGlsIGEgc3ltYm9sIGlzXG4gICAgLy8gZGVmaW5lZCBhcyBpdHNlbGYuXG4gICAgLy8gVW5jb21tZW50IHRoZXNlIHR3byBsaW5lcyB0byBnZXQgTGlzcFxuICAgIC8vIGJlaGF2aW91ciAoYW5kIGJyZWFrIG1vc3QgdGVzdHMpXG4gICAgaWYgKHAxICE9PSBwMikge1xuICAgICAgLy8gZGV0ZWN0IHJlY3Vyc2l2ZSBsb29rdXAgb2Ygc3ltYm9scywgd2hpY2ggd291bGQgb3RoZXJ3aXNlXG4gICAgICAvLyBjYXVzZSBhIHN0YWNrIG92ZXJmbG93LlxuICAgICAgLy8gTm90ZSB0aGF0IHJlY3Vyc2l2ZSBmdW5jdGlvbnMgd2lsbCBzdGlsbCB3b3JrIGJlY2F1c2VcbiAgICAgIC8vIGFzIG1lbnRpb25lZCBhdCB0aGUgdG9wLCB0aGlzIG1ldGhvZCBkb2Vzbid0IGxvb2tcbiAgICAgIC8vIHVwIGFuZCBldmFsdWF0ZSBmdW5jdGlvbiBjYWxscy5cbiAgICAgIHBvc2l0aW9uSWZTeW1ib2xBbHJlYWR5QmVpbmdFdmFsdWF0ZWQgPSBjaGFpbk9mVXNlclN5bWJvbHNOb3RGdW5jdGlvbnNCZWluZ0V2YWx1YXRlZC5pbmRleE9mKHAxKTtcbiAgICAgIGlmIChwb3NpdGlvbklmU3ltYm9sQWxyZWFkeUJlaW5nRXZhbHVhdGVkICE9PSAtMSkge1xuICAgICAgICBjeWNsZVN0cmluZyA9IFwiXCI7XG4gICAgICAgIGZvciAoaSA9IG8gPSByZWYgPSBwb3NpdGlvbklmU3ltYm9sQWxyZWFkeUJlaW5nRXZhbHVhdGVkLCByZWYxID0gY2hhaW5PZlVzZXJTeW1ib2xzTm90RnVuY3Rpb25zQmVpbmdFdmFsdWF0ZWQubGVuZ3RoOyAocmVmIDw9IHJlZjEgPyBvIDwgcmVmMSA6IG8gPiByZWYxKTsgaSA9IHJlZiA8PSByZWYxID8gKytvIDogLS1vKSB7XG4gICAgICAgICAgY3ljbGVTdHJpbmcgKz0gY2hhaW5PZlVzZXJTeW1ib2xzTm90RnVuY3Rpb25zQmVpbmdFdmFsdWF0ZWRbaV0ucHJpbnRuYW1lICsgXCIgLT4gXCI7XG4gICAgICAgIH1cbiAgICAgICAgY3ljbGVTdHJpbmcgKz0gcDEucHJpbnRuYW1lO1xuICAgICAgICBzdG9wKFwicmVjdXJzaXZlIGV2YWx1YXRpb24gb2Ygc3ltYm9sczogXCIgKyBjeWNsZVN0cmluZyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNoYWluT2ZVc2VyU3ltYm9sc05vdEZ1bmN0aW9uc0JlaW5nRXZhbHVhdGVkLnB1c2gocDEpO1xuICAgICAgRXZhbCgpO1xuICAgICAgcmV0dXJuIGNoYWluT2ZVc2VyU3ltYm9sc05vdEZ1bmN0aW9uc0JlaW5nRXZhbHVhdGVkLnBvcCgpO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX2NvbnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29uc19oZWFkO1xuICAgIGNvbnNfaGVhZCA9IGNhcihwMSk7XG4gICAgLy8gbm9ybWFsbHkgdGhlIGNvbnNfaGVhZCBpcyBhIHN5bWJvbCxcbiAgICAvLyBidXQgc29tZXRpbWVzIGluIHRoZSBjYXNlIG9mXG4gICAgLy8gZnVuY3Rpb25zIHdlIGRvbid0IGhhdmUgYSBzeW1ib2wsXG4gICAgLy8gd2UgaGF2ZSB0byBldmFsdWF0ZSBzb21ldGhpbmcgdG8gZ2V0IHRvIHRoZVxuICAgIC8vIHN5bWJvbC4gRm9yIGV4YW1wbGUgaWYgYSBmdW5jdGlvbiBpcyBpbnNpZGVcbiAgICAvLyBhIHRlbnNvciwgdGhlbiB3ZSBuZWVkIHRvIGV2YWx1YXRlIGFuIGluZGV4XG4gICAgLy8gYWNjZXNzIGZpcnN0IHRvIGdldCB0byB0aGUgZnVuY3Rpb24uXG4gICAgLy8gSW4gdGhvc2UgY2FzZXMsIHdlIGZpbmQgYW4gRVZBTCBoZXJlLFxuICAgIC8vIHNvIHdlIHByb2NlZWQgdG8gRVZBTFxuICAgIGlmIChjYXIoY29uc19oZWFkKSA9PT0gc3ltYm9sKEVWQUwpKSB7XG4gICAgICBFdmFsX3VzZXJfZnVuY3Rpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFpc3N5bWJvbChjb25zX2hlYWQpKSB7XG4gICAgICBzdG9wKFwiY29ucz9cIik7XG4gICAgfVxuICAgIHN3aXRjaCAoc3ltbnVtKGNvbnNfaGVhZCkpIHtcbiAgICAgIGNhc2UgQUJTOlxuICAgICAgICByZXR1cm4gRXZhbF9hYnMoKTtcbiAgICAgIGNhc2UgQUREOlxuICAgICAgICByZXR1cm4gRXZhbF9hZGQoKTtcbiAgICAgIGNhc2UgQURKOlxuICAgICAgICByZXR1cm4gRXZhbF9hZGooKTtcbiAgICAgIGNhc2UgQU5EOlxuICAgICAgICByZXR1cm4gRXZhbF9hbmQoKTtcbiAgICAgIGNhc2UgQVJDQ09TOlxuICAgICAgICByZXR1cm4gRXZhbF9hcmNjb3MoKTtcbiAgICAgIGNhc2UgQVJDQ09TSDpcbiAgICAgICAgcmV0dXJuIEV2YWxfYXJjY29zaCgpO1xuICAgICAgY2FzZSBBUkNTSU46XG4gICAgICAgIHJldHVybiBFdmFsX2FyY3NpbigpO1xuICAgICAgY2FzZSBBUkNTSU5IOlxuICAgICAgICByZXR1cm4gRXZhbF9hcmNzaW5oKCk7XG4gICAgICBjYXNlIEFSQ1RBTjpcbiAgICAgICAgcmV0dXJuIEV2YWxfYXJjdGFuKCk7XG4gICAgICBjYXNlIEFSQ1RBTkg6XG4gICAgICAgIHJldHVybiBFdmFsX2FyY3RhbmgoKTtcbiAgICAgIGNhc2UgQVJHOlxuICAgICAgICByZXR1cm4gRXZhbF9hcmcoKTtcbiAgICAgIGNhc2UgQVRPTUlaRTpcbiAgICAgICAgcmV0dXJuIEV2YWxfYXRvbWl6ZSgpO1xuICAgICAgY2FzZSBCRVNTRUxKOlxuICAgICAgICByZXR1cm4gRXZhbF9iZXNzZWxqKCk7XG4gICAgICBjYXNlIEJFU1NFTFk6XG4gICAgICAgIHJldHVybiBFdmFsX2Jlc3NlbHkoKTtcbiAgICAgIGNhc2UgQklORElORzpcbiAgICAgICAgcmV0dXJuIEV2YWxfYmluZGluZygpO1xuICAgICAgY2FzZSBCSU5PTUlBTDpcbiAgICAgICAgcmV0dXJuIEV2YWxfYmlub21pYWwoKTtcbiAgICAgIGNhc2UgQ0VJTElORzpcbiAgICAgICAgcmV0dXJuIEV2YWxfY2VpbGluZygpO1xuICAgICAgY2FzZSBDSEVDSzpcbiAgICAgICAgcmV0dXJuIEV2YWxfY2hlY2soKTtcbiAgICAgIGNhc2UgQ0hPT1NFOlxuICAgICAgICByZXR1cm4gRXZhbF9jaG9vc2UoKTtcbiAgICAgIGNhc2UgQ0lSQ0VYUDpcbiAgICAgICAgcmV0dXJuIEV2YWxfY2lyY2V4cCgpO1xuICAgICAgY2FzZSBDTEVBUjpcbiAgICAgICAgcmV0dXJuIEV2YWxfY2xlYXIoKTtcbiAgICAgIGNhc2UgQ0xFQVJBTEw6XG4gICAgICAgIHJldHVybiBFdmFsX2NsZWFyYWxsKCk7XG4gICAgICBjYXNlIENMRUFSUEFUVEVSTlM6XG4gICAgICAgIHJldHVybiBFdmFsX2NsZWFycGF0dGVybnMoKTtcbiAgICAgIGNhc2UgQ0xPQ0s6XG4gICAgICAgIHJldHVybiBFdmFsX2Nsb2NrKCk7XG4gICAgICBjYXNlIENPRUZGOlxuICAgICAgICByZXR1cm4gRXZhbF9jb2VmZigpO1xuICAgICAgY2FzZSBDT0ZBQ1RPUjpcbiAgICAgICAgcmV0dXJuIEV2YWxfY29mYWN0b3IoKTtcbiAgICAgIGNhc2UgQ09OREVOU0U6XG4gICAgICAgIHJldHVybiBFdmFsX2NvbmRlbnNlKCk7XG4gICAgICBjYXNlIENPTko6XG4gICAgICAgIHJldHVybiBFdmFsX2NvbmooKTtcbiAgICAgIGNhc2UgQ09OVFJBQ1Q6XG4gICAgICAgIHJldHVybiBFdmFsX2NvbnRyYWN0KCk7XG4gICAgICBjYXNlIENPUzpcbiAgICAgICAgcmV0dXJuIEV2YWxfY29zKCk7XG4gICAgICBjYXNlIENPU0g6XG4gICAgICAgIHJldHVybiBFdmFsX2Nvc2goKTtcbiAgICAgIGNhc2UgREVDT01QOlxuICAgICAgICByZXR1cm4gRXZhbF9kZWNvbXAoKTtcbiAgICAgIGNhc2UgREVHUkVFOlxuICAgICAgICByZXR1cm4gRXZhbF9kZWdyZWUoKTtcbiAgICAgIGNhc2UgREVGSU5UOlxuICAgICAgICByZXR1cm4gRXZhbF9kZWZpbnQoKTtcbiAgICAgIGNhc2UgREVOT01JTkFUT1I6XG4gICAgICAgIHJldHVybiBFdmFsX2Rlbm9taW5hdG9yKCk7XG4gICAgICBjYXNlIERFUklWQVRJVkU6XG4gICAgICAgIHJldHVybiBFdmFsX2Rlcml2YXRpdmUoKTtcbiAgICAgIGNhc2UgREVUOlxuICAgICAgICByZXR1cm4gRXZhbF9kZXQoKTtcbiAgICAgIGNhc2UgRElNOlxuICAgICAgICByZXR1cm4gRXZhbF9kaW0oKTtcbiAgICAgIGNhc2UgRElSQUM6XG4gICAgICAgIHJldHVybiBFdmFsX2RpcmFjKCk7XG4gICAgICBjYXNlIERJVklTT1JTOlxuICAgICAgICByZXR1cm4gRXZhbF9kaXZpc29ycygpO1xuICAgICAgY2FzZSBETzpcbiAgICAgICAgcmV0dXJuIEV2YWxfZG8oKTtcbiAgICAgIGNhc2UgRE9UOlxuICAgICAgICByZXR1cm4gRXZhbF9pbm5lcigpO1xuICAgICAgY2FzZSBEUkFXOlxuICAgICAgICByZXR1cm4gRXZhbF9kcmF3KCk7XG4gICAgICBjYXNlIERTT0xWRTpcbiAgICAgICAgcmV0dXJuIEV2YWxfZHNvbHZlKCk7XG4gICAgICBjYXNlIEVJR0VOOlxuICAgICAgICByZXR1cm4gRXZhbF9laWdlbigpO1xuICAgICAgY2FzZSBFSUdFTlZBTDpcbiAgICAgICAgcmV0dXJuIEV2YWxfZWlnZW52YWwoKTtcbiAgICAgIGNhc2UgRUlHRU5WRUM6XG4gICAgICAgIHJldHVybiBFdmFsX2VpZ2VudmVjKCk7XG4gICAgICBjYXNlIEVSRjpcbiAgICAgICAgcmV0dXJuIEV2YWxfZXJmKCk7XG4gICAgICBjYXNlIEVSRkM6XG4gICAgICAgIHJldHVybiBFdmFsX2VyZmMoKTtcbiAgICAgIGNhc2UgRVZBTDpcbiAgICAgICAgcmV0dXJuIEV2YWxfRXZhbCgpO1xuICAgICAgY2FzZSBFWFA6XG4gICAgICAgIHJldHVybiBFdmFsX2V4cCgpO1xuICAgICAgY2FzZSBFWFBBTkQ6XG4gICAgICAgIHJldHVybiBFdmFsX2V4cGFuZCgpO1xuICAgICAgY2FzZSBFWFBDT1M6XG4gICAgICAgIHJldHVybiBFdmFsX2V4cGNvcygpO1xuICAgICAgY2FzZSBFWFBTSU46XG4gICAgICAgIHJldHVybiBFdmFsX2V4cHNpbigpO1xuICAgICAgY2FzZSBGQUNUT1I6XG4gICAgICAgIHJldHVybiBFdmFsX2ZhY3RvcigpO1xuICAgICAgY2FzZSBGQUNUT1JJQUw6XG4gICAgICAgIHJldHVybiBFdmFsX2ZhY3RvcmlhbCgpO1xuICAgICAgY2FzZSBGQUNUT1JQT0xZOlxuICAgICAgICByZXR1cm4gRXZhbF9mYWN0b3Jwb2x5KCk7XG4gICAgICBjYXNlIEZJTFRFUjpcbiAgICAgICAgcmV0dXJuIEV2YWxfZmlsdGVyKCk7XG4gICAgICBjYXNlIEZMT0FURjpcbiAgICAgICAgcmV0dXJuIEV2YWxfZmxvYXQoKTtcbiAgICAgIGNhc2UgQVBQUk9YUkFUSU86XG4gICAgICAgIHJldHVybiBFdmFsX2FwcHJveHJhdGlvKCk7XG4gICAgICBjYXNlIEZMT09SOlxuICAgICAgICByZXR1cm4gRXZhbF9mbG9vcigpO1xuICAgICAgY2FzZSBGT1I6XG4gICAgICAgIHJldHVybiBFdmFsX2ZvcigpO1xuICAgICAgLy8gdGhpcyBpcyBpbnZva2VkIG9ubHkgd2hlbiB3ZVxuICAgICAgLy8gZXZhbHVhdGUgYSBmdW5jdGlvbiB0aGF0IGlzIE5PVCBiZWluZyBjYWxsZWRcbiAgICAgIC8vIGUuZy4gd2hlbiBmIGlzIGEgZnVuY3Rpb24gYXMgd2UgZG9cbiAgICAgIC8vICBnID0gZlxuICAgICAgY2FzZSBGVU5DVElPTjpcbiAgICAgICAgcmV0dXJuIEV2YWxfZnVuY3Rpb25fcmVmZXJlbmNlKCk7XG4gICAgICBjYXNlIEdBTU1BOlxuICAgICAgICByZXR1cm4gRXZhbF9nYW1tYSgpO1xuICAgICAgY2FzZSBHQ0Q6XG4gICAgICAgIHJldHVybiBFdmFsX2djZCgpO1xuICAgICAgY2FzZSBIRVJNSVRFOlxuICAgICAgICByZXR1cm4gRXZhbF9oZXJtaXRlKCk7XG4gICAgICBjYXNlIEhJTEJFUlQ6XG4gICAgICAgIHJldHVybiBFdmFsX2hpbGJlcnQoKTtcbiAgICAgIGNhc2UgSU1BRzpcbiAgICAgICAgcmV0dXJuIEV2YWxfaW1hZygpO1xuICAgICAgY2FzZSBJTkRFWDpcbiAgICAgICAgcmV0dXJuIEV2YWxfaW5kZXgoKTtcbiAgICAgIGNhc2UgSU5ORVI6XG4gICAgICAgIHJldHVybiBFdmFsX2lubmVyKCk7XG4gICAgICBjYXNlIElOVEVHUkFMOlxuICAgICAgICByZXR1cm4gRXZhbF9pbnRlZ3JhbCgpO1xuICAgICAgY2FzZSBJTlY6XG4gICAgICAgIHJldHVybiBFdmFsX2ludigpO1xuICAgICAgY2FzZSBJTlZHOlxuICAgICAgICByZXR1cm4gRXZhbF9pbnZnKCk7XG4gICAgICBjYXNlIElTSU5URUdFUjpcbiAgICAgICAgcmV0dXJuIEV2YWxfaXNpbnRlZ2VyKCk7XG4gICAgICBjYXNlIElTUFJJTUU6XG4gICAgICAgIHJldHVybiBFdmFsX2lzcHJpbWUoKTtcbiAgICAgIGNhc2UgTEFHVUVSUkU6XG4gICAgICAgIHJldHVybiBFdmFsX2xhZ3VlcnJlKCk7XG4gICAgICAvLyAgd2hlbiBMQVBMQUNFIHRoZW4gRXZhbF9sYXBsYWNlKClcbiAgICAgIGNhc2UgTENNOlxuICAgICAgICByZXR1cm4gRXZhbF9sY20oKTtcbiAgICAgIGNhc2UgTEVBRElORzpcbiAgICAgICAgcmV0dXJuIEV2YWxfbGVhZGluZygpO1xuICAgICAgY2FzZSBMRUdFTkRSRTpcbiAgICAgICAgcmV0dXJuIEV2YWxfbGVnZW5kcmUoKTtcbiAgICAgIGNhc2UgTE9HOlxuICAgICAgICByZXR1cm4gRXZhbF9sb2coKTtcbiAgICAgIGNhc2UgTE9PS1VQOlxuICAgICAgICByZXR1cm4gRXZhbF9sb29rdXAoKTtcbiAgICAgIGNhc2UgTU9EOlxuICAgICAgICByZXR1cm4gRXZhbF9tb2QoKTtcbiAgICAgIGNhc2UgTVVMVElQTFk6XG4gICAgICAgIHJldHVybiBFdmFsX211bHRpcGx5KCk7XG4gICAgICBjYXNlIE5PVDpcbiAgICAgICAgcmV0dXJuIEV2YWxfbm90KCk7XG4gICAgICBjYXNlIE5ST09UUzpcbiAgICAgICAgcmV0dXJuIEV2YWxfbnJvb3RzKCk7XG4gICAgICBjYXNlIE5VTUJFUjpcbiAgICAgICAgcmV0dXJuIEV2YWxfbnVtYmVyKCk7XG4gICAgICBjYXNlIE5VTUVSQVRPUjpcbiAgICAgICAgcmV0dXJuIEV2YWxfbnVtZXJhdG9yKCk7XG4gICAgICBjYXNlIE9QRVJBVE9SOlxuICAgICAgICByZXR1cm4gRXZhbF9vcGVyYXRvcigpO1xuICAgICAgY2FzZSBPUjpcbiAgICAgICAgcmV0dXJuIEV2YWxfb3IoKTtcbiAgICAgIGNhc2UgT1VURVI6XG4gICAgICAgIHJldHVybiBFdmFsX291dGVyKCk7XG4gICAgICBjYXNlIFBBVFRFUk46XG4gICAgICAgIHJldHVybiBFdmFsX3BhdHRlcm4oKTtcbiAgICAgIGNhc2UgUEFUVEVSTlNJTkZPOlxuICAgICAgICByZXR1cm4gRXZhbF9wYXR0ZXJuc2luZm8oKTtcbiAgICAgIGNhc2UgUE9MQVI6XG4gICAgICAgIHJldHVybiBFdmFsX3BvbGFyKCk7XG4gICAgICBjYXNlIFBPV0VSOlxuICAgICAgICByZXR1cm4gRXZhbF9wb3dlcigpO1xuICAgICAgY2FzZSBQUklNRTpcbiAgICAgICAgcmV0dXJuIEV2YWxfcHJpbWUoKTtcbiAgICAgIGNhc2UgUFJJTlQ6XG4gICAgICAgIHJldHVybiBFdmFsX3ByaW50KCk7XG4gICAgICBjYXNlIFBSSU5UMkRBU0NJSTpcbiAgICAgICAgcmV0dXJuIEV2YWxfcHJpbnQyZGFzY2lpKCk7XG4gICAgICBjYXNlIFBSSU5URlVMTDpcbiAgICAgICAgcmV0dXJuIEV2YWxfcHJpbnRjb21wdXRlcigpO1xuICAgICAgY2FzZSBQUklOVExBVEVYOlxuICAgICAgICByZXR1cm4gRXZhbF9wcmludGxhdGV4KCk7XG4gICAgICBjYXNlIFBSSU5UTElTVDpcbiAgICAgICAgcmV0dXJuIEV2YWxfcHJpbnRsaXN0KCk7XG4gICAgICBjYXNlIFBSSU5UUExBSU46XG4gICAgICAgIHJldHVybiBFdmFsX3ByaW50aHVtYW4oKTtcbiAgICAgIGNhc2UgUFJPRFVDVDpcbiAgICAgICAgcmV0dXJuIEV2YWxfcHJvZHVjdCgpO1xuICAgICAgY2FzZSBRVU9URTpcbiAgICAgICAgcmV0dXJuIEV2YWxfcXVvdGUoKTtcbiAgICAgIGNhc2UgUVVPVElFTlQ6XG4gICAgICAgIHJldHVybiBFdmFsX3F1b3RpZW50KCk7XG4gICAgICBjYXNlIFJBTks6XG4gICAgICAgIHJldHVybiBFdmFsX3JhbmsoKTtcbiAgICAgIGNhc2UgUkFUSU9OQUxJWkU6XG4gICAgICAgIHJldHVybiBFdmFsX3JhdGlvbmFsaXplKCk7XG4gICAgICBjYXNlIFJFQUw6XG4gICAgICAgIHJldHVybiBFdmFsX3JlYWwoKTtcbiAgICAgIGNhc2UgUk9VTkQ6XG4gICAgICAgIHJldHVybiBFdmFsX3JvdW5kKCk7XG4gICAgICBjYXNlIFlZUkVDVDpcbiAgICAgICAgcmV0dXJuIEV2YWxfcmVjdCgpO1xuICAgICAgY2FzZSBST09UUzpcbiAgICAgICAgcmV0dXJuIEV2YWxfcm9vdHMoKTtcbiAgICAgIGNhc2UgU0VUUTpcbiAgICAgICAgcmV0dXJuIEV2YWxfc2V0cSgpO1xuICAgICAgY2FzZSBTR046XG4gICAgICAgIHJldHVybiBFdmFsX3NnbigpO1xuICAgICAgY2FzZSBTSUxFTlRQQVRURVJOOlxuICAgICAgICByZXR1cm4gRXZhbF9zaWxlbnRwYXR0ZXJuKCk7XG4gICAgICBjYXNlIFNJTVBMSUZZOlxuICAgICAgICByZXR1cm4gRXZhbF9zaW1wbGlmeSgpO1xuICAgICAgY2FzZSBTSU46XG4gICAgICAgIHJldHVybiBFdmFsX3NpbigpO1xuICAgICAgY2FzZSBTSU5IOlxuICAgICAgICByZXR1cm4gRXZhbF9zaW5oKCk7XG4gICAgICBjYXNlIFNIQVBFOlxuICAgICAgICByZXR1cm4gRXZhbF9zaGFwZSgpO1xuICAgICAgY2FzZSBTUVJUOlxuICAgICAgICByZXR1cm4gRXZhbF9zcXJ0KCk7XG4gICAgICBjYXNlIFNUT1A6XG4gICAgICAgIHJldHVybiBFdmFsX3N0b3AoKTtcbiAgICAgIGNhc2UgU1VCU1Q6XG4gICAgICAgIHJldHVybiBFdmFsX3N1YnN0KCk7XG4gICAgICBjYXNlIFNVTTpcbiAgICAgICAgcmV0dXJuIEV2YWxfc3VtKCk7XG4gICAgICBjYXNlIFNZTUJPTFNJTkZPOlxuICAgICAgICByZXR1cm4gRXZhbF9zeW1ib2xzaW5mbygpO1xuICAgICAgY2FzZSBUQU46XG4gICAgICAgIHJldHVybiBFdmFsX3RhbigpO1xuICAgICAgY2FzZSBUQU5IOlxuICAgICAgICByZXR1cm4gRXZhbF90YW5oKCk7XG4gICAgICBjYXNlIFRBWUxPUjpcbiAgICAgICAgcmV0dXJuIEV2YWxfdGF5bG9yKCk7XG4gICAgICBjYXNlIFRFU1Q6XG4gICAgICAgIHJldHVybiBFdmFsX3Rlc3QoKTtcbiAgICAgIGNhc2UgVEVTVEVROlxuICAgICAgICByZXR1cm4gRXZhbF90ZXN0ZXEoKTtcbiAgICAgIGNhc2UgVEVTVEdFOlxuICAgICAgICByZXR1cm4gRXZhbF90ZXN0Z2UoKTtcbiAgICAgIGNhc2UgVEVTVEdUOlxuICAgICAgICByZXR1cm4gRXZhbF90ZXN0Z3QoKTtcbiAgICAgIGNhc2UgVEVTVExFOlxuICAgICAgICByZXR1cm4gRXZhbF90ZXN0bGUoKTtcbiAgICAgIGNhc2UgVEVTVExUOlxuICAgICAgICByZXR1cm4gRXZhbF90ZXN0bHQoKTtcbiAgICAgIGNhc2UgVFJBTlNQT1NFOlxuICAgICAgICByZXR1cm4gRXZhbF90cmFuc3Bvc2UoKTtcbiAgICAgIGNhc2UgVU5JVDpcbiAgICAgICAgcmV0dXJuIEV2YWxfdW5pdCgpO1xuICAgICAgY2FzZSBaRVJPOlxuICAgICAgICByZXR1cm4gRXZhbF96ZXJvKCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gRXZhbF91c2VyX2Z1bmN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIEV2YWxfYmluZGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwdXNoKGdldF9iaW5kaW5nKGNhZHIocDEpKSk7XG4gIH07XG5cbiAgRXZhbF9jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjaGVja1Jlc3VsdDtcbiAgICAvLyBjaGVjayB0aGUgYXJndW1lbnRcbiAgICBjaGVja1Jlc3VsdCA9IGlzWmVyb0xpa2VPck5vblplcm9MaWtlT3JVbmRldGVybWluZWQoY2FkcihwMSkpO1xuICAgIGlmIChjaGVja1Jlc3VsdCA9PSBudWxsKSB7XG4gICAgICAvLyByZXR1cm5lZCBudWxsOiB1bmtub3duIHJlc3VsdFxuICAgICAgLy8gbGVhdmUgdGhlIHdob2xlIGNoZWNrIHVuZXZhbGxlZFxuICAgICAgcmV0dXJuIHB1c2gocDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm5lZCAxIG9yIDBcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoY2hlY2tSZXN1bHQpO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX2RldCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gZGV0KCk7XG4gIH07XG5cbiAgRXZhbF9kaW0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbjtcbiAgICAvL2ludCBuXG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKGlzY29ucyhjZGRyKHAxKSkpIHtcbiAgICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuID0gMTtcbiAgICB9XG4gICAgaWYgKCFpc3RlbnNvcihwMikpIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMSk7IC8vIGRpbSBvZiBzY2FsYXIgaXMgMVxuICAgIH0gZWxzZSBpZiAobiA8IDEgfHwgbiA+IHAyLnRlbnNvci5uZGltKSB7XG4gICAgICByZXR1cm4gcHVzaChwMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIocDIudGVuc29yLmRpbVtuIC0gMV0pO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX2Rpdmlzb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBkaXZpc29ycygpO1xuICB9O1xuXG4gIEV2YWxfZG8gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0cztcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHBvcCgpO1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHJlc3VsdHMucHVzaChwMSA9IGNkcihwMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBFdmFsX2Rzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHB1c2goY2FkZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBkc29sdmUoKTtcbiAgfTtcblxuICAvLyBmb3IgZXhhbXBsZSwgRXZhbChmLHgsMilcbiAgRXZhbF9FdmFsID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAxID0gY2RkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHN1YnN0KCk7XG4gICAgICBwMSA9IGNkZHIocDEpO1xuICAgIH1cbiAgICByZXR1cm4gRXZhbCgpO1xuICB9O1xuXG4gIC8vIGV4cCBldmFsdWF0aW9uOiBpdCByZXBsYWNlcyBpdHNlbGYgd2l0aFxuICAvLyBhIFBPV0VSKEUsc29tZXRoaW5nKSBub2RlIGFuZCBldmFscyB0aGF0IG9uZVxuICBFdmFsX2V4cCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gZXhwb25lbnRpYWwoKTtcbiAgfTtcblxuICBFdmFsX2ZhY3RvcmlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gZmFjdG9yaWFsKCk7XG4gIH07XG5cbiAgRXZhbF9mYWN0b3Jwb2x5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdHM7XG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHB1c2goY2FyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBmYWN0b3Jwb2x5KCk7XG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIGZhY3RvcnBvbHkoKTtcbiAgICAgIHJlc3VsdHMucHVzaChwMSA9IGNkcihwMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBFdmFsX2hlcm1pdGUgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gaGVybWl0ZSgpO1xuICB9O1xuXG4gIEV2YWxfaGlsYmVydCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gaGlsYmVydCgpO1xuICB9O1xuXG4gIEV2YWxfaW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCwgb3JpZywgdGhlVGVuc29yO1xuICAgIGggPSB0b3M7XG4gICAgb3JpZyA9IHAxO1xuICAgIFxuICAgIC8vIGxvb2sgaW50byB0aGUgaGVhZCBvZiB0aGUgbGlzdCxcbiAgICAvLyB3aGVuIGV2YWx1YXRlZCBpdCBzaG91bGQgYmUgYSB0ZW5zb3JcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgcHVzaChjYXIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgdGhlVGVuc29yID0gc3RhY2tbdG9zIC0gMV07XG4gICAgaWYgKGlzTnVtZXJpY0F0b20odGhlVGVuc29yKSkge1xuICAgICAgc3RvcChcInRyeWluZyB0byBhY2Nlc3MgYSBzY2FsYXIgYXMgYSB0ZW5zb3JcIik7XG4gICAgfVxuICAgIGlmICghaXN0ZW5zb3IodGhlVGVuc29yKSkge1xuICAgICAgLy8gdGhlIHRlbnNvciBpcyBub3QgYWxsb2NhdGVkIHlldCwgc29cbiAgICAgIC8vIGxlYXZpbmcgdGhlIGV4cHJlc3Npb24gdW5ldmFsbGVkXG4gICAgICBtb3ZlVG9zKGgpO1xuICAgICAgcHVzaChvcmlnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gd2UgZXhhbWluZWQgdGhlIGhlYWQgb2YgdGhlIGxpc3Qgd2hpY2hcbiAgICAvLyB3YXMgdGhlIHRlbnNvciwgbm93IGxvb2sgaW50b1xuICAgIC8vIHRoZSBpbmRleGVzXG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgRXZhbCgpO1xuICAgICAgaWYgKCFpc2ludGVnZXJvcmludGVnZXJmbG9hdChzdGFja1t0b3MgLSAxXSkpIHtcbiAgICAgICAgLy8gaW5kZXggd2l0aCBzb21ldGhpbmcgb3RoZXIgdGhhblxuICAgICAgICAvLyBhbiBpbnRlZ2VyXG4gICAgICAgIG1vdmVUb3MoaCk7XG4gICAgICAgIHB1c2gob3JpZyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4X2Z1bmN0aW9uKHRvcyAtIGgpO1xuICB9O1xuXG4gIEV2YWxfaW52ID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBpbnYoKTtcbiAgfTtcblxuICBFdmFsX2ludmcgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIGludmcoKTtcbiAgfTtcblxuICBFdmFsX2lzaW50ZWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChpc3JhdGlvbmFsKHAxKSkge1xuICAgICAgaWYgKGlzaW50ZWdlcihwMSkpIHtcbiAgICAgICAgcHVzaChvbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgbiA9IE1hdGguZmxvb3IocDEuZCk7XG4gICAgICBpZiAobiA9PT0gcDEuZCkge1xuICAgICAgICBwdXNoKG9uZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHplcm8pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoX3N5bWJvbChJU0lOVEVHRVIpO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiBsaXN0KDIpO1xuICB9O1xuXG4gIEV2YWxfbnVtYmVyID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKHAxLmsgPT09IE5VTSB8fCBwMS5rID09PSBET1VCTEUpIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMCk7XG4gICAgfVxuICB9O1xuXG4gIEV2YWxfb3BlcmF0b3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaDtcbiAgICBoID0gdG9zO1xuICAgIHB1c2hfc3ltYm9sKE9QRVJBVE9SKTtcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgfVxuICAgIHJldHVybiBsaXN0KHRvcyAtIGgpO1xuICB9O1xuXG4gIC8vIHF1b3RlIGRlZmluaXRpb25cbiAgRXZhbF9xdW90ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwdXNoKGNhZHIocDEpKTtcbiAgfTtcblxuICAvLyByYW5rIGRlZmluaXRpb25cbiAgRXZhbF9yYW5rID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzdGVuc29yKHAxKSkge1xuICAgICAgcmV0dXJuIHB1c2hfaW50ZWdlcihwMS50ZW5zb3IubmRpbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoKHplcm8pO1xuICAgIH1cbiAgfTtcblxuICAvLyBFdmFsdWF0ZXMgdGhlIHJpZ2h0IHNpZGUgYW5kIGFzc2lnbnMgdGhlXG4gIC8vIHJlc3VsdCBvZiB0aGUgZXZhbHVhdGlvbiB0byB0aGUgbGVmdCBzaWRlLlxuICAvLyBJdCdzIGNhbGxlZCBzZXRxIGJlY2F1c2UgaXQgc3RhbmRzIGZvciBcInNldCBxdW90ZWRcIiBmcm9tIExpc3AsXG4gIC8vIHNlZTpcbiAgLy8gICBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg2OTUyOS9kaWZmZXJlbmNlLWJldHdlZW4tc2V0LXNldHEtYW5kLXNldGYtaW4tY29tbW9uLWxpc3BcbiAgLy8gTm90ZSB0aGF0IHRoaXMgYWxzbyB0YWtlcyBjYXNlIG9mIGFzc2lnbmluZyB0byBhIHRlbnNvclxuICAvLyBlbGVtZW50LCB3aGljaCBpcyBzb21ldGhpbmcgdGhhdCBzZXRxIHdvdWxkbid0IGRvXG4gIC8vIGluIGxpc3QsIHNlZSBjb21tZW50cyBmdXJ0aGVyIGRvd24gYmVsb3cuXG5cbiAgLy8gRXhhbXBsZTpcbiAgLy8gICBmID0geFxuICAvLyAgIC8vIGYgZXZhbHVhdGVzIHRvIHgsIHNvIHggaXMgYXNzaWduZWQgdG8gZyByZWFsbHlcbiAgLy8gICAvLyByYXRoZXIgdGhhbiBhY3R1YWxseSBmIGJlaW5nIGFzc2lnbmVkIHRvIGdcbiAgLy8gICBnID0gZlxuICAvLyAgIGYgPSB5XG4gIC8vICAgZ1xuICAvLyAgID4geFxuICBFdmFsX3NldHEgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBjYXNlIG9mIHRlbnNvclxuICAgIGlmIChjYWFkcihwMSkgPT09IHN5bWJvbChJTkRFWCkpIHtcbiAgICAgIHNldHFfaW5kZXhlZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBjYXNlIG9mIGZ1bmN0aW9uIGRlZmluaXRpb25cbiAgICBpZiAoaXNjb25zKGNhZHIocDEpKSkge1xuICAgICAgZGVmaW5lX3VzZXJfZnVuY3Rpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFpc3N5bWJvbChjYWRyKHAxKSkpIHtcbiAgICAgIHN0b3AoXCJzeW1ib2wgYXNzaWdubWVudDogZXJyb3IgaW4gc3ltYm9sXCIpO1xuICAgIH1cbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgc2V0X2JpbmRpbmcoY2FkcihwMSksIHAyKTtcbiAgICAvLyBBbiBhc3NpZ25tZW50IHJldHVybnMgbm90aGluZy5cbiAgICAvLyBUaGlzIGlzIHVubGlrZSBtb3N0IHByb2dyYW1taW5nIGxhbmd1YWdlc1xuICAgIC8vIHdoZXJlIGFuIGFzc2lnbm1lbnQgZG9lcyByZXR1cm4gdGhlXG4gICAgLy8gYXNzaWduZWQgdmFsdWUuXG4gICAgLy8gVE9ETyBDb3VsZCBiZSBjaGFuZ2VkLlxuICAgIHJldHVybiBwdXNoKHN5bWJvbChOSUwpKTtcbiAgfTtcblxuICAvLyBIZXJlIFwic2V0cVwiIGlzIGEgbWlzbm9tZXIgYmVjYXVzZVxuICAvLyBzZXRxIHdvdWxkbid0IHdvcmsgaW4gTGlzcCB0byBzZXQgYXJyYXkgZWxlbWVudHNcbiAgLy8gc2luY2Ugc2V0cSBzdGFuZHMgZm9yIFwic2V0IHF1b3RlZFwiIGFuZCB5b3Ugd291bGRuJ3RcbiAgLy8gcXVvdGUgYW4gYXJyYXkgZWxlbWVudCBhY2Nlc3MuXG4gIC8vIFlvdSdkIHJhdGhlciB1c2Ugc2V0Ziwgd2hpY2ggaXMgYSBtYWNybyB0aGF0IGNhblxuICAvLyBhc3NpZ24gYSB2YWx1ZSB0byBhbnl0aGluZy5cbiAgLy8gICAoc2V0ZiAoYXJlZiBZb3VyQXJyYXkgMikgXCJibHVlXCIpXG4gIC8vIHNlZVxuICAvLyAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTgwNjIwMTYvY29tbW9uLWxpc3AtaG93LXRvLXNldC1hbi1lbGVtZW50LWluLWEtMmQtYXJyYXlcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBFeGFtcGxlOiBhWzFdID0gYlxuXG4gIC8vICBwMSAgKi0tLS0tLS0qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXG4gIC8vICAgIHwgIHwgICAgICB8XG4gIC8vICAgIHNldHEgICotLS0tLS0tKi0tLS0tLS0qICBiXG4gIC8vICAgICAgfCAgfCAgfFxuICAvLyAgICAgIGluZGV4ICBhICAxXG5cbiAgLy8gIGNhZGFkcihwMSkgLT4gYVxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgc2V0cV9pbmRleGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGg7XG4gICAgcDQgPSBjYWRhZHIocDEpO1xuICAgIGNvbnNvbGUubG9nKFwicDQ6IFwiICsgcDQpO1xuICAgIGlmICghaXNzeW1ib2wocDQpKSB7XG4gICAgICAvLyB0aGlzIGlzIGxpa2VseSB0byBoYXBwZW4gd2hlbiBvbmUgdHJpZXMgdG9cbiAgICAgIC8vIGRvIGFzc2lnbm1lbnRzIGxpa2UgdGhlc2VcbiAgICAgIC8vICAgMVsyXSA9IDNcbiAgICAgIC8vIG9yXG4gICAgICAvLyAgIGYoeClbMV0gPSAyXG4gICAgICAvLyBvclxuICAgICAgLy8gICBbWzEsMl0sWzMsNF1dWzVdID0gNlxuXG4gICAgICAvLyBJbiBvdGhlciB3b3Jkcywgb25lIGNhbiBvbmx5IGRvXG4gICAgICAvLyBhIHN0cmFpZ2h0IGFzc2lnbm1lbnQgbGlrZVxuICAgICAgLy8gICBleGlzdGluZ01hdHJpeFtpbmRleF0gPSBzb21ldGhpbmdcbiAgICAgIHN0b3AoXCJpbmRleGVkIGFzc2lnbm1lbnQ6IGV4cGVjdGVkIGEgc3ltYm9sIG5hbWVcIik7XG4gICAgfVxuICAgIGggPSB0b3M7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMiA9IGNkYWRyKHAxKTtcbiAgICB3aGlsZSAoaXNjb25zKHAyKSkge1xuICAgICAgcHVzaChjYXIocDIpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHAyID0gY2RyKHAyKTtcbiAgICB9XG4gICAgc2V0X2NvbXBvbmVudCh0b3MgLSBoKTtcbiAgICBwMyA9IHBvcCgpO1xuICAgIHNldF9iaW5kaW5nKHA0LCBwMyk7XG4gICAgcmV0dXJuIHB1c2goc3ltYm9sKE5JTCkpO1xuICB9O1xuXG4gIEV2YWxfc3FydCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgIHJldHVybiBwb3dlcigpO1xuICB9O1xuXG4gIEV2YWxfc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdG9wKFwidXNlciBzdG9wXCIpO1xuICB9O1xuXG4gIEV2YWxfc3Vic3QgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZGRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBzdWJzdCgpO1xuICAgIHJldHVybiBFdmFsKCk7IC8vIG5vcm1hbGl6ZVxuICB9O1xuXG4gIFxuICAvLyBhbHdheXMgcmV0dXJucyBhIG1hdHJpeCB3aXRoIHJhbmsgMlxuICAvLyBpLmUuIHR3byBkaW1lbnNpb25zLFxuICAvLyB0aGUgcGFzc2VkIHBhcmFtZXRlciBpcyB0aGUgc2l6ZVxuICBFdmFsX3VuaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbiwgbywgcmVmO1xuICAgIGkgPSAwO1xuICAgIG4gPSAwO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAoaXNOYU4obikpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobiA8IDEpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwMSA9IGFsbG9jX3RlbnNvcihuICogbik7XG4gICAgcDEudGVuc29yLm5kaW0gPSAyO1xuICAgIHAxLnRlbnNvci5kaW1bMF0gPSBuO1xuICAgIHAxLnRlbnNvci5kaW1bMV0gPSBuO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcDEudGVuc29yLmVsZW1bbiAqIGkgKyBpXSA9IG9uZTtcbiAgICB9XG4gICAgY2hlY2tfdGVuc29yX2RpbWVuc2lvbnMocDEpO1xuICAgIHJldHVybiBwdXNoKHAxKTtcbiAgfTtcblxuICBFdmFsX25vZXhwYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByZXZfZXhwYW5kaW5nO1xuICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgIGV4cGFuZGluZyA9IDA7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBleHBhbmRpbmcgPSBwcmV2X2V4cGFuZGluZztcbiAgfTtcblxuICAvLyBsaWtlIEV2YWwoKSBleGNlcHQgXCI9XCIgKGFzc2lnbm1lbnQpIGlzIHRyZWF0ZWRcbiAgLy8gYXMgXCI9PVwiIChlcXVhbGl0eSB0ZXN0KVxuICAvLyBUaGlzIGlzIGJlY2F1c2VcbiAgLy8gICogdGhpcyBhbGxvd3MgdXNlcnMgdG8gYmUgbGF6eSBhbmQganVzdFxuICAvLyAgICB1c2UgXCI9XCIgaW5zdGVhZCBvZiBcIj09XCIgYXMgcGVyIG1vcmUgY29tbW9uXG4gIC8vICAgIG1hdGhlbWF0aWNhbCBub3RhdGlvblxuICAvLyAgKiBpbiBtYW55IHBsYWNlcyB3ZSBkb24ndCBleHBlY3QgYW4gYXNzaWdubWVudFxuICAvLyAgICBlLmcuIHdlIGRvbid0IGV4cGVjdCB0byB0ZXN0IHRoZSB6ZXJvLW5lc3NcbiAgLy8gICAgb2YgYW4gYXNzaWdubWVudCBvciB0aGUgdHJ1dGggdmFsdWUgb2ZcbiAgLy8gICAgYW4gYXNzaWdubWVudFxuICAvLyBOb3RlIHRoYXQgdGhlc2UgYXJlIHF1ZXN0aW9uYWJsZSBhc3N1bXB0aW9uc1xuICAvLyBhcyBmb3IgZXhhbXBsZSBpbiBtb3N0IHByb2dyYW1taW5nIGxhbmd1YWdlcyBvbmVcbiAgLy8gY2FuIGluZGVlZCB0ZXN0IHRoZSB2YWx1ZSBvZiBhbiBhc3NpZ25tZW50ICh0aGVcbiAgLy8gdmFsdWUgaXMganVzdCB0aGUgZXZhbHVhdGlvbiBvZiB0aGUgcmlnaHQgc2lkZSlcbiAgRXZhbF9wcmVkaWNhdGUgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSB0b3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFNFVFEpKSB7XG4gICAgICAvLyByZXBsYWNlIHRoZSBhc3NpZ25tZW50IGluIHRoZVxuICAgICAgLy8gaGVhZCB3aXRoIGFuIGVxdWFsaXR5IHRlc3RcbiAgICAgIHBvcCgpO1xuICAgICAgcHVzaF9zeW1ib2woVEVTVEVRKTtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgICAgbGlzdCgzKTtcbiAgICB9XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gUGFydGlhbCBmcmFjdGlvbiBleHBhbnNpb25cblxuICAvLyBFeGFtcGxlXG5cbiAgLy8gICAgICBleHBhbmQoMS8oeF4zK3heMikseClcblxuICAvLyAgICAgICAgMSAgICAgIDEgICAgICAgMVxuICAvLyAgICAgIC0tLS0gLSAtLS0gKyAtLS0tLS0tXG4gIC8vICAgICAgICAyICAgICB4ICAgICB4ICsgMVxuICAvLyAgICAgICB4XG4gIEV2YWxfZXhwYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gMXN0IGFyZ1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICAvLyAybmQgYXJnXG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGlmIChwMiA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIGd1ZXNzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDIpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwYW5kKCk7XG4gIH07XG5cbiAgLy9kZWZpbmUgQSBwMlxuICAvL2RlZmluZSBCIHAzXG4gIC8vZGVmaW5lIEMgcDRcbiAgLy9kZWZpbmUgRiBwNVxuICAvL2RlZmluZSBQIHA2XG4gIC8vZGVmaW5lIFEgcDdcbiAgLy9kZWZpbmUgVCBwOFxuICAvL2RlZmluZSBYIHA5XG4gIGV4cGFuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmV2X2V4cGFuZGluZztcbiAgICBzYXZlKCk7XG4gICAgcDkgPSBwb3AoKTtcbiAgICBwNSA9IHBvcCgpO1xuICAgIGlmIChpc3RlbnNvcihwNSkpIHtcbiAgICAgIGV4cGFuZF90ZW5zb3IoKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gaWYgc3VtIG9mIHRlcm1zIHRoZW4gc3VtIG92ZXIgdGhlIGV4cGFuc2lvbiBvZiBlYWNoIHRlcm1cbiAgICBpZiAoY2FyKHA1KSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICAgIHAxID0gY2RyKHA1KTtcbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgIHB1c2gocDkpO1xuICAgICAgICBleHBhbmQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQiA9IG51bWVyYXRvclxuICAgIHB1c2gocDUpO1xuICAgIG51bWVyYXRvcigpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgLy8gQSA9IGRlbm9taW5hdG9yXG4gICAgcHVzaChwNSk7XG4gICAgZGVub21pbmF0b3IoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHJlbW92ZV9uZWdhdGl2ZV9leHBvbmVudHMoKTtcbiAgICAvLyBRID0gcXVvdGllbnRcbiAgICBwdXNoKHAzKTtcbiAgICBwdXNoKHAyKTtcbiAgICBwdXNoKHA5KTtcbiAgICAvLyBpZiB0aGUgZGVub21pbmF0b3IgaXMgb25lIHRoZW4gYWx3YXlzIGJhaWwgb3V0XG4gICAgLy8gYWxzbyBiYWlsIG91dCBpZiB0aGUgZGVub21pbmF0b3IgaXMgbm90IG9uZSBidXRcbiAgICAvLyBpdCdzIG5vdCBhbnl0aGluZyByZWNvZ25pemFibGUgYXMgYSBwb2x5bm9taWFsLlxuICAgIGlmIChpc29uZShwMykgfHwgaXNvbmUocDIpKSB7XG4gICAgICBpZiAoIWlzcG9seWV4cGFuZGVkZm9ybShwMiwgcDkpIHx8IGlzb25lKHAyKSkge1xuICAgICAgICBwb3AoKTtcbiAgICAgICAgcG9wKCk7XG4gICAgICAgIHBvcCgpO1xuICAgICAgICBwdXNoKHA1KTtcbiAgICAgICAgLy8gcDUgaXMgdGhlIG9yaWdpbmFsIGlucHV0LCBsZWF2ZSB1bmNoYW5nZWRcbiAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGRpdnBvbHkoKTtcbiAgICBwNyA9IHBvcCgpO1xuICAgIC8vIHJlbWFpbmRlciBCID0gQiAtIEEgKiBRXG4gICAgcHVzaChwMyk7XG4gICAgcHVzaChwMik7XG4gICAgcHVzaChwNyk7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBzdWJ0cmFjdCgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgLy8gaWYgdGhlIHJlbWFpbmRlciBpcyB6ZXJvIHRoZW4gd2UncmUgZG9uZVxuICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDMpKSB7XG4gICAgICBwdXNoKHA3KTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQSA9IGZhY3RvcihBKVxuXG4gICAgLy9jb25zb2xlLmxvZyhcImV4cGFuZCAtIHRvIGJlIGZhY3RvcmVkOiBcIiArIHAyKVxuICAgIHB1c2gocDIpO1xuICAgIHB1c2gocDkpO1xuICAgIGZhY3RvcnBvbHkoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIC8vY29uc29sZS5sb2coXCJleHBhbmQgLSBmYWN0b3JlZCB0bzogXCIgKyBwMilcbiAgICBleHBhbmRfZ2V0X0MoKTtcbiAgICBleHBhbmRfZ2V0X0IoKTtcbiAgICBleHBhbmRfZ2V0X0EoKTtcbiAgICBpZiAoaXN0ZW5zb3IocDQpKSB7XG4gICAgICBwdXNoKHA0KTtcbiAgICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgICAgZXhwYW5kaW5nID0gMTtcbiAgICAgIGludigpO1xuICAgICAgZXhwYW5kaW5nID0gcHJldl9leHBhbmRpbmc7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIGlubmVyKCk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGlubmVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgcHVzaChwNCk7XG4gICAgICBwcmV2X2V4cGFuZGluZyA9IGV4cGFuZGluZztcbiAgICAgIGV4cGFuZGluZyA9IDE7XG4gICAgICBkaXZpZGUoKTtcbiAgICAgIGV4cGFuZGluZyA9IHByZXZfZXhwYW5kaW5nO1xuICAgICAgcHVzaChwMik7XG4gICAgICBtdWx0aXBseSgpO1xuICAgIH1cbiAgICBwdXNoKHA3KTtcbiAgICBhZGQoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGV4cGFuZF90ZW5zb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbywgcmVmO1xuICAgIGkgPSAwO1xuICAgIHB1c2gocDUpO1xuICAgIGNvcHlfdGVuc29yKCk7XG4gICAgcDUgPSBwb3AoKTtcbiAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gcDUudGVuc29yLm5lbGVtOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcHVzaChwNS50ZW5zb3IuZWxlbVtpXSk7XG4gICAgICBwdXNoKHA5KTtcbiAgICAgIGV4cGFuZCgpO1xuICAgICAgcDUudGVuc29yLmVsZW1baV0gPSBwb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDUpO1xuICB9O1xuXG4gIHJlbW92ZV9uZWdhdGl2ZV9leHBvbmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCwgaSwgaiwgaywgbiwgbywgcmVmO1xuICAgIGggPSAwO1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIGsgPSAwO1xuICAgIG4gPSAwO1xuICAgIGggPSB0b3M7XG4gICAgZmFjdG9ycyhwMik7XG4gICAgZmFjdG9ycyhwMyk7XG4gICAgbiA9IHRvcyAtIGg7XG4gICAgLy8gZmluZCB0aGUgc21hbGxlc3QgZXhwb25lbnRcbiAgICBqID0gMDtcbiAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gbjsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgIHAxID0gc3RhY2tbaCArIGldO1xuICAgICAgaWYgKGNhcihwMSkgIT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoY2FkcihwMSkgIT09IHA5KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgICAgayA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgICBpZiAoaXNOYU4oaykpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoayA8IGopIHtcbiAgICAgICAgaiA9IGs7XG4gICAgICB9XG4gICAgfVxuICAgIG1vdmVUb3MoaCk7XG4gICAgaWYgKGogPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQSA9IEEgLyBYXmpcbiAgICBwdXNoKHAyKTtcbiAgICBwdXNoKHA5KTtcbiAgICBwdXNoX2ludGVnZXIoLWopO1xuICAgIHBvd2VyKCk7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIC8vIEIgPSBCIC8gWF5qXG4gICAgcHVzaChwMyk7XG4gICAgcHVzaChwOSk7XG4gICAgcHVzaF9pbnRlZ2VyKC1qKTtcbiAgICBwb3dlcigpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcmV0dXJuIHAzID0gcG9wKCk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZXhwYW5zaW9uIGNvZWZmaWNpZW50IG1hdHJpeCBDLlxuXG4gIC8vIEV4YW1wbGU6XG5cbiAgLy8gICAgICAgQiAgICAgICAgIDFcbiAgLy8gICAgICAtLS0gPSAtLS0tLS0tLS0tLVxuICAvLyAgICAgICBBICAgICAgMiBcbiAgLy8gICAgICAgICAgICAgeCAoeCArIDEpXG5cbiAgLy8gV2UgaGF2ZVxuXG4gIC8vICAgICAgIEIgICAgIFkxICAgICBZMiAgICAgIFkzXG4gIC8vICAgICAgLS0tID0gLS0tLSArIC0tLS0gKyAtLS0tLS0tXG4gIC8vICAgICAgIEEgICAgICAyICAgICB4ICAgICAgeCArIDFcbiAgLy8gICAgICAgICAgICAgeFxuXG4gIC8vIE91ciB0YXNrIGlzIHRvIHNvbHZlIGZvciB0aGUgdW5rbm93bnMgWTEsIFkyLCBhbmQgWTMuXG5cbiAgLy8gTXVsdGlwbHlpbmcgYm90aCBzaWRlcyBieSBBIHlpZWxkc1xuXG4gIC8vICAgICAgICAgICBBWTEgICAgIEFZMiAgICAgIEFZM1xuICAvLyAgICAgIEIgPSAtLS0tLSArIC0tLS0tICsgLS0tLS0tLVxuICAvLyAgICAgICAgICAgIDIgICAgICB4ICAgICAgIHggKyAxXG4gIC8vICAgICAgICAgICB4XG5cbiAgLy8gTGV0XG5cbiAgLy8gICAgICAgICAgICBBICAgICAgICAgICAgICAgQSAgICAgICAgICAgICAgICAgQVxuICAvLyAgICAgIFcxID0gLS0tLSAgICAgICBXMiA9IC0tLSAgICAgICAgVzMgPSAtLS0tLS0tXG4gIC8vICAgICAgICAgICAgIDIgICAgICAgICAgICAgIHggICAgICAgICAgICAgICB4ICsgMVxuICAvLyAgICAgICAgICAgIHhcblxuICAvLyBUaGVuIHRoZSBjb2VmZmljaWVudCBtYXRyaXggQyBpc1xuXG4gIC8vICAgICAgICAgICAgICBjb2VmZihXMSx4LDApICAgY29lZmYoVzIseCwwKSAgIGNvZWZmKFczLHgsMClcblxuICAvLyAgICAgICBDID0gICAgY29lZmYoVzEseCwxKSAgIGNvZWZmKFcyLHgsMSkgICBjb2VmZihXMyx4LDEpXG5cbiAgLy8gICAgICAgICAgICAgIGNvZWZmKFcxLHgsMikgICBjb2VmZihXMix4LDIpICAgY29lZmYoVzMseCwyKVxuXG4gIC8vIEl0IGZvbGxvd3MgdGhhdFxuXG4gIC8vICAgICAgIGNvZWZmKEIseCwwKSAgICAgWTFcblxuICAvLyAgICAgICBjb2VmZihCLHgsMSkgPSBDIFkyXG5cbiAgLy8gICAgICAgY29lZmYoQix4LDIpID0gICBZM1xuXG4gIC8vIEhlbmNlXG5cbiAgLy8gICAgICAgWTEgICAgICAgY29lZmYoQix4LDApXG4gIC8vICAgICAgICAgICAgIC0xXG4gIC8vICAgICAgIFkyID0gQyAgIGNvZWZmKEIseCwxKVxuXG4gIC8vICAgICAgIFkzICAgICAgIGNvZWZmKEIseCwyKVxuICBleHBhbmRfZ2V0X0MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgaCwgaSwgaTEsIGosIG4sIG8sIHByZXZfZXhwYW5kaW5nLCByZWYsIHJlZjE7XG4gICAgaCA9IDA7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgbiA9IDA7XG4gICAgLy9VICoqYVxuICAgIGggPSB0b3M7XG4gICAgaWYgKGNhcihwMikgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgIHAxID0gY2RyKHAyKTtcbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIHA1ID0gY2FyKHAxKTtcbiAgICAgICAgZXhwYW5kX2dldF9DRigpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHA1ID0gcDI7XG4gICAgICBleHBhbmRfZ2V0X0NGKCk7XG4gICAgfVxuICAgIG4gPSB0b3MgLSBoO1xuICAgIGlmIChuID09PSAxKSB7XG4gICAgICBwNCA9IHBvcCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwNCA9IGFsbG9jX3RlbnNvcihuICogbik7XG4gICAgcDQudGVuc29yLm5kaW0gPSAyO1xuICAgIHA0LnRlbnNvci5kaW1bMF0gPSBuO1xuICAgIHA0LnRlbnNvci5kaW1bMV0gPSBuO1xuICAgIGEgPSBoO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgZm9yIChqID0gaTEgPSAwLCByZWYxID0gbjsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGogPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgICBwdXNoKHN0YWNrW2EgKyBqXSk7XG4gICAgICAgIHB1c2gocDkpO1xuICAgICAgICBwdXNoX2ludGVnZXIoaSk7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgICAgICBleHBhbmRpbmcgPSAxO1xuICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgZXhwYW5kaW5nID0gcHJldl9leHBhbmRpbmc7XG4gICAgICAgIHB1c2gocDkpO1xuICAgICAgICBmaWx0ZXIoKTtcbiAgICAgICAgcDQudGVuc29yLmVsZW1bbiAqIGkgKyBqXSA9IHBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbW92ZVRvcyh0b3MgLSBuKTtcbiAgfTtcblxuICAvLyBUaGUgZm9sbG93aW5nIHRhYmxlIHNob3dzIHRoZSBwdXNoIG9yZGVyIGZvciBzaW1wbGUgcm9vdHMsIHJlcGVhdGVkIHJvb3RzLFxuICAvLyBhbmQgaW5ycmVkdWNpYmxlIGZhY3RvcnMuXG5cbiAgLy8gIEZhY3RvciBGICAgICAgICBQdXNoIDFzdCAgICAgICAgUHVzaCAybmQgICAgICAgICBQdXNoIDNyZCAgICAgIFB1c2ggNHRoXG5cbiAgLy8gICAgICAgICAgICAgICAgICAgQVxuICAvLyAgeCAgICAgICAgICAgICAgIC0tLVxuICAvLyAgICAgICAgICAgICAgICAgICB4XG5cbiAgLy8gICAyICAgICAgICAgICAgICAgQSAgICAgICAgICAgICAgIEFcbiAgLy8gIHggICAgICAgICAgICAgICAtLS0tICAgICAgICAgICAgLS0tXG4gIC8vICAgICAgICAgICAgICAgICAgICAyICAgICAgICAgICAgICB4XG4gIC8vICAgICAgICAgICAgICAgICAgIHhcblxuICAvLyAgICAgICAgICAgICAgICAgICAgIEFcbiAgLy8gIHggKyAxICAgICAgICAgICAtLS0tLS0tXG4gIC8vICAgICAgICAgICAgICAgICAgIHggKyAxXG5cbiAgLy8gICAgICAgICAyICAgICAgICAgICAgQSAgICAgICAgICAgICAgQVxuICAvLyAgKHggKyAxKSAgICAgICAgIC0tLS0tLS0tLS0gICAgICAtLS0tLS0tXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAyICAgICAgICB4ICsgMVxuICAvLyAgICAgICAgICAgICAgICAgICAoeCArIDEpXG5cbiAgLy8gICAyICAgICAgICAgICAgICAgICAgIEEgICAgICAgICAgICAgICBBeFxuICAvLyAgeCAgKyB4ICsgMSAgICAgIC0tLS0tLS0tLS0tLSAgICAtLS0tLS0tLS0tLS1cbiAgLy8gICAgICAgICAgICAgICAgICAgIDIgICAgICAgICAgICAgICAyXG4gIC8vICAgICAgICAgICAgICAgICAgIHggICsgeCArIDEgICAgICB4ICArIHggKyAxXG5cbiAgLy8gICAgMiAgICAgICAgIDIgICAgICAgICAgQSAgICAgICAgICAgICAgQXggICAgICAgICAgICAgIEEgICAgICAgICAgICAgQXhcbiAgLy8gICh4ICArIHggKyAxKSAgICAtLS0tLS0tLS0tLS0tLS0gLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLVxuICAvLyAgICAgICAgICAgICAgICAgICAgIDIgICAgICAgICAyICAgICAyICAgICAgICAgMiAgICAgMiAgICAgICAgICAgICAyXG4gIC8vICAgICAgICAgICAgICAgICAgICh4ICArIHggKyAxKSAgICAoeCAgKyB4ICsgMSkgICAgIHggICsgeCArIDEgICAgeCAgKyB4ICsgMVxuXG4gIC8vIEZvciBUID0gQS9GIGFuZCBGID0gUF5OIHdlIGhhdmVcblxuICAvLyAgICAgIEZhY3RvciBGICAgICAgICAgIFB1c2ggMXN0ICAgIFB1c2ggMm5kICAgIFB1c2ggM3JkICAgIFB1c2ggNHRoXG5cbiAgLy8gICAgICB4ICAgICAgICAgICAgICAgICBUXG5cbiAgLy8gICAgICAgMlxuICAvLyAgICAgIHggICAgICAgICAgICAgICAgIFQgICAgICAgICAgIFRQXG5cbiAgLy8gICAgICB4ICsgMSAgICAgICAgICAgICBUXG5cbiAgLy8gICAgICAgICAgICAgMlxuICAvLyAgICAgICh4ICsgMSkgICAgICAgICAgIFQgICAgICAgICAgIFRQXG5cbiAgLy8gICAgICAgMlxuICAvLyAgICAgIHggICsgeCArIDEgICAgICAgIFQgICAgICAgICAgIFRYXG5cbiAgLy8gICAgICAgIDIgICAgICAgICAyXG4gIC8vICAgICAgKHggICsgeCArIDEpICAgICAgVCAgICAgICAgICAgVFggICAgICAgICAgVFAgICAgICAgICAgVFBYXG5cbiAgLy8gSGVuY2Ugd2Ugd2FudCB0byBwdXNoIGluIHRoZSBvcmRlclxuXG4gIC8vICAgICAgVCAqIChQIF4gaSkgKiAoWCBeIGopXG5cbiAgLy8gZm9yIGFsbCBpLCBqIHN1Y2ggdGhhdFxuXG4gIC8vICAgICAgaSA9IDAsIDEsIC4uLiwgTiAtIDFcblxuICAvLyAgICAgIGogPSAwLCAxLCAuLi4sIGRlZyhQKSAtIDFcblxuICAvLyB3aGVyZSBpbmRleCBqIHJ1bnMgZmlyc3QuXG4gIGV4cGFuZF9nZXRfQ0YgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZCwgaSwgaiwgbiwgbywgcHJldl9leHBhbmRpbmcsIHJlZiwgcmVzdWx0cztcbiAgICBkID0gMDtcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBuID0gMDtcbiAgICBpZiAoIUZpbmQocDUsIHA5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwcmV2X2V4cGFuZGluZyA9IGV4cGFuZGluZztcbiAgICBleHBhbmRpbmcgPSAxO1xuICAgIHRyaXZpYWxfZGl2aWRlKCk7XG4gICAgZXhwYW5kaW5nID0gcHJldl9leHBhbmRpbmc7XG4gICAgaWYgKGNhcihwNSkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIHB1c2goY2FkZHIocDUpKTtcbiAgICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgICAgcDYgPSBjYWRyKHA1KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbiA9IDE7XG4gICAgICBwNiA9IHA1O1xuICAgIH1cbiAgICBwdXNoKHA2KTtcbiAgICBwdXNoKHA5KTtcbiAgICBkZWdyZWUoKTtcbiAgICBkID0gcG9wX2ludGVnZXIoKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaTEsIHJlZjEsIHJlc3VsdHMxO1xuICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICBmb3IgKGogPSBpMSA9IDAsIHJlZjEgPSBkOyAoMCA8PSByZWYxID8gaTEgPCByZWYxIDogaTEgPiByZWYxKTsgaiA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgICAgcHVzaChwOCk7XG4gICAgICAgICAgcHVzaChwNik7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKGkpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgcHJldl9leHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgICAgICAgZXhwYW5kaW5nID0gMTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIGV4cGFuZGluZyA9IHByZXZfZXhwYW5kaW5nO1xuICAgICAgICAgIHB1c2gocDkpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcihqKTtcbiAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgICAgICAgIGV4cGFuZGluZyA9IDE7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICByZXN1bHRzMS5wdXNoKGV4cGFuZGluZyA9IHByZXZfZXhwYW5kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0czE7XG4gICAgICB9KSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBUID0gQS9GIHdoZXJlIEYgaXMgYSBmYWN0b3Igb2YgQS5cbiAgdHJpdmlhbF9kaXZpZGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaDtcbiAgICBoID0gMDtcbiAgICBpZiAoY2FyKHAyKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgaCA9IHRvcztcbiAgICAgIHAwID0gY2RyKHAyKTtcbiAgICAgIHdoaWxlIChpc2NvbnMocDApKSB7XG4gICAgICAgIGlmICghZXF1YWwoY2FyKHAwKSwgcDUpKSB7XG4gICAgICAgICAgcHVzaChjYXIocDApKTtcbiAgICAgICAgICBFdmFsKCk7IC8vIGZvcmNlIGV4cGFuc2lvbiBvZiAoeCsxKV4yLCBmLmUuXG4gICAgICAgIH1cbiAgICAgICAgcDAgPSBjZHIocDApO1xuICAgICAgfVxuICAgICAgbXVsdGlwbHlfYWxsKHRvcyAtIGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgfVxuICAgIHJldHVybiBwOCA9IHBvcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGV4cGFuc2lvbiBjb2VmZmljaWVudCB2ZWN0b3IgQi5cbiAgZXhwYW5kX2dldF9CID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIG4sIG8sIHByZXZfZXhwYW5kaW5nLCByZWY7XG4gICAgaSA9IDA7XG4gICAgbiA9IDA7XG4gICAgaWYgKCFpc3RlbnNvcihwNCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbiA9IHA0LnRlbnNvci5kaW1bMF07XG4gICAgcDggPSBhbGxvY190ZW5zb3Iobik7XG4gICAgcDgudGVuc29yLm5kaW0gPSAxO1xuICAgIHA4LnRlbnNvci5kaW1bMF0gPSBuO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcHVzaChwMyk7XG4gICAgICBwdXNoKHA5KTtcbiAgICAgIHB1c2hfaW50ZWdlcihpKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBwcmV2X2V4cGFuZGluZyA9IGV4cGFuZGluZztcbiAgICAgIGV4cGFuZGluZyA9IDE7XG4gICAgICBkaXZpZGUoKTtcbiAgICAgIGV4cGFuZGluZyA9IHByZXZfZXhwYW5kaW5nO1xuICAgICAgcHVzaChwOSk7XG4gICAgICBmaWx0ZXIoKTtcbiAgICAgIHA4LnRlbnNvci5lbGVtW2ldID0gcG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBwMyA9IHA4O1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGV4cGFuc2lvbiBmcmFjdGlvbnMgaW4gQS5cbiAgZXhwYW5kX2dldF9BID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGgsIGksIG4sIG8sIHJlZjtcbiAgICBoID0gMDtcbiAgICBpID0gMDtcbiAgICBuID0gMDtcbiAgICBpZiAoIWlzdGVuc29yKHA0KSkge1xuICAgICAgcHVzaChwMik7XG4gICAgICByZWNpcHJvY2F0ZSgpO1xuICAgICAgcDIgPSBwb3AoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaCA9IHRvcztcbiAgICBpZiAoY2FyKHAyKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgcDggPSBjZHIocDIpO1xuICAgICAgd2hpbGUgKGlzY29ucyhwOCkpIHtcbiAgICAgICAgcDUgPSBjYXIocDgpO1xuICAgICAgICBleHBhbmRfZ2V0X0FGKCk7XG4gICAgICAgIHA4ID0gY2RyKHA4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcDUgPSBwMjtcbiAgICAgIGV4cGFuZF9nZXRfQUYoKTtcbiAgICB9XG4gICAgbiA9IHRvcyAtIGg7XG4gICAgcDggPSBhbGxvY190ZW5zb3Iobik7XG4gICAgcDgudGVuc29yLm5kaW0gPSAxO1xuICAgIHA4LnRlbnNvci5kaW1bMF0gPSBuO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcDgudGVuc29yLmVsZW1baV0gPSBzdGFja1toICsgaV07XG4gICAgfVxuICAgIG1vdmVUb3MoaCk7XG4gICAgcmV0dXJuIHAyID0gcDg7XG4gIH07XG5cbiAgZXhwYW5kX2dldF9BRiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkLCBpLCBqLCBuLCBvLCByZWYsIHJlc3VsdHM7XG4gICAgZCA9IDA7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgbiA9IDE7XG4gICAgaWYgKCFGaW5kKHA1LCBwOSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwNSkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIHB1c2goY2FkZHIocDUpKTtcbiAgICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgICAgcDUgPSBjYWRyKHA1KTtcbiAgICB9XG4gICAgcHVzaChwNSk7XG4gICAgcHVzaChwOSk7XG4gICAgZGVncmVlKCk7XG4gICAgZCA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IG8gPSByZWYgPSBuOyAocmVmIDw9IDAgPyBvIDwgMCA6IG8gPiAwKTsgaSA9IHJlZiA8PSAwID8gKytvIDogLS1vKSB7XG4gICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaTEsIHJlZjEsIHJlc3VsdHMxO1xuICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICBmb3IgKGogPSBpMSA9IDAsIHJlZjEgPSBkOyAoMCA8PSByZWYxID8gaTEgPCByZWYxIDogaTEgPiByZWYxKTsgaiA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgICAgcHVzaChwNSk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKGkpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgcmVjaXByb2NhdGUoKTtcbiAgICAgICAgICBwdXNoKHA5KTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoaik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICByZXN1bHRzMS5wdXNoKG11bHRpcGx5KCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzMTtcbiAgICAgIH0pKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBEbyB0aGUgZXhwb25lbnRpYWwgY29zaW5lIGZ1bmN0aW9uLlxuICBFdmFsX2V4cGNvcyA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gZXhwY29zKCk7XG4gIH07XG5cbiAgZXhwY29zID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICBwdXNoKHAxKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGV4cG9uZW50aWFsKCk7XG4gICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgbmVnYXRlKCk7XG4gICAgcHVzaChwMSk7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBleHBvbmVudGlhbCgpO1xuICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBhZGQoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIERvIHRoZSBleHBvbmVudGlhbCBzaW5lIGZ1bmN0aW9uLlxuICBFdmFsX2V4cHNpbiA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gZXhwc2luKCk7XG4gIH07XG5cbiAgZXhwc2luID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICBwdXNoKHAxKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGV4cG9uZW50aWFsKCk7XG4gICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICBkaXZpZGUoKTtcbiAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICBuZWdhdGUoKTtcbiAgICBwdXNoKHAxKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGV4cG9uZW50aWFsKCk7XG4gICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICBkaXZpZGUoKTtcbiAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgIG11bHRpcGx5KCk7XG4gICAgc3VidHJhY3QoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIGZhY3RvciBhIHBvbHlub21pYWwgb3IgaW50ZWdlclxuICBFdmFsX2ZhY3RvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKHAyID09PSBzeW1ib2woTklMKSkge1xuICAgICAgZ3Vlc3MoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMik7XG4gICAgfVxuICAgIGZhY3RvcigpO1xuICAgIC8vIG1vcmUgZmFjdG9yaW5nP1xuICAgIHAxID0gY2RkZHIocDEpO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIGZhY3Rvcl9hZ2FpbigpO1xuICAgICAgcmVzdWx0cy5wdXNoKHAxID0gY2RyKHAxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIGZhY3Rvcl9hZ2FpbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoLCBuO1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaCA9IHRvcztcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIGZhY3Rvcl90ZXJtKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGZhY3Rvcl90ZXJtKCk7XG4gICAgfVxuICAgIG4gPSB0b3MgLSBoO1xuICAgIGlmIChuID4gMSkge1xuICAgICAgbXVsdGlwbHlfYWxsX25vZXhwYW5kKG4pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGZhY3Rvcl90ZXJtID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIGZhY3RvcnBvbHkoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGZhY3RvciA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzaW50ZWdlcihwMSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgZmFjdG9yX251bWJlcigpOyAvLyBzZWUgcG9sbGFyZC5jcHBcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGZhY3RvcnBvbHkoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBmb3IgZmFjdG9yaW5nIHNtYWxsIGludGVnZXJzICgyXjMyIG9yIGxlc3MpXG4gIGZhY3Rvcl9zbWFsbF9udW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZCwgZXhwbywgaSwgbiwgbywgcmVmO1xuICAgIGkgPSAwO1xuICAgIHNhdmUoKTtcbiAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAoaXNOYU4obikpIHtcbiAgICAgIHN0b3AoXCJudW1iZXIgdG9vIGJpZyB0byBmYWN0b3JcIik7XG4gICAgfVxuICAgIGlmIChuIDwgMCkge1xuICAgICAgbiA9IC1uO1xuICAgIH1cbiAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gTUFYUFJJTUVUQUI7ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBkID0gcHJpbWV0YWJbaV07XG4gICAgICBpZiAoZCA+IG4gLyBkKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZXhwbyA9IDA7XG4gICAgICB3aGlsZSAobiAlIGQgPT09IDApIHtcbiAgICAgICAgbiAvPSBkO1xuICAgICAgICBleHBvKys7XG4gICAgICB9XG4gICAgICBpZiAoZXhwbykge1xuICAgICAgICBwdXNoX2ludGVnZXIoZCk7XG4gICAgICAgIHB1c2hfaW50ZWdlcihleHBvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG4gPiAxKSB7XG4gICAgICBwdXNoX2ludGVnZXIobik7XG4gICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgZmFjdG9yaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG47XG4gICAgbiA9IDA7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgcHVzaChwMSk7XG4gICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgaWYgKG4gPCAwIHx8IGlzTmFOKG4pKSB7XG4gICAgICBwdXNoX3N5bWJvbChGQUNUT1JJQUwpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBsaXN0KDIpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBiaWdudW1fZmFjdG9yaWFsKG4pO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gc2ltcGxpZmljYXRpb24gcnVsZXMgZm9yIGZhY3RvcmlhbHMgKG0gPCBuKVxuXG4gIC8vICAoZSArIDEpICogZmFjdG9yaWFsKGUpICAtPiAgZmFjdG9yaWFsKGUgKyAxKVxuXG4gIC8vICBmYWN0b3JpYWwoZSkgLyBlICAtPiAgZmFjdG9yaWFsKGUgLSAxKVxuXG4gIC8vICBlIC8gZmFjdG9yaWFsKGUpICAtPiAgMSAvIGZhY3RvcmlhbChlIC0gMSlcblxuICAvLyAgZmFjdG9yaWFsKGUgKyBuKVxuICAvLyAgLS0tLS0tLS0tLS0tLS0tLSAgLT4gIChlICsgbSArIDEpKGUgKyBtICsgMikuLi4oZSArIG4pXG4gIC8vICBmYWN0b3JpYWwoZSArIG0pXG5cbiAgLy8gIGZhY3RvcmlhbChlICsgbSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAvLyAgLS0tLS0tLS0tLS0tLS0tLSAgLT4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vICBmYWN0b3JpYWwoZSArIG4pICAgIChlICsgbSArIDEpKGUgKyBtICsgMikuLi4oZSArIG4pXG5cbiAgLy8gdGhpcyBmdW5jdGlvbiBpcyBub3QgYWN0dWFsbHkgdXNlZCwgYnV0XG4gIC8vIGFsbCB0aGVzZSBzaW1wbGlmaWNhdGlvbnNcbiAgLy8gZG8gaGFwcGVuIGF1dG9tYXRpY2FsbHkgdmlhIHNpbXBsaWZ5XG4gIHNpbXBsaWZ5ZmFjdG9yaWFscyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4O1xuICAgIHggPSAwO1xuICAgIHNhdmUoKTtcbiAgICB4ID0gZXhwYW5kaW5nO1xuICAgIGV4cGFuZGluZyA9IDA7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIHB1c2goemVybyk7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBzaW1wbGlmeWZhY3RvcmlhbHMoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICAgIGV4cGFuZGluZyA9IHg7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBzZmFjX3Byb2R1Y3QoKTtcbiAgICAgIGV4cGFuZGluZyA9IHg7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocDEpO1xuICAgIGV4cGFuZGluZyA9IHg7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBzZmFjX3Byb2R1Y3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaTEsIGosIGoxLCBuLCBvLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHM7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgbiA9IDA7XG4gICAgcyA9IHRvcztcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgbiA9IDA7XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICBuKys7XG4gICAgfVxuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuIC0gMTsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgIGlmIChzdGFja1tzICsgaV0gPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gaTEgPSByZWYxID0gaSArIDEsIHJlZjIgPSBuOyAocmVmMSA8PSByZWYyID8gaTEgPCByZWYyIDogaTEgPiByZWYyKTsgaiA9IHJlZjEgPD0gcmVmMiA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgIGlmIChzdGFja1tzICsgal0gPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgc2ZhY19wcm9kdWN0X2YocywgaSwgaik7XG4gICAgICB9XG4gICAgfVxuICAgIHB1c2gob25lKTtcbiAgICBmb3IgKGkgPSBqMSA9IDAsIHJlZjMgPSBuOyAoMCA8PSByZWYzID8gajEgPCByZWYzIDogajEgPiByZWYzKTsgaSA9IDAgPD0gcmVmMyA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBpZiAoc3RhY2tbcyArIGldID09PSBzeW1ib2woTklMKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHB1c2goc3RhY2tbcyArIGldKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgfVxuICAgIHAxID0gcG9wKCk7XG4gICAgbW92ZVRvcyh0b3MgLSBuKTtcbiAgICByZXR1cm4gcHVzaChwMSk7XG4gIH07XG5cbiAgc2ZhY19wcm9kdWN0X2YgPSBmdW5jdGlvbihzLCBhLCBiKSB7XG4gICAgdmFyIGksIG4sIG8sIHJlZjtcbiAgICBpID0gMDtcbiAgICBuID0gMDtcbiAgICBwMSA9IHN0YWNrW3MgKyBhXTtcbiAgICBwMiA9IHN0YWNrW3MgKyBiXTtcbiAgICBpZiAoaXNwb3dlcihwMSkpIHtcbiAgICAgIHAzID0gY2FkZHIocDEpO1xuICAgICAgcDEgPSBjYWRyKHAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcDMgPSBvbmU7XG4gICAgfVxuICAgIGlmIChpc3Bvd2VyKHAyKSkge1xuICAgICAgcDQgPSBjYWRkcihwMik7XG4gICAgICBwMiA9IGNhZHIocDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwNCA9IG9uZTtcbiAgICB9XG4gICAgaWYgKGlzZmFjdG9yaWFsKHAxKSAmJiBpc2ZhY3RvcmlhbChwMikpIHtcbiAgICAgIC8vIERldGVybWluZSBpZiB0aGUgcG93ZXJzIGNhbmNlbC5cbiAgICAgIHB1c2gocDMpO1xuICAgICAgcHVzaChwNCk7XG4gICAgICBhZGQoKTtcbiAgICAgIHl5ZXhwYW5kKCk7XG4gICAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICAgIGlmIChuICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIEZpbmQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdHdvIGZhY3RvcmlhbCBhcmdzLlxuXG4gICAgICAvLyBGb3IgZXhhbXBsZSwgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiAoYSArIDIpISBhbmQgYSEgaXMgMi5cbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcHVzaChjYWRyKHAyKSk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgeXlleHBhbmQoKTtcbiAgICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgICAgaWYgKG4gPT09IDAgfHwgaXNOYU4obikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG4gPCAwKSB7XG4gICAgICAgIG4gPSAtbjtcbiAgICAgICAgcDUgPSBwMTtcbiAgICAgICAgcDEgPSBwMjtcbiAgICAgICAgcDIgPSBwNTtcbiAgICAgICAgcDUgPSBwMztcbiAgICAgICAgcDMgPSBwNDtcbiAgICAgICAgcDQgPSBwNTtcbiAgICAgIH1cbiAgICAgIHB1c2gob25lKTtcbiAgICAgIGZvciAoaSA9IG8gPSAxLCByZWYgPSBuOyAoMSA8PSByZWYgPyBvIDw9IHJlZiA6IG8gPj0gcmVmKTsgaSA9IDEgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICAgIHB1c2goY2FkcihwMikpO1xuICAgICAgICBwdXNoX2ludGVnZXIoaSk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIH1cbiAgICAgIHN0YWNrW3MgKyBhXSA9IHBvcCgpO1xuICAgICAgcmV0dXJuIHN0YWNrW3MgKyBiXSA9IHN5bWJvbChOSUwpO1xuICAgIH1cbiAgfTtcblxuICAvLyBGYWN0b3IgYSBwb2x5bm9taWFsXG5cbiAgLy9kZWZpbmUgUE9MWSBwMVxuICAvL2RlZmluZSBYIHAyXG4gIC8vZGVmaW5lIFogcDNcbiAgLy9kZWZpbmUgQSBwNFxuICAvL2RlZmluZSBCIHA1XG4gIC8vZGVmaW5lIFEgcDZcbiAgLy9kZWZpbmUgUkVTVUxUIHA3XG4gIC8vZGVmaW5lIEZBQ1RPUiBwOFxuICBwb2x5Y29lZmYgPSAwO1xuXG4gIGZhY3Rwb2x5X2V4cG8gPSAwO1xuXG4gIGZhY3RvcnBvbHkgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmICghRmluZChwMSwgcDIpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFpc3BvbHlleHBhbmRlZGZvcm0ocDEsIHAyKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXNzeW1ib2wocDIpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMik7XG4gICAgeXlmYWN0b3Jwb2x5KCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIElucHV0OiAgICB0b3MtMiAgICB0cnVlIHBvbHlub21pYWxcblxuICAvLyAgICAgIHRvcy0xICAgIGZyZWUgdmFyaWFibGVcblxuICAvLyAgT3V0cHV0OiAgICBmYWN0b3JlZCBwb2x5bm9taWFsIG9uIHN0YWNrXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB5eWZhY3RvcnBvbHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hlY2tpbmdUaGVEaXZpc2lvbiwgZGl2aWRlbmQsIGZvdW5kQ29tcGxleFJvb3QsIGZvdW5kUmVhbFJvb3QsIGgsIGksIGkxLCBqMSwgbDEsIG8sIHByZXZfZXhwYW5kaW5nLCBwcmV2aW91c0ZhY3RvcmlzYXRpb24sIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVtYWluaW5nUG9seSwgd2hpY2hSb290c0FyZVdlRmluZGluZztcbiAgICBoID0gMDtcbiAgICBpID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGggPSB0b3M7XG4gICAgaWYgKGlzZmxvYXRpbmcocDEpKSB7XG4gICAgICBzdG9wKFwiZmxvYXRpbmcgcG9pbnQgbnVtYmVycyBpbiBwb2x5bm9taWFsXCIpO1xuICAgIH1cbiAgICBwb2x5Y29lZmYgPSB0b3M7XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMik7XG4gICAgZmFjdHBvbHlfZXhwbyA9IGNvZWZmKCkgLSAxO1xuICAgIHJhdGlvbmFsaXplX2NvZWZmaWNpZW50cyhoKTtcbiAgICAvLyBmb3IgdW5pdmFyaWF0ZSBwb2x5bm9taWFscyB3ZSBjb3VsZCBkbyBmYWN0cG9seV9leHBvID4gMVxuICAgIHdoaWNoUm9vdHNBcmVXZUZpbmRpbmcgPSBcInJlYWxcIjtcbiAgICByZW1haW5pbmdQb2x5ID0gbnVsbDtcbiAgICB3aGlsZSAoZmFjdHBvbHlfZXhwbyA+IDApIHtcbiAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3Ioc3RhY2tbcG9seWNvZWZmICsgMF0pKSB7XG4gICAgICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgICAgcDQgPSBwb3AoKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDApO1xuICAgICAgICBwNSA9IHBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInRyeWluZyB0byBmaW5kIGEgXCIgKyB3aGljaFJvb3RzQXJlV2VGaW5kaW5nICsgXCIgcm9vdFwiKVxuICAgICAgICBpZiAod2hpY2hSb290c0FyZVdlRmluZGluZyA9PT0gXCJyZWFsXCIpIHtcbiAgICAgICAgICBmb3VuZFJlYWxSb290ID0gZ2V0X2ZhY3Rvcl9mcm9tX3JlYWxfcm9vdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHdoaWNoUm9vdHNBcmVXZUZpbmRpbmcgPT09IFwiY29tcGxleFwiKSB7XG4gICAgICAgICAgZm91bmRDb21wbGV4Um9vdCA9IGdldF9mYWN0b3JfZnJvbV9jb21wbGV4X3Jvb3QocmVtYWluaW5nUG9seSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh3aGljaFJvb3RzQXJlV2VGaW5kaW5nID09PSBcInJlYWxcIikge1xuICAgICAgICBpZiAoZm91bmRSZWFsUm9vdCA9PT0gMCkge1xuICAgICAgICAgIHdoaWNoUm9vdHNBcmVXZUZpbmRpbmcgPSBcImNvbXBsZXhcIjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBidWlsZCB0aGUgMS1kZWdyZWUgcG9seW5vbWlhbCBvdXQgb2YgdGhlXG4gICAgICAgICAgLy8gcmVhbCBzb2x1dGlvbiB0aGF0IHdhcyBqdXN0IGZvdW5kLlxuICAgICAgICAgIHB1c2gocDQpOyAvLyBBXG4gICAgICAgICAgcHVzaChwMik7IC8vIHhcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2gocDUpOyAvLyBCXG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgcDggPSBwb3AoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3VjY2Vzc1xcbkZBQ1RPUj1cIiArIHA4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZmFjdG9yIG91dCBuZWdhdGl2ZSBzaWduIChub3QgcmVxJ2QgYmVjYXVzZSBwNCA+IDEpXG4gICAgICAgICAgLy9pZiAwXG4gICAgICAgICAgLypcbiAgICAgICAgICBpZiAoaXNuZWdhdGl2ZXRlcm0ocDQpKVxuICAgICAgICAgICAgcHVzaChwOClcbiAgICAgICAgICAgIG5lZ2F0ZSgpXG4gICAgICAgICAgICBwOCA9IHBvcCgpXG4gICAgICAgICAgICBwdXNoKHA3KVxuICAgICAgICAgICAgbmVnYXRlX25vZXhwYW5kKClcbiAgICAgICAgICAgIHA3ID0gcG9wKClcbiAgICAgICAgICAqL1xuICAgICAgICAgIC8vZW5kaWZcblxuICAgICAgICAgIC8vIHA3IGlzIHRoZSBwYXJ0IG9mIHRoZSBwb2x5bm9taWFsIHRoYXQgd2FzIGZhY3RvcmVkIHNvIGZhcixcbiAgICAgICAgICAvLyBhZGQgdGhlIG5ld2x5IGZvdW5kIGZhY3RvciB0byBpdC4gTm90ZSB0aGF0IHdlIGFyZSBub3QgYWN0dWFsbHlcbiAgICAgICAgICAvLyBtdWx0aXBseWluZyB0aGUgcG9seW5vbWlhbHMgZnVsbHksIHdlIGFyZSBqdXN0IGxlYXZpbmcgdGhlbVxuICAgICAgICAgIC8vIGV4cHJlc3NlZCBhcyAoUDEpKihQMiksIHdlIGFyZSBub3QgZXhwYW5kaW5nIHRoZSBwcm9kdWN0LlxuICAgICAgICAgIHB1c2gocDcpO1xuICAgICAgICAgIHB1c2gocDgpO1xuICAgICAgICAgIG11bHRpcGx5X25vZXhwYW5kKCk7XG4gICAgICAgICAgcDcgPSBwb3AoKTtcbiAgICAgICAgICAvLyBvayBub3cgb24gc3RhY2sgd2UgaGF2ZSB0aGUgY29lZmZpY2llbnRzIG9mIHRoZVxuICAgICAgICAgIC8vIHJlbWFpbmluZyBwYXJ0IG9mIHRoZSBwb2x5bm9taWFsIHN0aWxsIHRvIGZhY3Rvci5cbiAgICAgICAgICAvLyBEaXZpZGUgaXQgYnkgdGhlIG5ld2x5LWZvdW5kIGZhY3RvciBzbyB0aGF0XG4gICAgICAgICAgLy8gdGhlIHN0YWNrIHRoZW4gY29udGFpbnMgdGhlIGNvZWZmaWNpZW50cyBvZiB0aGVcbiAgICAgICAgICAvLyBwb2x5bm9taWFsIHBhcnQgc3RpbGwgbGVmdCB0byBmYWN0b3IuXG4gICAgICAgICAgeXlkaXZwb2x5KCk7XG4gICAgICAgICAgd2hpbGUgKGZhY3Rwb2x5X2V4cG8gJiYgaXNaZXJvQXRvbU9yVGVuc29yKHN0YWNrW3BvbHljb2VmZiArIGZhY3Rwb2x5X2V4cG9dKSkge1xuICAgICAgICAgICAgZmFjdHBvbHlfZXhwby0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXNoKHplcm8pO1xuICAgICAgICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBmYWN0cG9seV9leHBvOyAoMCA8PSByZWYgPyBvIDw9IHJlZiA6IG8gPj0gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICAgICAgICBwdXNoKHN0YWNrW3BvbHljb2VmZiArIGldKTtcbiAgICAgICAgICAgIHB1c2gocDIpOyAvLyB0aGUgZnJlZSB2YXJpYWJsZVxuICAgICAgICAgICAgcHVzaF9pbnRlZ2VyKGkpO1xuICAgICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVtYWluaW5nUG9seSA9IHBvcCgpO1xuICAgICAgICB9XG4gICAgICAvL2NvbnNvbGUubG9nKFwicmVhbCBicmFuY2ggcmVtYWluaW5nUG9seTogXCIgKyByZW1haW5pbmdQb2x5KVxuICAgICAgfSBlbHNlIGlmICh3aGljaFJvb3RzQXJlV2VGaW5kaW5nID09PSBcImNvbXBsZXhcIikge1xuICAgICAgICBpZiAoZm91bmRDb21wbGV4Um9vdCA9PT0gMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGJ1aWxkIHRoZSAyLWRlZ3JlZSBwb2x5bm9taWFsIG91dCBvZiB0aGVcbiAgICAgICAgICAvLyByZWFsIHNvbHV0aW9uIHRoYXQgd2FzIGp1c3QgZm91bmQuXG4gICAgICAgICAgcHVzaChwNCk7IC8vIEFcbiAgICAgICAgICBwdXNoKHAyKTsgLy8geFxuICAgICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcImZpcnN0IGZhY3RvcjogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICBwdXNoKHA0KTsgLy8gQVxuICAgICAgICAgIGNvbmp1Z2F0ZSgpO1xuICAgICAgICAgIHB1c2gocDIpOyAvLyB4XG4gICAgICAgICAgc3VidHJhY3QoKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwic2Vjb25kIGZhY3RvcjogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIC8vaWYgKGZhY3Rwb2x5X2V4cG8gPiAwICYmIGlzbmVnYXRpdmV0ZXJtKHN0YWNrW3BvbHljb2VmZitmYWN0cG9seV9leHBvXSkpXG4gICAgICAgICAgLy8gIG5lZ2F0ZSgpXG4gICAgICAgICAgLy8gIG5lZ2F0ZV9ub2V4cGFuZCgpXG4gICAgICAgICAgcDggPSBwb3AoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3VjY2Vzc1xcbkZBQ1RPUj1cIiArIHA4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZmFjdG9yIG91dCBuZWdhdGl2ZSBzaWduIChub3QgcmVxJ2QgYmVjYXVzZSBwNCA+IDEpXG4gICAgICAgICAgLy9pZiAwXG4gICAgICAgICAgLypcbiAgICAgICAgICBpZiAoaXNuZWdhdGl2ZXRlcm0ocDQpKVxuICAgICAgICAgICAgcHVzaChwOClcbiAgICAgICAgICAgIG5lZ2F0ZSgpXG4gICAgICAgICAgICBwOCA9IHBvcCgpXG4gICAgICAgICAgICBwdXNoKHA3KVxuICAgICAgICAgICAgbmVnYXRlX25vZXhwYW5kKClcbiAgICAgICAgICAgIHA3ID0gcG9wKClcbiAgICAgICAgICAqL1xuICAgICAgICAgIC8vZW5kaWZcblxuICAgICAgICAgIC8vIHA3IGlzIHRoZSBwYXJ0IG9mIHRoZSBwb2x5bm9taWFsIHRoYXQgd2FzIGZhY3RvcmVkIHNvIGZhcixcbiAgICAgICAgICAvLyBhZGQgdGhlIG5ld2x5IGZvdW5kIGZhY3RvciB0byBpdC4gTm90ZSB0aGF0IHdlIGFyZSBub3QgYWN0dWFsbHlcbiAgICAgICAgICAvLyBtdWx0aXBseWluZyB0aGUgcG9seW5vbWlhbHMgZnVsbHksIHdlIGFyZSBqdXN0IGxlYXZpbmcgdGhlbVxuICAgICAgICAgIC8vIGV4cHJlc3NlZCBhcyAoUDEpKihQMiksIHdlIGFyZSBub3QgZXhwYW5kaW5nIHRoZSBwcm9kdWN0LlxuICAgICAgICAgIHB1c2gocDcpO1xuICAgICAgICAgIHByZXZpb3VzRmFjdG9yaXNhdGlvbiA9IHBvcCgpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJwcmV2aW91c0ZhY3RvcmlzYXRpb246IFwiICsgcHJldmlvdXNGYWN0b3Jpc2F0aW9uKVxuICAgICAgICAgIHB1c2gocDcpO1xuICAgICAgICAgIHB1c2gocDgpO1xuICAgICAgICAgIG11bHRpcGx5X25vZXhwYW5kKCk7XG4gICAgICAgICAgcDcgPSBwb3AoKTtcbiAgICAgICAgICBpZiAocmVtYWluaW5nUG9seSA9PSBudWxsKSB7XG4gICAgICAgICAgICBwdXNoKHplcm8pO1xuICAgICAgICAgICAgZm9yIChpID0gaTEgPSAwLCByZWYxID0gZmFjdHBvbHlfZXhwbzsgKDAgPD0gcmVmMSA/IGkxIDw9IHJlZjEgOiBpMSA+PSByZWYxKTsgaSA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgICAgICAgIHB1c2goc3RhY2tbcG9seWNvZWZmICsgaV0pO1xuICAgICAgICAgICAgICBwdXNoKHAyKTsgLy8gdGhlIGZyZWUgdmFyaWFibGVcbiAgICAgICAgICAgICAgcHVzaF9pbnRlZ2VyKGkpO1xuICAgICAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbWFpbmluZ1BvbHkgPSBwb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm9yaWdpbmFsIHBvbHlub21pYWwgKGRpdmlkZW5kKTogXCIgKyByZW1haW5pbmdQb2x5KVxuICAgICAgICAgIGRpdmlkZW5kID0gcmVtYWluaW5nUG9seTtcbiAgICAgICAgICAvL3B1c2goZGl2aWRlbmQpXG4gICAgICAgICAgLy9kZWdyZWUoKVxuICAgICAgICAgIC8vc3RhcnRpbmdEZWdyZWUgPSBwb3AoKVxuICAgICAgICAgIHB1c2goZGl2aWRlbmQpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJkaXZpZGluZyBcIiArIHN0YWNrW3Rvcy0xXS50b1N0cmluZygpICsgXCIgYnkgXCIgKyBwOClcbiAgICAgICAgICBwdXNoKHA4KTsgLy8gZGl2aXNvclxuICAgICAgICAgIHB1c2gocDIpOyAvLyBYXG4gICAgICAgICAgZGl2cG9seSgpO1xuICAgICAgICAgIHJlbWFpbmluZ1BvbHkgPSBwb3AoKTtcbiAgICAgICAgICBwdXNoKHJlbWFpbmluZ1BvbHkpO1xuICAgICAgICAgIHB1c2gocDgpOyAvLyBkaXZpc29yXG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBjaGVja2luZ1RoZURpdmlzaW9uID0gcG9wKCk7XG4gICAgICAgICAgaWYgKCFlcXVhbChjaGVja2luZ1RoZURpdmlzaW9uLCBkaXZpZGVuZCkpIHtcbiAgICAgICAgICAgIC8vcHVzaChkaXZpZGVuZClcbiAgICAgICAgICAgIC8vZ2NkX3N1bSgpXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZ2NkIHRvcCBvZiBzdGFjazogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIndlIGZvdW5kIGEgcG9seW5vbWlhbCBiYXNlZCBvbiBjb21wbGV4IHJvb3QgYW5kIGl0cyBjb25qIGJ1dCBpdCBkb2Vzbid0IGRpdmlkZSB0aGUgcG9seSwgcXVpdHRpbmdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzbyBqdXN0IHJldHVybmluZyBwcmV2aW91c0ZhY3RvcmlzYXRpb24gdGltZXMgZGl2aWRlbmQ6IFwiICsgcHJldmlvdXNGYWN0b3Jpc2F0aW9uICsgXCIgKiBcIiArIGRpdmlkZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHB1c2gocHJldmlvdXNGYWN0b3Jpc2F0aW9uKTtcbiAgICAgICAgICAgIHB1c2goZGl2aWRlbmQpO1xuICAgICAgICAgICAgcHJldl9leHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgICAgICAgICBleHBhbmRpbmcgPSAwO1xuICAgICAgICAgICAgeXljb25kZW5zZSgpO1xuICAgICAgICAgICAgZXhwYW5kaW5nID0gcHJldl9leHBhbmRpbmc7XG4gICAgICAgICAgICBtdWx0aXBseV9ub2V4cGFuZCgpO1xuICAgICAgICAgICAgcDcgPSBwb3AoKTtcbiAgICAgICAgICAgIHN0YWNrW2hdID0gcDc7XG4gICAgICAgICAgICBtb3ZlVG9zKGggKyAxKTtcbiAgICAgICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4vL2NvbnNvbGUubG9nKFwicmVzdWx0OiAoc3RpbGwgdG8gYmUgZmFjdG9yZWQpIFwiICsgcmVtYWluaW5nUG9seSlcblxuICAgICAgICAgIC8vcHVzaChyZW1haW5pbmdQb2x5KVxuLy9kZWdyZWUoKVxuLy9yZW1haW5pbmdEZWdyZWUgPSBwb3AoKVxuLypcbmlmIGNvbXBhcmVfbnVtYmVycyhzdGFydGluZ0RlZ3JlZSwgcmVtYWluaW5nRGVncmVlKVxuICogb2sgZXZlbiBpZiB3ZSBmb3VuZCBhIGNvbXBsZXggcm9vdCB0aGF0XG4gKiB0b2dldGhlciB3aXRoIHRoZSBjb25qdWdhdGUgZ2VuZXJhdGVzIGEgcG9seSBpbiBaLFxuICogdGhhdCBkb2Vzbid0IG1lYW4gdGhhdCB0aGUgZGl2aXNpb24gd291bGQgZW5kIHVwIGluIFouXG4gKiBFeGFtcGxlOiAxK3heMit4XjQreF42IGhhcyAraSBhbmQgLWkgYXMgb25lIG9mIGl0cyByb290c1xuICogc28gYSBmYWN0b3IgaXMgMSt4XjIgKCA9ICh4K2kpKih4LWkpKVxuICogQlVUIFxuICovXG4gICAgICAgICAgZm9yIChpID0gajEgPSAwLCByZWYyID0gZmFjdHBvbHlfZXhwbzsgKDAgPD0gcmVmMiA/IGoxIDw9IHJlZjIgOiBqMSA+PSByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICAgICAgICBwb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHVzaChyZW1haW5pbmdQb2x5KTtcbiAgICAgICAgICBwdXNoKHAyKTtcbiAgICAgICAgICBjb2VmZigpO1xuICAgICAgICAgIGZhY3Rwb2x5X2V4cG8gLT0gMjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvL2NvbnNvbGUubG9nKFwiZmFjdHBvbHlfZXhwbzogXCIgKyBmYWN0cG9seV9leHBvKVxuXG4gICAgLy8gYnVpbGQgdGhlIHJlbWFpbmluZyB1bmZhY3RvcmVkIHBhcnQgb2YgdGhlIHBvbHlub21pYWxcbiAgICBwdXNoKHplcm8pO1xuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMyA9IGZhY3Rwb2x5X2V4cG87ICgwIDw9IHJlZjMgPyBsMSA8PSByZWYzIDogbDEgPj0gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK2wxIDogLS1sMSkge1xuICAgICAgcHVzaChzdGFja1twb2x5Y29lZmYgKyBpXSk7XG4gICAgICBwdXNoKHAyKTsgLy8gdGhlIGZyZWUgdmFyaWFibGVcbiAgICAgIHB1c2hfaW50ZWdlcihpKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgYWRkKCk7XG4gICAgfVxuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlBPTFk9XCIgKyBwMSk7XG4gICAgfVxuICAgIHB1c2gocDEpO1xuICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgIGV4cGFuZGluZyA9IDA7XG4gICAgeXljb25kZW5zZSgpO1xuICAgIGV4cGFuZGluZyA9IHByZXZfZXhwYW5kaW5nO1xuICAgIHAxID0gcG9wKCk7XG4gICAgLy9jb25zb2xlLmxvZyhcIm5ldyBwb2x5IHdpdGggZXh0cmFjdGVkIGNvbW1vbiBmYWN0b3I6IFwiICsgcDEpXG4gICAgLy9kZWJ1Z2dlclxuXG4gICAgLy8gZmFjdG9yIG91dCBuZWdhdGl2ZSBzaWduXG4gICAgaWYgKGZhY3Rwb2x5X2V4cG8gPiAwICYmIGlzbmVnYXRpdmV0ZXJtKHN0YWNrW3BvbHljb2VmZiArIGZhY3Rwb2x5X2V4cG9dKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICAvL3ByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nXG4gICAgICAvL2V4cGFuZGluZyA9IDFcbiAgICAgIG5lZ2F0ZSgpO1xuICAgICAgLy9leHBhbmRpbmcgPSBwcmV2X2V4cGFuZGluZ1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIHB1c2gocDcpO1xuICAgICAgbmVnYXRlX25vZXhwYW5kKCk7XG4gICAgICBwNyA9IHBvcCgpO1xuICAgIH1cbiAgICBwdXNoKHA3KTtcbiAgICBwdXNoKHAxKTtcbiAgICBtdWx0aXBseV9ub2V4cGFuZCgpO1xuICAgIHA3ID0gcG9wKCk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlJFU1VMVD1cIiArIHA3KTtcbiAgICB9XG4gICAgc3RhY2tbaF0gPSBwNztcbiAgICBtb3ZlVG9zKGggKyAxKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHJhdGlvbmFsaXplX2NvZWZmaWNpZW50cyA9IGZ1bmN0aW9uKGgpIHtcbiAgICB2YXIgaSwgaTEsIG8sIHJlZiwgcmVmMSwgcmVmMiwgcmVmMztcbiAgICBpID0gMDtcbiAgICAvLyBMQ00gb2YgYWxsIHBvbHlub21pYWwgY29lZmZpY2llbnRzXG4gICAgcDcgPSBvbmU7XG4gICAgZm9yIChpID0gbyA9IHJlZiA9IGgsIHJlZjEgPSB0b3M7IChyZWYgPD0gcmVmMSA/IG8gPCByZWYxIDogbyA+IHJlZjEpOyBpID0gcmVmIDw9IHJlZjEgPyArK28gOiAtLW8pIHtcbiAgICAgIHB1c2goc3RhY2tbaV0pO1xuICAgICAgZGVub21pbmF0b3IoKTtcbiAgICAgIHB1c2gocDcpO1xuICAgICAgbGNtKCk7XG4gICAgICBwNyA9IHBvcCgpO1xuICAgIH1cbi8vIG11bHRpcGx5IGVhY2ggY29lZmZpY2llbnQgYnkgUkVTVUxUXG4gICAgZm9yIChpID0gaTEgPSByZWYyID0gaCwgcmVmMyA9IHRvczsgKHJlZjIgPD0gcmVmMyA/IGkxIDwgcmVmMyA6IGkxID4gcmVmMyk7IGkgPSByZWYyIDw9IHJlZjMgPyArK2kxIDogLS1pMSkge1xuICAgICAgcHVzaChwNyk7XG4gICAgICBwdXNoKHN0YWNrW2ldKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBzdGFja1tpXSA9IHBvcCgpO1xuICAgIH1cbiAgICAvLyByZWNpcHJvY2F0ZSBSRVNVTFRcbiAgICBwdXNoKHA3KTtcbiAgICByZWNpcHJvY2F0ZSgpO1xuICAgIHA3ID0gcG9wKCk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coXCJyYXRpb25hbGl6ZV9jb2VmZmljaWVudHMgcmVzdWx0XCIpO1xuICAgIH1cbiAgfTtcblxuICAvL2NvbnNvbGUubG9nIHByaW50X2xpc3QocDcpXG4gIGdldF9mYWN0b3JfZnJvbV9yZWFsX3Jvb3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYTAsIGFuLCBoLCBpLCBpMSwgaiwgajEsIGwxLCBtMSwgbmEwLCBuYW4sIG8sIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcm9vdHNUcmllc19pLCByb290c1RyaWVzX2o7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgaCA9IDA7XG4gICAgYTAgPSAwO1xuICAgIGFuID0gMDtcbiAgICBuYTAgPSAwO1xuICAgIG5hbiA9IDA7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBwdXNoKHplcm8pO1xuICAgICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IGZhY3Rwb2x5X2V4cG87ICgwIDw9IHJlZiA/IG8gPD0gcmVmIDogbyA+PSByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgICAgcHVzaChzdGFja1twb2x5Y29lZmYgKyBpXSk7XG4gICAgICAgIHB1c2gocDIpO1xuICAgICAgICBwdXNoX2ludGVnZXIoaSk7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgfVxuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiUE9MWT1cIiArIHAxKTtcbiAgICB9XG4gICAgaCA9IHRvcztcbiAgICBhbiA9IHRvcztcbiAgICBwdXNoKHN0YWNrW3BvbHljb2VmZiArIGZhY3Rwb2x5X2V4cG9dKTtcbiAgICBkaXZpc29yc19vbnN0YWNrKCk7XG4gICAgbmFuID0gdG9zIC0gYW47XG4gICAgYTAgPSB0b3M7XG4gICAgcHVzaChzdGFja1twb2x5Y29lZmYgKyAwXSk7XG4gICAgZGl2aXNvcnNfb25zdGFjaygpO1xuICAgIG5hMCA9IHRvcyAtIGEwO1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJkaXZpc29ycyBvZiBiYXNlIHRlcm1cIik7XG4gICAgICBmb3IgKGkgPSBpMSA9IDAsIHJlZjEgPSBuYTA7ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIsIFwiICsgc3RhY2tbYTAgKyBpXSk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcImRpdmlzb3JzIG9mIGxlYWRpbmcgdGVybVwiKTtcbiAgICAgIGZvciAoaSA9IGoxID0gMCwgcmVmMiA9IG5hbjsgKDAgPD0gcmVmMiA/IGoxIDwgcmVmMiA6IGoxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2oxIDogLS1qMSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiwgXCIgKyBzdGFja1thbiArIGldKTtcbiAgICAgIH1cbiAgICB9XG4vLyB0cnkgcm9vdHNcbiAgICBmb3IgKHJvb3RzVHJpZXNfaSA9IGwxID0gMCwgcmVmMyA9IG5hbjsgKDAgPD0gcmVmMyA/IGwxIDwgcmVmMyA6IGwxID4gcmVmMyk7IHJvb3RzVHJpZXNfaSA9IDAgPD0gcmVmMyA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBmb3IgKHJvb3RzVHJpZXNfaiA9IG0xID0gMCwgcmVmNCA9IG5hMDsgKDAgPD0gcmVmNCA/IG0xIDwgcmVmNCA6IG0xID4gcmVmNCk7IHJvb3RzVHJpZXNfaiA9IDAgPD0gcmVmNCA/ICsrbTEgOiAtLW0xKSB7XG4gICAgICAgIC8vaWYgREVCVUcgdGhlbiBjb25zb2xlLmxvZyBcIm5hbjogXCIgKyBuYW4gKyBcIiBuYTA6IFwiICsgbmEwICsgXCIgaTogXCIgKyByb290c1RyaWVzX2kgKyBcIiBqOiBcIiArIHJvb3RzVHJpZXNfalxuICAgICAgICBwNCA9IHN0YWNrW2FuICsgcm9vdHNUcmllc19pXTtcbiAgICAgICAgcDUgPSBzdGFja1thMCArIHJvb3RzVHJpZXNfal07XG4gICAgICAgIHB1c2gocDUpO1xuICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICBwMyA9IHBvcCgpO1xuICAgICAgICBFdmFscG9seSgpO1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInRyeSBBPVwiICsgcDQpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiLCBCPVwiICsgcDUpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiLCByb290IFwiICsgcDIpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiPS1CL0E9XCIgKyBwMyk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIsIFBPTFkoXCIgKyBwMyk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIpPVwiICsgcDYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDYpKSB7XG4gICAgICAgICAgbW92ZVRvcyhoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZ2V0X2ZhY3Rvcl9mcm9tX3JlYWxfcm9vdCByZXR1cm5pbmcgMVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaChwNSk7XG4gICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICBwNSA9IHBvcCgpO1xuICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgIHAzID0gcG9wKCk7XG4gICAgICAgIEV2YWxwb2x5KCk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwidHJ5IEE9XCIgKyBwNCk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIsIEI9XCIgKyBwNSk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIsIHJvb3QgXCIgKyBwMik7XG4gICAgICAgICAgY29uc29sZS5sb2coXCI9LUIvQT1cIiArIHAzKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIiwgUE9MWShcIiArIHAzKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIik9XCIgKyBwNik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwNikpIHtcbiAgICAgICAgICBtb3ZlVG9zKGgpO1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJnZXRfZmFjdG9yX2Zyb21fcmVhbF9yb290IHJldHVybmluZyAxXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBtb3ZlVG9zKGgpO1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJnZXRfZmFjdG9yX2Zyb21fcmVhbF9yb290IHJldHVybmluZyAwXCIpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBnZXRfZmFjdG9yX2Zyb21fY29tcGxleF9yb290ID0gZnVuY3Rpb24ocmVtYWluaW5nUG9seSkge1xuICAgIHZhciBhMCwgYW4sIGgsIGksIGkxLCBqLCBuYTAsIG5hbiwgbywgcm9vdHNUcmllc19pLCByb290c1RyaWVzX2o7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgaCA9IDA7XG4gICAgYTAgPSAwO1xuICAgIGFuID0gMDtcbiAgICBuYTAgPSAwO1xuICAgIG5hbiA9IDA7XG4gICAgaWYgKGZhY3Rwb2x5X2V4cG8gPD0gMikge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibm8gbW9yZSBmYWN0b3JpbmcgdmlhIGNvbXBsZXggcm9vdHMgdG8gYmUgZm91bmQgaW4gcG9seW5vbWlhbCBvZiBkZWdyZWUgPD0gMlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBwMSA9IHJlbWFpbmluZ1BvbHk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNvbXBsZXggcm9vdCBmaW5kaW5nIGZvciBQT0xZPVwiICsgcDEpO1xuICAgIH1cbiAgICBoID0gdG9zO1xuICAgIGFuID0gdG9zO1xuICAgIC8vIHRyeWluZyAtMV4oMi8zKSB3aGljaCBnZW5lcmF0ZXMgYSBwb2x5bm9taWFsIGluIFpcbiAgICAvLyBnZW5lcmF0ZXMgeF4yICsgMnggKyAxXG4gICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICBwdXNoX3JhdGlvbmFsKDIsIDMpO1xuICAgIHBvd2VyKCk7XG4gICAgcmVjdCgpO1xuICAgIHA0ID0gcG9wKCk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNvbXBsZXggcm9vdCBmaW5kaW5nOiB0cnlpbmcgd2l0aCBcIiArIHA0KTtcbiAgICB9XG4gICAgcHVzaChwNCk7XG4gICAgcDMgPSBwb3AoKTtcbiAgICBwdXNoKHAzKTtcbiAgICBFdmFscG9seSgpO1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJjb21wbGV4IHJvb3QgZmluZGluZyByZXN1bHQ6IFwiICsgcDYpO1xuICAgIH1cbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHA2KSkge1xuICAgICAgbW92ZVRvcyhoKTtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImdldF9mYWN0b3JfZnJvbV9jb21wbGV4X3Jvb3QgcmV0dXJuaW5nIDFcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgLy8gdHJ5aW5nIDFeKDIvMykgd2hpY2ggZ2VuZXJhdGVzIGEgcG9seW5vbWlhbCBpbiBaXG4gICAgLy8gaHR0cDovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSgxKSU1RSgyJTJGMylcbiAgICAvLyBnZW5lcmF0ZXMgeF4yIC0gMnggKyAxXG4gICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgIHB1c2hfcmF0aW9uYWwoMiwgMyk7XG4gICAgcG93ZXIoKTtcbiAgICByZWN0KCk7XG4gICAgcDQgPSBwb3AoKTtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY29tcGxleCByb290IGZpbmRpbmc6IHRyeWluZyB3aXRoIFwiICsgcDQpO1xuICAgIH1cbiAgICBwdXNoKHA0KTtcbiAgICBwMyA9IHBvcCgpO1xuICAgIHB1c2gocDMpO1xuICAgIEV2YWxwb2x5KCk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNvbXBsZXggcm9vdCBmaW5kaW5nIHJlc3VsdDogXCIgKyBwNik7XG4gICAgfVxuICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDYpKSB7XG4gICAgICBtb3ZlVG9zKGgpO1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZ2V0X2ZhY3Rvcl9mcm9tX2NvbXBsZXhfcm9vdCByZXR1cm5pbmcgMVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbi8vIHRyeWluZyBzb21lIHNpbXBsZSBjb21wbGV4IG51bWJlcnMuIEFsbCBvZiB0aGVzZVxuLy8gZ2VuZXJhdGUgcG9seW5vbWlhbHMgaW4gWlxuICAgIGZvciAocm9vdHNUcmllc19pID0gbyA9IC0xMDsgbyA8PSAxMDsgcm9vdHNUcmllc19pID0gKytvKSB7XG4gICAgICBmb3IgKHJvb3RzVHJpZXNfaiA9IGkxID0gMTsgaTEgPD0gNTsgcm9vdHNUcmllc19qID0gKytpMSkge1xuICAgICAgICBwdXNoX2ludGVnZXIocm9vdHNUcmllc19pKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKHJvb3RzVHJpZXNfaik7XG4gICAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICByZWN0KCk7XG4gICAgICAgIHA0ID0gcG9wKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJjb21wbGV4IHJvb3QgZmluZGluZzogdHJ5aW5nIHNpbXBsZSBjb21wbGV4IGNvbWJpbmF0aW9uOiBcIiArIHA0KVxuICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgcDMgPSBwb3AoKTtcbiAgICAgICAgcHVzaChwMyk7XG4gICAgICAgIEV2YWxwb2x5KCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJjb21wbGV4IHJvb3QgZmluZGluZyByZXN1bHQ6IFwiICsgcDYpXG4gICAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDYpKSB7XG4gICAgICAgICAgbW92ZVRvcyhoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm91bmQgY29tcGxleCByb290OiBcIiArIHA2KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbW92ZVRvcyhoKTtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZ2V0X2ZhY3Rvcl9mcm9tX2NvbXBsZXhfcm9vdCByZXR1cm5pbmcgMFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBEaXZpZGUgYSBwb2x5bm9taWFsIGJ5IEF4K0JcblxuICAvLyAgSW5wdXQ6ICBvbiBzdGFjazogIHBvbHljb2VmZiAgRGl2aWRlbmQgY29lZmZpY2llbnRzXG5cbiAgLy8gICAgICBmYWN0cG9seV9leHBvICAgIERlZ3JlZSBvZiBkaXZpZGVuZFxuXG4gIC8vICAgICAgQSAocDQpICAgIEFzIGFib3ZlXG5cbiAgLy8gICAgICBCIChwNSkgICAgQXMgYWJvdmVcblxuICAvLyAgT3V0cHV0OiAgIG9uIHN0YWNrOiBwb2x5Y29lZmYgIENvbnRhaW5zIHF1b3RpZW50IGNvZWZmaWNpZW50c1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgeXlkaXZwb2x5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIG8sIHJlZjtcbiAgICBpID0gMDtcbiAgICBwNiA9IHplcm87XG4gICAgZm9yIChpID0gbyA9IHJlZiA9IGZhY3Rwb2x5X2V4cG87IChyZWYgPD0gMCA/IG8gPCAwIDogbyA+IDApOyBpID0gcmVmIDw9IDAgPyArK28gOiAtLW8pIHtcbiAgICAgIHB1c2goc3RhY2tbcG9seWNvZWZmICsgaV0pO1xuICAgICAgc3RhY2tbcG9seWNvZWZmICsgaV0gPSBwNjtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgZGl2aWRlKCk7XG4gICAgICBwNiA9IHBvcCgpO1xuICAgICAgcHVzaChzdGFja1twb2x5Y29lZmYgKyBpIC0gMV0pO1xuICAgICAgcHVzaChwNik7XG4gICAgICBwdXNoKHA1KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgc3RhY2tbcG9seWNvZWZmICsgaSAtIDFdID0gcG9wKCk7XG4gICAgfVxuICAgIHN0YWNrW3BvbHljb2VmZiArIDBdID0gcDY7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coXCJ5eWRpdnBvbHkgUTpcIik7XG4gICAgfVxuICB9O1xuXG4gIC8vY29uc29sZS5sb2cgcHJpbnRfbGlzdChwNilcbiAgRXZhbHBvbHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbywgcmVmO1xuICAgIGkgPSAwO1xuICAgIHB1c2goemVybyk7XG4gICAgZm9yIChpID0gbyA9IHJlZiA9IGZhY3Rwb2x5X2V4cG87IChyZWYgPD0gMCA/IG8gPD0gMCA6IG8gPj0gMCk7IGkgPSByZWYgPD0gMCA/ICsrbyA6IC0tbykge1xuICAgICAgcHVzaChwMyk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcHVzaChzdGFja1twb2x5Y29lZmYgKyBpXSk7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJFdmFscG9seSB0b3Agb2Ygc3RhY2s6XCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhwcmludF9saXN0KHN0YWNrW3RvcyAtIGldKSk7XG4gICAgICB9XG4gICAgICBhZGQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHA2ID0gcG9wKCk7XG4gIH07XG5cbiAgLy8gUHVzaCBleHByZXNzaW9uIGZhY3RvcnMgb250byB0aGUgc3RhY2suIEZvciBleGFtcGxlLi4uXG5cbiAgLy8gSW5wdXRcblxuICAvLyAgICAgICAyXG4gIC8vICAgICAzeCAgKyAyeCArIDFcblxuICAvLyBPdXRwdXQgb24gc3RhY2tcblxuICAvLyAgICAgWyAgMyAgXVxuICAvLyAgICAgWyB4XjIgXVxuICAvLyAgICAgWyAgMiAgXVxuICAvLyAgICAgWyAgeCAgXVxuICAvLyAgICAgWyAgMSAgXVxuXG4gIC8vIGJ1dCBub3QgbmVjZXNzYXJpbHkgaW4gdGhhdCBvcmRlci4gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGZhY3RvcnMuXG5cbiAgLy8gTG9jYWwgVSAqcCBpcyBPSyBoZXJlIGJlY2F1c2Ugbm8gZnVuY3Rpb25hbCBwYXRoIHRvIGdhcmJhZ2UgY29sbGVjdG9yLlxuICBmYWN0b3JzID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBoO1xuICAgIGggPSB0b3M7XG4gICAgaWYgKGNhcihwKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIHAgPSBjZHIocCk7XG4gICAgICB3aGlsZSAoaXNjb25zKHApKSB7XG4gICAgICAgIHB1c2hfdGVybV9mYWN0b3JzKGNhcihwKSk7XG4gICAgICAgIHAgPSBjZHIocCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2hfdGVybV9mYWN0b3JzKHApO1xuICAgIH1cbiAgICByZXR1cm4gdG9zIC0gaDtcbiAgfTtcblxuICAvLyBMb2NhbCBVICpwIGlzIE9LIGhlcmUgYmVjYXVzZSBubyBmdW5jdGlvbmFsIHBhdGggdG8gZ2FyYmFnZSBjb2xsZWN0b3IuXG4gIHB1c2hfdGVybV9mYWN0b3JzID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgIHAgPSBjZHIocCk7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAoaXNjb25zKHApKSB7XG4gICAgICAgIHB1c2goY2FyKHApKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHAgPSBjZHIocCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoKHApO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX2ZpbHRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgRXZhbCgpO1xuICAgICAgZmlsdGVyKCk7XG4gICAgICByZXN1bHRzLnB1c2gocDEgPSBjZHIocDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgZmlsdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBmaWx0ZXJfbWFpbigpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgZmlsdGVyX21haW4gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIHJldHVybiBmaWx0ZXJfc3VtKCk7XG4gICAgfSBlbHNlIGlmIChpc3RlbnNvcihwMSkpIHtcbiAgICAgIHJldHVybiBmaWx0ZXJfdGVuc29yKCk7XG4gICAgfSBlbHNlIGlmIChGaW5kKHAxLCBwMikpIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoKHAxKTtcbiAgICB9XG4gIH07XG5cbiAgZmlsdGVyX3N1bSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBmaWx0ZXIoKTtcbiAgICAgIGFkZCgpO1xuICAgICAgcmVzdWx0cy5wdXNoKHAxID0gY2RyKHAxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIGZpbHRlcl90ZW5zb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaTEsIG4sIG8sIHJlZiwgcmVmMTtcbiAgICBpID0gMDtcbiAgICBuID0gMDtcbiAgICBuID0gcDEudGVuc29yLm5lbGVtO1xuICAgIHAzID0gYWxsb2NfdGVuc29yKG4pO1xuICAgIHAzLnRlbnNvci5uZGltID0gcDEudGVuc29yLm5kaW07XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IHAxLnRlbnNvci5uZGltOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcDMudGVuc29yLmRpbVtpXSA9IHAxLnRlbnNvci5kaW1baV07XG4gICAgfVxuICAgIGZvciAoaSA9IGkxID0gMCwgcmVmMSA9IG47ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgIHB1c2gocDEudGVuc29yLmVsZW1baV0pO1xuICAgICAgcHVzaChwMik7XG4gICAgICBmaWx0ZXIoKTtcbiAgICAgIHAzLnRlbnNvci5lbGVtW2ldID0gcG9wKCk7XG4gICAgfVxuICAgIHJldHVybiBwdXNoKHAzKTtcbiAgfTtcblxuICBFdmFsX2Zsb2F0ID0gZnVuY3Rpb24oKSB7XG4gICAgZXZhbHVhdGluZ0FzRmxvYXRzKys7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHl5ZmxvYXQoKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIGV2YWx1YXRpbmdBc0Zsb2F0cy0tO1xuICB9O1xuXG4gIGNoZWNrRmxvYXRIYXNXb3JrZWRPdXRDb21wbGV0ZWx5ID0gZnVuY3Rpb24obm9kZVRvQ2hlY2spIHtcbiAgICB2YXIgbnVtYmVyT2ZFcywgbnVtYmVyT2ZNdWx0cywgbnVtYmVyT2ZQSXMsIG51bWJlck9mUG93ZXJzLCBudW1iZXJPZlN1bXM7XG4gICAgbnVtYmVyT2ZQb3dlcnMgPSBjb3VudE9jY3VycmVuY2VzT2ZTeW1ib2woc3ltYm9sKFBPV0VSKSwgbm9kZVRvQ2hlY2spO1xuICAgIG51bWJlck9mUElzID0gY291bnRPY2N1cnJlbmNlc09mU3ltYm9sKHN5bWJvbChQSSksIG5vZGVUb0NoZWNrKTtcbiAgICBudW1iZXJPZkVzID0gY291bnRPY2N1cnJlbmNlc09mU3ltYm9sKHN5bWJvbChFKSwgbm9kZVRvQ2hlY2spO1xuICAgIG51bWJlck9mTXVsdHMgPSBjb3VudE9jY3VycmVuY2VzT2ZTeW1ib2woc3ltYm9sKE1VTFRJUExZKSwgbm9kZVRvQ2hlY2spO1xuICAgIG51bWJlck9mU3VtcyA9IGNvdW50T2NjdXJyZW5jZXNPZlN5bWJvbChzeW1ib2woQUREKSwgbm9kZVRvQ2hlY2spO1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCIgICAgIC4uLiBudW1iZXJPZlBvd2VyczogXCIgKyBudW1iZXJPZlBvd2Vycyk7XG4gICAgICBjb25zb2xlLmxvZyhcIiAgICAgLi4uIG51bWJlck9mUElzOiBcIiArIG51bWJlck9mUElzKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiICAgICAuLi4gbnVtYmVyT2ZFczogXCIgKyBudW1iZXJPZkVzKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiICAgICAuLi4gbnVtYmVyT2ZNdWx0czogXCIgKyBudW1iZXJPZk11bHRzKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiICAgICAuLi4gbnVtYmVyT2ZTdW1zOiBcIiArIG51bWJlck9mU3Vtcyk7XG4gICAgfVxuICAgIGlmIChudW1iZXJPZlBvd2VycyA+IDEgfHwgbnVtYmVyT2ZQSXMgPiAwIHx8IG51bWJlck9mRXMgPiAwIHx8IG51bWJlck9mTXVsdHMgPiAxIHx8IG51bWJlck9mU3VtcyA+IDEpIHtcbiAgICAgIHJldHVybiBzdG9wKFwiZmxvYXQ6IHNvbWUgdW5ldmFsdWVkIHBhcnRzIGluIFwiICsgbm9kZVRvQ2hlY2spO1xuICAgIH1cbiAgfTtcblxuICB6emZsb2F0ID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIGV2YWx1YXRpbmdBc0Zsb2F0cysrO1xuICAgIC8vcDEgPSBwb3AoKVxuICAgIC8vcHVzaChjYWRyKHAxKSlcbiAgICAvL3B1c2gocDEpXG4gICAgRXZhbCgpO1xuICAgIHl5ZmxvYXQoKTtcbiAgICBFdmFsKCk7XG4gICAgZXZhbHVhdGluZ0FzRmxvYXRzLS07XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyB6emZsb2F0IGRvZXNuJ3QgbmVjZXNzYXJpbHkgcmVzdWx0IGluIGEgZG91YmxlXG4gIC8vICwgZm9yIGV4YW1wbGUgaWYgdGhlcmUgYXJlIHZhcmlhYmxlcy4gQnV0XG4gIC8vIGluIG1hbnkgb2YgdGhlIHRlc3RzIHRoZXJlIHNob3VsZCBiZSBpbmRlZWRcbiAgLy8gYSBmbG9hdCwgdGhpcyBsaW5lIGNvbWVzIGhhbmR5IHRvIGhpZ2hsaWdodFxuICAvLyB3aGVuIHRoYXQgZG9lc24ndCBoYXBwZW4gZm9yIHRob3NlIHRlc3RzLlxuICAvL2NoZWNrRmxvYXRIYXNXb3JrZWRPdXRDb21wbGV0ZWx5KHN0YWNrW3Rvcy0xXSlcbiAgeXlmbG9hdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoLCBpLCBvLCByZWY7XG4gICAgaSA9IDA7XG4gICAgaCA9IDA7XG4gICAgZXZhbHVhdGluZ0FzRmxvYXRzKys7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzY29ucyhwMSkpIHtcbiAgICAgIGggPSB0b3M7XG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICB5eWZsb2F0KCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICAgIGxpc3QodG9zIC0gaCk7XG4gICAgfSBlbHNlIGlmIChwMS5rID09PSBURU5TT1IpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgY29weV90ZW5zb3IoKTtcbiAgICAgIHAxID0gcG9wKCk7XG4gICAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gcDEudGVuc29yLm5lbGVtOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgICBwdXNoKHAxLnRlbnNvci5lbGVtW2ldKTtcbiAgICAgICAgeXlmbG9hdCgpO1xuICAgICAgICBwMS50ZW5zb3IuZWxlbVtpXSA9IHBvcCgpO1xuICAgICAgfVxuICAgICAgcHVzaChwMSk7XG4gICAgfSBlbHNlIGlmIChwMS5rID09PSBOVU0pIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgYmlnbnVtX2Zsb2F0KCk7XG4gICAgfSBlbHNlIGlmIChwMSA9PT0gc3ltYm9sKFBJKSkge1xuICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSk7XG4gICAgfSBlbHNlIGlmIChwMSA9PT0gc3ltYm9sKEUpKSB7XG4gICAgICBwdXNoX2RvdWJsZShNYXRoLkUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICB9XG4gICAgcmVzdG9yZSgpO1xuICAgIHJldHVybiBldmFsdWF0aW5nQXNGbG9hdHMtLTtcbiAgfTtcblxuICBFdmFsX2Zsb29yID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiB5Zmxvb3IoKTtcbiAgfTtcblxuICB5Zmxvb3IgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgeXlmbG9vcigpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgeXlmbG9vciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkO1xuICAgIGQgPSAwLjA7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoIWlzTnVtZXJpY0F0b20ocDEpKSB7XG4gICAgICBwdXNoX3N5bWJvbChGTE9PUik7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShwMSkpIHtcbiAgICAgIGQgPSBNYXRoLmZsb29yKHAxLmQpO1xuICAgICAgcHVzaF9kb3VibGUoZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc2ludGVnZXIocDEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcDMgPSBuZXcgVSgpO1xuICAgIHAzLmsgPSBOVU07XG4gICAgcDMucS5hID0gbWRpdihwMS5xLmEsIHAxLnEuYik7XG4gICAgcDMucS5iID0gbWludCgxKTtcbiAgICBwdXNoKHAzKTtcbiAgICBpZiAoaXNuZWdhdGl2ZW51bWJlcihwMSkpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICByZXR1cm4gYWRkKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vICdmb3InIGZ1bmN0aW9uXG4gIC8qXG4gIHg9MFxuICB5PTJcbiAgZm9yKGRvKHg9c3FydCgyK3gpLHk9Mip5L3gpLGssMSw5KVxuICBmbG9hdCh5KVxuXG4gIFg6IGtcbiAgQjogMS4uLjlcblxuICAxc3QgcGFyYW1ldGVyIGlzIHRoZSBib2R5XG4gIDJuZCBwYXJhbWV0ZXIgaXMgdGhlIHZhcmlhYmxlIHRvIGxvb3Agd2l0aFxuICAzcmQgYW5kIDR0aCBhcmUgdGhlIGxpbWl0c1xuXG4gICovXG4gIC8vZGVmaW5lIEEgcDNcbiAgLy9kZWZpbmUgQiBwNFxuICAvL2RlZmluZSBJIHA1XG4gIC8vZGVmaW5lIFggcDZcbiAgRXZhbF9mb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaiwgaywgbG9vcGluZ1ZhcmlhYmxlLCBvLCByZWYsIHJlZjE7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgayA9IDA7XG4gICAgbG9vcGluZ1ZhcmlhYmxlID0gY2FkZHIocDEpO1xuICAgIGlmICghaXNzeW1ib2wobG9vcGluZ1ZhcmlhYmxlKSkge1xuICAgICAgc3RvcChcImZvcjogMm5kIGFyZyBzaG91bGQgYmUgdGhlIHZhcmlhYmxlIHRvIGxvb3Agb3ZlclwiKTtcbiAgICB9XG4gICAgcHVzaChjYWRkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgaiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgaWYgKGlzTmFOKGopKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaChjYWRkZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIGsgPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChpc05hTihrKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHJlbWVtYmVyIGNvbnRlbnRzIG9mIHRoZSBpbmRleFxuICAgIC8vIHZhcmlhYmxlIHNvIHdlIGNhbiBwdXQgaXQgYmFjayBhZnRlciB0aGUgbG9vcFxuICAgIHA0ID0gZ2V0X2JpbmRpbmcobG9vcGluZ1ZhcmlhYmxlKTtcbiAgICBmb3IgKGkgPSBvID0gcmVmID0gaiwgcmVmMSA9IGs7IChyZWYgPD0gcmVmMSA/IG8gPD0gcmVmMSA6IG8gPj0gcmVmMSk7IGkgPSByZWYgPD0gcmVmMSA/ICsrbyA6IC0tbykge1xuICAgICAgcHVzaF9pbnRlZ2VyKGkpO1xuICAgICAgcDUgPSBwb3AoKTtcbiAgICAgIHNldF9iaW5kaW5nKGxvb3BpbmdWYXJpYWJsZSwgcDUpO1xuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBwb3AoKTtcbiAgICB9XG4gICAgLy8gcHV0IGJhY2sgdGhlIGluZGV4IHZhcmlhYmxlIHRvIG9yaWdpbmFsIGNvbnRlbnRcbiAgICBzZXRfYmluZGluZyhsb29waW5nVmFyaWFibGUsIHA0KTtcbiAgICAvLyByZXR1cm4gdmFsdWVcbiAgICByZXR1cm4gcHVzaF9zeW1ib2woTklMKTtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIEF1dGhvciA6IHBoaWxpcHBlLmJpbGxldEBub29zLmZyXG5cbiAgLy8gIEdhbW1hIGZ1bmN0aW9uIGdhbW1hKHgpXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBFdmFsX2dhbW1hID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBnYW1tYSgpO1xuICB9O1xuXG4gIGdhbW1hID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIGdhbW1hZigpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgZ2FtbWFmID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gIGRvdWJsZSBkXG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNyYXRpb25hbChwMSkgJiYgTUVRVUFMKHAxLnEuYSwgMSkgJiYgTUVRVUFMKHAxLnEuYiwgMikpIHtcbiAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoX3N5bWJvbChQSSk7XG4gICAgICB9XG4gICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzcmF0aW9uYWwocDEpICYmIE1FUVVBTChwMS5xLmEsIDMpICYmIE1FUVVBTChwMS5xLmIsIDIpKSB7XG4gICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKE1hdGguUEkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaF9zeW1ib2woUEkpO1xuICAgICAgfVxuICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8gIGlmIChwMS0+ayA9PSBET1VCTEUpIHtcbiAgICAvLyAgICBkID0gZXhwKGxnYW1tYShwMS5kKSlcbiAgICAvLyAgICBwdXNoX2RvdWJsZShkKVxuICAgIC8vICAgIHJldHVyblxuICAgIC8vICB9XG4gICAgaWYgKGlzbmVnYXRpdmV0ZXJtKHAxKSkge1xuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgIH1cbiAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgIH1cbiAgICAgIHB1c2gocDEpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHNpbmUoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICBnYW1tYSgpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIGRpdmlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIGdhbW1hX29mX3N1bSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoX3N5bWJvbChHQU1NQSk7XG4gICAgcHVzaChwMSk7XG4gICAgbGlzdCgyKTtcbiAgfTtcblxuICBnYW1tYV9vZl9zdW0gPSBmdW5jdGlvbigpIHtcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgaWYgKGlzcmF0aW9uYWwoY2FyKHAzKSkgJiYgTUVRVUFMKGNhcihwMykucS5hLCAxKSAmJiBNRVFVQUwoY2FyKHAzKS5xLmIsIDEpKSB7XG4gICAgICBwdXNoKGNhZHIocDMpKTtcbiAgICAgIHB1c2goY2FkcihwMykpO1xuICAgICAgZ2FtbWEoKTtcbiAgICAgIHJldHVybiBtdWx0aXBseSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNyYXRpb25hbChjYXIocDMpKSAmJiBNRVFVQUwoY2FyKHAzKS5xLmEsIC0xKSAmJiBNRVFVQUwoY2FyKHAzKS5xLmIsIDEpKSB7XG4gICAgICAgIHB1c2goY2FkcihwMykpO1xuICAgICAgICBnYW1tYSgpO1xuICAgICAgICBwdXNoKGNhZHIocDMpKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHJldHVybiBkaXZpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfc3ltYm9sKEdBTU1BKTtcbiAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIGxpc3QoMik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIEdyZWF0ZXN0IGNvbW1vbiBkZW5vbWluYXRvclxuICAvLyBjYW4gYWxzbyBiZSBydW4gb24gcG9seW5vbWlhbHMsIGhvd2V2ZXJcbiAgLy8gaXQgd29ya3Mgb25seSBvbiB0aGUgaW50ZWdlcnMgYW5kIGl0IHdvcmtzXG4gIC8vIGJ5IGZhY3RvcmluZyB0aGUgcG9seW5vbWlhbHMgKG5vdCBFdWNsaWRlYW4gYWxnb3JpdGhtKVxuICBFdmFsX2djZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgRXZhbCgpO1xuICAgICAgZ2NkKCk7XG4gICAgICByZXN1bHRzLnB1c2gocDEgPSBjZHIocDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgZ2NkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByZXZfZXhwYW5kaW5nO1xuICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgIHNhdmUoKTtcbiAgICBnY2RfbWFpbigpO1xuICAgIHJlc3RvcmUoKTtcbiAgICByZXR1cm4gZXhwYW5kaW5nID0gcHJldl9leHBhbmRpbmc7XG4gIH07XG5cbiAgZ2NkX21haW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcG9seVZhcjtcbiAgICBleHBhbmRpbmcgPSAxO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoZXF1YWwocDEsIHAyKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc3JhdGlvbmFsKHAxKSAmJiBpc3JhdGlvbmFsKHAyKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGdjZF9udW1iZXJzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgocG9seVZhciA9IGFyZXVuaXZhcnBvbHlzZmFjdG9yZWRvcmV4cGFuZGVkZm9ybShwMSwgcDIpKSkge1xuICAgICAgZ2NkX3BvbHlzKHBvbHlWYXIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFERCkgJiYgY2FyKHAyKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIGdjZF9zdW1fc3VtKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woQUREKSkge1xuICAgICAgZ2NkX3N1bShwMSk7XG4gICAgICBwMSA9IHBvcCgpO1xuICAgIH1cbiAgICBpZiAoY2FyKHAyKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIGdjZF9zdW0ocDIpO1xuICAgICAgcDIgPSBwb3AoKTtcbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgIGdjZF9zdW1fcHJvZHVjdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FyKHAyKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgZ2NkX3Byb2R1Y3Rfc3VtKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpICYmIGNhcihwMikgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgIGdjZF9wcm9kdWN0X3Byb2R1Y3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGdjZF9wb3dlcnNfd2l0aF9zYW1lX2Jhc2UoKTtcbiAgfTtcblxuICBhcmV1bml2YXJwb2x5c2ZhY3RvcmVkb3JleHBhbmRlZGZvcm0gPSBmdW5jdGlvbihwMSwgcDIpIHtcbiAgICB2YXIgcG9seVZhcjtcbiAgICBpZiAocG9seVZhciA9IGlzdW5pdmFycG9seWZhY3RvcmVkb3JleHBhbmRlZGZvcm0ocDEpKSB7XG4gICAgICBpZiAoaXN1bml2YXJwb2x5ZmFjdG9yZWRvcmV4cGFuZGVkZm9ybShwMiwgcG9seVZhcikpIHtcbiAgICAgICAgcmV0dXJuIHBvbHlWYXI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBnY2RfcG9seXMgPSBmdW5jdGlvbihwb2x5VmFyKSB7XG4gICAgLy8gZ2NkIG9mIGZhY3RvcnNcbiAgICBwdXNoKHAxKTtcbiAgICBwdXNoKHBvbHlWYXIpO1xuICAgIGZhY3RvcnBvbHkoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHB1c2gocDIpO1xuICAgIHB1c2gocG9seVZhcik7XG4gICAgZmFjdG9ycG9seSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImZhY3RvcmVkIHBvbHlzOlwiKTtcbiAgICB9XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInAxOlwiICsgcDEudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJwMjpcIiArIHAyLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICAvLyBJbiBjYXNlIG9uZSBvZiB0d28gcG9seW5vbWlhbHMgY2FuIGJlIGZhY3RvcmVkLFxuICAgIC8vIChhbmQgb25seSBpbiB0aGF0IGNhc2UpLCB0aGVuXG4gICAgLy8gd2UnbGwgbmVlZCB0byBydW4gZ2NkX2ZhY3RvcnMgb24gdGhlIHR3byBwb2x5bm9taWFscy5cbiAgICAvLyAoSW4gY2FzZSBuZWl0aGVyIG9mIHRoZW0gY2FuIGJlIGZhY3RvcmVkIHRoZXJlIGlzIG5vIGdjZCkuXG4gICAgLy8gSG93ZXZlciwgZ2NkX2ZhY3RvcnMgZXhwZWN0cyB0d28gX3Byb2R1Y3RzXyAsIGFuZFxuICAgIC8vIGluIGNhc2UgX29uZV8gb2YgdGhlIHBvbHlub21pYWxzIGNhbid0IGJlIGZhY3RvcmVkIGl0IHdpbGwgbG9va1xuICAgIC8vIGxpa2UgYSBzdW0gaW5zdGVhZCBvZiBhIHByb2R1Y3QuXG4gICAgLy8gU28sIHdlJ2xsIGhhdmUgdG8gbWFrZSB0aGF0IHN1bSB0byBsb29rIGxpa2UgYSBmYWN0b3I6XG4gICAgLy8gbGV0J3MganVzdCB0dXJuIGl0IGludG8gYSBwcm9kdWN0IHdpdGggMS5cblxuICAgIC8vIGluIGNhc2Ugb25lIG9mIHRoZSB0d28gcG9seXMgaGFzIGJlZW4gZmFjdG9yZWQuLi5cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKE1VTFRJUExZKSB8fCBjYXIocDIpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICAvLyB0aGVuIG1ha2Ugc3VyZSB0aGF0IGlmIG9uZSBvZiB0aGVtIGlzIGEgc2luZ2xlXG4gICAgICAvLyBmYWN0b3IsIHdlIHRha2UgdGhlIHN1bSBhbmQgd3JhcCBpdCBpbnRvIGFcbiAgICAgIC8vIG11bHRpcGxpY2F0aW9uIGJ5IDFcbiAgICAgIGlmIChjYXIocDEpICE9PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICAgIHB1c2hfc3ltYm9sKE1VTFRJUExZKTtcbiAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIHB1c2gob25lKTtcbiAgICAgICAgbGlzdCgzKTtcbiAgICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYXIocDIpICE9PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICAgIHB1c2hfc3ltYm9sKE1VTFRJUExZKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIHB1c2gob25lKTtcbiAgICAgICAgbGlzdCgzKTtcbiAgICAgICAgcDIgPSBwb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgY2FyKHAyKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgZ2NkX3Byb2R1Y3RfcHJvZHVjdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBnY2RfcG93ZXJzX3dpdGhfc2FtZV9iYXNlKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgZ2NkX3Byb2R1Y3RfcHJvZHVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIHB1c2gob25lKTtcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIHdoaWxlIChpc2NvbnMocDMpKSB7XG4gICAgICBwNCA9IGNkcihwMik7XG4gICAgICB3aGlsZSAoaXNjb25zKHA0KSkge1xuICAgICAgICBwdXNoKGNhcihwMykpO1xuICAgICAgICBwdXNoKGNhcihwNCkpO1xuICAgICAgICBnY2QoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgcDQgPSBjZHIocDQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0cy5wdXNoKHAzID0gY2RyKHAzKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIGdjZF9wb3dlcnNfd2l0aF9zYW1lX2Jhc2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFBPV0VSKSkge1xuICAgICAgcDMgPSBjYWRkcihwMSk7IC8vIGV4cG9uZW50XG4gICAgICBwMSA9IGNhZHIocDEpOyAvLyBiYXNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHAzID0gb25lO1xuICAgIH1cbiAgICBpZiAoY2FyKHAyKSA9PT0gc3ltYm9sKFBPV0VSKSkge1xuICAgICAgcDQgPSBjYWRkcihwMik7IC8vIGV4cG9uZW50XG4gICAgICBwMiA9IGNhZHIocDIpOyAvLyBiYXNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHA0ID0gb25lO1xuICAgIH1cbiAgICBpZiAoIWVxdWFsKHAxLCBwMikpIHtcbiAgICAgIHB1c2gob25lKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYXJlIGJvdGggZXhwb25lbnRzIG51bWVyaWNhbD9cbiAgICBpZiAoaXNOdW1lcmljQXRvbShwMykgJiYgaXNOdW1lcmljQXRvbShwNCkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgaWYgKGxlc3NwKHAzLCBwNCkpIHtcbiAgICAgICAgcHVzaChwMyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHA0KTtcbiAgICAgIH1cbiAgICAgIHBvd2VyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFyZSB0aGUgZXhwb25lbnRzIG11bHRpcGxlcyBvZiBlYWggb3RoZXI/XG4gICAgcHVzaChwMyk7XG4gICAgcHVzaChwNCk7XG4gICAgZGl2aWRlKCk7XG4gICAgcDUgPSBwb3AoKTtcbiAgICBpZiAoaXNOdW1lcmljQXRvbShwNSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgLy8gY2hvb3NlIHRoZSBzbWFsbGVzdCBleHBvbmVudFxuICAgICAgaWYgKGNhcihwMykgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgaXNOdW1lcmljQXRvbShjYWRyKHAzKSkpIHtcbiAgICAgICAgcDUgPSBjYWRyKHAzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHA1ID0gb25lO1xuICAgICAgfVxuICAgICAgaWYgKGNhcihwNCkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgaXNOdW1lcmljQXRvbShjYWRyKHA0KSkpIHtcbiAgICAgICAgcDYgPSBjYWRyKHA0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHA2ID0gb25lO1xuICAgICAgfVxuICAgICAgaWYgKGxlc3NwKHA1LCBwNikpIHtcbiAgICAgICAgcHVzaChwMyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHA0KTtcbiAgICAgIH1cbiAgICAgIHBvd2VyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocDMpO1xuICAgIHB1c2gocDQpO1xuICAgIHN1YnRyYWN0KCk7XG4gICAgcDUgPSBwb3AoKTtcbiAgICBpZiAoIWlzTnVtZXJpY0F0b20ocDUpKSB7XG4gICAgICBwdXNoKG9uZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGNhbid0IGJlIGVxdWFsIGJlY2F1c2Ugb2YgdGVzdCBuZWFyIGJlZ2lubmluZ1xuICAgIHB1c2gocDEpO1xuICAgIGlmIChpc25lZ2F0aXZlbnVtYmVyKHA1KSkge1xuICAgICAgcHVzaChwMyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDQpO1xuICAgIH1cbiAgICByZXR1cm4gcG93ZXIoKTtcbiAgfTtcblxuICAvLyBpbiB0aGlzIGNhc2UgZ2NkIGlzIHVzZWQgYXMgYSBjb21wb3NpdGUgZnVuY3Rpb24sIGkuZS4gZ2NkKGdjZChnY2QuLi5cbiAgZ2NkX3N1bV9zdW0gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAobGVuZ3RoKHAxKSAhPT0gbGVuZ3RoKHAyKSkge1xuICAgICAgcHVzaChvbmUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwMyA9IGNkcihwMSk7XG4gICAgcHVzaChjYXIocDMpKTtcbiAgICBwMyA9IGNkcihwMyk7XG4gICAgd2hpbGUgKGlzY29ucyhwMykpIHtcbiAgICAgIHB1c2goY2FyKHAzKSk7XG4gICAgICBnY2QoKTtcbiAgICAgIHAzID0gY2RyKHAzKTtcbiAgICB9XG4gICAgcDMgPSBwb3AoKTtcbiAgICBwNCA9IGNkcihwMik7XG4gICAgcHVzaChjYXIocDQpKTtcbiAgICBwNCA9IGNkcihwNCk7XG4gICAgd2hpbGUgKGlzY29ucyhwNCkpIHtcbiAgICAgIHB1c2goY2FyKHA0KSk7XG4gICAgICBnY2QoKTtcbiAgICAgIHA0ID0gY2RyKHA0KTtcbiAgICB9XG4gICAgcDQgPSBwb3AoKTtcbiAgICBwdXNoKHAxKTtcbiAgICBwdXNoKHAzKTtcbiAgICBkaXZpZGUoKTtcbiAgICBwNSA9IHBvcCgpO1xuICAgIHB1c2gocDIpO1xuICAgIHB1c2gocDQpO1xuICAgIGRpdmlkZSgpO1xuICAgIHA2ID0gcG9wKCk7XG4gICAgaWYgKGVxdWFsKHA1LCBwNikpIHtcbiAgICAgIHB1c2gocDUpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBwdXNoKHA0KTtcbiAgICAgIGdjZCgpO1xuICAgICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoKG9uZSk7XG4gICAgfVxuICB9O1xuXG4gIGdjZF9zdW0gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIHJlc3VsdHM7XG4gICAgcCA9IGNkcihwKTtcbiAgICBwdXNoKGNhcihwKSk7XG4gICAgcCA9IGNkcihwKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgcHVzaChjYXIocCkpO1xuICAgICAgZ2NkKCk7XG4gICAgICByZXN1bHRzLnB1c2gocCA9IGNkcihwKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIGdjZF9zdW1fcHJvZHVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIHB1c2gob25lKTtcbiAgICBwMyA9IGNkcihwMSk7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIHdoaWxlIChpc2NvbnMocDMpKSB7XG4gICAgICBwdXNoKGNhcihwMykpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBnY2QoKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICByZXN1bHRzLnB1c2gocDMgPSBjZHIocDMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgZ2NkX3Byb2R1Y3Rfc3VtID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdHM7XG4gICAgcHVzaChvbmUpO1xuICAgIHA0ID0gY2RyKHAyKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKGlzY29ucyhwNCkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChjYXIocDQpKTtcbiAgICAgIGdjZCgpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHJlc3VsdHMucHVzaChwNCA9IGNkcihwNCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBHdWVzcyB3aGljaCBzeW1ib2wgdG8gdXNlIGZvciBkZXJpdmF0aXZlLCBpbnRlZ3JhbCwgZXRjLlxuICBndWVzcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwO1xuICAgIHAgPSBwb3AoKTtcbiAgICBwdXNoKHApO1xuICAgIGlmIChGaW5kKHAsIHN5bWJvbChTWU1CT0xfWCkpKSB7XG4gICAgICByZXR1cm4gcHVzaF9zeW1ib2woU1lNQk9MX1gpO1xuICAgIH0gZWxzZSBpZiAoRmluZChwLCBzeW1ib2woU1lNQk9MX1kpKSkge1xuICAgICAgcmV0dXJuIHB1c2hfc3ltYm9sKFNZTUJPTF9ZKTtcbiAgICB9IGVsc2UgaWYgKEZpbmQocCwgc3ltYm9sKFNZTUJPTF9aKSkpIHtcbiAgICAgIHJldHVybiBwdXNoX3N5bWJvbChTWU1CT0xfWik7XG4gICAgfSBlbHNlIGlmIChGaW5kKHAsIHN5bWJvbChTWU1CT0xfVCkpKSB7XG4gICAgICByZXR1cm4gcHVzaF9zeW1ib2woU1lNQk9MX1QpO1xuICAgIH0gZWxzZSBpZiAoRmluZChwLCBzeW1ib2woU1lNQk9MX1MpKSkge1xuICAgICAgcmV0dXJuIHB1c2hfc3ltYm9sKFNZTUJPTF9TKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHB1c2hfc3ltYm9sKFNZTUJPTF9YKTtcbiAgICB9XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBIZXJtaXRlIHBvbHlub21pYWxcblxuICAvLyAgSW5wdXQ6ICAgIHRvcy0yICAgIHggIChjYW4gYmUgYSBzeW1ib2wgb3IgZXhwcilcblxuICAvLyAgICAgIHRvcy0xICAgIG5cblxuICAvLyAgT3V0cHV0OiAgICBSZXN1bHQgb24gc3RhY2tcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGhlcm1pdGUgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgeXloZXJtaXRlKCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyB1c2VzIHRoZSByZWN1cnJlbmNlIHJlbGF0aW9uIEgoeCxuKzEpPTIqeCpIKHgsbiktMipuKkgoeCxuLTEpXG5cbiAgLy9kZWZpbmUgWCBwMVxuICAvL2RlZmluZSBOIHAyXG4gIC8vZGVmaW5lIFkgcDNcbiAgLy9kZWZpbmUgWTEgcDRcbiAgLy9kZWZpbmUgWTAgcDVcbiAgeXloZXJtaXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG47XG4gICAgbiA9IDA7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHB1c2gocDIpO1xuICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChuIDwgMCB8fCBpc05hTihuKSkge1xuICAgICAgcHVzaF9zeW1ib2woSEVSTUlURSk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbGlzdCgzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzc3ltYm9sKHAxKSkge1xuICAgICAgcmV0dXJuIHl5aGVybWl0ZTIobik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHAzID0gcDE7XG4gICAgICBwMSA9IHN5bWJvbChTRUNSRVRYKTtcbiAgICAgIHl5aGVybWl0ZTIobik7XG4gICAgICBwMSA9IHAzO1xuICAgICAgcHVzaChzeW1ib2woU0VDUkVUWCkpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBzdWJzdCgpO1xuICAgICAgcmV0dXJuIEV2YWwoKTtcbiAgICB9XG4gIH07XG5cbiAgeXloZXJtaXRlMiA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgaSwgbywgcmVmLCByZXN1bHRzO1xuICAgIGkgPSAwO1xuICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgcDQgPSBwb3AoKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBwNSA9IHA0O1xuICAgICAgcDQgPSBwb3AoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwNCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcHVzaF9pbnRlZ2VyKGkpO1xuICAgICAgcHVzaChwNSk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgc3VidHJhY3QoKTtcbiAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgIHJlc3VsdHMucHVzaChtdWx0aXBseSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBDcmVhdGUgYSBIaWxiZXJ0IG1hdHJpeFxuXG4gIC8vICBJbnB1dDogICAgRGltZW5zaW9uIG9uIHN0YWNrXG5cbiAgLy8gIE91dHB1dDogICAgSGlsYmVydCBtYXRyaXggb24gc3RhY2tcblxuICAvLyAgRXhhbXBsZTpcblxuICAvLyAgPiBoaWxiZXJ0KDUpXG4gIC8vICAoKDEsMS8yLDEvMywxLzQpLCgxLzIsMS8zLDEvNCwxLzUpLCgxLzMsMS80LDEvNSwxLzYpLCgxLzQsMS81LDEvNiwxLzcpKVxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvL2RlZmluZSBBIHAxXG4gIC8vZGVmaW5lIE4gcDJcblxuICAvL2RlZmluZSBBRUxFTShpLCBqKSBBLT51LnRlbnNvci0+ZWxlbVtpICogbiArIGpdXG4gIGhpbGJlcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaTEsIGosIG4sIG8sIHJlZiwgcmVmMTtcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBuID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwdXNoKHAyKTtcbiAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAobiA8IDIpIHtcbiAgICAgIHB1c2hfc3ltYm9sKEhJTEJFUlQpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBsaXN0KDIpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoX3plcm9fbWF0cml4KG4sIG4pO1xuICAgIHAxID0gcG9wKCk7XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBmb3IgKGogPSBpMSA9IDAsIHJlZjEgPSBuOyAoMCA8PSByZWYxID8gaTEgPCByZWYxIDogaTEgPiByZWYxKTsgaiA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgIHB1c2hfaW50ZWdlcihpICsgaiArIDEpO1xuICAgICAgICBpbnZlcnNlKCk7XG4gICAgICAgIHAxLnRlbnNvci5lbGVtW2kgKiBuICsgal0gPSBwb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBERUJVR19JTUFHID0gZmFsc2U7XG5cbiAgRXZhbF9pbWFnID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBpbWFnKCk7XG4gIH07XG5cbiAgaW1hZyA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICByZWN0KCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoREVCVUdfSU1BRykge1xuICAgICAgY29uc29sZS5sb2coXCJJTUFHRSBvZiBcIiArIHAxKTtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMSk7XG4gICAgY29uanVnYXRlKCk7XG4gICAgaWYgKERFQlVHX0lNQUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiIGltYWdlOiBjb25qdWdhdGUgcmVzdWx0OiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICB9XG4gICAgc3VidHJhY3QoKTtcbiAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgZGl2aWRlKCk7XG4gICAgaWYgKERFQlVHX0lNQUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiIGltYWdlOiAxc3QgZGl2aWRlIHJlc3VsdDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgZGl2aWRlKCk7XG4gICAgaWYgKERFQlVHX0lNQUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiIGltYWdlOiAybmQgZGl2aWRlIHJlc3VsdDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gbiBpcyB0aGUgdG90YWwgbnVtYmVyIG9mIHRoaW5ncyBvbiB0aGUgc3RhY2suIFRoZSBmaXJzdCB0aGluZyBvbiB0aGUgc3RhY2tcbiAgLy8gaXMgdGhlIG9iamVjdCB0byBiZSBpbmRleGVkLCBmb2xsb3dlZCBieSB0aGUgaW5kaWNlcyB0aGVtc2VsdmVzLlxuXG4gIC8vIGNhbGxlZCBieSBFdmFsX2luZGV4XG4gIGluZGV4X2Z1bmN0aW9uID0gZnVuY3Rpb24obikge1xuICAgIHZhciBpLCBpMSwgajEsIGssIGwxLCBtLCBtMSwgbmRpbSwgbmVsZW0sIG8sIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNiwgcmVmNywgcywgdDtcbiAgICBpID0gMDtcbiAgICBrID0gMDtcbiAgICBtID0gMDtcbiAgICBuZGltID0gMDtcbiAgICBuZWxlbSA9IDA7XG4gICAgdCA9IDA7XG4gICAgc2F2ZSgpO1xuICAgIHMgPSB0b3MgLSBuO1xuICAgIHAxID0gc3RhY2tbc107XG4gICAgbmRpbSA9IHAxLnRlbnNvci5uZGltO1xuICAgIG0gPSBuIC0gMTtcbiAgICBpZiAobSA+IG5kaW0pIHtcbiAgICAgIHN0b3AoXCJ0b28gbWFueSBpbmRpY2VzIGZvciB0ZW5zb3JcIik7XG4gICAgfVxuICAgIGsgPSAwO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBtOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcHVzaChzdGFja1tzICsgaSArIDFdKTtcbiAgICAgIHQgPSBwb3BfaW50ZWdlcigpO1xuICAgICAgaWYgKHQgPCAxIHx8IHQgPiBwMS50ZW5zb3IuZGltW2ldKSB7XG4gICAgICAgIHN0b3AoXCJpbmRleCBvdXQgb2YgcmFuZ2VcIik7XG4gICAgICB9XG4gICAgICBrID0gayAqIHAxLnRlbnNvci5kaW1baV0gKyB0IC0gMTtcbiAgICB9XG4gICAgaWYgKG5kaW0gPT09IG0pIHtcbiAgICAgIG1vdmVUb3ModG9zIC0gbik7XG4gICAgICBwdXNoKHAxLnRlbnNvci5lbGVtW2tdKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChpID0gaTEgPSByZWYxID0gbSwgcmVmMiA9IG5kaW07IChyZWYxIDw9IHJlZjIgPyBpMSA8IHJlZjIgOiBpMSA+IHJlZjIpOyBpID0gcmVmMSA8PSByZWYyID8gKytpMSA6IC0taTEpIHtcbiAgICAgIGsgPSBrICogcDEudGVuc29yLmRpbVtpXSArIDA7XG4gICAgfVxuICAgIG5lbGVtID0gMTtcbiAgICBmb3IgKGkgPSBqMSA9IHJlZjMgPSBtLCByZWY0ID0gbmRpbTsgKHJlZjMgPD0gcmVmNCA/IGoxIDwgcmVmNCA6IGoxID4gcmVmNCk7IGkgPSByZWYzIDw9IHJlZjQgPyArK2oxIDogLS1qMSkge1xuICAgICAgbmVsZW0gKj0gcDEudGVuc29yLmRpbVtpXTtcbiAgICB9XG4gICAgcDIgPSBhbGxvY190ZW5zb3IobmVsZW0pO1xuICAgIHAyLnRlbnNvci5uZGltID0gbmRpbSAtIG07XG4gICAgZm9yIChpID0gbDEgPSByZWY1ID0gbSwgcmVmNiA9IG5kaW07IChyZWY1IDw9IHJlZjYgPyBsMSA8IHJlZjYgOiBsMSA+IHJlZjYpOyBpID0gcmVmNSA8PSByZWY2ID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAyLnRlbnNvci5kaW1baSAtIG1dID0gcDEudGVuc29yLmRpbVtpXTtcbiAgICB9XG4gICAgZm9yIChpID0gbTEgPSAwLCByZWY3ID0gbmVsZW07ICgwIDw9IHJlZjcgPyBtMSA8IHJlZjcgOiBtMSA+IHJlZjcpOyBpID0gMCA8PSByZWY3ID8gKyttMSA6IC0tbTEpIHtcbiAgICAgIHAyLnRlbnNvci5lbGVtW2ldID0gcDEudGVuc29yLmVsZW1bayArIGldO1xuICAgIH1cbiAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMSk7XG4gICAgY2hlY2tfdGVuc29yX2RpbWVuc2lvbnMocDIpO1xuICAgIG1vdmVUb3ModG9zIC0gbik7XG4gICAgcHVzaChwMik7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIElucHV0OiAgICBuICAgIE51bWJlciBvZiBhcmdzIG9uIHN0YWNrXG5cbiAgLy8gICAgICB0b3MtbiAgICBSaWdodC1oYW5kIHZhbHVlXG5cbiAgLy8gICAgICB0b3MtbisxICAgIExlZnQtaGFuZCB2YWx1ZVxuXG4gIC8vICAgICAgdG9zLW4rMiAgICBGaXJzdCBpbmRleFxuXG4gIC8vICAgICAgLlxuICAvLyAgICAgIC5cbiAgLy8gICAgICAuXG5cbiAgLy8gICAgICB0b3MtMSAgICBMYXN0IGluZGV4XG5cbiAgLy8gIE91dHB1dDogICAgUmVzdWx0IG9uIHN0YWNrXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vZGVmaW5lIExWQUxVRSBwMVxuICAvL2RlZmluZSBSVkFMVUUgcDJcbiAgLy9kZWZpbmUgVE1QIHAzXG4gIHNldF9jb21wb25lbnQgPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGksIGkxLCBqMSwgaywgbDEsIG0sIG0xLCBuMSwgbmRpbSwgbywgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZWY2LCBzLCB0O1xuICAgIGkgPSAwO1xuICAgIGsgPSAwO1xuICAgIG0gPSAwO1xuICAgIG5kaW0gPSAwO1xuICAgIHQgPSAwO1xuICAgIHNhdmUoKTtcbiAgICBpZiAobiA8IDMpIHtcbiAgICAgIHN0b3AoXCJlcnJvciBpbiBpbmRleGVkIGFzc2lnblwiKTtcbiAgICB9XG4gICAgcyA9IHRvcyAtIG47XG4gICAgcDIgPSBzdGFja1tzXTtcbiAgICBwMSA9IHN0YWNrW3MgKyAxXTtcbiAgICBpZiAoIWlzdGVuc29yKHAxKSkgeyAvLyBwMSBpcyBMVkFMVUVcbiAgICAgIHN0b3AoXCJlcnJvciBpbiBpbmRleGVkIGFzc2lnbjogYXNzaWduaW5nIHRvIHNvbWV0aGluZyB0aGF0IGlzIG5vdCBhIHRlbnNvclwiKTtcbiAgICB9XG4gICAgbmRpbSA9IHAxLnRlbnNvci5uZGltO1xuICAgIG0gPSBuIC0gMjtcbiAgICBpZiAobSA+IG5kaW0pIHtcbiAgICAgIHN0b3AoXCJlcnJvciBpbiBpbmRleGVkIGFzc2lnblwiKTtcbiAgICB9XG4gICAgayA9IDA7XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG07ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBwdXNoKHN0YWNrW3MgKyBpICsgMl0pO1xuICAgICAgdCA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgICBpZiAodCA8IDEgfHwgdCA+IHAxLnRlbnNvci5kaW1baV0pIHtcbiAgICAgICAgc3RvcChcImVycm9yIGluIGluZGV4ZWQgYXNzaWduXFxuXCIpO1xuICAgICAgfVxuICAgICAgayA9IGsgKiBwMS50ZW5zb3IuZGltW2ldICsgdCAtIDE7XG4gICAgfVxuICAgIGZvciAoaSA9IGkxID0gcmVmMSA9IG0sIHJlZjIgPSBuZGltOyAocmVmMSA8PSByZWYyID8gaTEgPCByZWYyIDogaTEgPiByZWYyKTsgaSA9IHJlZjEgPD0gcmVmMiA/ICsraTEgOiAtLWkxKSB7XG4gICAgICBrID0gayAqIHAxLnRlbnNvci5kaW1baV0gKyAwO1xuICAgIH1cbiAgICAvLyBjb3B5XG4gICAgcDMgPSBhbGxvY190ZW5zb3IocDEudGVuc29yLm5lbGVtKTtcbiAgICBwMy50ZW5zb3IubmRpbSA9IHAxLnRlbnNvci5uZGltO1xuICAgIGZvciAoaSA9IGoxID0gMCwgcmVmMyA9IHAxLnRlbnNvci5uZGltOyAoMCA8PSByZWYzID8gajEgPCByZWYzIDogajEgPiByZWYzKTsgaSA9IDAgPD0gcmVmMyA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBwMy50ZW5zb3IuZGltW2ldID0gcDEudGVuc29yLmRpbVtpXTtcbiAgICB9XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWY0ID0gcDEudGVuc29yLm5lbGVtOyAoMCA8PSByZWY0ID8gbDEgPCByZWY0IDogbDEgPiByZWY0KTsgaSA9IDAgPD0gcmVmNCA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwMy50ZW5zb3IuZWxlbVtpXSA9IHAxLnRlbnNvci5lbGVtW2ldO1xuICAgIH1cbiAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMSk7XG4gICAgY2hlY2tfdGVuc29yX2RpbWVuc2lvbnMocDMpO1xuICAgIHAxID0gcDM7XG4gICAgaWYgKG5kaW0gPT09IG0pIHtcbiAgICAgIGlmIChpc3RlbnNvcihwMikpIHsgLy8gcDIgaXMgUlZBTFVFXG4gICAgICAgIHN0b3AoXCJlcnJvciBpbiBpbmRleGVkIGFzc2lnblwiKTtcbiAgICAgIH1cbiAgICAgIHAxLnRlbnNvci5lbGVtW2tdID0gcDI7XG4gICAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMSk7XG4gICAgICBtb3ZlVG9zKHRvcyAtIG4pO1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXN0ZW5zb3IocDIpKSB7IC8vIHAyIGlzIFJWQUxVRVxuICAgICAgc3RvcChcImVycm9yIGluIGluZGV4ZWQgYXNzaWduXCIpO1xuICAgIH1cbiAgICBpZiAobmRpbSAtIG0gIT09IHAyLnRlbnNvci5uZGltKSB7IC8vIHAyIGlzIFJWQUxVRVxuICAgICAgc3RvcChcImVycm9yIGluIGluZGV4ZWQgYXNzaWduXCIpO1xuICAgIH1cbi8vIHAyIGlzIFJWQUxVRVxuICAgIGZvciAoaSA9IG0xID0gMCwgcmVmNSA9IHAyLnRlbnNvci5uZGltOyAoMCA8PSByZWY1ID8gbTEgPCByZWY1IDogbTEgPiByZWY1KTsgaSA9IDAgPD0gcmVmNSA/ICsrbTEgOiAtLW0xKSB7XG4gICAgICBpZiAocDEudGVuc29yLmRpbVttICsgaV0gIT09IHAyLnRlbnNvci5kaW1baV0pIHtcbiAgICAgICAgc3RvcChcImVycm9yIGluIGluZGV4ZWQgYXNzaWduXCIpO1xuICAgICAgfVxuICAgIH1cbi8vIHAyIGlzIFJWQUxVRVxuLy8gY29weSBydmFsdWVcbiAgICBmb3IgKGkgPSBuMSA9IDAsIHJlZjYgPSBwMi50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjYgPyBuMSA8IHJlZjYgOiBuMSA+IHJlZjYpOyBpID0gMCA8PSByZWY2ID8gKytuMSA6IC0tbjEpIHtcbiAgICAgIHAxLnRlbnNvci5lbGVtW2sgKyBpXSA9IHAyLnRlbnNvci5lbGVtW2ldO1xuICAgIH1cbiAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMSk7XG4gICAgY2hlY2tfdGVuc29yX2RpbWVuc2lvbnMocDIpO1xuICAgIG1vdmVUb3ModG9zIC0gbik7XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBFdmFsX2lubmVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpZmZlcmVuY2UsIGksIGkxLCBqMSwgbDEsIG1vcmV0aGVBcmd1bWVudHMsIG8sIG9wZXJhbmRzLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZmluZWRPcGVyYW5kcywgcmVzdWx0cywgc2Vjb25kQXJndW1lbnQsIHNoaWZ0LCB0aGVBcmd1bWVudHM7XG4gICAgXG4gICAgLy8gaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiB0d28gYXJndW1lbnRzIHRoZW5cbiAgICAvLyByZWR1Y2UgaXQgdG8gYSBtb3JlIHN0YW5kYXJkIHZlcnNpb25cbiAgICAvLyBvZiB0d28gYXJndW1lbnRzLCB3aGljaCBtZWFucyB3ZSBuZWVkIHRvXG4gICAgLy8gdHJhbnNmb3JtIHRoZSBhcmd1bWVudHMgaW50byBhIHRyZWUgb2ZcbiAgICAvLyBpbm5lciBwcm9kdWN0cyBlLmcuXG4gICAgLy8gaW5uZXIoYSxiLGMpIGJlY29tZXMgaW5uZXIoYSxpbm5lcihiLGMpKVxuICAgIC8vIHRoaXMgaXMgc28gd2UgY2FuIGdldCB0byBhIHN0YW5kYXJkIGJpbmFyeS10cmVlXG4gICAgLy8gdmVyc2lvbiB0aGF0IGlzIHNpbXBsZXIgdG8gbWFuaXB1bGF0ZS5cbiAgICB0aGVBcmd1bWVudHMgPSBbXTtcbiAgICB0aGVBcmd1bWVudHMucHVzaChjYXIoY2RyKHAxKSkpO1xuICAgIHNlY29uZEFyZ3VtZW50ID0gY2FyKGNkcihjZHIocDEpKSk7XG4gICAgaWYgKHNlY29uZEFyZ3VtZW50ID09PSBzeW1ib2woTklMKSkge1xuICAgICAgc3RvcChcInBhdHRlcm4gbmVlZHMgYXQgbGVhc3QgYSB0ZW1wbGF0ZSBhbmQgYSB0cmFuc2Zvcm1lZCB2ZXJzaW9uXCIpO1xuICAgIH1cbiAgICBtb3JldGhlQXJndW1lbnRzID0gY2RyKGNkcihwMSkpO1xuICAgIHdoaWxlIChtb3JldGhlQXJndW1lbnRzICE9PSBzeW1ib2woTklMKSkge1xuICAgICAgdGhlQXJndW1lbnRzLnB1c2goY2FyKG1vcmV0aGVBcmd1bWVudHMpKTtcbiAgICAgIG1vcmV0aGVBcmd1bWVudHMgPSBjZHIobW9yZXRoZUFyZ3VtZW50cyk7XG4gICAgfVxuICAgIC8vIG1ha2UgaXQgc28gZS5nLiBpbm5lcihhLGIsYykgYmVjb21lcyBpbm5lcihhLGlubmVyKGIsYykpXG4gICAgaWYgKHRoZUFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICBwdXNoX3N5bWJvbChJTk5FUik7XG4gICAgICBwdXNoKHRoZUFyZ3VtZW50c1t0aGVBcmd1bWVudHMubGVuZ3RoIC0gMl0pO1xuICAgICAgcHVzaCh0aGVBcmd1bWVudHNbdGhlQXJndW1lbnRzLmxlbmd0aCAtIDFdKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICBmb3IgKGkgPSBvID0gMiwgcmVmID0gdGhlQXJndW1lbnRzLmxlbmd0aDsgKDIgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMiA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgICAgcHVzaF9zeW1ib2woSU5ORVIpO1xuICAgICAgICBzd2FwKCk7XG4gICAgICAgIHB1c2godGhlQXJndW1lbnRzW3RoZUFyZ3VtZW50cy5sZW5ndGggLSBpIC0gMV0pO1xuICAgICAgICBzd2FwKCk7XG4gICAgICAgIGxpc3QoMyk7XG4gICAgICB9XG4gICAgICBwMSA9IHBvcCgpO1xuICAgICAgRXZhbF9pbm5lcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBUT0RPIHdlIGhhdmUgdG8gdGFrZSBhIGxvb2sgYXQgdGhlIHdob2xlXG4gICAgLy8gc2VxdWVuY2Ugb2Ygb3BlcmFuZHMgYW5kIG1ha2Ugc2ltcGxpZmljYXRpb25zXG4gICAgLy8gb24gdGhhdC4uLlxuICAgIG9wZXJhbmRzID0gW107XG4gICAgZ2V0X2lubmVycHJvZF9mYWN0b3JzKHAxLCBvcGVyYW5kcyk7XG4gICAgLy9jb25zb2xlLmxvZyBcInByaW50aW5nIG9wZXJhbmRzIC0tLS0tLS0tXCJcbiAgICAvL2ZvciBpIGluIFswLi4ub3BlcmFuZHMubGVuZ3RoXVxuICAgIC8vICBjb25zb2xlLmxvZyBcIm9wZXJhbmQgXCIgKyBpICsgXCIgOiBcIiArIG9wZXJhbmRzW2ldXG4gICAgcmVmaW5lZE9wZXJhbmRzID0gW107XG4vLyByZW1vdmluZyBhbGwgaWRlbnRpdHkgbWF0cmljZXNcbiAgICBmb3IgKGkgPSBpMSA9IDAsIHJlZjEgPSBvcGVyYW5kcy5sZW5ndGg7ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgIGlmIChvcGVyYW5kc1tpXSA9PT0gc3ltYm9sKFNZTUJPTF9JREVOVElUWV9NQVRSSVgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVmaW5lZE9wZXJhbmRzLnB1c2gob3BlcmFuZHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBvcGVyYW5kcyA9IHJlZmluZWRPcGVyYW5kcztcbiAgICByZWZpbmVkT3BlcmFuZHMgPSBbXTtcbiAgICBpZiAob3BlcmFuZHMubGVuZ3RoID4gMSkge1xuICAgICAgLy8gcmVtb3ZpbmcgYWxsIGNvbnNlY3V0aXZlIHBhaXJzIG9mIGludmVyc2VzXG4gICAgICAvLyBzbyB3ZSBjYW4gYW5zd2VyIHRoYXQgaW52KGEpwrdhIHJlc3VsdHMgaW4gdGhlXG4gICAgICAvLyBpZGVudGl0eSBtYXRyaXguIFdlIHdhbnQgdG8gY2F0Y2ggc3ltYm9saWMgaW52ZXJzZXNcbiAgICAgIC8vIG5vdCBudW1lcmljIGludmVyc2VzLCB0aG9zZSB3aWxsIGp1c3QgdGFrZSBjYXJlXG4gICAgICAvLyBvZiB0aGVtc2VsdmVzIHdoZW4gbXVsdGlwbGllZFxuICAgICAgc2hpZnQgPSAwO1xuICAgICAgZm9yIChpID0gajEgPSAwLCByZWYyID0gb3BlcmFuZHMubGVuZ3RoOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2cgXCJjb21wYXJpbmcgaWYgXCIgKyBvcGVyYW5kc1tpK3NoaWZ0XSArIFwiIGFuZCBcIiArIG9wZXJhbmRzW2krc2hpZnQrMV0gKyBcIiBhcmUgaW52ZXJzZXMgb2YgZWFjaCBvdGhlclwiXG4gICAgICAgIGlmICgoaSArIHNoaWZ0ICsgMSkgPD0gKG9wZXJhbmRzLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgaWYgKCEoaXNOdW1lcmljQXRvbU9yVGVuc29yKG9wZXJhbmRzW2kgKyBzaGlmdF0pIHx8IGlzTnVtZXJpY0F0b21PclRlbnNvcihvcGVyYW5kc1tpICsgc2hpZnQgKyAxXSkpKSB7XG4gICAgICAgICAgICBwdXNoKG9wZXJhbmRzW2kgKyBzaGlmdF0pO1xuICAgICAgICAgICAgRXZhbCgpO1xuICAgICAgICAgICAgaW52KCk7XG4gICAgICAgICAgICBwdXNoKG9wZXJhbmRzW2kgKyBzaGlmdCArIDFdKTtcbiAgICAgICAgICAgIEV2YWwoKTtcbiAgICAgICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgICAgICBkaWZmZXJlbmNlID0gcG9wKCk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nIFwicmVzdWx0OiBcIiArIGRpZmZlcmVuY2VcbiAgICAgICAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoZGlmZmVyZW5jZSkpIHtcbiAgICAgICAgICAgICAgc2hpZnQgKz0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlZmluZWRPcGVyYW5kcy5wdXNoKG9wZXJhbmRzW2kgKyBzaGlmdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWZpbmVkT3BlcmFuZHMucHVzaChvcGVyYW5kc1tpICsgc2hpZnRdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyBcImk6IFwiICsgaSArIFwiIHNoaWZ0OiBcIiArIHNoaWZ0ICsgXCIgb3BlcmFuZHMubGVuZ3RoOiBcIiArIG9wZXJhbmRzLmxlbmd0aFxuICAgICAgICBpZiAoaSArIHNoaWZ0ID09PSBvcGVyYW5kcy5sZW5ndGggLSAyKSB7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyBcImFkZGluZyBsYXN0IG9wZXJhbmQgMiBcIlxuICAgICAgICAgIHJlZmluZWRPcGVyYW5kcy5wdXNoKG9wZXJhbmRzW29wZXJhbmRzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSArIHNoaWZ0ID49IG9wZXJhbmRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3BlcmFuZHMgPSByZWZpbmVkT3BlcmFuZHM7XG4gICAgfVxuICAgIC8vY29uc29sZS5sb2cgXCJyZWZpbmVkIG9wZXJhbmRzIC0tLS0tLS0tXCJcbiAgICAvL2ZvciBpIGluIFswLi4ucmVmaW5lZE9wZXJhbmRzLmxlbmd0aF1cbiAgICAvLyAgY29uc29sZS5sb2cgXCJyZWZpbmVkIG9wZXJhbmQgXCIgKyBpICsgXCIgOiBcIiArIHJlZmluZWRPcGVyYW5kc1tpXVxuXG4gICAgLy9jb25zb2xlLmxvZyBcInN0YWNrW3Rvcy0xXTogXCIgKyBzdGFja1t0b3MtMV1cblxuICAgIC8vIG5vdyByZWJ1aWxkIHRoZSBhcmd1bWVudHMsIGp1c3QgdXNpbmcgdGhlXG4gICAgLy8gcmVmaW5lZCBvcGVyYW5kc1xuICAgIHB1c2goc3ltYm9sKElOTkVSKSk7XG4gICAgLy9jb25zb2xlLmxvZyBcInJlYnVpbGRpbmcgdGhlIGFyZ3VtZW50IC0tLS1cIlxuICAgIGlmIChvcGVyYW5kcy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjMgPSBvcGVyYW5kcy5sZW5ndGg7ICgwIDw9IHJlZjMgPyBsMSA8IHJlZjMgOiBsMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKytsMSA6IC0tbDEpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyBcInB1c2hpbmcgXCIgKyBvcGVyYW5kc1tpXVxuICAgICAgICBwdXNoKG9wZXJhbmRzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcG9wKCk7XG4gICAgICBwdXNoKHN5bWJvbChTWU1CT0xfSURFTlRJVFlfTUFUUklYKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vY29uc29sZS5sb2cgXCJsaXN0KG9wZXJhbmRzLmxlbmd0aCk6IFwiICsgKG9wZXJhbmRzLmxlbmd0aCsxKVxuICAgIGxpc3Qob3BlcmFuZHMubGVuZ3RoICsgMSk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgcHVzaChjYXIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIGlubmVyKCk7XG4gICAgICByZXN1bHRzLnB1c2gocDEgPSBjZHIocDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gaW5uZXIgZGVmaW5pdGlvblxuICBpbm5lciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmcxLCBhcmcyLCBhcmczLCBzdWJ0cmFjdGlvblJlc3VsdDtcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIC8vIG1vcmUgaW4gZ2VuZXJhbCwgd2hlbiBhIGFuZCBiIGFyZSBzY2FsYXJzLFxuICAgIC8vIGlubmVyKGEqTTEsIGIqTTIpIGlzIGVxdWFsIHRvXG4gICAgLy8gYSpiKmlubmVyKE0xLE0yKSwgYnV0IG9mIGNvdXJzZSB3ZSBjYW4gb25seVxuICAgIC8vIFwiYnJpbmcgb3V0XCIgaW4gYSBhbmQgYiB0aGUgc2NhbGFycywgYmVjYXVzZVxuICAgIC8vIGl0J3MgdGhlIG9ubHkgY29tbXV0YXRpdmUgcGFydC5cbiAgICAvLyB0aGF0J3MgZ29pbmcgdG8gYmUgdHJpY2tpZXIgdG8gZG8gaW4gZ2VuZXJhbFxuICAgIC8vIGJ1dCBsZXQncyBzdGFydCB3aXRoIGp1c3QgdGhlIHNpZ25zLlxuICAgIGlmIChpc25lZ2F0aXZldGVybShwMikgJiYgaXNuZWdhdGl2ZXRlcm0ocDEpKSB7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIG5lZ2F0ZSgpO1xuICAgICAgcDIgPSBwb3AoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICBwMSA9IHBvcCgpO1xuICAgIH1cbiAgICAvLyBzaW5jZSBpbm5lciBpcyBhc3NvY2lhdGl2ZSxcbiAgICAvLyBwdXQgaXQgaW4gYSBjYW5vbmljYWwgZm9ybSBpLmUuXG4gICAgLy8gaW5uZXIoaW5uZXIoYSxiKSxjKSAtPlxuICAgIC8vIGlubmVyKGEsaW5uZXIoYixjKSlcbiAgICAvLyBzbyB0aGF0IHdlIGNhbiByZWNvZ25pc2Ugd2hlbiB0aGV5XG4gICAgLy8gYXJlIGVxdWFsLlxuICAgIGlmIChpc2lubmVyb3Jkb3QocDEpKSB7XG4gICAgICBhcmcxID0gY2FyKGNkcihwMSkpOyAvL2FcbiAgICAgIGFyZzIgPSBjYXIoY2RyKGNkcihwMSkpKTsgLy9iXG4gICAgICBhcmczID0gcDI7XG4gICAgICBwMSA9IGFyZzE7XG4gICAgICBwdXNoKGFyZzIpO1xuICAgICAgcHVzaChhcmczKTtcbiAgICAgIGlubmVyKCk7XG4gICAgICBwMiA9IHBvcCgpO1xuICAgIH1cbiAgICAvLyBDaGVjayBpZiBvbmUgb2YgdGhlIG9wZXJhbmRzIGlzIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAgICAvLyB3ZSBjb3VsZCBtYXliZSB1c2UgRXZhbF90ZXN0ZXEgaGVyZSBidXRcbiAgICAvLyB0aGlzIHNlZW1zIHRvIHN1ZmZpY2U/XG4gICAgaWYgKHAxID09PSBzeW1ib2woU1lNQk9MX0lERU5USVRZX01BVFJJWCkpIHtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocDIgPT09IHN5bWJvbChTWU1CT0xfSURFTlRJVFlfTUFUUklYKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc3RlbnNvcihwMSkgJiYgaXN0ZW5zb3IocDIpKSB7XG4gICAgICBpbm5lcl9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKGlzTnVtZXJpY0F0b21PclRlbnNvcihwMSkgfHwgaXNOdW1lcmljQXRvbU9yVGVuc29yKHAyKSkpIHtcbiAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIHB1c2gocDIpO1xuICAgICAgICBpbnYoKTtcbiAgICAgICAgc3VidHJhY3QoKTtcbiAgICAgICAgc3VidHJhY3Rpb25SZXN1bHQgPSBwb3AoKTtcbiAgICAgICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihzdWJ0cmFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgICBwdXNoX3N5bWJvbChTWU1CT0xfSURFTlRJVFlfTUFUUklYKTtcbiAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBpZiBlaXRoZXIgb3BlcmFuZCBpcyBhIHN1bSB0aGVuIGRpc3RyaWJ1dGVcbiAgICAgIC8vIChpZiB3ZSBhcmUgaW4gZXhwYW5kaW5nIG1vZGUpXG4gICAgICBpZiAoZXhwYW5kaW5nICYmIGlzYWRkKHAxKSkge1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICAgIHB1c2goemVybyk7XG4gICAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgICBwdXNoKHAyKTtcbiAgICAgICAgICBpbm5lcigpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChleHBhbmRpbmcgJiYgaXNhZGQocDIpKSB7XG4gICAgICAgIHAyID0gY2RyKHAyKTtcbiAgICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgICAgd2hpbGUgKGlzY29ucyhwMikpIHtcbiAgICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgICBwdXNoKGNhcihwMikpO1xuICAgICAgICAgIGlubmVyKCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgcDIgPSBjZHIocDIpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIC8vIHRoZXJlIGFyZSA4IHJlbWFpbmluZyBjYXNlcyBoZXJlLCBzaW5jZSBlYWNoIG9mIHRoZVxuICAgICAgLy8gdHdvIGFyZ3VtZW50cyBjYW4gb25seSBiZSBhIHNjYWxhci90ZW5zb3IvdW5rbm93blxuICAgICAgLy8gYW5kIHRoZSB0ZW5zb3IgLSB0ZW5zb3IgY2FzZSB3YXMgY2F1Z2h0XG4gICAgICAvLyB1cHBlciBpbiB0aGUgY29kZVxuICAgICAgaWYgKGlzdGVuc29yKHAxKSAmJiBpc051bWVyaWNBdG9tKHAyKSkge1xuICAgICAgICAvLyBvbmUgY2FzZSBjb3ZlcmVkIGJ5IHRoaXMgYnJhbmNoOlxuICAgICAgICAvLyAgIHRlbnNvciAtIHNjYWxhclxuICAgICAgICB0ZW5zb3JfdGltZXNfc2NhbGFyKCk7XG4gICAgICB9IGVsc2UgaWYgKGlzTnVtZXJpY0F0b20ocDEpICYmIGlzdGVuc29yKHAyKSkge1xuICAgICAgICAvLyBvbmUgY2FzZSBjb3ZlcmVkIGJ5IHRoaXMgYnJhbmNoOlxuICAgICAgICAvLyAgIHNjYWxhciAtIHRlbnNvclxuICAgICAgICBzY2FsYXJfdGltZXNfdGVuc29yKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNOdW1lcmljQXRvbShwMSkgfHwgaXNOdW1lcmljQXRvbShwMikpIHtcbiAgICAgICAgICAvLyB0aHJlZSBjYXNlcyBjb3ZlcmVkIGJ5IHRoaXMgYnJhbmNoOlxuICAgICAgICAgIC8vICAgdW5rbm93biAtIHNjYWxhclxuICAgICAgICAgIC8vICAgc2NhbGFyIC0gdW5rbm93blxuICAgICAgICAgIC8vICAgc2NhbGFyICAtIHNjYWxhclxuICAgICAgICAgIC8vIGluIHRoZXNlIGNhc2VzIGEgbm9ybWFsIG11bHRpcGxpY2F0aW9uXG4gICAgICAgICAgLy8gd2lsbCBiZSBPS1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdGhyZWUgY2FzZXMgY292ZXJlZCBieSB0aGlzIGJyYW5jaDpcbiAgICAgICAgICAvLyAgIHVua25vd24gLSB1bmtub3duXG4gICAgICAgICAgLy8gICB1bmtub3duIC0gdGVuc29yXG4gICAgICAgICAgLy8gICB0ZW5zb3IgIC0gdW5rbm93blxuICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSB3ZSBjYW4ndCB1c2Ugbm9ybWFsXG4gICAgICAgICAgLy8gbXVsdGlwbGljYXRpb24uXG4gICAgICAgICAgcG9wKCk7XG4gICAgICAgICAgcG9wKCk7XG4gICAgICAgICAgcHVzaF9zeW1ib2woSU5ORVIpO1xuICAgICAgICAgIHB1c2gocDEpO1xuICAgICAgICAgIHB1c2gocDIpO1xuICAgICAgICAgIGxpc3QoMyk7XG4gICAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIGlubmVyIHByb2R1Y3Qgb2YgdGVuc29ycyBwMSBhbmQgcDJcbiAgaW5uZXJfZiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBhaywgYiwgYmssIGMsIGksIGkxLCBqLCBqMSwgaywgbDEsIG0xLCBuLCBuMSwgbmRpbSwgbywgbzEsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNjtcbiAgICBpID0gMDtcbiAgICBuID0gcDEudGVuc29yLmRpbVtwMS50ZW5zb3IubmRpbSAtIDFdO1xuICAgIGlmIChuICE9PSBwMi50ZW5zb3IuZGltWzBdKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICAgIHN0b3AoXCJpbm5lcjogdGVuc29yIGRpbWVuc2lvbiBjaGVja1wiKTtcbiAgICB9XG4gICAgbmRpbSA9IHAxLnRlbnNvci5uZGltICsgcDIudGVuc29yLm5kaW0gLSAyO1xuICAgIGlmIChuZGltID4gTUFYRElNKSB7XG4gICAgICBzdG9wKFwiaW5uZXI6IHJhbmsgb2YgcmVzdWx0IGV4Y2VlZHMgbWF4aW11bVwiKTtcbiAgICB9XG4gICAgYSA9IHAxLnRlbnNvci5lbGVtO1xuICAgIGIgPSBwMi50ZW5zb3IuZWxlbTtcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gIGFrIGlzIHRoZSBudW1iZXIgb2Ygcm93cyBpbiB0ZW5zb3IgQVxuXG4gICAgLy8gIGJrIGlzIHRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0ZW5zb3IgQlxuXG4gICAgLy8gIEV4YW1wbGU6XG5cbiAgICAvLyAgQVszXVszXVs0XSBCWzRdWzRdWzNdXG5cbiAgICAvLyAgICAzICAzICAgICAgICBhayA9IDMgKiAzID0gOVxuXG4gICAgLy8gICAgICAgICAgICAgICAgICA0ICAzICAgIGJrID0gNCAqIDMgPSAxMlxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhayA9IDE7XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IHAxLnRlbnNvci5uZGltIC0gMTsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgIGFrICo9IHAxLnRlbnNvci5kaW1baV07XG4gICAgfVxuICAgIGJrID0gMTtcbiAgICBmb3IgKGkgPSBpMSA9IDEsIHJlZjEgPSBwMi50ZW5zb3IubmRpbTsgKDEgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGkgPSAxIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgYmsgKj0gcDIudGVuc29yLmRpbVtpXTtcbiAgICB9XG4gICAgcDMgPSBhbGxvY190ZW5zb3IoYWsgKiBiayk7XG4gICAgYyA9IHAzLnRlbnNvci5lbGVtO1xuLy8gbmV3IG1ldGhvZCBjb3BpZWQgZnJvbSBnaW5hYyBodHRwOi8vd3d3LmdpbmFjLmRlL1xuICAgIGZvciAoaSA9IGoxID0gMCwgcmVmMiA9IGFrOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBmb3IgKGogPSBsMSA9IDAsIHJlZjMgPSBuOyAoMCA8PSByZWYzID8gbDEgPCByZWYzIDogbDEgPiByZWYzKTsgaiA9IDAgPD0gcmVmMyA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoYVtpICogbiArIGpdKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoayA9IG0xID0gMCwgcmVmNCA9IGJrOyAoMCA8PSByZWY0ID8gbTEgPCByZWY0IDogbTEgPiByZWY0KTsgayA9IDAgPD0gcmVmNCA/ICsrbTEgOiAtLW0xKSB7XG4gICAgICAgICAgcHVzaChhW2kgKiBuICsgal0pO1xuICAgICAgICAgIHB1c2goYltqICogYmsgKyBrXSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoKGNbaSAqIGJrICsga10pO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIGNbaSAqIGJrICsga10gPSBwb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gIE5vdGUgb24gdW5kZXJzdGFuZGluZyBcImsgKiBiayArIGpcIlxuXG4gICAgLy8gIGsgKiBiayBiZWNhdXNlIGVhY2ggZWxlbWVudCBvZiBhIGNvbHVtbiBpcyBiayBsb2NhdGlvbnMgYXBhcnRcblxuICAgIC8vICArIGogYmVjYXVzZSB0aGUgYmVnaW5uaW5ncyBvZiBhbGwgY29sdW1ucyBhcmUgaW4gdGhlIGZpcnN0IGJrIFxuICAgIC8vICBsb2NhdGlvbnNcblxuICAgIC8vICBFeGFtcGxlOiBuID0gMiwgYmsgPSA2XG5cbiAgICAvLyAgYjExMSAgPC0gMXN0IGVsZW1lbnQgb2YgMXN0IGNvbHVtblxuICAgIC8vICBiMTEyICA8LSAxc3QgZWxlbWVudCBvZiAybmQgY29sdW1uXG4gICAgLy8gIGIxMTMgIDwtIDFzdCBlbGVtZW50IG9mIDNyZCBjb2x1bW5cbiAgICAvLyAgYjEyMSAgPC0gMXN0IGVsZW1lbnQgb2YgNHRoIGNvbHVtblxuICAgIC8vICBiMTIyICA8LSAxc3QgZWxlbWVudCBvZiA1dGggY29sdW1uXG4gICAgLy8gIGIxMjMgIDwtIDFzdCBlbGVtZW50IG9mIDZ0aCBjb2x1bW5cblxuICAgIC8vICBiMjExICA8LSAybmQgZWxlbWVudCBvZiAxc3QgY29sdW1uXG4gICAgLy8gIGIyMTIgIDwtIDJuZCBlbGVtZW50IG9mIDJuZCBjb2x1bW5cbiAgICAvLyAgYjIxMyAgPC0gMm5kIGVsZW1lbnQgb2YgM3JkIGNvbHVtblxuICAgIC8vICBiMjIxICA8LSAybmQgZWxlbWVudCBvZiA0dGggY29sdW1uXG4gICAgLy8gIGIyMjIgIDwtIDJuZCBlbGVtZW50IG9mIDV0aCBjb2x1bW5cbiAgICAvLyAgYjIyMyAgPC0gMm5kIGVsZW1lbnQgb2YgNnRoIGNvbHVtblxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBpZiAobmRpbSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHB1c2gocDMudGVuc29yLmVsZW1bMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwMy50ZW5zb3IubmRpbSA9IG5kaW07XG4gICAgICBqID0gMDtcbiAgICAgIGZvciAoaSA9IG4xID0gMCwgcmVmNSA9IHAxLnRlbnNvci5uZGltIC0gMTsgKDAgPD0gcmVmNSA/IG4xIDwgcmVmNSA6IG4xID4gcmVmNSk7IGkgPSAwIDw9IHJlZjUgPyArK24xIDogLS1uMSkge1xuICAgICAgICBwMy50ZW5zb3IuZGltW2ldID0gcDEudGVuc29yLmRpbVtpXTtcbiAgICAgIH1cbiAgICAgIGogPSBwMS50ZW5zb3IubmRpbSAtIDE7XG4gICAgICBmb3IgKGkgPSBvMSA9IDAsIHJlZjYgPSBwMi50ZW5zb3IubmRpbSAtIDE7ICgwIDw9IHJlZjYgPyBvMSA8IHJlZjYgOiBvMSA+IHJlZjYpOyBpID0gMCA8PSByZWY2ID8gKytvMSA6IC0tbzEpIHtcbiAgICAgICAgcDMudGVuc29yLmRpbVtqICsgaV0gPSBwMi50ZW5zb3IuZGltW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwdXNoKHAzKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQWxnZWJyaXRlLnJ1bignY8K3KGIrYSnhtYDCt2ludigoYStiKeG1gCnCt2QnKS50b1N0cmluZygpO1xuICAvLyBBbGdlYnJpdGUucnVuKCdjKihiK2Ep4bWAwrdpbnYoKGErYinhtYApwrdkJykudG9TdHJpbmcoKTtcbiAgLy8gQWxnZWJyaXRlLnJ1bignKGPCtyhiK2Ep4bWAKcK3KGludigoYStiKeG1gCnCt2QpJykudG9TdHJpbmcoKTtcbiAgZ2V0X2lubmVycHJvZF9mYWN0b3JzID0gZnVuY3Rpb24odHJlZSwgZmFjdG9yc19hY2N1bXVsYXRvcikge1xuICAgIGlmICghaXNjb25zKHRyZWUpKSB7XG4gICAgICBhZGRfZmFjdG9yX3RvX2FjY3VtdWxhdG9yKHRyZWUsIGZhY3RvcnNfYWNjdW11bGF0b3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2RyKHRyZWUpID09PSBzeW1ib2woTklMKSkge1xuICAgICAgdHJlZSA9IGdldF9pbm5lcnByb2RfZmFjdG9ycyhjYXIodHJlZSksIGZhY3RvcnNfYWNjdW11bGF0b3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNpbm5lcm9yZG90KHRyZWUpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyBcInRoZXJlIGlzIGlubmVyIGF0IHRvcCwgcmVjdXJzaW5nIG9uIHRoZSBvcGVyYW5kc1wiXG4gICAgICBnZXRfaW5uZXJwcm9kX2ZhY3RvcnMoY2FyKGNkcih0cmVlKSksIGZhY3RvcnNfYWNjdW11bGF0b3IpO1xuICAgICAgZ2V0X2lubmVycHJvZF9mYWN0b3JzKGNkcihjZHIodHJlZSkpLCBmYWN0b3JzX2FjY3VtdWxhdG9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGFkZF9mYWN0b3JfdG9fYWNjdW11bGF0b3IodHJlZSwgZmFjdG9yc19hY2N1bXVsYXRvcik7XG4gIH07XG5cbiAgYWRkX2ZhY3Rvcl90b19hY2N1bXVsYXRvciA9IGZ1bmN0aW9uKHRyZWUsIGZhY3RvcnNfYWNjdW11bGF0b3IpIHtcbiAgICBpZiAodHJlZSAhPT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nIFwiPj4gYWRkaW5nIHRvIGZhY3RvcnNfYWNjdW11bGF0b3I6IFwiICsgdHJlZVxuICAgICAgcmV0dXJuIGZhY3RvcnNfYWNjdW11bGF0b3IucHVzaCh0cmVlKTtcbiAgICB9XG4gIH07XG5cbiAgaXRhYiA9IFtcbiAgICAvLyAxXG4gICAgXCJmKGEsYSp4KVwiLFxuICAgIC8vIDkgKG5lZWQgYSBjYXZlYXQgZm9yIDcgc28gd2UgY2FuIHB1dCA5IGFmdGVyIDcpXG4gICAgXCJmKDEveCxsb2coeCkpXCIsXG4gICAgLy8gN1xuICAgIFwiZih4XmEseF4oYSsxKS8oYSsxKSlcIixcbiAgICAvLyBmaXZlIHNwZWNpYWxpc2F0aW9ucyBvZiBjYXNlIDcgZm9yIHNwZWVkLlxuICAgIC8vIENvdmVycyBvZnRlbi1vY2N1cnJpbmcgZXhwb25lbnRzOiBlYWNoIG9mXG4gICAgLy8gdGhlc2UgY2FzZSBlbmRzIHVwIGluIGEgZGVkaWNhdGVkIGVudHJ5LCBzbyB3ZVxuICAgIC8vIG9ubHkgaGF2ZSB0byBkbyBvbmUgc3VyZS1zaG90IG1hdGNoLlxuICAgIFwiZih4XigtMiksLXheKC0xKSlcIixcbiAgICBcImYoeF4oLTEvMiksMip4XigxLzIpKVwiLFxuICAgIFwiZih4XigxLzIpLDIvMyp4XigzLzIpKVwiLFxuICAgIFwiZih4LHheMi8yKVwiLFxuICAgIFwiZih4XjIseF4zLzMpXCIsXG4gICAgLy8gMTJcbiAgICBcImYoZXhwKGEqeCksMS9hKmV4cChhKngpKVwiLFxuICAgIFwiZihleHAoYSp4K2IpLDEvYSpleHAoYSp4K2IpKVwiLFxuICAgIFwiZih4KmV4cChhKnheMiksZXhwKGEqeF4yKS8oMiphKSlcIixcbiAgICBcImYoeCpleHAoYSp4XjIrYiksZXhwKGEqeF4yK2IpLygyKmEpKVwiLFxuICAgIC8vIDE0XG4gICAgXCJmKGxvZyhhKngpLHgqbG9nKGEqeCkteClcIixcbiAgICAvLyAxNVxuICAgIFwiZihhXngsYV54L2xvZyhhKSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLFxuICAgIC8vIDE2XG4gICAgXCJmKDEvKGEreF4yKSwxL3NxcnQoYSkqYXJjdGFuKHgvc3FydChhKSksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIixcbiAgICAvLyAxN1xuICAgIFwiZigxLyhhLXheMiksMS9zcXJ0KGEpKmFyY3RhbmgoeC9zcXJ0KGEpKSlcIixcbiAgICAvLyAxOVxuICAgIFwiZigxL3NxcnQoYS14XjIpLGFyY3Npbih4LyhzcXJ0KGEpKSkpXCIsXG4gICAgLy8gMjBcbiAgICBcImYoMS9zcXJ0KGEreF4yKSxsb2coeCtzcXJ0KGEreF4yKSkpXCIsXG4gICAgLy8gMjdcbiAgICBcImYoMS8oYStiKngpLDEvYipsb2coYStiKngpKVwiLFxuICAgIC8vIDI4XG4gICAgXCJmKDEvKGErYip4KV4yLC0xLyhiKihhK2IqeCkpKVwiLFxuICAgIC8vIDI5XG4gICAgXCJmKDEvKGErYip4KV4zLC0xLygyKmIpKjEvKGErYip4KV4yKVwiLFxuICAgIC8vIDMwXG4gICAgXCJmKHgvKGErYip4KSx4L2ItYSpsb2coYStiKngpL2IvYilcIixcbiAgICAvLyAzMVxuICAgIFwiZih4LyhhK2IqeCleMiwxL2JeMioobG9nKGErYip4KSthLyhhK2IqeCkpKVwiLFxuICAgIC8vIDMzXG4gICAgXCJmKHheMi8oYStiKngpLDEvYl4yKigxLzIqKGErYip4KV4yLTIqYSooYStiKngpK2FeMipsb2coYStiKngpKSlcIixcbiAgICAvLyAzNFxuICAgIFwiZih4XjIvKGErYip4KV4yLDEvYl4zKihhK2IqeC0yKmEqbG9nKGErYip4KS1hXjIvKGErYip4KSkpXCIsXG4gICAgLy8gMzVcbiAgICBcImYoeF4yLyhhK2IqeCleMywxL2JeMyoobG9nKGErYip4KSsyKmEvKGErYip4KS0xLzIqYV4yLyhhK2IqeCleMikpXCIsXG4gICAgLy8gMzdcbiAgICBcImYoMS94KjEvKGErYip4KSwtMS9hKmxvZygoYStiKngpL3gpKVwiLFxuICAgIC8vIDM4XG4gICAgXCJmKDEveCoxLyhhK2IqeCleMiwxL2EqMS8oYStiKngpLTEvYV4yKmxvZygoYStiKngpL3gpKVwiLFxuICAgIC8vIDM5XG4gICAgXCJmKDEveCoxLyhhK2IqeCleMywxL2FeMyooMS8yKigoMiphK2IqeCkvKGErYip4KSleMitsb2coeC8oYStiKngpKSkpXCIsXG4gICAgLy8gNDBcbiAgICBcImYoMS94XjIqMS8oYStiKngpLC0xLyhhKngpK2IvYV4yKmxvZygoYStiKngpL3gpKVwiLFxuICAgIC8vIDQxXG4gICAgXCJmKDEveF4zKjEvKGErYip4KSwoMipiKngtYSkvKDIqYV4yKnheMikrYl4yL2FeMypsb2coeC8oYStiKngpKSlcIixcbiAgICAvLyA0MlxuICAgIFwiZigxL3heMioxLyhhK2IqeCleMiwtKGErMipiKngpLyhhXjIqeCooYStiKngpKSsyKmIvYV4zKmxvZygoYStiKngpL3gpKVwiLFxuICAgIC8vIDYwXG4gICAgXCJmKDEvKGErYip4XjIpLDEvc3FydChhKmIpKmFyY3Rhbih4KnNxcnQoYSpiKS9hKSxvcihub3QobnVtYmVyKGEqYikpLGEqYj4wKSlcIixcbiAgICAvLyA2MVxuICAgIFwiZigxLyhhK2IqeF4yKSwxLygyKnNxcnQoLWEqYikpKmxvZygoYSt4KnNxcnQoLWEqYikpLyhhLXgqc3FydCgtYSpiKSkpLG9yKG5vdChudW1iZXIoYSpiKSksYSpiPDApKVwiLFxuICAgIC8vIDYyIGlzIHRoZSBzYW1lIGFzIDYwXG4gICAgLy8gNjNcbiAgICBcImYoeC8oYStiKnheMiksMS8yKjEvYipsb2coYStiKnheMikpXCIsXG4gICAgLy82NFxuICAgIFwiZih4XjIvKGErYip4XjIpLHgvYi1hL2IqaW50ZWdyYWwoMS8oYStiKnheMikseCkpXCIsXG4gICAgLy82NVxuICAgIFwiZigxLyhhK2IqeF4yKV4yLHgvKDIqYSooYStiKnheMikpKzEvMioxL2EqaW50ZWdyYWwoMS8oYStiKnheMikseCkpXCIsXG4gICAgLy82NiBpcyBjb3ZlcmVkIGJ5IDYxXG4gICAgLy83MFxuICAgIFwiZigxL3gqMS8oYStiKnheMiksMS8yKjEvYSpsb2coeF4yLyhhK2IqeF4yKSkpXCIsXG4gICAgLy83MVxuICAgIFwiZigxL3heMioxLyhhK2IqeF4yKSwtMS8oYSp4KS1iL2EqaW50ZWdyYWwoMS8oYStiKnheMikseCkpXCIsXG4gICAgLy83NFxuICAgIFwiZigxLyhhK2IqeF4zKSwxLzMqMS9hKihhL2IpXigxLzMpKigxLzIqbG9nKCgoYS9iKV4oMS8zKSt4KV4zLyhhK2IqeF4zKSkrc3FydCgzKSphcmN0YW4oKDIqeC0oYS9iKV4oMS8zKSkqKGEvYileKC0xLzMpL3NxcnQoMykpKSlcIixcbiAgICAvLzc2XG4gICAgXCJmKHheMi8oYStiKnheMyksMS8zKjEvYipsb2coYStiKnheMykpXCIsXG4gICAgLy8gZmxvYXQoZGVmaW50KDEvKDIrMypYXjQpLFgsMCxwaSkpIGdhdmUgd3JvbmcgcmVzdWx0LlxuICAgIC8vIEFsc28sIHRoZSB0ZXN0cyByZWxhdGVkIHRvIHRoZSBpbmRlZmluaXRlIGludGVncmFsXG4gICAgLy8gZmFpbCBzaW5jZSB3ZSByYXRpb25hbGlzZSBleHByZXNzaW9ucyBcImJldHRlclwiLCBzbyBJJ20gdGhpbmtpbmdcbiAgICAvLyB0byB0YWtlIHRoaXMgb3V0IGNvbXBsZXRlbHkgYXMgaXQgc2VlbWVkIHRvIGdpdmUgdGhlXG4gICAgLy8gd3JvbmcgcmVzdWx0cyBpbiB0aGUgZmlyc3QgcGxhY2UuXG4gICAgLy83N1xuICAgIC8vXCJmKDEvKGErYip4XjQpLDEvMioxL2EqKGEvYi80KV4oMS80KSooMS8yKmxvZygoeF4yKzIqKGEvYi80KV4oMS80KSp4KzIqKGEvYi80KV4oMS8yKSkvKHheMi0yKihhL2IvNCleKDEvNCkqeCsyKihhL2IvNCleKDEvMikpKSthcmN0YW4oMiooYS9iLzQpXigxLzQpKngvKDIqKGEvYi80KV4oMS8yKS14XjIpKSksb3Iobm90KG51bWJlcihhKmIpKSxhKmI+MCkpXCIsXG4gICAgLy83OFxuICAgIC8vXCJmKDEvKGErYip4XjQpLDEvMiooLWEvYileKDEvNCkvYSooMS8yKmxvZygoeCsoLWEvYileKDEvNCkpLyh4LSgtYS9iKV4oMS80KSkpK2FyY3Rhbih4KigtYS9iKV4oLTEvNCkpKSxvcihub3QobnVtYmVyKGEqYikpLGEqYjwwKSlcIixcbiAgICAvLzc5XG4gICAgXCJmKHgvKGErYip4XjQpLDEvMipzcXJ0KGIvYSkvYiphcmN0YW4oeF4yKnNxcnQoYi9hKSksb3Iobm90KG51bWJlcihhKmIpKSxhKmI+MCkpXCIsXG4gICAgLy84MFxuICAgIFwiZih4LyhhK2IqeF40KSwxLzQqc3FydCgtYi9hKS9iKmxvZygoeF4yLXNxcnQoLWEvYikpLyh4XjIrc3FydCgtYS9iKSkpLG9yKG5vdChudW1iZXIoYSpiKSksYSpiPDApKVwiLFxuICAgIC8vIGZsb2F0KGRlZmludChYXjIvKDIrMypYXjQpLFgsMCxwaSkpIGdhdmUgd3JvbmcgcmVzdWx0LlxuICAgIC8vIEFsc28sIHRoZSB0ZXN0cyByZWxhdGVkIHRvIHRoZSBpbmRlZmluaXRlIGludGVncmFsXG4gICAgLy8gZmFpbCBzaW5jZSB3ZSByYXRpb25hbGlzZSBleHByZXNzaW9ucyBcImJldHRlclwiLCBzbyBJJ20gdGhpbmtpbmdcbiAgICAvLyB0byB0YWtlIHRoaXMgb3V0IGNvbXBsZXRlbHkgYXMgaXQgc2VlbWVkIHRvIGdpdmUgdGhlXG4gICAgLy8gd3JvbmcgcmVzdWx0cyBpbiB0aGUgZmlyc3QgcGxhY2UuXG4gICAgLy84MVxuICAgIC8vXCJmKHheMi8oYStiKnheNCksMS80KjEvYiooYS9iLzQpXigtMS80KSooMS8yKmxvZygoeF4yLTIqKGEvYi80KV4oMS80KSp4KzIqc3FydChhL2IvNCkpLyh4XjIrMiooYS9iLzQpXigxLzQpKngrMipzcXJ0KGEvYi80KSkpK2FyY3RhbigyKihhL2IvNCleKDEvNCkqeC8oMipzcXJ0KGEvYi80KS14XjIpKSksb3Iobm90KG51bWJlcihhKmIpKSxhKmI+MCkpXCIsXG4gICAgLy84MlxuICAgIC8vXCJmKHheMi8oYStiKnheNCksMS80KjEvYiooLWEvYileKC0xLzQpKihsb2coKHgtKC1hL2IpXigxLzQpKS8oeCsoLWEvYileKDEvNCkpKSsyKmFyY3Rhbih4KigtYS9iKV4oLTEvNCkpKSxvcihub3QobnVtYmVyKGEqYikpLGEqYjwwKSlcIixcbiAgICAvLzgzXG4gICAgXCJmKHheMy8oYStiKnheNCksMS80KjEvYipsb2coYStiKnheNCkpXCIsXG4gICAgLy8xMjRcbiAgICBcImYoc3FydChhK2IqeCksMi8zKjEvYipzcXJ0KChhK2IqeCleMykpXCIsXG4gICAgLy8xMjVcbiAgICBcImYoeCpzcXJ0KGErYip4KSwtMiooMiphLTMqYip4KSpzcXJ0KChhK2IqeCleMykvMTUvYl4yKVwiLFxuICAgIC8vMTI2XG4gICAgXCJmKHheMipzcXJ0KGErYip4KSwyKig4KmFeMi0xMiphKmIqeCsxNSpiXjIqeF4yKSpzcXJ0KChhK2IqeCleMykvMTA1L2JeMylcIixcbiAgICAvLzEyOFxuICAgIFwiZihzcXJ0KGErYip4KS94LDIqc3FydChhK2IqeCkrYSppbnRlZ3JhbCgxL3gqMS9zcXJ0KGErYip4KSx4KSlcIixcbiAgICAvLzEyOVxuICAgIFwiZihzcXJ0KGErYip4KS94XjIsLXNxcnQoYStiKngpL3grYi8yKmludGVncmFsKDEveCoxL3NxcnQoYStiKngpLHgpKVwiLFxuICAgIC8vMTMxXG4gICAgXCJmKDEvc3FydChhK2IqeCksMipzcXJ0KGErYip4KS9iKVwiLFxuICAgIC8vMTMyXG4gICAgXCJmKHgvc3FydChhK2IqeCksLTIvMyooMiphLWIqeCkqc3FydChhK2IqeCkvYl4yKVwiLFxuICAgIC8vMTMzXG4gICAgXCJmKHheMi9zcXJ0KGErYip4KSwyLzE1Kig4KmFeMi00KmEqYip4KzMqYl4yKnheMikqc3FydChhK2IqeCkvYl4zKVwiLFxuICAgIC8vMTM1XG4gICAgXCJmKDEveCoxL3NxcnQoYStiKngpLDEvc3FydChhKSpsb2coKHNxcnQoYStiKngpLXNxcnQoYSkpLyhzcXJ0KGErYip4KStzcXJ0KGEpKSksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIixcbiAgICAvLzEzNlxuICAgIFwiZigxL3gqMS9zcXJ0KGErYip4KSwyL3NxcnQoLWEpKmFyY3RhbihzcXJ0KC0oYStiKngpL2EpKSxvcihub3QobnVtYmVyKGEpKSxhPDApKVwiLFxuICAgIC8vMTM3XG4gICAgXCJmKDEveF4yKjEvc3FydChhK2IqeCksLXNxcnQoYStiKngpL2EveC0xLzIqYi9hKmludGVncmFsKDEveCoxL3NxcnQoYStiKngpLHgpKVwiLFxuICAgIC8vMTU2XG4gICAgXCJmKHNxcnQoeF4yK2EpLDEvMiooeCpzcXJ0KHheMithKSthKmxvZyh4K3NxcnQoeF4yK2EpKSkpXCIsXG4gICAgLy8xNTdcbiAgICBcImYoMS9zcXJ0KHheMithKSxsb2coeCtzcXJ0KHheMithKSkpXCIsXG4gICAgLy8xNThcbiAgICBcImYoMS94KjEvc3FydCh4XjIrYSksYXJjc2VjKHgvc3FydCgtYSkpL3NxcnQoLWEpLG9yKG5vdChudW1iZXIoYSkpLGE8MCkpXCIsXG4gICAgLy8xNTlcbiAgICBcImYoMS94KjEvc3FydCh4XjIrYSksLTEvc3FydChhKSpsb2coKHNxcnQoYSkrc3FydCh4XjIrYSkpL3gpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsXG4gICAgLy8xNjBcbiAgICBcImYoc3FydCh4XjIrYSkveCxzcXJ0KHheMithKS1zcXJ0KGEpKmxvZygoc3FydChhKStzcXJ0KHheMithKSkveCksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIixcbiAgICAvLzE2MVxuICAgIFwiZihzcXJ0KHheMithKS94LHNxcnQoeF4yK2EpLXNxcnQoLWEpKmFyY3NlYyh4L3NxcnQoLWEpKSxvcihub3QobnVtYmVyKGEpKSxhPDApKVwiLFxuICAgIC8vMTYyXG4gICAgXCJmKHgvc3FydCh4XjIrYSksc3FydCh4XjIrYSkpXCIsXG4gICAgLy8xNjNcbiAgICBcImYoeCpzcXJ0KHheMithKSwxLzMqc3FydCgoeF4yK2EpXjMpKVwiLFxuICAgIC8vMTY0IG5lZWQgYW4gdW5leHBhbmRlZCB2ZXJzaW9uP1xuICAgIFwiZihzcXJ0KGEreF42KzMqYV4oMS8zKSp4XjQrMyphXigyLzMpKnheMiksMS80Kih4KnNxcnQoKHheMithXigxLzMpKV4zKSszLzIqYV4oMS8zKSp4KnNxcnQoeF4yK2FeKDEvMykpKzMvMiphXigyLzMpKmxvZyh4K3NxcnQoeF4yK2FeKDEvMykpKSkpXCIsXG4gICAgLy8gbWF0Y2ggZG9lc24ndCB3b3JrIGZvciB0aGUgZm9sbG93aW5nXG4gICAgXCJmKHNxcnQoLWEreF42LTMqYV4oMS8zKSp4XjQrMyphXigyLzMpKnheMiksMS80Kih4KnNxcnQoKHheMi1hXigxLzMpKV4zKS0zLzIqYV4oMS8zKSp4KnNxcnQoeF4yLWFeKDEvMykpKzMvMiphXigyLzMpKmxvZyh4K3NxcnQoeF4yLWFeKDEvMykpKSkpXCIsXG4gICAgLy8xNjVcbiAgICBcImYoMS9zcXJ0KGEreF42KzMqYV4oMS8zKSp4XjQrMyphXigyLzMpKnheMikseC9hXigxLzMpL3NxcnQoeF4yK2FeKDEvMykpKVwiLFxuICAgIC8vMTY2XG4gICAgXCJmKHgvc3FydChhK3heNiszKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIpLC0xL3NxcnQoeF4yK2FeKDEvMykpKVwiLFxuICAgIC8vMTY3XG4gICAgXCJmKHgqc3FydChhK3heNiszKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIpLDEvNSpzcXJ0KCh4XjIrYV4oMS8zKSleNSkpXCIsXG4gICAgLy8xNjhcbiAgICBcImYoeF4yKnNxcnQoeF4yK2EpLDEvNCp4KnNxcnQoKHheMithKV4zKS0xLzgqYSp4KnNxcnQoeF4yK2EpLTEvOCphXjIqbG9nKHgrc3FydCh4XjIrYSkpKVwiLFxuICAgIC8vMTY5XG4gICAgXCJmKHheMypzcXJ0KHheMithKSwoMS81KnheMi0yLzE1KmEpKnNxcnQoKHheMithKV4zKSxhbmQobnVtYmVyKGEpLGE+MCkpXCIsXG4gICAgLy8xNzBcbiAgICBcImYoeF4zKnNxcnQoeF4yK2EpLHNxcnQoKHheMithKV41KS81LWEqc3FydCgoeF4yK2EpXjMpLzMsYW5kKG51bWJlcihhKSxhPDApKVwiLFxuICAgIC8vMTcxXG4gICAgXCJmKHheMi9zcXJ0KHheMithKSwxLzIqeCpzcXJ0KHheMithKS0xLzIqYSpsb2coeCtzcXJ0KHheMithKSkpXCIsXG4gICAgLy8xNzJcbiAgICBcImYoeF4zL3NxcnQoeF4yK2EpLDEvMypzcXJ0KCh4XjIrYSleMyktYSpzcXJ0KHheMithKSlcIixcbiAgICAvLzE3M1xuICAgIFwiZigxL3heMioxL3NxcnQoeF4yK2EpLC1zcXJ0KHheMithKS9hL3gpXCIsXG4gICAgLy8xNzRcbiAgICBcImYoMS94XjMqMS9zcXJ0KHheMithKSwtMS8yKnNxcnQoeF4yK2EpL2EveF4yKzEvMipsb2coKHNxcnQoYSkrc3FydCh4XjIrYSkpL3gpL2FeKDMvMiksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIixcbiAgICAvLzE3NVxuICAgIFwiZigxL3heMyoxL3NxcnQoeF4yLWEpLDEvMipzcXJ0KHheMi1hKS9hL3heMisxLzIqMS8oYV4oMy8yKSkqYXJjc2VjKHgvKGFeKDEvMikpKSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLFxuICAgIC8vMTc2K1xuICAgIFwiZih4XjIqc3FydChhK3heNiszKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIpLDEvNip4KnNxcnQoKHheMithXigxLzMpKV41KS0xLzI0KmFeKDEvMykqeCpzcXJ0KCh4XjIrYV4oMS8zKSleMyktMS8xNiphXigyLzMpKngqc3FydCh4XjIrYV4oMS8zKSktMS8xNiphKmxvZyh4K3NxcnQoeF4yK2FeKDEvMykpKSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLFxuICAgIC8vMTc2LVxuICAgIFwiZih4XjIqc3FydCgtYS0zKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIreF42KSwxLzYqeCpzcXJ0KCh4XjItYV4oMS8zKSleNSkrMS8yNCphXigxLzMpKngqc3FydCgoeF4yLWFeKDEvMykpXjMpLTEvMTYqYV4oMi8zKSp4KnNxcnQoeF4yLWFeKDEvMykpKzEvMTYqYSpsb2coeCtzcXJ0KHheMi1hXigxLzMpKSksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIixcbiAgICAvLzE3NytcbiAgICBcImYoeF4zKnNxcnQoYSt4XjYrMyphXigxLzMpKnheNCszKmFeKDIvMykqeF4yKSwxLzcqc3FydCgoeF4yK2FeKDEvMykpXjcpLTEvNSphXigxLzMpKnNxcnQoKHheMithXigxLzMpKV41KSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLFxuICAgIC8vMTc3LVxuICAgIFwiZih4XjMqc3FydCgtYS0zKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIreF42KSwxLzcqc3FydCgoeF4yLWFeKDEvMykpXjcpKzEvNSphXigxLzMpKnNxcnQoKHheMi1hXigxLzMpKV41KSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLFxuICAgIC8vMTk2XG4gICAgXCJmKDEvKHgtYSkvc3FydCh4XjItYV4yKSwtc3FydCh4XjItYV4yKS9hLyh4LWEpKVwiLFxuICAgIC8vMTk3XG4gICAgXCJmKDEvKHgrYSkvc3FydCh4XjItYV4yKSxzcXJ0KHheMi1hXjIpL2EvKHgrYSkpXCIsXG4gICAgLy8yMDArXG4gICAgXCJmKHNxcnQoYS14XjIpLDEvMiooeCpzcXJ0KGEteF4yKSthKmFyY3Npbih4L3NxcnQoYWJzKGEpKSkpKVwiLFxuICAgIC8vMjAxICAgIChzZWVtcyB0byBiZSBoYW5kbGVkIHNvbWV3aGVyZSBlbHNlKVxuICAgIC8vMjAyXG4gICAgXCJmKDEveCoxL3NxcnQoYS14XjIpLC0xL3NxcnQoYSkqbG9nKChzcXJ0KGEpK3NxcnQoYS14XjIpKS94KSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLFxuICAgIC8vMjAzXG4gICAgXCJmKHNxcnQoYS14XjIpL3gsc3FydChhLXheMiktc3FydChhKSpsb2coKHNxcnQoYSkrc3FydChhLXheMikpL3gpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsXG4gICAgLy8yMDRcbiAgICBcImYoeC9zcXJ0KGEteF4yKSwtc3FydChhLXheMikpXCIsXG4gICAgLy8yMDVcbiAgICBcImYoeCpzcXJ0KGEteF4yKSwtMS8zKnNxcnQoKGEteF4yKV4zKSlcIixcbiAgICAvLzIxMFxuICAgIFwiZih4XjIqc3FydChhLXheMiksLXgvNCpzcXJ0KChhLXheMileMykrMS84KmEqKHgqc3FydChhLXheMikrYSphcmNzaW4oeC9zcXJ0KGEpKSksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIixcbiAgICAvLzIxMVxuICAgIFwiZih4XjMqc3FydChhLXheMiksKC0xLzUqeF4yLTIvMTUqYSkqc3FydCgoYS14XjIpXjMpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsXG4gICAgLy8yMTRcbiAgICBcImYoeF4yL3NxcnQoYS14XjIpLC14LzIqc3FydChhLXheMikrYS8yKmFyY3Npbih4L3NxcnQoYSkpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsXG4gICAgLy8yMTVcbiAgICBcImYoMS94XjIqMS9zcXJ0KGEteF4yKSwtc3FydChhLXheMikvYS94LG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsXG4gICAgLy8yMTZcbiAgICBcImYoc3FydChhLXheMikveF4yLC1zcXJ0KGEteF4yKS94LWFyY3Npbih4L3NxcnQoYSkpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsXG4gICAgLy8yMTdcbiAgICBcImYoc3FydChhLXheMikveF4zLC0xLzIqc3FydChhLXheMikveF4yKzEvMipsb2coKHNxcnQoYSkrc3FydChhLXheMikpL3gpL3NxcnQoYSksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIixcbiAgICAvLzIxOFxuICAgIFwiZihzcXJ0KGEteF4yKS94XjQsLTEvMypzcXJ0KChhLXheMileMykvYS94XjMsb3Iobm90KG51bWJlcihhKSksYT4wKSlcIixcbiAgICAvLyAyNzNcbiAgICBcImYoc3FydChhKnheMitiKSx4KnNxcnQoYSp4XjIrYikvMitiKmxvZyh4KnNxcnQoYSkrc3FydChhKnheMitiKSkvMi9zcXJ0KGEpLGFuZChudW1iZXIoYSksYT4wKSlcIixcbiAgICAvLyAyNzRcbiAgICBcImYoc3FydChhKnheMitiKSx4KnNxcnQoYSp4XjIrYikvMitiKmFyY3Npbih4KnNxcnQoLWEvYikpLzIvc3FydCgtYSksYW5kKG51bWJlcihhKSxhPDApKVwiLFxuICAgIC8vIDI5MFxuICAgIFwiZihzaW4oYSp4KSwtY29zKGEqeCkvYSlcIixcbiAgICAvLyAyOTFcbiAgICBcImYoY29zKGEqeCksc2luKGEqeCkvYSlcIixcbiAgICAvLyAyOTJcbiAgICBcImYodGFuKGEqeCksLWxvZyhjb3MoYSp4KSkvYSlcIixcbiAgICAvLyAyOTNcbiAgICBcImYoMS90YW4oYSp4KSxsb2coc2luKGEqeCkpL2EpXCIsXG4gICAgLy8gMjk0XG4gICAgXCJmKDEvY29zKGEqeCksbG9nKHRhbihwaS80K2EqeC8yKSkvYSlcIixcbiAgICAvLyAyOTVcbiAgICBcImYoMS9zaW4oYSp4KSxsb2codGFuKGEqeC8yKSkvYSlcIixcbiAgICAvLyAyOTZcbiAgICBcImYoc2luKGEqeCleMix4LzItc2luKDIqYSp4KS8oNCphKSlcIixcbiAgICAvLyAyOTdcbiAgICBcImYoc2luKGEqeCleMywtY29zKGEqeCkqKHNpbihhKngpXjIrMikvKDMqYSkpXCIsXG4gICAgLy8gMjk4XG4gICAgXCJmKHNpbihhKngpXjQsMy84Kngtc2luKDIqYSp4KS8oNCphKStzaW4oNCphKngpLygzMiphKSlcIixcbiAgICAvLyAzMDJcbiAgICBcImYoY29zKGEqeCleMix4LzIrc2luKDIqYSp4KS8oNCphKSlcIixcbiAgICAvLyAzMDNcbiAgICBcImYoY29zKGEqeCleMyxzaW4oYSp4KSooY29zKGEqeCleMisyKS8oMyphKSlcIixcbiAgICAvLyAzMDRcbiAgICBcImYoY29zKGEqeCleNCwzLzgqeCtzaW4oMiphKngpLyg0KmEpK3Npbig0KmEqeCkvKDMyKmEpKVwiLFxuICAgIC8vIDMwOFxuICAgIFwiZigxL3NpbihhKngpXjIsLTEvKGEqdGFuKGEqeCkpKVwiLFxuICAgIC8vIDMxMlxuICAgIFwiZigxL2NvcyhhKngpXjIsdGFuKGEqeCkvYSlcIixcbiAgICAvLyAzMThcbiAgICBcImYoc2luKGEqeCkqY29zKGEqeCksc2luKGEqeCleMi8oMiphKSlcIixcbiAgICAvLyAzMjBcbiAgICBcImYoc2luKGEqeCleMipjb3MoYSp4KV4yLC1zaW4oNCphKngpLygzMiphKSt4LzgpXCIsXG4gICAgLy8gMzI2XG4gICAgXCJmKHNpbihhKngpL2NvcyhhKngpXjIsMS8oYSpjb3MoYSp4KSkpXCIsXG4gICAgLy8gMzI3XG4gICAgXCJmKHNpbihhKngpXjIvY29zKGEqeCksKGxvZyh0YW4ocGkvNCthKngvMikpLXNpbihhKngpKS9hKVwiLFxuICAgIC8vIDMyOFxuICAgIFwiZihjb3MoYSp4KS9zaW4oYSp4KV4yLC0xLyhhKnNpbihhKngpKSlcIixcbiAgICAvLyAzMjlcbiAgICBcImYoMS8oc2luKGEqeCkqY29zKGEqeCkpLGxvZyh0YW4oYSp4KSkvYSlcIixcbiAgICAvLyAzMzBcbiAgICBcImYoMS8oc2luKGEqeCkqY29zKGEqeCleMiksKDEvY29zKGEqeCkrbG9nKHRhbihhKngvMikpKS9hKVwiLFxuICAgIC8vIDMzMVxuICAgIFwiZigxLyhzaW4oYSp4KV4yKmNvcyhhKngpKSwobG9nKHRhbihwaS80K2EqeC8yKSktMS9zaW4oYSp4KSkvYSlcIixcbiAgICAvLyAzMzNcbiAgICBcImYoMS8oc2luKGEqeCleMipjb3MoYSp4KV4yKSwtMi8oYSp0YW4oMiphKngpKSlcIixcbiAgICAvLyAzMzVcbiAgICBcImYoc2luKGErYip4KSwtY29zKGErYip4KS9iKVwiLFxuICAgIC8vIDMzNlxuICAgIFwiZihjb3MoYStiKngpLHNpbihhK2IqeCkvYilcIixcbiAgICAvLyAzMzcrICh3aXRoIHRoZSBhZGRpdGlvbiBvZiBiKVxuICAgIFwiZigxLyhiK2Iqc2luKGEqeCkpLC10YW4ocGkvNC1hKngvMikvYS9iKVwiLFxuICAgIC8vIDMzNy0gKHdpdGggdGhlIGFkZGl0aW9uIG9mIGIpXG4gICAgXCJmKDEvKGItYipzaW4oYSp4KSksdGFuKHBpLzQrYSp4LzIpL2EvYilcIixcbiAgICAvLyAzMzggKHdpdGggdGhlIGFkZGl0aW9uIG9mIGIpXG4gICAgXCJmKDEvKGIrYipjb3MoYSp4KSksdGFuKGEqeC8yKS9hL2IpXCIsXG4gICAgLy8gMzM5ICh3aXRoIHRoZSBhZGRpdGlvbiBvZiBiKVxuICAgIFwiZigxLyhiLWIqY29zKGEqeCkpLC0xL3RhbihhKngvMikvYS9iKVwiLFxuICAgIC8vIDM0MFxuICAgIFwiZigxLyhhK2Iqc2luKHgpKSwxL3NxcnQoYl4yLWFeMikqbG9nKChhKnRhbih4LzIpK2Itc3FydChiXjItYV4yKSkvKGEqdGFuKHgvMikrYitzcXJ0KGJeMi1hXjIpKSksYl4yLWFeMilcIiwgLy8gY2hlY2sgdGhhdCBiXjItYV4yIGlzIG5vdCB6ZXJvXG4gICAgLy8gMzQxXG4gICAgXCJmKDEvKGErYipjb3MoeCkpLDEvc3FydChiXjItYV4yKSpsb2coKHNxcnQoYl4yLWFeMikqdGFuKHgvMikrYStiKS8oc3FydChiXjItYV4yKSp0YW4oeC8yKS1hLWIpKSxiXjItYV4yKVwiLCAvLyBjaGVjayB0aGF0IGJeMi1hXjIgaXMgbm90IHplcm9cbiAgICAvLyAzODlcbiAgICBcImYoeCpzaW4oYSp4KSxzaW4oYSp4KS9hXjIteCpjb3MoYSp4KS9hKVwiLFxuICAgIC8vIDM5MFxuICAgIFwiZih4XjIqc2luKGEqeCksMip4KnNpbihhKngpL2FeMi0oYV4yKnheMi0yKSpjb3MoYSp4KS9hXjMpXCIsXG4gICAgLy8gMzkzXG4gICAgXCJmKHgqY29zKGEqeCksY29zKGEqeCkvYV4yK3gqc2luKGEqeCkvYSlcIixcbiAgICAvLyAzOTRcbiAgICBcImYoeF4yKmNvcyhhKngpLDIqeCpjb3MoYSp4KS9hXjIrKGFeMip4XjItMikqc2luKGEqeCkvYV4zKVwiLFxuICAgIC8vIDQ0MVxuICAgIFwiZihhcmNzaW4oYSp4KSx4KmFyY3NpbihhKngpK3NxcnQoMS1hXjIqeF4yKS9hKVwiLFxuICAgIC8vIDQ0MlxuICAgIFwiZihhcmNjb3MoYSp4KSx4KmFyY2NvcyhhKngpLXNxcnQoMS1hXjIqeF4yKS9hKVwiLFxuICAgIC8vIDQ0M1xuICAgIFwiZihhcmN0YW4oYSp4KSx4KmFyY3RhbihhKngpLTEvMipsb2coMSthXjIqeF4yKS9hKVwiLFxuICAgIC8vIDQ4NSAod2l0aCBhZGRpdGlvbiBvZiBhKVxuICAgIC8vIGhvd2V2ZXIgY29tbWVudGluZyBvdXQgc2luY2UgaXQncyBhIGR1cGxpY2F0ZSBvZiAxNFxuICAgIC8vIFwiZihsb2coYSp4KSx4KmxvZyhhKngpLXgpXCIsXG4gICAgLy8gNDg2ICh3aXRoIGFkZGl0aW9uIG9mIGEpXG4gICAgXCJmKHgqbG9nKGEqeCkseF4yKmxvZyhhKngpLzIteF4yLzQpXCIsXG4gICAgLy8gNDg3ICh3aXRoIGFkZGl0aW9uIG9mIGEpXG4gICAgXCJmKHheMipsb2coYSp4KSx4XjMqbG9nKGEqeCkvMy0xLzkqeF4zKVwiLFxuICAgIC8vIDQ4OVxuICAgIFwiZihsb2coeCleMix4KmxvZyh4KV4yLTIqeCpsb2coeCkrMip4KVwiLFxuICAgIC8vIDQ5MyAod2l0aCBhZGRpdGlvbiBvZiBhKVxuICAgIFwiZigxL3gqMS8oYStsb2coeCkpLGxvZyhhK2xvZyh4KSkpXCIsXG4gICAgLy8gNDk5XG4gICAgXCJmKGxvZyhhKngrYiksKGEqeCtiKSpsb2coYSp4K2IpL2EteClcIixcbiAgICAvLyA1MDBcbiAgICBcImYobG9nKGEqeCtiKS94XjIsYS9iKmxvZyh4KS0oYSp4K2IpKmxvZyhhKngrYikvYi94KVwiLFxuICAgIC8vIDU1NFxuICAgIFwiZihzaW5oKHgpLGNvc2goeCkpXCIsXG4gICAgLy8gNTU1XG4gICAgXCJmKGNvc2goeCksc2luaCh4KSlcIixcbiAgICAvLyA1NTZcbiAgICBcImYodGFuaCh4KSxsb2coY29zaCh4KSkpXCIsXG4gICAgLy8gNTYwXG4gICAgXCJmKHgqc2luaCh4KSx4KmNvc2goeCktc2luaCh4KSlcIixcbiAgICAvLyA1NjJcbiAgICBcImYoeCpjb3NoKHgpLHgqc2luaCh4KS1jb3NoKHgpKVwiLFxuICAgIC8vIDU2NlxuICAgIFwiZihzaW5oKHgpXjIsc2luaCgyKngpLzQteC8yKVwiLFxuICAgIC8vIDU2OVxuICAgIFwiZih0YW5oKHgpXjIseC10YW5oKHgpKVwiLFxuICAgIC8vIDU3MlxuICAgIFwiZihjb3NoKHgpXjIsc2luaCgyKngpLzQreC8yKVwiLFxuICAgIC8vID9cbiAgICBcImYoeF4zKmV4cChhKnheMiksZXhwKGEqeF4yKSooeF4yL2EtMS8oYV4yKSkvMilcIixcbiAgICAvLyA/XG4gICAgXCJmKHheMypleHAoYSp4XjIrYiksZXhwKGEqeF4yKSpleHAoYikqKHheMi9hLTEvKGFeMikpLzIpXCIsXG4gICAgLy8gP1xuICAgIFwiZihleHAoYSp4XjIpLC1pKnNxcnQocGkpKmVyZihpKnNxcnQoYSkqeCkvc3FydChhKS8yKVwiLFxuICAgIC8vID9cbiAgICBcImYoZXJmKGEqeCkseCplcmYoYSp4KStleHAoLWFeMip4XjIpL2Evc3FydChwaSkpXCIsXG4gICAgLy8gdGhlc2UgYXJlIG5lZWRlZCBmb3IgdGhlIHN1cmZhY2UgaW50ZWdyYWwgaW4gdGhlIG1hbnVhbFxuICAgIFwiZih4XjIqKDEteF4yKV4oMy8yKSwoeCpzcXJ0KDEteF4yKSooLTgqeF40KzE0KnheMi0zKSszKmFyY3Npbih4KSkvNDgpXCIsXG4gICAgXCJmKHheMiooMS14XjIpXig1LzIpLCh4KnNxcnQoMS14XjIpKig0OCp4XjYtMTM2KnheNCsxMTgqeF4yLTE1KSsxNSphcmNzaW4oeCkpLzM4NClcIixcbiAgICBcImYoeF40KigxLXheMileKDMvMiksKC14KnNxcnQoMS14XjIpKigxNip4XjYtMjQqeF40KzIqeF4yKzMpKzMqYXJjc2luKHgpKS8xMjgpXCIsXG4gICAgXCJmKHgqZXhwKGEqeCksZXhwKGEqeCkqKGEqeC0xKS8oYV4yKSlcIixcbiAgICBcImYoeCpleHAoYSp4K2IpLGV4cChhKngrYikqKGEqeC0xKS8oYV4yKSlcIixcbiAgICBcImYoeF4yKmV4cChhKngpLGV4cChhKngpKihhXjIqeF4yLTIqYSp4KzIpLyhhXjMpKVwiLFxuICAgIFwiZih4XjIqZXhwKGEqeCtiKSxleHAoYSp4K2IpKihhXjIqeF4yLTIqYSp4KzIpLyhhXjMpKVwiLFxuICAgIFwiZih4XjMqZXhwKGEqeCksZXhwKGEqeCkqeF4zL2EtMy9hKmludGVncmFsKHheMipleHAoYSp4KSx4KSlcIixcbiAgICBcImYoeF4zKmV4cChhKngrYiksZXhwKGEqeCtiKSp4XjMvYS0zL2EqaW50ZWdyYWwoeF4yKmV4cChhKngrYikseCkpXCIsXG4gICAgMFxuICBdO1xuXG4gIC8vZGVmaW5lIEYgcDNcbiAgLy9kZWZpbmUgWCBwNFxuICAvL2RlZmluZSBOIHA1XG4gIEV2YWxfaW50ZWdyYWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9Ob3RoaW5nLCBpLCBpMSwgbiwgbywgcmVmLCByZWYxO1xuICAgIGkgPSAwO1xuICAgIG4gPSAwO1xuICAgIC8vIGV2YWx1YXRlIDFzdCBhcmcgdG8gZ2V0IGZ1bmN0aW9uIEZcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgcHVzaChjYXIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgLy8gZXZhbHVhdGUgMm5kIGFyZyBhbmQgdGhlbi4uLlxuXG4gICAgLy8gZXhhbXBsZSAgICByZXN1bHQgb2YgMm5kIGFyZyAgd2hhdCB0byBkb1xuXG4gICAgLy8gaW50ZWdyYWwoZikgICAgbmlsICAgICAgZ3Vlc3MgWCwgTiA9IG5pbFxuICAgIC8vIGludGVncmFsKGYsMikgIDIgICAgICBndWVzcyBYLCBOID0gMlxuICAgIC8vIGludGVncmFsKGYseCkgIHggICAgICBYID0geCwgTiA9IG5pbFxuICAgIC8vIGludGVncmFsKGYseCwyKSAgeCAgICAgIFggPSB4LCBOID0gMlxuICAgIC8vIGludGVncmFsKGYseCx5KSAgeCAgICAgIFggPSB4LCBOID0geVxuICAgIHAxID0gY2RyKHAxKTtcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGlmIChwMiA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIGd1ZXNzKCk7XG4gICAgICBwdXNoKHN5bWJvbChOSUwpKTtcbiAgICB9IGVsc2UgaWYgKGlzTnVtZXJpY0F0b20ocDIpKSB7XG4gICAgICBndWVzcygpO1xuICAgICAgcHVzaChwMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICB9XG4gICAgcDUgPSBwb3AoKTtcbiAgICBwNCA9IHBvcCgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIC8vIE4gbWlnaHQgYmUgYSBzeW1ib2wgaW5zdGVhZCBvZiBhIG51bWJlclxuICAgICAgaWYgKGlzTnVtZXJpY0F0b20ocDUpKSB7XG4gICAgICAgIHB1c2gocDUpO1xuICAgICAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICAgICAgaWYgKGlzTmFOKG4pKSB7XG4gICAgICAgICAgc3RvcChcIm50aCBpbnRlZ3JhbDogY2hlY2sgblwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIGlmIChuID49IDApIHtcbiAgICAgICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICAgICAgcHVzaChwNCk7XG4gICAgICAgICAgaW50ZWdyYWwoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IC1uO1xuICAgICAgICBmb3IgKGkgPSBpMSA9IDAsIHJlZjEgPSBuOyAoMCA8PSByZWYxID8gaTEgPCByZWYxIDogaTEgPiByZWYxKTsgaSA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgICAgcHVzaChwNCk7XG4gICAgICAgICAgZGVyaXZhdGl2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwMyA9IHBvcCgpO1xuICAgICAgLy8gaWYgTiBpcyBuaWwgdGhlbiBhcmdsaXN0IGlzIGV4aGF1c3RlZFxuICAgICAgaWYgKHA1ID09PSBzeW1ib2woTklMKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIG90aGVyd2lzZS4uLlxuXG4gICAgICAvLyBOICAgIGFyZzEgICAgd2hhdCB0byBkb1xuXG4gICAgICAvLyBudW1iZXIgIG5pbCAgICBicmVha1xuICAgICAgLy8gbnVtYmVyICBudW1iZXIgICAgTiA9IGFyZzEsIGNvbnRpbnVlXG4gICAgICAvLyBudW1iZXIgIHN5bWJvbCAgICBYID0gYXJnMSwgTiA9IGFyZzIsIGNvbnRpbnVlXG5cbiAgICAgIC8vIHN5bWJvbCAgbmlsICAgIFggPSBOLCBOID0gbmlsLCBjb250aW51ZVxuICAgICAgLy8gc3ltYm9sICBudW1iZXIgICAgWCA9IE4sIE4gPSBhcmcxLCBjb250aW51ZVxuICAgICAgLy8gc3ltYm9sICBzeW1ib2wgICAgWCA9IE4sIE4gPSBhcmcxLCBjb250aW51ZVxuICAgICAgaWYgKGlzTnVtZXJpY0F0b20ocDUpKSB7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgRXZhbCgpO1xuICAgICAgICBwNSA9IHBvcCgpO1xuICAgICAgICBpZiAocDUgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgICAgYnJlYWs7IC8vIGFyZ2xpc3QgZXhoYXVzdGVkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtZXJpY0F0b20ocDUpKSB7XG4gICAgICAgICAgZG9Ob3RoaW5nID0gMTsgLy8gTiA9IGFyZzFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwNCA9IHA1O1xuICAgICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICAgIEV2YWwoKTtcbiAgICAgICAgICBwNSA9IHBvcCgpOyAvLyBOID0gYXJnMlxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwNCA9IHA1O1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgIEV2YWwoKTtcbiAgICAgICAgcDUgPSBwb3AoKTsgLy8gTiA9IGFyZzFcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDMpOyAvLyBmaW5hbCByZXN1bHRcbiAgfTtcblxuICBpbnRlZ3JhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICBpbnRlZ3JhbF9vZl9zdW0oKTtcbiAgICB9IGVsc2UgaWYgKGNhcihwMSkgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgIGludGVncmFsX29mX3Byb2R1Y3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW50ZWdyYWxfb2ZfZm9ybSgpO1xuICAgIH1cbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChGaW5kKHAxLCBzeW1ib2woSU5URUdSQUwpKSkge1xuICAgICAgc3RvcChcImludGVncmFsOiBzb3JyeSwgY291bGQgbm90IGZpbmQgYSBzb2x1dGlvblwiKTtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgc2ltcGxpZnkoKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBpbnRlZ3JhbF9vZl9zdW0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0cztcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgcHVzaChjYXIocDEpKTtcbiAgICBwdXNoKHAyKTtcbiAgICBpbnRlZ3JhbCgpO1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGludGVncmFsKCk7XG4gICAgICBhZGQoKTtcbiAgICAgIHJlc3VsdHMucHVzaChwMSA9IGNkcihwMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBpbnRlZ3JhbF9vZl9wcm9kdWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMik7XG4gICAgcGFydGl0aW9uKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpbnRlZ3JhbF9vZl9mb3JtKCk7XG4gICAgcmV0dXJuIG11bHRpcGx5KCk7IC8vIG11bHRpcGx5IGNvbnN0YW50IHBhcnRcbiAgfTtcblxuICBpbnRlZ3JhbF9vZl9mb3JtID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhjLCB0YWI7XG4gICAgaGMgPSBpdGFsdV9oYXNoY29kZShwMSwgcDIpLnRvRml4ZWQoNik7XG4gICAgdGFiID0gaGFzaGVkX2l0YWJbaGNdO1xuICAgIGlmICghdGFiKSB7XG4gICAgICAvLyBkZWJ1Z2dlclxuICAgICAgLy8gaXRhbHVfaGFzaGNvZGUocDEsIHAyKVxuICAgICAgcHVzaF9zeW1ib2woSU5URUdSQUwpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocDEpOyAvLyBmcmVlIHZhcmlhYmxlXG4gICAgcHVzaChwMik7IC8vIGlucHV0IGV4cHJlc3Npb25cbiAgICB0cmFuc2Zvcm0odGFiLCBmYWxzZSk7XG4gICAgcDMgPSBwb3AoKTtcbiAgICBpZiAocDMgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICBwdXNoX3N5bWJvbChJTlRFR1JBTCk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcmV0dXJuIGxpc3QoMyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoKHAzKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gSW1wbGVtZW50YXRpb24gb2YgaGFzaCBjb2RlcyBiYXNlZCBvbiBJVEFMVSAoQW4gSW50ZWdyYWwgVGFibGUgTG9vay1VcClcbiAgLy8gaHR0cHM6Ly9udHJzLm5hc2EuZ292L2FyY2hpdmUvbmFzYS9jYXNpLm50cnMubmFzYS5nb3YvMTk2ODAwMDQ4OTEucGRmXG4gIC8vIHNlZSBBcHBlbmRpeCBBLCBwYWdlIDE1M1xuXG4gIC8vIFRoZSBmaXJzdCB0d28gdmFsdWVzIGFyZSBmcm9tIHRoZSBJVEFMVSBwYXBlci5cbiAgLy8gVGhlIG90aGVycyBhcmUganVzdCBhcmJpdHJhcnkgY29uc3RhbnRzLlxuICBoYXNoY29kZV92YWx1ZXMgPSB7XG4gICAgJ3gnOiAwLjk1NTMyLFxuICAgICdjb25zdGV4cCc6IDEuNDM3NjIsXG4gICAgJ2NvbnN0YW50JzogMS4xNDQxNjU5MzYyOTQxNDMzMixcbiAgICAnY29uc3RiYXNlJzogMS4yMDM2NDEyMjMwNDIxODgyNCxcbiAgICAnc2luJzogMS43MzMwNTQ4MjUxODMwMzIyMSxcbiAgICAnYXJjc2luJzogMS42NDgzMzY4NTI5NDY1ODA0LFxuICAgICdjb3MnOiAxLjA1ODY3MjEyMzY4NjM0MDExNixcbiAgICAnYXJjY29zJzogMS44NDA1MjI1OTE4MTA2Njk0LFxuICAgICd0YW4nOiAxLjEyMjQ5NDM3NzYyOTI1MDY0LFxuICAgICdhcmN0YW4nOiAxLjEyOTczOTc5MjUzOTQ5NjIsXG4gICAgJ3NpbmgnOiAxLjgxNzYxNjQ5MjYwNjAwNzgsXG4gICAgJ2Nvc2gnOiAxLjk0MDQ5MzQ2NjE3MDgwMjIsXG4gICAgJ3RhbmgnOiAxLjY0MjEzMDc3MTUxMDMxMjEsXG4gICAgJ2xvZyc6IDEuNDc3NDQzNzAxMzU0OTIzODcsXG4gICAgJ2VyZic6IDEuMDgyNTI2OTIyNTcwMjkxNlxuICB9O1xuXG4gIGl0YWx1X2hhc2hjb2RlID0gZnVuY3Rpb24odSwgeCkge1xuICAgIHZhciBoYWxmO1xuICAgIGlmIChpc3N5bWJvbCh1KSkge1xuICAgICAgaWYgKGVxdWFsKHUsIHgpKSB7XG4gICAgICAgIHJldHVybiBoYXNoY29kZV92YWx1ZXMueDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBoYXNoY29kZV92YWx1ZXMuY29uc3RhbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc2NvbnModSkpIHtcbiAgICAgIHN3aXRjaCAoc3ltbnVtKGNhcih1KSkpIHtcbiAgICAgICAgY2FzZSBBREQ6XG4gICAgICAgICAgcmV0dXJuIGhhc2hfYWRkaXRpb24oY2RyKHUpLCB4KTtcbiAgICAgICAgY2FzZSBNVUxUSVBMWTpcbiAgICAgICAgICByZXR1cm4gaGFzaF9tdWx0aXBsaWNhdGlvbihjZHIodSksIHgpO1xuICAgICAgICBjYXNlIFBPV0VSOlxuICAgICAgICAgIHJldHVybiBoYXNoX3Bvd2VyKGNhZHIodSksIGNhZGRyKHUpLCB4KTtcbiAgICAgICAgY2FzZSBFWFA6XG4gICAgICAgICAgcmV0dXJuIGhhc2hfcG93ZXIoc3ltYm9sKEUpLCBjYWRyKHUpLCB4KTtcbiAgICAgICAgY2FzZSBTUVJUOlxuICAgICAgICAgIHB1c2hfZG91YmxlKDAuNSk7XG4gICAgICAgICAgaGFsZiA9IHBvcCgpO1xuICAgICAgICAgIHJldHVybiBoYXNoX3Bvd2VyKGNhZHIodSksIGhhbGYsIHgpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBoYXNoX2Z1bmN0aW9uKHUsIHgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFzaGNvZGVfdmFsdWVzLmNvbnN0YW50O1xuICB9O1xuXG4gIGhhc2hfZnVuY3Rpb24gPSBmdW5jdGlvbih1LCB4KSB7XG4gICAgdmFyIGFyZ19oYXNoLCBiYXNlLCBuYW1lO1xuICAgIGlmICghRmluZChjYWRyKHUpLCB4KSkge1xuICAgICAgcmV0dXJuIGhhc2hjb2RlX3ZhbHVlcy5jb25zdGFudDtcbiAgICB9XG4gICAgbmFtZSA9IGNhcih1KTtcbiAgICBhcmdfaGFzaCA9IGl0YWx1X2hhc2hjb2RlKGNhZHIodSksIHgpO1xuICAgIGJhc2UgPSBoYXNoY29kZV92YWx1ZXNbbmFtZS5wcmludG5hbWVdO1xuICAgIGlmICghYmFzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBmdW5jdGlvbiAnICsgbmFtZS5wcmludG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5wb3coYmFzZSwgYXJnX2hhc2gpO1xuICB9O1xuXG4gIGhhc2hfYWRkaXRpb24gPSBmdW5jdGlvbih0ZXJtcywgeCkge1xuICAgIHZhciBrLCBzdW0sIHRlcm0sIHRlcm1faGFzaCwgdGVybV9zZXQsIHY7XG4gICAgdGVybV9zZXQgPSB7fTtcbiAgICB3aGlsZSAoaXNjb25zKHRlcm1zKSkge1xuICAgICAgdGVybSA9IGNhcih0ZXJtcyk7XG4gICAgICB0ZXJtcyA9IGNkcih0ZXJtcyk7XG4gICAgICB0ZXJtX2hhc2ggPSAwO1xuICAgICAgaWYgKEZpbmQodGVybSwgeCkpIHtcbiAgICAgICAgdGVybV9oYXNoID0gaXRhbHVfaGFzaGNvZGUodGVybSwgeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGUgb3JpZ2luYWwgYWxnb3JpdGhtIHdvdWxkIHNraXAgdGhpcyxcbiAgICAgICAgLy8gYnV0IHJlY29yZGluZyB0aGF0IGl0IHdhcyBwcmVzZW50IGhlbHBzXG4gICAgICAgIC8vIHByZXZlbnQgY29sbGlzaW9ucy5cbiAgICAgICAgdGVybV9oYXNoID0gaGFzaGNvZGVfdmFsdWVzLmNvbnN0YW50O1xuICAgICAgfVxuICAgICAgdGVybV9zZXRbdGVybV9oYXNoLnRvRml4ZWQoNildID0gdHJ1ZTtcbiAgICB9XG4gICAgc3VtID0gMDtcbiAgICBmb3IgKGsgaW4gdGVybV9zZXQpIHtcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKHRlcm1fc2V0LCBrKSkgY29udGludWU7XG4gICAgICB2ID0gdGVybV9zZXRba107XG4gICAgICBzdW0gPSBzdW0gKyBwYXJzZUZsb2F0KGssIDEwKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1bTtcbiAgfTtcblxuICBoYXNoX211bHRpcGxpY2F0aW9uID0gZnVuY3Rpb24odGVybXMsIHgpIHtcbiAgICB2YXIgcHJvZHVjdCwgdGVybTtcbiAgICBwcm9kdWN0ID0gMTtcbiAgICB3aGlsZSAoaXNjb25zKHRlcm1zKSkge1xuICAgICAgdGVybSA9IGNhcih0ZXJtcyk7XG4gICAgICB0ZXJtcyA9IGNkcih0ZXJtcyk7XG4gICAgICBpZiAoRmluZCh0ZXJtLCB4KSkge1xuICAgICAgICBwcm9kdWN0ID0gcHJvZHVjdCAqIGl0YWx1X2hhc2hjb2RlKHRlcm0sIHgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvZHVjdDtcbiAgfTtcblxuICBoYXNoX3Bvd2VyID0gZnVuY3Rpb24oYmFzZSwgcG93ZXIsIHgpIHtcbiAgICB2YXIgYmFzZV9oYXNoLCBleHBfaGFzaDtcbiAgICBiYXNlX2hhc2ggPSBoYXNoY29kZV92YWx1ZXMuY29uc3RhbnQ7XG4gICAgZXhwX2hhc2ggPSBoYXNoY29kZV92YWx1ZXMuY29uc3RleHA7XG4gICAgaWYgKEZpbmQoYmFzZSwgeCkpIHtcbiAgICAgIGJhc2VfaGFzaCA9IGl0YWx1X2hhc2hjb2RlKGJhc2UsIHgpO1xuICAgIH1cbiAgICBpZiAoRmluZChwb3dlciwgeCkpIHtcbiAgICAgIGV4cF9oYXNoID0gaXRhbHVfaGFzaGNvZGUocG93ZXIsIHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjb25zdGFudCB0byBjb25zdGFudCA9IGNvbnN0YW50XG4gICAgICBpZiAoYmFzZV9oYXNoID09PSBoYXNoY29kZV92YWx1ZXMuY29uc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIGhhc2hjb2RlX3ZhbHVlcy5jb25zdGFudDtcbiAgICAgIH1cbiAgICAgIGlmIChpc21pbnVzb25lKHBvd2VyKSkge1xuICAgICAgICBleHBfaGFzaCA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChpc29uZW92ZXJ0d28ocG93ZXIpKSB7XG4gICAgICAgIGV4cF9oYXNoID0gMC41O1xuICAgICAgfSBlbHNlIGlmIChpc21pbnVzb25lb3ZlcnR3byhwb3dlcikpIHtcbiAgICAgICAgZXhwX2hhc2ggPSAtMC41O1xuICAgICAgfSBlbHNlIGlmIChlcXVhbHEocG93ZXIsIDIsIDEpKSB7XG4gICAgICAgIGV4cF9oYXNoID0gMjtcbiAgICAgIH0gZWxzZSBpZiAoZXF1YWxxKHBvd2VyLCAtMiwgMSkpIHtcbiAgICAgICAgZXhwX2hhc2ggPSAtMjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE1hdGgucG93KGJhc2VfaGFzaCwgZXhwX2hhc2gpO1xuICB9O1xuXG4gIG1ha2VfaGFzaGVkX2l0YWIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZiwgaCwga2V5LCBsZW4sIG8sIHMsIHRhYiwgdTtcbiAgICB0YWIgPSB7fTtcbiAgICBmb3IgKG8gPSAwLCBsZW4gPSBpdGFiLmxlbmd0aDsgbyA8IGxlbjsgbysrKSB7XG4gICAgICBzID0gaXRhYltvXTtcbiAgICAgIGlmICghcykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNjYW5fbWV0YShzKTtcbiAgICAgIGYgPSBwb3AoKTtcbiAgICAgIHUgPSBjYWRyKGYpO1xuICAgICAgaCA9IGl0YWx1X2hhc2hjb2RlKHUsIHN5bWJvbChNRVRBWCkpO1xuICAgICAga2V5ID0gaC50b0ZpeGVkKDYpO1xuICAgICAgaWYgKCF0YWJba2V5XSkge1xuICAgICAgICB0YWJba2V5XSA9IFtdO1xuICAgICAgfVxuICAgICAgdGFiW2tleV0ucHVzaChzKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ2hhc2hlZF9pdGFiID0gJyArIEpTT04uc3RyaW5naWZ5KHRhYiwgbnVsbCwgMikpO1xuICAgIHJldHVybiB0YWI7XG4gIH07XG5cbiAgJC5tYWtlX2hhc2hlZF9pdGFiID0gbWFrZV9oYXNoZWRfaXRhYjtcblxuICAvLyBwcmUtY2FsY3VsYXRlZCBoYXNoZWQgaW50ZWdyYWwgdGFibGUuXG4gIC8vIGluIGNhc2UgdGhlIGludGVncmFsIHRhYmxlIGlzIGNoYW5nZWQsIHVzZSB0aGlzXG4gIC8vICAgQWxnZWJyaXRlLm1ha2VfaGFzaGVkX2l0YWIoKVxuICAvLyBhbmQgY29weSB0aGUgcmVzdWx0aW5nIEpTT04gaW4gaGVyZS5cbiAgaGFzaGVkX2l0YWIgPSB7XG4gICAgXCIxLjE0NDE2NlwiOiBbXCJmKGEsYSp4KVwiXSxcbiAgICBcIjEuMDQ2NzcwXCI6IFtcImYoMS94LGxvZyh4KSlcIl0sXG4gICAgXCIwLjkzNjQwMFwiOiBbXCJmKHheYSx4XihhKzEpLyhhKzEpKVwiXSxcbiAgICBcIjEuMDk1NzI3XCI6IFtcImYoeF4oLTIpLC14XigtMSkpXCJdLFxuICAgIFwiMS4wMjMxMThcIjogW1wiZih4XigtMS8yKSwyKnheKDEvMikpXCJdLFxuICAgIFwiMC45Nzc0MDVcIjogW1wiZih4XigxLzIpLDIvMyp4XigzLzIpKVwiXSxcbiAgICBcIjAuOTU1MzIwXCI6IFtcImYoeCx4XjIvMilcIl0sXG4gICAgXCIwLjkxMjYzNlwiOiBbXCJmKHheMix4XjMvMylcIl0sXG4gICAgXCIxLjEzNzMwMlwiOiBbXCJmKGV4cChhKngpLDEvYSpleHAoYSp4KSlcIiwgXCJmKGFeeCxhXngvbG9nKGEpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCJdLFxuICAgIFwiMS4zMjY3NzRcIjogW1wiZihleHAoYSp4K2IpLDEvYSpleHAoYSp4K2IpKVwiXSxcbiAgICBcIjEuMDgwMjU5XCI6IFtcImYoeCpleHAoYSp4XjIpLGV4cChhKnheMikvKDIqYSkpXCJdLFxuICAgIFwiMS4yNjAyMjhcIjogW1wiZih4KmV4cChhKnheMitiKSxleHAoYSp4XjIrYikvKDIqYSkpXCJdLFxuICAgIFwiMS40NTE5MDJcIjogW1wiZihsb2coYSp4KSx4KmxvZyhhKngpLXgpXCJdLFxuICAgIFwiMC40ODYxOTJcIjogW1wiZigxLyhhK3heMiksMS9zcXJ0KGEpKmFyY3Rhbih4L3NxcnQoYSkpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsIFwiZigxLyhhLXheMiksMS9zcXJ0KGEpKmFyY3RhbmgoeC9zcXJ0KGEpKSlcIiwgXCJmKDEvKGErYip4XjIpLDEvc3FydChhKmIpKmFyY3Rhbih4KnNxcnQoYSpiKS9hKSxvcihub3QobnVtYmVyKGEqYikpLGEqYj4wKSlcIiwgXCJmKDEvKGErYip4XjIpLDEvKDIqc3FydCgtYSpiKSkqbG9nKChhK3gqc3FydCgtYSpiKSkvKGEteCpzcXJ0KC1hKmIpKSksb3Iobm90KG51bWJlcihhKmIpKSxhKmI8MCkpXCJdLFxuICAgIFwiMC42OTcyNzRcIjogW1wiZigxL3NxcnQoYS14XjIpLGFyY3Npbih4LyhzcXJ0KGEpKSkpXCIsIFwiZigxL3NxcnQoYSt4XjIpLGxvZyh4K3NxcnQoYSt4XjIpKSlcIiwgXCJmKDEvc3FydCh4XjIrYSksbG9nKHgrc3FydCh4XjIrYSkpKVwiXSxcbiAgICBcIjAuNDc2MzA3XCI6IFtcImYoMS8oYStiKngpLDEvYipsb2coYStiKngpKVwiXSxcbiAgICBcIjAuMjI2ODY4XCI6IFtcImYoMS8oYStiKngpXjIsLTEvKGIqKGErYip4KSkpXCJdLFxuICAgIFwiMi45MDQ1MzFcIjogW1wiZigxLyhhK2IqeCleMywtMS8oMipiKSoxLyhhK2IqeCleMilcIl0sXG4gICAgXCIwLjQ1NTAyNlwiOiBbXCJmKHgvKGErYip4KSx4L2ItYSpsb2coYStiKngpL2IvYilcIl0sXG4gICAgXCIwLjIxNjczMlwiOiBbXCJmKHgvKGErYip4KV4yLDEvYl4yKihsb2coYStiKngpK2EvKGErYip4KSkpXCJdLFxuICAgIFwiMC40MzQ2OTVcIjogW1wiZih4XjIvKGErYip4KSwxL2JeMiooMS8yKihhK2IqeCleMi0yKmEqKGErYip4KSthXjIqbG9nKGErYip4KSkpXCJdLFxuICAgIFwiMC4yMDcwNDhcIjogW1wiZih4XjIvKGErYip4KV4yLDEvYl4zKihhK2IqeC0yKmEqbG9nKGErYip4KS1hXjIvKGErYip4KSkpXCJdLFxuICAgIFwiMi42NTA3ODFcIjogW1wiZih4XjIvKGErYip4KV4zLDEvYl4zKihsb2coYStiKngpKzIqYS8oYStiKngpLTEvMiphXjIvKGErYip4KV4yKSlcIl0sXG4gICAgXCIwLjQ5ODU4NFwiOiBbXCJmKDEveCoxLyhhK2IqeCksLTEvYSpsb2coKGErYip4KS94KSlcIl0sXG4gICAgXCIwLjIzNzQ3OVwiOiBbXCJmKDEveCoxLyhhK2IqeCleMiwxL2EqMS8oYStiKngpLTEvYV4yKmxvZygoYStiKngpL3gpKVwiXSxcbiAgICBcIjMuMDQwMzc1XCI6IFtcImYoMS94KjEvKGErYip4KV4zLDEvYV4zKigxLzIqKCgyKmErYip4KS8oYStiKngpKV4yK2xvZyh4LyhhK2IqeCkpKSlcIl0sXG4gICAgXCIwLjUyMTkwMlwiOiBbXCJmKDEveF4yKjEvKGErYip4KSwtMS8oYSp4KStiL2FeMipsb2coKGErYip4KS94KSlcIl0sXG4gICAgXCIwLjQ0NjAxNFwiOiBbXCJmKDEveF4zKjEvKGErYip4KSwoMipiKngtYSkvKDIqYV4yKnheMikrYl4yL2FeMypsb2coeC8oYStiKngpKSlcIl0sXG4gICAgXCIwLjI0ODU4NlwiOiBbXCJmKDEveF4yKjEvKGErYip4KV4yLC0oYSsyKmIqeCkvKGFeMip4KihhK2IqeCkpKzIqYi9hXjMqbG9nKChhK2IqeCkveCkpXCJdLFxuICAgIFwiMC40NjQ0NjlcIjogW1wiZih4LyhhK2IqeF4yKSwxLzIqMS9iKmxvZyhhK2IqeF4yKSlcIl0sXG4gICAgXCIwLjQ0MzcxNlwiOiBbXCJmKHheMi8oYStiKnheMikseC9iLWEvYippbnRlZ3JhbCgxLyhhK2IqeF4yKSx4KSlcIl0sXG4gICAgXCIwLjIzNjM4MlwiOiBbXCJmKDEvKGErYip4XjIpXjIseC8oMiphKihhK2IqeF4yKSkrMS8yKjEvYSppbnRlZ3JhbCgxLyhhK2IqeF4yKSx4KSlcIl0sXG4gICAgXCIwLjUwODkzMVwiOiBbXCJmKDEveCoxLyhhK2IqeF4yKSwxLzIqMS9hKmxvZyh4XjIvKGErYip4XjIpKSlcIl0sXG4gICAgXCIwLjUzMjczM1wiOiBbXCJmKDEveF4yKjEvKGErYip4XjIpLC0xLyhhKngpLWIvYSppbnRlZ3JhbCgxLyhhK2IqeF4yKSx4KSlcIl0sXG4gICAgXCIwLjQ4MDYzOFwiOiBbXCJmKDEvKGErYip4XjMpLDEvMyoxL2EqKGEvYileKDEvMykqKDEvMipsb2coKChhL2IpXigxLzMpK3gpXjMvKGErYip4XjMpKStzcXJ0KDMpKmFyY3RhbigoMip4LShhL2IpXigxLzMpKSooYS9iKV4oLTEvMykvc3FydCgzKSkpKVwiXSxcbiAgICBcIjAuNDM4NjQ4XCI6IFtcImYoeF4yLyhhK2IqeF4zKSwxLzMqMS9iKmxvZyhhK2IqeF4zKSlcIl0sXG4gICAgXCIwLjQ1OTE2NFwiOiBbXCJmKHgvKGErYip4XjQpLDEvMipzcXJ0KGIvYSkvYiphcmN0YW4oeF4yKnNxcnQoYi9hKSksb3Iobm90KG51bWJlcihhKmIpKSxhKmI+MCkpXCIsIFwiZih4LyhhK2IqeF40KSwxLzQqc3FydCgtYi9hKS9iKmxvZygoeF4yLXNxcnQoLWEvYikpLyh4XjIrc3FydCgtYS9iKSkpLG9yKG5vdChudW1iZXIoYSpiKSksYSpiPDApKVwiXSxcbiAgICBcIjAuNDUwMDcwXCI6IFtcImYoeF4zLyhhK2IqeF40KSwxLzQqMS9iKmxvZyhhK2IqeF40KSlcIl0sXG4gICAgXCIxLjQ0ODk2MFwiOiBbXCJmKHNxcnQoYStiKngpLDIvMyoxL2Iqc3FydCgoYStiKngpXjMpKVwiXSxcbiAgICBcIjEuMzg0MjIxXCI6IFtcImYoeCpzcXJ0KGErYip4KSwtMiooMiphLTMqYip4KSpzcXJ0KChhK2IqeCleMykvMTUvYl4yKVwiXSxcbiAgICBcIjEuMzIyMzc0XCI6IFtcImYoeF4yKnNxcnQoYStiKngpLDIqKDgqYV4yLTEyKmEqYip4KzE1KmJeMip4XjIpKnNxcnQoKGErYip4KV4zKS8xMDUvYl4zKVwiXSxcbiAgICBcIjEuNTE2NzI4XCI6IFtcImYoc3FydChhK2IqeCkveCwyKnNxcnQoYStiKngpK2EqaW50ZWdyYWwoMS94KjEvc3FydChhK2IqeCkseCkpXCJdLFxuICAgIFwiMS41ODc2NjVcIjogW1wiZihzcXJ0KGErYip4KS94XjIsLXNxcnQoYStiKngpL3grYi8yKmludGVncmFsKDEveCoxL3NxcnQoYStiKngpLHgpKVwiXSxcbiAgICBcIjAuNjkwMTUwXCI6IFtcImYoMS9zcXJ0KGErYip4KSwyKnNxcnQoYStiKngpL2IpXCJdLFxuICAgIFwiMC42NTkzMTRcIjogW1wiZih4L3NxcnQoYStiKngpLC0yLzMqKDIqYS1iKngpKnNxcnQoYStiKngpL2JeMilcIl0sXG4gICAgXCIwLjYyOTg1NlwiOiBbXCJmKHheMi9zcXJ0KGErYip4KSwyLzE1Kig4KmFeMi00KmEqYip4KzMqYl4yKnheMikqc3FydChhK2IqeCkvYl4zKVwiXSxcbiAgICBcIjAuNzIyNDI4XCI6IFtcImYoMS94KjEvc3FydChhK2IqeCksMS9zcXJ0KGEpKmxvZygoc3FydChhK2IqeCktc3FydChhKSkvKHNxcnQoYStiKngpK3NxcnQoYSkpKSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLCBcImYoMS94KjEvc3FydChhK2IqeCksMi9zcXJ0KC1hKSphcmN0YW4oc3FydCgtKGErYip4KS9hKSksb3Iobm90KG51bWJlcihhKSksYTwwKSlcIl0sXG4gICAgXCIwLjc1NjIxNlwiOiBbXCJmKDEveF4yKjEvc3FydChhK2IqeCksLXNxcnQoYStiKngpL2EveC0xLzIqYi9hKmludGVncmFsKDEveCoxL3NxcnQoYStiKngpLHgpKVwiXSxcbiAgICBcIjEuNDM0MTU2XCI6IFtcImYoc3FydCh4XjIrYSksMS8yKih4KnNxcnQoeF4yK2EpK2EqbG9nKHgrc3FydCh4XjIrYSkpKSlcIiwgXCJmKHNxcnQoYS14XjIpLDEvMiooeCpzcXJ0KGEteF4yKSthKmFyY3Npbih4L3NxcnQoYWJzKGEpKSkpKVwiLCBcImYoc3FydChhKnheMitiKSx4KnNxcnQoYSp4XjIrYikvMitiKmxvZyh4KnNxcnQoYSkrc3FydChhKnheMitiKSkvMi9zcXJ0KGEpLGFuZChudW1iZXIoYSksYT4wKSlcIiwgXCJmKHNxcnQoYSp4XjIrYikseCpzcXJ0KGEqeF4yK2IpLzIrYiphcmNzaW4oeCpzcXJ0KC1hL2IpKS8yL3NxcnQoLWEpLGFuZChudW1iZXIoYSksYTwwKSlcIl0sXG4gICAgXCIwLjcyOTg4NlwiOiBbXCJmKDEveCoxL3NxcnQoeF4yK2EpLGFyY3NlYyh4L3NxcnQoLWEpKS9zcXJ0KC1hKSxvcihub3QobnVtYmVyKGEpKSxhPDApKVwiLCBcImYoMS94KjEvc3FydCh4XjIrYSksLTEvc3FydChhKSpsb2coKHNxcnQoYSkrc3FydCh4XjIrYSkpL3gpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsIFwiZigxL3gqMS9zcXJ0KGEteF4yKSwtMS9zcXJ0KGEpKmxvZygoc3FydChhKStzcXJ0KGEteF4yKSkveCksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIl0sXG4gICAgXCIxLjUwMTIzMFwiOiBbXCJmKHNxcnQoeF4yK2EpL3gsc3FydCh4XjIrYSktc3FydChhKSpsb2coKHNxcnQoYSkrc3FydCh4XjIrYSkpL3gpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsIFwiZihzcXJ0KHheMithKS94LHNxcnQoeF4yK2EpLXNxcnQoLWEpKmFyY3NlYyh4L3NxcnQoLWEpKSxvcihub3QobnVtYmVyKGEpKSxhPDApKVwiLCBcImYoc3FydChhLXheMikveCxzcXJ0KGEteF4yKS1zcXJ0KGEpKmxvZygoc3FydChhKStzcXJ0KGEteF4yKSkveCksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIl0sXG4gICAgXCIwLjY2NjEyMFwiOiBbXCJmKHgvc3FydCh4XjIrYSksc3FydCh4XjIrYSkpXCIsIFwiZih4L3NxcnQoYS14XjIpLC1zcXJ0KGEteF4yKSlcIl0sXG4gICAgXCIxLjM3MDA3N1wiOiBbXCJmKHgqc3FydCh4XjIrYSksMS8zKnNxcnQoKHheMithKV4zKSlcIiwgXCJmKHgqc3FydChhLXheMiksLTEvMypzcXJ0KChhLXheMileMykpXCJdLFxuICAgIFwiMS43MzAwODdcIjogW1wiZihzcXJ0KGEreF42KzMqYV4oMS8zKSp4XjQrMyphXigyLzMpKnheMiksMS80Kih4KnNxcnQoKHheMithXigxLzMpKV4zKSszLzIqYV4oMS8zKSp4KnNxcnQoeF4yK2FeKDEvMykpKzMvMiphXigyLzMpKmxvZyh4K3NxcnQoeF4yK2FeKDEvMykpKSkpXCIsIFwiZihzcXJ0KC1hK3heNi0zKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIpLDEvNCooeCpzcXJ0KCh4XjItYV4oMS8zKSleMyktMy8yKmFeKDEvMykqeCpzcXJ0KHheMi1hXigxLzMpKSszLzIqYV4oMi8zKSpsb2coeCtzcXJ0KHheMi1hXigxLzMpKSkpKVwiXSxcbiAgICBcIjAuNTc4MDA2XCI6IFtcImYoMS9zcXJ0KGEreF42KzMqYV4oMS8zKSp4XjQrMyphXigyLzMpKnheMikseC9hXigxLzMpL3NxcnQoeF4yK2FeKDEvMykpKVwiXSxcbiAgICBcIjAuNTUyMTgwXCI6IFtcImYoeC9zcXJ0KGEreF42KzMqYV4oMS8zKSp4XjQrMyphXigyLzMpKnheMiksLTEvc3FydCh4XjIrYV4oMS8zKSkpXCJdLFxuICAgIFwiMS42NTI3ODdcIjogW1wiZih4KnNxcnQoYSt4XjYrMyphXigxLzMpKnheNCszKmFeKDIvMykqeF4yKSwxLzUqc3FydCgoeF4yK2FeKDEvMykpXjUpKVwiXSxcbiAgICBcIjEuMzA4ODYyXCI6IFtcImYoeF4yKnNxcnQoeF4yK2EpLDEvNCp4KnNxcnQoKHheMithKV4zKS0xLzgqYSp4KnNxcnQoeF4yK2EpLTEvOCphXjIqbG9nKHgrc3FydCh4XjIrYSkpKVwiLCBcImYoeF4yKnNxcnQoYS14XjIpLC14LzQqc3FydCgoYS14XjIpXjMpKzEvOCphKih4KnNxcnQoYS14XjIpK2EqYXJjc2luKHgvc3FydChhKSkpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCJdLFxuICAgIFwiMS4zNDI5NDRcIjogW1wiZih4XjMqc3FydCh4XjIrYSksKDEvNSp4XjItMi8xNSphKSpzcXJ0KCh4XjIrYSleMyksYW5kKG51bWJlcihhKSxhPjApKVwiLCBcImYoeF4zKnNxcnQoeF4yK2EpLHNxcnQoKHheMithKV41KS81LWEqc3FydCgoeF4yK2EpXjMpLzMsYW5kKG51bWJlcihhKSxhPDApKVwiLCBcImYoeF4zKnNxcnQoYS14XjIpLCgtMS81KnheMi0yLzE1KmEpKnNxcnQoKGEteF4yKV4zKSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLCBcImYoc3FydChhLXheMikveF4zLC0xLzIqc3FydChhLXheMikveF4yKzEvMipsb2coKHNxcnQoYSkrc3FydChhLXheMikpL3gpL3NxcnQoYSksb3Iobm90KG51bWJlcihhKSksYT4wKSlcIiwgXCJmKHNxcnQoYS14XjIpL3heNCwtMS8zKnNxcnQoKGEteF4yKV4zKS9hL3heMyxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiXSxcbiAgICBcIjAuNjM2MzU4XCI6IFtcImYoeF4yL3NxcnQoeF4yK2EpLDEvMip4KnNxcnQoeF4yK2EpLTEvMiphKmxvZyh4K3NxcnQoeF4yK2EpKSlcIiwgXCJmKHheMi9zcXJ0KGEteF4yKSwteC8yKnNxcnQoYS14XjIpK2EvMiphcmNzaW4oeC9zcXJ0KGEpKSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiXSxcbiAgICBcIjAuNjUyOTI4XCI6IFtcImYoeF4zL3NxcnQoeF4yK2EpLDEvMypzcXJ0KCh4XjIrYSleMyktYSpzcXJ0KHheMithKSlcIiwgXCJmKDEveF4zKjEvc3FydCh4XjIrYSksLTEvMipzcXJ0KHheMithKS9hL3heMisxLzIqbG9nKChzcXJ0KGEpK3NxcnQoeF4yK2EpKS94KS9hXigzLzIpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsIFwiZigxL3heMyoxL3NxcnQoeF4yLWEpLDEvMipzcXJ0KHheMi1hKS9hL3heMisxLzIqMS8oYV4oMy8yKSkqYXJjc2VjKHgvKGFeKDEvMikpKSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiXSxcbiAgICBcIjAuNzY0MDIyXCI6IFtcImYoMS94XjIqMS9zcXJ0KHheMithKSwtc3FydCh4XjIrYSkvYS94KVwiLCBcImYoMS94XjIqMS9zcXJ0KGEteF4yKSwtc3FydChhLXheMikvYS94LG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCJdLFxuICAgIFwiMS41Nzg5NDBcIjogW1wiZih4XjIqc3FydChhK3heNiszKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIpLDEvNip4KnNxcnQoKHheMithXigxLzMpKV41KS0xLzI0KmFeKDEvMykqeCpzcXJ0KCh4XjIrYV4oMS8zKSleMyktMS8xNiphXigyLzMpKngqc3FydCh4XjIrYV4oMS8zKSktMS8xNiphKmxvZyh4K3NxcnQoeF4yK2FeKDEvMykpKSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiLCBcImYoeF4yKnNxcnQoLWEtMyphXigxLzMpKnheNCszKmFeKDIvMykqeF4yK3heNiksMS82Kngqc3FydCgoeF4yLWFeKDEvMykpXjUpKzEvMjQqYV4oMS8zKSp4KnNxcnQoKHheMi1hXigxLzMpKV4zKS0xLzE2KmFeKDIvMykqeCpzcXJ0KHheMi1hXigxLzMpKSsxLzE2KmEqbG9nKHgrc3FydCh4XjItYV4oMS8zKSkpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCJdLFxuICAgIFwiMS42MjAwNTVcIjogW1wiZih4XjMqc3FydChhK3heNiszKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIpLDEvNypzcXJ0KCh4XjIrYV4oMS8zKSleNyktMS81KmFeKDEvMykqc3FydCgoeF4yK2FeKDEvMykpXjUpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCIsIFwiZih4XjMqc3FydCgtYS0zKmFeKDEvMykqeF40KzMqYV4oMi8zKSp4XjIreF42KSwxLzcqc3FydCgoeF4yLWFeKDEvMykpXjcpKzEvNSphXigxLzMpKnNxcnQoKHheMi1hXigxLzMpKV41KSxvcihub3QobnVtYmVyKGEpKSxhPjApKVwiXSxcbiAgICBcIjAuMzMyMTE3XCI6IFtcImYoMS8oeC1hKS9zcXJ0KHheMi1hXjIpLC1zcXJ0KHheMi1hXjIpL2EvKHgtYSkpXCIsIFwiZigxLyh4K2EpL3NxcnQoeF4yLWFeMiksc3FydCh4XjItYV4yKS9hLyh4K2EpKVwiXSxcbiAgICBcIjEuNTcxNDQzXCI6IFtcImYoc3FydChhLXheMikveF4yLC1zcXJ0KGEteF4yKS94LWFyY3Npbih4L3NxcnQoYSkpLG9yKG5vdChudW1iZXIoYSkpLGE+MCkpXCJdLFxuICAgIFwiMS42OTA5OTRcIjogW1wiZihzaW4oYSp4KSwtY29zKGEqeCkvYSlcIl0sXG4gICAgXCIxLjA1NTk3OVwiOiBbXCJmKGNvcyhhKngpLHNpbihhKngpL2EpXCJdLFxuICAgIFwiMS4xMTY3MTRcIjogW1wiZih0YW4oYSp4KSwtbG9nKGNvcyhhKngpKS9hKVwiXSxcbiAgICBcIjAuODk1NDg0XCI6IFtcImYoMS90YW4oYSp4KSxsb2coc2luKGEqeCkpL2EpXCJdLFxuICAgIFwiMC45NDY5ODlcIjogW1wiZigxL2NvcyhhKngpLGxvZyh0YW4ocGkvNCthKngvMikpL2EpXCJdLFxuICAgIFwiMC41OTEzNjhcIjogW1wiZigxL3NpbihhKngpLGxvZyh0YW4oYSp4LzIpKS9hKVwiXSxcbiAgICBcIjIuODU5NDYyXCI6IFtcImYoc2luKGEqeCleMix4LzItc2luKDIqYSp4KS8oNCphKSlcIl0sXG4gICAgXCIyLjEyODA1MFwiOiBbXCJmKHNpbihhKngpXjMsLWNvcyhhKngpKihzaW4oYSp4KV4yKzIpLygzKmEpKVwiLCBcImYoc2luKGEqeCleNCwzLzgqeC1zaW4oMiphKngpLyg0KmEpK3Npbig0KmEqeCkvKDMyKmEpKVwiXSxcbiAgICBcIjEuMTE1MDkxXCI6IFtcImYoY29zKGEqeCleMix4LzIrc2luKDIqYSp4KS8oNCphKSlcIl0sXG4gICAgXCIxLjA4MTQ1MlwiOiBbXCJmKGNvcyhhKngpXjMsc2luKGEqeCkqKGNvcyhhKngpXjIrMikvKDMqYSkpXCIsIFwiZihjb3MoYSp4KV40LDMvOCp4K3NpbigyKmEqeCkvKDQqYSkrc2luKDQqYSp4KS8oMzIqYSkpXCJdLFxuICAgIFwiMC4zNDk3MTZcIjogW1wiZigxL3NpbihhKngpXjIsLTEvKGEqdGFuKGEqeCkpKVwiXSxcbiAgICBcIjAuODk2Nzg4XCI6IFtcImYoMS9jb3MoYSp4KV4yLHRhbihhKngpL2EpXCJdLFxuICAgIFwiMS43ODU2NTRcIjogW1wiZihzaW4oYSp4KSpjb3MoYSp4KSxzaW4oYSp4KV4yLygyKmEpKVwiXSxcbiAgICBcIjMuMTg4NTYwXCI6IFtcImYoc2luKGEqeCleMipjb3MoYSp4KV4yLC1zaW4oNCphKngpLygzMiphKSt4LzgpXCJdLFxuICAgIFwiMS41MTY0NjNcIjogW1wiZihzaW4oYSp4KS9jb3MoYSp4KV4yLDEvKGEqY29zKGEqeCkpKVwiXSxcbiAgICBcIjIuNzA3ODc5XCI6IFtcImYoc2luKGEqeCleMi9jb3MoYSp4KSwobG9nKHRhbihwaS80K2EqeC8yKSktc2luKGEqeCkpL2EpXCJdLFxuICAgIFwiMC4zNjkyOTNcIjogW1wiZihjb3MoYSp4KS9zaW4oYSp4KV4yLC0xLyhhKnNpbihhKngpKSlcIl0sXG4gICAgXCIwLjU2MDAxOVwiOiBbXCJmKDEvKHNpbihhKngpKmNvcyhhKngpKSxsb2codGFuKGEqeCkpL2EpXCJdLFxuICAgIFwiMC41MzAzMzJcIjogW1wiZigxLyhzaW4oYSp4KSpjb3MoYSp4KV4yKSwoMS9jb3MoYSp4KStsb2codGFuKGEqeC8yKSkpL2EpXCJdLFxuICAgIFwiMC4zMzExNzdcIjogW1wiZigxLyhzaW4oYSp4KV4yKmNvcyhhKngpKSwobG9nKHRhbihwaS80K2EqeC8yKSktMS9zaW4oYSp4KSkvYSlcIl0sXG4gICAgXCIwLjMxMzYyMVwiOiBbXCJmKDEvKHNpbihhKngpXjIqY29zKGEqeCleMiksLTIvKGEqdGFuKDIqYSp4KSkpXCJdLFxuICAgIFwiMy4xNzIzNjVcIjogW1wiZihzaW4oYStiKngpLC1jb3MoYStiKngpL2IpXCJdLFxuICAgIFwiMS4xMjcxNjJcIjogW1wiZihjb3MoYStiKngpLHNpbihhK2IqeCkvYilcIl0sXG4gICAgXCIwLjM1MjcxNFwiOiBbXCJmKDEvKGIrYipzaW4oYSp4KSksLXRhbihwaS80LWEqeC8yKS9hL2IpXCIsIFwiZigxLyhiLWIqc2luKGEqeCkpLHRhbihwaS80K2EqeC8yKS9hL2IpXCIsIFwiZigxLyhhK2Iqc2luKHgpKSwxL3NxcnQoYl4yLWFeMikqbG9nKChhKnRhbih4LzIpK2Itc3FydChiXjItYV4yKSkvKGEqdGFuKHgvMikrYitzcXJ0KGJeMi1hXjIpKSksYl4yLWFeMilcIl0sXG4gICAgXCIwLjQ1NDUxNVwiOiBbXCJmKDEvKGIrYipjb3MoYSp4KSksdGFuKGEqeC8yKS9hL2IpXCIsIFwiZigxLyhiLWIqY29zKGEqeCkpLC0xL3RhbihhKngvMikvYS9iKVwiLCBcImYoMS8oYStiKmNvcyh4KSksMS9zcXJ0KGJeMi1hXjIpKmxvZygoc3FydChiXjItYV4yKSp0YW4oeC8yKSthK2IpLyhzcXJ0KGJeMi1hXjIpKnRhbih4LzIpLWEtYikpLGJeMi1hXjIpXCJdLFxuICAgIFwiMS42MTU0NDFcIjogW1wiZih4KnNpbihhKngpLHNpbihhKngpL2FeMi14KmNvcyhhKngpL2EpXCJdLFxuICAgIFwiMS41NDMyNjNcIjogW1wiZih4XjIqc2luKGEqeCksMip4KnNpbihhKngpL2FeMi0oYV4yKnheMi0yKSpjb3MoYSp4KS9hXjMpXCJdLFxuICAgIFwiMS4wMDg3OThcIjogW1wiZih4KmNvcyhhKngpLGNvcyhhKngpL2FeMit4KnNpbihhKngpL2EpXCJdLFxuICAgIFwiMC45NjM3MjRcIjogW1wiZih4XjIqY29zKGEqeCksMip4KmNvcyhhKngpL2FeMisoYV4yKnheMi0yKSpzaW4oYSp4KS9hXjMpXCJdLFxuICAgIFwiMS42MTE5MzhcIjogW1wiZihhcmNzaW4oYSp4KSx4KmFyY3NpbihhKngpK3NxcnQoMS1hXjIqeF4yKS9hKVwiXSxcbiAgICBcIjEuNzkxMDMzXCI6IFtcImYoYXJjY29zKGEqeCkseCphcmNjb3MoYSp4KS1zcXJ0KDEtYV4yKnheMikvYSlcIl0sXG4gICAgXCIxLjEyMzU5OVwiOiBbXCJmKGFyY3RhbihhKngpLHgqYXJjdGFuKGEqeCktMS8yKmxvZygxK2FeMip4XjIpL2EpXCJdLFxuICAgIFwiMS4zODcwMzFcIjogW1wiZih4KmxvZyhhKngpLHheMipsb2coYSp4KS8yLXheMi80KVwiXSxcbiAgICBcIjEuMzI1MDU4XCI6IFtcImYoeF4yKmxvZyhhKngpLHheMypsb2coYSp4KS8zLTEvOSp4XjMpXCJdLFxuICAgIFwiMi4xMDgwMThcIjogW1wiZihsb2coeCleMix4KmxvZyh4KV4yLTIqeCpsb2coeCkrMip4KVwiXSxcbiAgICBcIjAuNDAzMjE0XCI6IFtcImYoMS94KjEvKGErbG9nKHgpKSxsb2coYStsb2coeCkpKVwiXSxcbiAgICBcIjIuMjY5MjY4XCI6IFtcImYobG9nKGEqeCtiKSwoYSp4K2IpKmxvZyhhKngrYikvYS14KVwiXSxcbiAgICBcIjIuNDg2NDk4XCI6IFtcImYobG9nKGEqeCtiKS94XjIsYS9iKmxvZyh4KS0oYSp4K2IpKmxvZyhhKngrYikvYi94KVwiXSxcbiAgICBcIjEuNzY5NzMzXCI6IFtcImYoc2luaCh4KSxjb3NoKHgpKVwiXSxcbiAgICBcIjEuODgzODU4XCI6IFtcImYoY29zaCh4KSxzaW5oKHgpKVwiXSxcbiAgICBcIjEuNjA2MTQwXCI6IFtcImYodGFuaCh4KSxsb2coY29zaCh4KSkpXCJdLFxuICAgIFwiMS42OTA2NjFcIjogW1wiZih4KnNpbmgoeCkseCpjb3NoKHgpLXNpbmgoeCkpXCJdLFxuICAgIFwiMS43OTk2ODhcIjogW1wiZih4KmNvc2goeCkseCpzaW5oKHgpLWNvc2goeCkpXCJdLFxuICAgIFwiMy4xMzE5NTRcIjogW1wiZihzaW5oKHgpXjIsc2luaCgyKngpLzQteC8yKVwiXSxcbiAgICBcIjIuNTc5Njg1XCI6IFtcImYodGFuaCh4KV4yLHgtdGFuaCh4KSlcIl0sXG4gICAgXCIzLjU0ODkyM1wiOiBbXCJmKGNvc2goeCleMixzaW5oKDIqeCkvNCt4LzIpXCJdLFxuICAgIFwiMS4wNTg4NjZcIjogW1wiZih4XjMqZXhwKGEqeF4yKSxleHAoYSp4XjIpKih4XjIvYS0xLyhhXjIpKS8yKVwiXSxcbiAgICBcIjEuMjM1MjcwXCI6IFtcImYoeF4zKmV4cChhKnheMitiKSxleHAoYSp4XjIpKmV4cChiKSooeF4yL2EtMS8oYV4yKSkvMilcIl0sXG4gICAgXCIxLjEzMDc4M1wiOiBbXCJmKGV4cChhKnheMiksLWkqc3FydChwaSkqZXJmKGkqc3FydChhKSp4KS9zcXJ0KGEpLzIpXCJdLFxuICAgIFwiMS4wNzg2OThcIjogW1wiZihlcmYoYSp4KSx4KmVyZihhKngpK2V4cCgtYV4yKnheMikvYS9zcXJ0KHBpKSlcIl0sXG4gICAgXCIyLjU3MzY1MFwiOiBbXCJmKHheMiooMS14XjIpXigzLzIpLCh4KnNxcnQoMS14XjIpKigtOCp4XjQrMTQqeF4yLTMpKzMqYXJjc2luKHgpKS80OClcIiwgXCJmKHheMiooMS14XjIpXig1LzIpLCh4KnNxcnQoMS14XjIpKig0OCp4XjYtMTM2KnheNCsxMTgqeF4yLTE1KSsxNSphcmNzaW4oeCkpLzM4NClcIl0sXG4gICAgXCIyLjY0MDY2NlwiOiBbXCJmKHheNCooMS14XjIpXigzLzIpLCgteCpzcXJ0KDEteF4yKSooMTYqeF42LTI0KnheNCsyKnheMiszKSszKmFyY3Npbih4KSkvMTI4KVwiXSxcbiAgICBcIjEuMDg2NDg3XCI6IFtcImYoeCpleHAoYSp4KSxleHAoYSp4KSooYSp4LTEpLyhhXjIpKVwiXSxcbiAgICBcIjEuMjY3NDkzXCI6IFtcImYoeCpleHAoYSp4K2IpLGV4cChhKngrYikqKGEqeC0xKS8oYV4yKSlcIl0sXG4gICAgXCIxLjAzNzk0M1wiOiBbXCJmKHheMipleHAoYSp4KSxleHAoYSp4KSooYV4yKnheMi0yKmEqeCsyKS8oYV4zKSlcIl0sXG4gICAgXCIxLjIxMDg2MlwiOiBbXCJmKHheMipleHAoYSp4K2IpLGV4cChhKngrYikqKGFeMip4XjItMiphKngrMikvKGFeMykpXCJdLFxuICAgIFwiMS4wNjQ5NzBcIjogW1wiZih4XjMqZXhwKGEqeCksZXhwKGEqeCkqeF4zL2EtMy9hKmludGVncmFsKHheMipleHAoYSp4KSx4KSlcIl0sXG4gICAgXCIxLjI0MjM5MlwiOiBbXCJmKHheMypleHAoYSp4K2IpLGV4cChhKngrYikqeF4zL2EtMy9hKmludGVncmFsKHheMipleHAoYSp4K2IpLHgpKVwiXVxuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgSW5wdXQ6ICAgIE1hdHJpeCBvbiBzdGFjayAobXVzdCBoYXZlIHR3byBkaW1lbnNpb25zIGJ1dFxuICAvLyAgICAgICAgaXQgY2FuIGJlIG5vbi1udW1lcmljYWwpXG5cbiAgLy8gIE91dHB1dDogICAgSW52ZXJzZSBvbiBzdGFja1xuXG4gIC8vICBFeGFtcGxlOlxuXG4gIC8vICA+IGludigoKDEsMiksKDMsNCkpXG4gIC8vICAoKC0yLDEpLCgzLzIsLTEvMikpXG5cbiAgLy8gID4gaW52KCgoYSxiKSwoYyxkKSlcbiAgLy8gICgoZCAvIChhIGQgLSBiIGMpLC1iIC8gKGEgZCAtIGIgYykpLCgtYyAvIChhIGQgLSBiIGMpLGEgLyAoYSBkIC0gYiBjKSkpXG5cbiAgLy8gIE5vdGU6XG5cbiAgLy8gIFRISVMgSVMgRElGRkVSRU5UIEZST00gSU5WRVJTRSBPRiBBTiBFWFBSRVNTSU9OIChpbnYpXG4gIC8vICAgVXNlcyBHYXVzc2lhbiBlbGltaW5hdGlvbiBmb3IgbnVtZXJpY2FsIG1hdHJpY2VzLlxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgSU5WX2NoZWNrX2FyZyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghaXN0ZW5zb3IocDEpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2UgaWYgKHAxLnRlbnNvci5uZGltICE9PSAyKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2UgaWYgKHAxLnRlbnNvci5kaW1bMF0gIT09IHAxLnRlbnNvci5kaW1bMV0pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH07XG5cbiAgaW52ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yLCBlYWNoRW50cnksIGksIG4sIG8sIHJlZjtcbiAgICBpID0gMDtcbiAgICBuID0gMDtcbiAgICAvL1UgKiphXG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgLy8gYW4gaW52IGp1c3QgZ29lcyBhd2F5IHdoZW5cbiAgICAvLyBhcHBsaWVkIHRvIGFub3RoZXIgaW52XG4gICAgaWYgKGlzaW52KHAxKSkge1xuICAgICAgcHVzaChjYXIoY2RyKHAxKSkpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBpbnZlcnNlIGdvZXMgYXdheSBpbiBjYXNlXG4gICAgLy8gb2YgaWRlbnRpdHkgbWF0cml4XG4gICAgaWYgKGlzaWRlbnRpdHltYXRyaXgocDEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZGlzdHJpYnV0ZSB0aGUgaW52ZXJzZSBvZiBhIGRvdFxuICAgIC8vIGlmIGluIGV4cGFuZGluZyBtb2RlXG4gICAgLy8gbm90ZSB0aGF0IHRoZSBkaXN0cmlidXRpb24gaGFwcGVuc1xuICAgIC8vIGluIHJldmVyc2UuXG4gICAgLy8gVGhlIGRvdCBvcGVyYXRvciBpcyBub3RcbiAgICAvLyBjb21tdXRhdGl2ZSwgc28sIGl0IG1hdHRlcnMuXG4gICAgaWYgKGV4cGFuZGluZyAmJiBpc2lubmVyb3Jkb3QocDEpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICBhY2N1bXVsYXRvciA9IFtdO1xuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaChjYXIocDEpKTtcbiAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgfVxuICAgICAgZm9yIChlYWNoRW50cnkgPSBvID0gcmVmID0gYWNjdW11bGF0b3IubGVuZ3RoIC0gMTsgKHJlZiA8PSAwID8gbyA8PSAwIDogbyA+PSAwKTsgZWFjaEVudHJ5ID0gcmVmIDw9IDAgPyArK28gOiAtLW8pIHtcbiAgICAgICAgcHVzaChhY2N1bXVsYXRvcltlYWNoRW50cnldKTtcbiAgICAgICAgaW52KCk7XG4gICAgICAgIGlmIChlYWNoRW50cnkgIT09IGFjY3VtdWxhdG9yLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBpbm5lcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChJTlZfY2hlY2tfYXJnKCkgPT09IDApIHtcbiAgICAgIHB1c2hfc3ltYm9sKElOVik7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc051bWVyaWNBdG9tT3JUZW5zb3IocDEpKSB7XG4gICAgICB5eWludmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBhZGooKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgZGV0KCk7XG4gICAgICBwMiA9IHBvcCgpO1xuICAgICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwMikpIHtcbiAgICAgICAgc3RvcChcImludmVyc2Ugb2Ygc2luZ3VsYXIgbWF0cml4XCIpO1xuICAgICAgfVxuICAgICAgcHVzaChwMik7XG4gICAgICBkaXZpZGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBpbnZnID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKElOVl9jaGVja19hcmcoKSA9PT0gMCkge1xuICAgICAgcHVzaF9zeW1ib2woSU5WRyk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHl5aW52ZygpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gaW52ZXJzZSB1c2luZyBnYXVzc2lhbiBlbGltaW5hdGlvblxuICB5eWludmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCwgaSwgaTEsIGosIGoxLCBsMSwgbiwgbywgcmVmLCByZWYxLCByZWYyLCByZWYzO1xuICAgIGggPSAwO1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIG4gPSAwO1xuICAgIG4gPSBwMS50ZW5zb3IuZGltWzBdO1xuICAgIGggPSB0b3M7XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBmb3IgKGogPSBpMSA9IDAsIHJlZjEgPSBuOyAoMCA8PSByZWYxID8gaTEgPCByZWYxIDogaTEgPiByZWYxKTsgaiA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgcHVzaChvbmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2goemVybyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gajEgPSAwLCByZWYyID0gbiAqIG47ICgwIDw9IHJlZjIgPyBqMSA8IHJlZjIgOiBqMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytqMSA6IC0tajEpIHtcbiAgICAgIHB1c2gocDEudGVuc29yLmVsZW1baV0pO1xuICAgIH1cbiAgICBJTlZfZGVjb21wKG4pO1xuICAgIHAxID0gYWxsb2NfdGVuc29yKG4gKiBuKTtcbiAgICBwMS50ZW5zb3IubmRpbSA9IDI7XG4gICAgcDEudGVuc29yLmRpbVswXSA9IG47XG4gICAgcDEudGVuc29yLmRpbVsxXSA9IG47XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYzID0gbiAqIG47ICgwIDw9IHJlZjMgPyBsMSA8IHJlZjMgOiBsMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAxLnRlbnNvci5lbGVtW2ldID0gc3RhY2tbaCArIGldO1xuICAgIH1cbiAgICBtb3ZlVG9zKHRvcyAtIDIgKiBuICogbik7XG4gICAgcmV0dXJuIHB1c2gocDEpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgSW5wdXQ6ICAgIG4gKiBuIHVuaXQgbWF0cml4IG9uIHN0YWNrXG5cbiAgLy8gICAgICBuICogbiBvcGVyYW5kIG9uIHN0YWNrXG5cbiAgLy8gIE91dHB1dDogICAgbiAqIG4gaW52ZXJzZSBtYXRyaXggb24gc3RhY2tcblxuICAvLyAgICAgIG4gKiBuIGdhcmJhZ2Ugb24gc3RhY2tcblxuICAvLyAgICAgIHAyIG1hbmdsZWRcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy9kZWZpbmUgQShpLCBqKSBzdGFja1thICsgbiAqIChpKSArIChqKV1cbiAgLy9kZWZpbmUgVShpLCBqKSBzdGFja1t1ICsgbiAqIChpKSArIChqKV1cbiAgSU5WX2RlY29tcCA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgYSwgZCwgaSwgaTEsIGosIGoxLCBsMSwgbywgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZXN1bHRzLCB1O1xuICAgIGEgPSAwO1xuICAgIGQgPSAwO1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIHUgPSAwO1xuICAgIGEgPSB0b3MgLSBuICogbjtcbiAgICB1ID0gYSAtIG4gKiBuO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGQgPSBvID0gMCwgcmVmID0gbjsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBkID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgIC8vIGRpYWdvbmFsIGVsZW1lbnQgemVybz9cbiAgICAgIGlmIChlcXVhbChzdGFja1thICsgbiAqIGQgKyBkXSwgemVybykpIHtcbi8vIGZpbmQgYSBuZXcgcm93XG4gICAgICAgIGZvciAoaSA9IGkxID0gcmVmMSA9IGQgKyAxLCByZWYyID0gbjsgKHJlZjEgPD0gcmVmMiA/IGkxIDwgcmVmMiA6IGkxID4gcmVmMik7IGkgPSByZWYxIDw9IHJlZjIgPyArK2kxIDogLS1pMSkge1xuICAgICAgICAgIGlmICghZXF1YWwoc3RhY2tbYSArIG4gKiBpICsgZF0sIHplcm8pKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IG4pIHtcbiAgICAgICAgICBzdG9wKFwiaW52ZXJzZSBvZiBzaW5ndWxhciBtYXRyaXhcIik7XG4gICAgICAgIH1cbi8vIGV4Y2hhbmdlIHJvd3NcbiAgICAgICAgZm9yIChqID0gajEgPSAwLCByZWYzID0gbjsgKDAgPD0gcmVmMyA/IGoxIDwgcmVmMyA6IGoxID4gcmVmMyk7IGogPSAwIDw9IHJlZjMgPyArK2oxIDogLS1qMSkge1xuICAgICAgICAgIHAyID0gc3RhY2tbYSArIG4gKiBkICsgal07XG4gICAgICAgICAgc3RhY2tbYSArIG4gKiBkICsgal0gPSBzdGFja1thICsgbiAqIGkgKyBqXTtcbiAgICAgICAgICBzdGFja1thICsgbiAqIGkgKyBqXSA9IHAyO1xuICAgICAgICAgIHAyID0gc3RhY2tbdSArIG4gKiBkICsgal07XG4gICAgICAgICAgc3RhY2tbdSArIG4gKiBkICsgal0gPSBzdGFja1t1ICsgbiAqIGkgKyBqXTtcbiAgICAgICAgICBzdGFja1t1ICsgbiAqIGkgKyBqXSA9IHAyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBtdWx0aXBseSB0aGUgcGl2b3Qgcm93IGJ5IDEgLyBwaXZvdFxuICAgICAgcDIgPSBzdGFja1thICsgbiAqIGQgKyBkXTtcbiAgICAgIGZvciAoaiA9IGwxID0gMCwgcmVmNCA9IG47ICgwIDw9IHJlZjQgPyBsMSA8IHJlZjQgOiBsMSA+IHJlZjQpOyBqID0gMCA8PSByZWY0ID8gKytsMSA6IC0tbDEpIHtcbiAgICAgICAgaWYgKGogPiBkKSB7XG4gICAgICAgICAgcHVzaChzdGFja1thICsgbiAqIGQgKyBqXSk7XG4gICAgICAgICAgcHVzaChwMik7XG4gICAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgICAgc3RhY2tbYSArIG4gKiBkICsgal0gPSBwb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKHN0YWNrW3UgKyBuICogZCArIGpdKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBzdGFja1t1ICsgbiAqIGQgKyBqXSA9IHBvcCgpO1xuICAgICAgfVxuICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG0xLCByZWY1LCByZXN1bHRzMTtcbi8vIGNsZWFyIG91dCB0aGUgY29sdW1uIGFib3ZlIGFuZCBiZWxvdyB0aGUgcGl2b3RcbiAgICAgICAgcmVzdWx0czEgPSBbXTtcbiAgICAgICAgZm9yIChpID0gbTEgPSAwLCByZWY1ID0gbjsgKDAgPD0gcmVmNSA/IG0xIDwgcmVmNSA6IG0xID4gcmVmNSk7IGkgPSAwIDw9IHJlZjUgPyArK20xIDogLS1tMSkge1xuICAgICAgICAgIGlmIChpID09PSBkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbXVsdGlwbGllclxuICAgICAgICAgIHAyID0gc3RhY2tbYSArIG4gKiBpICsgZF07XG4gICAgICAgICAgcmVzdWx0czEucHVzaCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbjEsIHJlZjYsIHJlc3VsdHMyO1xuLy8gYWRkIHBpdm90IHJvdyB0byBpLXRoIHJvd1xuICAgICAgICAgICAgcmVzdWx0czIgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaiA9IG4xID0gMCwgcmVmNiA9IG47ICgwIDw9IHJlZjYgPyBuMSA8IHJlZjYgOiBuMSA+IHJlZjYpOyBqID0gMCA8PSByZWY2ID8gKytuMSA6IC0tbjEpIHtcbiAgICAgICAgICAgICAgaWYgKGogPiBkKSB7XG4gICAgICAgICAgICAgICAgcHVzaChzdGFja1thICsgbiAqIGkgKyBqXSk7XG4gICAgICAgICAgICAgICAgcHVzaChzdGFja1thICsgbiAqIGQgKyBqXSk7XG4gICAgICAgICAgICAgICAgcHVzaChwMik7XG4gICAgICAgICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICAgICAgICAgIHN0YWNrW2EgKyBuICogaSArIGpdID0gcG9wKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcHVzaChzdGFja1t1ICsgbiAqIGkgKyBqXSk7XG4gICAgICAgICAgICAgIHB1c2goc3RhY2tbdSArIG4gKiBkICsgal0pO1xuICAgICAgICAgICAgICBwdXNoKHAyKTtcbiAgICAgICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICAgICAgc3VidHJhY3QoKTtcbiAgICAgICAgICAgICAgcmVzdWx0czIucHVzaChzdGFja1t1ICsgbiAqIGkgKyBqXSA9IHBvcCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzMjtcbiAgICAgICAgICB9KSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0czE7XG4gICAgICB9KSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgREVCVUdfSVMgPSBmYWxzZTtcblxuICAvLyBwIGlzIGEgVVxuICAvLyB0aGlzIHJvdXRpbmUgaXMgYSBzaW1wbGUgY2hlY2sgb24gd2hldGhlciB3ZSBoYXZlXG4gIC8vIGEgYmFzaWMgemVybyBpbiBvdXIgaGFuZHMuIEl0IGRvZXNuJ3QgcGVyZm9ybSBhbnlcbiAgLy8gY2FsY3VsYXRpb25zIG9yIHNpbXBsaWZpY2F0aW9ucy5cbiAgaXNaZXJvQXRvbSA9IGZ1bmN0aW9uKHApIHtcbiAgICBzd2l0Y2ggKHAuaykge1xuICAgICAgY2FzZSBOVU06XG4gICAgICAgIGlmIChNWkVSTyhwLnEuYSkpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRE9VQkxFOlxuICAgICAgICBpZiAocC5kID09PSAwLjApIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvLyBwIGlzIGEgVVxuICAvLyB0aGlzIHJvdXRpbmUgaXMgYSBzaW1wbGUgY2hlY2sgb24gd2hldGhlciB3ZSBoYXZlXG4gIC8vIGEgYmFzaWMgemVybyBpbiBvdXIgaGFuZHMuIEl0IGRvZXNuJ3QgcGVyZm9ybSBhbnlcbiAgLy8gY2FsY3VsYXRpb25zIG9yIHNpbXBsaWZpY2F0aW9ucy5cbiAgaXNaZXJvVGVuc29yID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBpLCBvLCByZWY7XG4gICAgaWYgKHAuayAhPT0gVEVOU09SKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IHAudGVuc29yLm5lbGVtOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgaWYgKCFpc1plcm9BdG9tT3JUZW5zb3IocC50ZW5zb3IuZWxlbVtpXSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAxO1xuICB9O1xuXG4gIC8vIHAgaXMgYSBVXG4gIC8vIHRoaXMgcm91dGluZSBpcyBhIHNpbXBsZSBjaGVjayBvbiB3aGV0aGVyIHdlIGhhdmVcbiAgLy8gYSBiYXNpYyB6ZXJvIGluIG91ciBoYW5kcy4gSXQgZG9lc24ndCBwZXJmb3JtIGFueVxuICAvLyBjYWxjdWxhdGlvbnMgb3Igc2ltcGxpZmljYXRpb25zLlxuICBpc1plcm9BdG9tT3JUZW5zb3IgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGlzWmVyb0F0b20ocCkgfHwgaXNaZXJvVGVuc29yKHApO1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgYSBrZXkgcm91dGluZSB0byB0cnkgdG8gZGV0ZXJtaW5lIHdoZXRoZXJcbiAgLy8gdGhlIGFyZ3VtZW50IGxvb2tzIGxpa2UgemVyby9mYWxzZSwgb3Igbm9uLXplcm8vdHJ1ZSxcbiAgLy8gb3IgdW5kZXRlcm1pbmVkLlxuICAvLyBUaGlzIGlzIHVzZWZ1bCBpbiB0d28gaW5zdGFuY2VzOlxuICAvLyAgKiB0byBkZXRlcm1pbmUgaWYgYSBwcmVkaWNhdGUgaXMgdHJ1ZS9mYWxzZVxuICAvLyAgKiB0byBkZXRlcm1pbmUgaWYgcGFydGljdWxhciBxdWFudGl0eSBpcyB6ZXJvXG4gIC8vIE5vdGUgdGhhdCBpZiBvbmUgd2FudHMgdG8gY2hlY2sgaWYgd2UgaGF2ZSBhIHNpbXBsZVxuICAvLyB6ZXJvIGF0b20gb3IgdGVuc29yIGluIG91ciBoYW5kcywgdGhlbiB0aGUgaXNaZXJvQXRvbU9yVGVuc29yXG4gIC8vIHJvdXRpbmUgaXMgc3VmZmljaWVudC5cbiAgaXNaZXJvTGlrZU9yTm9uWmVyb0xpa2VPclVuZGV0ZXJtaW5lZCA9IGZ1bmN0aW9uKHZhbHVlT3JQcmVkaWNhdGUpIHtcbiAgICB2YXIgZXZhbGxlZEFyZ3VtZW50O1xuICAgIC8vIHB1c2ggdGhlIGFyZ3VtZW50XG4gICAgcHVzaCh2YWx1ZU9yUHJlZGljYXRlKTtcbiAgICAvLyBqdXN0IGxpa2UgRXZhbCBidXQgdHVybnMgYXNzaWdubWVudHMgaW50b1xuICAgIC8vIGVxdWFsaXR5IGNoZWNrc1xuICAgIEV2YWxfcHJlZGljYXRlKCk7XG4gICAgZXZhbGxlZEFyZ3VtZW50ID0gcG9wKCk7XG4gICAgLy8gT0sgZmlyc3QgY2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlXG4gICAgLy8gYSBzaW1wbGUgemVybyAob3Igc2ltcGxlIHplcm8gdGVuc29yKVxuICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoZXZhbGxlZEFyZ3VtZW50KSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIGFsc28gY2hlY2sgaWYgd2UgaGF2ZSBhIHNpbXBsZSBudW1lcmljIHZhbHVlLCBvciBhIHRlbnNvclxuICAgIC8vIGZ1bGwgb2Ygc2ltcGxlIG51bWVyaWMgdmFsdWVzIChpLmUuIHN0cmFpZ2h0IGRvdWJsZXMgb3IgZnJhY3Rpb25zKS5cbiAgICAvLyBJbiBzdWNoIGNhc2VzLCBzaW5jZSB3ZVxuICAgIC8vIGp1c3QgZXhjbHVkZWQgdGhleSBhcmUgemVybywgdGhlbiB3ZSB0YWtlIGl0IGFzXG4gICAgLy8gYSBcInRydWVcIlxuICAgIGlmIChpc051bWVyaWNBdG9tT3JUZW5zb3IoZXZhbGxlZEFyZ3VtZW50KSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIC8vIGlmIHdlIGFyZSBoZXJlIHdlIGFyZSBpbiB0aGUgY2FzZSBvZiB2YWx1ZSB0aGF0XG4gICAgLy8gaXMgbm90IGEgemVybyBhbmQgbm90IGEgc2ltcGxlIG51bWVyaWMgdmFsdWUuXG4gICAgLy8gZS5nLiBzdHVmZiBsaWtlXG4gICAgLy8gJ3NxcnQoMiknLCBvciAnc2luKDQ1KScgb3IgJzEraScsIG9yICdhJ1xuICAgIC8vIHNvIGluIHN1Y2ggY2FzZXMgbGV0J3MgdHJ5IHRvIGRvIGEgZmxvYXQoKVxuICAgIC8vIHNvIHdlIG1pZ2h0IGdldCBkb3duIHRvIGEgc2ltcGxlIG51bWVyaWMgdmFsdWVcbiAgICAvLyBpbiBzb21lIG9mIHRob3NlIGNhc2VzXG4gICAgcHVzaChldmFsbGVkQXJndW1lbnQpO1xuICAgIHp6ZmxvYXQoKTtcbiAgICBldmFsbGVkQXJndW1lbnQgPSBwb3AoKTtcbiAgICAvLyBhbnl0aGluZyB0aGF0IGNvdWxkIGJlIGNhbGN1bGF0ZWQgZG93biB0byBhIHNpbXBsZVxuICAgIC8vIG51bWVyaWMgdmFsdWUgaXMgbm93IGluZGVlZCBlaXRoZXIgYSBcbiAgICAvLyBkb3VibGUgT1IgYSBkb3VibGUgd2l0aCBhbiBpbWFnaW5hcnkgY29tcG9uZW50XG4gICAgLy8gZS5nLiAyLjAgb3IgMi40ICsgaSo1LjZcbiAgICAvLyAoRXZlcnl0aGluZyBlbHNlIGFyZSB0aGluZ3MgdGhhdCBkb24ndCBoYXZlIGEgbnVtZXJpY1xuICAgIC8vIHZhbHVlIGUuZy4gJ2ErYicpXG5cbiAgICAvLyBTbywgbGV0J3MgdGFrZSBjYXJlIG9mIHRoZSBjYXNlIHdoZXJlIHdlIGhhdmVcbiAgICAvLyBhIHNpbXBsZSBudW1lcmljIHZhbHVlIHdpdGggTk8gaW1hZ2luYXJ5IGNvbXBvbmVudCxcbiAgICAvLyB0aGluZ3MgbGlrZSBzcXJ0KDIpIG9yIHNpbihQSSlcbiAgICAvLyBieSBkb2luZyB0aGUgc2ltcGxlIG51bWVyaWNcbiAgICAvLyB2YWx1ZXMgY2hlY2tzIGFnYWluXG4gICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihldmFsbGVkQXJndW1lbnQpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGlzTnVtZXJpY0F0b21PclRlbnNvcihldmFsbGVkQXJndW1lbnQpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgLy8gaGVyZSB3ZSBzdGlsbCBoYXZlIGNhc2VzIG9mIHNpbXBsZSBudW1lcmljIHZhbHVlc1xuICAgIC8vIFdJVEggYW4gaW1hZ2luYXJ5IGNvbXBvbmVudCBlLmcuICcxK2knLFxuICAgIC8vIG9yIHRoaW5ncyB0aGF0IGRvbid0IGhhdmUgYSBudW1lcmljIHZhbHVlIGUuZy4gJ2EnXG5cbiAgICAvLyBzbyBub3cgbGV0J3MgdGFrZSBjYXJlIG9mIHRoZSBpbWFnaW5hcnkgbnVtYmVyczpcbiAgICAvLyBzaW5jZSB3ZSBKVVNUIGhhdmUgdG8gc3BvdCBcInplcm9zXCIgd2UgY2FuIGp1c3RcbiAgICAvLyBjYWxjdWxhdGUgdGhlIGFic29sdXRlIHZhbHVlIGFuZCByZS1kbyBhbGwgdGhlIGNoZWNrc1xuICAgIC8vIHdlIGp1c3QgZGlkXG4gICAgaWYgKEZpbmQoZXZhbGxlZEFyZ3VtZW50LCBpbWFnaW5hcnl1bml0KSkge1xuICAgICAgcHVzaChldmFsbGVkQXJndW1lbnQpO1xuICAgICAgYWJzVmFsRmxvYXQoKTtcbiAgICAgIEV2YWxfcHJlZGljYXRlKCk7XG4gICAgICBldmFsbGVkQXJndW1lbnQgPSBwb3AoKTtcbiAgICAgIC8vIHJlLWRvIHRoZSBzaW1wbGUtbnVtYmVyIGNoZWNrcy4uLlxuICAgICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihldmFsbGVkQXJndW1lbnQpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGlzTnVtZXJpY0F0b21PclRlbnNvcihldmFsbGVkQXJndW1lbnQpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBoZXJlIHdlIGhhdmUgc3R1ZmYgdGhhdCBpcyBub3QgcmVjb25kdWNpYmxlIHRvIGFueVxuICAgIC8vIG51bWVyaWMgdmFsdWUgKG9yIHRlbnNvciB3aXRoIG51bWVyaWMgdmFsdWVzKSBlLmcuXG4gICAgLy8gJ2ErYicsIHNvIGl0IGp1c3QgbWVhbnMgdGhhdCB3ZSBqdXN0IGRvbid0IGtub3cgdGhlXG4gICAgLy8gdHJ1dGggdmFsdWUsIHNvIHdlIGhhdmVcbiAgICAvLyB0byBsZWF2ZSB0aGUgd2hvbGUgdGhpbmcgdW5ldmFsbGVkXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLy8gcCBpcyBhIFVcbiAgaXNuZWdhdGl2ZW51bWJlciA9IGZ1bmN0aW9uKHApIHtcbiAgICBzd2l0Y2ggKHAuaykge1xuICAgICAgY2FzZSBOVU06XG4gICAgICAgIGlmIChNU0lHTihwLnEuYSkgPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgICAgaWYgKHAuZCA8IDAuMCkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIC8vIHAgaXMgYSBVXG4gIGlzcG9zaXRpdmVudW1iZXIgPSBmdW5jdGlvbihwKSB7XG4gICAgc3dpdGNoIChwLmspIHtcbiAgICAgIGNhc2UgTlVNOlxuICAgICAgICBpZiAoTVNJR04ocC5xLmEpID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgICAgaWYgKHAuZCA+IDAuMCkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIC8vIHAgaXMgYSBVXG4gIGlzcGx1c3R3byA9IGZ1bmN0aW9uKHApIHtcbiAgICBzd2l0Y2ggKHAuaykge1xuICAgICAgY2FzZSBOVU06XG4gICAgICAgIGlmIChNRVFVQUwocC5xLmEsIDIpICYmIE1FUVVBTChwLnEuYiwgMSkpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRE9VQkxFOlxuICAgICAgICBpZiAocC5kID09PSAyLjApIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvLyBwIGlzIGEgVVxuICBpc3BsdXNvbmUgPSBmdW5jdGlvbihwKSB7XG4gICAgc3dpdGNoIChwLmspIHtcbiAgICAgIGNhc2UgTlVNOlxuICAgICAgICBpZiAoTUVRVUFMKHAucS5hLCAxKSAmJiBNRVFVQUwocC5xLmIsIDEpKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgICAgaWYgKHAuZCA9PT0gMS4wKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgaXNtaW51c29uZSA9IGZ1bmN0aW9uKHApIHtcbiAgICBzd2l0Y2ggKHAuaykge1xuICAgICAgY2FzZSBOVU06XG4gICAgICAgIGlmIChNRVFVQUwocC5xLmEsIC0xKSAmJiBNRVFVQUwocC5xLmIsIDEpKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgICAgaWYgKHAuZCA9PT0gLTEuMCkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIGlzb25lID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBpc3BsdXNvbmUocCkgfHwgaXNtaW51c29uZShwKTtcbiAgfTtcblxuICBpc2ludGVnZXIgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKHAuayA9PT0gTlVNICYmIE1FUVVBTChwLnEuYiwgMSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgaXNpbnRlZ2Vyb3JpbnRlZ2VyZmxvYXQgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKHAuayA9PT0gRE9VQkxFKSB7XG4gICAgICBpZiAocC5kID09PSBNYXRoLnJvdW5kKHAuZCkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIGlzaW50ZWdlcihwKTtcbiAgfTtcblxuICBpc25vbm5lZ2F0aXZlaW50ZWdlciA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoaXNyYXRpb25hbChwKSAmJiBNRVFVQUwocC5xLmIsIDEpICYmIE1TSUdOKHAucS5hKSA9PT0gMSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcblxuICBpc3Bvc2ludCA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoaXNpbnRlZ2VyKHApICYmIE1TSUdOKHAucS5hKSA9PT0gMSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc3VuaXZhcnBvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtID0gZnVuY3Rpb24ocCwgeCkge1xuICAgIGlmICh4ID09IG51bGwpIHtcbiAgICAgIHB1c2gocCk7XG4gICAgICBndWVzcygpO1xuICAgICAgeCA9IHBvcCgpO1xuICAgICAgcG9wKCk7XG4gICAgfVxuICAgIGlmIChpc3BvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtKHAsIHgpICYmIChGaW5kKHAsIHN5bWJvbChTWU1CT0xfWCkpICsgRmluZChwLCBzeW1ib2woU1lNQk9MX1kpKSArIEZpbmQocCwgc3ltYm9sKFNZTUJPTF9aKSkgPT09IDEpKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHNvbWV0aW1lcyB3ZSB3YW50IHRvIGNoZWNrIGlmIHdlIGhhdmUgYSBwb2x5IGluIG91clxuICAvLyBoYW5kcywgaG93ZXZlciBpdCdzIGluIGZhY3RvcmVkIGZvcm0gYW5kIHdlIGRvbid0XG4gIC8vIHdhbnQgdG8gZXhwYW5kIGl0LlxuICBpc3BvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtID0gZnVuY3Rpb24ocCwgeCkge1xuICAgIHJldHVybiBpc3BvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtX2ZhY3RvcihwLCB4KTtcbiAgfTtcblxuICBpc3BvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtX2ZhY3RvciA9IGZ1bmN0aW9uKHAsIHgpIHtcbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImlzcG9seWZhY3RvcmVkb3JleHBhbmRlZGZvcm1fZmFjdG9yIHRlc3RpbmcgXCIgKyBjYXIocCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNwb2x5ZmFjdG9yZWRvcmV4cGFuZGVkZm9ybV9wb3dlcihjYXIocCksIHgpKSB7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi4uLiB0ZXN0ZWQgbmVnYXRpdmU6XCIgKyBjYXIocCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBwID0gY2RyKHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpc3BvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtX3Bvd2VyKHAsIHgpO1xuICAgIH1cbiAgfTtcblxuICBpc3BvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtX3Bvd2VyID0gZnVuY3Rpb24ocCwgeCkge1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImlzcG9seWZhY3RvcmVkb3JleHBhbmRlZGZvcm1fcG93ZXIgKGlzcG9zaW50KGNhZGRyKHApKSBcIiArIChpc3Bvc2ludChjYWRkcihwKSksIERFQlVHID8gY29uc29sZS5sb2coXCJpc3BvbHlmYWN0b3JlZG9yZXhwYW5kZWRmb3JtX3Bvd2VyIGlzcG9seWV4cGFuZGVkZm9ybV9leHByKGNhZHIocCksIHgpKSBcIiArIGlzcG9seWV4cGFuZGVkZm9ybV9leHByKGNhZHIocCksIHgpKSA6IHZvaWQgMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzcG9zaW50KGNhZGRyKHApKSAmJiBpc3BvbHlleHBhbmRlZGZvcm1fZXhwcihjYWRyKHApLCB4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaXNwb2x5ZmFjdG9yZWRvcmV4cGFuZGVkZm9ybV9wb3dlciBub3QgYSBwb3dlciwgdGVzdGluZyBpZiB0aGlzIGlzIGV4cCBmb3JtOiBcIiArIHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzcG9seWV4cGFuZGVkZm9ybV9leHByKHAsIHgpO1xuICAgIH1cbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBpc3BvbHlleHBhbmRlZGZvcm0gPSBmdW5jdGlvbihwLCB4KSB7XG4gICAgaWYgKEZpbmQocCwgeCkpIHtcbiAgICAgIHJldHVybiBpc3BvbHlleHBhbmRlZGZvcm1fZXhwcihwLCB4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIGlzcG9seWV4cGFuZGVkZm9ybV9leHByID0gZnVuY3Rpb24ocCwgeCkge1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBpZiAoIWlzcG9seWV4cGFuZGVkZm9ybV90ZXJtKGNhcihwKSwgeCkpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBwID0gY2RyKHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpc3BvbHlleHBhbmRlZGZvcm1fdGVybShwLCB4KTtcbiAgICB9XG4gIH07XG5cbiAgaXNwb2x5ZXhwYW5kZWRmb3JtX3Rlcm0gPSBmdW5jdGlvbihwLCB4KSB7XG4gICAgaWYgKGNhcihwKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgcCA9IGNkcihwKTtcbiAgICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgICAgaWYgKCFpc3BvbHlleHBhbmRlZGZvcm1fZmFjdG9yKGNhcihwKSwgeCkpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBwID0gY2RyKHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpc3BvbHlleHBhbmRlZGZvcm1fZmFjdG9yKHAsIHgpO1xuICAgIH1cbiAgfTtcblxuICBpc3BvbHlleHBhbmRlZGZvcm1fZmFjdG9yID0gZnVuY3Rpb24ocCwgeCkge1xuICAgIGlmIChlcXVhbChwLCB4KSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChQT1dFUikgJiYgZXF1YWwoY2FkcihwKSwgeCkpIHtcbiAgICAgIGlmIChpc3Bvc2ludChjYWRkcihwKSkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEZpbmQocCwgeCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaXNuZWdhdGl2ZXRlcm0gPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGlzbmVnYXRpdmVudW1iZXIocCkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woTVVMVElQTFkpICYmIGlzbmVnYXRpdmVudW1iZXIoY2FkcihwKSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgaGFzTmVnYXRpdmVSYXRpb25hbEV4cG9uZW50ID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChQT1dFUikgJiYgaXNyYXRpb25hbChjYXIoY2RyKGNkcihwKSkpKSAmJiBpc25lZ2F0aXZlbnVtYmVyKGNhcihjZHIocCkpKSkge1xuICAgICAgaWYgKERFQlVHX0lTKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaGFzTmVnYXRpdmVSYXRpb25hbEV4cG9uZW50OiBcIiArIHAudG9TdHJpbmcoKSArIFwiIGhhcyBpbWFnaW5hcnkgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChERUJVR19JUykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImhhc05lZ2F0aXZlUmF0aW9uYWxFeHBvbmVudDogXCIgKyBwLnRvU3RyaW5nKCkgKyBcIiBoYXMgTk8gaW1hZ2luYXJ5IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcblxuICBpc2ltYWdpbmFyeW51bWJlcmRvdWJsZSA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoKGNhcihwKSA9PT0gc3ltYm9sKE1VTFRJUExZKSAmJiBsZW5ndGgocCkgPT09IDMgJiYgaXNkb3VibGUoY2FkcihwKSkgJiYgaGFzTmVnYXRpdmVSYXRpb25hbEV4cG9uZW50KGNhZGRyKHApKSkgfHwgZXF1YWwocCwgaW1hZ2luYXJ5dW5pdCkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgaXNpbWFnaW5hcnludW1iZXIgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKChjYXIocCkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgbGVuZ3RoKHApID09PSAzICYmIGlzTnVtZXJpY0F0b20oY2FkcihwKSkgJiYgZXF1YWwoY2FkZHIocCksIGltYWdpbmFyeXVuaXQpKSB8fCBlcXVhbChwLCBpbWFnaW5hcnl1bml0KSB8fCBoYXNOZWdhdGl2ZVJhdGlvbmFsRXhwb25lbnQoY2FkZHIocCkpKSB7XG4gICAgICBpZiAoREVCVUdfSVMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJpc2ltYWdpbmFyeW51bWJlcjogXCIgKyBwLnRvU3RyaW5nKCkgKyBcIiBpcyBpbWFnaW5hcnkgbnVtYmVyXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChERUJVR19JUykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImlzaW1hZ2luYXJ5bnVtYmVyOiBcIiArIHAudG9TdHJpbmcoKSArIFwiIGlzbid0IGFuIGltYWdpbmFyeSBudW1iZXJcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgaXNjb21wbGV4bnVtYmVyZG91YmxlID0gZnVuY3Rpb24ocCkge1xuICAgIGlmICgoY2FyKHApID09PSBzeW1ib2woQUREKSAmJiBsZW5ndGgocCkgPT09IDMgJiYgaXNkb3VibGUoY2FkcihwKSkgJiYgaXNpbWFnaW5hcnludW1iZXJkb3VibGUoY2FkZHIocCkpKSB8fCBpc2ltYWdpbmFyeW51bWJlcmRvdWJsZShwKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcblxuICBpc2NvbXBsZXhudW1iZXIgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKERFQlVHX0lTKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgaWYgKChjYXIocCkgPT09IHN5bWJvbChBREQpICYmIGxlbmd0aChwKSA9PT0gMyAmJiBpc051bWVyaWNBdG9tKGNhZHIocCkpICYmIGlzaW1hZ2luYXJ5bnVtYmVyKGNhZGRyKHApKSkgfHwgaXNpbWFnaW5hcnludW1iZXIocCkpIHtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImlzY29tcGxleG51bWJlcjogXCIgKyBwLnRvU3RyaW5nKCkgKyBcIiBpcyBpbWFnaW5hcnkgbnVtYmVyXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcImlzY29tcGxleG51bWJlcjogXCIgKyBwLnRvU3RyaW5nKCkgKyBcIiBpcyBpbWFnaW5hcnkgbnVtYmVyXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIGlzZXZlbmludGVnZXIgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGlzaW50ZWdlcihwKSAmJiBwLnEuYS5pc0V2ZW4oKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcblxuICBpc25lZ2F0aXZlID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChBREQpICYmIGlzbmVnYXRpdmV0ZXJtKGNhZHIocCkpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGlzbmVnYXRpdmV0ZXJtKHApKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIC8vIHJldHVybnMgMSBpZiB0aGVyZSdzIGEgc3ltYm9sIHNvbWV3aGVyZS5cbiAgLy8gbm90IHVzZWQgYW55d2hlcmUuIE5vdGUgdGhhdCBQSSBhbmQgUE9XRVIgYXJlIHN5bWJvbHMsXG4gIC8vIHNvIGZvciBleGFtcGxlIDJeMyB3b3VsZCBiZSBzeW1ib2xpY1xuICAvLyB3aGlsZSAtMV4oMS8yKSBpLmUuICdpJyBpcyBub3QsIHNvIHRoaXMgY2FuXG4gIC8vIGJlIHRyaWNreSB0byB1c2UuXG4gIGlzc3ltYm9saWMgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGlzc3ltYm9sKHApKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBpZiAoaXNzeW1ib2xpYyhjYXIocCkpKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcCA9IGNkcihwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcblxuICAvLyBpLmUuIDIsIDJeMywgZXRjLlxuICBpc2ludGVnZXJmYWN0b3IgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGlzaW50ZWdlcihwKSB8fCBjYXIocCkgPT09IHN5bWJvbChQT1dFUikgJiYgaXNpbnRlZ2VyKGNhZHIocCkpICYmIGlzaW50ZWdlcihjYWRkcihwKSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgaXNOdW1iZXJPbmVPdmVyU29tZXRoaW5nID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChpc2ZyYWN0aW9uKHApICYmIE1FUVVBTChwLnEuYS5hYnMoKSwgMSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgaXNvbmVvdmVyID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChQT1dFUikgJiYgaXNtaW51c29uZShjYWRkcihwKSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgaXNmcmFjdGlvbiA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAocC5rID09PSBOVU0gJiYgIU1FUVVBTChwLnEuYiwgMSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgLy8gcCBpcyBhIFUsIG4gYW4gaW50XG4gIGVxdWFsbiA9IGZ1bmN0aW9uKHAsIG4pIHtcbiAgICBzd2l0Y2ggKHAuaykge1xuICAgICAgY2FzZSBOVU06XG4gICAgICAgIGlmIChNRVFVQUwocC5xLmEsIG4pICYmIE1FUVVBTChwLnEuYiwgMSkpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRE9VQkxFOlxuICAgICAgICBpZiAocC5kID09PSBuKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgLy8gcCBpcyBhIFUsIGEgYW5kIGIgaW50c1xuICBlcXVhbHEgPSBmdW5jdGlvbihwLCBhLCBiKSB7XG4gICAgc3dpdGNoIChwLmspIHtcbiAgICAgIGNhc2UgTlVNOlxuICAgICAgICBpZiAoTUVRVUFMKHAucS5hLCBhKSAmJiBNRVFVQUwocC5xLmIsIGIpKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgICAgaWYgKHAuZCA9PT0gYSAvIGIpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvLyBwID09IDEvMiA/XG4gIGlzb25lb3ZlcnR3byA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoZXF1YWxxKHAsIDEsIDIpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIC8vIHAgPT0gLTEvMiA/XG4gIGlzbWludXNvbmVvdmVydHdvID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChlcXVhbHEocCwgLTEsIDIpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIC8vIHAgPT0gMS9zcXJ0KDIpID9cbiAgaXNvbmVvdmVyc3FydHR3byA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woUE9XRVIpICYmIGVxdWFsbihjYWRyKHApLCAyKSAmJiBlcXVhbHEoY2FkZHIocCksIC0xLCAyKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcblxuICAvLyBwID09IC0xL3NxcnQoMikgP1xuICBpc21pbnVzb25lb3ZlcnNxcnR0d28gPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGNhcihwKSA9PT0gc3ltYm9sKE1VTFRJUExZKSAmJiBlcXVhbG4oY2FkcihwKSwgLTEpICYmIGlzb25lb3ZlcnNxcnR0d28oY2FkZHIocCkpICYmIGxlbmd0aChwKSA9PT0gMykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfTtcblxuICBpc2Zsb2F0aW5nID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChwLmsgPT09IERPVUJMRSB8fCBwID09PSBzeW1ib2woRkxPQVRGKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgIGlmIChpc2Zsb2F0aW5nKGNhcihwKSkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICBwID0gY2RyKHApO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBpc2ltYWdpbmFyeXVuaXQgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGVxdWFsKHAsIGltYWdpbmFyeXVuaXQpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIC8vIG4vMiAqIGkgKiBwaSA/XG5cbiAgLy8gcmV0dXJuIHZhbHVlOlxuXG4gIC8vICAwICBub1xuXG4gIC8vICAxICAxXG5cbiAgLy8gIDIgIC0xXG5cbiAgLy8gIDMgIGlcblxuICAvLyAgNCAgLWlcbiAgaXNxdWFydGVydHVybiA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgbWludXNzaWduLCBuO1xuICAgIG4gPSAwO1xuICAgIG1pbnVzc2lnbiA9IDA7XG4gICAgaWYgKGNhcihwKSAhPT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChlcXVhbChjYWRyKHApLCBpbWFnaW5hcnl1bml0KSkge1xuICAgICAgaWYgKGNhZGRyKHApICE9PSBzeW1ib2woUEkpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aChwKSAhPT0gMykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICBpZiAoIWlzTnVtZXJpY0F0b20oY2FkcihwKSkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoIWVxdWFsKGNhZGRyKHApLCBpbWFnaW5hcnl1bml0KSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChjYWRkZHIocCkgIT09IHN5bWJvbChQSSkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoKHApICE9PSA0KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcHVzaChjYWRyKHApKTtcbiAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAoaXNOYU4obikpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAobiA8IDEpIHtcbiAgICAgIG1pbnVzc2lnbiA9IDE7XG4gICAgICBuID0gLW47XG4gICAgfVxuICAgIHN3aXRjaCAobiAlIDQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgbiA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAobWludXNzaWduKSB7XG4gICAgICAgICAgbiA9IDQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbiA9IDM7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIG4gPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaWYgKG1pbnVzc2lnbikge1xuICAgICAgICAgIG4gPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG4gPSA0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuO1xuICB9O1xuXG4gIC8vIHNwZWNpYWwgbXVsdGlwbGUgb2YgcGk/XG5cbiAgLy8gcmV0dXJucyBmb3IgdGhlIGZvbGxvd2luZyBtdWx0aXBsZXMgb2YgcGkuLi5cblxuICAvLyAgLTQvMiAgLTMvMiAgLTIvMiAgLTEvMiAgMS8yICAyLzIgIDMvMiAgNC8yXG5cbiAgLy8gIDQgIDEgIDIgIDMgIDEgIDIgIDMgIDRcbiAgaXNucGkgPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGRvTm90aGluZywgbjtcbiAgICBuID0gMDtcbiAgICBpZiAocCA9PT0gc3ltYm9sKFBJKSkge1xuICAgICAgcmV0dXJuIDI7XG4gICAgfVxuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgaXNOdW1lcmljQXRvbShjYWRyKHApKSAmJiBjYWRkcihwKSA9PT0gc3ltYm9sKFBJKSAmJiBsZW5ndGgocCkgPT09IDMpIHtcbiAgICAgIGRvTm90aGluZyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBwdXNoKGNhZHIocCkpO1xuICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChpc05hTihuKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChuIDwgMCkge1xuICAgICAgbiA9IDQgLSAoLW4pICUgNDtcbiAgICB9IGVsc2Uge1xuICAgICAgbiA9IDEgKyAobiAtIDEpICUgNDtcbiAgICB9XG4gICAgcmV0dXJuIG47XG4gIH07XG5cbiAgJC5pc1plcm9BdG9tT3JUZW5zb3IgPSBpc1plcm9BdG9tT3JUZW5zb3I7XG5cbiAgJC5pc25lZ2F0aXZlbnVtYmVyID0gaXNuZWdhdGl2ZW51bWJlcjtcblxuICAkLmlzcGx1c29uZSA9IGlzcGx1c29uZTtcblxuICAkLmlzbWludXNvbmUgPSBpc21pbnVzb25lO1xuXG4gICQuaXNpbnRlZ2VyID0gaXNpbnRlZ2VyO1xuXG4gICQuaXNub25uZWdhdGl2ZWludGVnZXIgPSBpc25vbm5lZ2F0aXZlaW50ZWdlcjtcblxuICAkLmlzcG9zaW50ID0gaXNwb3NpbnQ7XG5cbiAgJC5pc25lZ2F0aXZldGVybSA9IGlzbmVnYXRpdmV0ZXJtO1xuXG4gICQuaXNpbWFnaW5hcnludW1iZXIgPSBpc2ltYWdpbmFyeW51bWJlcjtcblxuICAkLmlzY29tcGxleG51bWJlciA9IGlzY29tcGxleG51bWJlcjtcblxuICAkLmlzZXZlbmludGVnZXIgPSBpc2V2ZW5pbnRlZ2VyO1xuXG4gICQuaXNuZWdhdGl2ZSA9IGlzbmVnYXRpdmU7XG5cbiAgJC5pc3N5bWJvbGljID0gaXNzeW1ib2xpYztcblxuICAkLmlzaW50ZWdlcmZhY3RvciA9IGlzaW50ZWdlcmZhY3RvcjtcblxuICAkLmlzb25lb3ZlciA9IGlzb25lb3ZlcjtcblxuICAkLmlzZnJhY3Rpb24gPSBpc2ZyYWN0aW9uO1xuXG4gICQuaXNvbmVvdmVyc3FydHR3byA9IGlzb25lb3ZlcnNxcnR0d287XG5cbiAgJC5pc21pbnVzb25lb3ZlcnNxcnR0d28gPSBpc21pbnVzb25lb3ZlcnNxcnR0d287XG5cbiAgJC5pc2Zsb2F0aW5nID0gaXNmbG9hdGluZztcblxuICAkLmlzaW1hZ2luYXJ5dW5pdCA9IGlzaW1hZ2luYXJ5dW5pdDtcblxuICAkLmlzcXVhcnRlcnR1cm4gPSBpc3F1YXJ0ZXJ0dXJuO1xuXG4gICQuaXNucGkgPSBpc25waTtcblxuICBFdmFsX2lzcHJpbWUgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNub25uZWdhdGl2ZWludGVnZXIocDEpICYmIG1wcmltZShwMS5xLmEpKSB7XG4gICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKDApO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX2xhZ3VlcnJlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gMXN0IGFyZ1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICAvLyAybmQgYXJnXG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICAvLyAzcmQgYXJnXG4gICAgcHVzaChjYWRkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBpZiAocDIgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDIpO1xuICAgIH1cbiAgICByZXR1cm4gbGFndWVycmUoKTtcbiAgfTtcblxuICAvL2RlZmluZSBYIHAxXG4gIC8vZGVmaW5lIE4gcDJcbiAgLy9kZWZpbmUgSyBwM1xuICAvL2RlZmluZSBZIHA0XG4gIC8vZGVmaW5lIFkwIHA1XG4gIC8vZGVmaW5lIFkxIHA2XG4gIGxhZ3VlcnJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG47XG4gICAgbiA9IDA7XG4gICAgc2F2ZSgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHB1c2gocDIpO1xuICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChuIDwgMCB8fCBpc05hTihuKSkge1xuICAgICAgcHVzaF9zeW1ib2woTEFHVUVSUkUpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgbGlzdCg0KTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzc3ltYm9sKHAxKSkge1xuICAgICAgbGFndWVycmUyKG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwNCA9IHAxO1xuICAgICAgcDEgPSBzeW1ib2woU0VDUkVUWCk7XG4gICAgICBsYWd1ZXJyZTIobik7XG4gICAgICBwMSA9IHA0O1xuICAgICAgcHVzaChzeW1ib2woU0VDUkVUWCkpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBzdWJzdCgpO1xuICAgICAgRXZhbCgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGxhZ3VlcnJlMiA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgaSwgbywgcmVmLCByZXN1bHRzO1xuICAgIGkgPSAwO1xuICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgcDYgPSBwb3AoKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IG47ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICBwNSA9IHA2O1xuICAgICAgcDYgPSBwb3AoKTtcbiAgICAgIHB1c2hfaW50ZWdlcigyICogaSArIDEpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBhZGQoKTtcbiAgICAgIHB1c2gocDYpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHB1c2hfaW50ZWdlcihpKTtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgYWRkKCk7XG4gICAgICBwdXNoKHA1KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgcHVzaF9pbnRlZ2VyKGkgKyAxKTtcbiAgICAgIHJlc3VsdHMucHVzaChkaXZpZGUoKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIEZpbmQgdGhlIGxlYXN0IGNvbW1vbiBtdWx0aXBsZSBvZiB0d28gZXhwcmVzc2lvbnMuXG4gIEV2YWxfbGNtID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdHM7XG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHB1c2goY2FyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBsY20oKTtcbiAgICAgIHJlc3VsdHMucHVzaChwMSA9IGNkcihwMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBsY20gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJldl9leHBhbmRpbmc7XG4gICAgcHJldl9leHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgc2F2ZSgpO1xuICAgIHl5bGNtKCk7XG4gICAgcmVzdG9yZSgpO1xuICAgIHJldHVybiBleHBhbmRpbmcgPSBwcmV2X2V4cGFuZGluZztcbiAgfTtcblxuICB5eWxjbSA9IGZ1bmN0aW9uKCkge1xuICAgIGV4cGFuZGluZyA9IDE7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIGdjZCgpO1xuICAgIHB1c2gocDEpO1xuICAgIGRpdmlkZSgpO1xuICAgIHB1c2gocDIpO1xuICAgIGRpdmlkZSgpO1xuICAgIHJldHVybiBpbnZlcnNlKCk7XG4gIH07XG5cbiAgRXZhbF9sZWFkaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAocDEgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICBndWVzcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGxlYWRpbmcoKTtcbiAgfTtcblxuICAvL2RlZmluZSBQIHAxXG4gIC8vZGVmaW5lIFggcDJcbiAgLy9kZWZpbmUgTiBwM1xuICBsZWFkaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBwdXNoKHAxKTsgLy8gTiA9IGRlZ3JlZSBvZiBQXG4gICAgcHVzaChwMik7XG4gICAgZGVncmVlKCk7XG4gICAgcDMgPSBwb3AoKTtcbiAgICBwdXNoKHAxKTsgLy8gZGl2aWRlIHRocm91Z2ggYnkgWCBeIE5cbiAgICBwdXNoKHAyKTtcbiAgICBwdXNoKHAzKTtcbiAgICBwb3dlcigpO1xuICAgIGRpdmlkZSgpO1xuICAgIHB1c2gocDIpOyAvLyByZW1vdmUgdGVybXMgdGhhdCBkZXBlbmQgb24gWFxuICAgIGZpbHRlcigpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgRXZhbF9sZWdlbmRyZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIDFzdCBhcmdcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgLy8gMm5kIGFyZ1xuICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgLy8gM3JkIGFyZyAob3B0aW9uYWwpXG4gICAgcHVzaChjYWRkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBpZiAocDIgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDIpO1xuICAgIH1cbiAgICByZXR1cm4gbGVnZW5kcmUoKTtcbiAgfTtcblxuICAvL2RlZmluZSBYIHAxXG4gIC8vZGVmaW5lIE4gcDJcbiAgLy9kZWZpbmUgTSBwM1xuICAvL2RlZmluZSBZIHA0XG4gIC8vZGVmaW5lIFkwIHA1XG4gIC8vZGVmaW5lIFkxIHA2XG4gIGxlZ2VuZHJlID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIF9fbGVnZW5kcmUoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIF9fbGVnZW5kcmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbSwgbjtcbiAgICBtID0gMDtcbiAgICBuID0gMDtcbiAgICBwMyA9IHBvcCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBwdXNoKHAyKTtcbiAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICBwdXNoKHAzKTtcbiAgICBtID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAobiA8IDAgfHwgaXNOYU4obikgfHwgbSA8IDAgfHwgaXNOYU4obSkpIHtcbiAgICAgIHB1c2hfc3ltYm9sKExFR0VORFJFKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIGxpc3QoNCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc3N5bWJvbChwMSkpIHtcbiAgICAgIF9fbGVnZW5kcmUyKG4sIG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwNCA9IHAxO1xuICAgICAgcDEgPSBzeW1ib2woU0VDUkVUWCk7XG4gICAgICBfX2xlZ2VuZHJlMihuLCBtKTtcbiAgICAgIHAxID0gcDQ7XG4gICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHN1YnN0KCk7XG4gICAgICBFdmFsKCk7XG4gICAgfVxuICAgIHJldHVybiBfX2xlZ2VuZHJlMyhtKTtcbiAgfTtcblxuICBfX2xlZ2VuZHJlMiA9IGZ1bmN0aW9uKG4sIG0pIHtcbiAgICB2YXIgaSwgaTEsIG8sIHJlZiwgcmVmMSwgcmVzdWx0cztcbiAgICBpID0gMDtcbiAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgcHVzaF9pbnRlZ2VyKDApO1xuICAgIHA2ID0gcG9wKCk7XG4vLyAgaT0xICBwNSA9IDAgXG4vLyAgICBwNiA9IDEgXG4vLyAgICAoKDIqaSsxKSp4KnA2IC0gaSpwNSkgLyBpID0geFxuXG4vLyAgaT0yICBwNSA9IDFcbi8vICAgIHA2ID0geFxuLy8gICAgKCgyKmkrMSkqeCpwNiAtIGkqcDUpIC8gaSA9IC0xLzIgKyAzLzIqeF4yXG5cbi8vICBpPTMgIHA1ID0geFxuLy8gICAgcDYgPSAtMS8yICsgMy8yKnheMlxuLy8gICAgKCgyKmkrMSkqeCpwNiAtIGkqcDUpIC8gaSA9IC0zLzIqeCArIDUvMip4XjNcbiAgICBmb3IgKGkgPSBvID0gMCwgcmVmID0gbjsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICAgIHA1ID0gcDY7XG4gICAgICBwNiA9IHBvcCgpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDIgKiBpICsgMSk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBwdXNoKHA2KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBwdXNoX2ludGVnZXIoaSk7XG4gICAgICBwdXNoKHA1KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgICAgcHVzaF9pbnRlZ2VyKGkgKyAxKTtcbiAgICAgIGRpdmlkZSgpO1xuICAgIH1cbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChpID0gaTEgPSAwLCByZWYxID0gbTsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGkgPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN1bHRzLnB1c2goZGVyaXZhdGl2ZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gbW92ZVRvcyB0b3MgKiAoLTEpXm0gKiAoMS14XjIpXihtLzIpXG4gIF9fbGVnZW5kcmUzID0gZnVuY3Rpb24obSkge1xuICAgIGlmIChtID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woQ09TKSkge1xuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICBzaW5lKCk7XG4gICAgICBzcXVhcmUoKTtcbiAgICB9IGVsc2UgaWYgKGNhcihwMSkgPT09IHN5bWJvbChTSU4pKSB7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIGNvc2luZSgpO1xuICAgICAgc3F1YXJlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgc3F1YXJlKCk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgIH1cbiAgICBwdXNoX2ludGVnZXIobSk7XG4gICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIHBvd2VyKCk7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBpZiAobSAlIDIpIHtcbiAgICAgIHJldHVybiBuZWdhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgbGlzdCBmcm9tIG4gdGhpbmdzIG9uIHRoZSBzdGFjay5cblxuICAvLyBuIGlzIGFuIGludGVnZXJcbiAgbGlzdCA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgbGlzdEl0ZXJhdG9yLCBvLCByZWYsIHJlc3VsdHM7XG4gICAgbGlzdEl0ZXJhdG9yID0gMDtcbiAgICBwdXNoKHN5bWJvbChOSUwpKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChsaXN0SXRlcmF0b3IgPSBvID0gMCwgcmVmID0gbjsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBsaXN0SXRlcmF0b3IgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcmVzdWx0cy5wdXNoKGNvbnMoKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIE5hdHVyYWwgbG9nYXJpdGhtLlxuXG4gIC8vIE5vdGUgdGhhdCB3ZSB1c2UgdGhlIG1hdGhlbWF0aWNzIC8gSmF2YXNjcmlwdCAvIE1hdGhlbWF0aWNhXG4gIC8vIGNvbnZlbnRpb24gdGhhdCBcImxvZ1wiIGlzIGluZGVlZCB0aGUgbmF0dXJhbCBsb2dhcml0aG0uXG5cbiAgLy8gSW4gZW5naW5lZXJpbmcsIGJpb2xvZ3ksIGFzdHJvbm9teSwgXCJsb2dcIiBjYW4gc3RhbmQgaW5zdGVhZFxuICAvLyBmb3IgdGhlIFwiY29tbW9uXCIgbG9nYXJpdGhtIGkuZS4gYmFzZSAxMC4gQWxzbyBub3RlIHRoYXQgR29vZ2xlXG4gIC8vIGNhbGN1bGF0aW9ucyB1c2UgbG9nIGZvciB0aGUgY29tbW9uIGxvZ2FyaXRobS5cbiAgRXZhbF9sb2cgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIGxvZ2FyaXRobSgpO1xuICB9O1xuXG4gIGxvZ2FyaXRobSA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICB5eWxvZygpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgeXlsb2cgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZDtcbiAgICBkID0gMC4wO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKHAxID09PSBzeW1ib2woRSkpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVxdWFsbihwMSwgMSkpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzbmVnYXRpdmVudW1iZXIocDEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIG5lZ2F0ZSgpO1xuICAgICAgbG9nYXJpdGhtKCk7XG4gICAgICBwdXNoKGltYWdpbmFyeXVuaXQpO1xuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBwdXNoX2RvdWJsZShNYXRoLlBJKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICAgIH1cbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBhZGQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgZCA9IE1hdGgubG9nKHAxLmQpO1xuICAgICAgcHVzaF9kb3VibGUoZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHJhdGlvbmFsIG51bWJlciBhbmQgbm90IGFuIGludGVnZXI/XG4gICAgaWYgKGlzZnJhY3Rpb24ocDEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIG51bWVyYXRvcigpO1xuICAgICAgbG9nYXJpdGhtKCk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGRlbm9taW5hdG9yKCk7XG4gICAgICBsb2dhcml0aG0oKTtcbiAgICAgIHN1YnRyYWN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGxvZyhhIF4gYikgLS0+IGIgbG9nKGEpXG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgbG9nYXJpdGhtKCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBsb2coYSAqIGIpIC0tPiBsb2coYSkgKyBsb2coYilcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgcHVzaF9pbnRlZ2VyKDApO1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgbG9nYXJpdGhtKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2hfc3ltYm9sKExPRyk7XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIGxpc3QoMik7XG4gIH07XG5cbiAgLy8gbm93IHRoaXMgbWlnaHQgYmUgYSBsaXR0bGUgY29uZnVzaW5nLCBzbyBhXG4gIC8vIGNsYXJpZmljYXRpb24gaXMgaW4gb3JkZXIuXG4gIC8vIEZpcnN0IG9mZiwgYXQgdGhlIHNjcmlwdGluZyBsZXZlbCBtb3N0IHRoaW5nc1xuICAvLyBhcyB0aGV5IGFyZSBoYW5kbGVkIGdldCBldmFsbGVkLlxuICAvLyBUaGF0IG1lYW5zIHRoYXQgdGhleSBhcmUgcmVjdXJzaXZlbHkgXCJjYWxjdWxhdGVkXCJcbiAgLy8gYXMgbXVjaCBhcyBwb3NzaWJsZSwgaS5lLiB2YXJpYWJsZXMgYXJlIHJlY3Vyc2l2ZWx5XG4gIC8vIGxvb2tlZCB1cCBmb3IgdGhlaXIgdmFsdWVzLCBvcGVyYXRvcnMgYXJlIGFwcGxpZWQsXG4gIC8vIGZ1bmN0aW9ucyBhcmUgaXZva2VkLCBldGMuXG4gIC8vIEkuZS4gd2hpbGUgc2NyaXB0aW5nLCBtb3N0IHRoaW5ncyBhcmVcbiAgLy8gZXZhbGxlZCBhbGwgdGhlIHRpbWVzLlxuICAvLyBlLmcuIGlmIEkgdHlwZVxuICAvLyAgIHggPSAxKzFcbiAgLy8gdGhlbiB4IGlzIGFjdHVhbGx5IGFzc2lnbmVkIDIsIG5vdCAxKzFcbiAgLy8gU29tZXRoaW5nIHRoYXQgaGVscHMgYSBsaXR0bGUgaXMgXCJxdW90ZVwiLCBlLmcuXG4gIC8vIElmIEkgYXNzaWduXG4gIC8vICAgeCA9IHF1b3RlKDErMSlcbiAgLy8gdGhlbiB4IGFjdHVhbGx5IGNvbnRhaW5zIDErMSwgbm90IDIuXG4gIC8vIEJ1dCB0aGVuIHggaXMgZXZhbHVhdGVkIGFzIHNvb24gYXMgSSB0eXBlXG4gIC8vICAgeCAvLyBnaXZlcyBcIjJcIiBhcyB4IGlzIGV2YWx1YXRlZFxuXG4gIC8vIEV2YWx1YXRpb24gaXMgZ3JlYXQsIGJ1dCBzb21ldGltZXMgb25lIHdhbnRzXG4gIC8vIHRvIGxvb2sgYXQgdGhlIGFjdHVhbCBzdHJ1Y3R1cmUgb2YgYW4gZXhwcmVzc2lvblxuICAvLyBvciBhIGNvbnRlbnQgb2YgYSB2YXJpYWJsZSwgd2l0aG91dCB0aG9zZVxuICAvLyBiZWluZyBldmFsdWF0ZWQgZmlyc3QuXG5cbiAgLy8gZm9yIGV4YW1wbGUgSSBtaWdodCB0eXBlXG4gIC8vICAgeCA9IGEgKyBiXG4gIC8vICAgYSA9IDFcbiAgLy8gICBiID0gMlxuICAvLyBhbmQgZnJvbSB0aGlzIHBvaW50IG9uIHByaW50aW5nIHRoZSBhY3R1YWxcbiAgLy8gc3RydWN0dXJlIG9mIHggaXMgaW1wb3NzaWJsZSwgYmVjYXVzZSBmcm9tXG4gIC8vIG5vdyBvbiBhbnkgZXZhbHVhdGlvbiBvZiB4IHdpbGwgZ2l2ZSBcIjNcIlxuICAvLyBZb3UgbWlnaHQgc2F5IFwiYnV0IHlvdSBoYXZlIHggZGVmaW5lZCB1cCB0aGVyZSxcbiAgLy8gd2hhdCdzIHRoZSBwb2ludCBvZiBwcmludGluZyBpdCBvdXQ/XCIsIHRvIHdoaWNoXG4gIC8vIHRoZSBhbnN3ZXIgaXMgdGhhdCBvbmUgbWlnaHQgZG8gZnVydGhlclxuICAvLyBzdWJzdGl0dXRpb25zIG9yIHRyYW5zZm9ybWF0aW9ucyBvZiBzcGVjaWFsIGtpbmRcbiAgLy8gdG8geC4gT25lIG1pZ2h0IHdhbnQgdG8gbG9vayBhdCB0aGUgc3RydWN0dXJlXG4gIC8vIGFuZCBpdCBtaWdodCBiZSBjb21wbGV4IG9yIGltcG9zc2libGUuXG5cbiAgLy8gU28gdGhpcyBmdW5jdGlvbiBkb2VzIHRoYXQuXG4gIC8vIElmIGl0J3MgcGFzc2VkIGEgdmFyaWFibGUsIHRoZW4gaXRcbiAgLy8gRE9FUyBOT1QgZXZhbCB0aGUgdmFyaWFibGUsIFJBVEhFUlxuICAvLyBpdCBwcmludHMgdGhlIGNvbnRlbnQgb2YgdGhlIHZhcmlhYmxlIHdpdGhvdXRcbiAgLy8gZXZhbHVhdGluZyBpdC5cbiAgLy8gSW4gdGhlIG90aGVyIGNhc2VzIGl0IHdvcmtzIGxpa2UgXCJxdW90ZVwiIGUuZy5cbiAgLy8gaXQganVzdCBnaXZlcyB0aGUgYXJndW1lbnQgYXMgaXMsIGFnYWluIHdpdGhvdXRcbiAgLy8gZXZhbHVhdGluZyBpdC5cblxuICAvLyBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGVzLCBmb3IgYnJldml0eSwgSSBqdXN0XG4gIC8vIHVzZVxuICAvLyAgIHggPSBxdW90ZSgxKzIpXG4gIC8vIGluc3RlYWQgb2YgdGhpczpcbiAgLy8gICB4ID0gYSArIGJcbiAgLy8gICBhID0gMVxuICAvLyAgIGIgPSAyXG4gIC8vIHRvIHB1dCBhIHN0cnVjdHVyZSBpbiB4IHRoYXQgaXMgZWFzeSB0byBzZWUgd2hldGhlclxuICAvLyBpdCdzIGF2YXVsYXRlZCBvciBub3QuXG5cbiAgLy8gU28gbG9va3VwIGFsbG93cyB0aGlzOlxuICAvLyAgIHggPSBxdW90ZSgxKzIpXG4gIC8vICAgcHJpbnQobG9va3VwKHgpKSAjIGdpdmVzIDErMlxuXG4gIC8vIE5vdGUgdGhhdCB0aGVyZSB3b3VsZCBiZSBwb3RlbnRpYWxseSBhIHdheVxuICAvLyB0byBhY2hpZXZlIGEgc2ltaWxhciByZXN1bHQsIHlvdSBjb3VsZCBkbzpcbiAgLy8gICB4ID0gcXVvdGUocXVvdGUoMSsyKSlcbiAgLy8gICBwcmludCh4KVxuICAvLyBidXQgeW91IGNhbid0IGFsd2F5cyBjb250cm9sIHggdG8gY29udGFpblxuICAvLyB0d28gcXVvdGVzIGxpa2UgdGhhdC4uLlxuICAvLyBub3RlIGhvdyB0d28gXCJxdW90ZXNcIiBhcmUgbmVlZGVkIGJlY2F1c2VcbiAgLy8gaWYgeW91IGp1c3QgcHV0IG9uZSwgdGhlblxuICAvLyB4IHdvdWxkIGluZGVlZCBjb250YWluIDErMiBpbnN0ZWFkIG9mIDMsXG4gIC8vIGJ1dCB0aGVuIHByaW50IHdvdWxkIGV2YWx1YXRlIHRoYXQgdG8gMzpcbiAgLy8gICB4ID0gcXVvdGUoMSsyKSAjIG5vdyB4IGNvbnRhaW5zIDErMiwgbm90IDNcbiAgLy8gICBwcmludCh4KSAjIGJ1dCB4IGV2YWx1YXRlZCBoZXJlIHRvIDNcblxuICAvLyBPdGhlciB3b3JrYXJvdW5kcyB3b3VsZCBub3Qgd29yazpcbiAgLy8gICB4ID0gcXVvdGUoMSsyKVxuICAvLyAgIHByaW50KHF1b3RlKHgpKVxuICAvLyB3b3VsZCBub3Qgd29yayBiZWNhdXNlIHF1b3RlKHgpIGxpdGVyYWxseSBtZWFucyAneCdcbiAgLy8gc28gJ3gnIGlzIHByaW50ZWQgaW5zdGVhZCBvZiBpdHMgY29udGVudC5cblxuICAvLyBOb3RlIGFsc28gdGhhdCBsb29rdXAgYWxsb3dzIHlvdSB0byBjb3B5XG4gIC8vIHRoZSBzdHJ1Y3R1cmUgb2YgYSB2YXJpYWJsZSB0byBhbm90aGVyOlxuICAvLyAgIHggPSBhICsgYlxuICAvLyAgIGEgPSAxXG4gIC8vICAgYiA9IDJcbiAgLy8gbm93OlxuICAvLyAgIHkgPSB4ICMgeSBjb250YWlucyB0aGUgbnVtYmVyIDMgYW5kIHByaW50cyB0byAzXG4gIC8vICAgeSA9IGxvb2t1cCh4KSAjIHkgY29udGFpbnMgXCJhK2JcIiBhbmQgcHJpbnRzIHRvIDNcbiAgLy8gICB5ID0gcXVvdGUoeCkgIyB5IGNvbnRhaW5zIFwieFwiIGFuZCBwcmludHMgdG8gM1xuICAvLyBub3RlIHRoYXQgaW4gdGhlIGZpcnN0IGFuZCBzZWNvbmQgY2FzZSB5IGlzXG4gIC8vIGluZGVwZW5kZW50IGZyb20geCwgaS5lLiBjaGFuZ2luZyB4IGRvZXNuJ3QgY2hhbmdlIHlcbiAgLy8gd2hpbGUgaW4gdGhlIGxhc3QgY2FzZSBpdCBpcy5cblxuICAvLyBBbm90aGVyIHNpbWlsYXIgc2ltcGxlIGV4YW1wbGUgaXMgd2hlbiBkb2luZyBzb21ldGhpbmdcbiAgLy8gbGlrZSB0aGlzOlxuICAvLyAgICB4ID0geVxuICAvLyAgICB5ID0gelxuICAvLyAgICB4XG4gIC8vICAgICAgID0+IGdpdmVzIHpcbiAgLy8gICAgbG9va3VwKHgpXG4gIC8vICAgICAgID0+IGdpdmVzIHlcbiAgLy8gICAgICAgICAgaS5lLiBsb29rdXAgYWxsb3dzIHlvdSB0byBzZWUgdGhlIGltbWVkaWF0ZVxuICAvLyAgICAgICAgICBjb250ZW50IG9mIHgsIHJhdGhlciB0aGFuIHRoZSBldmFsdWF0aW9uIHdoaWNoXG4gIC8vICAgICAgICAgIHdvdWxkIGVuZCB1cCBpbiB4IC0+IHkgLT4gelxuICAvLyBOb3RlIHRoYXQgaWYgeW91IGludmVydCB0aGUgb3JkZXIgb2YgdGhlIGFzc2lnbm1lbnRzIGkuZS5cbiAgLy8gICAgeSA9IHpcbiAgLy8gICAgeCA9IHlcbiAgLy8gVGhlbiBhdCB0aGlzIHBvaW50IHggaW1tZWRpYXRlbHkgY29udGFpbnMgeiwgc2luY2UgdGhlXG4gIC8vIGFzc2lnbm1lbnQgeCA9IHkgaXMgbm90IHF1b3RlZCwgaGVuY2UgeSBpcyBldmFsdWF0ZWQgdG8gelxuICAvLyB3aGVuIGFzc2lnbmVkIHRvIHguXG4gIC8vICAgIGxvb2t1cCh4KVxuICAvLyAgICAgICA9PiBnaXZlcyB6XG4gIEV2YWxfbG9va3VwID0gZnVuY3Rpb24oKSB7XG4gICAgcDEgPSBjYWRyKHAxKTtcbiAgICBpZiAoIWlzY29ucyhwMSkgJiYgY2FkcihwMSkuayA9PT0gU1lNKSB7XG4gICAgICBwMSA9IGdldF9iaW5kaW5nKHAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDEpOyAvLyBCaWdudW0gYWRkaXRpb24gYW5kIHN1YnRyYWN0aW9uXG4gIH07XG5cbiAgXG4gIC8vc3RhdGljIHVuc2lnbmVkIGludCAqYWRkZih1bnNpZ25lZCBpbnQgKiwgdW5zaWduZWQgaW50ICopXG4gIC8vc3RhdGljIHVuc2lnbmVkIGludCAqc3ViZih1bnNpZ25lZCBpbnQgKiwgdW5zaWduZWQgaW50ICopXG4gIC8vc3RhdGljIGludCB1Y21wKHVuc2lnbmVkIGludCAqLCB1bnNpZ25lZCBpbnQgKilcbiAgbWFkZCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYS5hZGQoYik7XG4gIH07XG5cbiAgbXN1YiA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYS5zdWJ0cmFjdChiKTtcbiAgfTtcblxuICBhZGRmID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhLmFkZChiKTtcbiAgfTtcblxuICBzdWJmID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhLnN1YnRyYWN0KGIpO1xuICB9O1xuXG4gIC8vIHVuc2lnbmVkIGNvbXBhcmVcbiAgdWNtcCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYS5jb21wYXJlQWJzKGIpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgQmlnbnVtIEdDRFxuXG4gIC8vICBVc2VzIHRoZSBiaW5hcnkgR0NEIGFsZ29yaXRobS5cblxuICAvLyAgU2VlIFwiVGhlIEFydCBvZiBDb21wdXRlciBQcm9ncmFtbWluZ1wiIHAuIDMzOC5cblxuICAvLyAgbWdjZCBhbHdheXMgcmV0dXJucyBhIHBvc2l0aXZlIHZhbHVlXG5cbiAgLy8gIG1nY2QoMCwgMCkgPSAwXG5cbiAgLy8gIG1nY2QodSwgMCkgPSB8dXxcblxuICAvLyAgbWdjZCgwLCB2KSA9IHx2fFxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgbWdjZCA9IGZ1bmN0aW9uKHUsIHYpIHtcbiAgICByZXR1cm4gYmlnSW50LmdjZCh1LCB2KTtcbiAgfTtcblxuICAvL2lmIFNFTEZURVNUXG5cbiAgLy8gcyBpcyBhIHN0cmluZ1xuICBuZXdfc3RyaW5nID0gZnVuY3Rpb24ocykge1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IG5ldyBVKCk7XG4gICAgcDEuayA9IFNUUjtcbiAgICBwMS5zdHIgPSBzO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgb3V0X29mX21lbW9yeSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdG9wKFwib3V0IG9mIG1lbW9yeVwiKTtcbiAgfTtcblxuICAvLyBib3RoIGludHNcbiAgcHVzaF96ZXJvX21hdHJpeCA9IGZ1bmN0aW9uKGksIGopIHtcbiAgICBwdXNoKGFsbG9jX3RlbnNvcihpICogaikpO1xuICAgIHN0YWNrW3RvcyAtIDFdLnRlbnNvci5uZGltID0gMjtcbiAgICBzdGFja1t0b3MgLSAxXS50ZW5zb3IuZGltWzBdID0gaTtcbiAgICByZXR1cm4gc3RhY2tbdG9zIC0gMV0udGVuc29yLmRpbVsxXSA9IGo7XG4gIH07XG5cbiAgcHVzaF9pZGVudGl0eV9tYXRyaXggPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGksIG8sIHJlZjtcbiAgICBwdXNoX3plcm9fbWF0cml4KG4sIG4pO1xuICAgIGkgPSAwO1xuICAgIGZvciAoaSA9IG8gPSAwLCByZWYgPSBuOyAoMCA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAwIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgc3RhY2tbdG9zIC0gMV0udGVuc29yLmVsZW1baSAqIG4gKyBpXSA9IG9uZTtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrX3RlbnNvcl9kaW1lbnNpb25zKHN0YWNrW3RvcyAtIDFdKTtcbiAgfTtcblxuICBwdXNoX2NhcnMgPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIHJlc3VsdHM7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgIHB1c2goY2FyKHApKTtcbiAgICAgIHJlc3VsdHMucHVzaChwID0gY2RyKHApKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgcGVlayA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gc2VlIGNtcF9leHByIGRlZmluaXRpb24sIHRoaXNcbiAgLy8gZnVuY3Rpb24gYWxvbmUganVzdCBkb2VzIHNpbXBsZSBzdHJ1Y3R1cmUgY29tcGFyaXNvblxuICAvLyBvciBjb21wYXJlcyBudW1iZXJzIChlaXRoZXIgcmF0aW9uYWxzIG9yIGludGVnZXJzIG9yIGRvdWJsZXMpXG4gIC8vIGJ1dCBjYW4ndCBiZSB1c2VkIGFsb25lIHRvIHRlc3RcbiAgLy8gbW9yZSBjb21wbGV4IG1hdGhlbWF0aWNhbCBlcXVhbGl0aWVzLi4uXG4gIGVxdWFsID0gZnVuY3Rpb24ocDEsIHAyKSB7XG4gICAgaWYgKGNtcF9leHByKHAxLCBwMikgPT09IDApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgbGVzc3AgPSBmdW5jdGlvbihwMSwgcDIpIHtcbiAgICBpZiAoY21wX2V4cHIocDEsIHAyKSA8IDApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgc2lnbiA9IGZ1bmN0aW9uKG4pIHtcbiAgICBpZiAobiA8IDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2UgaWYgKG4gPiAwKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIC8vIGNvbXBhcmVzIHdoZXRoZXIgdHdvIGV4cHJlc3Npb25zXG4gIC8vIGhhdmUgdGhlIHNhbWUgc3RydWN0dXJlLlxuICAvLyBGb3IgZXhhbXBsZSB0aGlzIG1ldGhvZCBhbG9uZVxuICAvLyB3b3VsZCBjb21wYXJlIFwiMSsxXCIgYW5kIFwiMlwiXG4gIC8vIGFzIGRpZmZlcmVudC5cbiAgLy8gSXQganVzdCBzbyBoYXBwZW5zIHRob3VnaCB0aGF0IG9uZSBvZnRlbnNcbiAgLy8gZXZhbHVhdGVzIHRoZSB0d28gc2lkZXMgYmVmb3JlIHBhc3NpbmcgdGhlbVxuICAvLyB0byB0aGlzIGZ1bmN0aW9uLCBzbyBjaGFuY2VzIGFyZSB0aGF0IHRoZSB0d29cbiAgLy8gc2lkZXMgaGF2ZSB0aGUgc2FtZSBub3JtYWwgZm9ybS5cbiAgLy8gRXZlbiBhIHNpbXBsZSBldmFsdWF0aW9uIG1pZ2h0IG5vdCBjdXQgaXRcbiAgLy8gdGhvdWdoLi4uIGEgc2ltcGxpZmljYXRpb24gb2YgYm90aCBzaWRlc1xuICAvLyB3b3VsZCB0aGVuIGhlbHAuIEFuZCBldmVuIHRoYXQgbWlnaHQgbm90XG4gIC8vIGN1dCBpdCBpbiBzb21lIGNhc2VzLi4uXG4gIGNtcF9leHByID0gZnVuY3Rpb24ocDEsIHAyKSB7XG4gICAgdmFyIG47XG4gICAgbiA9IDA7XG4gICAgaWYgKHAxID09PSBwMikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChwMSA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKHAyID09PSBzeW1ib2woTklMKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChpc051bWVyaWNBdG9tKHAxKSAmJiBpc051bWVyaWNBdG9tKHAyKSkge1xuICAgICAgcmV0dXJuIHNpZ24oY29tcGFyZV9udW1iZXJzKHAxLCBwMikpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1lcmljQXRvbShwMSkpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKGlzTnVtZXJpY0F0b20ocDIpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGlzc3RyKHAxKSAmJiBpc3N0cihwMikpIHtcbiAgICAgIHJldHVybiBzaWduKHN0cmNtcChwMS5zdHIsIHAyLnN0cikpO1xuICAgIH1cbiAgICBpZiAoaXNzdHIocDEpKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChpc3N0cihwMikpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoaXNzeW1ib2wocDEpICYmIGlzc3ltYm9sKHAyKSkge1xuICAgICAgcmV0dXJuIHNpZ24oc3RyY21wKGdldF9wcmludG5hbWUocDEpLCBnZXRfcHJpbnRuYW1lKHAyKSkpO1xuICAgIH1cbiAgICBpZiAoaXNzeW1ib2wocDEpKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChpc3N5bWJvbChwMikpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoaXN0ZW5zb3IocDEpICYmIGlzdGVuc29yKHAyKSkge1xuICAgICAgcmV0dXJuIGNvbXBhcmVfdGVuc29ycyhwMSwgcDIpO1xuICAgIH1cbiAgICBpZiAoaXN0ZW5zb3IocDEpKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChpc3RlbnNvcihwMikpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICAvLyByZWN1cnNpb24gaGVyZVxuICAgIHdoaWxlIChpc2NvbnMocDEpICYmIGlzY29ucyhwMikpIHtcbiAgICAgIG4gPSBjbXBfZXhwcihjYXIocDEpLCBjYXIocDIpKTtcbiAgICAgIGlmIChuICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBuO1xuICAgICAgfVxuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgcDIgPSBjZHIocDIpO1xuICAgIH1cbiAgICBpZiAoaXNjb25zKHAyKSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoaXNjb25zKHAxKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIGxlbmd0aCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgbjtcbiAgICBuID0gMDtcbiAgICB3aGlsZSAoaXNjb25zKHApKSB7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgbisrO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfTtcblxuICB1bmlxdWUgPSBmdW5jdGlvbihwKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gc3ltYm9sKE5JTCk7XG4gICAgcDIgPSBzeW1ib2woTklMKTtcbiAgICB1bmlxdWVfZihwKTtcbiAgICBpZiAocDIgIT09IHN5bWJvbChOSUwpKSB7XG4gICAgICBwMSA9IHN5bWJvbChOSUwpO1xuICAgIH1cbiAgICBwID0gcDE7XG4gICAgcmVzdG9yZSgpO1xuICAgIHJldHVybiBwO1xuICB9O1xuXG4gIHVuaXF1ZV9mID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChpc3N0cihwKSkge1xuICAgICAgaWYgKHAxID09PSBzeW1ib2woTklMKSkge1xuICAgICAgICBwMSA9IHA7XG4gICAgICB9IGVsc2UgaWYgKHAgIT09IHAxKSB7XG4gICAgICAgIHAyID0gcDtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgdW5pcXVlX2YoY2FyKHApKTtcbiAgICAgIGlmIChwMiAhPT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcCA9IGNkcihwKTtcbiAgICB9XG4gIH07XG5cbiAgc3NxcnQgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgIHJldHVybiBwb3dlcigpO1xuICB9O1xuXG4gIHl5ZXhwYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByZXZfZXhwYW5kaW5nO1xuICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgIGV4cGFuZGluZyA9IDE7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBleHBhbmRpbmcgPSBwcmV2X2V4cGFuZGluZztcbiAgfTtcblxuICBleHBvbmVudGlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2hfc3ltYm9sKEUpO1xuICAgIHN3YXAoKTtcbiAgICByZXR1cm4gcG93ZXIoKTtcbiAgfTtcblxuICBzcXVhcmUgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgcmV0dXJuIHBvd2VyKCk7XG4gIH07XG5cbiAgLy9fX2NtcCA9IChwMSwgcDIpIC0+XG4gIC8vICByZXR1cm4gY21wX2V4cHIocDEsIHAyKVxuXG4gIC8vIG4gYW4gaW50ZWdlclxuICBzb3J0X3N0YWNrID0gZnVuY3Rpb24obikge1xuICAgIHZhciBoLCBzdWJzZXRPZlN0YWNrO1xuICAgIC8vcXNvcnQoc3RhY2sgKyB0b3MgLSBuLCBuLCBzaXplb2YgKFUgKiksIF9fY21wKVxuICAgIGggPSB0b3MgLSBuO1xuICAgIHN1YnNldE9mU3RhY2sgPSBzdGFjay5zbGljZShoLCBoICsgbik7XG4gICAgc3Vic2V0T2ZTdGFjay5zb3J0KGNtcF9leHByKTtcbiAgICByZXR1cm4gc3RhY2sgPSBzdGFjay5zbGljZSgwLCBoKS5jb25jYXQoc3Vic2V0T2ZTdGFjaykuY29uY2F0KHN0YWNrLnNsaWNlKGggKyBuKSk7XG4gIH07XG5cbiAgJC5lcXVhbCA9IGVxdWFsO1xuXG4gICQubGVuZ3RoID0gbGVuZ3RoO1xuXG4gIC8vIEJpZ251bSBtdWx0aXBsaWNhdGlvbiBhbmQgZGl2aXNpb25cbiAgbW11bCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYS5tdWx0aXBseShiKTtcbiAgfTtcblxuICBtZGl2ID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhLmRpdmlkZShiKTtcbiAgfTtcblxuICAvLyBhID0gYSArIGJcbiAgLypcbiAgc3RhdGljIHZvaWRcbiAgYWRkZih1bnNpZ25lZCBpbnQgKmEsIHVuc2lnbmVkIGludCAqYiwgaW50IGxlbilcbiAge1xuICAgIGludCBpXG4gICAgbG9uZyBsb25nIHQgPSAwOyAjIGNhbiBiZSBzaWduZWQgb3IgdW5zaWduZWQgXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0ICs9IChsb25nIGxvbmcpIGFbaV0gKyBiW2ldXG4gICAgICBhW2ldID0gKHVuc2lnbmVkIGludCkgdFxuICAgICAgdCA+Pj0gMzJcbiAgICB9XG4gIH1cblxuICAvLyBhID0gYSAtIGJcblxuICBzdGF0aWMgdm9pZFxuICBzdWJmKHVuc2lnbmVkIGludCAqYSwgdW5zaWduZWQgaW50ICpiLCBpbnQgbGVuKVxuICB7XG4gICAgaW50IGlcbiAgICBsb25nIGxvbmcgdCA9IDA7ICMgbXVzdCBiZSBzaWduZWRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHQgKz0gKGxvbmcgbG9uZykgYVtpXSAtIGJbaV1cbiAgICAgIGFbaV0gPSAodW5zaWduZWQgaW50KSB0XG4gICAgICB0ID4+PSAzMlxuICAgIH1cbiAgfVxuXG4gIC8vIGEgPSBiICogY1xuXG4gIC8vIDB4ZmZmZmZmZmYgKyAweGZmZmZmZmZmICogMHhmZmZmZmZmZiA9PSAweGZmZmZmZmZmMDAwMDAwMDBcblxuICBzdGF0aWMgdm9pZFxuICBtdWxmKHVuc2lnbmVkIGludCAqYSwgdW5zaWduZWQgaW50ICpiLCBpbnQgbGVuLCB1bnNpZ25lZCBpbnQgYylcbiAge1xuICAgIGludCBpXG4gICAgdW5zaWduZWQgbG9uZyBsb25nIHQgPSAwOyAjIG11c3QgYmUgdW5zaWduZWRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHQgKz0gKHVuc2lnbmVkIGxvbmcgbG9uZykgYltpXSAqIGNcbiAgICAgIGFbaV0gPSAodW5zaWduZWQgaW50KSB0XG4gICAgICB0ID4+PSAzMlxuICAgIH1cbiAgICBhW2ldID0gKHVuc2lnbmVkIGludCkgdFxuICB9XG4gICovXG4gIG1tb2QgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEubW9kKGIpO1xuICB9O1xuXG4gIC8vIHJldHVybiBib3RoIHF1b3RpZW50IGFuZCByZW1haW5kZXIgb2YgYS9iXG4gIC8vIHdlJ2QgaGF2ZSB0aGlzIG1ldGhvZCBhcyBkaXZtb2QobnVtYmVyKVxuICAvLyBidXQgb2J2aW91c2x5IGRvZXNuJ3QgY2hhbmdlIHRoZSBwYXNzZWQgcGFyYW1ldGVyc1xuICBtZGl2cmVtID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciB0b1JldHVybjtcbiAgICB0b1JldHVybiA9IGEuZGl2bW9kKGIpO1xuICAgIHJldHVybiBbdG9SZXR1cm4ucXVvdGllbnQsIHRvUmV0dXJuLnJlbWFpbmRlcl07XG4gIH07XG5cbiAgLy9pZiBTRUxGVEVTVFxuXG4gIC8vIHNtYWxsIGludGVnZXIgdGVzdHNcbiAgRXZhbF9tb2QgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gbW9kKCk7XG4gIH07XG5cbiAgbW9kID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG47XG4gICAgbiA9IDA7XG4gICAgc2F2ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAyKSkge1xuICAgICAgc3RvcChcIm1vZCBmdW5jdGlvbjogZGl2aWRlIGJ5IHplcm9cIik7XG4gICAgfVxuICAgIGlmICghaXNOdW1lcmljQXRvbShwMSkgfHwgIWlzTnVtZXJpY0F0b20ocDIpKSB7XG4gICAgICBwdXNoX3N5bWJvbChNT0QpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShwMSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgICBpZiAoaXNOYU4obikpIHtcbiAgICAgICAgc3RvcChcIm1vZCBmdW5jdGlvbjogY2Fubm90IGNvbnZlcnQgZmxvYXQgdmFsdWUgdG8gaW50ZWdlclwiKTtcbiAgICAgIH1cbiAgICAgIHB1c2hfaW50ZWdlcihuKTtcbiAgICAgIHAxID0gcG9wKCk7XG4gICAgfVxuICAgIGlmIChpc2RvdWJsZShwMikpIHtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgICBpZiAoaXNOYU4obikpIHtcbiAgICAgICAgc3RvcChcIm1vZCBmdW5jdGlvbjogY2Fubm90IGNvbnZlcnQgZmxvYXQgdmFsdWUgdG8gaW50ZWdlclwiKTtcbiAgICAgIH1cbiAgICAgIHB1c2hfaW50ZWdlcihuKTtcbiAgICAgIHAyID0gcG9wKCk7XG4gICAgfVxuICAgIGlmICghaXNpbnRlZ2VyKHAxKSB8fCAhaXNpbnRlZ2VyKHAyKSkge1xuICAgICAgc3RvcChcIm1vZCBmdW5jdGlvbjogaW50ZWdlciBhcmd1bWVudHMgZXhwZWN0ZWRcIik7XG4gICAgfVxuICAgIHAzID0gbmV3IFUoKTtcbiAgICBwMy5rID0gTlVNO1xuICAgIHAzLnEuYSA9IG1tb2QocDEucS5hLCBwMi5xLmEpO1xuICAgIHAzLnEuYiA9IG1pbnQoMSk7XG4gICAgcHVzaChwMyk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBCaWdudW0gcG93ZXJcblxuICAvLyBhIGlzIGEgYmlnaW50LCBuIGlzIGEgc21hbGwgbm9ybWFsIGludFxuICBtcG93ID0gZnVuY3Rpb24oYSwgbikge1xuICAgIHJldHVybiBhLnBvdyhuKTtcbiAgfTtcblxuICAvL2lmIFNFTEZURVNUXG5cbiAgLy8gQmlnbnVtIHByaW1lIHRlc3QgKHJldHVybnMgMSBpZiBwcmltZSwgMCBpZiBub3QpXG5cbiAgLy8gVXNlcyBBbGdvcml0aG0gUCAocHJvYmFiaWxpc3RpYyBwcmltYWxpdHkgdGVzdCkgZnJvbSBwLiAzOTUgb2ZcbiAgLy8gXCJUaGUgQXJ0IG9mIENvbXB1dGVyIFByb2dyYW1taW5nLCBWb2x1bWUgMlwiIGJ5IERvbmFsZCBFLiBLbnV0aC5cbiAgbXByaW1lID0gZnVuY3Rpb24obikge1xuICAgIHJldHVybiBuLmlzUHJvYmFibGVQcmltZSgpO1xuICB9O1xuXG4gIC8vaWYgU0VMRlRFU1RcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIEJpZ251bSByb290XG5cbiAgLy8gIFJldHVybnMgbnVsbCBwb2ludGVyIGlmIG5vdCBwZXJmZWN0IHJvb3QuXG5cbiAgLy8gIFRoZSBzaWduIG9mIHRoZSByYWRpY2FuZCBpcyBpZ25vcmVkLlxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgbXJvb3QgPSBmdW5jdGlvbihuLCBpbmRleCkge1xuICAgIHZhciBpLCBqLCBrLCBvLCByZWYsIHgsIHk7XG4gICAgLy8gdGhpcyBkb2Vzbid0IHF1aXRlIHdvcmtcbiAgICAvL3JldHVybiBuLnBvdygxL2luZGV4ICsgIDAuMDAwMDAwMDAwMDAwMDAwMSlcblxuICAgIC8vIHNpZ24gb2YgcmFkaWNhbmQgaWdub3JlZFxuICAgIG4gPSBuLmFicygpO1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIGsgPSAwO1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgc3RvcChcInJvb3QgaW5kZXggaXMgemVyb1wiKTtcbiAgICB9XG4gICAgLy8gY291bnQgbnVtYmVyIG9mIGJpdHNcbiAgICBrID0gMDtcbiAgICB3aGlsZSAobi5zaGlmdFJpZ2h0KGspID4gMCkge1xuICAgICAgaysrO1xuICAgIH1cbiAgICBpZiAoayA9PT0gMCkge1xuICAgICAgcmV0dXJuIG1pbnQoMCk7XG4gICAgfVxuICAgIC8vIGluaXRpYWwgZ3Vlc3NcbiAgICBrID0gTWF0aC5mbG9vcigoayAtIDEpIC8gaW5kZXgpO1xuICAgIGogPSBNYXRoLmZsb29yKGsgLyAzMiArIDEpO1xuICAgIHggPSBiaWdJbnQoaik7XG4gICAgZm9yIChpID0gbyA9IDAsIHJlZiA9IGo7ICgwIDw9IHJlZiA/IG8gPCByZWYgOiBvID4gcmVmKTsgaSA9IDAgPD0gcmVmID8gKytvIDogLS1vKSB7XG4gICAgICAvLyB6ZXJvLW91dCB0aGUgaXRoIGJpdFxuICAgICAgeCA9IHguYW5kKGJpZ0ludCgxKS5zaGlmdExlZnQoaSkubm90KCkpO1xuICAgIH1cbiAgICB3aGlsZSAoayA+PSAwKSB7XG4gICAgICAvLyBzZXQgdGhlIGt0aCBiaXRcbiAgICAgIHggPSB4Lm9yKGJpZ0ludCgxKS5zaGlmdExlZnQoaykpO1xuICAgICAgeSA9IG1wb3coeCwgaW5kZXgpO1xuICAgICAgc3dpdGNoIChtY21wKHksIG4pKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIC8vbXBfY2xyX2JpdCh4LCBrKVxuICAgICAgICAgIC8vIGNsZWFyIHRoZSBrdGggYml0XG4gICAgICAgICAgeCA9IHguYW5kKGJpZ0ludCgxKS5zaGlmdExlZnQoaykubm90KCkpO1xuICAgICAgfVxuICAgICAgay0tO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvL2lmIFNFTEZURVNUXG5cbiAgLy8gU3ltYm9saWMgbXVsdGlwbGljYXRpb25cblxuICAvLyBtdWx0aXBsaWNhdGlvbiBpcyBjb21tdXRhdGl2ZSwgc28gaXQgY2FuJ3QgYmUgdXNlZFxuICAvLyBlLmcuIG9uIHR3byBtYXRyaWNlcy5cbiAgLy8gQnV0IGl0IGNhbiBiZSB1c2VkLCBzYXksIG9uIGEgc2NhbGFyIGFuZCBhIG1hdHJpeC4sXG4gIC8vIHNvIHRoZSBvdXRwdXQgb2YgYSBtdWx0aXBsaWNhdGlvbiBpcyBub3RcbiAgLy8gYWx3YXlzIGEgc2NhbGFyLlxuXG4gIC8vZXh0ZXJuIHZvaWQgYXBwZW5kKHZvaWQpXG4gIC8vc3RhdGljIHZvaWQgcGFyc2VfcDEodm9pZClcbiAgLy9zdGF0aWMgdm9pZCBwYXJzZV9wMih2b2lkKVxuICAvL3N0YXRpYyB2b2lkIF9fbm9ybWFsaXplX3JhZGljYWxfZmFjdG9ycyhpbnQpXG4gIEV2YWxfbXVsdGlwbHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0cztcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDEgPSBjZGRyKHAxKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmVzdWx0cy5wdXNoKHAxID0gY2RyKHAxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIHRoaXMgb25lIGRvZXNuJ3QgZXZhbCB0aGUgZmFjdG9ycyxcbiAgLy8gc28geW91IHBhc3MgaSooLTEpXigxLzIpLCBpdCB3b3VsZG50J3RcbiAgLy8gZ2l2ZSAtMSwgYmVjYXVzZSBpIGlzIG5vdCBldmFsbGVkXG4gIG11bHRpcGx5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGVzY19mbGFnKSB7XG4gICAgICBzdG9wKFwiZXNjYXBlIGtleSBzdG9wXCIpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1lcmljQXRvbShzdGFja1t0b3MgLSAyXSkgJiYgaXNOdW1lcmljQXRvbShzdGFja1t0b3MgLSAxXSkpIHtcbiAgICAgIHJldHVybiBtdWx0aXBseV9udW1iZXJzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNhdmUoKTtcbiAgICAgIHl5bXVsdGlwbHkoKTtcbiAgICAgIHJldHVybiByZXN0b3JlKCk7XG4gICAgfVxuICB9O1xuXG4gIHl5bXVsdGlwbHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCwgaSwgbiwgbywgcmVmLCByZWYxO1xuICAgIGggPSAwO1xuICAgIGkgPSAwO1xuICAgIG4gPSAwO1xuICAgIC8vIHBvcCBvcGVyYW5kc1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBoID0gdG9zO1xuICAgIC8vIGlzIGVpdGhlciBvcGVyYW5kIHplcm8/XG4gICAgaWYgKGlzWmVyb0F0b20ocDEpIHx8IGlzWmVyb0F0b20ocDIpKSB7XG4gICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKDAuMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHplcm8pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBpcyBlaXRoZXIgb3BlcmFuZCBhIHN1bT9cblxuICAgIC8vY29uc29sZS5sb2coXCJ5eW11bHRpcGx5OiBleHBhbmRpbmc6IFwiICsgZXhwYW5kaW5nKVxuICAgIGlmIChleHBhbmRpbmcgJiYgaXNhZGQocDEpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKDAuMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHplcm8pO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChleHBhbmRpbmcgJiYgaXNhZGQocDIpKSB7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgICBpZiAoZXZhbHVhdGluZ0FzRmxvYXRzKSB7XG4gICAgICAgIHB1c2hfZG91YmxlKDAuMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoKHplcm8pO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGlzY29ucyhwMikpIHtcbiAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIHB1c2goY2FyKHAyKSk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBwMiA9IGNkcihwMik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXN0ZW5zb3IocDEpICYmIGlzdGVuc29yKHAyKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHNjYWxhcl90aW1lc190ZW5zb3IoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gdGVuc29yIHRpbWVzIHNjYWxhcj9cbiAgICBpZiAoaXN0ZW5zb3IocDEpICYmICFpc3RlbnNvcihwMikpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICB0ZW5zb3JfdGltZXNfc2NhbGFyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFkanVzdCBvcGVyYW5kc1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbGlzdCgxKTtcbiAgICAgIHAxID0gcG9wKCk7XG4gICAgfVxuICAgIGlmIChjYXIocDIpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbGlzdCgxKTtcbiAgICAgIHAyID0gcG9wKCk7XG4gICAgfVxuICAgIC8vIGhhbmRsZSBudW1lcmljYWwgY29lZmZpY2llbnRzXG4gICAgaWYgKGlzTnVtZXJpY0F0b20oY2FyKHAxKSkgJiYgaXNOdW1lcmljQXRvbShjYXIocDIpKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIHB1c2goY2FyKHAyKSk7XG4gICAgICBtdWx0aXBseV9udW1iZXJzKCk7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgfSBlbHNlIGlmIChpc051bWVyaWNBdG9tKGNhcihwMSkpKSB7XG4gICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljQXRvbShjYXIocDIpKSkge1xuICAgICAgcHVzaChjYXIocDIpKTtcbiAgICAgIHAyID0gY2RyKHAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgICBwdXNoX2RvdWJsZSgxLjApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaChvbmUpO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXJzZV9wMSgpO1xuICAgIHBhcnNlX3AyKCk7XG4gICAgd2hpbGUgKGlzY29ucyhwMSkgJiYgaXNjb25zKHAyKSkge1xuICAgICAgLy8gICAgaWYgKGNhcihwMSktPmdhbW1hICYmIGNhcihwMiktPmdhbW1hKSB7XG4gICAgICAvLyAgICAgIGNvbWJpbmVfZ2FtbWFzKGgpXG4gICAgICAvLyAgICAgIHAxID0gY2RyKHAxKVxuICAgICAgLy8gICAgICBwMiA9IGNkcihwMilcbiAgICAgIC8vICAgICAgcGFyc2VfcDEoKVxuICAgICAgLy8gICAgICBwYXJzZV9wMigpXG4gICAgICAvLyAgICAgIGNvbnRpbnVlXG4gICAgICAvLyAgICB9XG4gICAgICBpZiAoY2FhcihwMSkgPT09IHN5bWJvbChPUEVSQVRPUikgJiYgY2FhcihwMikgPT09IHN5bWJvbChPUEVSQVRPUikpIHtcbiAgICAgICAgcHVzaF9zeW1ib2woT1BFUkFUT1IpO1xuICAgICAgICBwdXNoKGNkYXIocDEpKTtcbiAgICAgICAgcHVzaChjZGFyKHAyKSk7XG4gICAgICAgIGFwcGVuZCgpO1xuICAgICAgICBjb25zKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgICAgcDIgPSBjZHIocDIpO1xuICAgICAgICBwYXJzZV9wMSgpO1xuICAgICAgICBwYXJzZV9wMigpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY21wX2V4cHIocDMsIHA0KSkge1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgICAgIHBhcnNlX3AxKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBwdXNoKGNhcihwMikpO1xuICAgICAgICAgIHAyID0gY2RyKHAyKTtcbiAgICAgICAgICBwYXJzZV9wMigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY29tYmluZV9mYWN0b3JzKGgpO1xuICAgICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgICAgICBwMiA9IGNkcihwMik7XG4gICAgICAgICAgcGFyc2VfcDEoKTtcbiAgICAgICAgICBwYXJzZV9wMigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHN0b3AoXCJpbnRlcm5hbCBlcnJvciAyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBwdXNoIHJlbWFpbmluZyBmYWN0b3JzLCBpZiBhbnlcbiAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgd2hpbGUgKGlzY29ucyhwMikpIHtcbiAgICAgIHB1c2goY2FyKHAyKSk7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgfVxuICAgIC8vIG5vcm1hbGl6ZSByYWRpY2FsIGZhY3RvcnNcblxuICAgIC8vIGV4YW1wbGU6IDIqMigtMS8yKSAtPiAyXigxLzIpXG5cbiAgICAvLyBtdXN0IGJlIGRvbmUgYWZ0ZXIgbWVyZ2UgYmVjYXVzZSBtZXJnZSBtYXkgcHJvZHVjZSByYWRpY2FsXG5cbiAgICAvLyBleGFtcGxlOiAyXigxLzItYSkqMl5hIC0+IDJeKDEvMilcbiAgICBfX25vcm1hbGl6ZV9yYWRpY2FsX2ZhY3RvcnMoaCk7XG4gICAgLy8gdGhpcyBoYWNrIHNob3VsZCBub3QgYmUgbmVjZXNzYXJ5LCB1bmxlc3MgcG93ZXIgcmV0dXJucyBhIG11bHRpcGx5XG5cbiAgICAvL2ZvciAoaSA9IGg7IGkgPCB0b3M7IGkrKykge1xuICAgIC8vICBpZiAoY2FyKHN0YWNrW2ldKSA9PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgLy8gICAgbXVsdGlwbHlfYWxsKHRvcyAtIGgpXG4gICAgLy8gICAgcmV0dXJuXG4gICAgLy8gIH1cbiAgICAvL31cbiAgICBpZiAoZXhwYW5kaW5nKSB7XG4gICAgICBmb3IgKGkgPSBvID0gcmVmID0gaCwgcmVmMSA9IHRvczsgKHJlZiA8PSByZWYxID8gbyA8IHJlZjEgOiBvID4gcmVmMSk7IGkgPSByZWYgPD0gcmVmMSA/ICsrbyA6IC0tbykge1xuICAgICAgICBpZiAoaXNhZGQoc3RhY2tbaV0pKSB7XG4gICAgICAgICAgbXVsdGlwbHlfYWxsKHRvcyAtIGgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBuIGlzIHRoZSBudW1iZXIgb2YgcmVzdWx0IGZhY3RvcnMgb24gdGhlIHN0YWNrXG4gICAgbiA9IHRvcyAtIGg7XG4gICAgaWYgKG4gPT09IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZGlzY2FyZCBpbnRlZ2VyIDFcbiAgICBpZiAoaXNyYXRpb25hbChzdGFja1toXSkgJiYgZXF1YWxuKHN0YWNrW2hdLCAxKSkge1xuICAgICAgaWYgKG4gPT09IDIpIHtcbiAgICAgICAgcDcgPSBwb3AoKTtcbiAgICAgICAgcG9wKCk7XG4gICAgICAgIHB1c2gocDcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhY2tbaF0gPSBzeW1ib2woTVVMVElQTFkpO1xuICAgICAgICBsaXN0KG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsaXN0KG4pO1xuICAgIHA3ID0gcG9wKCk7XG4gICAgcHVzaF9zeW1ib2woTVVMVElQTFkpO1xuICAgIHB1c2gocDcpO1xuICAgIHJldHVybiBjb25zKCk7XG4gIH07XG5cbiAgLy8gRGVjb21wb3NlIGEgZmFjdG9yIGludG8gYmFzZSBhbmQgcG93ZXIuXG5cbiAgLy8gaW5wdXQ6ICBjYXIocDEpICAgIGZhY3RvclxuXG4gIC8vIG91dHB1dDogIHAzICAgIGZhY3RvcidzIGJhc2VcblxuICAvLyAgICBwNSAgICBmYWN0b3IncyBwb3dlciAocG9zc2libHkgMSlcbiAgcGFyc2VfcDEgPSBmdW5jdGlvbigpIHtcbiAgICBwMyA9IGNhcihwMSk7XG4gICAgcDUgPSBldmFsdWF0aW5nQXNGbG9hdHMgPyBvbmVfYXNfZG91YmxlIDogb25lO1xuICAgIGlmIChjYXIocDMpID09PSBzeW1ib2woUE9XRVIpKSB7XG4gICAgICBwNSA9IGNhZGRyKHAzKTtcbiAgICAgIHJldHVybiBwMyA9IGNhZHIocDMpO1xuICAgIH1cbiAgfTtcblxuICAvLyBEZWNvbXBvc2UgYSBmYWN0b3IgaW50byBiYXNlIGFuZCBwb3dlci5cblxuICAvLyBpbnB1dDogIGNhcihwMikgICAgZmFjdG9yXG5cbiAgLy8gb3V0cHV0OiAgcDQgICAgZmFjdG9yJ3MgYmFzZVxuXG4gIC8vICAgIHA2ICAgIGZhY3RvcidzIHBvd2VyIChwb3NzaWJseSAxKVxuICBwYXJzZV9wMiA9IGZ1bmN0aW9uKCkge1xuICAgIHA0ID0gY2FyKHAyKTtcbiAgICBwNiA9IGV2YWx1YXRpbmdBc0Zsb2F0cyA/IG9uZV9hc19kb3VibGUgOiBvbmU7XG4gICAgaWYgKGNhcihwNCkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIHA2ID0gY2FkZHIocDQpO1xuICAgICAgcmV0dXJuIHA0ID0gY2FkcihwNCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGggYW4gaW50ZWdlclxuICBjb21iaW5lX2ZhY3RvcnMgPSBmdW5jdGlvbihoKSB7XG4gICAgcHVzaChwNCk7XG4gICAgcHVzaChwNSk7XG4gICAgcHVzaChwNik7XG4gICAgYWRkKCk7XG4gICAgcG93ZXIoKTtcbiAgICBwNyA9IHBvcCgpO1xuICAgIGlmIChpc051bWVyaWNBdG9tKHA3KSkge1xuICAgICAgcHVzaChzdGFja1toXSk7XG4gICAgICBwdXNoKHA3KTtcbiAgICAgIG11bHRpcGx5X251bWJlcnMoKTtcbiAgICAgIHJldHVybiBzdGFja1toXSA9IHBvcCgpO1xuICAgIH0gZWxzZSBpZiAoY2FyKHA3KSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgLy8gcG93ZXIgY2FuIHJldHVybiBudW1iZXIgKiBmYWN0b3IgKGkuZS4gLTEgKiBpKVxuICAgICAgaWYgKGlzTnVtZXJpY0F0b20oY2FkcihwNykpICYmIGNkZGRyKHA3KSA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgICAgcHVzaChzdGFja1toXSk7XG4gICAgICAgIHB1c2goY2FkcihwNykpO1xuICAgICAgICBtdWx0aXBseV9udW1iZXJzKCk7XG4gICAgICAgIHN0YWNrW2hdID0gcG9wKCk7XG4gICAgICAgIHJldHVybiBwdXNoKGNhZGRyKHA3KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcHVzaChwNyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoKHA3KTtcbiAgICB9XG4gIH07XG5cbiAgZ3AgPSBbWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLCBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sIFswLCAwLCAxLCAtNiwgLTcsIC04LCAtMywgLTQsIC01LCAxMywgMTQsIDE1LCAtMTYsIDksIDEwLCAxMSwgLTEyXSwgWzAsIDAsIDYsIC0xLCAtMTEsIDEwLCAtMiwgLTE1LCAxNCwgMTIsIC01LCA0LCAtOSwgMTYsIC04LCA3LCAtMTNdLCBbMCwgMCwgNywgMTEsIC0xLCAtOSwgMTUsIC0yLCAtMTMsIDUsIDEyLCAtMywgLTEwLCA4LCAxNiwgLTYsIC0xNF0sIFswLCAwLCA4LCAtMTAsIDksIC0xLCAtMTQsIDEzLCAtMiwgLTQsIDMsIDEyLCAtMTEsIC03LCA2LCAxNiwgLTE1XSwgWzAsIDAsIDMsIDIsIDE1LCAtMTQsIDEsIDExLCAtMTAsIDE2LCAtOCwgNywgMTMsIDEyLCAtNSwgNCwgOV0sIFswLCAwLCA0LCAtMTUsIDIsIDEzLCAtMTEsIDEsIDksIDgsIDE2LCAtNiwgMTQsIDUsIDEyLCAtMywgMTBdLCBbMCwgMCwgNSwgMTQsIC0xMywgMiwgMTAsIC05LCAxLCAtNywgNiwgMTYsIDE1LCAtNCwgMywgMTIsIDExXSwgWzAsIDAsIDEzLCAxMiwgLTUsIDQsIDE2LCAtOCwgNywgLTEsIC0xMSwgMTAsIC0zLCAtMiwgLTE1LCAxNCwgLTZdLCBbMCwgMCwgMTQsIDUsIDEyLCAtMywgOCwgMTYsIC02LCAxMSwgLTEsIC05LCAtNCwgMTUsIC0yLCAtMTMsIC03XSwgWzAsIDAsIDE1LCAtNCwgMywgMTIsIC03LCA2LCAxNiwgLTEwLCA5LCAtMSwgLTUsIC0xNCwgMTMsIC0yLCAtOF0sIFswLCAwLCAxNiwgLTksIC0xMCwgLTExLCAtMTMsIC0xNCwgLTE1LCAtMywgLTQsIC01LCAxLCAtNiwgLTcsIC04LCAyXSwgWzAsIDAsIDksIC0xNiwgOCwgLTcsIC0xMiwgNSwgLTQsIC0yLCAtMTUsIDE0LCA2LCAtMSwgLTExLCAxMCwgM10sIFswLCAwLCAxMCwgLTgsIC0xNiwgNiwgLTUsIC0xMiwgMywgMTUsIC0yLCAtMTMsIDcsIDExLCAtMSwgLTksIDRdLCBbMCwgMCwgMTEsIDcsIC02LCAtMTYsIDQsIC0zLCAtMTIsIC0xNCwgMTMsIC0yLCA4LCAtMTAsIDksIC0xLCA1XSwgWzAsIDAsIDEyLCAxMywgMTQsIDE1LCA5LCAxMCwgMTEsIC02LCAtNywgLTgsIC0yLCAtMywgLTQsIC01LCAtMV1dO1xuXG4gIC8vaWYgMFxuXG4gIC8vIGggYW4gaW50XG4gIGNvbWJpbmVfZ2FtbWFzID0gZnVuY3Rpb24oaCkge1xuICAgIHZhciBuO1xuICAgIG4gPSBncFtNYXRoLmZsb29yKHAxLmdhbW1hKV1bTWF0aC5mbG9vcihwMi5nYW1tYSldO1xuICAgIGlmIChuIDwgMCkge1xuICAgICAgbiA9IC1uO1xuICAgICAgcHVzaChzdGFja1toXSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHN0YWNrW2hdID0gcG9wKCk7XG4gICAgfVxuICAgIGlmIChuID4gMSkge1xuICAgICAgcmV0dXJuIHB1c2goX2dhbW1hW25dKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gdGhpcyBpcyB1c2VmdWwgZm9yIGV4YW1wbGUgd2hlbiB5b3UgYXJlIGp1c3QgYWRkaW5nL3JlbW92aW5nXG4gIC8vIGZhY3RvcnMgZnJvbSBhbiBhbHJlYWR5IGZhY3RvcmVkIHF1YW50aXR5LlxuICAvLyBlLmcuIGlmIHlvdSBmYWN0b3JlZCB4XjIgKyAzeCArIDIgaW50byAoeCsxKSh4KzIpXG4gIC8vIGFuZCB5b3Ugd2FudCB0byBkaXZpZGUgYnkgKHgrMSkgLCBpLmUuIHlvdSBtdWx0aXBseSBieSAoeC0xKV4tMSxcbiAgLy8gdGhlbiB0aGVyZSBpcyBubyBuZWVkIHRvIGV4cGFuZC5cbiAgbXVsdGlwbHlfbm9leHBhbmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJldl9leHBhbmRpbmc7XG4gICAgcHJldl9leHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgZXhwYW5kaW5nID0gMDtcbiAgICBtdWx0aXBseSgpO1xuICAgIHJldHVybiBleHBhbmRpbmcgPSBwcmV2X2V4cGFuZGluZztcbiAgfTtcblxuICAvLyBtdWx0aXBseSBuIGZhY3RvcnMgb24gc3RhY2tcblxuICAvLyBuIGFuIGludGVnZXJcbiAgbXVsdGlwbHlfYWxsID0gZnVuY3Rpb24obikge1xuICAgIHZhciBoLCBpLCBvLCByZWY7XG4gICAgaSA9IDA7XG4gICAgaWYgKG4gPT09IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIHB1c2goZXZhbHVhdGluZ0FzRmxvYXRzID8gb25lX2FzX2RvdWJsZSA6IG9uZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGggPSB0b3MgLSBuO1xuICAgIHB1c2goc3RhY2tbaF0pO1xuICAgIGZvciAoaSA9IG8gPSAxLCByZWYgPSBuOyAoMSA8PSByZWYgPyBvIDwgcmVmIDogbyA+IHJlZik7IGkgPSAxIDw9IHJlZiA/ICsrbyA6IC0tbykge1xuICAgICAgcHVzaChzdGFja1toICsgaV0pO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICB9XG4gICAgc3RhY2tbaF0gPSBwb3AoKTtcbiAgICByZXR1cm4gbW92ZVRvcyhoICsgMSk7XG4gIH07XG5cbiAgLy8gbiBhbiBpbnRlZ2VyXG4gIG11bHRpcGx5X2FsbF9ub2V4cGFuZCA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgcHJldl9leHBhbmRpbmc7XG4gICAgcHJldl9leHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgZXhwYW5kaW5nID0gMDtcbiAgICBtdWx0aXBseV9hbGwobik7XG4gICAgcmV0dXJuIGV4cGFuZGluZyA9IHByZXZfZXhwYW5kaW5nO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgU3ltYm9saWMgZGl2aXNpb24sIG9yIG51bWVyaWMgZGl2aXNpb24gaWYgZG91YmxlcyBhcmUgZm91bmQuXG5cbiAgLy8gIElucHV0OiAgICBEaXZpZGVuZCBhbmQgZGl2aXNvciBvbiBzdGFja1xuXG4gIC8vICBPdXRwdXQ6ICAgIFF1b3RpZW50IG9uIHN0YWNrXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBkaXZpZGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNOdW1lcmljQXRvbShzdGFja1t0b3MgLSAyXSkgJiYgaXNOdW1lcmljQXRvbShzdGFja1t0b3MgLSAxXSkpIHtcbiAgICAgIHJldHVybiBkaXZpZGVfbnVtYmVycygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnZlcnNlKCk7XG4gICAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gdGhpcyBpcyBkaWZmZXJlbnQgZnJvbSBpbnZlcnNlIG9mIGEgbWF0cml4IChpbnYpIVxuICBpbnZlcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGlzTnVtZXJpY0F0b20oc3RhY2tbdG9zIC0gMV0pKSB7XG4gICAgICByZXR1cm4gaW52ZXJ0X251bWJlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgcmV0dXJuIHBvd2VyKCk7XG4gICAgfVxuICB9O1xuXG4gIHJlY2lwcm9jYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGludmVyc2UoKTtcbiAgfTtcblxuICBuZWdhdGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNOdW1lcmljQXRvbShzdGFja1t0b3MgLSAxXSkpIHtcbiAgICAgIHJldHVybiBuZWdhdGVfbnVtYmVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgcHVzaF9kb3VibGUoLTEuMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gICAgfVxuICB9O1xuXG4gIG5lZ2F0ZV9leHBhbmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJldl9leHBhbmRpbmc7XG4gICAgcHJldl9leHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgZXhwYW5kaW5nID0gMTtcbiAgICBuZWdhdGUoKTtcbiAgICByZXR1cm4gZXhwYW5kaW5nID0gcHJldl9leHBhbmRpbmc7XG4gIH07XG5cbiAgbmVnYXRlX25vZXhwYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByZXZfZXhwYW5kaW5nO1xuICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgIGV4cGFuZGluZyA9IDA7XG4gICAgbmVnYXRlKCk7XG4gICAgcmV0dXJuIGV4cGFuZGluZyA9IHByZXZfZXhwYW5kaW5nO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgTm9ybWFsaXplIHJhZGljYWwgZmFjdG9yc1xuXG4gIC8vICBJbnB1dDogICAgc3RhY2tbaF0gIENvZWZmaWNpZW50IGZhY3RvciwgcG9zc2libHkgMVxuXG4gIC8vICAgICAgc3RhY2tbaCArIDFdICBTZWNvbmQgZmFjdG9yXG5cbiAgLy8gICAgICBzdGFja1t0b3MgLSAxXSAgTGFzdCBmYWN0b3JcblxuICAvLyAgT3V0cHV0OiAgICBSZWR1Y2VkIGNvZWZmaWNlbnQgYW5kIG5vcm1hbGl6ZWQgcmFkaWNhbHMgKG1heWJlKVxuXG4gIC8vICBFeGFtcGxlOiAgMioyXigtMS8yKSAtPiAyXigxLzIpXG5cbiAgLy8gIChwb3dlciBudW1iZXIgbnVtYmVyKSBpcyBndWFyYW50ZWVkIHRvIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuXG4gIC8vICAxLiBCYXNlIGlzIGFuIGludGVnZXJcblxuICAvLyAgMi4gQWJzb2x1dGUgdmFsdWUgb2YgZXhwb25lbnQgPCAxXG5cbiAgLy8gIFRoZXNlIHByb3BlcnRpZXMgYXJlIGFzc3VyZWQgYnkgdGhlIHBvd2VyIGZ1bmN0aW9uLlxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvL2RlZmluZSBBIHAxXG4gIC8vZGVmaW5lIEIgcDJcblxuICAvL2RlZmluZSBCQVNFIHAzXG4gIC8vZGVmaW5lIEVYUE8gcDRcblxuICAvL2RlZmluZSBUTVAgcDVcblxuICAvLyBoIGlzIGFuIGludFxuICBfX25vcm1hbGl6ZV9yYWRpY2FsX2ZhY3RvcnMgPSBmdW5jdGlvbihoKSB7XG4gICAgdmFyIGksIGkxLCBqMSwgbywgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1O1xuICAgIGkgPSAwO1xuICAgIC8vIGlmIGNvZWZmIGlzIDEgb3IgZmxvYXRpbmcgdGhlbiBkb24ndCBib3RoZXJcbiAgICBpZiAoaXNwbHVzb25lKHN0YWNrW2hdKSB8fCBpc21pbnVzb25lKHN0YWNrW2hdKSB8fCBpc2RvdWJsZShzdGFja1toXSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4vLyBpZiBubyByYWRpY2FscyB0aGVuIGRvbid0IGJvdGhlclxuICAgIGZvciAoaSA9IG8gPSByZWYgPSBoICsgMSwgcmVmMSA9IHRvczsgKHJlZiA8PSByZWYxID8gbyA8IHJlZjEgOiBvID4gcmVmMSk7IGkgPSByZWYgPD0gcmVmMSA/ICsrbyA6IC0tbykge1xuICAgICAgaWYgKF9faXNfcmFkaWNhbF9udW1iZXIoc3RhY2tbaV0pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA9PT0gdG9zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIG9rLCB0cnkgdG8gc2ltcGxpZnlcbiAgICBzYXZlKCk7XG4gICAgLy8gbnVtZXJhdG9yXG4gICAgcHVzaChzdGFja1toXSk7XG4gICAgbXBfbnVtZXJhdG9yKCk7XG4gICAgLy9jb25zb2xlLmxvZyhcIl9fbm9ybWFsaXplX3JhZGljYWxfZmFjdG9ycyBudW1lcmF0b3I6IFwiICsgc3RhY2tbdG9zLTFdKVxuICAgIHAxID0gcG9wKCk7XG4gICAgZm9yIChpID0gaTEgPSByZWYyID0gaCArIDEsIHJlZjMgPSB0b3M7IChyZWYyIDw9IHJlZjMgPyBpMSA8IHJlZjMgOiBpMSA+IHJlZjMpOyBpID0gcmVmMiA8PSByZWYzID8gKytpMSA6IC0taTEpIHtcbiAgICAgIGlmIChpc3BsdXNvbmUocDEpIHx8IGlzbWludXNvbmUocDEpKSB7IC8vIHAxIGlzIEFcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoIV9faXNfcmFkaWNhbF9udW1iZXIoc3RhY2tbaV0pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcDMgPSBjYWRyKHN0YWNrW2ldKTtcbiAgICAgIHA0ID0gY2FkZHIoc3RhY2tbaV0pO1xuICAgICAgaWYgKCFpc25lZ2F0aXZlbnVtYmVyKHA0KSkgeyAvL3A0IGlzIEVYUE9cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBudW1lcmF0b3IgZGl2aXNpYmxlIGJ5IHAzIChiYXNlKT9cbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBkaXZpZGUoKTtcbiAgICAgIHA1ID0gcG9wKCk7XG4gICAgICBpZiAoIWlzaW50ZWdlcihwNSkpIHsgLy9wNSBpcyBUTVBcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyByZWR1Y2UgbnVtZXJhdG9yXG4gICAgICBwMSA9IHA1O1xuICAgICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBwdXNoKGV2YWx1YXRpbmdBc0Zsb2F0cyA/IG9uZV9hc19kb3VibGUgOiBvbmUpO1xuICAgICAgcHVzaChwNCk7XG4gICAgICBhZGQoKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICBzdGFja1tpXSA9IHBvcCgpO1xuICAgIH1cbiAgICAvLyBkZW5vbWluYXRvclxuICAgIHB1c2goc3RhY2tbaF0pO1xuICAgIG1wX2Rlbm9taW5hdG9yKCk7XG4gICAgLy9jb25zb2xlLmxvZyhcIl9fbm9ybWFsaXplX3JhZGljYWxfZmFjdG9ycyBkZW5vbWluYXRvcjogXCIgKyBzdGFja1t0b3MtMV0pXG4gICAgcDIgPSBwb3AoKTtcbiAgICBmb3IgKGkgPSBqMSA9IHJlZjQgPSBoICsgMSwgcmVmNSA9IHRvczsgKHJlZjQgPD0gcmVmNSA/IGoxIDwgcmVmNSA6IGoxID4gcmVmNSk7IGkgPSByZWY0IDw9IHJlZjUgPyArK2oxIDogLS1qMSkge1xuICAgICAgaWYgKGlzcGx1c29uZShwMikpIHsgLy8gcDIgaXMgQlxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICghX19pc19yYWRpY2FsX251bWJlcihzdGFja1tpXSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBwMyA9IGNhZHIoc3RhY2tbaV0pO1xuICAgICAgcDQgPSBjYWRkcihzdGFja1tpXSk7XG4gICAgICBpZiAoaXNuZWdhdGl2ZW51bWJlcihwNCkpIHsgLy9wNCBpcyBFWFBPXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gZGVub21pbmF0b3IgZGl2aXNpYmxlIGJ5IHAzPyAjcDMgaXMgQkFTRVxuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIGRpdmlkZSgpO1xuICAgICAgcDUgPSBwb3AoKTtcbiAgICAgIGlmICghaXNpbnRlZ2VyKHA1KSkgeyAvL3A1IGlzIFRNUFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vY29uc29sZS5sb2coXCJfX25ldyByYWRpY2FsIHA1OiBcIiArIHA1LnRvU3RyaW5nKCkpXG4gICAgICAvL2NvbnNvbGUubG9nKFwiX19uZXcgcmFkaWNhbCB0b3Agc3RhY2s6IFwiICsgc3RhY2tbdG9zLTFdKVxuXG4gICAgICAvLyByZWR1Y2UgZGVub21pbmF0b3JcbiAgICAgIHAyID0gcDU7XG4gICAgICBwdXNoX3N5bWJvbChQT1dFUik7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgcHVzaChvbmUpO1xuICAgICAgc3VidHJhY3QoKTtcbiAgICAgIGlmIChkb250Q3JlYXRlTmV3UmFkaWNhbHNJbkRlbm9taW5hdG9yV2hlbkV2YWxpbmdNdWx0aXBsaWNhdGlvbikge1xuICAgICAgICBpZiAoaXNpbnRlZ2VyKHAzKSAmJiAhaXNpbnRlZ2VyKHN0YWNrW3RvcyAtIDFdKSAmJiBpc25lZ2F0aXZlbnVtYmVyKHN0YWNrW3RvcyAtIDFdKSkge1xuICAgICAgICAgIC8vIGJhaWwgb3V0LFxuICAgICAgICAgIC8vIHdlIHdhbnQgdG8gYXZvaWQgZ29pbmcgYWhlYWQgd2l0aCB0aGUgc3VidHJhY3Rpb24gb2ZcbiAgICAgICAgICAvLyB0aGUgZXhwb25lbnRzLCBiZWNhdXNlIHRoYXQgd291bGQgdHVybiBhIHBlcmZlY3RseSBnb29kXG4gICAgICAgICAgLy8gaW50ZWdlciBleHBvbmVudCBpbiB0aGUgZGVub21pbmF0b3IgaW50byBhIGZyYWN0aW9uYWwgb25lXG4gICAgICAgICAgLy8gaS5lLiBhIHJhZGljYWwuXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgb25seSBwcmV2ZW50cyBuZXcgcmFkaWNhbHMgZW5kaW5nIHVwXG4gICAgICAgICAgLy8gaW4gdGhlIGRlbm9taW5hdG9yLCBpdCBkb2Vzbid0IGZpeCBleGlzdGluZyBvbmVzLlxuICAgICAgICAgIHBvcCgpO1xuICAgICAgICAgIHBvcCgpO1xuICAgICAgICAgIHBvcCgpO1xuICAgICAgICAgIHB1c2gocDEpO1xuICAgICAgICAgIHB1c2gocDMpO1xuICAgICAgICAgIGRpdmlkZSgpO1xuICAgICAgICAgIHAxID0gcG9wKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vY29uc29sZS5sb2coXCJfX25ldyByYWRpY2FsIGV4cG9uZW50OiBcIiArIHN0YWNrW3Rvcy0xXSlcbiAgICAgIGxpc3QoMyk7XG4gICAgICBzdGFja1tpXSA9IHBvcCgpO1xuICAgIH1cbiAgICAvLyByZWNvbnN0aXR1dGUgdGhlIGNvZWZmaWNpZW50XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMik7XG4gICAgZGl2aWRlKCk7XG4gICAgc3RhY2tbaF0gPSBwb3AoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIGRvbid0IGluY2x1ZGUgaVxuXG4gIC8vIHAgaXMgYSBVXG4gIF9faXNfcmFkaWNhbF9udW1iZXIgPSBmdW5jdGlvbihwKSB7XG4gICAgLy8gZG9uJ3QgdXNlIGlcbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woUE9XRVIpICYmIGlzTnVtZXJpY0F0b20oY2FkcihwKSkgJiYgaXNOdW1lcmljQXRvbShjYWRkcihwKSkgJiYgIWlzbWludXNvbmUoY2FkcihwKSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICA+IGEqaGlsYmVydCgyKVxuICAvLyAgKChhLDEvMiphKSwoMS8yKmEsMS8zKmEpKVxuXG4gIC8vICBOb3RlIHRoYXQgXCJhXCIgaXMgcHJlc3VtZWQgdG8gYmUgYSBzY2FsYXIuIElzIHRoaXMgY29ycmVjdD9cblxuICAvLyAgWWVzLCBiZWNhdXNlIFwiKlwiIGhhcyBubyBtZWFuaW5nIGlmIFwiYVwiIGlzIGEgdGVuc29yLlxuICAvLyAgVG8gbXVsdGlwbHkgdGVuc29ycywgXCJkb3RcIiBvciBcIm91dGVyXCIgc2hvdWxkIGJlIHVzZWQuXG5cbiAgLy8gID4gZG90KGEsaGlsYmVydCgyKSlcbiAgLy8gIGRvdChhLCgoMSwxLzIpLCgxLzIsMS8zKSkpXG5cbiAgLy8gIEluIHRoaXMgY2FzZSBcImFcIiBjb3VsZCBiZSBhIHNjYWxhciBvciB0ZW5zb3Igc28gdGhlIHJlc3VsdCBpcyBub3RcbiAgLy8gIGV4cGFuZGVkLlxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBmaW5kIHRoZSByb290cyBvZiBhIHBvbHlub21pYWwgbnVtZXJpY2FsbHlcbiAgTlJPT1RTX1lNQVggPSAxMDE7XG5cbiAgTlJPT1RTX0RFTFRBID0gMS4wZS02O1xuXG4gIE5ST09UU19FUFNJTE9OID0gMS4wZS05O1xuXG4gIE5ST09UU19BQlMgPSBmdW5jdGlvbih6KSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCh6LnIgKiB6LnIgKyB6LmkgKiB6LmkpO1xuICB9O1xuXG4gIC8vIHJhbmRvbSBiZXR3ZWVuIC0yIGFuZCAyXG4gIHRoZVJhbmRvbSA9IDAuMDtcblxuICBOUk9PVFNfUkFORE9NID0gZnVuY3Rpb24oKSB7XG4gICAgLy90aGVSYW5kb20gKz0gMC4yXG4gICAgLy9yZXR1cm4gdGhlUmFuZG9tXG4gICAgcmV0dXJuIDQuMCAqIE1hdGgucmFuZG9tKCkgLSAyLjA7XG4gIH07XG5cbiAgbnVtZXJpY1Jvb3RPZlBvbHlub21pYWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgY2xhc3MgbnVtZXJpY1Jvb3RPZlBvbHlub21pYWwge307XG5cbiAgICBudW1lcmljUm9vdE9mUG9seW5vbWlhbC5wcm90b3R5cGUuciA9IDAuMDtcblxuICAgIG51bWVyaWNSb290T2ZQb2x5bm9taWFsLnByb3RvdHlwZS5pID0gMC4wO1xuXG4gICAgcmV0dXJuIG51bWVyaWNSb290T2ZQb2x5bm9taWFsO1xuXG4gIH0pLmNhbGwodGhpcyk7XG5cbiAgbnJvb3RzX2EgPSBuZXcgbnVtZXJpY1Jvb3RPZlBvbHlub21pYWwoKTtcblxuICBucm9vdHNfYiA9IG5ldyBudW1lcmljUm9vdE9mUG9seW5vbWlhbCgpO1xuXG4gIG5yb290c194ID0gbmV3IG51bWVyaWNSb290T2ZQb2x5bm9taWFsKCk7XG5cbiAgbnJvb3RzX3kgPSBuZXcgbnVtZXJpY1Jvb3RPZlBvbHlub21pYWwoKTtcblxuICBucm9vdHNfZmEgPSBuZXcgbnVtZXJpY1Jvb3RPZlBvbHlub21pYWwoKTtcblxuICBucm9vdHNfZmIgPSBuZXcgbnVtZXJpY1Jvb3RPZlBvbHlub21pYWwoKTtcblxuICBucm9vdHNfZHggPSBuZXcgbnVtZXJpY1Jvb3RPZlBvbHlub21pYWwoKTtcblxuICBucm9vdHNfZGYgPSBuZXcgbnVtZXJpY1Jvb3RPZlBvbHlub21pYWwoKTtcblxuICBucm9vdHNfYyA9IFtdO1xuXG4gIGZvciAoaW5pdE5Sb290cyA9IG8gPSAwLCByZWYgPSBOUk9PVFNfWU1BWDsgKDAgPD0gcmVmID8gbyA8IHJlZiA6IG8gPiByZWYpOyBpbml0TlJvb3RzID0gMCA8PSByZWYgPyArK28gOiAtLW8pIHtcbiAgICBucm9vdHNfY1tpbml0TlJvb3RzXSA9IG5ldyBudW1lcmljUm9vdE9mUG9seW5vbWlhbCgpO1xuICB9XG5cbiAgRXZhbF9ucm9vdHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCwgaSwgaTEsIGoxLCBrLCBsMSwgbiwgcmVmMSwgcmVmMiwgcmVmMztcbiAgICBoID0gMDtcbiAgICBpID0gMDtcbiAgICBrID0gMDtcbiAgICBuID0gMDtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGlmIChwMiA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIGd1ZXNzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDIpO1xuICAgIH1cbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKCFpc3BvbHlleHBhbmRlZGZvcm0ocDEsIHAyKSkge1xuICAgICAgc3RvcChcIm5yb290czogcG9seW5vbWlhbD9cIik7XG4gICAgfVxuICAgIC8vIG1hcmsgdGhlIHN0YWNrXG4gICAgaCA9IHRvcztcbiAgICAvLyBnZXQgdGhlIGNvZWZmaWNpZW50c1xuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIG4gPSBjb2VmZigpO1xuICAgIGlmIChuID4gTlJPT1RTX1lNQVgpIHtcbiAgICAgIHN0b3AoXCJucm9vdHM6IGRlZ3JlZT9cIik7XG4gICAgfVxuLy8gY29udmVydCB0aGUgY29lZmZpY2llbnRzIHRvIHJlYWwgYW5kIGltYWdpbmFyeSBkb3VibGVzXG4gICAgZm9yIChpID0gaTEgPSAwLCByZWYxID0gbjsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGkgPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgcHVzaChzdGFja1toICsgaV0pO1xuICAgICAgcmVhbCgpO1xuICAgICAgeXlmbG9hdCgpO1xuICAgICAgRXZhbCgpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIHB1c2goc3RhY2tbaCArIGldKTtcbiAgICAgIGltYWcoKTtcbiAgICAgIHl5ZmxvYXQoKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHAyID0gcG9wKCk7XG4gICAgICBpZiAoIWlzZG91YmxlKHAxKSB8fCAhaXNkb3VibGUocDIpKSB7XG4gICAgICAgIHN0b3AoXCJucm9vdHM6IGNvZWZmaWNpZW50cz9cIik7XG4gICAgICB9XG4gICAgICBucm9vdHNfY1tpXS5yID0gcDEuZDtcbiAgICAgIG5yb290c19jW2ldLmkgPSBwMi5kO1xuICAgIH1cbiAgICAvLyBwb3AgdGhlIGNvZWZmaWNpZW50c1xuICAgIG1vdmVUb3MoaCk7XG4gICAgLy8gbiBpcyB0aGUgbnVtYmVyIG9mIGNvZWZmaWNpZW50cywgbiA9IGRlZyhwKSArIDFcbiAgICBtb25pYyhuKTtcbiAgICBmb3IgKGsgPSBqMSA9IHJlZjIgPSBuOyBqMSA+IDE7IGsgPSBqMSArPSAtMSkge1xuICAgICAgZmluZHJvb3Qoayk7XG4gICAgICBpZiAoTWF0aC5hYnMobnJvb3RzX2EucikgPCBOUk9PVFNfREVMVEEpIHtcbiAgICAgICAgbnJvb3RzX2EuciA9IDAuMDtcbiAgICAgIH1cbiAgICAgIGlmIChNYXRoLmFicyhucm9vdHNfYS5pKSA8IE5ST09UU19ERUxUQSkge1xuICAgICAgICBucm9vdHNfYS5pID0gMC4wO1xuICAgICAgfVxuICAgICAgcHVzaF9kb3VibGUobnJvb3RzX2Eucik7XG4gICAgICBwdXNoX2RvdWJsZShucm9vdHNfYS5pKTtcbiAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgYWRkKCk7XG4gICAgICBOUk9PVFNfZGl2cG9seShrKTtcbiAgICB9XG4gICAgLy8gbm93IG1ha2UgbiBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIHJvb3RzXG4gICAgbiA9IHRvcyAtIGg7XG4gICAgaWYgKG4gPiAxKSB7XG4gICAgICBzb3J0X3N0YWNrKG4pO1xuICAgICAgcDEgPSBhbGxvY190ZW5zb3Iobik7XG4gICAgICBwMS50ZW5zb3IubmRpbSA9IDE7XG4gICAgICBwMS50ZW5zb3IuZGltWzBdID0gbjtcbiAgICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMyA9IG47ICgwIDw9IHJlZjMgPyBsMSA8IHJlZjMgOiBsMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKytsMSA6IC0tbDEpIHtcbiAgICAgICAgcDEudGVuc29yLmVsZW1baV0gPSBzdGFja1toICsgaV07XG4gICAgICB9XG4gICAgICBtb3ZlVG9zKGgpO1xuICAgICAgcmV0dXJuIHB1c2gocDEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBkaXZpZGUgdGhlIHBvbHlub21pYWwgYnkgaXRzIGxlYWRpbmcgY29lZmZpY2llbnRcbiAgbW9uaWMgPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGkxLCBrLCByZWYxLCB0O1xuICAgIGsgPSAwO1xuICAgIHQgPSAwLjA7XG4gICAgbnJvb3RzX3kuciA9IG5yb290c19jW24gLSAxXS5yO1xuICAgIG5yb290c195LmkgPSBucm9vdHNfY1tuIC0gMV0uaTtcbiAgICB0ID0gbnJvb3RzX3kuciAqIG5yb290c195LnIgKyBucm9vdHNfeS5pICogbnJvb3RzX3kuaTtcbiAgICBmb3IgKGsgPSBpMSA9IDAsIHJlZjEgPSBuIC0gMTsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGsgPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgbnJvb3RzX2Nba10uciA9IChucm9vdHNfY1trXS5yICogbnJvb3RzX3kuciArIG5yb290c19jW2tdLmkgKiBucm9vdHNfeS5pKSAvIHQ7XG4gICAgICBucm9vdHNfY1trXS5pID0gKG5yb290c19jW2tdLmkgKiBucm9vdHNfeS5yIC0gbnJvb3RzX2Nba10uciAqIG5yb290c195LmkpIC8gdDtcbiAgICB9XG4gICAgbnJvb3RzX2NbbiAtIDFdLnIgPSAxLjA7XG4gICAgcmV0dXJuIG5yb290c19jW24gLSAxXS5pID0gMC4wO1xuICB9O1xuXG4gIC8vIHVzZXMgdGhlIHNlY2FudCBtZXRob2RcbiAgZmluZHJvb3QgPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGkxLCBqLCBqMSwgaywgbnJhYnMsIHQ7XG4gICAgaiA9IDA7XG4gICAgayA9IDA7XG4gICAgdCA9IDAuMDtcbiAgICBpZiAoTlJPT1RTX0FCUyhucm9vdHNfY1swXSkgPCBOUk9PVFNfREVMVEEpIHtcbiAgICAgIG5yb290c19hLnIgPSAwLjA7XG4gICAgICBucm9vdHNfYS5pID0gMC4wO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGogPSBpMSA9IDA7IGkxIDwgMTAwOyBqID0gKytpMSkge1xuICAgICAgbnJvb3RzX2EuciA9IE5ST09UU19SQU5ET00oKTtcbiAgICAgIG5yb290c19hLmkgPSBOUk9PVFNfUkFORE9NKCk7XG4gICAgICBjb21wdXRlX2ZhKG4pO1xuICAgICAgbnJvb3RzX2IuciA9IG5yb290c19hLnI7XG4gICAgICBucm9vdHNfYi5pID0gbnJvb3RzX2EuaTtcbiAgICAgIG5yb290c19mYi5yID0gbnJvb3RzX2ZhLnI7XG4gICAgICBucm9vdHNfZmIuaSA9IG5yb290c19mYS5pO1xuICAgICAgbnJvb3RzX2EuciA9IE5ST09UU19SQU5ET00oKTtcbiAgICAgIG5yb290c19hLmkgPSBOUk9PVFNfUkFORE9NKCk7XG4gICAgICBmb3IgKGsgPSBqMSA9IDA7IGoxIDwgMTAwMDsgayA9ICsrajEpIHtcbiAgICAgICAgY29tcHV0ZV9mYShuKTtcbiAgICAgICAgbnJhYnMgPSBOUk9PVFNfQUJTKG5yb290c19mYSk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwibnJhYnM6IFwiICsgbnJhYnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChucmFicyA8IE5ST09UU19FUFNJTE9OKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChOUk9PVFNfQUJTKG5yb290c19mYSkgPCBOUk9PVFNfQUJTKG5yb290c19mYikpIHtcbiAgICAgICAgICBucm9vdHNfeC5yID0gbnJvb3RzX2EucjtcbiAgICAgICAgICBucm9vdHNfeC5pID0gbnJvb3RzX2EuaTtcbiAgICAgICAgICBucm9vdHNfYS5yID0gbnJvb3RzX2IucjtcbiAgICAgICAgICBucm9vdHNfYS5pID0gbnJvb3RzX2IuaTtcbiAgICAgICAgICBucm9vdHNfYi5yID0gbnJvb3RzX3gucjtcbiAgICAgICAgICBucm9vdHNfYi5pID0gbnJvb3RzX3guaTtcbiAgICAgICAgICBucm9vdHNfeC5yID0gbnJvb3RzX2ZhLnI7XG4gICAgICAgICAgbnJvb3RzX3guaSA9IG5yb290c19mYS5pO1xuICAgICAgICAgIG5yb290c19mYS5yID0gbnJvb3RzX2ZiLnI7XG4gICAgICAgICAgbnJvb3RzX2ZhLmkgPSBucm9vdHNfZmIuaTtcbiAgICAgICAgICBucm9vdHNfZmIuciA9IG5yb290c194LnI7XG4gICAgICAgICAgbnJvb3RzX2ZiLmkgPSBucm9vdHNfeC5pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGR4ID0gbnJvb3RzX2IgLSBucm9vdHNfYVxuICAgICAgICBucm9vdHNfZHguciA9IG5yb290c19iLnIgLSBucm9vdHNfYS5yO1xuICAgICAgICBucm9vdHNfZHguaSA9IG5yb290c19iLmkgLSBucm9vdHNfYS5pO1xuICAgICAgICAvLyBkZiA9IGZiIC0gZmFcbiAgICAgICAgbnJvb3RzX2RmLnIgPSBucm9vdHNfZmIuciAtIG5yb290c19mYS5yO1xuICAgICAgICBucm9vdHNfZGYuaSA9IG5yb290c19mYi5pIC0gbnJvb3RzX2ZhLmk7XG4gICAgICAgIC8vIHkgPSBkeCAvIGRmXG4gICAgICAgIHQgPSBucm9vdHNfZGYuciAqIG5yb290c19kZi5yICsgbnJvb3RzX2RmLmkgKiBucm9vdHNfZGYuaTtcbiAgICAgICAgaWYgKHQgPT09IDAuMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5yb290c195LnIgPSAobnJvb3RzX2R4LnIgKiBucm9vdHNfZGYuciArIG5yb290c19keC5pICogbnJvb3RzX2RmLmkpIC8gdDtcbiAgICAgICAgbnJvb3RzX3kuaSA9IChucm9vdHNfZHguaSAqIG5yb290c19kZi5yIC0gbnJvb3RzX2R4LnIgKiBucm9vdHNfZGYuaSkgLyB0O1xuICAgICAgICAvLyBhID0gYiAtIHkgKiBmYlxuICAgICAgICBucm9vdHNfYS5yID0gbnJvb3RzX2IuciAtIChucm9vdHNfeS5yICogbnJvb3RzX2ZiLnIgLSBucm9vdHNfeS5pICogbnJvb3RzX2ZiLmkpO1xuICAgICAgICBucm9vdHNfYS5pID0gbnJvb3RzX2IuaSAtIChucm9vdHNfeS5yICogbnJvb3RzX2ZiLmkgKyBucm9vdHNfeS5pICogbnJvb3RzX2ZiLnIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RvcChcIm5yb290czogY29udmVyZ2VuY2UgZXJyb3JcIik7XG4gIH07XG5cbiAgY29tcHV0ZV9mYSA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgaTEsIGssIHJlZjEsIHJlc3VsdHMsIHQ7XG4gICAgayA9IDA7XG4gICAgdCA9IDAuMDtcbiAgICAvLyB4ID0gYVxuICAgIG5yb290c194LnIgPSBucm9vdHNfYS5yO1xuICAgIG5yb290c194LmkgPSBucm9vdHNfYS5pO1xuICAgIC8vIGZhID0gYzAgKyBjMSAqIHhcbiAgICBucm9vdHNfZmEuciA9IG5yb290c19jWzBdLnIgKyBucm9vdHNfY1sxXS5yICogbnJvb3RzX3guciAtIG5yb290c19jWzFdLmkgKiBucm9vdHNfeC5pO1xuICAgIG5yb290c19mYS5pID0gbnJvb3RzX2NbMF0uaSArIG5yb290c19jWzFdLnIgKiBucm9vdHNfeC5pICsgbnJvb3RzX2NbMV0uaSAqIG5yb290c194LnI7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoayA9IGkxID0gMiwgcmVmMSA9IG47ICgyIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBrID0gMiA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgIC8vIHggPSBhICogeFxuICAgICAgdCA9IG5yb290c19hLnIgKiBucm9vdHNfeC5yIC0gbnJvb3RzX2EuaSAqIG5yb290c194Lmk7XG4gICAgICBucm9vdHNfeC5pID0gbnJvb3RzX2EuciAqIG5yb290c194LmkgKyBucm9vdHNfYS5pICogbnJvb3RzX3gucjtcbiAgICAgIG5yb290c194LnIgPSB0O1xuICAgICAgLy8gZmEgKz0gY1trXSAqIHhcbiAgICAgIG5yb290c19mYS5yICs9IG5yb290c19jW2tdLnIgKiBucm9vdHNfeC5yIC0gbnJvb3RzX2Nba10uaSAqIG5yb290c194Lmk7XG4gICAgICByZXN1bHRzLnB1c2gobnJvb3RzX2ZhLmkgKz0gbnJvb3RzX2Nba10uciAqIG5yb290c194LmkgKyBucm9vdHNfY1trXS5pICogbnJvb3RzX3gucik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIGRpdmlkZSB0aGUgcG9seW5vbWlhbCBieSB4IC0gYVxuICBOUk9PVFNfZGl2cG9seSA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgaTEsIGoxLCBrLCByZWYxLCByZWYyLCByZXN1bHRzO1xuICAgIGsgPSAwO1xuICAgIGZvciAoayA9IGkxID0gcmVmMSA9IG4gLSAxOyAocmVmMSA8PSAwID8gaTEgPCAwIDogaTEgPiAwKTsgayA9IHJlZjEgPD0gMCA/ICsraTEgOiAtLWkxKSB7XG4gICAgICBucm9vdHNfY1trIC0gMV0uciArPSBucm9vdHNfY1trXS5yICogbnJvb3RzX2EuciAtIG5yb290c19jW2tdLmkgKiBucm9vdHNfYS5pO1xuICAgICAgbnJvb3RzX2NbayAtIDFdLmkgKz0gbnJvb3RzX2Nba10uaSAqIG5yb290c19hLnIgKyBucm9vdHNfY1trXS5yICogbnJvb3RzX2EuaTtcbiAgICB9XG4gICAgaWYgKE5ST09UU19BQlMobnJvb3RzX2NbMF0pID4gTlJPT1RTX0RFTFRBKSB7XG4gICAgICBzdG9wKFwibnJvb3RzOiByZXNpZHVhbCBlcnJvclwiKTtcbiAgICB9XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoayA9IGoxID0gMCwgcmVmMiA9IG4gLSAxOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgayA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBucm9vdHNfY1trXS5yID0gbnJvb3RzX2NbayArIDFdLnI7XG4gICAgICByZXN1bHRzLnB1c2gobnJvb3RzX2Nba10uaSA9IG5yb290c19jW2sgKyAxXS5pKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgRXZhbF9udW1lcmF0b3IgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIG51bWVyYXRvcigpO1xuICB9O1xuXG4gIG51bWVyYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoLCB0aGVBcmd1bWVudDtcbiAgICBoID0gMDtcbiAgICB0aGVBcmd1bWVudCA9IHBvcCgpO1xuICAgIGlmIChjYXIodGhlQXJndW1lbnQpID09PSBzeW1ib2woQUREKSkge1xuICAgICAgcHVzaCh0aGVBcmd1bWVudCk7XG4gICAgICAvL2NvbnNvbGUudHJhY2UgXCJyYXRpb25hbGlzaW5nIFwiXG4gICAgICByYXRpb25hbGl6ZSgpO1xuICAgICAgdGhlQXJndW1lbnQgPSBwb3AoKTtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyBcInJhdGlvbmFsaXNlZDogXCIgKyB0aGVBcmd1bWVudFxuICAgIGlmIChjYXIodGhlQXJndW1lbnQpID09PSBzeW1ib2woTVVMVElQTFkpICYmICFpc3BsdXNvbmUoY2FyKGNkcih0aGVBcmd1bWVudCkpKSkge1xuICAgICAgaCA9IHRvcztcbiAgICAgIHRoZUFyZ3VtZW50ID0gY2RyKHRoZUFyZ3VtZW50KTtcbiAgICAgIC8vY29uc29sZS5sb2cgXCJ0aGVBcmd1bWVudCBpbnNpZGUgbXVsdGlwbHk6IFwiICsgdGhlQXJndW1lbnRcbiAgICAgIC8vY29uc29sZS5sb2cgXCJmaXJzdCB0ZXJtOiBcIiArIGNhcih0aGVBcmd1bWVudClcbiAgICAgIHdoaWxlIChpc2NvbnModGhlQXJndW1lbnQpKSB7XG4gICAgICAgIHB1c2goY2FyKHRoZUFyZ3VtZW50KSk7XG4gICAgICAgIG51bWVyYXRvcigpO1xuICAgICAgICB0aGVBcmd1bWVudCA9IGNkcih0aGVBcmd1bWVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbXVsdGlwbHlfYWxsKHRvcyAtIGgpO1xuICAgIH0gZWxzZSBpZiAoaXNyYXRpb25hbCh0aGVBcmd1bWVudCkpIHtcbiAgICAgIHB1c2godGhlQXJndW1lbnQpO1xuICAgICAgcmV0dXJuIG1wX251bWVyYXRvcigpO1xuICAgIH0gZWxzZSBpZiAoY2FyKHRoZUFyZ3VtZW50KSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBpc25lZ2F0aXZldGVybShjYWRkcih0aGVBcmd1bWVudCkpKSB7XG4gICAgICByZXR1cm4gcHVzaChvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHVzaCh0aGVBcmd1bWVudCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIE91dGVyIHByb2R1Y3Qgb2YgdGVuc29yc1xuICBFdmFsX291dGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdHM7XG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHB1c2goY2FyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBvdXRlcigpO1xuICAgICAgcmVzdWx0cy5wdXNoKHAxID0gY2RyKHAxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIG91dGVyID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXN0ZW5zb3IocDEpICYmIGlzdGVuc29yKHAyKSkge1xuICAgICAgeXlvdXRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgaWYgKGlzdGVuc29yKHAxKSkge1xuICAgICAgICB0ZW5zb3JfdGltZXNfc2NhbGFyKCk7XG4gICAgICB9IGVsc2UgaWYgKGlzdGVuc29yKHAyKSkge1xuICAgICAgICBzY2FsYXJfdGltZXNfdGVuc29yKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHl5b3V0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaTEsIGosIGoxLCBrLCBsMSwgbTEsIG5kaW0sIG5lbGVtLCByZWYxLCByZWYyLCByZWYzLCByZWY0O1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIGsgPSAwO1xuICAgIG5kaW0gPSAwO1xuICAgIG5lbGVtID0gMDtcbiAgICBuZGltID0gcDEudGVuc29yLm5kaW0gKyBwMi50ZW5zb3IubmRpbTtcbiAgICBpZiAobmRpbSA+IE1BWERJTSkge1xuICAgICAgc3RvcChcIm91dGVyOiByYW5rIG9mIHJlc3VsdCBleGNlZWRzIG1heGltdW1cIik7XG4gICAgfVxuICAgIG5lbGVtID0gcDEudGVuc29yLm5lbGVtICogcDIudGVuc29yLm5lbGVtO1xuICAgIHAzID0gYWxsb2NfdGVuc29yKG5lbGVtKTtcbiAgICBwMy50ZW5zb3IubmRpbSA9IG5kaW07XG4gICAgZm9yIChpID0gaTEgPSAwLCByZWYxID0gcDEudGVuc29yLm5kaW07ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgIHAzLnRlbnNvci5kaW1baV0gPSBwMS50ZW5zb3IuZGltW2ldO1xuICAgIH1cbiAgICBqID0gaTtcbiAgICBmb3IgKGkgPSBqMSA9IDAsIHJlZjIgPSBwMi50ZW5zb3IubmRpbTsgKDAgPD0gcmVmMiA/IGoxIDwgcmVmMiA6IGoxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2oxIDogLS1qMSkge1xuICAgICAgcDMudGVuc29yLmRpbVtqICsgaV0gPSBwMi50ZW5zb3IuZGltW2ldO1xuICAgIH1cbiAgICBrID0gMDtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjMgPSBwMS50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjMgPyBsMSA8IHJlZjMgOiBsMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIGZvciAoaiA9IG0xID0gMCwgcmVmNCA9IHAyLnRlbnNvci5uZWxlbTsgKDAgPD0gcmVmNCA/IG0xIDwgcmVmNCA6IG0xID4gcmVmNCk7IGogPSAwIDw9IHJlZjQgPyArK20xIDogLS1tMSkge1xuICAgICAgICBwdXNoKHAxLnRlbnNvci5lbGVtW2ldKTtcbiAgICAgICAgcHVzaChwMi50ZW5zb3IuZWxlbVtqXSk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIHAzLnRlbnNvci5lbGVtW2srK10gPSBwb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDMpO1xuICB9O1xuXG4gIHBhcnRpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgcDQgPSBwMztcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIGlmIChGaW5kKGNhcihwMSksIHAyKSkge1xuICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgcDQgPSBwb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2gocDMpO1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBwMyA9IHBvcCgpO1xuICAgICAgfVxuICAgICAgcDEgPSBjZHIocDEpO1xuICAgIH1cbiAgICBwdXNoKHAzKTtcbiAgICBwdXNoKHA0KTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8qXG4gICAgQWRkIGEgcGF0dGVybiBpLmUuIGEgc3Vic3RpdHV0aW9uIHJ1bGUuXG4gICAgU3Vic3RpdHV0aW9uIHJ1bGUgbmVlZHMgYSB0ZW1wbGF0ZSBhcyBmaXJzdCBhcmd1bWVudFxuICAgIGFuZCB3aGF0IHRvIHRyYW5zZm9ybSBpdCB0byBhcyBzZWNvbmQgYXJndW1lbnQuXG4gICAgT3B0aW9uYWwgdGhpcmQgYXJndW1lbnQgaXMgYSBib29sZWFuIHRlc3Qgd2hpY2hcbiAgICBhZGRzIGNvbmRpdGlvbnMgdG8gd2hlbiB0aGUgcnVsZSBpcyBhcHBsaWVkLlxuICAqL1xuICAvLyBzYW1lIGFzIEV2YWxfcGF0dGVybiBidXQgb25seSBsZWF2ZXNcbiAgLy8gTklMIG9uIHN0YWNrIGF0IHJldHVybiwgaGVuY2UgZ2l2ZXMgbm9cbiAgLy8gcHJpbnRvdXRcbiAgRXZhbF9zaWxlbnRwYXR0ZXJuID0gZnVuY3Rpb24oKSB7XG4gICAgRXZhbF9wYXR0ZXJuKCk7XG4gICAgcG9wKCk7XG4gICAgcmV0dXJuIHB1c2hfc3ltYm9sKE5JTCk7XG4gIH07XG5cbiAgRXZhbF9wYXR0ZXJuID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpcnN0QXJndW1lbnQsIHBhdHRlcm5Qb3NpdGlvbiwgc2Vjb25kQXJndW1lbnQsIHN0cmluZ0tleSwgdGhpcmRBcmd1bWVudDtcbiAgICBpZiAoIWlzY29ucyhjZHIocDEpKSkge1xuICAgICAgc3RvcChcInBhdHRlcm4gbmVlZHMgYXQgbGVhc3QgYSB0ZW1wbGF0ZSBhbmQgYSB0cmFuc2Zvcm1lZCB2ZXJzaW9uXCIpO1xuICAgIH1cbiAgICBmaXJzdEFyZ3VtZW50ID0gY2FyKGNkcihwMSkpO1xuICAgIHNlY29uZEFyZ3VtZW50ID0gY2FyKGNkcihjZHIocDEpKSk7XG4gICAgaWYgKHNlY29uZEFyZ3VtZW50ID09PSBzeW1ib2woTklMKSkge1xuICAgICAgc3RvcChcInBhdHRlcm4gbmVlZHMgYXQgbGVhc3QgYSB0ZW1wbGF0ZSBhbmQgYSB0cmFuc2Zvcm1lZCB2ZXJzaW9uXCIpO1xuICAgIH1cbiAgICBpZiAoIWlzY29ucyhjZHIoY2RyKHAxKSkpKSB7XG4gICAgICB0aGlyZEFyZ3VtZW50ID0gc3ltYm9sKE5JTCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXJkQXJndW1lbnQgPSBjYXIoY2RyKGNkcihjZHIocDEpKSkpO1xuICAgIH1cbiAgICBpZiAoZXF1YWwoZmlyc3RBcmd1bWVudCwgc2Vjb25kQXJndW1lbnQpKSB7XG4gICAgICBzdG9wKFwicmVjdXJzaXZlIHBhdHRlcm5cIik7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nIFwiRXZhbF9wYXR0ZXJuIG9mIFwiICsgY2RyKHAxKVxuICAgIC8vIHRoaXMgaXMgbGlrZWx5IHRvIGNyZWF0ZSBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAvLyBwcm9ibGVtcyBpbiB0aGUgQyB2ZXJzaW9uIGFzIGl0J3MgYW5cbiAgICAvLyB1bnRyYWNrZWQgcmVmZXJlbmNlXG4gICAgc3RyaW5nS2V5ID0gXCJ0ZW1wbGF0ZTogXCIgKyBwcmludF9saXN0KGZpcnN0QXJndW1lbnQpO1xuICAgIHN0cmluZ0tleSArPSBcIiB0ZXN0czogXCIgKyBwcmludF9saXN0KHRoaXJkQXJndW1lbnQpO1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJwYXR0ZXJuIHN0cmluZ2tleTogXCIgKyBzdHJpbmdLZXkpO1xuICAgIH1cbiAgICBwYXR0ZXJuUG9zaXRpb24gPSB1c2VyU2ltcGxpZmljYXRpb25zSW5TdHJpbmdGb3JtLmluZGV4T2Yoc3RyaW5nS2V5KTtcbiAgICAvLyBpZiBwYXR0ZXJuIGlzIG5vdCB0aGVyZSB5ZXQsIGFkZCBpdCwgb3RoZXJ3aXNlIHJlcGxhY2UgaXRcbiAgICBpZiAocGF0dGVyblBvc2l0aW9uID09PSAtMSkge1xuICAgICAgLy9jb25zb2xlLmxvZyBcImFkZGluZyBwYXR0ZXJuIGJlY2F1c2UgaXQgZG9lc24ndCBleGlzdDogXCIgKyBjZHIocDEpXG4gICAgICB1c2VyU2ltcGxpZmljYXRpb25zSW5TdHJpbmdGb3JtLnB1c2goc3RyaW5nS2V5KTtcbiAgICAgIHVzZXJTaW1wbGlmaWNhdGlvbnNJbkxpc3RGb3JtLnB1c2goY2RyKHAxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcInBhdHRlcm4gYWxyZWFkeSBleGlzdHMsIHJlcGxhY2luZy4gXCIgKyBjZHIocDEpKTtcbiAgICAgIH1cbiAgICAgIHVzZXJTaW1wbGlmaWNhdGlvbnNJblN0cmluZ0Zvcm1bcGF0dGVyblBvc2l0aW9uXSA9IHN0cmluZ0tleTtcbiAgICAgIHVzZXJTaW1wbGlmaWNhdGlvbnNJbkxpc3RGb3JtW3BhdHRlcm5Qb3NpdGlvbl0gPSBjZHIocDEpO1xuICAgIH1cbiAgICAvLyByZXR1cm4gdGhlIHBhdHRlcm4gbm9kZSBpdHNlbGYgc28gd2UgY2FuXG4gICAgLy8gZ2l2ZSBzb21lIHByaW50b3V0IGZlZWRiYWNrXG4gICAgcHVzaF9zeW1ib2woUEFUVEVSTik7XG4gICAgcHVzaChjZHIocDEpKTtcbiAgICByZXR1cm4gbGlzdCgyKTtcbiAgfTtcblxuICBkb19jbGVhclBhdHRlcm5zID0gZnVuY3Rpb24oKSB7XG4gICAgdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm0gPSBbXTtcbiAgICByZXR1cm4gdXNlclNpbXBsaWZpY2F0aW9uc0luU3RyaW5nRm9ybSA9IFtdO1xuICB9O1xuXG4gIEV2YWxfY2xlYXJwYXR0ZXJucyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIHRoaXMgaXMgbGlrZWx5IHRvIGNyZWF0ZSBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAvLyBwcm9ibGVtcyBpbiB0aGUgQyB2ZXJzaW9uIGFzIGl0J3MgYW5cbiAgICAvLyB1bnRyYWNrZWQgcmVmZXJlbmNlXG4gICAgZG9fY2xlYXJQYXR0ZXJucygpO1xuICAgIFxuICAgIC8vIHJldHVybiBub3RoaW5nXG4gICAgcmV0dXJuIHB1c2hfc3ltYm9sKE5JTCk7XG4gIH07XG5cbiAgRXZhbF9wYXR0ZXJuc2luZm8gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGF0dGVybnNpbmZvVG9CZVByaW50ZWQ7XG4gICAgcGF0dGVybnNpbmZvVG9CZVByaW50ZWQgPSBwYXR0ZXJuc2luZm8oKTtcbiAgICBpZiAocGF0dGVybnNpbmZvVG9CZVByaW50ZWQgIT09IFwiXCIpIHtcbiAgICAgIHJldHVybiBuZXdfc3RyaW5nKHBhdHRlcm5zaW5mb1RvQmVQcmludGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHB1c2hfc3ltYm9sKE5JTCk7XG4gICAgfVxuICB9O1xuXG4gIHBhdHRlcm5zaW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBpMSwgbGVuLCBwYXR0ZXJuc2luZm9Ub0JlUHJpbnRlZDtcbiAgICBwYXR0ZXJuc2luZm9Ub0JlUHJpbnRlZCA9IFwiXCI7XG4gICAgZm9yIChpMSA9IDAsIGxlbiA9IHVzZXJTaW1wbGlmaWNhdGlvbnNJbkxpc3RGb3JtLmxlbmd0aDsgaTEgPCBsZW47IGkxKyspIHtcbiAgICAgIGkgPSB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybVtpMV07XG4gICAgICBwYXR0ZXJuc2luZm9Ub0JlUHJpbnRlZCArPSB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybSArIFwiXFxuXCI7XG4gICAgfVxuICAgIHJldHVybiBwYXR0ZXJuc2luZm9Ub0JlUHJpbnRlZDtcbiAgfTtcblxuICBFdmFsX3BvbGFyID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiBwb2xhcigpO1xuICB9O1xuXG4gIHBvbGFyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gdGhlcmUgYXJlIHBvaW50cyB3aGVyZSB3ZSB0dXJuIHBvbGFyXG4gICAgLy8gcmVwcmVzZW50YXRpb25zIGludG8gcmVjdCwgd2Ugc2V0IGEgXCJzdGFjayBmbGFnXCJcbiAgICAvLyBoZXJlIHRvIGF2b2lkIHRoYXQsIHNvIHdlIGRvbid0IHVuZG8gdGhlXG4gICAgLy8gd29yayB0aGF0IHdlIGFyZSB0cnlpbmcgdG8gZG8uXG4gICAgZXZhbHVhdGluZ1BvbGFyKys7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgcHVzaChwMSk7XG4gICAgYWJzKCk7XG4gICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICBwdXNoKHAxKTtcbiAgICBhcmcoKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGV4cG9uZW50aWFsKCk7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBldmFsdWF0aW5nUG9sYXItLTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIEZhY3RvciB1c2luZyB0aGUgUG9sbGFyZCByaG8gbWV0aG9kXG4gIG5fZmFjdG9yX251bWJlciA9IDA7XG5cbiAgZmFjdG9yX251bWJlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoO1xuICAgIGggPSAwO1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIC8vIDAgb3IgMT9cbiAgICBpZiAoZXF1YWxuKHAxLCAwKSB8fCBlcXVhbG4ocDEsIDEpIHx8IGVxdWFsbihwMSwgLTEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbl9mYWN0b3JfbnVtYmVyID0gcDEucS5hO1xuICAgIGggPSB0b3M7XG4gICAgZmFjdG9yX2EoKTtcbiAgICBpZiAodG9zIC0gaCA+IDEpIHtcbiAgICAgIGxpc3QodG9zIC0gaCk7XG4gICAgICBwdXNoX3N5bWJvbChNVUxUSVBMWSk7XG4gICAgICBzd2FwKCk7XG4gICAgICBjb25zKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gZmFjdG9yIHVzaW5nIHRhYmxlIGxvb2stdXAsIHRoZW4gc3dpdGNoIHRvIHJobyBtZXRob2QgaWYgbmVjZXNzYXJ5XG5cbiAgLy8gRnJvbSBUQU9DUCBWb2wuIDIgYnkgS251dGgsIHAuIDM4MCAoQWxnb3JpdGhtIEEpXG4gIGZhY3Rvcl9hID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGkxLCBrO1xuICAgIGsgPSAwO1xuICAgIGlmIChuX2ZhY3Rvcl9udW1iZXIuaXNOZWdhdGl2ZSgpKSB7XG4gICAgICBuX2ZhY3Rvcl9udW1iZXIgPSBzZXRTaWduVG8obl9mYWN0b3JfbnVtYmVyLCAxKTtcbiAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgfVxuICAgIGZvciAoayA9IGkxID0gMDsgaTEgPCAxMDAwMDsgayA9ICsraTEpIHtcbiAgICAgIHRyeV9rdGhfcHJpbWUoayk7XG4gICAgICAvLyBpZiBuX2ZhY3Rvcl9udW1iZXIgaXMgMSB0aGVuIHdlJ3JlIGRvbmVcbiAgICAgIGlmIChuX2ZhY3Rvcl9udW1iZXIuY29tcGFyZSgxKSA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWN0b3JfYigpO1xuICB9O1xuXG4gIHRyeV9rdGhfcHJpbWUgPSBmdW5jdGlvbihrKSB7XG4gICAgdmFyIGNvdW50LCBkLCBxLCByO1xuICAgIGNvdW50ID0gMDtcbiAgICBkID0gbWludChwcmltZXRhYltrXSk7XG4gICAgY291bnQgPSAwO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICAvLyBpZiBuX2ZhY3Rvcl9udW1iZXIgaXMgMSB0aGVuIHdlJ3JlIGRvbmVcbiAgICAgIGlmIChuX2ZhY3Rvcl9udW1iZXIuY29tcGFyZSgxKSA9PT0gMCkge1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICBwdXNoX2ZhY3RvcihkLCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgW3EsIHJdID0gbWRpdnJlbShuX2ZhY3Rvcl9udW1iZXIsIGQpO1xuICAgICAgLy8gY29udGludWUgbG9vcGluZyB3aGlsZSByZW1haW5kZXIgaXMgemVyb1xuICAgICAgaWYgKHIuaXNaZXJvKCkpIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgbl9mYWN0b3JfbnVtYmVyID0gcTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIHB1c2hfZmFjdG9yKGQsIGNvdW50KTtcbiAgICB9XG4gICAgLy8gcSA9IG5fZmFjdG9yX251bWJlci9kLCBoZW5jZSBpZiBxIDwgZCB0aGVuXG4gICAgLy8gbl9mYWN0b3JfbnVtYmVyIDwgZF4yIHNvIG5fZmFjdG9yX251bWJlciBpcyBwcmltZVxuICAgIGlmIChtY21wKHEsIGQpID09PSAtMSkge1xuICAgICAgcHVzaF9mYWN0b3Iobl9mYWN0b3JfbnVtYmVyLCAxKTtcbiAgICAgIHJldHVybiBuX2ZhY3Rvcl9udW1iZXIgPSBtaW50KDEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBGcm9tIFRBT0NQIFZvbC4gMiBieSBLbnV0aCwgcC4gMzg1IChBbGdvcml0aG0gQilcbiAgZmFjdG9yX2IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmlnaW50X29uZSwgZywgaywgbCwgdCwgeCwgeHByaW1lO1xuICAgIGsgPSAwO1xuICAgIGwgPSAwO1xuICAgIGJpZ2ludF9vbmUgPSBtaW50KDEpO1xuICAgIHggPSBtaW50KDUpO1xuICAgIHhwcmltZSA9IG1pbnQoMik7XG4gICAgayA9IDE7XG4gICAgbCA9IDE7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGlmIChtcHJpbWUobl9mYWN0b3JfbnVtYmVyKSkge1xuICAgICAgICBwdXNoX2ZhY3RvcihuX2ZhY3Rvcl9udW1iZXIsIDEpO1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGlmIChlc2NfZmxhZykge1xuICAgICAgICAgIHN0b3AoXCJlc2NcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZyA9IGdjZCh4JyAtIHgsIG5fZmFjdG9yX251bWJlcilcbiAgICAgICAgdCA9IG1zdWIoeHByaW1lLCB4KTtcbiAgICAgICAgdCA9IHNldFNpZ25Ubyh0LCAxKTtcbiAgICAgICAgZyA9IG1nY2QodCwgbl9mYWN0b3JfbnVtYmVyKTtcbiAgICAgICAgaWYgKE1FUVVBTChnLCAxKSkge1xuICAgICAgICAgIGlmICgtLWsgPT09IDApIHtcbiAgICAgICAgICAgIHhwcmltZSA9IHg7XG4gICAgICAgICAgICBsICo9IDI7XG4gICAgICAgICAgICBrID0gbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8geCA9ICh4IF4gMiArIDEpIG1vZCBuX2ZhY3Rvcl9udW1iZXJcbiAgICAgICAgICB0ID0gbW11bCh4LCB4KTtcbiAgICAgICAgICB4ID0gbWFkZCh0LCBiaWdpbnRfb25lKTtcbiAgICAgICAgICB0ID0gbW1vZCh4LCBuX2ZhY3Rvcl9udW1iZXIpO1xuICAgICAgICAgIHggPSB0O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hfZmFjdG9yKGcsIDEpO1xuICAgICAgICBpZiAobWNtcChnLCBuX2ZhY3Rvcl9udW1iZXIpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5fZmFjdG9yX251bWJlciA9IG5fZmFjdG9yX251bWJlciAvIGdcbiAgICAgICAgdCA9IG1kaXYobl9mYWN0b3JfbnVtYmVyLCBnKTtcbiAgICAgICAgbl9mYWN0b3JfbnVtYmVyID0gdDtcbiAgICAgICAgLy8geCA9IHggbW9kIG5fZmFjdG9yX251bWJlclxuICAgICAgICB0ID0gbW1vZCh4LCBuX2ZhY3Rvcl9udW1iZXIpO1xuICAgICAgICB4ID0gdDtcbiAgICAgICAgLy8geHByaW1lID0geHByaW1lIG1vZCBuX2ZhY3Rvcl9udW1iZXJcbiAgICAgICAgdCA9IG1tb2QoeHByaW1lLCBuX2ZhY3Rvcl9udW1iZXIpO1xuICAgICAgICB4cHJpbWUgPSB0O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcHVzaF9mYWN0b3IgPSBmdW5jdGlvbihkLCBjb3VudCkge1xuICAgIHAxID0gbmV3IFUoKTtcbiAgICBwMS5rID0gTlVNO1xuICAgIHAxLnEuYSA9IGQ7XG4gICAgcDEucS5iID0gbWludCgxKTtcbiAgICBwdXNoKHAxKTtcbiAgICBpZiAoY291bnQgPiAxKSB7XG4gICAgICBwdXNoX3N5bWJvbChQT1dFUik7XG4gICAgICBzd2FwKCk7XG4gICAgICBwMSA9IG5ldyBVKCk7XG4gICAgICBwMS5rID0gTlVNO1xuICAgICAgcDEucS5hID0gbWludChjb3VudCk7XG4gICAgICBwMS5xLmIgPSBtaW50KDEpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXR1cm4gbGlzdCgzKTtcbiAgICB9XG4gIH07XG5cbiAgREVCVUdfUE9XRVIgPSBmYWxzZTtcblxuICBFdmFsX3Bvd2VyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIHBvd2VyKCk7XG4gIH07XG5cbiAgcG93ZXIgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgeXlwb3dlcigpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgeXlwb3dlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiX2lzRXZlbl9hbmRfY19pc0l0c0ludmVyc2UsIGhvcGVmdWxseVNpbXBsaWZpZWQsIGlucHV0QmFzZSwgaW5wdXRFeHAsIGlzVGhpc09uZSwgaXNfYV9tb3JlVGhhblplcm8sIG47XG4gICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgbiA9IDA7XG4gICAgcDIgPSBwb3AoKTsgLy8gZXhwb25lbnRcbiAgICBwMSA9IHBvcCgpOyAvLyBiYXNlXG4gICAgaW5wdXRFeHAgPSBwMjtcbiAgICBpbnB1dEJhc2UgPSBwMTtcbiAgICAvL2RlYnVnZ2VyXG4gICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlBPV0VSOiBcIiArIHAxICsgXCIgXiBcIiArIHAyKTtcbiAgICB9XG4gICAgLy8gZmlyc3QsIHNvbWUgdmVyeSBiYXNpYyBzaW1wbGlmaWNhdGlvbnMgcmlnaHQgYXdheVxuXG4gICAgLy8gIDEgXiBhICAgIC0+ICAxXG4gICAgLy8gIGEgXiAwICAgIC0+ICAxXG4gICAgaWYgKGVxdWFsKHAxLCBvbmUpIHx8IGlzWmVyb0F0b21PclRlbnNvcihwMikpIHtcbiAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgcHVzaF9kb3VibGUoMS4wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2gob25lKTtcbiAgICAgIH1cbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyIG9mIFwiICsgaW5wdXRCYXNlICsgXCIgXiBcIiArIGlucHV0RXhwICsgXCI6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyAgYSBeIDEgICAgLT4gIGFcbiAgICBpZiAoZXF1YWwocDIsIG9uZSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vICAgLTEgXiAtMSAgICAtPiAgLTFcbiAgICBpZiAoaXNtaW51c29uZShwMSkgJiYgaXNtaW51c29uZShwMikpIHtcbiAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgICAgcHVzaF9kb3VibGUoMS4wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2gob25lKTtcbiAgICAgIH1cbiAgICAgIG5lZ2F0ZSgpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vICAgLTEgXiAxLzIgIC0+ICBpXG4gICAgaWYgKGlzbWludXNvbmUocDEpICYmIChpc29uZW92ZXJ0d28ocDIpKSkge1xuICAgICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyIG9mIFwiICsgaW5wdXRCYXNlICsgXCIgXiBcIiArIGlucHV0RXhwICsgXCI6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyAgIC0xIF4gLTEvMiAgLT4gIC1pXG4gICAgaWYgKGlzbWludXNvbmUocDEpICYmIGlzbWludXNvbmVvdmVydHdvKHAyKSkge1xuICAgICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICAgIG5lZ2F0ZSgpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vICAgLTEgXiByYXRpb25hbFxuICAgIGlmIChpc21pbnVzb25lKHAxKSAmJiAhaXNkb3VibGUocDEpICYmIGlzcmF0aW9uYWwocDIpICYmICFpc2ludGVnZXIocDIpICYmIGlzcG9zaXRpdmVudW1iZXIocDIpICYmICFldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyOiAtMSBeIHJhdGlvbmFsXCIpO1xuICAgICAgfVxuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIHRyaWNrOiBwMi5xLmEgLCBwMi5xLmIgXCIgKyBwMi5xLmEgKyBcIiAsIFwiICsgcDIucS5iKTtcbiAgICAgIH1cbiAgICAgIGlmIChwMi5xLmEgPCBwMi5xLmIpIHtcbiAgICAgICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIGxpc3QoMyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoX3N5bWJvbChNVUxUSVBMWSk7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBwdXNoX3N5bWJvbChQT1dFUik7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKHAyLnEuYS5tb2QocDIucS5iKSwgcDIucS5iKTtcbiAgICAgICAgbGlzdCgzKTtcbiAgICAgICAgbGlzdCgzKTtcbiAgICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgdHJpY2sgYXBwbGllZCA6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBldmFsdWF0ZXMgY2xvY2sgZm9ybSBpbnRvXG4gICAgICAvLyByZWN0YW5ndWxhciBmb3JtLiBUaGlzIHNlZW1zIHRvIGdpdmVcbiAgICAgIC8vIHNsaWdodGx5IGJldHRlciBmb3JtIHRvIHNvbWUgdGVzdCByZXN1bHRzLlxuICAgICAgcmVjdCgpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJvdGggYmFzZSBhbmQgZXhwb25lbnQgYXJlIHJhdGlvbmFsIG51bWJlcnM/XG4gICAgaWYgKGlzcmF0aW9uYWwocDEpICYmIGlzcmF0aW9uYWwocDIpKSB7XG4gICAgICBpZiAoREVCVUdfUE9XRVIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgICBwb3dlcjogaXNyYXRpb25hbChwMSkgJiYgaXNyYXRpb25hbChwMilcIik7XG4gICAgICB9XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcXBvdygpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJvdGggYmFzZSBhbmQgZXhwb25lbnQgYXJlIGVpdGhlciByYXRpb25hbCBvciBkb3VibGU/XG4gICAgaWYgKGlzTnVtZXJpY0F0b20ocDEpICYmIGlzTnVtZXJpY0F0b20ocDIpKSB7XG4gICAgICBpZiAoREVCVUdfUE9XRVIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgICBwb3dlcjogYm90aCBiYXNlIGFuZCBleHBvbmVudCBhcmUgZWl0aGVyIHJhdGlvbmFsIG9yIGRvdWJsZSBcIik7XG4gICAgICB9XG4gICAgICBpZiAoREVCVUdfUE9XRVIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJQT1dFUiAtIGlzTnVtZXJpY0F0b20ocDEpICYmIGlzTnVtZXJpY0F0b20ocDIpXCIpO1xuICAgICAgfVxuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGRwb3coKTtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyIG9mIFwiICsgaW5wdXRCYXNlICsgXCIgXiBcIiArIGlucHV0RXhwICsgXCI6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXN0ZW5zb3IocDEpKSB7XG4gICAgICBpZiAoREVCVUdfUE9XRVIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgICBwb3dlcjogaXN0ZW5zb3IocDEpIFwiKTtcbiAgICAgIH1cbiAgICAgIHBvd2VyX3RlbnNvcigpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGlmIHdlIG9ubHkgYXNzdW1lIHZhcmlhYmxlcyB0byBiZSByZWFsLCB0aGVuIHxhfF4yID0gYV4yXG4gICAgLy8gKGlmIHggaXMgY29tcGxleCB0aGlzIGRvZXNuJ3QgaG9sZCBlLmcuIGksIHdoaWNoIG1ha2VzIDEgYW5kIC0xXG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBQlMpICYmIGlzZXZlbmludGVnZXIocDIpICYmICFpc1plcm9BdG9tT3JUZW5zb3IoZ2V0X2JpbmRpbmcoc3ltYm9sKEFTU1VNRV9SRUFMX1ZBUklBQkxFUykpKSkge1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXI6IGV2ZW4gcG93ZXIgb2YgYWJzb2x1dGUgb2YgcmVhbCB2YWx1ZSBcIik7XG4gICAgICB9XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyIG9mIFwiICsgaW5wdXRCYXNlICsgXCIgXiBcIiArIGlucHV0RXhwICsgXCI6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBlXmxvZyguLi4pXG4gICAgaWYgKHAxID09PSBzeW1ib2woRSkgJiYgY2FyKHAyKSA9PT0gc3ltYm9sKExPRykpIHtcbiAgICAgIHB1c2goY2FkcihwMikpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGVec29tZV9mbG9hdFxuICAgIGlmIChwMSA9PT0gc3ltYm9sKEUpICYmIGlzZG91YmxlKHAyKSkge1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXI6IHAxID09IHN5bWJvbChFKSAmJiBpc2RvdWJsZShwMikgXCIpO1xuICAgICAgfVxuICAgICAgcHVzaF9kb3VibGUoTWF0aC5leHAocDIuZCkpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGNvbXBsZXggbnVtYmVyIGluIGV4cG9uZW50aWFsIGZvcm0sIGdldCBpdCB0byByZWN0YW5ndWxhclxuICAgIC8vIGJ1dCBvbmx5IGlmIHdlIGFyZSBub3QgaW4gdGhlIHByb2Nlc3Mgb2YgY2FsY3VsYXRpbmcgYSBwb2xhciBmb3JtLFxuICAgIC8vIG90aGVyd2lzZSB3ZSdkIGp1c3QgdW5kbyB0aGUgd29yayB3ZSB3YW50IHRvIGRvXG4gICAgaWYgKHAxID09PSBzeW1ib2woRSkgJiYgRmluZChwMiwgaW1hZ2luYXJ5dW5pdCkgIT09IDAgJiYgRmluZChwMiwgc3ltYm9sKFBJKSkgIT09IDAgJiYgIWV2YWx1YXRpbmdQb2xhcikge1xuICAgICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICBpZiAoREVCVUdfUE9XRVIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgICBwb3dlcjogdHVybmluZyBjb21wbGV4IGV4cG9uZW50aWFsIHRvIHJlY3Q6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmVjdCgpO1xuICAgICAgaG9wZWZ1bGx5U2ltcGxpZmllZCA9IHBvcCgpO1xuICAgICAgaWYgKEZpbmQoaG9wZWZ1bGx5U2ltcGxpZmllZCwgc3ltYm9sKFBJKSkgPT09IDApIHtcbiAgICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgICBwb3dlcjogdHVybmVkIGNvbXBsZXggZXhwb25lbnRpYWwgdG8gcmVjdDogXCIgKyBob3BlZnVsbHlTaW1wbGlmaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKGhvcGVmdWxseVNpbXBsaWZpZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vICAoYSAqIGIpIF4gYyAgLT4gIChhIF4gYykgKiAoYiBeIGMpXG4gICAgLy8gbm90ZSB0aGF0IHdlIGNhbid0IGluIGdlbmVyYWwgZG8gdGhpcywgZm9yIGV4YW1wbGVcbiAgICAvLyBzcXJ0KHgqeSkgIT0geF4oMS8yKSB5XigxLzIpIChjb3VudGVyZXhhbXBsZVwiIHggPSAtMSBhbmQgeSA9IC0xKVxuICAgIC8vIEJVVCB3ZSBjYW4gY2FydmUtb3V0IGhlcmUgc29tZSBjYXNlcyB3aGVyZSB0aGlzXG4gICAgLy8gdHJhbnNmb3JtYXRpb24gaXMgY29ycmVjdFxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpICYmIGlzaW50ZWdlcihwMikpIHtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyOiAoYSAqIGIpIF4gYyAgLT4gIChhIF4gYykgKiAoYiBeIGMpIFwiKTtcbiAgICAgIH1cbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBwdXNoKHAyKTtcbiAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgfVxuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIChhIF4gYikgXiBjICAtPiAgYSBeIChiICogYylcbiAgICAvLyBub3RlIHRoYXQgd2UgY2FuJ3QgaW4gZ2VuZXJhbCBkbyB0aGlzLCBmb3IgZXhhbXBsZVxuICAgIC8vIHNxcnQoeF55KSAhPSAgeF4oMS8yIHkpIChjb3VudGVyZXhhbXBsZSB4ID0gLTEpXG4gICAgLy8gQlVUIHdlIGNhbiBjYXJ2ZS1vdXQgaGVyZSBzb21lIGNhc2VzIHdoZXJlIHRoaXNcbiAgICAvLyB0cmFuc2Zvcm1hdGlvbiBpcyBjb3JyZWN0XG5cbiAgICAvLyBzaW1wbGUgbnVtZXJpYyBjaGVjayB0byBzZWUgaWYgYSBpcyBhIG51bWJlciA+IDBcbiAgICBpc19hX21vcmVUaGFuWmVybyA9IGZhbHNlO1xuICAgIGlmIChpc051bWVyaWNBdG9tKGNhZHIocDEpKSkge1xuICAgICAgaXNfYV9tb3JlVGhhblplcm8gPSBzaWduKGNvbXBhcmVfbnVtYmVycyhjYWRyKHAxKSwgemVybykpO1xuICAgIH1cbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFBPV0VSKSAmJiAoaXNpbnRlZ2VyKHAyKSB8fCBpc19hX21vcmVUaGFuWmVybykpIHsgLy8gd2hlbiBhIGlzID49IDBcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyIG9mIFwiICsgaW5wdXRCYXNlICsgXCIgXiBcIiArIGlucHV0RXhwICsgXCI6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBiX2lzRXZlbl9hbmRfY19pc0l0c0ludmVyc2UgPSBmYWxzZTtcbiAgICBpZiAoaXNldmVuaW50ZWdlcihjYWRkcihwMSkpKSB7XG4gICAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBpc1RoaXNPbmUgPSBwb3AoKTtcbiAgICAgIGlmIChpc29uZShpc1RoaXNPbmUpKSB7XG4gICAgICAgIGJfaXNFdmVuX2FuZF9jX2lzSXRzSW52ZXJzZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woUE9XRVIpICYmIGJfaXNFdmVuX2FuZF9jX2lzSXRzSW52ZXJzZSkge1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXI6IGNhcihwMSkgPT0gc3ltYm9sKFBPV0VSKSAmJiBiX2lzRXZlbl9hbmRfY19pc0l0c0ludmVyc2UgXCIpO1xuICAgICAgfVxuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICBhYnMoKTtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyIG9mIFwiICsgaW5wdXRCYXNlICsgXCIgXiBcIiArIGlucHV0RXhwICsgXCI6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyAgd2hlbiBleHBhbmRpbmcsXG4gICAgLy8gIChhICsgYikgXiBuICAtPiAgKGEgKyBiKSAqIChhICsgYikgLi4uXG4gICAgaWYgKGV4cGFuZGluZyAmJiBpc2FkZChwMSkgJiYgaXNOdW1lcmljQXRvbShwMikpIHtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgICBpZiAobiA+IDEgJiYgIWlzTmFOKG4pKSB7XG4gICAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXI6IGV4cGFuZGluZyAmJiBpc2FkZChwMSkgJiYgaXNOdW1lcmljQXRvbShwMikgXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBvd2VyX3N1bShuKTtcbiAgICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgICBwb3dlciBvZiBcIiArIGlucHV0QmFzZSArIFwiIF4gXCIgKyBpbnB1dEV4cCArIFwiOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vICBzaW4oeCkgXiAybiAtPiAoMSAtIGNvcyh4KSBeIDIpIF4gblxuICAgIGlmICh0cmlnbW9kZSA9PT0gMSAmJiBjYXIocDEpID09PSBzeW1ib2woU0lOKSAmJiBpc2V2ZW5pbnRlZ2VyKHAyKSkge1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXI6IHRyaWdtb2RlID09IDEgJiYgY2FyKHAxKSA9PSBzeW1ib2woU0lOKSAmJiBpc2V2ZW5pbnRlZ2VyKHAyKSBcIik7XG4gICAgICB9XG4gICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIGNvc2luZSgpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIHN1YnRyYWN0KCk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyIG9mIFwiICsgaW5wdXRCYXNlICsgXCIgXiBcIiArIGlucHV0RXhwICsgXCI6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyAgY29zKHgpIF4gMm4gLT4gKDEgLSBzaW4oeCkgXiAyKSBeIG5cbiAgICBpZiAodHJpZ21vZGUgPT09IDIgJiYgY2FyKHAxKSA9PT0gc3ltYm9sKENPUykgJiYgaXNldmVuaW50ZWdlcihwMikpIHtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyOiB0cmlnbW9kZSA9PSAyICYmIGNhcihwMSkgPT0gc3ltYm9sKENPUykgJiYgaXNldmVuaW50ZWdlcihwMikgXCIpO1xuICAgICAgfVxuICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICBzaW5lKCk7XG4gICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICBwb3dlcigpO1xuICAgICAgc3VidHJhY3QoKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBwb3dlcigpO1xuICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGNvbXBsZXggbnVtYmVyPyAoanVzdCBudW1iZXIsIG5vdCBleHByZXNzaW9uKVxuICAgIGlmIChpc2NvbXBsZXhudW1iZXIocDEpKSB7XG4gICAgICBpZiAoREVCVUdfUE9XRVIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgcG93ZXIgLSBoYW5kbGluZyB0aGUgY2FzZSAoYSArIGliKSBeIG5cIik7XG4gICAgICB9XG4gICAgICAvLyBpbnRlZ2VyIHBvd2VyP1xuXG4gICAgICAvLyBuIHdpbGwgYmUgbmVnYXRpdmUgaGVyZSwgcG9zaXRpdmUgbiBhbHJlYWR5IGhhbmRsZWRcbiAgICAgIGlmIChpc2ludGVnZXIocDIpKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgLyAgICAgICAgXFwgIG5cbiAgICAgICAgLy8gICAgICAgICAtbiAgIHwgIGEgLSBpYiAgfFxuICAgICAgICAvLyAoYSArIGliKSAgID0gfCAtLS0tLS0tLSB8XG4gICAgICAgIC8vICAgICAgICAgICAgICB8ICAgMiAgIDIgIHxcbiAgICAgICAgLy8gICAgICAgICAgICAgICBcXCBhICsgYiAgL1xuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgY29uanVnYXRlKCk7XG4gICAgICAgIHAzID0gcG9wKCk7XG4gICAgICAgIHB1c2gocDMpO1xuICAgICAgICAvLyBnZXRzIHRoZSBkZW5vbWluYXRvclxuICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBpZiAoIWlzb25lKHAyKSkge1xuICAgICAgICAgIHB1c2gocDIpO1xuICAgICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgICBwb3dlciBvZiBcIiArIGlucHV0QmFzZSArIFwiIF4gXCIgKyBpbnB1dEV4cCArIFwiOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBub25pbnRlZ2VyIG9yIGZsb2F0aW5nIHBvd2VyP1xuICAgICAgaWYgKGlzTnVtZXJpY0F0b20ocDIpKSB7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBhYnMoKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBhcmcoKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMgfHwgKGlzY29tcGxleG51bWJlcmRvdWJsZShwMSkgJiYgaXNkb3VibGUocDIpKSkge1xuICAgICAgICAgIC8vIHJlbWVtYmVyIHRoYXQgdGhlIFwiZG91YmxlXCIgdHlwZSBpc1xuICAgICAgICAgIC8vIHRveGljLCBpLmUuIGl0IHByb3BhZ2F0ZXMsIHNvIHdlIGRvXG4gICAgICAgICAgLy8gbmVlZCB0byBldmFsdWF0ZSBQSSB0byBpdHMgYWN0dWFsIGRvdWJsZVxuICAgICAgICAgIC8vIHZhbHVlXG4gICAgICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcInBvd2VyIHB1c2hpbmcgUEkgd2hlbiBwMSBpczogXCIgKyBwMSArIFwiIGFuZCBwMiBpczpcIiArIHAyKVxuICAgICAgICAgIHB1c2goc3ltYm9sKFBJKSk7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIC8vIGlmIHdlIGNhbGN1bGF0ZSB0aGUgcG93ZXIgbWFraW5nIHVzZSBvZiBhcmN0YW46XG4gICAgICAgIC8vICAqIGl0IHByZXZlbnRzIG5lc3RlZCByYWRpY2FscyBmcm9tIGJlaW5nIHNpbXBsaWZpZWRcbiAgICAgICAgLy8gICogcmVzdWx0cyBiZWNvbWUgcmVhbGx5IGhhcmQgdG8gbWFuaXB1bGF0ZSBhZnRlcndhcmRzXG4gICAgICAgIC8vICAqIHdlIGNhbid0IGdvIGJhY2sgdG8gb3RoZXIgZm9ybXMuXG4gICAgICAgIC8vIHNvIGxlYXZlIHRoZSBwb3dlciBhcyBpdCBpcy5cbiAgICAgICAgaWYgKGF2b2lkQ2FsY3VsYXRpbmdQb3dlcnNJbnRvQXJjdGFucykge1xuICAgICAgICAgIGlmIChGaW5kKHN0YWNrW3RvcyAtIDFdLCBzeW1ib2woQVJDVEFOKSkpIHtcbiAgICAgICAgICAgIHBvcCgpO1xuICAgICAgICAgICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgICAgICAgICAgcHVzaChwMSk7XG4gICAgICAgICAgICBwdXNoKHAyKTtcbiAgICAgICAgICAgIGxpc3QoMyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiICAgcG93ZXIgb2YgXCIgKyBpbnB1dEJhc2UgKyBcIiBeIFwiICsgaW5wdXRFeHAgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvL3B1c2gocDEpXG4gICAgLy9hYnMoKVxuICAgIC8vcHVzaChwMilcbiAgICAvL3Bvd2VyKClcbiAgICAvL3B1c2goc3ltYm9sKEUpKVxuICAgIC8vcHVzaChwMSlcbiAgICAvL2FyZygpXG4gICAgLy9wdXNoKHAyKVxuICAgIC8vbXVsdGlwbHkoKVxuICAgIC8vcHVzaChpbWFnaW5hcnl1bml0KVxuICAgIC8vbXVsdGlwbHkoKVxuICAgIC8vcG93ZXIoKVxuICAgIC8vbXVsdGlwbHkoKVxuXG4gICAgaWYgKHNpbXBsaWZ5X3BvbGFyKCkpIHtcbiAgICAgIGlmIChERUJVR19QT1dFUikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyOiB1c2luZyBzaW1wbGlmeV9wb2xhclwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIiAgIHBvd2VyOiBub3RoaW5nIGNhbiBiZSBkb25lIFwiKTtcbiAgICB9XG4gICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIGxpc3QoMyk7XG4gICAgaWYgKERFQlVHX1BPV0VSKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coXCIgICBwb3dlciBvZiBcIiArIGlucHV0QmFzZSArIFwiIF4gXCIgKyBpbnB1dEV4cCArIFwiOiBcIiArIHN0YWNrW3RvcyAtIDFdKTtcbiAgICB9XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBDb21wdXRlIHRoZSBwb3dlciBvZiBhIHN1bVxuXG4gIC8vICBJbnB1dDogICAgcDEgIHN1bVxuXG4gIC8vICAgICAgbiAgZXhwb25lbnRcblxuICAvLyAgT3V0cHV0OiAgICBSZXN1bHQgb24gc3RhY2tcblxuICAvLyAgTm90ZTpcblxuICAvLyAgVXNlcyB0aGUgbXVsdGlub21pYWwgc2VyaWVzIChzZWUgTWF0aCBXb3JsZClcblxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgbiAgICAgICAgICAgICAgbiEgICAgICAgICAgbjEgICBuMiAgICAgICBua1xuICAvLyAgKGExICsgYTIgKyAuLi4gKyBhaykgID0gc3VtICgtLS0tLS0tLS0tLS0tLS0gYTEgICBhMiAgIC4uLiBhayAgKVxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuMSEgbjIhIC4uLiBuayFcblxuICAvLyAgVGhlIHN1bSBpcyBvdmVyIGFsbCBuMSAuLi4gbmsgc3VjaCB0aGF0IG4xICsgbjIgKyAuLi4gKyBuayA9IG4uXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIGZpcnN0IGluZGV4IGlzIHRoZSB0ZXJtIG51bWJlciAwLi5rLTEsIHNlY29uZCBpbmRleCBpcyB0aGUgZXhwb25lbnQgMC4ublxuXG4gIC8vZGVmaW5lIEEoaSwgaikgZnJhbWVbKGkpICogKG4gKyAxKSArIChqKV1cbiAgcG93ZXJfc3VtID0gZnVuY3Rpb24obikge1xuICAgIHZhciBhLCBpLCBpMSwgaiwgajEsIGssIGwxLCByZWYxLCByZWYyLCByZWYzO1xuICAgIGEgPSBbXTtcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBrID0gMDtcbiAgICAvLyBudW1iZXIgb2YgdGVybXMgaW4gdGhlIHN1bVxuICAgIGsgPSBsZW5ndGgocDEpIC0gMTtcbiAgICAvLyBsb2NhbCBmcmFtZVxuICAgIHB1c2hfZnJhbWUoayAqIChuICsgMSkpO1xuICAgIC8vIGFycmF5IG9mIHBvd2Vyc1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICBmb3IgKGkgPSBpMSA9IDAsIHJlZjEgPSBrOyAoMCA8PSByZWYxID8gaTEgPCByZWYxIDogaTEgPiByZWYxKTsgaSA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICBmb3IgKGogPSBqMSA9IDAsIHJlZjIgPSBuOyAoMCA8PSByZWYyID8gajEgPD0gcmVmMiA6IGoxID49IHJlZjIpOyBqID0gMCA8PSByZWYyID8gKytqMSA6IC0tajEpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKGopO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICBzdGFja1tmcmFtZSArIGkgKiAobiArIDEpICsgal0gPSBwb3AoKTtcbiAgICAgIH1cbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgcHVzaF9pbnRlZ2VyKG4pO1xuICAgIGZhY3RvcmlhbCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYzID0gazsgKDAgPD0gcmVmMyA/IGwxIDwgcmVmMyA6IGwxID4gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK2wxIDogLS1sMSkge1xuICAgICAgYVtpXSA9IDA7XG4gICAgfVxuICAgIHB1c2goemVybyk7XG4gICAgbXVsdGlub21pYWxfc3VtKGssIG4sIGEsIDAsIG4pO1xuICAgIHJldHVybiBwb3BfZnJhbWUoayAqIChuICsgMSkpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgQ29tcHV0ZSBtdWx0aW5vbWlhbCBzdW1cblxuICAvLyAgSW5wdXQ6ICAgIGsgIG51bWJlciBvZiBmYWN0b3JzXG5cbiAgLy8gICAgICBuICBvdmVyYWxsIGV4cG9uZW50XG5cbiAgLy8gICAgICBhICBwYXJ0aXRpb24gYXJyYXlcblxuICAvLyAgICAgIGkgIHBhcnRpdGlvbiBhcnJheSBpbmRleFxuXG4gIC8vICAgICAgbSAgcGFydGl0aW9uIHJlbWFpbmRlclxuXG4gIC8vICAgICAgcDEgIG4hXG5cbiAgLy8gICAgICBBICBmYWN0b3IgYXJyYXlcblxuICAvLyAgT3V0cHV0OiAgICBSZXN1bHQgb24gc3RhY2tcblxuICAvLyAgTm90ZTpcblxuICAvLyAgVXNlcyByZWN1cnNpdmUgZGVzY2VudCB0byBmaWxsIHRoZSBwYXJ0aXRpb24gYXJyYXkuXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vaW50IGssIGludCBuLCBpbnQgKmEsIGludCBpLCBpbnQgbVxuICBtdWx0aW5vbWlhbF9zdW0gPSBmdW5jdGlvbihrLCBuLCBhLCBpLCBtKSB7XG4gICAgdmFyIGkxLCBqLCBqMSwgbDEsIHJlZjEsIHJlZjIsIHJlZjM7XG4gICAgaiA9IDA7XG4gICAgaWYgKGkgPCBrIC0gMSkge1xuICAgICAgZm9yIChqID0gaTEgPSAwLCByZWYxID0gbTsgKDAgPD0gcmVmMSA/IGkxIDw9IHJlZjEgOiBpMSA+PSByZWYxKTsgaiA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICAgIGFbaV0gPSBqO1xuICAgICAgICBtdWx0aW5vbWlhbF9zdW0oaywgbiwgYSwgaSArIDEsIG0gLSBqKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYVtpXSA9IG07XG4gICAgLy8gY29lZmZpY2llbnRcbiAgICBwdXNoKHAxKTtcbiAgICBmb3IgKGogPSBqMSA9IDAsIHJlZjIgPSBrOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaiA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBwdXNoX2ludGVnZXIoYVtqXSk7XG4gICAgICBmYWN0b3JpYWwoKTtcbiAgICAgIGRpdmlkZSgpO1xuICAgIH1cbi8vIGZhY3RvcnNcbiAgICBmb3IgKGogPSBsMSA9IDAsIHJlZjMgPSBrOyAoMCA8PSByZWYzID8gbDEgPCByZWYzIDogbDEgPiByZWYzKTsgaiA9IDAgPD0gcmVmMyA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwdXNoKHN0YWNrW2ZyYW1lICsgaiAqIChuICsgMSkgKyBhW2pdXSk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgIH1cbiAgICByZXR1cm4gYWRkKCk7XG4gIH07XG5cbiAgLy8gZXhwKG4vMiBpIHBpKSA/XG5cbiAgLy8gcDIgaXMgdGhlIGV4cG9uZW50IGV4cHJlc3Npb25cblxuICAvLyBjbG9iYmVycyBwM1xuICBzaW1wbGlmeV9wb2xhciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb05vdGhpbmcsIG47XG4gICAgbiA9IDA7XG4gICAgbiA9IGlzcXVhcnRlcnR1cm4ocDIpO1xuICAgIHN3aXRjaCAobikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBkb05vdGhpbmcgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBwdXNoKGltYWdpbmFyeXVuaXQpO1xuICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChjYXIocDIpID09PSBzeW1ib2woQUREKSkge1xuICAgICAgcDMgPSBjZHIocDIpO1xuICAgICAgd2hpbGUgKGlzY29ucyhwMykpIHtcbiAgICAgICAgbiA9IGlzcXVhcnRlcnR1cm4oY2FyKHAzKSk7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcDMgPSBjZHIocDMpO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChuKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBwdXNoKGltYWdpbmFyeXVuaXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICAgICAgICBuZWdhdGUoKTtcbiAgICAgIH1cbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaChjYXIocDMpKTtcbiAgICAgIHN1YnRyYWN0KCk7XG4gICAgICBleHBvbmVudGlhbCgpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIExvb2sgdXAgdGhlIG50aCBwcmltZVxuXG4gIC8vICBJbnB1dDogICAgbiBvbiBzdGFjayAoMCA8IG4gPCAxMDAwMSlcblxuICAvLyAgT3V0cHV0OiAgICBudGggcHJpbWUgb24gc3RhY2tcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEV2YWxfcHJpbWUgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIHByaW1lKCk7XG4gIH07XG5cbiAgcHJpbWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbjtcbiAgICBuID0gMDtcbiAgICBuID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAobiA8IDEgfHwgbiA+IE1BWFBSSU1FVEFCKSB7XG4gICAgICBzdG9wKFwicHJpbWU6IEFyZ3VtZW50IG91dCBvZiByYW5nZS5cIik7XG4gICAgfVxuICAgIG4gPSBwcmltZXRhYltuIC0gMV07XG4gICAgcmV0dXJuIHB1c2hfaW50ZWdlcihuKTtcbiAgfTtcblxuICBwb3dlcl9zdHIgPSBcIl5cIjtcblxuICBjb2RlR2VuID0gZmFsc2U7XG5cbiAgLy8gdGhpcyBpcyBvbmx5IGludm9rZWQgd2hlbiB1c2VyIGludm9rZXNcbiAgLy8gXCJwcmludFwiIGV4cGxpY2l0bHlcbiAgRXZhbF9wcmludCA9IGZ1bmN0aW9uKCkge1xuICAgIHN0cmluZ3NFbWl0dGVkQnlVc2VyUHJpbnRvdXRzICs9IF9wcmludChjZHIocDEpLCBwcmludE1vZGUpO1xuICAgIHJldHVybiBwdXNoKHN5bWJvbChOSUwpKTtcbiAgfTtcblxuICAvLyB0aGlzIGlzIG9ubHkgaW52b2tlZCB3aGVuIHVzZXIgaW52b2tlc1xuICAvLyBcInByaW50MmRhc2NpaVwiIGV4cGxpY2l0bHlcbiAgRXZhbF9wcmludDJkYXNjaWkgPSBmdW5jdGlvbigpIHtcbiAgICBzdHJpbmdzRW1pdHRlZEJ5VXNlclByaW50b3V0cyArPSBfcHJpbnQoY2RyKHAxKSwgUFJJTlRNT0RFXzJEQVNDSUkpO1xuICAgIHJldHVybiBwdXNoKHN5bWJvbChOSUwpKTtcbiAgfTtcblxuICAvLyB0aGlzIGlzIG9ubHkgaW52b2tlZCB3aGVuIHVzZXIgaW52b2tlc1xuICAvLyBcInByaW50Y29tcHV0ZXJcIiBleHBsaWNpdGx5XG4gIEV2YWxfcHJpbnRjb21wdXRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHN0cmluZ3NFbWl0dGVkQnlVc2VyUHJpbnRvdXRzICs9IF9wcmludChjZHIocDEpLCBQUklOVE1PREVfQ09NUFVURVIpO1xuICAgIHJldHVybiBwdXNoKHN5bWJvbChOSUwpKTtcbiAgfTtcblxuICAvLyB0aGlzIGlzIG9ubHkgaW52b2tlZCB3aGVuIHVzZXIgaW52b2tlc1xuICAvLyBcInByaW50bGF0ZXhcIiBleHBsaWNpdGx5XG4gIEV2YWxfcHJpbnRsYXRleCA9IGZ1bmN0aW9uKCkge1xuICAgIHN0cmluZ3NFbWl0dGVkQnlVc2VyUHJpbnRvdXRzICs9IF9wcmludChjZHIocDEpLCBQUklOVE1PREVfTEFURVgpO1xuICAgIHJldHVybiBwdXNoKHN5bWJvbChOSUwpKTtcbiAgfTtcblxuICAvLyB0aGlzIGlzIG9ubHkgaW52b2tlZCB3aGVuIHVzZXIgaW52b2tlc1xuICAvLyBcInByaW50aHVtYW5cIiBleHBsaWNpdGx5XG4gIEV2YWxfcHJpbnRodW1hbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvcmlnaW5hbF90ZXN0X2ZsYWc7XG4gICAgLy8gdGVzdCBmbGFnIG5lZWRzIHRvIGJlIHN1c3BlbmRlZFxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIFwicHJpbnRjb21wdXRlclwiIG1vZGVcbiAgICAvLyB3aWxsIGhhcHBlbi5cbiAgICBvcmlnaW5hbF90ZXN0X2ZsYWcgPSB0ZXN0X2ZsYWc7XG4gICAgdGVzdF9mbGFnID0gMDtcbiAgICBzdHJpbmdzRW1pdHRlZEJ5VXNlclByaW50b3V0cyArPSBfcHJpbnQoY2RyKHAxKSwgUFJJTlRNT0RFX0hVTUFOKTtcbiAgICB0ZXN0X2ZsYWcgPSBvcmlnaW5hbF90ZXN0X2ZsYWc7XG4gICAgcmV0dXJuIHB1c2goc3ltYm9sKE5JTCkpO1xuICB9O1xuXG4gIC8vIHRoaXMgaXMgb25seSBpbnZva2VkIHdoZW4gdXNlciBpbnZva2VzXG4gIC8vIFwicHJpbnRsaXN0XCIgZXhwbGljaXRseVxuICBFdmFsX3ByaW50bGlzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiZWVuUHJpbnRlZDtcbiAgICBiZWVuUHJpbnRlZCA9IF9wcmludChjZHIocDEpLCBQUklOVE1PREVfTElTVCk7XG4gICAgc3RyaW5nc0VtaXR0ZWRCeVVzZXJQcmludG91dHMgKz0gYmVlblByaW50ZWQ7XG4gICAgcmV0dXJuIHB1c2goc3ltYm9sKE5JTCkpO1xuICB9O1xuXG4gIF9wcmludCA9IGZ1bmN0aW9uKHAsIHBhc3NlZFByaW50TW9kZSkge1xuICAgIHZhciBhY2N1bXVsYXRvciwgb3JpZ1ByaW50TW9kZTtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgcHVzaChjYXIocCkpO1xuICAgICAgRXZhbCgpO1xuICAgICAgcDIgPSBwb3AoKTtcbiAgICAgIG9yaWdQcmludE1vZGUgPSBwcmludE1vZGU7XG4gICAgICBpZiAocGFzc2VkUHJpbnRNb2RlID09PSBQUklOVE1PREVfQ09NUFVURVIpIHtcbiAgICAgICAgcHJpbnRNb2RlID0gUFJJTlRNT0RFX0NPTVBVVEVSO1xuICAgICAgICBhY2N1bXVsYXRvciA9IHByaW50bGluZShwMik7XG4gICAgICAgIHJlbWVtYmVyUHJpbnQoYWNjdW11bGF0b3IsIExBU1RfRlVMTF9QUklOVCk7XG4gICAgICB9IGVsc2UgaWYgKHBhc3NlZFByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0hVTUFOKSB7XG4gICAgICAgIHByaW50TW9kZSA9IFBSSU5UTU9ERV9IVU1BTjtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBwcmludGxpbmUocDIpO1xuICAgICAgICByZW1lbWJlclByaW50KGFjY3VtdWxhdG9yLCBMQVNUX1BMQUlOX1BSSU5UKTtcbiAgICAgIH0gZWxzZSBpZiAocGFzc2VkUHJpbnRNb2RlID09PSBQUklOVE1PREVfMkRBU0NJSSkge1xuICAgICAgICBwcmludE1vZGUgPSBQUklOVE1PREVfMkRBU0NJSTtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBwcmludDJkYXNjaWkocDIpO1xuICAgICAgICByZW1lbWJlclByaW50KGFjY3VtdWxhdG9yLCBMQVNUXzJEQVNDSUlfUFJJTlQpO1xuICAgICAgfSBlbHNlIGlmIChwYXNzZWRQcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICBwcmludE1vZGUgPSBQUklOVE1PREVfTEFURVg7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gcHJpbnRsaW5lKHAyKTtcbiAgICAgICAgcmVtZW1iZXJQcmludChhY2N1bXVsYXRvciwgTEFTVF9MQVRFWF9QUklOVCk7XG4gICAgICB9IGVsc2UgaWYgKHBhc3NlZFByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xJU1QpIHtcbiAgICAgICAgcHJpbnRNb2RlID0gUFJJTlRNT0RFX0xJU1Q7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gcHJpbnRfbGlzdChwMik7XG4gICAgICAgIHJlbWVtYmVyUHJpbnQoYWNjdW11bGF0b3IsIExBU1RfTElTVF9QUklOVCk7XG4gICAgICB9XG4gICAgICBwcmludE1vZGUgPSBvcmlnUHJpbnRNb2RlO1xuICAgICAgcCA9IGNkcihwKTtcbiAgICB9XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImVtdHRlZFN0cmluZyBmcm9tIGRpc3BsYXk6IFwiICsgc3RyaW5nc0VtaXR0ZWRCeVVzZXJQcmludG91dHMpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcmVtZW1iZXJQcmludCA9IGZ1bmN0aW9uKHRoZVN0cmluZywgdGhlVHlwZU9mUHJpbnQpIHtcbiAgICB2YXIgcGFyc2VkU3RyaW5nO1xuICAgIHNjYW4oJ1wiJyArIHRoZVN0cmluZyArICdcIicpO1xuICAgIHBhcnNlZFN0cmluZyA9IHBvcCgpO1xuICAgIHJldHVybiBzZXRfYmluZGluZyhzeW1ib2wodGhlVHlwZU9mUHJpbnQpLCBwYXJzZWRTdHJpbmcpO1xuICB9O1xuXG4gIHByaW50X3N0ciA9IGZ1bmN0aW9uKHMpIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZW10dGVkU3RyaW5nIGZyb20gcHJpbnRfc3RyOiBcIiArIHN0cmluZ3NFbWl0dGVkQnlVc2VyUHJpbnRvdXRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG4gIH07XG5cbiAgcHJpbnRfY2hhciA9IGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfTtcblxuICBjb2xsZWN0TGF0ZXhTdHJpbmdGcm9tUmV0dXJuVmFsdWUgPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIG9yaWdQcmludE1vZGUsIG9yaWdpbmFsQ29kZUdlbiwgcmV0dXJuZWRTdHJpbmc7XG4gICAgb3JpZ1ByaW50TW9kZSA9IHByaW50TW9kZTtcbiAgICBwcmludE1vZGUgPSBQUklOVE1PREVfTEFURVg7XG4gICAgb3JpZ2luYWxDb2RlR2VuID0gY29kZUdlbjtcbiAgICBjb2RlR2VuID0gZmFsc2U7XG4gICAgcmV0dXJuZWRTdHJpbmcgPSBwcmludF9leHByKHApO1xuICAgIC8vIHNvbWUgdmFyaWFibGVzIG1pZ2h0IGNvbnRhaW4gdW5kZXJzY29yZXMsIGVzY2FwZSB0aG9zZVxuICAgIHJldHVybmVkU3RyaW5nID0gcmV0dXJuZWRTdHJpbmcucmVwbGFjZSgvXy9nLCBcIlxcXFxfXCIpO1xuICAgIHByaW50TW9kZSA9IG9yaWdQcmludE1vZGU7XG4gICAgY29kZUdlbiA9IG9yaWdpbmFsQ29kZUdlbjtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZW10dGVkU3RyaW5nIGZyb20gY29sbGVjdExhdGV4U3RyaW5nRnJvbVJldHVyblZhbHVlOiBcIiArIHN0cmluZ3NFbWl0dGVkQnlVc2VyUHJpbnRvdXRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVybmVkU3RyaW5nO1xuICB9O1xuXG4gIHByaW50bGluZSA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIocCk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X2Jhc2Vfb2ZfZGVub20gPSBmdW5jdGlvbihwMSkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgaWYgKGlzZnJhY3Rpb24ocDEpIHx8IGNhcihwMSkgPT09IHN5bWJvbChBREQpIHx8IGNhcihwMSkgPT09IHN5bWJvbChNVUxUSVBMWSkgfHwgY2FyKHAxKSA9PT0gc3ltYm9sKFBPV0VSKSB8fCBsZXNzcChwMSwgemVybykpIHsgLy8gcDEgaXMgQkFTRVxuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfY2hhcignKCcpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihwMSk7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9jaGFyKCcpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIocDEpOyAvLyBwMSBpcyBCQVNFXG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9leHBvX29mX2Rlbm9tID0gZnVuY3Rpb24ocDIpIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGlmIChpc2ZyYWN0aW9uKHAyKSB8fCBjYXIocDIpID09PSBzeW1ib2woQUREKSB8fCBjYXIocDIpID09PSBzeW1ib2woTVVMVElQTFkpIHx8IGNhcihwMikgPT09IHN5bWJvbChQT1dFUikpIHsgLy8gcDIgaXMgRVhQT1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfY2hhcignKCcpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihwMik7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9jaGFyKCcpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIocDIpOyAvLyBwMiBpcyBFWFBPXG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICAvLyBwcmludHMgc3R1ZmYgYWZ0ZXIgdGhlIGRpdmlkZSBzeW1ib2wgXCIvXCJcblxuICAvLyBkIGlzIHRoZSBudW1iZXIgb2YgZGVub21pbmF0b3JzXG5cbiAgLy9kZWZpbmUgQkFTRSBwMVxuICAvL2RlZmluZSBFWFBPIHAyXG4gIHByaW50X2Rlbm9tID0gZnVuY3Rpb24ocCwgZCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gY2FkcihwKTtcbiAgICBwMiA9IGNhZGRyKHApO1xuICAgIGlmIChpc21pbnVzb25lKHAyKSkgeyAvLyBwMiBpcyBFWFBPXG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9iYXNlX29mX2Rlbm9tKHAxKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG4gICAgaWYgKGQgPT09IDEpIHsgLy8gcDIgaXMgRVhQT1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfY2hhcignKCcpO1xuICAgIH1cbiAgICAvLyBwcmVwYXJlIHRoZSBleHBvbmVudFxuICAgIC8vIChuZWVkcyB0byBiZSBuZWdhdGVkKVxuICAgIC8vIGJlZm9yZSBwcmludGluZyBpdCBvdXRcbiAgICBwdXNoKHAyKTtcbiAgICBuZWdhdGUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3Bvd2VyKHAxLCBwMik7XG4gICAgaWYgKGQgPT09IDEpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2NoYXIoJyknKTtcbiAgICB9XG4gICAgcmVzdG9yZSgpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICAvL2RlZmluZSBBIHAzXG4gIC8vZGVmaW5lIEIgcDRcbiAgcHJpbnRfYV9vdmVyX2IgPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yLCBkLCBkb05vdGhpbmcsIG47XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGZsYWcgPSAwO1xuICAgIG4gPSAwO1xuICAgIGQgPSAwO1xuICAgIHNhdmUoKTtcbiAgICAvLyBjb3VudCBudW1lcmF0b3JzIGFuZCBkZW5vbWluYXRvcnNcbiAgICBuID0gMDtcbiAgICBkID0gMDtcbiAgICBwMSA9IGNkcihwKTtcbiAgICBwMiA9IGNhcihwMSk7XG4gICAgaWYgKGlzcmF0aW9uYWwocDIpKSB7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIG1wX251bWVyYXRvcigpO1xuICAgICAgYWJzdmFsKCk7XG4gICAgICBwMyA9IHBvcCgpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBtcF9kZW5vbWluYXRvcigpO1xuICAgICAgcDQgPSBwb3AoKTtcbiAgICAgIGlmICghaXNwbHVzb25lKHAzKSkgeyAvLyBwMyBpcyBBXG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIGlmICghaXNwbHVzb25lKHA0KSkgeyAvLyBwNCBpcyBCXG4gICAgICAgIGQrKztcbiAgICAgIH1cbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcDMgPSBvbmU7XG4gICAgICBwNCA9IG9uZTsgLy8gcDQgaXMgQlxuICAgIH1cbiAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgcDIgPSBjYXIocDEpO1xuICAgICAgaWYgKGlzX2Rlbm9taW5hdG9yKHAyKSkge1xuICAgICAgICBkKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgfVxuICAgIC8vZGVidWdnZXJcbiAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignXFxcXGZyYWN7Jyk7XG4gICAgfVxuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9jaGFyKCcxJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZsYWcgPSAwO1xuICAgICAgcDEgPSBjZHIocCk7XG4gICAgICBpZiAoaXNyYXRpb25hbChjYXIocDEpKSkge1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzcGx1c29uZShwMykpIHsgLy8gcDMgaXMgQVxuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9mYWN0b3IocDMpO1xuICAgICAgICBmbGFnID0gMTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIHAyID0gY2FyKHAxKTtcbiAgICAgICAgaWYgKGlzX2Rlbm9taW5hdG9yKHAyKSkge1xuICAgICAgICAgIGRvTm90aGluZyA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X211bHRpcGx5X3NpZ24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZmFjdG9yKHAyKTtcbiAgICAgICAgICBmbGFnID0gMTtcbiAgICAgICAgfVxuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCd9eycpO1xuICAgIH0gZWxzZSBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfSFVNQU4gJiYgIXRlc3RfZmxhZykge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiIC8gXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIvXCIpO1xuICAgIH1cbiAgICBpZiAoZCA+IDEgJiYgcHJpbnRNb2RlICE9PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2NoYXIoJygnKTtcbiAgICB9XG4gICAgZmxhZyA9IDA7XG4gICAgcDEgPSBjZHIocCk7XG4gICAgaWYgKGlzcmF0aW9uYWwoY2FyKHAxKSkpIHtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgaWYgKCFpc3BsdXNvbmUocDQpKSB7IC8vIHA0IGlzIEJcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2ZhY3RvcihwNCk7XG4gICAgICBmbGFnID0gMTtcbiAgICB9XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHAyID0gY2FyKHAxKTtcbiAgICAgIGlmIChpc19kZW5vbWluYXRvcihwMikpIHtcbiAgICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9tdWx0aXBseV9zaWduKCk7XG4gICAgICAgIH1cbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZGVub20ocDIsIGQpO1xuICAgICAgICBmbGFnID0gMTtcbiAgICAgIH1cbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgaWYgKGQgPiAxICYmIHByaW50TW9kZSAhPT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9jaGFyKCcpJyk7XG4gICAgfVxuICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCd9Jyk7XG4gICAgfVxuICAgIHJlc3RvcmUoKTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfZXhwciA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGlmIChpc2FkZChwKSkge1xuICAgICAgcCA9IGNkcihwKTtcbiAgICAgIGlmIChzaWduX29mX3Rlcm0oY2FyKHApKSA9PT0gJy0nKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIi1cIik7XG4gICAgICB9XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF90ZXJtKGNhcihwKSk7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBpZiAoc2lnbl9vZl90ZXJtKGNhcihwKSkgPT09ICcrJykge1xuICAgICAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9IVU1BTiAmJiAhdGVzdF9mbGFnKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIgKyBcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIitcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9IVU1BTiAmJiAhdGVzdF9mbGFnKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIgLSBcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIi1cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3Rlcm0oY2FyKHApKTtcbiAgICAgICAgcCA9IGNkcihwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNpZ25fb2ZfdGVybShwKSA9PT0gJy0nKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIi1cIik7XG4gICAgICB9XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF90ZXJtKHApO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgc2lnbl9vZl90ZXJtID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgaWYgKGNhcihwKSA9PT0gc3ltYm9sKE1VTFRJUExZKSAmJiBpc051bWVyaWNBdG9tKGNhZHIocCkpICYmIGxlc3NwKGNhZHIocCksIHplcm8pKSB7XG4gICAgICBhY2N1bXVsYXRvciArPSAnLSc7XG4gICAgfSBlbHNlIGlmIChpc051bWVyaWNBdG9tKHApICYmIGxlc3NwKHAsIHplcm8pKSB7XG4gICAgICBhY2N1bXVsYXRvciArPSAnLSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9ICcrJztcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X3Rlcm0gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yLCBkZW5vbSwgbnVtYmVyT25lT3ZlclNvbWV0aGluZywgb3JpZ0FjY3VtdWxhdG9yLCBwcmV2aW91c0ZhY3Rvcldhc0FOdW1iZXI7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgYW55X2Rlbm9taW5hdG9ycyhwKSkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfYV9vdmVyX2IocCk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChNVUxUSVBMWSkpIHtcbiAgICAgIHAgPSBjZHIocCk7XG4gICAgICAvLyBjb2VmZiAtMT9cbiAgICAgIGlmIChpc21pbnVzb25lKGNhcihwKSkpIHtcbiAgICAgICAgLy8gICAgICBwcmludF9jaGFyKCctJylcbiAgICAgICAgcCA9IGNkcihwKTtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzRmFjdG9yV2FzQU51bWJlciA9IGZhbHNlO1xuICAgICAgLy8gcHJpbnQgdGhlIGZpcnN0IGZhY3RvciAtLS0tLS0tLS0tLS1cbiAgICAgIGlmIChpc051bWVyaWNBdG9tKGNhcihwKSkpIHtcbiAgICAgICAgcHJldmlvdXNGYWN0b3JXYXNBTnVtYmVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIHRoaXMgbnVtYmVyT25lT3ZlclNvbWV0aGluZyB0aGluZyBpcyBzbyB0aGF0XG4gICAgICAvLyB3ZSBzaG93IHRoaW5ncyBvZiB0aGUgZm9ybVxuICAgICAgLy8gICBudW1lcmljRnJhY3Rpb25PZkZvcm0xL3NvbWV0aGluZyAqIHNvbWV0aGluZ0Vsc2VcbiAgICAgIC8vIGFzXG4gICAgICAvLyAgIHNvbWV0aGluZ0Vsc2UgLyBzb21ldGhpbmdcbiAgICAgIC8vIHNvIGZvciBleGFtcGxlIDEvMiAqIHNxcnQoMikgaXMgcmVuZGVyZWQgYXNcbiAgICAgIC8vICAgc3FydCgyKS8yXG4gICAgICAvLyByYXRoZXIgdGhhbiB0aGUgZmlyc3QgZm9ybSwgd2hpY2ggbG9va3MgY29uZnVzaW5nLlxuICAgICAgLy8gTk9URSB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGF2b2lkIHRoaXNcbiAgICAgIC8vIHdoZW4gcHJpbnRpbmcgcG9seW5vbWlhbHMsIGFzIGl0IGNvdWxkIGJlIG5pY2VyXG4gICAgICAvLyB0byBzaG93IHRoZSBudW1lcmljIGNvZWZmaWNpZW50cyB3ZWxsIHNlcGFyYXRlZCBmcm9tXG4gICAgICAvLyB0aGUgdmFyaWFibGUsIGJ1dCB3ZSdsbCBzZWUgd2hlbiB3ZSdsbFxuICAgICAgLy8gY29tZSB0byBpdCBpZiBpdCdzIGFuIGlzc3VlLlxuICAgICAgbnVtYmVyT25lT3ZlclNvbWV0aGluZyA9IGZhbHNlO1xuICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYICYmIGlzY29ucyhjZHIocCkpICYmIGlzTnVtYmVyT25lT3ZlclNvbWV0aGluZyhjYXIocCkpKSB7XG4gICAgICAgIG51bWJlck9uZU92ZXJTb21ldGhpbmcgPSB0cnVlO1xuICAgICAgICBkZW5vbSA9IGNhcihwKS5xLmIudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIGlmIChudW1iZXJPbmVPdmVyU29tZXRoaW5nKSB7XG4gICAgICAgIG9yaWdBY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yO1xuICAgICAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9mYWN0b3IoY2FyKHApKTtcbiAgICAgIH1cbiAgICAgIHAgPSBjZHIocCk7XG4gICAgICAvLyBwcmludCBhbGwgdGhlIG90aGVyIGZhY3RvcnMgLS0tLS0tLVxuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICAvLyBjaGVjayBpZiB3ZSBlbmQgdXAgaGF2aW5nIGEgY2FzZSB3aGVyZSB0d28gbnVtYmVyc1xuICAgICAgICAvLyBhcmUgbmV4dCB0byBlYWNoIG90aGVyLiBJbiB0aG9zZSBjYXNlcywgbGF0ZXggbmVlZHNcbiAgICAgICAgLy8gdG8gaW5zZXJ0IGEgXFxjZG90IG90aGVyd2lzZSB0aGV5IGVuZCB1cFxuICAgICAgICAvLyByaWdodCBuZXh0IHRvIGVhY2ggb3RoZXIgYW5kIHJlYWQgbGlrZSBvbmUgYmlnIG51bWJlclxuICAgICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgICBpZiAocHJldmlvdXNGYWN0b3JXYXNBTnVtYmVyKSB7XG4gICAgICAgICAgICAvLyBpZiB3aGF0IGNvbWVzIG5leHQgaXMgYSBwb3dlciBhbmQgdGhlIGJhc2VcbiAgICAgICAgICAgIC8vIGlzIGEgbnVtYmVyLCB0aGVuIHdlIGFyZSBpbiB0aGUgY2FzZVxuICAgICAgICAgICAgLy8gb2YgY29uc2VjdXRpdmUgbnVtYmVycy5cbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBzcXJ0KCkgaS5lIHdoZW4gZXhwb25lbnQgaXMgMS8yXG4gICAgICAgICAgICAvLyBkb2Vzbid0IGNvdW50IGJlY2F1c2UgdGhlIHJhZGljYWwgZ2l2ZXNcbiAgICAgICAgICAgIC8vIGEgbmljZSBncmFwaGljYWwgc2VwYXJhdGlvbiBhbHJlYWR5LlxuICAgICAgICAgICAgaWYgKGNhYXIocCkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgICAgICAgICAgaWYgKGlzTnVtZXJpY0F0b20oY2FyKGNkcihjYXIocCkpKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzZnJhY3Rpb24oY2FyKGNkcihjZHIoY2FyKHApKSkpKSkge1xuICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gXCIgXFxcXGNkb3QgXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X211bHRpcGx5X3NpZ24oKTtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZmFjdG9yKGNhcihwKSk7XG4gICAgICAgIHByZXZpb3VzRmFjdG9yV2FzQU51bWJlciA9IGZhbHNlO1xuICAgICAgICBpZiAoaXNOdW1lcmljQXRvbShjYXIocCkpKSB7XG4gICAgICAgICAgcHJldmlvdXNGYWN0b3JXYXNBTnVtYmVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwID0gY2RyKHApO1xuICAgICAgfVxuICAgICAgaWYgKG51bWJlck9uZU92ZXJTb21ldGhpbmcpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBvcmlnQWNjdW11bGF0b3IgKyBcIlxcXFxmcmFje1wiICsgYWNjdW11bGF0b3IgKyBcIn17XCIgKyBkZW5vbSArIFwifVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9mYWN0b3IocCk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9zdWJleHByID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfY2hhcignKCcpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIocCk7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfY2hhcignKScpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9mYWN0b3JpYWxfZnVuY3Rpb24gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBwID0gY2FkcihwKTtcbiAgICBpZiAoaXNmcmFjdGlvbihwKSB8fCBjYXIocCkgPT09IHN5bWJvbChBREQpIHx8IGNhcihwKSA9PT0gc3ltYm9sKE1VTFRJUExZKSB8fCBjYXIocCkgPT09IHN5bWJvbChQT1dFUikgfHwgY2FyKHApID09PSBzeW1ib2woRkFDVE9SSUFMKSkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3ViZXhwcihwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihwKTtcbiAgICB9XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfY2hhcignIScpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9BQlNfbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJcXFxcbGVmdCB8XCIpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkcihwKSk7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiIFxcXFxyaWdodCB8XCIpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9CSU5PTUlBTF9sYXRleCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIlxcXFxiaW5vbXtcIik7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJ9e1wiKTtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZGRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJ9IFwiKTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfRE9UX2xhdGV4ID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIgXFxcXGNkb3QgXCIpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZHIocCkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9ET1RfY29kZWdlbiA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcImRvdChcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZHIocCkpO1xuICAgIGFjY3VtdWxhdG9yICs9IFwiLCBcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZGRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIilcIjtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfU0lOX2NvZGVnZW4gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJNYXRoLnNpbihcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZHIocCkpO1xuICAgIGFjY3VtdWxhdG9yICs9IFwiKVwiO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9DT1NfY29kZWdlbiA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIk1hdGguY29zKFwiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkcihwKSk7XG4gICAgYWNjdW11bGF0b3IgKz0gXCIpXCI7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X1RBTl9jb2RlZ2VuID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiTWF0aC50YW4oXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIilcIjtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfQVJDU0lOX2NvZGVnZW4gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJNYXRoLmFzaW4oXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIilcIjtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfQVJDQ09TX2NvZGVnZW4gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJNYXRoLmFjb3MoXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIilcIjtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfQVJDVEFOX2NvZGVnZW4gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJNYXRoLmF0YW4oXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIilcIjtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfU1FSVF9sYXRleCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIlxcXFxzcXJ0e1wiKTtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZHIocCkpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIn0gXCIpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9UUkFOU1BPU0VfbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJ7XCIpO1xuICAgIGlmIChpc2NvbnMoY2FkcihwKSkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgIH1cbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZHIocCkpO1xuICAgIGlmIChpc2NvbnMoY2FkcihwKSkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKScpO1xuICAgIH1cbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJ9XCIpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIl5UXCIpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9UUkFOU1BPU0VfY29kZWdlbiA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcInRyYW5zcG9zZShcIik7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJyknKTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfVU5JVF9jb2RlZ2VuID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiaWRlbnRpdHkoXCIpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkcihwKSk7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X0lOVl9sYXRleCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIntcIik7XG4gICAgaWYgKGlzY29ucyhjYWRyKHApKSkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcoJyk7XG4gICAgfVxuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkcihwKSk7XG4gICAgaWYgKGlzY29ucyhjYWRyKHApKSkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgfVxuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIn1cIik7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiXnstMX1cIik7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X0lOVl9jb2RlZ2VuID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiaW52KFwiKTtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZHIocCkpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKScpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9ERUZJTlRfbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yLCBmdW5jdGlvbkJvZHksIGksIGkxLCBudW1iZXJPZkludGVncmFscywgb3JpZ2luYWxJbnRlZ3JhbCwgcmVmMSwgdGhlSW50ZWdyYWwsIHRoZVZhcmlhYmxlO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBmdW5jdGlvbkJvZHkgPSBjYXIoY2RyKHApKTtcbiAgICBwID0gY2RyKHApO1xuICAgIG9yaWdpbmFsSW50ZWdyYWwgPSBwO1xuICAgIG51bWJlck9mSW50ZWdyYWxzID0gMDtcbiAgICB3aGlsZSAoaXNjb25zKGNkcihjZHIocCkpKSkge1xuICAgICAgbnVtYmVyT2ZJbnRlZ3JhbHMrKztcbiAgICAgIHRoZUludGVncmFsID0gY2RyKGNkcihwKSk7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJcXFxcaW50XntcIik7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhcihjZHIodGhlSW50ZWdyYWwpKSk7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJ9X3tcIik7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhcih0aGVJbnRlZ3JhbCkpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwifSBcXFxcISBcIik7XG4gICAgICBwID0gY2RyKHRoZUludGVncmFsKTtcbiAgICB9XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihmdW5jdGlvbkJvZHkpO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIiBcXFxcLFwiKTtcbiAgICBwID0gb3JpZ2luYWxJbnRlZ3JhbDtcbiAgICBmb3IgKGkgPSBpMSA9IDEsIHJlZjEgPSBudW1iZXJPZkludGVncmFsczsgKDEgPD0gcmVmMSA/IGkxIDw9IHJlZjEgOiBpMSA+PSByZWYxKTsgaSA9IDEgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgICB0aGVWYXJpYWJsZSA9IGNkcihwKTtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIiBcXFxcbWF0aHJte2R9IFwiKTtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FyKHRoZVZhcmlhYmxlKSk7XG4gICAgICBpZiAoaSA8IG51bWJlck9mSW50ZWdyYWxzKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIiBcXFxcLCBcIik7XG4gICAgICB9XG4gICAgICBwID0gY2RyKGNkcih0aGVWYXJpYWJsZSkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfdGVuc29yID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfdGVuc29yX2lubmVyKHAsIDAsIDApWzFdO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICAvLyBqIHNjYW5zIHRoZSBkaW1lbnNpb25zXG4gIC8vIGsgaXMgYW4gaW5jcmVtZW50IGZvciBhbGwgdGhlIHByaW50ZWQgZWxlbWVudHNcbiAgLy8gICBzaW5jZSB0aGV5IGFyZSBhbGwgdG9nZXRoZXIgaW4gc2VxdWVuY2UgaW4gb25lIGFycmF5XG4gIHByaW50X3RlbnNvcl9pbm5lciA9IGZ1bmN0aW9uKHAsIGosIGspIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGksIGkxLCBqMSwgcmVmMSwgcmVmMiwgcmV0U3RyaW5nO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJbXCIpO1xuICAgIC8vIG9ubHkgdGhlIGxhc3QgZGltZW5zaW9uIHByaW50cyB0aGUgYWN0dWFsIGVsZW1lbnRzXG4gICAgLy8gZS5nLiBpbiBhIG1hdHJpeCwgdGhlIGZpcnN0IGRpbWVuc2lvbiBjb250YWluc1xuICAgIC8vIHZlY3RvcnMsIG5vdCBlbGVtZW50cywgYW5kIHRoZSBzZWNvbmQgZGltZW5zaW9uXG4gICAgLy8gYWN0dWFsbHkgY29udGFpbnMgdGhlIGVsZW1lbnRzXG5cbiAgICAvLyBpZiBub3QgdGhlIGxhc3QgZGltZW5zaW9uLCB3ZSBhcmUganVzdCBwcmludGluZyB3cmFwcGVyc1xuICAgIC8vIGFuZCByZWN1cnNpbmcgZG93biBpLmUuIHdlIHByaW50IHRoZSBuZXh0IGRpbWVuc2lvblxuICAgIGlmIChqIDwgcC50ZW5zb3IubmRpbSAtIDEpIHtcbiAgICAgIGZvciAoaSA9IGkxID0gMCwgcmVmMSA9IHAudGVuc29yLmRpbVtqXTsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGkgPSAwIDw9IHJlZjEgPyArK2kxIDogLS1pMSkge1xuICAgICAgICBbaywgcmV0U3RyaW5nXSA9IHByaW50X3RlbnNvcl9pbm5lcihwLCBqICsgMSwgayk7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHJldFN0cmluZztcbiAgICAgICAgLy8gYWRkIHNlcGFyYXRvciBiZXR3ZWVuIGVsZW1lbnRzIGRpbWVuc2lvbnNcbiAgICAgICAgLy8gXCJhYm92ZVwiIHRoZSBpbm5lci1tb3N0IGRpbWVuc2lvblxuICAgICAgICBpZiAoaSAhPT0gcC50ZW5zb3IuZGltW2pdIC0gMSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIixcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuLy8gaWYgd2UgcmVhY2hlZCB0aGUgbGFzdCBkaW1lbnNpb24sIHdlIHByaW50IHRoZSBhY3R1YWxcbi8vIGVsZW1lbnRzXG4gICAgICBmb3IgKGkgPSBqMSA9IDAsIHJlZjIgPSBwLnRlbnNvci5kaW1bal07ICgwIDw9IHJlZjIgPyBqMSA8IHJlZjIgOiBqMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytqMSA6IC0tajEpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihwLnRlbnNvci5lbGVtW2tdKTtcbiAgICAgICAgLy8gYWRkIHNlcGFyYXRvciBiZXR3ZWVuIGVsZW1lbnRzIGluIHRoZVxuICAgICAgICAvLyBpbm5lci1tb3N0IGRpbWVuc2lvblxuICAgICAgICBpZiAoaSAhPT0gcC50ZW5zb3IuZGltW2pdIC0gMSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIixcIik7XG4gICAgICAgIH1cbiAgICAgICAgaysrO1xuICAgICAgfVxuICAgIH1cbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJdXCIpO1xuICAgIHJldHVybiBbaywgYWNjdW11bGF0b3JdO1xuICB9O1xuXG4gIHByaW50X3RlbnNvcl9sYXRleCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGlmIChwLnRlbnNvci5uZGltIDw9IDIpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3RlbnNvcl9pbm5lcl9sYXRleCh0cnVlLCBwLCAwLCAwKVsxXTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIC8vIGZpcnN0TGV2ZWwgaXMgbmVlZGVkIGJlY2F1c2UgcHJpbnRpbmcgYSBtYXRyaXhcbiAgLy8gaXMgbm90IGV4YWN0bHkgYW4gZWxlZ2FudCByZWN1cnNpdmUgcHJvY2VkdXJlOlxuICAvLyB0aGUgdmVjdG9yIG9uIHRoZSBmaXJzdCBsZXZlbCBwcmludHMgdGhlIGxhdGV4XG4gIC8vIFwid3JhcFwiLCB3aGlsZSB0aGUgdmVjdG9ycyB0aGF0IG1ha2UgdXAgdGhlXG4gIC8vIHJvd3MgZG9uJ3QuIHNvIGl0J3MgYSBiaXQgYXN5bW1ldHJpYyBhbmQgdGhpc1xuICAvLyBmbGFnIGhlbHBzLlxuICAvLyBqIHNjYW5zIHRoZSBkaW1lbnNpb25zXG4gIC8vIGsgaXMgYW4gaW5jcmVtZW50IGZvciBhbGwgdGhlIHByaW50ZWQgZWxlbWVudHNcbiAgLy8gICBzaW5jZSB0aGV5IGFyZSBhbGwgdG9nZXRoZXIgaW4gc2VxdWVuY2UgaW4gb25lIGFycmF5XG4gIHByaW50X3RlbnNvcl9pbm5lcl9sYXRleCA9IGZ1bmN0aW9uKGZpcnN0TGV2ZWwsIHAsIGosIGspIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGksIGkxLCBqMSwgcmVmMSwgcmVmMiwgcmV0U3RyaW5nO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICAvLyBvcGVuIHRoZSBvdXRlciBsYXRleCB3cmFwXG4gICAgaWYgKGZpcnN0TGV2ZWwpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IFwiXFxcXGJlZ2lue2JtYXRyaXh9IFwiO1xuICAgIH1cbiAgICAvLyBvbmx5IHRoZSBsYXN0IGRpbWVuc2lvbiBwcmludHMgdGhlIGFjdHVhbCBlbGVtZW50c1xuICAgIC8vIGUuZy4gaW4gYSBtYXRyaXgsIHRoZSBmaXJzdCBkaW1lbnNpb24gY29udGFpbnNcbiAgICAvLyB2ZWN0b3JzLCBub3QgZWxlbWVudHMsIGFuZCB0aGUgc2Vjb25kIGRpbWVuc2lvblxuICAgIC8vIGFjdHVhbGx5IGNvbnRhaW5zIHRoZSBlbGVtZW50c1xuXG4gICAgLy8gaWYgbm90IHRoZSBsYXN0IGRpbWVuc2lvbiwgd2UgYXJlIGp1c3QgcHJpbnRpbmcgd3JhcHBlcnNcbiAgICAvLyBhbmQgcmVjdXJzaW5nIGRvd24gaS5lLiB3ZSBwcmludCB0aGUgbmV4dCBkaW1lbnNpb25cbiAgICBpZiAoaiA8IHAudGVuc29yLm5kaW0gLSAxKSB7XG4gICAgICBmb3IgKGkgPSBpMSA9IDAsIHJlZjEgPSBwLnRlbnNvci5kaW1bal07ICgwIDw9IHJlZjEgPyBpMSA8IHJlZjEgOiBpMSA+IHJlZjEpOyBpID0gMCA8PSByZWYxID8gKytpMSA6IC0taTEpIHtcbiAgICAgICAgW2ssIHJldFN0cmluZ10gPSBwcmludF90ZW5zb3JfaW5uZXJfbGF0ZXgoMCwgcCwgaiArIDEsIGspO1xuICAgICAgICBhY2N1bXVsYXRvciArPSByZXRTdHJpbmc7XG4gICAgICAgIGlmIChpICE9PSBwLnRlbnNvci5kaW1bal0gLSAxKSB7XG4gICAgICAgICAgLy8gYWRkIHNlcGFyYXRvciBiZXR3ZWVuIHJvd3NcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIgXFxcXFxcXFwgXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbi8vIGlmIHdlIHJlYWNoZWQgdGhlIGxhc3QgZGltZW5zaW9uLCB3ZSBwcmludCB0aGUgYWN0dWFsXG4vLyBlbGVtZW50c1xuICAgICAgZm9yIChpID0gajEgPSAwLCByZWYyID0gcC50ZW5zb3IuZGltW2pdOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIocC50ZW5zb3IuZWxlbVtrXSk7XG4gICAgICAgIC8vIHNlcGFyYXRvciBiZXR3ZWVuIGVsZW1lbnRzIGluIGVhY2ggcm93XG4gICAgICAgIGlmIChpICE9PSBwLnRlbnNvci5kaW1bal0gLSAxKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiICYgXCIpO1xuICAgICAgICB9XG4gICAgICAgIGsrKztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gY2xvc2UgdGhlIG91dGVyIGxhdGV4IHdyYXBcbiAgICBpZiAoZmlyc3RMZXZlbCkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gXCIgXFxcXGVuZHtibWF0cml4fVwiO1xuICAgIH1cbiAgICByZXR1cm4gW2ssIGFjY3VtdWxhdG9yXTtcbiAgfTtcblxuICBwcmludF9TVU1fbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcXFxcc3VtX3tcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZGRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIj1cIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZGRkcihwKSk7XG4gICAgYWNjdW11bGF0b3IgKz0gXCJ9XntcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZGRkZHIocCkpO1xuICAgIGFjY3VtdWxhdG9yICs9IFwifXtcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZHIocCkpO1xuICAgIGFjY3VtdWxhdG9yICs9IFwifVwiO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9TVU1fY29kZWdlbiA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGJvZHksIGxvd2VybGltaXQsIHVwcGVybGltaXQsIHZhcmlhYmxlO1xuICAgIGJvZHkgPSBjYWRyKHApO1xuICAgIHZhcmlhYmxlID0gY2FkZHIocCk7XG4gICAgbG93ZXJsaW1pdCA9IGNhZGRkcihwKTtcbiAgICB1cHBlcmxpbWl0ID0gY2FkZGRkcihwKTtcbiAgICBhY2N1bXVsYXRvciA9IFwiKGZ1bmN0aW9uKCl7XCIgKyBcIiB2YXIgXCIgKyB2YXJpYWJsZSArIFwiOyBcIiArIFwiIHZhciBob2xkZXJTdW0gPSAwOyBcIiArIFwiIHZhciBsb3dlcmxpbWl0ID0gXCIgKyBwcmludF9leHByKGxvd2VybGltaXQpICsgXCI7IFwiICsgXCIgdmFyIHVwcGVybGltaXQgPSBcIiArIHByaW50X2V4cHIodXBwZXJsaW1pdCkgKyBcIjsgXCIgKyBcIiBmb3IgKFwiICsgdmFyaWFibGUgKyBcIiA9IGxvd2VybGltaXQ7IFwiICsgdmFyaWFibGUgKyBcIiA8IHVwcGVybGltaXQ7IFwiICsgdmFyaWFibGUgKyBcIisrKSB7IFwiICsgXCIgICBob2xkZXJTdW0gKz0gXCIgKyBwcmludF9leHByKGJvZHkpICsgXCI7XCIgKyBcIiB9IFwiICsgXCIgcmV0dXJuIGhvbGRlclN1bTtcIiArIFwifSkoKVwiO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9URVNUX2xhdGV4ID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXFxcXGxlZnRcXFxceyBcXFxcYmVnaW57YXJyYXl9e2xsfVwiO1xuICAgIHAgPSBjZHIocCk7XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgLy8gb2RkIG51bWJlciBvZiBwYXJhbWV0ZXJzIG1lYW5zIHRoYXQgdGhlXG4gICAgICAvLyBsYXN0IGFyZ3VtZW50IGJlY29tZXMgdGhlIGRlZmF1bHQgY2FzZVxuICAgICAgLy8gaS5lLiB0aGUgb25lIHdpdGhvdXQgYSB0ZXN0LlxuICAgICAgaWYgKGNkcihwKSA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gXCJ7XCI7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FyKHApKTtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gXCJ9ICYgb3RoZXJ3aXNlIFwiO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBcIiBcXFxcXFxcXFxcXFxcXFxcXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYWNjdW11bGF0b3IgKz0gXCJ7XCI7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZHIocCkpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gXCJ9ICYgaWYgJiBcIjtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FyKHApKTtcbiAgICAgIGFjY3VtdWxhdG9yICs9IFwiIFxcXFxcXFxcXFxcXFxcXFxcIjtcbiAgICAgIC8vIHRlc3QgdW5zdWNjZXNzZnVsLCBjb250aW51ZSB0byB0aGVcbiAgICAgIC8vIG5leHQgcGFpciBvZiB0ZXN0LHZhbHVlXG4gICAgICBwID0gY2RkcihwKTtcbiAgICB9XG4gICAgYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvci5zdWJzdHJpbmcoMCwgYWNjdW11bGF0b3IubGVuZ3RoIC0gNCk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yICs9IFwiXFxcXGVuZHthcnJheX0gXFxcXHJpZ2h0LlwiO1xuICB9O1xuXG4gIHByaW50X1RFU1RfY29kZWdlbiA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGhvd01hbnlJZnM7XG4gICAgYWNjdW11bGF0b3IgPSBcIihmdW5jdGlvbigpe1wiO1xuICAgIHAgPSBjZHIocCk7XG4gICAgaG93TWFueUlmcyA9IDA7XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgLy8gb2RkIG51bWJlciBvZiBwYXJhbWV0ZXJzIG1lYW5zIHRoYXQgdGhlXG4gICAgICAvLyBsYXN0IGFyZ3VtZW50IGJlY29tZXMgdGhlIGRlZmF1bHQgY2FzZVxuICAgICAgLy8gaS5lLiB0aGUgb25lIHdpdGhvdXQgYSB0ZXN0LlxuICAgICAgaWYgKGNkcihwKSA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gXCJlbHNlIHtcIjtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gXCJyZXR1cm4gKFwiICsgcHJpbnRfZXhwcihjYXIocCkpICsgXCIpO1wiO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaG93TWFueUlmcykge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBcIiBlbHNlIFwiO1xuICAgICAgfVxuICAgICAgYWNjdW11bGF0b3IgKz0gXCJpZiAoXCIgKyBwcmludF9leHByKGNhcihwKSkgKyBcIil7XCI7XG4gICAgICBhY2N1bXVsYXRvciArPSBcInJldHVybiAoXCIgKyBwcmludF9leHByKGNhZHIocCkpICsgXCIpO1wiO1xuICAgICAgYWNjdW11bGF0b3IgKz0gXCJ9XCI7XG4gICAgICAvLyB0ZXN0IHVuc3VjY2Vzc2Z1bCwgY29udGludWUgdG8gdGhlXG4gICAgICAvLyBuZXh0IHBhaXIgb2YgdGVzdCx2YWx1ZVxuICAgICAgaG93TWFueUlmcysrO1xuICAgICAgcCA9IGNkZHIocCk7XG4gICAgfVxuICAgIGFjY3VtdWxhdG9yICs9IFwifSkoKVwiO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9URVNUTFRfbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJ7XCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgICBhY2N1bXVsYXRvciArPSBcIiA8IFwiO1xuICAgIGFjY3VtdWxhdG9yICs9IFwie1wiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZHIocCkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgfTtcblxuICBwcmludF9URVNUTEVfbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJ7XCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgICBhY2N1bXVsYXRvciArPSBcIiBcXFxcbGVxIFwiO1xuICAgIGFjY3VtdWxhdG9yICs9IFwie1wiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZHIocCkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgfTtcblxuICBwcmludF9URVNUR1RfbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJ7XCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgICBhY2N1bXVsYXRvciArPSBcIiA+IFwiO1xuICAgIGFjY3VtdWxhdG9yICs9IFwie1wiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZHIocCkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgfTtcblxuICBwcmludF9URVNUR0VfbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJ7XCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgICBhY2N1bXVsYXRvciArPSBcIiBcXFxcZ2VxIFwiO1xuICAgIGFjY3VtdWxhdG9yICs9IFwie1wiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZHIocCkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgfTtcblxuICBwcmludF9URVNURVFfbGF0ZXggPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJ7XCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgICBhY2N1bXVsYXRvciArPSBcIiA9IFwiO1xuICAgIGFjY3VtdWxhdG9yICs9IFwie1wiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZHIocCkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvciArPSBcIn1cIjtcbiAgfTtcblxuICBwcmludF9GT1JfY29kZWdlbiA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGJvZHksIGxvd2VybGltaXQsIHVwcGVybGltaXQsIHZhcmlhYmxlO1xuICAgIGJvZHkgPSBjYWRyKHApO1xuICAgIHZhcmlhYmxlID0gY2FkZHIocCk7XG4gICAgbG93ZXJsaW1pdCA9IGNhZGRkcihwKTtcbiAgICB1cHBlcmxpbWl0ID0gY2FkZGRkcihwKTtcbiAgICBhY2N1bXVsYXRvciA9IFwiKGZ1bmN0aW9uKCl7XCIgKyBcIiB2YXIgXCIgKyB2YXJpYWJsZSArIFwiOyBcIiArIFwiIHZhciBsb3dlcmxpbWl0ID0gXCIgKyBwcmludF9leHByKGxvd2VybGltaXQpICsgXCI7IFwiICsgXCIgdmFyIHVwcGVybGltaXQgPSBcIiArIHByaW50X2V4cHIodXBwZXJsaW1pdCkgKyBcIjsgXCIgKyBcIiBmb3IgKFwiICsgdmFyaWFibGUgKyBcIiA9IGxvd2VybGltaXQ7IFwiICsgdmFyaWFibGUgKyBcIiA8IHVwcGVybGltaXQ7IFwiICsgdmFyaWFibGUgKyBcIisrKSB7IFwiICsgXCIgICBcIiArIHByaW50X2V4cHIoYm9keSkgKyBcIiB9IFwiICsgXCJ9KSgpXCI7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X0RPX2NvZGVnZW4gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBwID0gY2RyKHApO1xuICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FyKHApKTtcbiAgICAgIHAgPSBjZHIocCk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9TRVRRX2NvZGVnZW4gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhZHIocCkpO1xuICAgIGFjY3VtdWxhdG9yICs9IFwiID0gXCI7XG4gICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRkcihwKSk7XG4gICAgYWNjdW11bGF0b3IgKz0gXCI7IFwiO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9QUk9EVUNUX2xhdGV4ID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXFxcXHByb2Rfe1wiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZHIocCkpO1xuICAgIGFjY3VtdWxhdG9yICs9IFwiPVwiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZGRyKHApKTtcbiAgICBhY2N1bXVsYXRvciArPSBcIn1ee1wiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkZGRkcihwKSk7XG4gICAgYWNjdW11bGF0b3IgKz0gXCJ9e1wiO1xuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FkcihwKSk7XG4gICAgYWNjdW11bGF0b3IgKz0gXCJ9XCI7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X1BST0RVQ1RfY29kZWdlbiA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGJvZHksIGxvd2VybGltaXQsIHVwcGVybGltaXQsIHZhcmlhYmxlO1xuICAgIGJvZHkgPSBjYWRyKHApO1xuICAgIHZhcmlhYmxlID0gY2FkZHIocCk7XG4gICAgbG93ZXJsaW1pdCA9IGNhZGRkcihwKTtcbiAgICB1cHBlcmxpbWl0ID0gY2FkZGRkcihwKTtcbiAgICBhY2N1bXVsYXRvciA9IFwiKGZ1bmN0aW9uKCl7XCIgKyBcIiB2YXIgXCIgKyB2YXJpYWJsZSArIFwiOyBcIiArIFwiIHZhciBob2xkZXJQcm9kdWN0ID0gMTsgXCIgKyBcIiB2YXIgbG93ZXJsaW1pdCA9IFwiICsgcHJpbnRfZXhwcihsb3dlcmxpbWl0KSArIFwiOyBcIiArIFwiIHZhciB1cHBlcmxpbWl0ID0gXCIgKyBwcmludF9leHByKHVwcGVybGltaXQpICsgXCI7IFwiICsgXCIgZm9yIChcIiArIHZhcmlhYmxlICsgXCIgPSBsb3dlcmxpbWl0OyBcIiArIHZhcmlhYmxlICsgXCIgPCB1cHBlcmxpbWl0OyBcIiArIHZhcmlhYmxlICsgXCIrKykgeyBcIiArIFwiICAgaG9sZGVyUHJvZHVjdCAqPSBcIiArIHByaW50X2V4cHIoYm9keSkgKyBcIjtcIiArIFwiIH0gXCIgKyBcIiByZXR1cm4gaG9sZGVyUHJvZHVjdDtcIiArIFwifSkoKVwiO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9iYXNlID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgaWYgKGlzYWRkKGNhZHIocCkpIHx8IGNhYWRyKHApID09PSBzeW1ib2woTVVMVElQTFkpIHx8IGNhYWRyKHApID09PSBzeW1ib2woUE9XRVIpIHx8IGlzbmVnYXRpdmVudW1iZXIoY2FkcihwKSkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKScpO1xuICAgIH0gZWxzZSBpZiAoaXNOdW1lcmljQXRvbShjYWRyKHApKSAmJiAobGVzc3AoY2FkcihwKSwgemVybykgfHwgaXNmcmFjdGlvbihjYWRyKHApKSkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZmFjdG9yKGNhZHIocCkpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2ZhY3RvcihjYWRyKHApKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X2V4cG9uZW50ID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBhY2N1bXVsYXRvcjtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgaWYgKGlzY29ucyhjYWRkcihwKSkgfHwgaXNmcmFjdGlvbihjYWRkcihwKSkgfHwgKGlzTnVtZXJpY0F0b20oY2FkZHIocCkpICYmIGxlc3NwKGNhZGRyKHApLCB6ZXJvKSkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRkcihwKSk7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJyknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZmFjdG9yKGNhZGRyKHApKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X3Bvd2VyID0gZnVuY3Rpb24oYmFzZSwgZXhwb25lbnQpIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGRlbm9tRXhwb25lbnQsIG5ld0V4cG9uZW50LCBudW1FeHBvbmVudDtcbiAgICBhY2N1bXVsYXRvciA9IFwiXCI7XG4gICAgLy9kZWJ1Z2dlclxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJwb3dlciBiYXNlOiBcIiArIGJhc2UgKyBcIiBcIiArIFwiIGV4cG9uZW50OiBcIiArIGV4cG9uZW50KTtcbiAgICB9XG4gICAgLy8gcXVpY2sgY2hlY2sgaXMgdGhpcyBpcyBhY3R1YWxseSBhIHNxdWFyZSByb290LlxuICAgIGlmIChpc29uZW92ZXJ0d28oZXhwb25lbnQpKSB7XG4gICAgICBpZiAoZXF1YWxuKGJhc2UsIDIpKSB7XG4gICAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiTWF0aC5TUVJUMlwiKTtcbiAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIlxcXFxzcXJ0e1wiKTtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGJhc2UpO1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIn1cIik7XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJNYXRoLnNxcnQoXCIpO1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoYmFzZSk7XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgoZXF1YWxuKGdldF9iaW5kaW5nKHN5bWJvbChQUklOVF9MRUFWRV9FX0FMT05FKSksIDEpKSAmJiBiYXNlID09PSBzeW1ib2woRSkpIHtcbiAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIk1hdGguZXhwKFwiKTtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwb19vZl9kZW5vbShleHBvbmVudCk7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKScpO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiZV57XCIpO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGV4cG9uZW50KTtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwifVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcImV4cChcIik7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoZXhwb25lbnQpO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJyknKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG4gICAgaWYgKGNvZGVHZW4pIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIk1hdGgucG93KFwiKTtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2Jhc2Vfb2ZfZGVub20oYmFzZSk7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIsIFwiKTtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cG9fb2ZfZGVub20oZXhwb25lbnQpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuICAgIGlmICgoZXF1YWxuKGdldF9iaW5kaW5nKHN5bWJvbChQUklOVF9MRUFWRV9YX0FMT05FKSksIDApKSB8fCBiYXNlLnByaW50bmFtZSAhPT0gXCJ4XCIpIHtcbiAgICAgIC8vIGlmIHRoZSBleHBvbmVudCBpcyBuZWdhdGl2ZSB0aGVuXG4gICAgICAvLyB3ZSBpbnZlcnQgdGhlIGJhc2UgQlVUIHdlIGRvbid0IGRvXG4gICAgICAvLyB0aGF0IGlmIHRoZSBiYXNlIGlzIFwiZVwiLCBiZWNhdXNlIGZvclxuICAgICAgLy8gZXhhbXBsZSB3aGVuIHRyaWdvbm9tZXRyaWMgZnVuY3Rpb25zIGFyZVxuICAgICAgLy8gZXhwcmVzc2VkIGluIHRlcm1zIG9mIGV4cG9uZW50aWFsIGZ1bmN0aW9uc1xuICAgICAgLy8gdGhhdCB3b3VsZCBiZSByZWFsbHkgY29uZnVzaW5nLCBvbmUgd2FudHMgdG9cbiAgICAgIC8vIGtlZXAgXCJlXCIgYXMgdGhlIGJhc2UgYW5kIHRoZSBuZWdhdGl2ZSBleHBvbmVudFxuICAgICAgaWYgKGJhc2UgIT09IHN5bWJvbChFKSkge1xuICAgICAgICBpZiAoaXNtaW51c29uZShleHBvbmVudCkpIHtcbiAgICAgICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIlxcXFxmcmFjezF9e1wiKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0hVTUFOICYmICF0ZXN0X2ZsYWcpIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIjEgLyBcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIjEvXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNjb25zKGJhc2UpICYmIHByaW50TW9kZSAhPT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJygnKTtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoYmFzZSk7XG4gICAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJyknKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihiYXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJ9XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzbmVnYXRpdmV0ZXJtKGV4cG9uZW50KSkge1xuICAgICAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiXFxcXGZyYWN7MX17XCIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfSFVNQU4gJiYgIXRlc3RfZmxhZykge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiMSAvIFwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiMS9cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHB1c2goZXhwb25lbnQpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBuZXdFeHBvbmVudCA9IHBvcCgpO1xuICAgICAgICAgIGlmIChpc2NvbnMoYmFzZSkgJiYgcHJpbnRNb2RlICE9PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfcG93ZXIoYmFzZSwgbmV3RXhwb25lbnQpO1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3Bvd2VyKGJhc2UsIG5ld0V4cG9uZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJ9XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc2ZyYWN0aW9uKGV4cG9uZW50KSAmJiBwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJcXFxcc3FydFwiKTtcbiAgICAgICAgcHVzaChleHBvbmVudCk7XG4gICAgICAgIGRlbm9taW5hdG9yKCk7XG4gICAgICAgIGRlbm9tRXhwb25lbnQgPSBwb3AoKTtcbiAgICAgICAgaWYgKCFpc3BsdXN0d28oZGVub21FeHBvbmVudCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJbXCIpO1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoZGVub21FeHBvbmVudCk7XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiXVwiKTtcbiAgICAgICAgfVxuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJ7XCIpO1xuICAgICAgICBwdXNoKGV4cG9uZW50KTtcbiAgICAgICAgbnVtZXJhdG9yKCk7XG4gICAgICAgIG51bUV4cG9uZW50ID0gcG9wKCk7XG4gICAgICAgIGV4cG9uZW50ID0gbnVtRXhwb25lbnQ7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3Bvd2VyKGJhc2UsIGV4cG9uZW50KTtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwifVwiKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVggJiYgaXNwbHVzb25lKGV4cG9uZW50KSkge1xuICAgICAgLy8gaWYgd2UgYXJlIGluIGxhdGV4IG1vZGUgd2UgdHVybiBtYW55XG4gICAgICAvLyByYWRpY2FscyBpbnRvIGEgcmFkaXggc2lnbiB3aXRoIGEgcG93ZXJcbiAgICAgIC8vIHVuZGVybmVhdGgsIGFuZCB0aGUgcG93ZXIgaXMgb2Z0ZW4gb25lXG4gICAgICAvLyAoZS5nLiBzcXVhcmUgcm9vdCB0dXJucyBpbnRvIGEgcmFkaWNhbFxuICAgICAgLy8gd2l0aCBhIHBvd2VyIG9uZSB1bmRlcm5lYXRoKSBzbyBoYW5kbGVcbiAgICAgIC8vIHRoaXMgY2FzZSBzaW1wbHkgaGVyZSwganVzdCBwcmludCB0aGUgYmFzZVxuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihiYXNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcHJpbnQgdGhlIGJhc2UsXG4gICAgICAvLyBkZXRlcm1pbmluZyBpZiBpdCBuZWVkcyB0byBiZVxuICAgICAgLy8gd3JhcHBlZCBpbiBwYXJlbnRoZXNlcyBvciBub3RcbiAgICAgIGlmIChpc2FkZChiYXNlKSB8fCBpc25lZ2F0aXZlbnVtYmVyKGJhc2UpKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGJhc2UpO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJyknKTtcbiAgICAgIH0gZWxzZSBpZiAoY2FyKGJhc2UpID09PSBzeW1ib2woTVVMVElQTFkpIHx8IGNhcihiYXNlKSA9PT0gc3ltYm9sKFBPV0VSKSkge1xuICAgICAgICBpZiAocHJpbnRNb2RlICE9PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJygnKTtcbiAgICAgICAgfVxuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9mYWN0b3IoYmFzZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChwcmludE1vZGUgIT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzTnVtZXJpY0F0b20oYmFzZSkgJiYgKGxlc3NwKGJhc2UsIHplcm8pIHx8IGlzZnJhY3Rpb24oYmFzZSkpKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9mYWN0b3IoYmFzZSk7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZmFjdG9yKGJhc2UpO1xuICAgICAgfVxuICAgICAgLy8gcHJpbnQgdGhlIHBvd2VyIHN5bWJvbFxuICAgICAgLy9kZWJ1Z2dlclxuICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0hVTUFOICYmICF0ZXN0X2ZsYWcpIHtcbiAgICAgICAgLy9wcmludF9zdHIoXCIgXiBcIilcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKHBvd2VyX3N0cik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJeXCIpO1xuICAgICAgfVxuICAgICAgLy8gcHJpbnQgdGhlIGV4cG9uZW50XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgLy8gaW4gbGF0ZXggbW9kZSwgb25lIGNhbiBvbWl0IHRoZSBjdXJseSBicmFjZXNcbiAgICAgICAgLy8gd3JhcHBpbmcgdGhlIGV4cG9uZW50IGlmIHRoZSBleHBvbmVudCBpcyBvbmx5XG4gICAgICAgIC8vIG9uZSBjaGFyYWN0ZXIgbG9uZ1xuICAgICAgICBpZiAocHJpbnRfZXhwcihleHBvbmVudCkubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIntcIik7XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihleHBvbmVudCk7XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwifVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGV4cG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc2NvbnMoZXhwb25lbnQpIHx8IGlzZnJhY3Rpb24oZXhwb25lbnQpIHx8IChpc051bWVyaWNBdG9tKGV4cG9uZW50KSAmJiBsZXNzcChleHBvbmVudCwgemVybykpKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGV4cG9uZW50KTtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9mYWN0b3IoZXhwb25lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfaW5kZXhfZnVuY3Rpb24gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBwID0gY2RyKHApO1xuICAgIGlmIChjYWFyKHApID09PSBzeW1ib2woQUREKSB8fCBjYWFyKHApID09PSBzeW1ib2woTVVMVElQTFkpIHx8IGNhYXIocCkgPT09IHN5bWJvbChQT1dFUikgfHwgY2FhcihwKSA9PT0gc3ltYm9sKEZBQ1RPUklBTCkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N1YmV4cHIoY2FyKHApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYXIocCkpO1xuICAgIH1cbiAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJ1snKTtcbiAgICBwID0gY2RyKHApO1xuICAgIGlmIChpc2NvbnMocCkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FyKHApKTtcbiAgICAgIHAgPSBjZHIocCk7XG4gICAgICB3aGlsZSAoaXNjb25zKHApKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignLCcpO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhcihwKSk7XG4gICAgICAgIHAgPSBjZHIocCk7XG4gICAgICB9XG4gICAgfVxuICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignXScpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBwcmludF9mYWN0b3IgPSBmdW5jdGlvbihwLCBvbWl0UGFyZW5zKSB7XG4gICAgdmFyIGFjY3VtdWxhdG9yLCBiYXNlLCBleHBvbmVudCwgZmJvZHksIHBhcmFtZXRlcnMsIHJldHVybmVkO1xuICAgIC8vIGRlYnVnZ2VyXG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGlmIChpc051bWVyaWNBdG9tKHApKSB7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9udW1iZXIocCwgZmFsc2UpO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cbiAgICBpZiAoaXNzdHIocCkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIlxcXCJcIik7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIocC5zdHIpO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiXFxcIlwiKTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG4gICAgaWYgKGlzdGVuc29yKHApKSB7XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfdGVuc29yX2xhdGV4KHApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfdGVuc29yKHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBpZiAoIW9taXRQYXJlbnMpIHtcbiAgICAgICAgaWYgKHNpZ25fb2ZfdGVybShwKSA9PT0gJy0nIHx8IHByaW50TW9kZSAhPT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIgXFxcXGxlZnQgKFwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcoJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKHApO1xuICAgICAgaWYgKCFvbWl0UGFyZW5zKSB7XG4gICAgICAgIGlmIChzaWduX29mX3Rlcm0ocCkgPT09ICctJyB8fCBwcmludE1vZGUgIT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiIFxcXFxyaWdodCApIFwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfSBlbHNlIGlmIChpc2FkZChwKSkge1xuICAgICAgaWYgKCFvbWl0UGFyZW5zKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgfVxuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihwKTtcbiAgICAgIGlmICghb21pdFBhcmVucykge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoJyknKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG4gICAgaWYgKGNhcihwKSA9PT0gc3ltYm9sKFBPV0VSKSkge1xuICAgICAgYmFzZSA9IGNhZHIocCk7XG4gICAgICBleHBvbmVudCA9IGNhZGRyKHApO1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfcG93ZXIoYmFzZSwgZXhwb25lbnQpO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cbiAgICAvLyAgaWYgKGNhcihwKSA9PSBfbGlzdCkge1xuICAgIC8vICAgIHByaW50X3N0cihcIntcIilcbiAgICAvLyAgICBwID0gY2RyKHApXG4gICAgLy8gICAgaWYgKGlzY29ucyhwKSkge1xuICAgIC8vICAgICAgcHJpbnRfZXhwcihjYXIocCkpXG4gICAgLy8gICAgICBwID0gY2RyKHApXG4gICAgLy8gICAgfVxuICAgIC8vICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAvLyAgICAgIHByaW50X3N0cihcIixcIilcbiAgICAvLyAgICAgIHByaW50X2V4cHIoY2FyKHApKVxuICAgIC8vICAgICAgcCA9IGNkcihwKVxuICAgIC8vICAgIH1cbiAgICAvLyAgICBwcmludF9zdHIoXCJ9XCIpXG4gICAgLy8gICAgcmV0dXJuXG4gICAgLy8gIH1cbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woRlVOQ1RJT04pKSB7XG4gICAgICBmYm9keSA9IGNhZHIocCk7XG4gICAgICBpZiAoIWNvZGVHZW4pIHtcbiAgICAgICAgcGFyYW1ldGVycyA9IGNhZGRyKHApO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJmdW5jdGlvbiBcIik7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZW1pdHRlZFN0cmluZyBmcm9tIHByaW50X2ZhY3RvciBcIiArIHN0cmluZ3NFbWl0dGVkQnlVc2VyUHJpbnRvdXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5lZCA9IHByaW50X2xpc3QocGFyYW1ldGVycyk7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHJldHVybmVkO1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIgLT4gXCIpO1xuICAgICAgfVxuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihmYm9keSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChQQVRURVJOKSkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWFkcihwKSk7XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiIFxcXFxyaWdodGFycm93IFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9IVU1BTiAmJiAhdGVzdF9mbGFnKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiIC0+IFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCItPlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYXIoY2RyKGNhZHIocCkpKSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChJTkRFWCkgJiYgaXNzeW1ib2woY2FkcihwKSkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2luZGV4X2Z1bmN0aW9uKHApO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woRkFDVE9SSUFMKSkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZmFjdG9yaWFsX2Z1bmN0aW9uKHApO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woQUJTKSAmJiBwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfQUJTX2xhdGV4KHApO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woU1FSVCkgJiYgcHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgIC8vZGVidWdnZXJcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1NRUlRfbGF0ZXgocCk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfSBlbHNlIGlmIChjYXIocCkgPT09IHN5bWJvbChUUkFOU1BPU0UpKSB7XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfVFJBTlNQT1NFX2xhdGV4KHApO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9IGVsc2UgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfVFJBTlNQT1NFX2NvZGVnZW4ocCk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhcihwKSA9PT0gc3ltYm9sKFVOSVQpKSB7XG4gICAgICBpZiAoY29kZUdlbikge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9VTklUX2NvZGVnZW4ocCk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhcihwKSA9PT0gc3ltYm9sKElOVikpIHtcbiAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9JTlZfbGF0ZXgocCk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH0gZWxzZSBpZiAoY29kZUdlbikge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9JTlZfY29kZWdlbihwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woQklOT01JQUwpICYmIHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludF9CSU5PTUlBTF9sYXRleChwKTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9IGVsc2UgaWYgKGNhcihwKSA9PT0gc3ltYm9sKERFRklOVCkgJiYgcHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X0RFRklOVF9sYXRleChwKTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9IGVsc2UgaWYgKGlzaW5uZXJvcmRvdChwKSkge1xuICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X0RPVF9sYXRleChwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfSBlbHNlIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X0RPVF9jb2RlZ2VuKHApO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYXIocCkgPT09IHN5bWJvbChTSU4pKSB7XG4gICAgICBpZiAoY29kZUdlbikge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9TSU5fY29kZWdlbihwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woQ09TKSkge1xuICAgICAgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfQ09TX2NvZGVnZW4ocCk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhcihwKSA9PT0gc3ltYm9sKFRBTikpIHtcbiAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1RBTl9jb2RlZ2VuKHApO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYXIocCkgPT09IHN5bWJvbChBUkNTSU4pKSB7XG4gICAgICBpZiAoY29kZUdlbikge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9BUkNTSU5fY29kZWdlbihwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woQVJDQ09TKSkge1xuICAgICAgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfQVJDQ09TX2NvZGVnZW4ocCk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhcihwKSA9PT0gc3ltYm9sKEFSQ1RBTikpIHtcbiAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X0FSQ1RBTl9jb2RlZ2VuKHApO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYXIocCkgPT09IHN5bWJvbChTVU0pKSB7XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfU1VNX2xhdGV4KHApO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9IGVsc2UgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfU1VNX2NvZGVnZW4ocCk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICAvL2Vsc2UgaWYgY2FyKHApID09IHN5bWJvbChRVU9URSlcbiAgICAvLyAgaWYgcHJpbnRNb2RlID09IFBSSU5UTU9ERV9MQVRFWFxuICAgIC8vICAgIHByaW50X2V4cHIoY2FkcihwKSlcbiAgICAvLyAgICByZXR1cm4gYWNjdW11bGF0b3JcbiAgICB9IGVsc2UgaWYgKGNhcihwKSA9PT0gc3ltYm9sKFBST0RVQ1QpKSB7XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfUFJPRFVDVF9sYXRleChwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfSBlbHNlIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1BST0RVQ1RfY29kZWdlbihwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woRk9SKSkge1xuICAgICAgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfRk9SX2NvZGVnZW4ocCk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhcihwKSA9PT0gc3ltYm9sKERPKSkge1xuICAgICAgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfRE9fY29kZWdlbihwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woVEVTVCkpIHtcbiAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1RFU1RfY29kZWdlbihwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1RFU1RfbGF0ZXgocCk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNhcihwKSA9PT0gc3ltYm9sKFRFU1RMVCkpIHtcbiAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IFwiKChcIiArIHByaW50X2V4cHIoY2FkcihwKSkgKyBcIikgPCAoXCIgKyBwcmludF9leHByKGNhZGRyKHApKSArIFwiKSlcIjtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1RFU1RMVF9sYXRleChwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woVEVTVExFKSkge1xuICAgICAgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gXCIoKFwiICsgcHJpbnRfZXhwcihjYWRyKHApKSArIFwiKSA8PSAoXCIgKyBwcmludF9leHByKGNhZGRyKHApKSArIFwiKSlcIjtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1RFU1RMRV9sYXRleChwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woVEVTVEdUKSkge1xuICAgICAgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gXCIoKFwiICsgcHJpbnRfZXhwcihjYWRyKHApKSArIFwiKSA+IChcIiArIHByaW50X2V4cHIoY2FkZHIocCkpICsgXCIpKVwiO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfVEVTVEdUX2xhdGV4KHApO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYXIocCkgPT09IHN5bWJvbChURVNUR0UpKSB7XG4gICAgICBpZiAoY29kZUdlbikge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBcIigoXCIgKyBwcmludF9leHByKGNhZHIocCkpICsgXCIpID49IChcIiArIHByaW50X2V4cHIoY2FkZHIocCkpICsgXCIpKVwiO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfVEVTVEdFX2xhdGV4KHApO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYXIocCkgPT09IHN5bWJvbChURVNURVEpKSB7XG4gICAgICBpZiAoY29kZUdlbikge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBcIigoXCIgKyBwcmludF9leHByKGNhZHIocCkpICsgXCIpID09PSAoXCIgKyBwcmludF9leHByKGNhZGRyKHApKSArIFwiKSlcIjtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0xBVEVYKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1RFU1RFUV9sYXRleChwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woRkxPT1IpKSB7XG4gICAgICBpZiAoY29kZUdlbikge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBcIk1hdGguZmxvb3IoXCIgKyBwcmludF9leHByKGNhZHIocCkpICsgXCIpXCI7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBcIiBcXFxcbGZsb29yIHtcIiArIHByaW50X2V4cHIoY2FkcihwKSkgKyBcIn0gXFxcXHJmbG9vciBcIjtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woQ0VJTElORykpIHtcbiAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IFwiTWF0aC5jZWlsaW5nKFwiICsgcHJpbnRfZXhwcihjYWRyKHApKSArIFwiKVwiO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgICBpZiAocHJpbnRNb2RlID09PSBQUklOVE1PREVfTEFURVgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gXCIgXFxcXGxjZWlsIHtcIiArIHByaW50X2V4cHIoY2FkcihwKSkgKyBcIn0gXFxcXHJjZWlsIFwiO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYXIocCkgPT09IHN5bWJvbChST1VORCkpIHtcbiAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IFwiTWF0aC5yb3VuZChcIiArIHByaW50X2V4cHIoY2FkcihwKSkgKyBcIilcIjtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2FyKHApID09PSBzeW1ib2woU0VUUSkpIHtcbiAgICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X1NFVFFfY29kZWdlbihwKTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRyKHApKTtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiPVwiKTtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZXhwcihjYWRkcihwKSk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzY29ucyhwKSkge1xuICAgICAgLy9pZiAoY2FyKHApID09IHN5bWJvbChGT1JNQUwpICYmIGNhZHIocCktPmsgPT0gU1lNKSB7XG4gICAgICAvLyAgcHJpbnRfc3RyKCgoc3RydWN0IHN5bWJvbCAqKSBjYWRyKHApKS0+bmFtZSlcbiAgICAgIC8vICByZXR1cm5cbiAgICAgIC8vfVxuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfZmFjdG9yKGNhcihwKSk7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgaWYgKCFvbWl0UGFyZW5zKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cignKCcpO1xuICAgICAgfVxuICAgICAgaWYgKGlzY29ucyhwKSkge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9leHByKGNhcihwKSk7XG4gICAgICAgIHAgPSBjZHIocCk7XG4gICAgICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCIsXCIpO1xuICAgICAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2V4cHIoY2FyKHApKTtcbiAgICAgICAgICBwID0gY2RyKHApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIW9taXRQYXJlbnMpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKCcpJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuICAgIGlmIChwID09PSBzeW1ib2woREVSSVZBVElWRSkpIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X2NoYXIoJ2QnKTtcbiAgICB9IGVsc2UgaWYgKHAgPT09IHN5bWJvbChFKSkge1xuICAgICAgaWYgKGNvZGVHZW4pIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiTWF0aC5FXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiZVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHAgPT09IHN5bWJvbChQSSkpIHtcbiAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJcXFxccGlcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9zdHIoXCJwaVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKGdldF9wcmludG5hbWUocCkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRfbGlzdCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIHN3aXRjaCAocC5rKSB7XG4gICAgICBjYXNlIENPTlM6XG4gICAgICAgIGFjY3VtdWxhdG9yICs9ICcoJztcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfbGlzdChjYXIocCkpO1xuICAgICAgICBpZiAocCA9PT0gY2RyKHApICYmIHAgIT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJvaCBubyByZWN1cnNpdmUhXCIpO1xuICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICB9XG4gICAgICAgIHAgPSBjZHIocCk7XG4gICAgICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBcIiBcIjtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9saXN0KGNhcihwKSk7XG4gICAgICAgICAgcCA9IGNkcihwKTtcbiAgICAgICAgICBpZiAocCA9PT0gY2RyKHApICYmIHAgIT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9oIG5vIHJlY3Vyc2l2ZSFcIik7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHAgIT09IHN5bWJvbChOSUwpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgKz0gXCIgLiBcIjtcbiAgICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludF9saXN0KHApO1xuICAgICAgICB9XG4gICAgICAgIGFjY3VtdWxhdG9yICs9ICcpJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNUUjpcbiAgICAgICAgLy9wcmludF9zdHIoXCJcXFwiXCIpXG4gICAgICAgIGFjY3VtdWxhdG9yICs9IHAuc3RyO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vcHJpbnRfc3RyKFwiXFxcIlwiKVxuICAgICAgY2FzZSBOVU06XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfbnVtYmVyKHAsIHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1lNOlxuICAgICAgICBhY2N1bXVsYXRvciArPSBnZXRfcHJpbnRuYW1lKHApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IFwiPHRlbnNvcj5cIjtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9O1xuXG4gIHByaW50X211bHRpcGx5X3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0hVTUFOICYmICF0ZXN0X2ZsYWcpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRfc3RyKFwiIFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByaW50TW9kZSA9PT0gUFJJTlRNT0RFX0hVTUFOICYmICF0ZXN0X2ZsYWcgJiYgIWNvZGVHZW4pIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIiBcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY3VtdWxhdG9yICs9IHByaW50X3N0cihcIipcIik7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBpc19kZW5vbWluYXRvciA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woUE9XRVIpICYmIGNhZHIocCkgIT09IHN5bWJvbChFKSAmJiBpc25lZ2F0aXZldGVybShjYWRkcihwKSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH07XG5cbiAgLy8gZG9uJ3QgY29uc2lkZXIgdGhlIGxlYWRpbmcgZnJhY3Rpb25cbiAgLy8gd2Ugd2FudCAyLzMqYSpiKmMgaW5zdGVhZCBvZiAyKmEqYipjLzNcbiAgYW55X2Rlbm9taW5hdG9ycyA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgcTtcbiAgICBwID0gY2RyKHApO1xuICAgIC8vICBpZiAoaXNmcmFjdGlvbihjYXIocCkpKVxuICAgIC8vICAgIHJldHVybiAxXG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgcSA9IGNhcihwKTtcbiAgICAgIGlmIChpc19kZW5vbWluYXRvcihxKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHAgPSBjZHIocCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIC8qXG5cbiAgUHJpbnRzIGluIFwiMmRcIiwgZS5nLiBpbnN0ZWFkIG9mIDEvKHgrMSleMiA6XG5cbiAgICAgICAgMVxuICAgLS0tLS0tLS0tLVxuICAgICAgICAgICAyXG4gICAgKDEgKyB4KVxuXG4gICBOb3RlIHRoYXQgYWx0aG91Z2ggdGhpcyBsb29rcyBtb3JlIG5hdHVyYWwsIGEpIGl0J3Mgbm90IHBhcnNhYmxlIGFuZFxuICAgYikgaXQgY2FuIGJlIG9jY2FzaW9uYWxseSBiZSBhbWJpZ3VvdXMsIHN1Y2ggYXM6XG5cbiAgICAgMVxuICAgLS0tLVxuICAgICAyXG4gICB4XG5cbiAgaXMgMS94XjIgYnV0IGl0IGFsc28gbG9va3MgYSBsaXR0bGUgbGlrZSB4XigxLzIpXG5cbiAgKi9cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBFeGFtcGxlczpcblxuICAvLyAgICAgMDEyMzQ1Njc4XG4gIC8vICAtMiAuLi4uLi4uLi5cbiAgLy8gIC0xIC4uLi4uLi4uLlxuICAvLyAgIDAgLi5oZWxsby4uICB4PTIsIHk9MCwgaD0xLCB3PTVcbiAgLy8gICAxIC4uLi4uLi4uLlxuICAvLyAgIDIgLi4uLi4uLi4uXG5cbiAgLy8gICAgIDAxMjM0NTY3OFxuICAvLyAgLTIgLi4uLi4uLi4uXG4gIC8vICAtMSAuLjM1NS4uLi5cbiAgLy8gICAwIC4uLS0tLi4uLiAgeD0yLCB5PS0xLCBoPTMsIHc9M1xuICAvLyAgIDEgLi4xMTMuLi4uXG4gIC8vICAgMiAuLi4uLi4uLi5cblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFlNQVggPSAxMDAwMDtcblxuICBnbHlwaCA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBnbHlwaCB7fTtcblxuICAgIGdseXBoLnByb3RvdHlwZS5jID0gMDtcblxuICAgIGdseXBoLnByb3RvdHlwZS54ID0gMDtcblxuICAgIGdseXBoLnByb3RvdHlwZS55ID0gMDtcblxuICAgIHJldHVybiBnbHlwaDtcblxuICB9KS5jYWxsKHRoaXMpO1xuXG4gIC8vIHdpbGwgY29udGFpbiBnbHlwaHNcbiAgY2hhcnRhYiA9IFtdO1xuXG4gIGZvciAoY2hhclRhYkluZGV4ID0gaTEgPSAwLCByZWYxID0gWU1BWDsgKDAgPD0gcmVmMSA/IGkxIDwgcmVmMSA6IGkxID4gcmVmMSk7IGNoYXJUYWJJbmRleCA9IDAgPD0gcmVmMSA/ICsraTEgOiAtLWkxKSB7XG4gICAgY2hhcnRhYltjaGFyVGFiSW5kZXhdID0gbmV3IGdseXBoKCk7XG4gIH1cblxuICB5aW5kZXggPSAwO1xuXG4gIGxldmVsID0gMDtcblxuICBlbWl0X3ggPSAwO1xuXG4gIGV4cHJfbGV2ZWwgPSAwO1xuXG4gIGRpc3BsYXlfZmxhZyA9IDA7XG5cbiAgLy8gdGhpcyBpcyBub3QgcmVhbGx5IHRoZSB0cmFuc2xhdGVkIHZlcnNpb24sXG4gIC8vIHRoZSBvcmlnaW5hbCBpcyBpbiB3aW5kb3cuY3BwIGFuZCBpc1xuICAvLyByYXRoZXIgbW9yZSBjb21wbGV4XG4gIHByaW50Y2hhcl9ub3dyYXAgPSBmdW5jdGlvbihjaGFyYWN0ZXIpIHtcbiAgICB2YXIgYWNjdW11bGF0b3I7XG4gICAgYWNjdW11bGF0b3IgPSBcIlwiO1xuICAgIGFjY3VtdWxhdG9yICs9IGNoYXJhY3RlcjtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH07XG5cbiAgcHJpbnRjaGFyID0gZnVuY3Rpb24oY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIHByaW50Y2hhcl9ub3dyYXAoY2hhcmFjdGVyKTtcbiAgfTtcblxuICBwcmludDJkYXNjaWkgPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGJlZW5QcmludGVkLCBoLCB3LCB5O1xuICAgIGggPSAwO1xuICAgIHcgPSAwO1xuICAgIHkgPSAwO1xuICAgIHNhdmUoKTtcbiAgICB5aW5kZXggPSAwO1xuICAgIGxldmVsID0gMDtcbiAgICBlbWl0X3ggPSAwO1xuICAgIGVtaXRfdG9wX2V4cHIocCk7XG4gICAgLy8gaWYgdG9vIHdpZGUgdGhlbiBwcmludCBmbGF0XG4gICAgW2gsIHcsIHldID0gZ2V0X3NpemUoMCwgeWluZGV4KTtcbiAgICBpZiAodyA+IDEwMCkge1xuICAgICAgcHJpbnRsaW5lKHApO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBiZWVuUHJpbnRlZCA9IHByaW50X2dseXBocygpO1xuICAgIHJlc3RvcmUoKTtcbiAgICByZXR1cm4gYmVlblByaW50ZWQ7XG4gIH07XG5cbiAgZW1pdF90b3BfZXhwciA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woU0VUUSkpIHtcbiAgICAgIGVtaXRfZXhwcihjYWRyKHApKTtcbiAgICAgIF9fZW1pdF9zdHIoXCIgPSBcIik7XG4gICAgICBlbWl0X2V4cHIoY2FkZHIocCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXN0ZW5zb3IocCkpIHtcbiAgICAgIHJldHVybiBlbWl0X3RlbnNvcihwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVtaXRfZXhwcihwKTtcbiAgICB9XG4gIH07XG5cbiAgd2lsbF9iZV9kaXNwbGF5ZWRfYXNfZnJhY3Rpb24gPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGxldmVsID4gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChpc2ZyYWN0aW9uKHApKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGNhcihwKSAhPT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChpc2ZyYWN0aW9uKGNhZHIocCkpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgaWYgKGlzZGVub21pbmF0b3IoY2FyKHApKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHAgPSBjZHIocCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIGVtaXRfZXhwciA9IGZ1bmN0aW9uKHApIHtcbiAgICAvLyAgaWYgKGxldmVsID4gMCkge1xuICAgIC8vICAgIHByaW50ZXhwcihwKVxuICAgIC8vICAgIHJldHVyblxuICAgIC8vICB9XG4gICAgZXhwcl9sZXZlbCsrO1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgaWYgKF9faXNfbmVnYXRpdmUoY2FyKHApKSkge1xuICAgICAgICBfX2VtaXRfY2hhcignLScpO1xuICAgICAgICBpZiAod2lsbF9iZV9kaXNwbGF5ZWRfYXNfZnJhY3Rpb24oY2FyKHApKSkge1xuICAgICAgICAgIF9fZW1pdF9jaGFyKCcgJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVtaXRfdGVybShjYXIocCkpO1xuICAgICAgcCA9IGNkcihwKTtcbiAgICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgICAgaWYgKF9faXNfbmVnYXRpdmUoY2FyKHApKSkge1xuICAgICAgICAgIF9fZW1pdF9jaGFyKCcgJyk7XG4gICAgICAgICAgX19lbWl0X2NoYXIoJy0nKTtcbiAgICAgICAgICBfX2VtaXRfY2hhcignICcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9fZW1pdF9jaGFyKCcgJyk7XG4gICAgICAgICAgX19lbWl0X2NoYXIoJysnKTtcbiAgICAgICAgICBfX2VtaXRfY2hhcignICcpO1xuICAgICAgICB9XG4gICAgICAgIGVtaXRfdGVybShjYXIocCkpO1xuICAgICAgICBwID0gY2RyKHApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoX19pc19uZWdhdGl2ZShwKSkge1xuICAgICAgICBfX2VtaXRfY2hhcignLScpO1xuICAgICAgICBpZiAod2lsbF9iZV9kaXNwbGF5ZWRfYXNfZnJhY3Rpb24ocCkpIHtcbiAgICAgICAgICBfX2VtaXRfY2hhcignICcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbWl0X3Rlcm0ocCk7XG4gICAgfVxuICAgIHJldHVybiBleHByX2xldmVsLS07XG4gIH07XG5cbiAgZW1pdF91bnNpZ25lZF9leHByID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgLy8gICAgaWYgKF9faXNfbmVnYXRpdmUoY2FyKHApKSlcbiAgICAgIC8vICAgICAgX19lbWl0X2NoYXIoJy0nKVxuICAgICAgZW1pdF90ZXJtKGNhcihwKSk7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBpZiAoX19pc19uZWdhdGl2ZShjYXIocCkpKSB7XG4gICAgICAgICAgX19lbWl0X2NoYXIoJyAnKTtcbiAgICAgICAgICBfX2VtaXRfY2hhcignLScpO1xuICAgICAgICAgIF9fZW1pdF9jaGFyKCcgJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX19lbWl0X2NoYXIoJyAnKTtcbiAgICAgICAgICBfX2VtaXRfY2hhcignKycpO1xuICAgICAgICAgIF9fZW1pdF9jaGFyKCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgZW1pdF90ZXJtKGNhcihwKSk7XG4gICAgICAgIHJlc3VsdHMucHVzaChwID0gY2RyKHApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAgICBpZiAoX19pc19uZWdhdGl2ZShwKSlcbiAgICAgIC8vICAgICAgX19lbWl0X2NoYXIoJy0nKVxuICAgICAgcmV0dXJuIGVtaXRfdGVybShwKTtcbiAgICB9XG4gIH07XG5cbiAgX19pc19uZWdhdGl2ZSA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoaXNuZWdhdGl2ZW51bWJlcihwKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgaXNuZWdhdGl2ZW51bWJlcihjYWRyKHApKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIGVtaXRfdGVybSA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgbjtcbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBuID0gY291bnRfZGVub21pbmF0b3JzKHApO1xuICAgICAgaWYgKG4gJiYgbGV2ZWwgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGVtaXRfZnJhY3Rpb24ocCwgbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZW1pdF9tdWx0aXBseShwLCBuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVtaXRfZmFjdG9yKHApO1xuICAgIH1cbiAgfTtcblxuICBpc2Rlbm9taW5hdG9yID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChQT1dFUikgJiYgY2FkcihwKSAhPT0gc3ltYm9sKEUpICYmIF9faXNfbmVnYXRpdmUoY2FkZHIocCkpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIGNvdW50X2Rlbm9taW5hdG9ycyA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgY291bnQsIHE7XG4gICAgY291bnQgPSAwO1xuICAgIHAgPSBjZHIocCk7XG4gICAgLy8gIGlmIChpc2ZyYWN0aW9uKGNhcihwKSkpIHtcbiAgICAvLyAgICBjb3VudCsrXG4gICAgLy8gICAgcCA9IGNkcihwKVxuICAgIC8vICB9XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgcSA9IGNhcihwKTtcbiAgICAgIGlmIChpc2Rlbm9taW5hdG9yKHEpKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgICBwID0gY2RyKHApO1xuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG4gIH07XG5cbiAgLy8gbiBpcyB0aGUgbnVtYmVyIG9mIGRlbm9taW5hdG9ycywgbm90IGNvdW50aW5nIGEgZnJhY3Rpb24gbGlrZSAxLzJcbiAgZW1pdF9tdWx0aXBseSA9IGZ1bmN0aW9uKHAsIG4pIHtcbiAgICB2YXIgcmVzdWx0cztcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgcCA9IGNkcihwKTtcbiAgICAgIGlmIChpc3BsdXNvbmUoY2FyKHApKSB8fCBpc21pbnVzb25lKGNhcihwKSkpIHtcbiAgICAgICAgcCA9IGNkcihwKTtcbiAgICAgIH1cbiAgICAgIGVtaXRfZmFjdG9yKGNhcihwKSk7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBfX2VtaXRfY2hhcignICcpO1xuICAgICAgICBlbWl0X2ZhY3RvcihjYXIocCkpO1xuICAgICAgICByZXN1bHRzLnB1c2gocCA9IGNkcihwKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdF9udW1lcmF0b3JzKHApO1xuICAgICAgX19lbWl0X2NoYXIoJy8nKTtcbiAgICAgIC8vIG5lZWQgZ3JvdXBpbmcgaWYgbW9yZSB0aGFuIG9uZSBkZW5vbWluYXRvclxuICAgICAgaWYgKG4gPiAxIHx8IGlzZnJhY3Rpb24oY2FkcihwKSkpIHtcbiAgICAgICAgX19lbWl0X2NoYXIoJygnKTtcbiAgICAgICAgZW1pdF9kZW5vbWluYXRvcnMocCk7XG4gICAgICAgIHJldHVybiBfX2VtaXRfY2hhcignKScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVtaXRfZGVub21pbmF0b3JzKHApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvL2RlZmluZSBBIHAzXG4gIC8vZGVmaW5lIEIgcDRcblxuICAvLyBzaWduIG9mIHRlcm0gaGFzIGFscmVhZHkgYmVlbiBlbWl0dGVkXG4gIGVtaXRfZnJhY3Rpb24gPSBmdW5jdGlvbihwLCBkKSB7XG4gICAgdmFyIGNvdW50LCBkb05vdGhpbmcsIGsxLCBrMiwgbiwgeDtcbiAgICBjb3VudCA9IDA7XG4gICAgazEgPSAwO1xuICAgIGsyID0gMDtcbiAgICBuID0gMDtcbiAgICB4ID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDMgPSBvbmU7XG4gICAgcDQgPSBvbmU7XG4gICAgaWYgKGlzcmF0aW9uYWwoY2FkcihwKSkpIHtcbiAgICAgIHB1c2goY2FkcihwKSk7XG4gICAgICBtcF9udW1lcmF0b3IoKTtcbiAgICAgIGFic3ZhbCgpO1xuICAgICAgcDMgPSBwb3AoKTtcbiAgICAgIHB1c2goY2FkcihwKSk7XG4gICAgICBtcF9kZW5vbWluYXRvcigpO1xuICAgICAgcDQgPSBwb3AoKTsgLy8gcDQgaXMgQlxuICAgIH1cbiAgICBpZiAoaXNkb3VibGUoY2FkcihwKSkpIHtcbiAgICAgIHB1c2goY2FkcihwKSk7XG4gICAgICBhYnN2YWwoKTtcbiAgICAgIHAzID0gcG9wKCk7IC8vIHAzIGlzIEFcbiAgICB9XG4gICAgXG4gICAgLy8gY291bnQgbnVtZXJhdG9yc1xuICAgIGlmIChpc3BsdXNvbmUocDMpKSB7IC8vIHAzIGlzIEFcbiAgICAgIG4gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBuID0gMTtcbiAgICB9XG4gICAgcDEgPSBjZHIocCk7XG4gICAgaWYgKGlzTnVtZXJpY0F0b20oY2FyKHAxKSkpIHtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHAyID0gY2FyKHAxKTtcbiAgICAgIGlmIChpc2Rlbm9taW5hdG9yKHAyKSkge1xuICAgICAgICBkb05vdGhpbmcgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcDEgPSBjZHIocDEpO1xuICAgIH1cbiAgICAvLyBlbWl0IG51bWVyYXRvcnNcbiAgICB4ID0gZW1pdF94O1xuICAgIGsxID0geWluZGV4O1xuICAgIGNvdW50ID0gMDtcbiAgICBpZiAoIWlzcGx1c29uZShwMykpIHsgLy8gcDMgaXMgQVxuICAgICAgZW1pdF9udW1iZXIocDMsIDApO1xuICAgICAgY291bnQrKztcbiAgICB9XG4gICAgLy8gc2tpcCBvdmVyIFwibXVsdGlwbHlcIlxuICAgIHAxID0gY2RyKHApO1xuICAgIC8vIHNraXAgb3ZlciBudW1lcmljYWwgY29lZmZpY2llbnQsIGFscmVhZHkgaGFuZGxlZFxuICAgIGlmIChpc051bWVyaWNBdG9tKGNhcihwMSkpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgfVxuICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICBwMiA9IGNhcihwMSk7XG4gICAgICBpZiAoaXNkZW5vbWluYXRvcihwMikpIHtcbiAgICAgICAgZG9Ob3RoaW5nID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICBfX2VtaXRfY2hhcignICcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuID09PSAxKSB7XG4gICAgICAgICAgZW1pdF9leHByKHAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbWl0X2ZhY3RvcihwMik7XG4gICAgICAgIH1cbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICBfX2VtaXRfY2hhcignMScpO1xuICAgIH1cbiAgICAvLyBlbWl0IGRlbm9taW5hdG9yc1xuICAgIGsyID0geWluZGV4O1xuICAgIGNvdW50ID0gMDtcbiAgICBpZiAoIWlzcGx1c29uZShwNCkpIHsgLy8gcDQgaXMgQlxuICAgICAgZW1pdF9udW1iZXIocDQsIDApO1xuICAgICAgY291bnQrKztcbiAgICAgIGQrKztcbiAgICB9XG4gICAgcDEgPSBjZHIocCk7XG4gICAgaWYgKGlzcmF0aW9uYWwoY2FyKHAxKSkpIHtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgIHAyID0gY2FyKHAxKTtcbiAgICAgIGlmIChpc2Rlbm9taW5hdG9yKHAyKSkge1xuICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgX19lbWl0X2NoYXIoJyAnKTtcbiAgICAgICAgfVxuICAgICAgICBlbWl0X2Rlbm9taW5hdG9yKHAyLCBkKTtcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICB9XG4gICAgZml4dXBfZnJhY3Rpb24oeCwgazEsIGsyKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIHAgcG9pbnRzIHRvIGEgbXVsdGlwbHlcbiAgZW1pdF9udW1lcmF0b3JzID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBkb05vdGhpbmcsIG47XG4gICAgc2F2ZSgpO1xuICAgIG4gPSAwO1xuICAgIHAxID0gb25lO1xuICAgIHAgPSBjZHIocCk7XG4gICAgaWYgKGlzcmF0aW9uYWwoY2FyKHApKSkge1xuICAgICAgcHVzaChjYXIocCkpO1xuICAgICAgbXBfbnVtZXJhdG9yKCk7XG4gICAgICBhYnN2YWwoKTtcbiAgICAgIHAxID0gcG9wKCk7XG4gICAgICBwID0gY2RyKHApO1xuICAgIH0gZWxzZSBpZiAoaXNkb3VibGUoY2FyKHApKSkge1xuICAgICAgcHVzaChjYXIocCkpO1xuICAgICAgYWJzdmFsKCk7XG4gICAgICBwMSA9IHBvcCgpO1xuICAgICAgcCA9IGNkcihwKTtcbiAgICB9XG4gICAgbiA9IDA7XG4gICAgaWYgKCFpc3BsdXNvbmUocDEpKSB7XG4gICAgICBlbWl0X251bWJlcihwMSwgMCk7XG4gICAgICBuKys7XG4gICAgfVxuICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgIGlmIChpc2Rlbm9taW5hdG9yKGNhcihwKSkpIHtcbiAgICAgICAgZG9Ob3RoaW5nID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgIF9fZW1pdF9jaGFyKCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgZW1pdF9mYWN0b3IoY2FyKHApKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcCA9IGNkcihwKTtcbiAgICB9XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIF9fZW1pdF9jaGFyKCcxJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gcCBwb2ludHMgdG8gYSBtdWx0aXBseVxuICBlbWl0X2Rlbm9taW5hdG9ycyA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgbjtcbiAgICBzYXZlKCk7XG4gICAgbiA9IDA7XG4gICAgcCA9IGNkcihwKTtcbiAgICBpZiAoaXNmcmFjdGlvbihjYXIocCkpKSB7XG4gICAgICBwdXNoKGNhcihwKSk7XG4gICAgICBtcF9kZW5vbWluYXRvcigpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIGVtaXRfbnVtYmVyKHAxLCAwKTtcbiAgICAgIG4rKztcbiAgICAgIHAgPSBjZHIocCk7XG4gICAgfVxuICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgIGlmIChpc2Rlbm9taW5hdG9yKGNhcihwKSkpIHtcbiAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgX19lbWl0X2NoYXIoJyAnKTtcbiAgICAgICAgfVxuICAgICAgICBlbWl0X2Rlbm9taW5hdG9yKGNhcihwKSwgMCk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHAgPSBjZHIocCk7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgZW1pdF9mYWN0b3IgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGlzdGVuc29yKHApKSB7XG4gICAgICBpZiAobGV2ZWwgPT09IDApIHtcbiAgICAgICAgLy9lbWl0X3RlbnNvcihwKVxuICAgICAgICBlbWl0X2ZsYXRfdGVuc29yKHApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdF9mbGF0X3RlbnNvcihwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHApKSB7XG4gICAgICBlbWl0X251bWJlcihwLCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwKSA9PT0gc3ltYm9sKEFERCkgfHwgY2FyKHApID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBlbWl0X3N1YmV4cHIocCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgIGVtaXRfcG93ZXIocCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc2NvbnMocCkpIHtcbiAgICAgIC8vaWYgKGNhcihwKSA9PSBzeW1ib2woRk9STUFMKSAmJiBjYWRyKHApLmsgPT0gU1lNKVxuICAgICAgLy8gIGVtaXRfc3ltYm9sKGNhZHIocCkpXG4gICAgICAvL2Vsc2VcbiAgICAgIGVtaXRfZnVuY3Rpb24ocCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc051bWVyaWNBdG9tKHApKSB7XG4gICAgICBpZiAobGV2ZWwgPT09IDApIHtcbiAgICAgICAgZW1pdF9udW1lcmljYWxfZnJhY3Rpb24ocCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0X251bWJlcihwLCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzc3ltYm9sKHApKSB7XG4gICAgICBlbWl0X3N5bWJvbChwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzc3RyKHApKSB7XG4gICAgICBlbWl0X3N0cmluZyhwKTtcbiAgICB9XG4gIH07XG5cbiAgZW1pdF9udW1lcmljYWxfZnJhY3Rpb24gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGsxLCBrMiwgeDtcbiAgICBrMSA9IDA7XG4gICAgazIgPSAwO1xuICAgIHggPSAwO1xuICAgIHNhdmUoKTtcbiAgICBwdXNoKHApO1xuICAgIG1wX251bWVyYXRvcigpO1xuICAgIGFic3ZhbCgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgcHVzaChwKTtcbiAgICBtcF9kZW5vbWluYXRvcigpO1xuICAgIHA0ID0gcG9wKCk7XG4gICAgaWYgKGlzcGx1c29uZShwNCkpIHsgLy8gcDQgaXMgQlxuICAgICAgZW1pdF9udW1iZXIocDMsIDApO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB4ID0gZW1pdF94O1xuICAgIGsxID0geWluZGV4O1xuICAgIGVtaXRfbnVtYmVyKHAzLCAwKTtcbiAgICBrMiA9IHlpbmRleDtcbiAgICBlbWl0X251bWJlcihwNCwgMCk7IC8vIHA0IGlzIEJcbiAgICBmaXh1cF9mcmFjdGlvbih4LCBrMSwgazIpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8gaWYgaXQncyBhIGZhY3RvciB0aGVuIGl0IGRvZXNuJ3QgbmVlZCBwYXJlbnMgYXJvdW5kIGl0LCBpLmUuIDEvc2luKHRoZXRhKV4yXG4gIGlzZmFjdG9yID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChpc2NvbnMocCkgJiYgY2FyKHApICE9PSBzeW1ib2woQUREKSAmJiBjYXIocCkgIT09IHN5bWJvbChNVUxUSVBMWSkgJiYgY2FyKHApICE9PSBzeW1ib2woUE9XRVIpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGlzc3ltYm9sKHApKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGlzZnJhY3Rpb24ocCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoaXNuZWdhdGl2ZW51bWJlcihwKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChpc051bWVyaWNBdG9tKHApKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgZW1pdF9wb3dlciA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgazEsIGsyLCB4O1xuICAgIGsxID0gMDtcbiAgICBrMiA9IDA7XG4gICAgeCA9IDA7XG4gICAgaWYgKGNhZHIocCkgPT09IHN5bWJvbChFKSkge1xuICAgICAgX19lbWl0X3N0cihcImV4cChcIik7XG4gICAgICBlbWl0X2V4cHIoY2FkZHIocCkpO1xuICAgICAgX19lbWl0X2NoYXIoJyknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGxldmVsID4gMCkge1xuICAgICAgaWYgKGlzbWludXNvbmUoY2FkZHIocCkpKSB7XG4gICAgICAgIF9fZW1pdF9jaGFyKCcxJyk7XG4gICAgICAgIF9fZW1pdF9jaGFyKCcvJyk7XG4gICAgICAgIGlmIChpc2ZhY3RvcihjYWRyKHApKSkge1xuICAgICAgICAgIGVtaXRfZmFjdG9yKGNhZHIocCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVtaXRfc3ViZXhwcihjYWRyKHApKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzZmFjdG9yKGNhZHIocCkpKSB7XG4gICAgICAgICAgZW1pdF9mYWN0b3IoY2FkcihwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW1pdF9zdWJleHByKGNhZHIocCkpO1xuICAgICAgICB9XG4gICAgICAgIF9fZW1pdF9jaGFyKCdeJyk7XG4gICAgICAgIGlmIChpc2ZhY3RvcihjYWRkcihwKSkpIHtcbiAgICAgICAgICBlbWl0X2ZhY3RvcihjYWRkcihwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW1pdF9zdWJleHByKGNhZGRyKHApKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzcGVjaWFsIGNhc2U6IDEgb3ZlciBzb21ldGhpbmdcbiAgICBpZiAoX19pc19uZWdhdGl2ZShjYWRkcihwKSkpIHtcbiAgICAgIHggPSBlbWl0X3g7XG4gICAgICBrMSA9IHlpbmRleDtcbiAgICAgIF9fZW1pdF9jaGFyKCcxJyk7XG4gICAgICBrMiA9IHlpbmRleDtcbiAgICAgIC8vbGV2ZWwrK1xuICAgICAgZW1pdF9kZW5vbWluYXRvcihwLCAxKTtcbiAgICAgIC8vbGV2ZWwtLVxuICAgICAgZml4dXBfZnJhY3Rpb24oeCwgazEsIGsyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgazEgPSB5aW5kZXg7XG4gICAgaWYgKGlzZmFjdG9yKGNhZHIocCkpKSB7XG4gICAgICBlbWl0X2ZhY3RvcihjYWRyKHApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdF9zdWJleHByKGNhZHIocCkpO1xuICAgIH1cbiAgICBrMiA9IHlpbmRleDtcbiAgICBsZXZlbCsrO1xuICAgIGVtaXRfZXhwcihjYWRkcihwKSk7XG4gICAgbGV2ZWwtLTtcbiAgICByZXR1cm4gZml4dXBfcG93ZXIoazEsIGsyKTtcbiAgfTtcblxuICAvLyBpZiBuID09IDEgdGhlbiBlbWl0IGFzIGV4cHIgKG5vIHBhcmVucylcblxuICAvLyBwIGlzIGEgcG93ZXJcbiAgZW1pdF9kZW5vbWluYXRvciA9IGZ1bmN0aW9uKHAsIG4pIHtcbiAgICB2YXIgazEsIGsyO1xuICAgIGsxID0gMDtcbiAgICBrMiA9IDA7XG4gICAgLy8gc3BlY2lhbCBjYXNlOiAxIG92ZXIgc29tZXRoaW5nXG4gICAgaWYgKGlzbWludXNvbmUoY2FkZHIocCkpKSB7XG4gICAgICBpZiAobiA9PT0gMSkge1xuICAgICAgICBlbWl0X2V4cHIoY2FkcihwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0X2ZhY3RvcihjYWRyKHApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgazEgPSB5aW5kZXg7XG4gICAgLy8gZW1pdCBiYXNlXG4gICAgaWYgKGlzZmFjdG9yKGNhZHIocCkpKSB7XG4gICAgICBlbWl0X2ZhY3RvcihjYWRyKHApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdF9zdWJleHByKGNhZHIocCkpO1xuICAgIH1cbiAgICBrMiA9IHlpbmRleDtcbiAgICAvLyBlbWl0IGV4cG9uZW50LCBkb24ndCBlbWl0IG1pbnVzIHNpZ25cbiAgICBsZXZlbCsrO1xuICAgIGVtaXRfdW5zaWduZWRfZXhwcihjYWRkcihwKSk7XG4gICAgbGV2ZWwtLTtcbiAgICByZXR1cm4gZml4dXBfcG93ZXIoazEsIGsyKTtcbiAgfTtcblxuICBlbWl0X2Z1bmN0aW9uID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChJTkRFWCkgJiYgaXNzeW1ib2woY2FkcihwKSkpIHtcbiAgICAgIGVtaXRfaW5kZXhfZnVuY3Rpb24ocCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChGQUNUT1JJQUwpKSB7XG4gICAgICBlbWl0X2ZhY3RvcmlhbF9mdW5jdGlvbihwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhcihwKSA9PT0gc3ltYm9sKERFUklWQVRJVkUpKSB7XG4gICAgICBfX2VtaXRfY2hhcignZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbWl0X3N5bWJvbChjYXIocCkpO1xuICAgIH1cbiAgICBfX2VtaXRfY2hhcignKCcpO1xuICAgIHAgPSBjZHIocCk7XG4gICAgaWYgKGlzY29ucyhwKSkge1xuICAgICAgZW1pdF9leHByKGNhcihwKSk7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBfX2VtaXRfY2hhcignLCcpO1xuICAgICAgICAvL19fZW1pdF9jaGFyKCcgJylcbiAgICAgICAgZW1pdF9leHByKGNhcihwKSk7XG4gICAgICAgIHAgPSBjZHIocCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfX2VtaXRfY2hhcignKScpO1xuICB9O1xuXG4gIGVtaXRfaW5kZXhfZnVuY3Rpb24gPSBmdW5jdGlvbihwKSB7XG4gICAgcCA9IGNkcihwKTtcbiAgICBpZiAoY2FhcihwKSA9PT0gc3ltYm9sKEFERCkgfHwgY2FhcihwKSA9PT0gc3ltYm9sKE1VTFRJUExZKSB8fCBjYWFyKHApID09PSBzeW1ib2woUE9XRVIpIHx8IGNhYXIocCkgPT09IHN5bWJvbChGQUNUT1JJQUwpKSB7XG4gICAgICBlbWl0X3N1YmV4cHIoY2FyKHApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdF9leHByKGNhcihwKSk7XG4gICAgfVxuICAgIF9fZW1pdF9jaGFyKCdbJyk7XG4gICAgcCA9IGNkcihwKTtcbiAgICBpZiAoaXNjb25zKHApKSB7XG4gICAgICBlbWl0X2V4cHIoY2FyKHApKTtcbiAgICAgIHAgPSBjZHIocCk7XG4gICAgICB3aGlsZSAoaXNjb25zKHApKSB7XG4gICAgICAgIF9fZW1pdF9jaGFyKCcsJyk7XG4gICAgICAgIGVtaXRfZXhwcihjYXIocCkpO1xuICAgICAgICBwID0gY2RyKHApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX19lbWl0X2NoYXIoJ10nKTtcbiAgfTtcblxuICBlbWl0X2ZhY3RvcmlhbF9mdW5jdGlvbiA9IGZ1bmN0aW9uKHApIHtcbiAgICBwID0gY2FkcihwKTtcbiAgICBpZiAoaXNmcmFjdGlvbihwKSB8fCBjYXIocCkgPT09IHN5bWJvbChBREQpIHx8IGNhcihwKSA9PT0gc3ltYm9sKE1VTFRJUExZKSB8fCBjYXIocCkgPT09IHN5bWJvbChQT1dFUikgfHwgY2FyKHApID09PSBzeW1ib2woRkFDVE9SSUFMKSkge1xuICAgICAgZW1pdF9zdWJleHByKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbWl0X2V4cHIocCk7XG4gICAgfVxuICAgIHJldHVybiBfX2VtaXRfY2hhcignIScpO1xuICB9O1xuXG4gIGVtaXRfc3ViZXhwciA9IGZ1bmN0aW9uKHApIHtcbiAgICBfX2VtaXRfY2hhcignKCcpO1xuICAgIGVtaXRfZXhwcihwKTtcbiAgICByZXR1cm4gX19lbWl0X2NoYXIoJyknKTtcbiAgfTtcblxuICBlbWl0X3N5bWJvbCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgaSwgajEsIHBQcmludE5hbWUsIHJlZjIsIHJlc3VsdHM7XG4gICAgaSA9IDA7XG4gICAgaWYgKHAgPT09IHN5bWJvbChFKSkge1xuICAgICAgX19lbWl0X3N0cihcImV4cCgxKVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcFByaW50TmFtZSA9IGdldF9wcmludG5hbWUocCk7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IGoxID0gMCwgcmVmMiA9IHBQcmludE5hbWUubGVuZ3RoOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICByZXN1bHRzLnB1c2goX19lbWl0X2NoYXIocFByaW50TmFtZVtpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBlbWl0X3N0cmluZyA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgaSwgajEsIHBTdHJpbmcsIHJlZjI7XG4gICAgaSA9IDA7XG4gICAgcFN0cmluZyA9IHAuc3RyO1xuICAgIF9fZW1pdF9jaGFyKCdcIicpO1xuICAgIGZvciAoaSA9IGoxID0gMCwgcmVmMiA9IHBTdHJpbmcubGVuZ3RoOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBfX2VtaXRfY2hhcihwU3RyaW5nW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIF9fZW1pdF9jaGFyKCdcIicpO1xuICB9O1xuXG4gIGZpeHVwX2ZyYWN0aW9uID0gZnVuY3Rpb24oeCwgazEsIGsyKSB7XG4gICAgdmFyIGR4LCBkeSwgaDEsIGgyLCBpLCBqMSwgcmVmMiwgcmVzdWx0cywgdywgdzEsIHcyLCB5LCB5MSwgeTI7XG4gICAgZHggPSAwO1xuICAgIGR5ID0gMDtcbiAgICBpID0gMDtcbiAgICB3ID0gMDtcbiAgICB5ID0gMDtcbiAgICBoMSA9IDA7XG4gICAgdzEgPSAwO1xuICAgIHkxID0gMDtcbiAgICBoMiA9IDA7XG4gICAgdzIgPSAwO1xuICAgIHkyID0gMDtcbiAgICBbaDEsIHcxLCB5MV0gPSBnZXRfc2l6ZShrMSwgazIpO1xuICAgIFtoMiwgdzIsIHkyXSA9IGdldF9zaXplKGsyLCB5aW5kZXgpO1xuICAgIGlmICh3MiA+IHcxKSB7XG4gICAgICBkeCA9ICh3MiAtIHcxKSAvIDI7IC8vIHNoaWZ0IG51bWVyYXRvciByaWdodFxuICAgIH0gZWxzZSB7XG4gICAgICBkeCA9IDA7XG4gICAgfVxuICAgIGR4Kys7XG4gICAgLy8gdGhpcyBpcyBob3cgbXVjaCBpcyBiZWxvdyB0aGUgYmFzZWxpbmVcbiAgICB5ID0geTEgKyBoMSAtIDE7XG4gICAgZHkgPSAteSAtIDE7XG4gICAgbW92ZShrMSwgazIsIGR4LCBkeSk7XG4gICAgaWYgKHcyID4gdzEpIHtcbiAgICAgIGR4ID0gLXcxO1xuICAgIH0gZWxzZSB7XG4gICAgICBkeCA9IC13MSArICh3MSAtIHcyKSAvIDI7XG4gICAgfVxuICAgIGR4Kys7XG4gICAgZHkgPSAteTIgKyAxO1xuICAgIG1vdmUoazIsIHlpbmRleCwgZHgsIGR5KTtcbiAgICBpZiAodzIgPiB3MSkge1xuICAgICAgdyA9IHcyO1xuICAgIH0gZWxzZSB7XG4gICAgICB3ID0gdzE7XG4gICAgfVxuICAgIHcgKz0gMjtcbiAgICBlbWl0X3ggPSB4O1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGkgPSBqMSA9IDAsIHJlZjIgPSB3OyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICByZXN1bHRzLnB1c2goX19lbWl0X2NoYXIoJy0nKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIGZpeHVwX3Bvd2VyID0gZnVuY3Rpb24oazEsIGsyKSB7XG4gICAgdmFyIGR5LCBoMSwgaDIsIHcxLCB3MiwgeTEsIHkyO1xuICAgIGR5ID0gMDtcbiAgICBoMSA9IDA7XG4gICAgdzEgPSAwO1xuICAgIHkxID0gMDtcbiAgICBoMiA9IDA7XG4gICAgdzIgPSAwO1xuICAgIHkyID0gMDtcbiAgICBbaDEsIHcxLCB5MV0gPSBnZXRfc2l6ZShrMSwgazIpO1xuICAgIFtoMiwgdzIsIHkyXSA9IGdldF9zaXplKGsyLCB5aW5kZXgpO1xuICAgIC8vIG1vdmUgc3VwZXJzY3JpcHQgdG8gYmFzZWxpbmVcbiAgICBkeSA9IC15MiAtIGgyICsgMTtcbiAgICAvLyBub3cgbW92ZSBhYm92ZSBiYXNlXG4gICAgZHkgKz0geTEgLSAxO1xuICAgIHJldHVybiBtb3ZlKGsyLCB5aW5kZXgsIDAsIGR5KTtcbiAgfTtcblxuICBtb3ZlID0gZnVuY3Rpb24oaiwgaywgZHgsIGR5KSB7XG4gICAgdmFyIGksIGoxLCByZWYyLCByZWYzLCByZXN1bHRzO1xuICAgIGkgPSAwO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGkgPSBqMSA9IHJlZjIgPSBqLCByZWYzID0gazsgKHJlZjIgPD0gcmVmMyA/IGoxIDwgcmVmMyA6IGoxID4gcmVmMyk7IGkgPSByZWYyIDw9IHJlZjMgPyArK2oxIDogLS1qMSkge1xuICAgICAgY2hhcnRhYltpXS54ICs9IGR4O1xuICAgICAgcmVzdWx0cy5wdXNoKGNoYXJ0YWJbaV0ueSArPSBkeSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIGZpbmRzIHRoZSBib3VuZGluZyByZWN0YW5nbGUgYW5kIHZlcnRpY2FsIHBvc2l0aW9uXG4gIGdldF9zaXplID0gZnVuY3Rpb24oaiwgaykge1xuICAgIHZhciBoLCBpLCBqMSwgbWF4X3gsIG1heF95LCBtaW5feCwgbWluX3ksIHJlZjIsIHJlZjMsIHcsIHk7XG4gICAgaSA9IDA7XG4gICAgbWluX3ggPSBjaGFydGFiW2pdLng7XG4gICAgbWF4X3ggPSBjaGFydGFiW2pdLng7XG4gICAgbWluX3kgPSBjaGFydGFiW2pdLnk7XG4gICAgbWF4X3kgPSBjaGFydGFiW2pdLnk7XG4gICAgZm9yIChpID0gajEgPSByZWYyID0gaiArIDEsIHJlZjMgPSBrOyAocmVmMiA8PSByZWYzID8gajEgPCByZWYzIDogajEgPiByZWYzKTsgaSA9IHJlZjIgPD0gcmVmMyA/ICsrajEgOiAtLWoxKSB7XG4gICAgICBpZiAoY2hhcnRhYltpXS54IDwgbWluX3gpIHtcbiAgICAgICAgbWluX3ggPSBjaGFydGFiW2ldLng7XG4gICAgICB9XG4gICAgICBpZiAoY2hhcnRhYltpXS54ID4gbWF4X3gpIHtcbiAgICAgICAgbWF4X3ggPSBjaGFydGFiW2ldLng7XG4gICAgICB9XG4gICAgICBpZiAoY2hhcnRhYltpXS55IDwgbWluX3kpIHtcbiAgICAgICAgbWluX3kgPSBjaGFydGFiW2ldLnk7XG4gICAgICB9XG4gICAgICBpZiAoY2hhcnRhYltpXS55ID4gbWF4X3kpIHtcbiAgICAgICAgbWF4X3kgPSBjaGFydGFiW2ldLnk7XG4gICAgICB9XG4gICAgfVxuICAgIGggPSBtYXhfeSAtIG1pbl95ICsgMTtcbiAgICB3ID0gbWF4X3ggLSBtaW5feCArIDE7XG4gICAgeSA9IG1pbl95O1xuICAgIHJldHVybiBbaCwgdywgeV07XG4gIH07XG5cbiAgZGlzcGxheWNoYXIgPSBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuIF9fZW1pdF9jaGFyKGMpO1xuICB9O1xuXG4gIF9fZW1pdF9jaGFyID0gZnVuY3Rpb24oYykge1xuICAgIGlmICh5aW5kZXggPT09IFlNQVgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNoYXJ0YWJbeWluZGV4XSA9PSBudWxsKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgY2hhcnRhYlt5aW5kZXhdLmMgPSBjO1xuICAgIGNoYXJ0YWJbeWluZGV4XS54ID0gZW1pdF94O1xuICAgIGNoYXJ0YWJbeWluZGV4XS55ID0gMDtcbiAgICB5aW5kZXgrKztcbiAgICByZXR1cm4gZW1pdF94Kys7XG4gIH07XG5cbiAgX19lbWl0X3N0ciA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgaSwgajEsIHJlZjIsIHJlc3VsdHM7XG4gICAgaSA9IDA7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IGoxID0gMCwgcmVmMiA9IHMubGVuZ3RoOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICByZXN1bHRzLnB1c2goX19lbWl0X2NoYXIoc1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBlbWl0X251bWJlciA9IGZ1bmN0aW9uKHAsIGVtaXRfc2lnbikge1xuICAgIHZhciBpLCBqMSwgbDEsIG0xLCByZWYyLCByZWYzLCByZWY0LCByZXN1bHRzLCByZXN1bHRzMSwgdG1wU3RyaW5nO1xuICAgIHRtcFN0cmluZyA9IFwiXCI7XG4gICAgaSA9IDA7XG4gICAgc3dpdGNoIChwLmspIHtcbiAgICAgIGNhc2UgTlVNOlxuICAgICAgICB0bXBTdHJpbmcgPSBwLnEuYS50b1N0cmluZygpO1xuICAgICAgICBpZiAodG1wU3RyaW5nWzBdID09PSAnLScgJiYgZW1pdF9zaWduID09PSAwKSB7XG4gICAgICAgICAgdG1wU3RyaW5nID0gdG1wU3RyaW5nLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSBqMSA9IDAsIHJlZjIgPSB0bXBTdHJpbmcubGVuZ3RoOyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICAgICAgX19lbWl0X2NoYXIodG1wU3RyaW5nW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0bXBTdHJpbmcgPSBwLnEuYi50b1N0cmluZygpO1xuICAgICAgICBpZiAodG1wU3RyaW5nID09PSBcIjFcIikge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIF9fZW1pdF9jaGFyKCcvJyk7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gbDEgPSAwLCByZWYzID0gdG1wU3RyaW5nLmxlbmd0aDsgKDAgPD0gcmVmMyA/IGwxIDwgcmVmMyA6IGwxID4gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK2wxIDogLS1sMSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChfX2VtaXRfY2hhcih0bXBTdHJpbmdbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgICAgdG1wU3RyaW5nID0gZG91YmxlVG9SZWFzb25hYmxlU3RyaW5nKHAuZCk7XG4gICAgICAgIGlmICh0bXBTdHJpbmdbMF0gPT09ICctJyAmJiBlbWl0X3NpZ24gPT09IDApIHtcbiAgICAgICAgICB0bXBTdHJpbmcgPSB0bXBTdHJpbmcuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMxID0gW107XG4gICAgICAgIGZvciAoaSA9IG0xID0gMCwgcmVmNCA9IHRtcFN0cmluZy5sZW5ndGg7ICgwIDw9IHJlZjQgPyBtMSA8IHJlZjQgOiBtMSA+IHJlZjQpOyBpID0gMCA8PSByZWY0ID8gKyttMSA6IC0tbTEpIHtcbiAgICAgICAgICByZXN1bHRzMS5wdXNoKF9fZW1pdF9jaGFyKHRtcFN0cmluZ1tpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzMTtcbiAgICB9XG4gIH07XG5cbiAgLy8gYSBhbmQgYiBhcmUgZ2x5cGhzXG4gIGNtcEdseXBocyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBpZiAoYS55IDwgYi55KSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChhLnkgPiBiLnkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoYS54IDwgYi54KSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChhLnggPiBiLngpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBwcmludF9nbHlwaHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYWNjdW11bGF0b3IsIGksIGoxLCByZWYyLCBzdWJzZXRPZlN0YWNrLCB4LCB5O1xuICAgIGkgPSAwO1xuICAgIGFjY3VtdWxhdG9yID0gXCJcIjtcbiAgICBcbiAgICAvLyBub3cgc29ydCB0aGUgZ2x5cGhzIGJ5IHRoZWlyIHZlcnRpY2FsIHBvc2l0aW9ucyxcbiAgICAvLyBzaW5jZSB3ZSBhcmUgZ29pbmcgdG8gYnVpbGQgYSBzdHJpbmcgd2hlcmUgb2J2aW91c2x5IHRoZVxuICAgIC8vIFwidXBwZXJcIiBsaW5lIGhhcyB0byBwcmludGVkIG91dCBmaXJzdCwgZm9sbG93ZWQgYnlcbiAgICAvLyBhIG5ldyBsaW5lLCBmb2xsb3dlZCBieSB0aGUgb3RoZXIgbGluZXMuXG4gICAgLy9xc29ydChjaGFydGFiLCB5aW5kZXgsIHNpemVvZiAoc3RydWN0IGdseXBoKSwgX19jbXApXG4gICAgc3Vic2V0T2ZTdGFjayA9IGNoYXJ0YWIuc2xpY2UoMCwgeWluZGV4KTtcbiAgICBzdWJzZXRPZlN0YWNrLnNvcnQoY21wR2x5cGhzKTtcbiAgICBjaGFydGFiID0gW10uY29uY2F0KHN1YnNldE9mU3RhY2spLmNvbmNhdChjaGFydGFiLnNsaWNlKHlpbmRleCkpO1xuICAgIHggPSAwO1xuICAgIHkgPSBjaGFydGFiWzBdLnk7XG4gICAgZm9yIChpID0gajEgPSAwLCByZWYyID0geWluZGV4OyAoMCA8PSByZWYyID8gajEgPCByZWYyIDogajEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrajEgOiAtLWoxKSB7XG4gICAgICB3aGlsZSAoY2hhcnRhYltpXS55ID4geSkge1xuICAgICAgICBhY2N1bXVsYXRvciArPSBwcmludGNoYXIoJ1xcbicpO1xuICAgICAgICB4ID0gMDtcbiAgICAgICAgeSsrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGNoYXJ0YWJbaV0ueCA+IHgpIHtcbiAgICAgICAgYWNjdW11bGF0b3IgKz0gcHJpbnRjaGFyX25vd3JhcCgnICcpO1xuICAgICAgICB4Kys7XG4gICAgICB9XG4gICAgICBhY2N1bXVsYXRvciArPSBwcmludGNoYXJfbm93cmFwKGNoYXJ0YWJbaV0uYyk7XG4gICAgICB4Kys7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfTtcblxuICBidWZmZXIgPSBcIlwiO1xuXG4gIGdldGRpc3BsYXlzdHIgPSBmdW5jdGlvbigpIHtcbiAgICB5aW5kZXggPSAwO1xuICAgIGxldmVsID0gMDtcbiAgICBlbWl0X3ggPSAwO1xuICAgIGVtaXRfZXhwcihwb3AoKSk7XG4gICAgZmlsbF9idWYoKTtcbiAgICByZXR1cm4gYnVmZmVyO1xuICB9O1xuXG4gIGZpbGxfYnVmID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGoxLCByZWYyLCBzSW5kZXgsIHN1YnNldE9mU3RhY2ssIHRtcEJ1ZmZlciwgeCwgeTtcbiAgICB0bXBCdWZmZXIgPSBidWZmZXI7XG4gICAgc0luZGV4ID0gMDtcbiAgICBpID0gMDtcbiAgICAvL3Fzb3J0KGNoYXJ0YWIsIHlpbmRleCwgc2l6ZW9mIChzdHJ1Y3QgZ2x5cGgpLCBfX2NtcClcbiAgICBzdWJzZXRPZlN0YWNrID0gY2hhcnRhYi5zbGljZSgwLCB5aW5kZXgpO1xuICAgIHN1YnNldE9mU3RhY2suc29ydChjbXBHbHlwaHMpO1xuICAgIGNoYXJ0YWIgPSBbXS5jb25jYXQoc3Vic2V0T2ZTdGFjaykuY29uY2F0KGNoYXJ0YWIuc2xpY2UoeWluZGV4KSk7XG4gICAgeCA9IDA7XG4gICAgeSA9IGNoYXJ0YWJbMF0ueTtcbiAgICBmb3IgKGkgPSBqMSA9IDAsIHJlZjIgPSB5aW5kZXg7ICgwIDw9IHJlZjIgPyBqMSA8IHJlZjIgOiBqMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytqMSA6IC0tajEpIHtcbiAgICAgIHdoaWxlIChjaGFydGFiW2ldLnkgPiB5KSB7XG4gICAgICAgIHRtcEJ1ZmZlcltzSW5kZXgrK10gPSAnXFxuJztcbiAgICAgICAgeCA9IDA7XG4gICAgICAgIHkrKztcbiAgICAgIH1cbiAgICAgIHdoaWxlIChjaGFydGFiW2ldLnggPiB4KSB7XG4gICAgICAgIHRtcEJ1ZmZlcltzSW5kZXgrK10gPSAnICc7XG4gICAgICAgIHgrKztcbiAgICAgIH1cbiAgICAgIHRtcEJ1ZmZlcltzSW5kZXgrK10gPSBjaGFydGFiW2ldLmM7XG4gICAgICB4Kys7XG4gICAgfVxuICAgIHJldHVybiB0bXBCdWZmZXJbc0luZGV4KytdID0gJ1xcbic7XG4gIH07XG5cbiAgTiA9IDEwMDtcblxuICBvbmVFbGVtZW50ID0gKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIG9uZUVsZW1lbnQge307XG5cbiAgICBvbmVFbGVtZW50LnByb3RvdHlwZS54ID0gMDtcblxuICAgIG9uZUVsZW1lbnQucHJvdG90eXBlLnkgPSAwO1xuXG4gICAgb25lRWxlbWVudC5wcm90b3R5cGUuaCA9IDA7XG5cbiAgICBvbmVFbGVtZW50LnByb3RvdHlwZS53ID0gMDtcblxuICAgIG9uZUVsZW1lbnQucHJvdG90eXBlLmluZGV4ID0gMDtcblxuICAgIG9uZUVsZW1lbnQucHJvdG90eXBlLmNvdW50ID0gMDtcblxuICAgIHJldHVybiBvbmVFbGVtZW50O1xuXG4gIH0pLmNhbGwodGhpcyk7XG5cbiAgZWxlbSA9IFtdO1xuXG4gIGZvciAoZWxlbG1JbmRleCA9IGoxID0gMDsgajEgPCAxMDAwMDsgZWxlbG1JbmRleCA9ICsrajEpIHtcbiAgICBlbGVtW2VsZWxtSW5kZXhdID0gbmV3IG9uZUVsZW1lbnQoKTtcbiAgfVxuXG4gIFNQQUNFX0JFVFdFRU5fQ09MVU1OUyA9IDM7XG5cbiAgU1BBQ0VfQkVUV0VFTl9ST1dTID0gMTtcblxuICBlbWl0X3RlbnNvciA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgY29sLCBkeCwgZHksIGVoLCBldywgaCwgaSwgbDEsIG0xLCBuLCBuMSwgbmNvbCwgbnJvdywgbzEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJvdywgdywgeCwgeTtcbiAgICBpID0gMDtcbiAgICBuID0gMDtcbiAgICBucm93ID0gMDtcbiAgICBuY29sID0gMDtcbiAgICB4ID0gMDtcbiAgICB5ID0gMDtcbiAgICBoID0gMDtcbiAgICB3ID0gMDtcbiAgICBkeCA9IDA7XG4gICAgZHkgPSAwO1xuICAgIGVoID0gMDtcbiAgICBldyA9IDA7XG4gICAgcm93ID0gMDtcbiAgICBjb2wgPSAwO1xuICAgIGlmIChwLnRlbnNvci5uZGltID4gMikge1xuICAgICAgZW1pdF9mbGF0X3RlbnNvcihwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbnJvdyA9IHAudGVuc29yLmRpbVswXTtcbiAgICBpZiAocC50ZW5zb3IubmRpbSA9PT0gMikge1xuICAgICAgbmNvbCA9IHAudGVuc29yLmRpbVsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmNvbCA9IDE7XG4gICAgfVxuICAgIG4gPSBucm93ICogbmNvbDtcbiAgICBpZiAobiA+IE4pIHtcbiAgICAgIGVtaXRfZmxhdF90ZW5zb3IocCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGhvcml6b250YWwgY29vcmRpbmF0ZSBvZiB0aGUgbWF0cml4XG5cbiAgICAvL2lmIDBcbiAgICAvL2VtaXRfeCArPSAyOyAjIG1ha2Ugc3BhY2UgZm9yIGxlZnQgcGFyZW5cbiAgICAvL2VuZGlmXG4gICAgeCA9IGVtaXRfeDtcbi8vIGVtaXQgZWFjaCBlbGVtZW50XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gbjsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgZWxlbVtpXS5pbmRleCA9IHlpbmRleDtcbiAgICAgIGVsZW1baV0ueCA9IGVtaXRfeDtcbiAgICAgIGVtaXRfZXhwcihwLnRlbnNvci5lbGVtW2ldKTtcbiAgICAgIGVsZW1baV0uY291bnQgPSB5aW5kZXggLSBlbGVtW2ldLmluZGV4O1xuICAgICAgW2VsZW1baV0uaCwgZWxlbVtpXS53LCBlbGVtW2ldLnldID0gZ2V0X3NpemUoZWxlbVtpXS5pbmRleCwgeWluZGV4KTtcbiAgICB9XG4gICAgLy8gZmluZCBlbGVtZW50IGhlaWdodCBhbmQgd2lkdGhcbiAgICBlaCA9IDA7XG4gICAgZXcgPSAwO1xuICAgIGZvciAoaSA9IG0xID0gMCwgcmVmMyA9IG47ICgwIDw9IHJlZjMgPyBtMSA8IHJlZjMgOiBtMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKyttMSA6IC0tbTEpIHtcbiAgICAgIGlmIChlbGVtW2ldLmggPiBlaCkge1xuICAgICAgICBlaCA9IGVsZW1baV0uaDtcbiAgICAgIH1cbiAgICAgIGlmIChlbGVtW2ldLncgPiBldykge1xuICAgICAgICBldyA9IGVsZW1baV0udztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdGhpcyBpcyB0aGUgb3ZlcmFsbCBoZWlnaHQgb2YgdGhlIG1hdHJpeFxuICAgIGggPSBucm93ICogZWggKyAobnJvdyAtIDEpICogU1BBQ0VfQkVUV0VFTl9ST1dTO1xuICAgIC8vIHRoaXMgaXMgdGhlIG92ZXJhbGwgd2lkdGggb2YgdGhlIG1hdHJpeFxuICAgIHcgPSBuY29sICogZXcgKyAobmNvbCAtIDEpICogU1BBQ0VfQkVUV0VFTl9DT0xVTU5TO1xuICAgIC8vIHRoaXMgaXMgdGhlIHZlcnRpY2FsIGNvb3JkaW5hdGUgb2YgdGhlIG1hdHJpeFxuICAgIHkgPSAtKGggLyAyKTtcbi8vIG1vdmUgZWxlbWVudHMgYXJvdW5kXG4gICAgZm9yIChyb3cgPSBuMSA9IDAsIHJlZjQgPSBucm93OyAoMCA8PSByZWY0ID8gbjEgPCByZWY0IDogbjEgPiByZWY0KTsgcm93ID0gMCA8PSByZWY0ID8gKytuMSA6IC0tbjEpIHtcbiAgICAgIGZvciAoY29sID0gbzEgPSAwLCByZWY1ID0gbmNvbDsgKDAgPD0gcmVmNSA/IG8xIDwgcmVmNSA6IG8xID4gcmVmNSk7IGNvbCA9IDAgPD0gcmVmNSA/ICsrbzEgOiAtLW8xKSB7XG4gICAgICAgIGkgPSByb3cgKiBuY29sICsgY29sO1xuICAgICAgICAvLyBmaXJzdCBtb3ZlIHRvIHVwcGVyIGxlZnQgY29ybmVyIG9mIG1hdHJpeFxuICAgICAgICBkeCA9IHggLSBlbGVtW2ldLng7XG4gICAgICAgIGR5ID0geSAtIGVsZW1baV0ueTtcbiAgICAgICAgbW92ZShlbGVtW2ldLmluZGV4LCBlbGVtW2ldLmluZGV4ICsgZWxlbVtpXS5jb3VudCwgZHgsIGR5KTtcbiAgICAgICAgLy8gbm93IG1vdmUgdG8gb2ZmaWNpYWwgcG9zaXRpb25cbiAgICAgICAgZHggPSAwO1xuICAgICAgICBpZiAoY29sID4gMCkge1xuICAgICAgICAgIGR4ID0gY29sICogKGV3ICsgU1BBQ0VfQkVUV0VFTl9DT0xVTU5TKTtcbiAgICAgICAgfVxuICAgICAgICBkeSA9IDA7XG4gICAgICAgIGlmIChyb3cgPiAwKSB7XG4gICAgICAgICAgZHkgPSByb3cgKiAoZWggKyBTUEFDRV9CRVRXRUVOX1JPV1MpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNtYWxsIGNvcnJlY3Rpb24gZm9yIGhvcml6b250YWwgY2VudGVyaW5nXG4gICAgICAgIGR4ICs9IChldyAtIGVsZW1baV0udykgLyAyO1xuICAgICAgICAvLyBzbWFsbCBjb3JyZWN0aW9uIGZvciB2ZXJ0aWNhbCBjZW50ZXJpbmdcbiAgICAgICAgZHkgKz0gKGVoIC0gZWxlbVtpXS5oKSAvIDI7XG4gICAgICAgIG1vdmUoZWxlbVtpXS5pbmRleCwgZWxlbVtpXS5pbmRleCArIGVsZW1baV0uY291bnQsIGR4LCBkeSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbWl0X3ggPSB4ICsgdztcbiAgfTtcblxuICBlbWl0X2ZsYXRfdGVuc29yID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBlbWl0X3RlbnNvcl9pbm5lcihwLCAwLCAwKTtcbiAgfTtcblxuICBlbWl0X3RlbnNvcl9pbm5lciA9IGZ1bmN0aW9uKHAsIGosIGspIHtcbiAgICB2YXIgaSwgbDEsIHJlZjI7XG4gICAgaSA9IDA7XG4gICAgX19lbWl0X2NoYXIoJygnKTtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwLnRlbnNvci5kaW1bal07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIGlmIChqICsgMSA9PT0gcC50ZW5zb3IubmRpbSkge1xuICAgICAgICBlbWl0X2V4cHIocC50ZW5zb3IuZWxlbVtrXSk7XG4gICAgICAgIGsgPSBrICsgMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGsgPSBlbWl0X3RlbnNvcl9pbm5lcihwLCBqICsgMSwgayk7XG4gICAgICB9XG4gICAgICBpZiAoaSArIDEgPCBwLnRlbnNvci5kaW1bal0pIHtcbiAgICAgICAgX19lbWl0X2NoYXIoJywnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgX19lbWl0X2NoYXIoJyknKTtcbiAgICByZXR1cm4gaztcbiAgfTtcblxuICAvLyAncHJvZHVjdCcgZnVuY3Rpb25cblxuICAvL2RlZmluZSBBIHAzXG4gIC8vZGVmaW5lIEIgcDRcbiAgLy9kZWZpbmUgSSBwNVxuICAvL2RlZmluZSBYIHA2XG5cbiAgLy8gbGVhdmVzIHRoZSBwcm9kdWN0IGF0IHRoZSB0b3Agb2YgdGhlIHN0YWNrXG4gIEV2YWxfcHJvZHVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib2R5LCBpLCBpbmRleFZhcmlhYmxlLCBqLCBrLCBsMSwgb2xkSW5kZXhWYXJpYWJsZVZhbHVlLCByZWYyLCByZWYzO1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIGsgPSAwO1xuICAgIC8vIDFzdCBhcmdcbiAgICBib2R5ID0gY2FkcihwMSk7XG4gICAgLy8gMm5kIGFyZyAoaW5kZXgpXG4gICAgaW5kZXhWYXJpYWJsZSA9IGNhZGRyKHAxKTtcbiAgICBpZiAoIWlzc3ltYm9sKGluZGV4VmFyaWFibGUpKSB7XG4gICAgICBzdG9wKFwic3VtOiAybmQgYXJnP1wiKTtcbiAgICB9XG4gICAgLy8gM3JkIGFyZyAobG93ZXIgbGltaXQpXG4gICAgcHVzaChjYWRkZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgaiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgaWYgKGlzTmFOKGopKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gNHRoIGFyZyAodXBwZXIgbGltaXQpXG4gICAgcHVzaChjYWRkZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIGsgPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChpc05hTihrKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHJlbWVtYmVyIGNvbnRlbnRzIG9mIHRoZSBpbmRleFxuICAgIC8vIHZhcmlhYmxlIHNvIHdlIGNhbiBwdXQgaXQgYmFjayBhZnRlciB0aGUgbG9vcFxuICAgIG9sZEluZGV4VmFyaWFibGVWYWx1ZSA9IGdldF9iaW5kaW5nKGluZGV4VmFyaWFibGUpO1xuICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICBmb3IgKGkgPSBsMSA9IHJlZjIgPSBqLCByZWYzID0gazsgKHJlZjIgPD0gcmVmMyA/IGwxIDw9IHJlZjMgOiBsMSA+PSByZWYzKTsgaSA9IHJlZjIgPD0gcmVmMyA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwdXNoX2ludGVnZXIoaSk7XG4gICAgICBwNSA9IHBvcCgpO1xuICAgICAgc2V0X2JpbmRpbmcoaW5kZXhWYXJpYWJsZSwgcDUpO1xuICAgICAgcHVzaChib2R5KTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcInByb2R1Y3QgLSBmYWN0b3IgMTogXCIgKyBzdGFja1t0b3MgLSAxXS50b1N0cmluZygpKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJwcm9kdWN0IC0gZmFjdG9yIDI6IFwiICsgc3RhY2tbdG9zIC0gMl0udG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicHJvZHVjdCAtIHJlc3VsdDogXCIgKyBzdGFja1t0b3MgLSAxXS50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gcHV0IGJhY2sgdGhlIGluZGV4IHZhcmlhYmxlIHRvIG9yaWdpbmFsIGNvbnRlbnRcbiAgICByZXR1cm4gc2V0X2JpbmRpbmcoaW5kZXhWYXJpYWJsZSwgb2xkSW5kZXhWYXJpYWJsZVZhbHVlKTtcbiAgfTtcblxuICAvLyAgQWRkIHJhdGlvbmFsIG51bWJlcnNcblxuICAvLyAgSW5wdXQ6ICAgIHRvcy0yICAgIGFkZGVuZFxuXG4gIC8vICAgICAgdG9zLTEgICAgYWRkZW5kXG5cbiAgLy8gIE91dHB1dDogICAgc3VtIG9uIHN0YWNrXG4gIHFhZGQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZ2NkQmV0d2Vlbk51bWVyYXRvckFuZERlbm9taW5hdG9yLCBxYWRkX2FiLCBxYWRkX2JhLCBxYWRkX2Rlbm9taW5hdG9yLCBxYWRkX2ZyYWMxLCBxYWRkX2ZyYWMyLCBxYWRkX251bWVyYXRvciwgcmVzdWx0U3VtO1xuICAgIC8vIGEsIHFhZGRfYWIsIGIsIHFhZGRfYmEsIGMgYXJlIGFsbCBiaWdOdW1cbiAgICAvLyB3ZSBhcmUgYWRkaW5nIHRoZSBmcmFjdGlvbnMgcWFkZF9mcmFjMSArIHFhZGRfZnJhYzIgaS5lLlxuICAgIC8vIHFhZGRfZnJhYzEucS5hL3FhZGRfZnJhYzEucS5iICsgcWFkZF9mcmFjMi5xLmEvcWFkZF9mcmFjMi5xLmJcbiAgICBxYWRkX2ZyYWMyID0gcG9wKCk7XG4gICAgcWFkZF9mcmFjMSA9IHBvcCgpO1xuICAgIHFhZGRfYWIgPSBtbXVsKHFhZGRfZnJhYzEucS5hLCBxYWRkX2ZyYWMyLnEuYik7XG4gICAgcWFkZF9iYSA9IG1tdWwocWFkZF9mcmFjMS5xLmIsIHFhZGRfZnJhYzIucS5hKTtcbiAgICBxYWRkX251bWVyYXRvciA9IG1hZGQocWFkZF9hYiwgcWFkZF9iYSk7XG4gICAgLy9tZnJlZShxYWRkX2FiKVxuICAgIC8vbWZyZWUocWFkZF9iYSlcblxuICAgIC8vIHplcm8/XG4gICAgaWYgKE1aRVJPKHFhZGRfbnVtZXJhdG9yKSkge1xuICAgICAgLy9jb25zb2xlLmxvZyBcInFhZGQgSVMgWkVST1wiXG4gICAgICAvL21mcmVlKHFhZGRfbnVtZXJhdG9yKVxuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcWFkZF9kZW5vbWluYXRvciA9IG1tdWwocWFkZF9mcmFjMS5xLmIsIHFhZGRfZnJhYzIucS5iKTtcbiAgICBnY2RCZXR3ZWVuTnVtZXJhdG9yQW5kRGVub21pbmF0b3IgPSBtZ2NkKHFhZGRfbnVtZXJhdG9yLCBxYWRkX2Rlbm9taW5hdG9yKTtcbiAgICAvL2NvbnNvbGUubG9nIFwiZ2NkKFwiK3FhZGRfbnVtZXJhdG9yK1wiLFwiK3FhZGRfZGVub21pbmF0b3IrXCIpOiBcIiArIGdjZEJldHdlZW5OdW1lcmF0b3JBbmREZW5vbWluYXRvclxuICAgIGdjZEJldHdlZW5OdW1lcmF0b3JBbmREZW5vbWluYXRvciA9IG1ha2VTaWduU2FtZUFzKGdjZEJldHdlZW5OdW1lcmF0b3JBbmREZW5vbWluYXRvciwgcWFkZF9kZW5vbWluYXRvcik7XG4gICAgLy9jb25zb2xlLmxvZyBcInFhZGQgcWFkZF9kZW5vbWluYXRvcjogXCIgKyBxYWRkX2Rlbm9taW5hdG9yXG4gICAgLy9jb25zb2xlLmxvZyBcInFhZGQgZ2NkQmV0d2Vlbk51bWVyYXRvckFuZERlbm9taW5hdG9yOiBcIiArIGdjZEJldHdlZW5OdW1lcmF0b3JBbmREZW5vbWluYXRvclxuICAgIHJlc3VsdFN1bSA9IG5ldyBVKCk7XG4gICAgcmVzdWx0U3VtLmsgPSBOVU07XG4gICAgcmVzdWx0U3VtLnEuYSA9IG1kaXYocWFkZF9udW1lcmF0b3IsIGdjZEJldHdlZW5OdW1lcmF0b3JBbmREZW5vbWluYXRvcik7XG4gICAgcmVzdWx0U3VtLnEuYiA9IG1kaXYocWFkZF9kZW5vbWluYXRvciwgZ2NkQmV0d2Vlbk51bWVyYXRvckFuZERlbm9taW5hdG9yKTtcbiAgICAvL2NvbnNvbGUubG9nIFwicWFkZCByZXN1bHRTdW0ucS5hOiBcIiArIHJlc3VsdFN1bS5xLmFcbiAgICAvL2NvbnNvbGUubG9nIFwicWFkZCByZXN1bHRTdW0ucS5iOiBcIiArIHJlc3VsdFN1bS5xLmJcblxuICAgIC8vbWZyZWUocWFkZF9udW1lcmF0b3IpXG4gICAgLy9tZnJlZShxYWRkX2Rlbm9taW5hdG9yKVxuICAgIC8vbWZyZWUoZ2NkQmV0d2Vlbk51bWVyYXRvckFuZERlbm9taW5hdG9yKVxuICAgIHJldHVybiBwdXNoKHJlc3VsdFN1bSk7XG4gIH07XG5cbiAgLy9jb25zb2xlLmxvZyBcInFhZGQgcmVzdWx0OiBcIiArIHJlc3VsdFN1bVxuXG4gIC8vICBEaXZpZGUgcmF0aW9uYWwgbnVtYmVyc1xuXG4gIC8vICBJbnB1dDogICAgdG9zLTIgICAgZGl2aWRlbmRcblxuICAvLyAgICAgIHRvcy0xICAgIGRpdmlzb3JcblxuICAvLyAgT3V0cHV0OiAgICBxdW90aWVudCBvbiBzdGFja1xuICBxZGl2ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFhLCBiYiwgYztcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIC8vIHplcm8/XG4gICAgaWYgKE1aRVJPKHAyLnEuYSkpIHtcbiAgICAgIHN0b3AoXCJkaXZpZGUgYnkgemVyb1wiKTtcbiAgICB9XG4gICAgaWYgKE1aRVJPKHAxLnEuYSkpIHtcbiAgICAgIHB1c2goemVybyk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFhID0gbW11bChwMS5xLmEsIHAyLnEuYik7XG4gICAgYmIgPSBtbXVsKHAxLnEuYiwgcDIucS5hKTtcbiAgICBjID0gbWdjZChhYSwgYmIpO1xuICAgIGMgPSBtYWtlU2lnblNhbWVBcyhjLCBiYik7XG4gICAgcDEgPSBuZXcgVSgpO1xuICAgIHAxLmsgPSBOVU07XG4gICAgcDEucS5hID0gbWRpdihhYSwgYyk7XG4gICAgcDEucS5iID0gbWRpdihiYiwgYyk7XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyAgTXVsdGlwbHkgcmF0aW9uYWwgbnVtYmVyc1xuXG4gIC8vICBJbnB1dDogICAgdG9zLTIgICAgbXVsdGlwbGljYW5kXG5cbiAgLy8gICAgICB0b3MtMSAgICBtdWx0aXBsaWVyXG5cbiAgLy8gIE91dHB1dDogICAgcHJvZHVjdCBvbiBzdGFja1xuICBxbXVsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFhLCBiYiwgYztcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIC8vIHplcm8/XG4gICAgaWYgKE1aRVJPKHAxLnEuYSkgfHwgTVpFUk8ocDIucS5hKSkge1xuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWEgPSBtbXVsKHAxLnEuYSwgcDIucS5hKTtcbiAgICBiYiA9IG1tdWwocDEucS5iLCBwMi5xLmIpO1xuICAgIGMgPSBtZ2NkKGFhLCBiYik7XG4gICAgYyA9IG1ha2VTaWduU2FtZUFzKGMsIGJiKTtcbiAgICBwMSA9IG5ldyBVKCk7XG4gICAgcDEuayA9IE5VTTtcbiAgICBwMS5xLmEgPSBtZGl2KGFhLCBjKTtcbiAgICBwMS5xLmIgPSBtZGl2KGJiLCBjKTtcbiAgICAvL21mcmVlKGFhKVxuICAgIC8vbWZyZWUoYmIpXG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBSYXRpb25hbCBwb3dlciBmdW5jdGlvblxuICBxcG93ID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHFwb3dmKCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvL2RlZmluZSBCQVNFIHAxXG4gIC8vZGVmaW5lIEVYUE8gcDJcbiAgcXBvd2YgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYiwgZXhwbywgdCwgeCwgeTtcbiAgICBleHBvID0gMDtcbiAgICAvL3Vuc2lnbmVkIGludCBhLCBiLCAqdCwgKngsICp5XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChpc3BsdXNvbmUocDEpIHx8IGlzWmVyb0F0b21PclRlbnNvcihwMikpIHsgLy8gcDEgaXMgQkFTRSAgIyBwMiBpcyBFWFBPXG4gICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGlmICgtMSleKDEvMikgLT4gbGVhdmUgaXQgYXMgaXNcbiAgICBpZiAoaXNtaW51c29uZShwMSkgJiYgaXNvbmVvdmVydHdvKHAyKSkgeyAvLyBwMSBpcyBCQVNFICAjIHAyIGlzIEVYUE9cbiAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGlmIGJhc2UgaXMgemVybyB0aGVuIHJldHVybiAwXG4gICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwMSkpIHsgLy8gcDEgaXMgQkFTRVxuICAgICAgaWYgKGlzbmVnYXRpdmVudW1iZXIocDIpKSB7IC8vIHAyIGlzIEVYUE9cbiAgICAgICAgc3RvcChcImRpdmlkZSBieSB6ZXJvXCIpO1xuICAgICAgfVxuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gaWYgZXhwb25lbnQgaXMgMSB0aGVuIHJldHVybiBiYXNlXG4gICAgaWYgKGlzcGx1c29uZShwMikpIHsgLy8gcDIgaXMgRVhQT1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGlmIGV4cG9uZW50IGlzIGludGVnZXIgdGhlbiBwb3dlclxuICAgIGlmIChpc2ludGVnZXIocDIpKSB7IC8vIHAyIGlzIEVYUE9cbiAgICAgIHB1c2gocDIpO1xuICAgICAgZXhwbyA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgICBpZiAoaXNOYU4oZXhwbykpIHtcbiAgICAgICAgLy8gZXhwbyBncmVhdGVyIHRoYW4gMzIgYml0c1xuICAgICAgICBwdXNoX3N5bWJvbChQT1dFUik7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBwdXNoKHAyKTtcbiAgICAgICAgbGlzdCgzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgeCA9IG1wb3cocDEucS5hLCBNYXRoLmFicyhleHBvKSk7XG4gICAgICB5ID0gbXBvdyhwMS5xLmIsIE1hdGguYWJzKGV4cG8pKTtcbiAgICAgIGlmIChleHBvIDwgMCkge1xuICAgICAgICB0ID0geDtcbiAgICAgICAgeCA9IHk7XG4gICAgICAgIHkgPSB0O1xuICAgICAgICB4ID0gbWFrZVNpZ25TYW1lQXMoeCwgeSk7XG4gICAgICAgIHkgPSBtYWtlUG9zaXRpdmUoeSk7XG4gICAgICB9XG4gICAgICBwMyA9IG5ldyBVKCk7XG4gICAgICBwMy5rID0gTlVNO1xuICAgICAgcDMucS5hID0geDtcbiAgICAgIHAzLnEuYiA9IHk7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZnJvbSBoZXJlIG9uIG91dCB0aGUgZXhwb25lbnQgaXMgTk9UIGFuIGludGVnZXJcblxuICAgIC8vIGlmIGJhc2UgaXMgLTEgdGhlbiBub3JtYWxpemUgcG9sYXIgYW5nbGVcbiAgICBpZiAoaXNtaW51c29uZShwMSkpIHsgLy8gcDEgaXMgQkFTRVxuICAgICAgcHVzaChwMik7XG4gICAgICBub3JtYWxpemVfYW5nbGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gaWYgYmFzZSBpcyBuZWdhdGl2ZSB0aGVuICgtTileTSAtPiBOXk0gKiAoLTEpXk1cbiAgICBpZiAoaXNuZWdhdGl2ZW51bWJlcihwMSkpIHsgLy8gcDEgaXMgQkFTRVxuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcXBvdygpO1xuICAgICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcXBvdygpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFpc2ludGVnZXIocDEpKSB7IC8vIHAxIGlzIEJBU0VcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbXBfbnVtZXJhdG9yKCk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHFwb3coKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbXBfZGVub21pbmF0b3IoKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICBxcG93KCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBBdCB0aGlzIHBvaW50IHAxIChCQVNFKSBpcyBhIHBvc2l0aXZlIGludGVnZXIuXG5cbiAgICAvLyBJZiBwMSAoQkFTRSkgaXMgc21hbGwgdGhlbiBmYWN0b3IgaXQuXG4gICAgaWYgKGlzX3NtYWxsX2ludGVnZXIocDEpKSB7IC8vIHAxIGlzIEJBU0VcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBxdWlja2ZhY3RvcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlzU21hbGwocDIucS5hKSB8fCAhaXNTbWFsbChwMi5xLmIpKSB7IC8vIHAyIGlzIEVYUE9cbiAgICAgIHB1c2hfc3ltYm9sKFBPV0VSKTtcbiAgICAgIHB1c2gocDEpOyAvLyBwMSBpcyBCQVNFXG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGEgPSBwMi5xLmE7XG4gICAgYiA9IHAyLnEuYjtcbiAgICB4ID0gbXJvb3QocDEucS5hLCBiKTtcbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHkgPSBtcG93KHgsIGEpO1xuICAgIC8vbWZyZWUoeClcbiAgICBwMyA9IG5ldyBVKCk7XG4gICAgcDMuayA9IE5VTTtcbiAgICBpZiAocDIucS5hLmlzTmVnYXRpdmUoKSkgeyAvLyBwMiBpcyBFWFBPXG4gICAgICBwMy5xLmEgPSBiaWdJbnQoMSk7XG4gICAgICBwMy5xLmIgPSB5O1xuICAgIH0gZWxzZSB7XG4gICAgICBwMy5xLmEgPSB5O1xuICAgICAgcDMucS5iID0gYmlnSW50KDEpO1xuICAgIH1cbiAgICByZXR1cm4gcHVzaChwMyk7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBOb3JtYWxpemUgdGhlIGFuZ2xlIG9mIHVuaXQgaW1hZ2luYXJ5LCBpLmUuICgtMSkgXiBOXG5cbiAgLy8gIElucHV0OiAgICBOIG9uIHN0YWNrIChtdXN0IGJlIHJhdGlvbmFsLCBub3QgZmxvYXQpXG5cbiAgLy8gIE91dHB1dDogICAgUmVzdWx0IG9uIHN0YWNrXG5cbiAgLy8gIE5vdGU6XG5cbiAgLy8gIG4gPSBxICogZCArIHJcblxuICAvLyAgRXhhbXBsZTpcbiAgLy8gICAgICAgICAgICBuICBkICBxICByXG5cbiAgLy8gICgtMSleKDgvMykgIC0+ICAgKC0xKV4oMi8zKSAgOCAgMyAgMiAgMlxuICAvLyAgKC0xKV4oNy8zKSAgLT4gICAoLTEpXigxLzMpICA3ICAzICAyICAxXG4gIC8vICAoLTEpXig1LzMpICAtPiAgLSgtMSleKDIvMykgIDUgIDMgIDEgIDJcbiAgLy8gICgtMSleKDQvMykgIC0+ICAtKC0xKV4oMS8zKSAgNCAgMyAgMSAgMVxuICAvLyAgKC0xKV4oMi8zKSAgLT4gICAoLTEpXigyLzMpICAyICAzICAwICAyXG4gIC8vICAoLTEpXigxLzMpICAtPiAgICgtMSleKDEvMykgIDEgIDMgIDAgIDFcblxuICAvLyAgKC0xKV4oLTEvMykgIC0+ICAtKC0xKV4oMi8zKSAgLTEgIDMgIC0xICAyXG4gIC8vICAoLTEpXigtMi8zKSAgLT4gIC0oLTEpXigxLzMpICAtMiAgMyAgLTEgIDFcbiAgLy8gICgtMSleKC00LzMpICAtPiAgICgtMSleKDIvMykgIC00ICAzICAtMiAgMlxuICAvLyAgKC0xKV4oLTUvMykgIC0+ICAgKC0xKV4oMS8zKSAgLTUgIDMgIC0yICAxXG4gIC8vICAoLTEpXigtNy8zKSAgLT4gIC0oLTEpXigyLzMpICAtNyAgMyAgLTMgIDJcbiAgLy8gICgtMSleKC04LzMpICAtPiAgLSgtMSleKDEvMykgIC04ICAzICAtMyAgMVxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvL2RlZmluZSBBIHAxXG4gIC8vZGVmaW5lIFEgcDJcbiAgLy9kZWZpbmUgUiBwM1xuICBub3JtYWxpemVfYW5nbGUgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNpbnRlZ2VyKHAxKSkgeyAvLyBwMSBpcyBBXG4gICAgICBpZiAocDEucS5hLmlzT2RkKCkpIHsgLy8gcDEgaXMgQVxuICAgICAgICBwdXNoX2ludGVnZXIoLTEpOyAvLyBvZGQgZXhwb25lbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hfaW50ZWdlcigxKTsgLy8gZXZlbiBleHBvbmVudFxuICAgICAgfVxuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmbG9vclxuICAgIHB1c2gocDEpO1xuICAgIGJpZ251bV90cnVuY2F0ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKGlzbmVnYXRpdmVudW1iZXIocDEpKSB7IC8vIHAxIGlzIEFcbiAgICAgIHB1c2gocDIpOyAvLyBwMiBpcyBRXG4gICAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgYWRkKCk7XG4gICAgICBwMiA9IHBvcCgpOyAvLyBwMiBpcyBRXG4gICAgfVxuICAgIFxuICAgIC8vIHJlbWFpbmRlciAoYWx3YXlzIHBvc2l0aXZlKVxuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIHN1YnRyYWN0KCk7XG4gICAgcDMgPSBwb3AoKTtcbiAgICBwdXNoX3N5bWJvbChQT1dFUik7XG4gICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICBwdXNoKHAzKTsgLy8gcDMgaXMgUlxuICAgIGxpc3QoMyk7XG4gICAgLy8gbmVnYXRlIGlmIHF1b3RpZW50IGlzIG9kZFxuICAgIGlmIChwMi5xLmEuaXNPZGQoKSkgeyAvLyBwMiBpcyBRXG4gICAgICBuZWdhdGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBpc19zbWFsbF9pbnRlZ2VyID0gZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBpc1NtYWxsKHAucS5hKTtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIEZhY3RvciBzbWFsbCBudW1lcmljYWwgcG93ZXJzXG5cbiAgLy8gIElucHV0OiAgICB0b3MtMiAgICBCYXNlIChwb3NpdGl2ZSBpbnRlZ2VyIDwgMl4zMSAtIDEpXG5cbiAgLy8gICAgICB0b3MtMSAgICBFeHBvbmVudFxuXG4gIC8vICBPdXRwdXQ6ICAgIEV4cHIgb24gc3RhY2tcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy9kZWZpbmUgQkFTRSBwMVxuICAvL2RlZmluZSBFWFBPIHAyXG4gIHF1aWNrZmFjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGgsIGksIGwxLCBuLCByZWYyLCBzdGFja0luZGV4O1xuICAgIGkgPSAwO1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaCA9IHRvcztcbiAgICBwdXNoKHAxKTtcbiAgICBmYWN0b3Jfc21hbGxfbnVtYmVyKCk7XG4gICAgbiA9IHRvcyAtIGg7XG4gICAgc3RhY2tJbmRleCA9IGg7XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gbjsgbDEgPCByZWYyOyBpID0gbDEgKz0gMikge1xuICAgICAgcHVzaChzdGFja1tzdGFja0luZGV4ICsgaV0pO1xuICAgICAgcHVzaChzdGFja1tzdGFja0luZGV4ICsgaSArIDFdKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHF1aWNrcG93ZXIoKTtcbiAgICB9XG4gICAgLy8gc3RhY2sgaGFzIG4gcmVzdWx0cyBmcm9tIGZhY3Rvcl9udW1iZXJfcmF3KClcblxuICAgIC8vIG9uIHRvcCBvZiB0aGF0IGFyZSBhbGwgdGhlIGV4cHJlc3Npb25zIGZyb20gcXVpY2twb3dlcigpXG5cbiAgICAvLyBtdWx0aXBseSB0aGUgcXVpY2twb3dlcigpIHJlc3VsdHNcbiAgICBtdWx0aXBseV9hbGwodG9zIC0gaCAtIG4pO1xuICAgIHAxID0gcG9wKCk7XG4gICAgbW92ZVRvcyhoKTtcbiAgICBwdXNoKHAxKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIHAxIChCQVNFKSBpcyBhIHByaW1lIG51bWJlciBzbyBwb3dlciBpcyBzaW1wbGVyXG4gIHF1aWNrcG93ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXhwbztcbiAgICBleHBvID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHB1c2gocDIpO1xuICAgIGJpZ251bV90cnVuY2F0ZSgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgcHVzaChwMik7XG4gICAgcHVzaChwMyk7XG4gICAgc3VidHJhY3QoKTtcbiAgICBwNCA9IHBvcCgpO1xuICAgIGlmICghaXNaZXJvQXRvbU9yVGVuc29yKHA0KSkge1xuICAgICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHA0KTtcbiAgICAgIGxpc3QoMyk7XG4gICAgfVxuICAgIHB1c2gocDMpO1xuICAgIGV4cG8gPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChpc05hTihleHBvKSkge1xuICAgICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChleHBvID09PSAwKSB7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocDEpO1xuICAgIGJpZ251bV9wb3dlcl9udW1iZXIoZXhwbyk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvL2lmIFNFTEZURVNUXG5cbiAgLy8gRGl2aWRlIHBvbHlub21pYWxzXG4gIEV2YWxfcXVvdGllbnQgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChwMSA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIHAxID0gc3ltYm9sKFNZTUJPTF9YKTtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgcmV0dXJuIGRpdnBvbHkoKTtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIERpdmlkZSBwb2x5bm9taWFsc1xuXG4gIC8vICBJbnB1dDogICAgdG9zLTMgICAgRGl2aWRlbmRcblxuICAvLyAgICAgIHRvcy0yICAgIERpdmlzb3JcblxuICAvLyAgICAgIHRvcy0xICAgIHhcblxuICAvLyAgT3V0cHV0OiAgICB0b3MtMSAgICBRdW90aWVudFxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvL2RlZmluZSBESVZJREVORCBwMVxuICAvL2RlZmluZSBESVZJU09SIHAyXG4gIC8vZGVmaW5lIFggcDNcbiAgLy9kZWZpbmUgUSBwNFxuICAvL2RlZmluZSBRVU9USUVOVCBwNVxuICBkaXZwb2x5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpdmlkZW5kLCBkaXZpc29yLCBoLCBpLCBsMSwgbSwgbiwgcmVmMiwgeDtcbiAgICBoID0gMDtcbiAgICBpID0gMDtcbiAgICBtID0gMDtcbiAgICBuID0gMDtcbiAgICB4ID0gMDtcbiAgICAvL1UgKipkaXZpZGVuZCwgKipkaXZpc29yXG4gICAgc2F2ZSgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGggPSB0b3M7XG4gICAgZGl2aWRlbmQgPSB0b3M7XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMyk7XG4gICAgbSA9IGNvZWZmKCkgLSAxO1xuICAgIGRpdmlzb3IgPSB0b3M7XG4gICAgcHVzaChwMik7XG4gICAgcHVzaChwMyk7XG4gICAgbiA9IGNvZWZmKCkgLSAxO1xuICAgIHggPSBtIC0gbjtcbiAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgcDUgPSBwb3AoKTtcbiAgICB3aGlsZSAoeCA+PSAwKSB7XG4gICAgICBwdXNoKHN0YWNrW2RpdmlkZW5kICsgbV0pO1xuICAgICAgcHVzaChzdGFja1tkaXZpc29yICsgbl0pO1xuICAgICAgZGl2aWRlKCk7XG4gICAgICBwNCA9IHBvcCgpO1xuICAgICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gbjsgKDAgPD0gcmVmMiA/IGwxIDw9IHJlZjIgOiBsMSA+PSByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICAgIHB1c2goc3RhY2tbZGl2aWRlbmQgKyB4ICsgaV0pO1xuICAgICAgICBwdXNoKHN0YWNrW2Rpdmlzb3IgKyBpXSk7XG4gICAgICAgIHB1c2gocDQpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICBzdGFja1tkaXZpZGVuZCArIHggKyBpXSA9IHBvcCgpO1xuICAgICAgfVxuICAgICAgcHVzaChwNSk7XG4gICAgICBwdXNoKHA0KTtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgcHVzaF9pbnRlZ2VyKHgpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBhZGQoKTtcbiAgICAgIHA1ID0gcG9wKCk7XG4gICAgICBtLS07XG4gICAgICB4LS07XG4gICAgfVxuICAgIG1vdmVUb3MoaCk7XG4gICAgcHVzaChwNSk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBFdmFsX3JhdGlvbmFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHJldHVybiByYXRpb25hbGl6ZSgpO1xuICB9O1xuXG4gIHJhdGlvbmFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHg7XG4gICAgeCA9IGV4cGFuZGluZztcbiAgICB5eXJhdGlvbmFsaXplKCk7XG4gICAgcmV0dXJuIGV4cGFuZGluZyA9IHg7XG4gIH07XG5cbiAgeXlyYXRpb25hbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb21tb25EZW5vbWluYXRvciwgZWFjaFRlcm0sIHRoZUFyZ3VtZW50O1xuICAgIHRoZUFyZ3VtZW50ID0gcG9wKCk7XG4gICAgaWYgKGlzdGVuc29yKHRoZUFyZ3VtZW50KSkge1xuICAgICAgX19yYXRpb25hbGl6ZV90ZW5zb3IodGhlQXJndW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBleHBhbmRpbmcgPSAwO1xuICAgIGlmIChjYXIodGhlQXJndW1lbnQpICE9PSBzeW1ib2woQUREKSkge1xuICAgICAgcHVzaCh0aGVBcmd1bWVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChERUJVRykge1xuICAgICAgcHJpbnRmKFwicmF0aW9uYWxpemU6IHRoaXMgaXMgdGhlIGlucHV0IGV4cHI6XFxuXCIpO1xuICAgICAgcHJpbnRsaW5lKHRoZUFyZ3VtZW50KTtcbiAgICB9XG4gICAgLy8gZ2V0IGNvbW1vbiBkZW5vbWluYXRvclxuICAgIHB1c2gob25lKTtcbiAgICBtdWx0aXBseV9kZW5vbWluYXRvcnModGhlQXJndW1lbnQpO1xuICAgIGNvbW1vbkRlbm9taW5hdG9yID0gcG9wKCk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBwcmludGYoXCJyYXRpb25hbGl6ZTogdGhpcyBpcyB0aGUgY29tbW9uIGRlbm9taW5hdG9yOlxcblwiKTtcbiAgICAgIHByaW50bGluZShjb21tb25EZW5vbWluYXRvcik7XG4gICAgfVxuICAgIC8vIG11bHRpcGx5IGVhY2ggdGVybSBieSBjb21tb24gZGVub21pbmF0b3JcbiAgICBwdXNoKHplcm8pO1xuICAgIGVhY2hUZXJtID0gY2RyKHRoZUFyZ3VtZW50KTtcbiAgICB3aGlsZSAoaXNjb25zKGVhY2hUZXJtKSkge1xuICAgICAgcHVzaChjb21tb25EZW5vbWluYXRvcik7XG4gICAgICBwdXNoKGNhcihlYWNoVGVybSkpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIGFkZCgpO1xuICAgICAgZWFjaFRlcm0gPSBjZHIoZWFjaFRlcm0pO1xuICAgIH1cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIHByaW50ZihcInJhdGlvbmFsaXplOiBvcmlnaW5hbCBleHByIHRpbWVzIGNvbW1vbiBkZW5vbWluYXRvcjpcXG5cIik7XG4gICAgICBwcmludGxpbmUoc3RhY2tbdG9zIC0gMV0pO1xuICAgIH1cbiAgICAvLyBjb2xsZWN0IGNvbW1vbiBmYWN0b3JzXG4gICAgQ29uZGVuc2UoKTtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIHByaW50ZihcInJhdGlvbmFsaXplOiBhZnRlciBmYWN0b3Jpbmc6XFxuXCIpO1xuICAgICAgcHJpbnRsaW5lKHN0YWNrW3RvcyAtIDFdKTtcbiAgICB9XG4gICAgLy8gZGl2aWRlIGJ5IGNvbW1vbiBkZW5vbWluYXRvclxuICAgIHB1c2goY29tbW9uRGVub21pbmF0b3IpO1xuICAgIGRpdmlkZSgpO1xuICAgIGlmIChERUJVRykge1xuICAgICAgcHJpbnRmKFwicmF0aW9uYWxpemU6IGFmdGVyIGRpdmlkaW5nIGJ5IGNvbW1vbiBkZW5vbS4gKGFuZCB3ZSdyZSBkb25lKTpcXG5cIik7XG4gICAgICByZXR1cm4gcHJpbnRsaW5lKHN0YWNrW3RvcyAtIDFdKTtcbiAgICB9XG4gIH07XG5cbiAgbXVsdGlwbHlfZGVub21pbmF0b3JzID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciByZXN1bHRzO1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBtdWx0aXBseV9kZW5vbWluYXRvcnNfdGVybShjYXIocCkpO1xuICAgICAgICByZXN1bHRzLnB1c2gocCA9IGNkcihwKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG11bHRpcGx5X2Rlbm9taW5hdG9yc190ZXJtKHApO1xuICAgIH1cbiAgfTtcblxuICBtdWx0aXBseV9kZW5vbWluYXRvcnNfdGVybSA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgcmVzdWx0cztcbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwID0gY2RyKHApO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBtdWx0aXBseV9kZW5vbWluYXRvcnNfZmFjdG9yKGNhcihwKSk7XG4gICAgICAgIHJlc3VsdHMucHVzaChwID0gY2RyKHApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbXVsdGlwbHlfZGVub21pbmF0b3JzX2ZhY3RvcihwKTtcbiAgICB9XG4gIH07XG5cbiAgbXVsdGlwbHlfZGVub21pbmF0b3JzX2ZhY3RvciA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAoY2FyKHApICE9PSBzeW1ib2woUE9XRVIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocCk7XG4gICAgcCA9IGNhZGRyKHApO1xuICAgIC8vIGxpa2UgeF4oLTIpID9cbiAgICBpZiAoaXNuZWdhdGl2ZW51bWJlcihwKSkge1xuICAgICAgaW52ZXJzZSgpO1xuICAgICAgX19sY20oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbGlrZSB4XigtYSkgP1xuICAgIGlmIChjYXIocCkgPT09IHN5bWJvbChNVUxUSVBMWSkgJiYgaXNuZWdhdGl2ZW51bWJlcihjYWRyKHApKSkge1xuICAgICAgaW52ZXJzZSgpO1xuICAgICAgX19sY20oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbm8gbWF0Y2hcbiAgICByZXR1cm4gcG9wKCk7XG4gIH07XG5cbiAgX19yYXRpb25hbGl6ZV90ZW5zb3IgPSBmdW5jdGlvbih0aGVUZW5zb3IpIHtcbiAgICB2YXIgaSwgbDEsIG4sIHJlZjI7XG4gICAgaSA9IDA7XG4gICAgcHVzaCh0aGVUZW5zb3IpO1xuICAgIEV2YWwoKTtcbiAgICB0aGVUZW5zb3IgPSBwb3AoKTtcbiAgICBpZiAoIWlzdGVuc29yKHRoZVRlbnNvcikpIHsgLy8gbWlnaHQgYmUgemVyb1xuICAgICAgcHVzaCh0aGVUZW5zb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuID0gdGhlVGVuc29yLnRlbnNvci5uZWxlbTtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBuOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwdXNoKHRoZVRlbnNvci50ZW5zb3IuZWxlbVtpXSk7XG4gICAgICByYXRpb25hbGl6ZSgpO1xuICAgICAgdGhlVGVuc29yLnRlbnNvci5lbGVtW2ldID0gcG9wKCk7XG4gICAgfVxuICAgIGNoZWNrX3RlbnNvcl9kaW1lbnNpb25zKHRoZVRlbnNvcik7XG4gICAgcmV0dXJuIHB1c2godGhlVGVuc29yKTtcbiAgfTtcblxuICBfX2xjbSA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMik7XG4gICAgbXVsdGlwbHkoKTtcbiAgICBwdXNoKHAxKTtcbiAgICBwdXNoKHAyKTtcbiAgICBnY2QoKTtcbiAgICBkaXZpZGUoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIEV2YWxfcmVhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gcmVhbCgpO1xuICB9O1xuXG4gIHJlYWwgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgcmVjdCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMSk7XG4gICAgY29uanVnYXRlKCk7XG4gICAgYWRkKCk7XG4gICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgIGRpdmlkZSgpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgREVCVUdfUkVDVCA9IGZhbHNlO1xuXG4gIEV2YWxfcmVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gcmVjdCgpO1xuICB9O1xuXG4gIHJlY3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5wdXQ7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaW5wdXQgPSBwMTtcbiAgICBpZiAoREVCVUdfUkVDVCkge1xuICAgICAgY29uc29sZS5sb2coXCJSRUNUIG9mIFwiICsgaW5wdXQpO1xuICAgIH1cbiAgICBpZiAoREVCVUdfUkVDVCkge1xuICAgICAgY29uc29sZS5sb2coXCJhbnkgY2xvY2sgZm9ybXMgaW4gOiBcIiArIGlucHV0ICsgXCIgPyBcIiArIGZpbmRQb3NzaWJsZUNsb2NrRm9ybShpbnB1dCkpO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBhc3N1bWUgcmVhbCB2YXJpYWJsZXMsIHRoZW4gdGhlXG4gICAgLy8gcmVjdCBvZiBhbnkgc3ltYm9sIGlzIHRoZSBzeW1ib2wgaXRzZWxmXG4gICAgLy8gKG5vdGUgdGhhdCAnaScgaXMgbm90IGEgc3ltYm9sLCBpdCdzIG1hZGUgb2YgKC0xKV4oMS8yKSlcbiAgICAvLyBvdGhlcndpc2Ugd2UgaGF2ZSB0byBsZWF2ZSB1bmV2YWxsZWRcbiAgICBpZiAoaXNzeW1ib2wocDEpKSB7XG4gICAgICBpZiAoREVCVUdfUkVDVCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiByZWN0OiBzaW1wbGUgc3ltYm9sOiBcIiArIGlucHV0KTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNaZXJvQXRvbU9yVGVuc29yKGdldF9iaW5kaW5nKHN5bWJvbChBU1NVTUVfUkVBTF9WQVJJQUJMRVMpKSkpIHtcbiAgICAgICAgcHVzaChwMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoX3N5bWJvbChZWVJFQ1QpO1xuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgbGlzdCgyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1plcm9BdG9tT3JUZW5zb3IoZ2V0X2JpbmRpbmcoc3ltYm9sKEFTU1VNRV9SRUFMX1ZBUklBQkxFUykpKSAmJiAhZmluZFBvc3NpYmxlRXhwb25lbnRpYWxGb3JtKHAxKSAmJiAhZmluZFBvc3NpYmxlQ2xvY2tGb3JtKHAxKSAmJiAhKEZpbmQocDEsIHN5bWJvbChTSU4pKSAmJiBGaW5kKHAxLCBzeW1ib2woQ09TKSkgJiYgRmluZChwMSwgaW1hZ2luYXJ5dW5pdCkpKSB7IC8vIG5vIHBvbGFyIGZvcm0/XG4gICAgICBpZiAoREVCVUdfUkVDVCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiByZWN0OiBzaW1wbGUgc3ltYm9sOiBcIiArIGlucHV0KTtcbiAgICAgIH1cbiAgICAgIHB1c2gocDEpO1xuICAgIC8vIGliXG4gICAgfSBlbHNlIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpICYmIGlzaW1hZ2luYXJ5dW5pdChjYWRyKHAxKSkgJiYgIWlzWmVyb0F0b21PclRlbnNvcihnZXRfYmluZGluZyhzeW1ib2woQVNTVU1FX1JFQUxfVkFSSUFCTEVTKSkpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAvLyBzdW1cbiAgICB9IGVsc2UgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBREQpKSB7XG4gICAgICBpZiAoREVCVUdfUkVDVCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiByZWN0IC0gXCIgKyBpbnB1dCArIFwiIGlzIGEgc3VtIFwiKTtcbiAgICAgIH1cbiAgICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgIHJlY3QoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdHJ5IHRvIGdldCB0byB0aGUgcmVjdGFuZ3VsYXIgZm9ybSBieSBkb2luZ1xuICAgICAgLy8gYWJzKHAxKSAqIChjb3MgKHRoZXRhKSArIGkgKiBzaW4odGhldGEpKVxuICAgICAgLy8gd2hlcmUgdGhldGEgaXMgYXJnKHAxKVxuICAgICAgaWYgKERFQlVHX1JFQ1QpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgcmVjdCAtIFwiICsgaW5wdXQgKyBcIiBpcyBOT1QgYSBzdW0gXCIpO1xuICAgICAgfVxuICAgICAgcHVzaChwMSk7XG4gICAgICBhYnMoKTtcbiAgICAgIGlmIChERUJVR19SRUNUKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIHJlY3QgLSBcIiArIGlucHV0ICsgXCIgYWJzOiBcIiArIHN0YWNrW3RvcyAtIDFdLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgcHVzaChwMSk7XG4gICAgICBhcmcoKTtcbiAgICAgIGlmIChERUJVR19SRUNUKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIHJlY3QgLSBcIiArIGlucHV0ICsgXCIgYXJnIG9mIFwiICsgcDEgKyBcIiA6IFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgICBwMSA9IHBvcCgpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBjb3NpbmUoKTtcbiAgICAgIGlmIChERUJVR19SRUNUKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIHJlY3QgLSBcIiArIGlucHV0ICsgXCIgY29zaW5lOiBcIiArIHN0YWNrW3RvcyAtIDFdLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgc2luZSgpO1xuICAgICAgaWYgKERFQlVHX1JFQ1QpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgcmVjdCAtIFwiICsgaW5wdXQgKyBcIiBzaW5lOiBcIiArIHN0YWNrW3RvcyAtIDFdLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIGlmIChERUJVR19SRUNUKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIHJlY3QgLSBcIiArIGlucHV0ICsgXCIgaSAqIHNpbmU6IFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgICBhZGQoKTtcbiAgICAgIGlmIChERUJVR19SRUNUKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiIHJlY3QgLSBcIiArIGlucHV0ICsgXCIgY29zICsgaSAqIHNpbmU6IFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgICBtdWx0aXBseSgpO1xuICAgIH1cbiAgICByZXN0b3JlKCk7XG4gICAgaWYgKERFQlVHX1JFQ1QpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcInJlY3Qgb2YgXCIgKyBpbnB1dCArIFwiIDogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgfVxuICB9O1xuXG4gIC8vZGVmaW5lIFBPTFkgcDFcbiAgLy9kZWZpbmUgWCBwMlxuICAvL2RlZmluZSBBIHAzXG4gIC8vZGVmaW5lIEIgcDRcbiAgLy9kZWZpbmUgQyBwNVxuICAvL2RlZmluZSBZIHA2XG4gIHNob3dfcG93ZXJfZGVidWcgPSBmYWxzZTtcblxuICBwZXJmb3JtaW5nX3Jvb3RzID0gZmFsc2U7XG5cbiAgRXZhbF9yb290cyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIEEgPT0gQiAtPiBBIC0gQlxuICAgIHAyID0gY2FkcihwMSk7XG4gICAgaWYgKGNhcihwMikgPT09IHN5bWJvbChTRVRRKSB8fCBjYXIocDIpID09PSBzeW1ib2woVEVTVEVRKSkge1xuICAgICAgcHVzaChjYWRyKHAyKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBwdXNoKGNhZGRyKHAyKSk7XG4gICAgICBFdmFsKCk7XG4gICAgICBzdWJ0cmFjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHAyID0gcG9wKCk7XG4gICAgICBpZiAoY2FyKHAyKSA9PT0gc3ltYm9sKFNFVFEpIHx8IGNhcihwMikgPT09IHN5bWJvbChURVNURVEpKSB7XG4gICAgICAgIHB1c2goY2FkcihwMikpO1xuICAgICAgICBFdmFsKCk7XG4gICAgICAgIHB1c2goY2FkZHIocDIpKTtcbiAgICAgICAgRXZhbCgpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIDJuZCBhcmcsIHhcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKHAyID09PSBzeW1ib2woTklMKSkge1xuICAgICAgZ3Vlc3MoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMik7XG4gICAgfVxuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoIWlzcG9seWV4cGFuZGVkZm9ybShwMSwgcDIpKSB7XG4gICAgICBzdG9wKFwicm9vdHM6IDFzdCBhcmd1bWVudCBpcyBub3QgYSBwb2x5bm9taWFsXCIpO1xuICAgIH1cbiAgICBwdXNoKHAxKTtcbiAgICBwdXNoKHAyKTtcbiAgICByZXR1cm4gcm9vdHMoKTtcbiAgfTtcblxuICBoYXNJbWFnaW5hcnlDb2VmZiA9IGZ1bmN0aW9uKGspIHtcbiAgICB2YXIgaCwgaSwgaW1hZ2luYXJ5Q29lZmZpY2llbnRzLCBsMSwgcmVmMjtcbiAgICAvL3BvbHljb2VmZiA9IHRvc1xuICAgIGltYWdpbmFyeUNvZWZmaWNpZW50cyA9IGZhbHNlO1xuICAgIGggPSB0b3M7XG4gICAgZm9yIChpID0gbDEgPSByZWYyID0gazsgbDEgPiAwOyBpID0gbDEgKz0gLTEpIHtcbiAgICAgIC8vY29uc29sZS5sb2cgXCJoYXNJbWFnaW5hcnlDb2VmZiAtIGNvZWZmLjpcIiArIHN0YWNrW3Rvcy1pXS50b1N0cmluZygpXG4gICAgICBpZiAoaXNjb21wbGV4bnVtYmVyKHN0YWNrW3RvcyAtIGldKSkge1xuICAgICAgICBpbWFnaW5hcnlDb2VmZmljaWVudHMgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGltYWdpbmFyeUNvZWZmaWNpZW50cztcbiAgfTtcblxuICBpc1NpbXBsZVJvb3QgPSBmdW5jdGlvbihrKSB7XG4gICAgdmFyIGgsIGksIGlzU2ltcGxlUm9vdFBvbHlub21pYWwsIGwxLCByZWYyO1xuICAgIC8vcG9seWNvZWZmID0gdG9zXG5cbiAgICAvL3Rvcy1uICAgIENvZWZmaWNpZW50IG9mIHheMFxuICAgIC8vdG9zLTEgICAgQ29lZmZpY2llbnQgb2YgeF4obi0xKVxuICAgIGlmIChrID4gMikge1xuICAgICAgaXNTaW1wbGVSb290UG9seW5vbWlhbCA9IHRydWU7XG4gICAgICBoID0gdG9zO1xuICAgICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihzdGFja1t0b3MgLSBrXSkpIHtcbiAgICAgICAgaXNTaW1wbGVSb290UG9seW5vbWlhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gbDEgPSByZWYyID0gayAtIDE7IGwxID4gMTsgaSA9IGwxICs9IC0xKSB7XG4gICAgICAgIGlmICghaXNaZXJvQXRvbU9yVGVuc29yKHN0YWNrW3RvcyAtIGldKSkge1xuICAgICAgICAgIGlzU2ltcGxlUm9vdFBvbHlub21pYWwgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpc1NpbXBsZVJvb3RQb2x5bm9taWFsID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBpc1NpbXBsZVJvb3RQb2x5bm9taWFsO1xuICB9O1xuXG4gIG5vcm1hbGlzZWRDb2VmZiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkaXZpZGVCeSwgaSwgaywgbDEsIG0xLCBtaW5pU3RhY2ssIHJlZjIsIHJlZjM7XG4gICAgayA9IGNvZWZmKCk7XG4gICAgLy9jb25zb2xlLmxvZyhcIi0+XCIgKyB0b3MpXG4gICAgZGl2aWRlQnkgPSBzdGFja1t0b3MgLSAxXTtcbiAgICBtaW5pU3RhY2sgPSBbXTtcbiAgICBmb3IgKGkgPSBsMSA9IDEsIHJlZjIgPSBrOyAoMSA8PSByZWYyID8gbDEgPD0gcmVmMiA6IGwxID49IHJlZjIpOyBpID0gMSA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIG1pbmlTdGFjay5wdXNoKHBvcCgpKTtcbiAgICB9XG4vL2NvbnNvbGUubG9nKHRvcylcbiAgICBmb3IgKGkgPSBtMSA9IHJlZjMgPSBrIC0gMTsgKHJlZjMgPD0gMCA/IG0xIDw9IDAgOiBtMSA+PSAwKTsgaSA9IHJlZjMgPD0gMCA/ICsrbTEgOiAtLW0xKSB7XG4gICAgICBwdXNoKG1pbmlTdGFja1tpXSk7XG4gICAgICBwdXNoKGRpdmlkZUJ5KTtcbiAgICAgIGRpdmlkZSgpO1xuICAgIH1cbiAgICAvL2NvbnNvbGUubG9nKHRvcylcbiAgICByZXR1cm4gaztcbiAgfTtcblxuICAvLyB0YWtlcyB0aGUgcG9seW5vbWlhbCBhbmQgdGhlXG4gIC8vIHZhcmlhYmxlIG9uIHRoZSBzdGFja1xuICByb290cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoLCBpLCBrLCBsMSwgbGFzdENvZWZmLCBsZWFkaW5nQ29lZmYsIG4sIHJlZjI7XG4gICAgaCA9IDA7XG4gICAgaSA9IDA7XG4gICAgbiA9IDA7XG4gICAgc2F2ZSgpO1xuICAgIC8vIHRoZSBzaW1wbGlmaWNhdGlvbiBvZiBuZXN0ZWQgcmFkaWNhbHMgdXNlc1xuICAgIC8vIFwicm9vdHNcIiwgd2hpY2ggaW4gdHVybiB1c2VzIHNpbXBsaWZpY2F0aW9uXG4gICAgLy8gb2YgbmVzdGVkIHJhZGljYWxzLiBVc3VhbGx5IHRoZXJlIGlzIG5vIHByb2JsZW0sXG4gICAgLy8gb25lIGxldmVsIG9mIHJlY3Vyc2lvbiBkb2VzIHRoZSBqb2IuIEJleW9uZCB0aGF0LFxuICAgIC8vIHdlIHByb2JhYmx5IGdvdCBzdHVjayBpbiBhIHN0cmFuZ2UgY2FzZSBvZiBpbmZpbml0ZVxuICAgIC8vIHJlY3Vyc2lvbiwgc28gYmFpbCBvdXQgYW5kIHJldHVybiBOSUwuXG4gICAgaWYgKHJlY3Vyc2lvbkxldmVsTmVzdGVkUmFkaWNhbHNSZW1vdmFsID4gMSkge1xuICAgICAgcG9wKCk7XG4gICAgICBwb3AoKTtcbiAgICAgIHB1c2goc3ltYm9sKE5JTCkpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwZXJmb3JtaW5nX3Jvb3RzID0gdHJ1ZTtcbiAgICBoID0gdG9zIC0gMjtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgaWYgXCIgKyBzdGFja1t0b3MgLSAxXS50b1N0cmluZygpICsgXCIgaXMgYSBjYXNlIG9mIHNpbXBsZSByb290c1wiKTtcbiAgICB9XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIGsgPSBub3JtYWxpc2VkQ29lZmYoKTtcbiAgICBpZiAoaXNTaW1wbGVSb290KGspKSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ5ZXMsIFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSArIFwiIGlzIGEgY2FzZSBvZiBzaW1wbGUgcm9vdHNcIik7XG4gICAgICB9XG4gICAgICBsYXN0Q29lZmYgPSBzdGFja1t0b3MgLSBrXTtcbiAgICAgIGxlYWRpbmdDb2VmZiA9IHN0YWNrW3RvcyAtIDFdO1xuICAgICAgbW92ZVRvcyh0b3MgLSBrKTtcbiAgICAgIHBvcCgpO1xuICAgICAgcG9wKCk7XG4gICAgICBnZXRTaW1wbGVSb290cyhrLCBsZWFkaW5nQ29lZmYsIGxhc3RDb2VmZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdmVUb3ModG9zIC0gayk7XG4gICAgICByb290czIoKTtcbiAgICB9XG4gICAgbiA9IHRvcyAtIGg7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIHN0b3AoXCJyb290czogdGhlIHBvbHlub21pYWwgaXMgbm90IGZhY3RvcmFibGUsIHRyeSBucm9vdHNcIik7XG4gICAgfVxuICAgIGlmIChuID09PSAxKSB7XG4gICAgICBwZXJmb3JtaW5nX3Jvb3RzID0gZmFsc2U7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNvcnRfc3RhY2sobik7XG4gICAgcDEgPSBhbGxvY190ZW5zb3Iobik7XG4gICAgcDEudGVuc29yLm5kaW0gPSAxO1xuICAgIHAxLnRlbnNvci5kaW1bMF0gPSBuO1xuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMiA9IG47ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAxLnRlbnNvci5lbGVtW2ldID0gc3RhY2tbaCArIGldO1xuICAgIH1cbiAgICBtb3ZlVG9zKGgpO1xuICAgIHB1c2gocDEpO1xuICAgIHJlc3RvcmUoKTtcbiAgICByZXR1cm4gcGVyZm9ybWluZ19yb290cyA9IGZhbHNlO1xuICB9O1xuXG4gIC8vIG9rIHRvIGdlbmVyYXRlIHRoZXNlIHJvb3RzIHRha2UgYSBsb29rIGF0IHRoZWlyIGZvcm1cbiAgLy8gaW4gdGhlIGNhc2Ugb2YgZXZlbiBhbmQgb2RkIGV4cG9uZW50cyBoZXJlOlxuICAvLyBodHRwOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9cm9vdHMreCU1RTE0KyUyQisxXG4gIC8vIGh0dHA6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT1yb290cytheCU1RTE0KyUyQitiXG4gIC8vIGh0dHA6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT1yb290cyt4JTVFMTUrJTJCKzFcbiAgLy8gaHR0cDovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPXJvb3RzK2EqeCU1RTE1KyUyQitiXG4gIGdldFNpbXBsZVJvb3RzID0gZnVuY3Rpb24obiwgbGVhZGluZ0NvZWZmLCBsYXN0Q29lZmYpIHtcbiAgICB2YXIgYVNvbCwgY29tbW9uUGFydCwgbDEsIG0xLCByZWYyLCByZWYzLCByb290c09mT25lO1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJnZXRTaW1wbGVSb290c1wiKTtcbiAgICB9XG4gICAgc2F2ZSgpO1xuICAgIC8vdG9zLW4gICAgQ29lZmZpY2llbnQgb2YgeF4wXG4gICAgLy90b3MtMSAgICBDb2VmZmljaWVudCBvZiB4XihuLTEpXG4gICAgbiA9IG4gLSAxO1xuICAgIHB1c2gobGFzdENvZWZmKTtcbiAgICBwdXNoX3JhdGlvbmFsKDEsIG4pO1xuICAgIHBvd2VyKCk7XG4gICAgcHVzaChsZWFkaW5nQ29lZmYpO1xuICAgIHB1c2hfcmF0aW9uYWwoMSwgbik7XG4gICAgcG93ZXIoKTtcbiAgICBkaXZpZGUoKTtcbiAgICBjb21tb25QYXJ0ID0gcG9wKCk7XG4gICAgaWYgKG4gJSAyID09PSAwKSB7XG4gICAgICBmb3IgKHJvb3RzT2ZPbmUgPSBsMSA9IDEsIHJlZjIgPSBuOyBsMSA8PSByZWYyOyByb290c09mT25lID0gbDEgKz0gMikge1xuICAgICAgICBwdXNoKGNvbW1vblBhcnQpO1xuICAgICAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKHJvb3RzT2ZPbmUsIG4pO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBhU29sID0gcG9wKCk7XG4gICAgICAgIHB1c2goYVNvbCk7XG4gICAgICAgIHB1c2goYVNvbCk7XG4gICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHJvb3RzT2ZPbmUgPSBtMSA9IDEsIHJlZjMgPSBuOyAoMSA8PSByZWYzID8gbTEgPD0gcmVmMyA6IG0xID49IHJlZjMpOyByb290c09mT25lID0gMSA8PSByZWYzID8gKyttMSA6IC0tbTEpIHtcbiAgICAgICAgcHVzaChjb21tb25QYXJ0KTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICAgICAgcHVzaF9yYXRpb25hbChyb290c09mT25lLCBuKTtcbiAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgaWYgKHJvb3RzT2ZPbmUgJSAyID09PSAwKSB7XG4gICAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICByb290czIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaztcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTsgLy8gdGhlIHBvbHlub21pYWwgdmFyaWFibGVcbiAgICBwMSA9IHBvcCgpOyAvLyB0aGUgcG9seW5vbWlhbFxuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIHB1c2gocDEpO1xuICAgIHB1c2gocDIpO1xuICAgIGsgPSBub3JtYWxpc2VkQ29lZmYoKTtcbiAgICBpZiAoIWhhc0ltYWdpbmFyeUNvZWZmKGspKSB7XG4gICAgICBtb3ZlVG9zKHRvcyAtIGspO1xuICAgICAgZmFjdG9ycG9seSgpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW92ZVRvcyh0b3MgLSBrKTtcbiAgICAgIHBvcCgpO1xuICAgICAgcG9wKCk7XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICAvLyBzY2FuIHRocm91Z2ggYWxsIHRoZSBmYWN0b3JzXG4gICAgICAvLyBhbmQgZmluZCB0aGUgcm9vdHMgb2YgZWFjaCBvZiB0aGVtXG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBwdXNoKHAyKTtcbiAgICAgICAgcm9vdHMzKCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHJvb3RzMygpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHJvb3RzMyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuO1xuICAgIHNhdmUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChQT1dFUikgJiYgaXNwb2x5ZXhwYW5kZWRmb3JtKGNhZHIocDEpLCBwMikgJiYgaXNwb3NpbnQoY2FkZHIocDEpKSkge1xuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIG4gPSBub3JtYWxpc2VkQ29lZmYoKTtcbiAgICAgIG1pbmlfc29sdmUobik7XG4gICAgfSBlbHNlIGlmIChpc3BvbHlleHBhbmRlZGZvcm0ocDEsIHAyKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIG4gPSBub3JtYWxpc2VkQ29lZmYoKTtcbiAgICAgIG1pbmlfc29sdmUobik7XG4gICAgfVxuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBJbnB1dDogICAgc3RhY2tbdG9zIC0gMl0gICAgcG9seW5vbWlhbFxuXG4gIC8vICAgICAgc3RhY2tbdG9zIC0gMV0gICAgZGVwZW5kZW50IHN5bWJvbFxuXG4gIC8vICBPdXRwdXQ6ICAgIHN0YWNrICAgICAgcm9vdHMgb24gc3RhY2tcblxuICAvLyAgICAgICAgICAgIChpbnB1dCBhcmdzIGFyZSBwb3BwZWQgZmlyc3QpXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIG5vdGUgdGhhdCBmb3IgbWFueSBxdWFkcmF0aWMsIGN1YmljIGFuZCBxdWFydGljIHBvbHlub21pYWxzIHdlIGRvbid0XG4gIC8vIGFjdHVhbGx5IGVuZCB1cCB1c2luZyB0aGUgcXVhZHJhdGljL2N1YmljL3F1YXJ0aWMgZm9ybXVsYXMgaW4gaGVyZSxcbiAgLy8gc2luY2UgdGhlcmUgaXMgYSBjaGFuY2Ugd2UgZmFjdG9yZWQgdGhlIHBvbHlub21pYWwgYW5kIGluIHNvXG4gIC8vIGRvaW5nIHdlIGZvdW5kIHNvbWUgc29sdXRpb25zIGFuZCBsb3dlcmVkIHRoZSBkZWdyZWUuXG4gIG1pbmlfc29sdmUgPSBmdW5jdGlvbihuKSB7XG4gICAgdmFyIENfQ0hFQ0tFRF9BU19OT1RfWkVSTywgUV9DSEVDS0VEX0FTX05PVF9aRVJPLCBSXzE4X2FfYl9jX2QsIFJfMjdfYTJfZCwgUl8yX2IzLCBSXzNfYSwgUl8zX2FfQywgUl8zX2FfYywgUl80X0RFTFRBMDMsIFJfNl9hLCBSXzZfYV9DLCBSX0MsIFJfQ19vdmVyXzNhLCBSX0Nfc2ltcGxpZmllZF90b0NoZWNrSWZaZXJvLCBSX0RFTFRBMCwgUl9ERUxUQTBfc2ltcGxpZmllZF90b0NoZWNrSWZaZXJvLCBSX0RFTFRBMF90b0JlQ2hlY2tlZElmWmVybywgUl9ERUxUQTEsIFJfUSwgUl9RX3NpbXBsaWZpZWRfdG9DaGVja0lmWmVybywgUl9TLCBSX1Nfc2ltcGxpZmllZF90b0NoZWNrSWZaZXJvLCBSX2EyLCBSX2EyX2QsIFJfYTJfZDIsIFJfYTMsIFJfYV9iX2MsIFJfYV9iX2NfZCwgUl9hX2MsIFJfYjIsIFJfYjJfYzIsIFJfYjMsIFJfYjNfZCwgUl9jMiwgUl9jMywgUl9kMiwgUl9kZXRlcm1pbmFudCwgUl9kZXRlcm1pbmFudF9zaW1wbGlmaWVkX3RvQ2hlY2tJZlplcm8sIFJfZTIsIFJfZTMsIFJfbSwgUl9tMjdfYTJfZDIsIFJfbTRfYV9jMywgUl9tNF9iM19kLCBSX205X2FfYl9jLCBSX21fYl9vdmVyXzNhLCBSX21pbnVzXzRTMl9taW51c18ycCwgUl9taW51c19iX292ZXJfNGEsIFJfcCwgUl9wcmluY2lwYWxDdWJpY1Jvb3QsIFJfcSwgUl9xX292ZXJfUywgUl9yLCBTX0NIRUNLRURfQVNfTk9UX1pFUk8sIFRocmVlUFBsdXMyTSwgVHdvUU92ZXJzcXJ0UFBsdXMyTSwgYmlxdWFkcmF0aWNTb2x1dGlvbnMsIGNob2ljZU9mUmFkaWNhbEluUVNvU0lzTm90WmVybywgY29lZmYyLCBjb2VmZjMsIGNvZWZmNCwgZGVwcmVzc2VkU29sdXRpb25zLCBlYWNoU29sdXRpb24sIGZsaXBTaWduT0ZRU29DSXNOb3RaZXJvLCBmbGlwU2lnbk9GUmFkaWNhbFNvUUlzTm90WmVybywgaV9zcXJ0MywgbDEsIGxlbiwgbGVuMSwgbGVuMiwgbTEsIG4xLCBvbmVfbWludXNfaV9zcXJ0Mywgb25lX3BsdXNfaV9zcXJ0MywgcmVmMiwgcmVmMywgcmVmNCwgcmVzb2x2ZW50Q3ViaWNTb2x1dGlvbnMsIHJvb3Rfc29sdXRpb24sIHNxcnRQUGx1czJNLCB0b0JlQ2hlY2tlZElGWmVybztcbiAgICAvL2NvbnNvbGUubG9nIFwibWluaV9zb2x2ZSA+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4gdG9zOlwiICsgdG9zXG4gICAgc2F2ZSgpO1xuICAgIC8vIEFYICsgQiwgWCA9IC1CL0FcbiAgICBpZiAobiA9PT0gMikge1xuICAgICAgLy9jb25zb2xlLmxvZyBcIm1pbmlfc29sdmUgPj4+Pj4+Pj4+IDFzdCBkZWdyZWVcIlxuICAgICAgcDMgPSBwb3AoKTtcbiAgICAgIHA0ID0gcG9wKCk7XG4gICAgICBwdXNoKHA0KTtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgZGl2aWRlKCk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQVheMiArIEJYICsgQywgWCA9ICgtQiArLy0gKEJeMiAtIDRBQyleKDEvMikpIC8gKDJBKVxuICAgIGlmIChuID09PSAzKSB7XG4gICAgICAvL2NvbnNvbGUubG9nIFwibWluaV9zb2x2ZSA+Pj4+Pj4+Pj4gMm5kIGRlZ3JlZVwiXG4gICAgICBwMyA9IHBvcCgpOyAvLyBBXG4gICAgICBwNCA9IHBvcCgpOyAvLyBCXG4gICAgICBwNSA9IHBvcCgpOyAvLyBDXG4gICAgICBcbiAgICAgIC8vIEJeMlxuICAgICAgcHVzaChwNCk7XG4gICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICBwb3dlcigpO1xuICAgICAgLy8gNEFDXG4gICAgICBwdXNoX2ludGVnZXIoNCk7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBwdXNoKHA1KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICAvLyBCXjIgLSA0QUNcbiAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAvLyhCXjIgLSA0QUMpXigxLzIpXG4gICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIC8vcDYgaXMgKEJeMiAtIDRBQyleKDEvMilcbiAgICAgIHA2ID0gcG9wKCk7XG4gICAgICBwdXNoKHA2KTtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgc3VidHJhY3QoKTsgLy8gLUIgKyAoQl4yIC0gNEFDKV4oMS8yKVxuICAgICAgXG4gICAgICAvLyAxLzJBXG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBkaXZpZGUoKTtcbiAgICAgIC8vc2ltcGxpZnkoKVxuICAgICAgLy9yYXRpb25hbGl6ZSgpXG4gICAgICAvLyB0b3MgLSAxIG5vdyBpcyAxc3Qgcm9vdDogKC1CICsgKEJeMiAtIDRBQyleKDEvMikpIC8gKDJBKVxuICAgICAgcHVzaChwNik7XG4gICAgICBwdXNoKHA0KTtcbiAgICAgIGFkZCgpO1xuICAgICAgLy8gdG9zIC0gMSBub3cgaXMgIEIgKyAoQl4yIC0gNEFDKV4oMS8yKVxuICAgICAgLy8gdG9zIC0gMjogMXN0IHJvb3Q6ICgtQiArIChCXjIgLSA0QUMpXigxLzIpKSAvICgyQSlcbiAgICAgIG5lZ2F0ZSgpO1xuICAgICAgLy8gdG9zIC0gMSBub3cgaXMgIC1CIC0oQl4yIC0gNEFDKV4oMS8yKVxuICAgICAgLy8gdG9zIC0gMjogMXN0IHJvb3Q6ICgtQiArIChCXjIgLSA0QUMpXigxLzIpKSAvICgyQSlcblxuICAgICAgLy8gMS8yQSBhZ2FpblxuICAgICAgcHVzaChwMyk7XG4gICAgICBkaXZpZGUoKTtcbiAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgLy9zaW1wbGlmeSgpXG4gICAgICAvL3JhdGlvbmFsaXplKClcbiAgICAgIC8vIHRvcyAtIDE6IDJuZCByb290OiAoLUIgLSAoQl4yIC0gNEFDKV4oMS8yKSkgLyAoMkEpXG4gICAgICAvLyB0b3MgLSAyOiAxc3Qgcm9vdDogKC1CICsgKEJeMiAtIDRBQyleKDEvMikpIC8gKDJBKVxuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL2lmIChuID09IDQpXG4gICAgaWYgKG4gPT09IDQgfHwgbiA9PT0gNSkge1xuICAgICAgcDMgPSBwb3AoKTsgLy8gQVxuICAgICAgcDQgPSBwb3AoKTsgLy8gQlxuICAgICAgcDUgPSBwb3AoKTsgLy8gQ1xuICAgICAgcDYgPSBwb3AoKTsgLy8gRFxuICAgICAgXG4gICAgICAvLyBDIC0gb25seSByZWxhdGVkIGNhbGN1bGF0aW9uc1xuICAgICAgcHVzaChwNSk7XG4gICAgICBwdXNoKHA1KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBSX2MyID0gcG9wKCk7XG4gICAgICBwdXNoKFJfYzIpO1xuICAgICAgcHVzaChwNSk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgUl9jMyA9IHBvcCgpO1xuICAgICAgLy8gQiAtIG9ubHkgcmVsYXRlZCBjYWxjdWxhdGlvbnNcbiAgICAgIHB1c2gocDQpO1xuICAgICAgcHVzaChwNCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgUl9iMiA9IHBvcCgpO1xuICAgICAgcHVzaChSX2IyKTtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfYjMgPSBwb3AoKTtcbiAgICAgIHB1c2goUl9iMyk7XG4gICAgICBwdXNoKHA2KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBSX2IzX2QgPSBwb3AoKTtcbiAgICAgIHB1c2goUl9iM19kKTtcbiAgICAgIHB1c2hfaW50ZWdlcigtNCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgUl9tNF9iM19kID0gcG9wKCk7XG4gICAgICBwdXNoKFJfYjMpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfMl9iMyA9IHBvcCgpO1xuICAgICAgLy8gQSAtIG9ubHkgcmVsYXRlZCBjYWxjdWxhdGlvbnNcbiAgICAgIHB1c2gocDMpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgUl9hMiA9IHBvcCgpO1xuICAgICAgcHVzaChSX2EyKTtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfYTMgPSBwb3AoKTtcbiAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgIHB1c2gocDMpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfM19hID0gcG9wKCk7XG4gICAgICBwdXNoKFJfYTIpO1xuICAgICAgcHVzaChwNik7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgUl9hMl9kID0gcG9wKCk7XG4gICAgICBwdXNoKFJfYTJfZCk7XG4gICAgICBwdXNoKHA2KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBSX2EyX2QyID0gcG9wKCk7XG4gICAgICBwdXNoKFJfYTJfZCk7XG4gICAgICBwdXNoX2ludGVnZXIoMjcpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfMjdfYTJfZCA9IHBvcCgpO1xuICAgICAgcHVzaChSX2EyX2QyKTtcbiAgICAgIHB1c2hfaW50ZWdlcigtMjcpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfbTI3X2EyX2QyID0gcG9wKCk7XG4gICAgICBwdXNoKFJfM19hKTtcbiAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBSXzZfYSA9IHBvcCgpO1xuICAgICAgLy8gbWl4ZWQgY2FsY3VsYXRpb25zXG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHB1c2gocDUpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfYV9jID0gcG9wKCk7XG4gICAgICBwdXNoKFJfYV9jKTtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfYV9iX2MgPSBwb3AoKTtcbiAgICAgIHB1c2goUl9hX2JfYyk7XG4gICAgICBwdXNoKHA2KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBSX2FfYl9jX2QgPSBwb3AoKTtcbiAgICAgIHB1c2goUl9hX2MpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDMpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfM19hX2MgPSBwb3AoKTtcbiAgICAgIHB1c2hfaW50ZWdlcigtNCk7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHB1c2goUl9jMyk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIFJfbTRfYV9jMyA9IHBvcCgpO1xuICAgICAgcHVzaChSX2FfYl9jKTtcbiAgICAgIHB1c2hfaW50ZWdlcig5KTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIFJfbTlfYV9iX2MgPSBwb3AoKTtcbiAgICAgIHB1c2goUl9hX2JfY19kKTtcbiAgICAgIHB1c2hfaW50ZWdlcigxOCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgUl8xOF9hX2JfY19kID0gcG9wKCk7XG4gICAgICBwdXNoKFJfYjIpO1xuICAgICAgcHVzaChSXzNfYV9jKTtcbiAgICAgIHN1YnRyYWN0KCk7XG4gICAgICBSX0RFTFRBMCA9IHBvcCgpO1xuICAgICAgcHVzaChSX2IyKTtcbiAgICAgIHB1c2goUl9jMik7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgUl9iMl9jMiA9IHBvcCgpO1xuICAgICAgcHVzaChwNCk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHB1c2goUl8zX2EpO1xuICAgICAgZGl2aWRlKCk7XG4gICAgICBSX21fYl9vdmVyXzNhID0gcG9wKCk7XG4gICAgICBpZiAobiA9PT0gNCkge1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIj4+Pj4+Pj4+Pj4+Pj4+Pj4gYWN0dWFsbHkgdXNpbmcgY3ViaWMgZm9ybXVsYSA8PDw8PDw8PDw8PDw8PDwgXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vY29uc29sZS5sb2cgXCI+Pj4+IEE6XCIgKyBwMy50b1N0cmluZygpXG4gICAgICAgIC8vY29uc29sZS5sb2cgXCI+Pj4+IEI6XCIgKyBwNC50b1N0cmluZygpXG4gICAgICAgIC8vY29uc29sZS5sb2cgXCI+Pj4+IEM6XCIgKyBwNS50b1N0cmluZygpXG4gICAgICAgIC8vY29uc29sZS5sb2cgXCI+Pj4+IEQ6XCIgKyBwNi50b1N0cmluZygpXG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3ViaWM6IEQwOiBcIiArIFJfREVMVEEwLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHB1c2goUl9ERUxUQTApO1xuICAgICAgICBwdXNoX2ludGVnZXIoMyk7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHB1c2hfaW50ZWdlcig0KTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgUl80X0RFTFRBMDMgPSBwb3AoKTtcbiAgICAgICAgcHVzaChSX0RFTFRBMCk7XG4gICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgIGFic1ZhbEZsb2F0KCk7XG4gICAgICAgIFJfREVMVEEwX3RvQmVDaGVja2VkSWZaZXJvID0gcG9wKCk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3ViaWM6IEQwIGFzIGZsb2F0OiBcIiArIFJfREVMVEEwX3RvQmVDaGVja2VkSWZaZXJvLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vaWYgaXNaZXJvQXRvbU9yVGVuc29yKFJfREVMVEEwX3RvQmVDaGVja2VkSWZaZXJvKVxuICAgICAgICAvLyAgY29uc29sZS5sb2cgXCIgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRDAgSVMgWkVST1wiXG5cbiAgICAgICAgLy8gREVURVJNSU5BTlRcbiAgICAgICAgcHVzaChSXzE4X2FfYl9jX2QpO1xuICAgICAgICBwdXNoKFJfbTRfYjNfZCk7XG4gICAgICAgIHB1c2goUl9iMl9jMik7XG4gICAgICAgIHB1c2goUl9tNF9hX2MzKTtcbiAgICAgICAgcHVzaChSX20yN19hMl9kMik7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICBhYnNWYWxGbG9hdCgpO1xuICAgICAgICBSX2RldGVybWluYW50ID0gcG9wKCk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3ViaWM6IERFVEVSTUlOQU5UOiBcIiArIFJfZGV0ZXJtaW5hbnQudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUl9ERUxUQTFcbiAgICAgICAgcHVzaChSXzJfYjMpO1xuICAgICAgICBwdXNoKFJfbTlfYV9iX2MpO1xuICAgICAgICBwdXNoKFJfMjdfYTJfZCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgUl9ERUxUQTEgPSBwb3AoKTtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJjdWJpYzogRDE6IFwiICsgUl9ERUxUQTEudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUl9RXG4gICAgICAgIHB1c2goUl9ERUxUQTEpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHB1c2goUl80X0RFTFRBMDMpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICBSX1EgPSBwb3AoKTtcbiAgICAgICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihSX2RldGVybWluYW50KSkge1xuICAgICAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoUl9ERUxUQTBfdG9CZUNoZWNrZWRJZlplcm8pKSB7XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIgY3ViaWM6IERFVEVSTUlOQU5UIElTIFpFUk8gYW5kIGRlbHRhMCBpcyB6ZXJvXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHVzaChSX21fYl9vdmVyXzNhKTsgLy8ganVzdCBzYW1lIHNvbHV0aW9uIHRocmVlIHRpbWVzXG4gICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIiBjdWJpYzogREVURVJNSU5BTlQgSVMgWkVSTyBhbmQgZGVsdGEwIGlzIG5vdCB6ZXJvXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHVzaChwMyk7XG4gICAgICAgICAgICBwdXNoKHA2KTtcbiAgICAgICAgICAgIHB1c2hfaW50ZWdlcig5KTtcbiAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgcHVzaChwNCk7XG4gICAgICAgICAgICBwdXNoKHA1KTtcbiAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICAgICAgcHVzaChSX0RFTFRBMCk7XG4gICAgICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgZGl2aWRlKCk7IC8vIGZpcnN0IHNvbHV0aW9uXG4gICAgICAgICAgICByb290X3NvbHV0aW9uID0gcG9wKCk7XG4gICAgICAgICAgICBwdXNoKHJvb3Rfc29sdXRpb24pOyAvLyBwdXNoaW5nIHR3byBvZiB0aGVtIG9uIHRoZSBzdGFja1xuICAgICAgICAgICAgcHVzaChyb290X3NvbHV0aW9uKTtcbiAgICAgICAgICAgIC8vIHNlY29uZCBzb2x1dGlvbiBoZXJlXG4gICAgICAgICAgICAvLyA0YWJjXG4gICAgICAgICAgICBwdXNoKFJfYV9iX2MpO1xuICAgICAgICAgICAgcHVzaF9pbnRlZ2VyKDQpO1xuICAgICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICAgIC8vIC05YSphKmRcbiAgICAgICAgICAgIHB1c2gocDMpO1xuICAgICAgICAgICAgcHVzaChwMyk7XG4gICAgICAgICAgICBwdXNoKHA2KTtcbiAgICAgICAgICAgIHB1c2hfaW50ZWdlcig5KTtcbiAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICAgICAgLy8gLTkqYl4zXG4gICAgICAgICAgICBwdXNoKFJfYjMpO1xuICAgICAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgICAgICAvLyBzdW0gdGhlIHRocmVlIHRlcm1zXG4gICAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgICAgLy8gZGVub21pbmF0b3IgaXMgYSpkZWx0YTBcbiAgICAgICAgICAgIHB1c2gocDMpO1xuICAgICAgICAgICAgcHVzaChSX0RFTFRBMCk7XG4gICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgLy8gYnVpbGQgdGhlIGZyYWN0aW9uXG4gICAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgQ19DSEVDS0VEX0FTX05PVF9aRVJPID0gZmFsc2U7XG4gICAgICAgIGZsaXBTaWduT0ZRU29DSXNOb3RaZXJvID0gZmFsc2U7XG4gICAgICAgIHdoaWxlICghQ19DSEVDS0VEX0FTX05PVF9aRVJPKSB7XG4gICAgICAgICAgLy8gUl9DXG4gICAgICAgICAgcHVzaChSX1EpO1xuICAgICAgICAgIGlmIChmbGlwU2lnbk9GUVNvQ0lzTm90WmVybykge1xuICAgICAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHB1c2goUl9ERUxUQTEpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDMpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgICBSX0MgPSBwb3AoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3ViaWM6IEM6IFwiICsgUl9DLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXNoKFJfQyk7XG4gICAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgICBhYnNWYWxGbG9hdCgpO1xuICAgICAgICAgIFJfQ19zaW1wbGlmaWVkX3RvQ2hlY2tJZlplcm8gPSBwb3AoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3ViaWM6IEMgYXMgYWJzdmFsIGFuZCBmbG9hdDogXCIgKyBSX0Nfc2ltcGxpZmllZF90b0NoZWNrSWZaZXJvLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKFJfQ19zaW1wbGlmaWVkX3RvQ2hlY2tJZlplcm8pKSB7XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIgY3ViaWM6IEMgSVMgWkVSTyBmbGlwcGluZyB0aGUgc2lnblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZsaXBTaWduT0ZRU29DSXNOb3RaZXJvID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQ19DSEVDS0VEX0FTX05PVF9aRVJPID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVzaChSX0MpO1xuICAgICAgICBwdXNoKFJfM19hKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgUl8zX2FfQyA9IHBvcCgpO1xuICAgICAgICBwdXNoKFJfM19hX0MpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIFJfNl9hX0MgPSBwb3AoKTtcbiAgICAgICAgLy8gaW1hZ2luYXJ5IHBhcnRzIGNhbGN1bGF0aW9uc1xuICAgICAgICBwdXNoKGltYWdpbmFyeXVuaXQpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMyk7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGlfc3FydDMgPSBwb3AoKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgICBwdXNoKGlfc3FydDMpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgb25lX3BsdXNfaV9zcXJ0MyA9IHBvcCgpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICAgIHB1c2goaV9zcXJ0Myk7XG4gICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgIG9uZV9taW51c19pX3NxcnQzID0gcG9wKCk7XG4gICAgICAgIHB1c2goUl9DKTtcbiAgICAgICAgcHVzaChSXzNfYSk7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBSX0Nfb3Zlcl8zYSA9IHBvcCgpO1xuICAgICAgICAvLyBmaXJzdCBzb2x1dGlvblxuICAgICAgICBwdXNoKFJfbV9iX292ZXJfM2EpOyAvLyBmaXJzdCB0ZXJtXG4gICAgICAgIHB1c2goUl9DX292ZXJfM2EpO1xuICAgICAgICBuZWdhdGUoKTsgLy8gc2Vjb25kIHRlcm1cbiAgICAgICAgcHVzaChSX0RFTFRBMCk7XG4gICAgICAgIHB1c2goUl8zX2FfQyk7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBuZWdhdGUoKTsgLy8gdGhpcmQgdGVybVxuICAgICAgICAvLyBub3cgYWRkIHRoZSB0aHJlZSB0ZXJtcyB0b2dldGhlclxuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgIC8vIHNlY29uZCBzb2x1dGlvblxuICAgICAgICBwdXNoKFJfbV9iX292ZXJfM2EpOyAvLyBmaXJzdCB0ZXJtXG4gICAgICAgIHB1c2goUl9DX292ZXJfM2EpO1xuICAgICAgICBwdXNoKG9uZV9wbHVzX2lfc3FydDMpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgIGRpdmlkZSgpOyAvLyBzZWNvbmQgdGVybVxuICAgICAgICBwdXNoKG9uZV9taW51c19pX3NxcnQzKTtcbiAgICAgICAgcHVzaChSX0RFTFRBMCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIHB1c2goUl82X2FfQyk7XG4gICAgICAgIGRpdmlkZSgpOyAvLyB0aGlyZCB0ZXJtXG4gICAgICAgIC8vIG5vdyBhZGQgdGhlIHRocmVlIHRlcm1zIHRvZ2V0aGVyXG4gICAgICAgIGFkZCgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgLy8gdGhpcmQgc29sdXRpb25cbiAgICAgICAgcHVzaChSX21fYl9vdmVyXzNhKTsgLy8gZmlyc3QgdGVybVxuICAgICAgICBwdXNoKFJfQ19vdmVyXzNhKTtcbiAgICAgICAgcHVzaChvbmVfbWludXNfaV9zcXJ0Myk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgZGl2aWRlKCk7IC8vIHNlY29uZCB0ZXJtXG4gICAgICAgIHB1c2gob25lX3BsdXNfaV9zcXJ0Myk7XG4gICAgICAgIHB1c2goUl9ERUxUQTApO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBwdXNoKFJfNl9hX0MpO1xuICAgICAgICBkaXZpZGUoKTsgLy8gdGhpcmQgdGVybVxuICAgICAgICAvLyBub3cgYWRkIHRoZSB0aHJlZSB0ZXJtcyB0b2dldGhlclxuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gU2VlIGh0dHA6Ly93d3cuc3NjYy5lZHUvaG9tZS9qZGF2aWRzby9NYXRoL0NhdGFsb2cvUG9seW5vbWlhbHMvRm91cnRoL0ZvdXJ0aC5odG1sXG4gICAgICAvLyBmb3IgYSBkZXNjcmlwdGlvbiBvZiBnZW5lcmFsIHNoYXBlcyBhbmQgcHJvcGVydGllcyBvZiBmb3VydGggZGVncmVlIHBvbHlub21pYWxzXG4gICAgICBpZiAobiA9PT0gNSkge1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIj4+Pj4+Pj4+Pj4+Pj4+Pj4gYWN0dWFsbHkgdXNpbmcgcXVhcnRpYyBmb3JtdWxhIDw8PDw8PDw8PDw8PDw8PCBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcDcgPSBwb3AoKTsgLy8gRVxuICAgICAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHA0KSAmJiBpc1plcm9BdG9tT3JUZW5zb3IocDYpICYmICFpc1plcm9BdG9tT3JUZW5zb3IocDUpICYmICFpc1plcm9BdG9tT3JUZW5zb3IocDcpKSB7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImJpcXVhZHJhdGljIGNhc2VcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHB1c2gocDMpO1xuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2gocDUpO1xuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2gocDcpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgICByb290cygpO1xuICAgICAgICAgIGJpcXVhZHJhdGljU29sdXRpb25zID0gcG9wKCk7XG4gICAgICAgICAgcmVmMiA9IGJpcXVhZHJhdGljU29sdXRpb25zLnRlbnNvci5lbGVtO1xuICAgICAgICAgIGZvciAobDEgPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgbDEgPCBsZW47IGwxKyspIHtcbiAgICAgICAgICAgIGVhY2hTb2x1dGlvbiA9IHJlZjJbbDFdO1xuICAgICAgICAgICAgcHVzaChlYWNoU29sdXRpb24pO1xuICAgICAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICAgICAgcHVzaChlYWNoU29sdXRpb24pO1xuICAgICAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRCAtIG9ubHkgcmVsYXRlZCBjYWxjdWxhdGlvbnNcbiAgICAgICAgcHVzaChwNik7XG4gICAgICAgIHB1c2gocDYpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBSX2QyID0gcG9wKCk7XG4gICAgICAgIC8vIEUgLSBvbmx5IHJlbGF0ZWQgY2FsY3VsYXRpb25zXG4gICAgICAgIHB1c2gocDcpO1xuICAgICAgICBwdXNoKHA3KTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgUl9lMiA9IHBvcCgpO1xuICAgICAgICBwdXNoKFJfZTIpO1xuICAgICAgICBwdXNoKHA3KTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgUl9lMyA9IHBvcCgpO1xuICAgICAgICAvLyBERVRFUk1JTkFOVFxuICAgICAgICBwdXNoX2ludGVnZXIoMjU2KTtcbiAgICAgICAgcHVzaChSX2EzKTtcbiAgICAgICAgcHVzaChSX2UzKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTsgLy8gZmlyc3QgdGVybSAyNTYgYV4zIGVeM1xuICAgICAgICBwdXNoX2ludGVnZXIoLTE5Mik7XG4gICAgICAgIHB1c2goUl9hMl9kKTtcbiAgICAgICAgcHVzaChSX2UyKTtcbiAgICAgICAgcHVzaChwNCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7IC8vIHNlY29uZCB0ZXJtIC0xOTIgYV4zIGIgZCBlXjJcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC0xMjgpO1xuICAgICAgICBwdXNoKFJfYTIpO1xuICAgICAgICBwdXNoKFJfYzIpO1xuICAgICAgICBwdXNoKFJfZTIpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyB0aGlyZCB0ZXJtIC0xMjggYV4yIGNeMiBlXjJcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDE0NCk7XG4gICAgICAgIHB1c2goUl9hMl9kMik7XG4gICAgICAgIHB1c2gocDUpO1xuICAgICAgICBwdXNoKHA3KTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTsgLy8gZm91cnRoIHRlcm0gMTQ0IGFeMiBjIGReMiBlXG4gICAgICAgIHB1c2goUl9tMjdfYTJfZDIpO1xuICAgICAgICBwdXNoKFJfZDIpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyBmaWZ0aCB0ZXJtIC0yNyBhXjIgZF40XG4gICAgICAgIHB1c2hfaW50ZWdlcigxNDQpO1xuICAgICAgICBwdXNoKFJfYV9iX2MpO1xuICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgcHVzaChSX2UyKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTsgLy8gc2l4dGggdGVybSAxNDQgYSBiXjIgYyBlXjJcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC02KTtcbiAgICAgICAgcHVzaChwMyk7XG4gICAgICAgIHB1c2goUl9iMik7XG4gICAgICAgIHB1c2goUl9kMik7XG4gICAgICAgIHB1c2gocDcpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyBzZXZlbnRoIHRlcm0gLTYgYSBiXjIgZF4yIGVcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC04MCk7XG4gICAgICAgIHB1c2goUl9hX2JfY19kKTtcbiAgICAgICAgcHVzaChwNSk7XG4gICAgICAgIHB1c2gocDcpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyBlaWd0aCB0ZXJtIC04MCBhIGIgY14yIGQgZVxuICAgICAgICBwdXNoX2ludGVnZXIoMTgpO1xuICAgICAgICBwdXNoKFJfYV9iX2NfZCk7XG4gICAgICAgIHB1c2goUl9kMik7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7IC8vIG5pbnRoIHRlcm0gMTggYSBiIGMgZF4zXG4gICAgICAgIHB1c2hfaW50ZWdlcigxNik7XG4gICAgICAgIHB1c2goUl9hX2MpO1xuICAgICAgICBwdXNoKFJfYzMpO1xuICAgICAgICBwdXNoKHA3KTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTsgLy8gdGVudGggdGVybSAxNiBhIGNeNCBlXG4gICAgICAgIHB1c2hfaW50ZWdlcigtNCk7XG4gICAgICAgIHB1c2goUl9hX2MpO1xuICAgICAgICBwdXNoKFJfYzIpO1xuICAgICAgICBwdXNoKFJfZDIpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyBlbGV2ZW50aCB0ZXJtIC00IGEgY14zIGReMlxuICAgICAgICBwdXNoX2ludGVnZXIoLTI3KTtcbiAgICAgICAgcHVzaChSX2IzKTtcbiAgICAgICAgcHVzaChwNCk7XG4gICAgICAgIHB1c2goUl9lMik7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7IC8vIHR3ZWx2ZXRoIHRlcm0gLTI3IGJeNCBlXjJcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDE4KTtcbiAgICAgICAgcHVzaChSX2IzX2QpO1xuICAgICAgICBwdXNoKHA1KTtcbiAgICAgICAgcHVzaChwNyk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7IC8vIHRoaXJ0ZWVudGggdGVybSAxOCBiXjMgYyBkIGVcbiAgICAgICAgcHVzaChSX200X2IzX2QpO1xuICAgICAgICBwdXNoKFJfZDIpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyBmb3VydGVlbnRoIHRlcm0gLTQgYl4zIGReM1xuICAgICAgICBwdXNoX2ludGVnZXIoLTQpO1xuICAgICAgICBwdXNoKFJfYjJfYzIpO1xuICAgICAgICBwdXNoKHA1KTtcbiAgICAgICAgcHVzaChwNyk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7IC8vIGZpZnRlZW50aCB0ZXJtIC00IGJeMiBjXjMgZVxuICAgICAgICBwdXNoKFJfYjJfYzIpO1xuICAgICAgICBwdXNoKFJfZDIpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyBzaXh0ZWVudGggdGVybSBiXjIgY14yIGReMlxuICAgICAgICBcbiAgICAgICAgLy8gYWRkIHRvZ2V0aGVyIHRoZSBzaXh0ZWVuIHRlcm1zIGJ5IGRvaW5nXG4gICAgICAgIC8vIGZpZnRlZW4gYWRkc1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBSX2RldGVybWluYW50ID0gcG9wKCk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiUl9kZXRlcm1pbmFudDogXCIgKyBSX2RldGVybWluYW50LnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERFTFRBMFxuICAgICAgICBwdXNoKFJfYzIpOyAvLyB0ZXJtIG9uZSBvZiBERUxUQTBcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC0zKTtcbiAgICAgICAgcHVzaChwNCk7XG4gICAgICAgIHB1c2gocDYpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyB0ZXJtIHR3byBvZiBERUxUQTBcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDEyKTtcbiAgICAgICAgcHVzaChwMyk7XG4gICAgICAgIHB1c2gocDcpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpOyAvLyB0ZXJtIHRocmVlIG9mIERFTFRBMFxuICAgICAgICBcbiAgICAgICAgLy8gYWRkIHRoZSB0aHJlZSB0ZXJtcyB0b2dldGhlclxuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIFJfREVMVEEwID0gcG9wKCk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiUl9ERUxUQTA6IFwiICsgUl9ERUxUQTAudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gREVMVEExXG4gICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgcHVzaChSX2MzKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC05KTtcbiAgICAgICAgcHVzaChwNCk7XG4gICAgICAgIHB1c2gocDUpO1xuICAgICAgICBwdXNoKHA2KTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDI3KTtcbiAgICAgICAgcHVzaChSX2IyKTtcbiAgICAgICAgcHVzaChwNyk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIHB1c2hfaW50ZWdlcigyNyk7XG4gICAgICAgIHB1c2gocDMpO1xuICAgICAgICBwdXNoKFJfZDIpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBwdXNoX2ludGVnZXIoLTcyKTtcbiAgICAgICAgcHVzaChSX2FfYyk7XG4gICAgICAgIHB1c2gocDcpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAvLyBhZGQgdGhlIGZpdmUgdGVybXMgdG9nZXRoZXJcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIFJfREVMVEExID0gcG9wKCk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiUl9ERUxUQTE6IFwiICsgUl9ERUxUQTEudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcFxuICAgICAgICBwdXNoX2ludGVnZXIoOCk7XG4gICAgICAgIHB1c2goUl9hX2MpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBwdXNoX2ludGVnZXIoLTMpO1xuICAgICAgICBwdXNoKFJfYjIpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDgpO1xuICAgICAgICBwdXNoKFJfYTIpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgUl9wID0gcG9wKCk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwicDogXCIgKyBSX3AudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcVxuICAgICAgICBwdXNoKFJfYjMpO1xuICAgICAgICBwdXNoX2ludGVnZXIoLTQpO1xuICAgICAgICBwdXNoKFJfYV9iX2MpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBwdXNoX2ludGVnZXIoOCk7XG4gICAgICAgIHB1c2goUl9hMl9kKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBwdXNoX2ludGVnZXIoOCk7XG4gICAgICAgIHB1c2goUl9hMyk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBSX3EgPSBwb3AoKTtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJxOiBcIiArIFJfcS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInRvcyAxIFwiICsgdG9zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzWmVyb0F0b21PclRlbnNvcihwNCkpIHtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidG9zIDIgXCIgKyB0b3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXNoX2ludGVnZXIoOCk7XG4gICAgICAgICAgcHVzaChwNSk7XG4gICAgICAgICAgcHVzaChwMyk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigtMyk7XG4gICAgICAgICAgcHVzaChwNCk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoOCk7XG4gICAgICAgICAgcHVzaChwMyk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICBSX3AgPSBwb3AoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicCBmb3IgZGVwcmVzc2VkIHF1YXJ0aWM6IFwiICsgUl9wLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMyk7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoLTQpO1xuICAgICAgICAgIHB1c2gocDMpO1xuICAgICAgICAgIHB1c2gocDQpO1xuICAgICAgICAgIHB1c2gocDUpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcig4KTtcbiAgICAgICAgICBwdXNoKHA2KTtcbiAgICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDgpO1xuICAgICAgICAgIHB1c2gocDMpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgICAgUl9xID0gcG9wKCk7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInEgZm9yIGRlcHJlc3NlZCBxdWFydGljOiBcIiArIFJfcS50b1N0cmluZygpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY29udmVydCB0byBkZXByZXNzZWQgcXVhcnRpY1xuICAgICAgICAgIHB1c2gocDQpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcig0KTtcbiAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigtMyk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMjU2KTtcbiAgICAgICAgICBwdXNoKFJfYTMpO1xuICAgICAgICAgIHB1c2gocDcpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoLTY0KTtcbiAgICAgICAgICBwdXNoKFJfYTJfZCk7XG4gICAgICAgICAgcHVzaChwNCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigxNik7XG4gICAgICAgICAgcHVzaChSX2IyKTtcbiAgICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgICBwdXNoKHA1KTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMjU2KTtcbiAgICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoNCk7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIGRpdmlkZSgpO1xuICAgICAgICAgIFJfciA9IHBvcCgpO1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyIGZvciBkZXByZXNzZWQgcXVhcnRpYzogXCIgKyBSX3IudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0b3MgNCBcIiArIHRvcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoNCk7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiNCAqIHheNDogXCIgKyBzdGFja1t0b3MgLSAxXS50b1N0cmluZygpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHVzaChSX3ApO1xuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSX3AgKiB4XjI6IFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHB1c2goUl9xKTtcbiAgICAgICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUl9xICogeDogXCIgKyBzdGFja1t0b3MgLSAxXS50b1N0cmluZygpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHVzaChSX3IpO1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSX3I6IFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNvbHZpbmcgZGVwcmVzc2VkIHF1YXJ0aWM6IFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgICByb290cygpO1xuICAgICAgICAgIGRlcHJlc3NlZFNvbHV0aW9ucyA9IHBvcCgpO1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJkZXByZXNzZWRTb2x1dGlvbnM6IFwiICsgZGVwcmVzc2VkU29sdXRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVmMyA9IGRlcHJlc3NlZFNvbHV0aW9ucy50ZW5zb3IuZWxlbTtcbiAgICAgICAgICBmb3IgKG0xID0gMCwgbGVuMSA9IHJlZjMubGVuZ3RoOyBtMSA8IGxlbjE7IG0xKyspIHtcbiAgICAgICAgICAgIGVhY2hTb2x1dGlvbiA9IHJlZjNbbTFdO1xuICAgICAgICAgICAgcHVzaChlYWNoU29sdXRpb24pO1xuICAgICAgICAgICAgcHVzaChwNCk7XG4gICAgICAgICAgICBwdXNoX2ludGVnZXIoNCk7XG4gICAgICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic29sdXRpb24gZnJvbSBkZXByZXNzZWQ6IFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUl9wID0gcDU7XG4gICAgICAgICAgUl9xID0gcDY7XG4gICAgICAgICAgUl9yID0gcDc7XG4gICAgICAgICAgLypcbiAgICAgICAgICAgKiBEZXNjYXJ0ZXMnIHNvbHV0aW9uXG4gICAgICAgICAgICogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUXVhcnRpY19mdW5jdGlvbiNEZXNjYXJ0ZXMuMjdfc29sdXRpb25cbiAgICAgICAgICAgKiBmaW5kaW5nIHRoZSBcInVcIiBpbiB0aGUgZGVwcmVzc2VkIGVxdWF0aW9uXG5cbiAgICAgICAgICBwdXNoX2ludGVnZXIoMilcbiAgICAgICAgICBwdXNoKFJfcClcbiAgICAgICAgICBtdWx0aXBseSgpXG4gICAgICAgICAgY29lZmYyID0gcG9wKClcblxuICAgICAgICAgIHB1c2hfaW50ZWdlcigtNClcbiAgICAgICAgICBwdXNoKFJfcClcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMilcbiAgICAgICAgICBwb3dlcigpXG4gICAgICAgICAgbXVsdGlwbHkoKVxuICAgICAgICAgIHB1c2goUl9yKVxuICAgICAgICAgIG11bHRpcGx5KClcbiAgICAgICAgICBjb2VmZjMgPSBwb3AoKVxuXG4gICAgICAgICAgcHVzaChSX3EpXG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpXG4gICAgICAgICAgcG93ZXIoKVxuICAgICAgICAgIG5lZ2F0ZSgpXG4gICAgICAgICAgY29lZmY0ID0gcG9wKClcblxuICAgICAgICAgICAqIG5vdyBidWlsZCB0aGUgcG9seW5vbWlhbFxuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKVxuICAgICAgICAgIHB1c2hfaW50ZWdlcigzKVxuICAgICAgICAgIHBvd2VyKClcblxuICAgICAgICAgIHB1c2goY29lZmYyKVxuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKVxuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKVxuICAgICAgICAgIHBvd2VyKClcbiAgICAgICAgICBtdWx0aXBseSgpXG5cbiAgICAgICAgICBwdXNoKGNvZWZmMylcbiAgICAgICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSlcbiAgICAgICAgICBtdWx0aXBseSgpXG5cbiAgICAgICAgICBwdXNoKGNvZWZmNClcblxuICAgICAgICAgIGFkZCgpXG4gICAgICAgICAgYWRkKClcbiAgICAgICAgICBhZGQoKVxuXG4gICAgICAgICAgY29uc29sZS5sb2coXCJEZXNjYXJ0ZSdzIHJlc29sdmVudEN1YmljOiBcIiArICBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSlcblxuICAgICAgICAgIHJvb3RzKClcblxuICAgICAgICAgIHJlc29sdmVudEN1YmljU29sdXRpb25zID0gcG9wKClcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkRlc2NhcnRlJ3MgcmVzb2x2ZW50Q3ViaWMgc29sdXRpb25zOiBcIiArICByZXNvbHZlbnRDdWJpY1NvbHV0aW9ucylcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInRvczogXCIgKyAgdG9zKVxuXG4gICAgICAgICAgUl91ID0gbnVsbFxuICAgICAgICAgICNSX3UgPSByZXNvbHZlbnRDdWJpY1NvbHV0aW9ucy50ZW5zb3IuZWxlbVsxXVxuICAgICAgICAgIGZvciBlYWNoU29sdXRpb24gaW4gcmVzb2x2ZW50Q3ViaWNTb2x1dGlvbnMudGVuc29yLmVsZW1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXhhbWluaW5nIHNvbHV0aW9uOiBcIiArICBlYWNoU29sdXRpb24pXG4gICAgICAgICAgICBwdXNoKGVhY2hTb2x1dGlvbilcbiAgICAgICAgICAgIHB1c2hfaW50ZWdlcigyKVxuICAgICAgICAgICAgbXVsdGlwbHkoKVxuICAgICAgICAgICAgcHVzaChSX3ApXG4gICAgICAgICAgICBhZGQoKVxuXG4gICAgICAgICAgICBhYnNWYWxGbG9hdCgpXG4gICAgICAgICAgICB0b0JlQ2hlY2tlZElGWmVybyA9IHBvcCgpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFicyB2YWx1ZSBpczogXCIgKyAgZWFjaFNvbHV0aW9uKVxuICAgICAgICAgICAgaWYgIWlzWmVyb0F0b21PclRlbnNvcih0b0JlQ2hlY2tlZElGWmVybylcbiAgICAgICAgICAgICAgUl91ID0gZWFjaFNvbHV0aW9uXG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjb25zb2xlLmxvZyhcImNob3NlbiBzb2x1dGlvbjogXCIgKyAgUl91KVxuXG4gICAgICAgICAgcHVzaChSX3UpXG4gICAgICAgICAgbmVnYXRlKClcbiAgICAgICAgICBSX3MgPSBwb3AoKVxuXG4gICAgICAgICAgcHVzaChSX3ApXG4gICAgICAgICAgcHVzaChSX3UpXG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpXG4gICAgICAgICAgcG93ZXIoKVxuICAgICAgICAgIHB1c2goUl9xKVxuICAgICAgICAgIHB1c2goUl91KVxuICAgICAgICAgIGRpdmlkZSgpXG4gICAgICAgICAgYWRkKClcbiAgICAgICAgICBhZGQoKVxuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKVxuICAgICAgICAgIGRpdmlkZSgpXG4gICAgICAgICAgUl90ID0gcG9wKClcblxuICAgICAgICAgIHB1c2goUl9wKVxuICAgICAgICAgIHB1c2goUl91KVxuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKVxuICAgICAgICAgIHBvd2VyKClcbiAgICAgICAgICBwdXNoKFJfcSlcbiAgICAgICAgICBwdXNoKFJfdSlcbiAgICAgICAgICBkaXZpZGUoKVxuICAgICAgICAgIHN1YnRyYWN0KClcbiAgICAgICAgICBhZGQoKVxuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKVxuICAgICAgICAgIGRpdmlkZSgpXG4gICAgICAgICAgUl92ID0gcG9wKClcblxuICAgICAgICAgICAqIGZhY3RvcmluZyB0aGUgcXVhcnRpYyBpbnRvIHR3byBxdWFkcmF0aWNzOlxuXG4gICAgICAgICAgICogbm93IGJ1aWxkIHRoZSBwb2x5bm9taWFsXG4gICAgICAgICAgcHVzaChzeW1ib2woU0VDUkVUWCkpXG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpXG4gICAgICAgICAgcG93ZXIoKVxuXG4gICAgICAgICAgcHVzaChSX3MpXG4gICAgICAgICAgcHVzaChzeW1ib2woU0VDUkVUWCkpXG4gICAgICAgICAgbXVsdGlwbHkoKVxuXG4gICAgICAgICAgcHVzaChSX3QpXG5cbiAgICAgICAgICBhZGQoKVxuICAgICAgICAgIGFkZCgpXG5cbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhY3RvcmVkIHF1YXJ0aWMgMTogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcblxuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKVxuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKVxuICAgICAgICAgIHBvd2VyKClcblxuICAgICAgICAgIHB1c2goUl91KVxuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKVxuICAgICAgICAgIG11bHRpcGx5KClcblxuICAgICAgICAgIHB1c2goUl92KVxuXG4gICAgICAgICAgYWRkKClcbiAgICAgICAgICBhZGQoKVxuXG4gICAgICAgICAgY29uc29sZS5sb2coXCJmYWN0b3JlZCBxdWFydGljIDI6IFwiICsgc3RhY2tbdG9zLTFdLnRvU3RyaW5nKCkpXG4gICAgICAgICAgcG9wKClcblxuICAgICAgICAgIHJlc3RvcmUoKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAqL1xuICAgICAgICAgIC8vIEZlcnJhcmkncyBzb2x1dGlvblxuICAgICAgICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1F1YXJ0aWNfZnVuY3Rpb24jRmVycmFyaS4yN3Nfc29sdXRpb25cbiAgICAgICAgICAvLyBmaW5kaW5nIHRoZSBcIm1cIiBpbiB0aGUgZGVwcmVzc2VkIGVxdWF0aW9uXG4gICAgICAgICAgcHVzaF9yYXRpb25hbCg1LCAyKTtcbiAgICAgICAgICBwdXNoKFJfcCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBjb2VmZjIgPSBwb3AoKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgICAgcHVzaChSX3ApO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgcHVzaChSX3IpO1xuICAgICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgICAgY29lZmYzID0gcG9wKCk7XG4gICAgICAgICAgcHVzaChSX3ApO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKC0xLCAyKTtcbiAgICAgICAgICBwdXNoKFJfcCk7XG4gICAgICAgICAgcHVzaChSX3IpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKC0xLCA4KTtcbiAgICAgICAgICBwdXNoKFJfcSk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBjb2VmZjQgPSBwb3AoKTtcbiAgICAgICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDMpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgcHVzaChjb2VmZjIpO1xuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2goY29lZmYzKTtcbiAgICAgICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoKGNvZWZmNCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlc29sdmVudEN1YmljOiBcIiArIHN0YWNrW3RvcyAtIDFdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSk7XG4gICAgICAgICAgcm9vdHMoKTtcbiAgICAgICAgICByZXNvbHZlbnRDdWJpY1NvbHV0aW9ucyA9IHBvcCgpO1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXNvbHZlbnRDdWJpY1NvbHV0aW9uczogXCIgKyByZXNvbHZlbnRDdWJpY1NvbHV0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFJfbSA9IG51bGw7XG4gICAgICAgICAgcmVmNCA9IHJlc29sdmVudEN1YmljU29sdXRpb25zLnRlbnNvci5lbGVtO1xuICAgICAgICAgIC8vUl9tID0gcmVzb2x2ZW50Q3ViaWNTb2x1dGlvbnMudGVuc29yLmVsZW1bMV1cbiAgICAgICAgICBmb3IgKG4xID0gMCwgbGVuMiA9IHJlZjQubGVuZ3RoOyBuMSA8IGxlbjI7IG4xKyspIHtcbiAgICAgICAgICAgIGVhY2hTb2x1dGlvbiA9IHJlZjRbbjFdO1xuICAgICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXhhbWluaW5nIHNvbHV0aW9uOiBcIiArIGVhY2hTb2x1dGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwdXNoKGVhY2hTb2x1dGlvbik7XG4gICAgICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgcHVzaChSX3ApO1xuICAgICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgICBhYnNWYWxGbG9hdCgpO1xuICAgICAgICAgICAgdG9CZUNoZWNrZWRJRlplcm8gPSBwb3AoKTtcbiAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFicyB2YWx1ZSBpczogXCIgKyBlYWNoU29sdXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1plcm9BdG9tT3JUZW5zb3IodG9CZUNoZWNrZWRJRlplcm8pKSB7XG4gICAgICAgICAgICAgIFJfbSA9IGVhY2hTb2x1dGlvbjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjaG9zZW4gc29sdXRpb246IFwiICsgUl9tKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHVzaChSX20pO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2goUl9wKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgICBzcXJ0UFBsdXMyTSA9IHBvcCgpO1xuICAgICAgICAgIHB1c2goUl9xKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoKHNxcnRQUGx1czJNKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICAgIFR3b1FPdmVyc3FydFBQbHVzMk0gPSBwb3AoKTtcbiAgICAgICAgICBwdXNoKFJfcCk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDMpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgcHVzaChSX20pO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIFRocmVlUFBsdXMyTSA9IHBvcCgpO1xuICAgICAgICAgIC8vIHNvbHV0aW9uMVxuICAgICAgICAgIHB1c2goc3FydFBQbHVzMk0pO1xuICAgICAgICAgIHB1c2goVGhyZWVQUGx1czJNKTtcbiAgICAgICAgICBwdXNoKFR3b1FPdmVyc3FydFBQbHVzMk0pO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICAvLyBzb2x1dGlvbjJcbiAgICAgICAgICBwdXNoKHNxcnRQUGx1czJNKTtcbiAgICAgICAgICBwdXNoKFRocmVlUFBsdXMyTSk7XG4gICAgICAgICAgcHVzaChUd29RT3ZlcnNxcnRQUGx1czJNKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICAvLyBzb2x1dGlvbjNcbiAgICAgICAgICBwdXNoKHNxcnRQUGx1czJNKTtcbiAgICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgICBwdXNoKFRocmVlUFBsdXMyTSk7XG4gICAgICAgICAgcHVzaChUd29RT3ZlcnNxcnRQUGx1czJNKTtcbiAgICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICAvLyBzb2x1dGlvbjRcbiAgICAgICAgICBwdXNoKHNxcnRQUGx1czJNKTtcbiAgICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgICBwdXNoKFRocmVlUFBsdXMyTSk7XG4gICAgICAgICAgcHVzaChUd29RT3ZlcnNxcnRQUGx1czJNKTtcbiAgICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgICAgIGRpdmlkZSgpO1xuICAgICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gUSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgcHVzaChSX2RldGVybWluYW50KTtcbiAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgYWJzVmFsRmxvYXQoKTtcbiAgICAgICAgUl9kZXRlcm1pbmFudF9zaW1wbGlmaWVkX3RvQ2hlY2tJZlplcm8gPSBwb3AoKTtcbiAgICAgICAgcHVzaChSX0RFTFRBMCk7XG4gICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgIGFic1ZhbEZsb2F0KCk7XG4gICAgICAgIFJfREVMVEEwX3NpbXBsaWZpZWRfdG9DaGVja0lmWmVybyA9IHBvcCgpO1xuICAgICAgICBTX0NIRUNLRURfQVNfTk9UX1pFUk8gPSBmYWxzZTtcbiAgICAgICAgY2hvaWNlT2ZSYWRpY2FsSW5RU29TSXNOb3RaZXJvID0gMDtcbiAgICAgICAgd2hpbGUgKCFTX0NIRUNLRURfQVNfTk9UX1pFUk8pIHtcbiAgICAgICAgICBRX0NIRUNLRURfQVNfTk9UX1pFUk8gPSBmYWxzZTtcbiAgICAgICAgICBmbGlwU2lnbk9GUmFkaWNhbFNvUUlzTm90WmVybyA9IGZhbHNlO1xuICAgICAgICAgIHdoaWxlICghUV9DSEVDS0VEX0FTX05PVF9aRVJPKSB7XG4gICAgICAgICAgICAvLyBEMSB1bmRlciB0aGUgb3V0ZXIgcmFkaWNhbFxuICAgICAgICAgICAgcHVzaChSX0RFTFRBMSk7XG4gICAgICAgICAgICAvLyBEMV4yIHVuZGVyIHRoZSBpbm5lciByYWRpY2FsXG4gICAgICAgICAgICBwdXNoKFJfREVMVEExKTtcbiAgICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgICAvLyA0KkQwXjMgdW5kZXIgdGhlIGlubmVyIHJhZGljYWxcbiAgICAgICAgICAgIHB1c2hfaW50ZWdlcigtNCk7XG4gICAgICAgICAgICBwdXNoKFJfREVMVEEwKTtcbiAgICAgICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgLy8gYWRkaXRpb24gdW5kZXIgdGhlIGlubmVyIHJhZGljYWxcbiAgICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgICAgLy8gdGhlIHNlY29uZCByYWRpY2FsXG4gICAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICAgIGlmIChmbGlwU2lnbk9GUmFkaWNhbFNvUUlzTm90WmVybykge1xuICAgICAgICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoZSBhZGRpdGlvbiB1bmRlciB0aGUgb3V0ZXIgcmFkaWNhbFxuICAgICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgICAvLyBjb250ZW50IG9mIG91dGVyIHJhZGljYWwgZGl2aWRlZCBieSB0d29cbiAgICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICAgIGRpdmlkZSgpO1xuICAgICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY29udGVudCBvZiBjdWJpYyByb290OiBcIiArIHN0YWNrW3RvcyAtIDFdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gb3V0ZXIgcmFkaWNhbCBjYWxjdWxhdGlvbjogY3ViaWMgcm9vdFxuICAgICAgICAgICAgLy8gbm93IHdlIGFjdHVhbGx5IGhhdmUgdG8gZmluZCBhbGwgdGhlIHJvb3RzXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGhhdmUgdG8gcGljayB0aGUgb25lIHRoYXQgbWFrZXMgUyAhPSAwXG4gICAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDMpO1xuICAgICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgICAgICBSX3ByaW5jaXBhbEN1YmljUm9vdCA9IHBvcCgpO1xuICAgICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJpbmNpcGFsIGN1YmljIHJvb3Q6IFwiICsgUl9wcmluY2lwYWxDdWJpY1Jvb3QudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0b3MgOiBcIiArIHRvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hvaWNlT2ZSYWRpY2FsSW5RU29TSXNOb3RaZXJvID09PSAwKSB7XG4gICAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2hvc2luZyBwcmluY2lwYWwgY3ViaWMgcm9vdFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwdXNoKFJfcHJpbmNpcGFsQ3ViaWNSb290KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hvaWNlT2ZSYWRpY2FsSW5RU29TSXNOb3RaZXJvID09PSAxKSB7XG4gICAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2hvc2luZyBjdWJpYyByb290IGJleW9uZCBwcmluY2lwYWxcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcHVzaChSX3ByaW5jaXBhbEN1YmljUm9vdCk7XG4gICAgICAgICAgICAgIHB1c2hfcmF0aW9uYWwoLTEsIDIpO1xuICAgICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgICBwdXNoX2ludGVnZXIoMyk7XG4gICAgICAgICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICAgIHB1c2hfcmF0aW9uYWwoLTEsIDIpO1xuICAgICAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgICAgICBwdXNoKFJfcHJpbmNpcGFsQ3ViaWNSb290KTtcbiAgICAgICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNob2ljZU9mUmFkaWNhbEluUVNvU0lzTm90WmVybyA9PT0gMSkge1xuICAgICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNob3NpbmcgY3ViaWMgcm9vdCBiZXlvbmQgYmV5b25kIHByaW5jaXBhbFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwdXNoKFJfcHJpbmNpcGFsQ3ViaWNSb290KTtcbiAgICAgICAgICAgICAgcHVzaF9yYXRpb25hbCgtMSwgMik7XG4gICAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICAgICAgcHVzaChpbWFnaW5hcnl1bml0KTtcbiAgICAgICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICAgICAgcHVzaChSX3ByaW5jaXBhbEN1YmljUm9vdCk7XG4gICAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgICAgIFJfUSA9IHBvcCgpO1xuICAgICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUSBcIiArIFJfUS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRvczogXCIgKyB0b3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHVzaChSX1EpO1xuICAgICAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgICAgIGFic1ZhbEZsb2F0KCk7XG4gICAgICAgICAgICBSX1Ffc2ltcGxpZmllZF90b0NoZWNrSWZaZXJvID0gcG9wKCk7XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJRIHNpbXBsaWZpZWQgYW5kIGFic1wiICsgUl9RX3NpbXBsaWZpZWRfdG9DaGVja0lmWmVyby50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoUl9RX3NpbXBsaWZpZWRfdG9DaGVja0lmWmVybykgJiYgKCFpc1plcm9BdG9tT3JUZW5zb3IoUl9kZXRlcm1pbmFudF9zaW1wbGlmaWVkX3RvQ2hlY2tJZlplcm8pICYmIGlzWmVyb0F0b21PclRlbnNvcihSX0RFTFRBMF9zaW1wbGlmaWVkX3RvQ2hlY2tJZlplcm8pKSkge1xuICAgICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBRIElTIFpFUk8gYW5kIGl0IG1hdHRlcnMsIGZsaXBwaW5nIHRoZSBzaWduXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZsaXBTaWduT0ZSYWRpY2FsU29RSXNOb3RaZXJvID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIFFfQ0hFQ0tFRF9BU19OT1RfWkVSTyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0b3M6IFwiICsgdG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gU1xuICAgICAgICAgIHB1c2hfcmF0aW9uYWwoLTIsIDMpO1xuICAgICAgICAgIHB1c2goUl9wKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2goUl9RKTtcbiAgICAgICAgICBwdXNoKFJfREVMVEEwKTtcbiAgICAgICAgICBwdXNoKFJfUSk7XG4gICAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgLy9yYXRpb25hbGl6ZSgpXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcInJhdGlvbmFsaXNlZDogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICAvL3NpbXBsaWZ5KClcbiAgICAgICAgICBwdXNoKFJfM19hKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgICAgIGRpdmlkZSgpO1xuICAgICAgICAgIHNob3dfcG93ZXJfZGVidWcgPSB0cnVlO1xuICAgICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgICAgUl9TID0gcG9wKCk7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlMgXCIgKyBSX1MudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIG5vdyBjaGVjayBpZiBTIGlzIHplcm9cbiAgICAgICAgICBwdXNoKFJfUyk7XG4gICAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgICBhYnNWYWxGbG9hdCgpO1xuICAgICAgICAgIFJfU19zaW1wbGlmaWVkX3RvQ2hlY2tJZlplcm8gPSBwb3AoKTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUyBcIiArIFJfU19zaW1wbGlmaWVkX3RvQ2hlY2tJZlplcm8udG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoUl9TX3NpbXBsaWZpZWRfdG9DaGVja0lmWmVybykpIHtcbiAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBTIElTIFpFUk8gY2hvc2luZyBhbm90aGVyIGN1YmljIHJvb3RcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaG9pY2VPZlJhZGljYWxJblFTb1NJc05vdFplcm8rKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgU19DSEVDS0VEX0FTX05PVF9aRVJPID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRvczogXCIgKyB0b3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwidG9zOiBcIiArIHRvcyk7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaChwNCk7XG4gICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDQpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgUl9taW51c19iX292ZXJfNGEgPSBwb3AoKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC00KTtcbiAgICAgICAgcHVzaChSX1MpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgcHVzaChSX3ApO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICBSX21pbnVzXzRTMl9taW51c18ycCA9IHBvcCgpO1xuICAgICAgICBwdXNoKFJfcSk7XG4gICAgICAgIHB1c2goUl9TKTtcbiAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgIFJfcV9vdmVyX1MgPSBwb3AoKTtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJ0b3MgYmVmb3JlIHB1dHRpbmcgdG9nZXRoZXIgdGhlIDQgc29sdXRpb25zOiBcIiArIHRvcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmlyc3Qgc29sdXRpb25cbiAgICAgICAgcHVzaChSX21pbnVzX2Jfb3Zlcl80YSk7IC8vIGZpcnN0IHRlcm1cbiAgICAgICAgcHVzaChSX1MpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICBwdXNoKFJfbWludXNfNFMyX21pbnVzXzJwKTtcbiAgICAgICAgcHVzaChSX3Ffb3Zlcl9TKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICAvLyBzZWNvbmQgc29sdXRpb25cbiAgICAgICAgcHVzaChSX21pbnVzX2Jfb3Zlcl80YSk7IC8vIGZpcnN0IHRlcm1cbiAgICAgICAgcHVzaChSX1MpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICBwdXNoKFJfbWludXNfNFMyX21pbnVzXzJwKTtcbiAgICAgICAgcHVzaChSX3Ffb3Zlcl9TKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgZGl2aWRlKCk7XG4gICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgIC8vIHRoaXJkIHNvbHV0aW9uXG4gICAgICAgIHB1c2goUl9taW51c19iX292ZXJfNGEpOyAvLyBmaXJzdCB0ZXJtXG4gICAgICAgIHB1c2goUl9TKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHB1c2goUl9taW51c180UzJfbWludXNfMnApO1xuICAgICAgICBwdXNoKFJfcV9vdmVyX1MpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgLy8gZm91cnRoIHNvbHV0aW9uXG4gICAgICAgIHB1c2goUl9taW51c19iX292ZXJfNGEpOyAvLyBmaXJzdCB0ZXJtXG4gICAgICAgIHB1c2goUl9TKTtcbiAgICAgICAgYWRkKCk7XG4gICAgICAgIHB1c2goUl9taW51c180UzJfbWludXNfMnApO1xuICAgICAgICBwdXNoKFJfcV9vdmVyX1MpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgIGRpdmlkZSgpO1xuICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgbW92ZVRvcyh0b3MgLSBuKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIEV2YWxfcm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIHlyb3VuZCgpO1xuICB9O1xuXG4gIHlyb3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICB5eXJvdW5kKCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICB5eXJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQ7XG4gICAgZCA9IDAuMDtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmICghaXNOdW1lcmljQXRvbShwMSkpIHtcbiAgICAgIHB1c2hfc3ltYm9sKFJPVU5EKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbGlzdCgyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgZCA9IE1hdGgucm91bmQocDEuZCk7XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzaW50ZWdlcihwMSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoKHAxKTtcbiAgICB5eWZsb2F0KCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKE1hdGgucm91bmQocDEuZCkpO1xuICB9O1xuXG4gIC8vIFRoaXMgc2Nhbm5lciB1c2VzIHRoZSByZWN1cnNpdmUgZGVzY2VudCBtZXRob2QuXG5cbiAgLy8gVGhlIGNoYXIgcG9pbnRlcnMgdG9rZW5fc3RyIGFuZCBzY2FuX3N0ciBhcmUgcG9pbnRlcnMgdG8gdGhlIGlucHV0IHN0cmluZyBhc1xuICAvLyBpbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUuXG5cbiAgLy8gIHwgZyB8IGEgfCBtIHwgbSB8IGEgfCAgIHwgYSB8IGwgfCBwIHwgaCB8IGEgfFxuICAvLyAgICBeICAgICAgICAgICAgICAgICAgIF5cbiAgLy8gICAgdG9rZW5fc3RyICAgICAgICAgICBzY2FuX3N0clxuXG4gIC8vIFRoZSBjaGFyIHBvaW50ZXIgdG9rZW5fYnVmIHBvaW50cyB0byBhIG1hbGxvYyBidWZmZXIuXG5cbiAgLy8gIHwgZyB8IGEgfCBtIHwgbSB8IGEgfCBcXDAgfFxuICAvLyAgICBeXG4gIC8vICAgIHRva2VuX2J1ZlxuXG4gIC8vIEluIHRoZSBzZXF1ZW5jZSBvZiBtZXRob2QgaW52b2NhdGlvbnMgZm9yIHNjYW5uaW5nLFxuICAvLyBmaXJzdCB3ZSBkbyB0aGUgY2FsbHMgZm9yIHNjYW5uaW5nIHRoZSBvcGVyYW5kc1xuICAvLyBvZiB0aGUgb3BlcmF0b3JzIG9mIGxlYXN0IHByZWNlZGVuY2UuXG4gIC8vIFNvLCBzaW5jZSBwcmVjZWRlbmNlIGluIG1hdGhzIGdvZXMgc29tZXRoaW5nIGxpa2VcbiAgLy8gKGZvcm0gaGlnaCB0byBsb3cpIGV4cG9uZW50cywgbXVsdC9kaXYsIHBsdXMvbWludXNcbiAgLy8gc28gd2Ugc2NhbiBmaXJzdCBmb3IgdGVybXMsIHRoZW4gZmFjdG9ycywgdGhlbiBwb3dlcnMuXG4gIC8vIFRoYXQncyB0aGUgZ2VuZXJhbCBpZGVhLCBidXQgb2YgY291cnNlIHdlIGFsc28gaGF2ZSB0byBkZWFsXG4gIC8vIHdpdGggdGhpbmdzIGxpa2UgcGFyZW5zLCBub24tY29tbXV0YXRpdmVcbiAgLy8gZG90IChvciBpbm5lcikgcHJvZHVjdCwgYXNzaWdubWVudHMgYW5kIHRlc3RzLFxuICAvLyBmdW5jdGlvbiBjYWxscyBldGMuXG4gIC8vIE5vdGUgdGhhdCBhXjEvMiBpcywgY29ycmVjdGx5LCBhLzIsIG5vdCwgaW5jb3JyZWN0bHksIHNxcnQoYSksXG4gIC8vIHNlZSBjb21tZW50IGluIHJlbGF0ZWQgdGVzdCBpbiBwb3dlci5jb2ZmZWUgZm9yIG1vcmUgYWJvdXQgdGhpcy5cblxuICAvLyAgTm90ZXM6XG5cbiAgLy8gIEZvcm1lcmx5IGFkZCgpIGFuZCBtdWx0aXBseSgpIHdlcmUgdXNlZCB0byBjb25zdHJ1Y3QgZXhwcmVzc2lvbnMgYnV0XG4gIC8vICB0aGlzIHByZWV2YWx1YXRpb24gY2F1c2VkIHByb2JsZW1zLlxuXG4gIC8vICBGb3IgZXhhbXBsZSwgc3VwcG9zZSBBIGhhcyB0aGUgZmxvYXRpbmcgcG9pbnQgdmFsdWUgaW5mLlxuXG4gIC8vICBCZWZvcmUsIHRoZSBleHByZXNzaW9uIEEvQSByZXN1bHRlZCBpbiAxIGJlY2F1c2UgdGhlIHNjYW5uZXIgd291bGRcbiAgLy8gIGRpdmlkZSB0aGUgc3ltYm9scy5cblxuICAvLyAgQWZ0ZXIgcmVtb3ZpbmcgYWRkKCkgYW5kIG11bHRpcGx5KCksIEEvQSByZXN1bHRzIGluIG5hbiB3aGljaCBpcyB0aGVcbiAgLy8gIGNvcnJlY3QgcmVzdWx0LlxuXG4gIC8vICBUaGUgZnVuY3Rpb25zIG5lZ2F0ZSgpIGFuZCBpbnZlcnNlKCkgYXJlIHVzZWQgYnV0IHRoZXkgZG8gbm90IGNhdXNlXG4gIC8vICBwcm9ibGVtcyB3aXRoIHByZWV2YWx1YXRpb24gb2Ygc3ltYm9scy5cbiAgVF9JTlRFR0VSID0gMTAwMTtcblxuICBUX0RPVUJMRSA9IDEwMDI7XG5cbiAgVF9TWU1CT0wgPSAxMDAzO1xuXG4gIFRfRlVOQ1RJT04gPSAxMDA0O1xuXG4gIFRfTkVXTElORSA9IDEwMDY7XG5cbiAgVF9TVFJJTkcgPSAxMDA3O1xuXG4gIFRfR1RFUSA9IDEwMDg7XG5cbiAgVF9MVEVRID0gMTAwOTtcblxuICBUX0VRID0gMTAxMDtcblxuICBUX05FUSA9IDEwMTE7XG5cbiAgVF9RVU9UQVNTSUdOID0gMTAxMjtcblxuICB0b2tlbiA9IFwiXCI7XG5cbiAgbmV3bGluZV9mbGFnID0gMDtcblxuICBtZXRhX21vZGUgPSAwO1xuXG4gIGlucHV0X3N0ciA9IDA7XG5cbiAgc2Nhbl9zdHIgPSAwO1xuXG4gIHRva2VuX3N0ciA9IDA7XG5cbiAgdG9rZW5fYnVmID0gMDtcblxuICBsYXN0Rm91bmRTeW1ib2wgPSBudWxsO1xuXG4gIHN5bWJvbHNSaWdodE9mQXNzaWdubWVudCA9IG51bGw7XG5cbiAgc3ltYm9sc0xlZnRPZkFzc2lnbm1lbnQgPSBudWxsO1xuXG4gIGlzU3ltYm9sTGVmdE9mQXNzaWdubWVudCA9IG51bGw7XG5cbiAgc2Nhbm5pbmdQYXJhbWV0ZXJzID0gbnVsbDtcblxuICBmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjayA9IG51bGw7XG5cbiAgc2tpcFJvb3RWYXJpYWJsZVRvQmVTb2x2ZWQgPSBmYWxzZTtcblxuICBhc3NpZ25tZW50Rm91bmQgPSBudWxsO1xuXG4gIC8vIFJldHVybnMgbnVtYmVyIG9mIGNoYXJzIHNjYW5uZWQgYW5kIGV4cHIgb24gc3RhY2suXG5cbiAgLy8gUmV0dXJucyB6ZXJvIHdoZW4gbm90aGluZyBsZWZ0IHRvIHNjYW4uXG5cbiAgLy8gdGFrZXMgYSBzdHJpbmdcbiAgc2Nhbm5lZCA9IFwiXCI7XG5cbiAgc2NhbiA9IGZ1bmN0aW9uKHMpIHtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiIyMjIyBzY2FubmluZyBcIiArIHMpO1xuICAgIH1cbiAgICAvL2lmIHM9PVwieT14XCJcbiAgICAvLyAgZGVidWdnZXJcbiAgICAvL2lmIHM9PVwieVwiXG4gICAgLy8gIGRlYnVnZ2VyXG4gICAgLy9pZiBzPT1cImk9c3FydCgtMSlcIlxuICAgIC8vICBkZWJ1Z2dlclxuICAgIGxhc3RGb3VuZFN5bWJvbCA9IG51bGw7XG4gICAgc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50ID0gW107XG4gICAgc3ltYm9sc0xlZnRPZkFzc2lnbm1lbnQgPSBbXTtcbiAgICBpc1N5bWJvbExlZnRPZkFzc2lnbm1lbnQgPSB0cnVlO1xuICAgIHNjYW5uaW5nUGFyYW1ldGVycyA9IFtdO1xuICAgIGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrID0gW1wiXCJdO1xuICAgIGFzc2lnbm1lbnRGb3VuZCA9IGZhbHNlO1xuICAgIHNjYW5uZWQgPSBzO1xuICAgIG1ldGFfbW9kZSA9IDA7XG4gICAgZXhwYW5kaW5nKys7XG4gICAgaW5wdXRfc3RyID0gMDtcbiAgICBzY2FuX3N0ciA9IDA7XG4gICAgZ2V0X25leHRfdG9rZW4oKTtcbiAgICBpZiAodG9rZW4gPT09IFwiXCIpIHtcbiAgICAgIHB1c2goc3ltYm9sKE5JTCkpO1xuICAgICAgZXhwYW5kaW5nLS07XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgc2Nhbl9zdG10KCk7XG4gICAgZXhwYW5kaW5nLS07XG4gICAgaWYgKCFhc3NpZ25tZW50Rm91bmQpIHtcbiAgICAgIHN5bWJvbHNJbkV4cHJlc3Npb25zV2l0aG91dEFzc2lnbm1lbnRzID0gc3ltYm9sc0luRXhwcmVzc2lvbnNXaXRob3V0QXNzaWdubWVudHMuY29uY2F0KHN5bWJvbHNMZWZ0T2ZBc3NpZ25tZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuX3N0ciAtIGlucHV0X3N0cjtcbiAgfTtcblxuICAvLyB0YWtlcyBhIHN0cmluZ1xuICBzY2FuX21ldGEgPSBmdW5jdGlvbihzKSB7XG4gICAgc2Nhbm5lZCA9IHM7XG4gICAgbWV0YV9tb2RlID0gMTtcbiAgICBleHBhbmRpbmcrKztcbiAgICBpbnB1dF9zdHIgPSAwO1xuICAgIHNjYW5fc3RyID0gMDtcbiAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgIGlmICh0b2tlbiA9PT0gXCJcIikge1xuICAgICAgcHVzaChzeW1ib2woTklMKSk7XG4gICAgICBleHBhbmRpbmctLTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBzY2FuX3N0bXQoKTtcbiAgICBleHBhbmRpbmctLTtcbiAgICByZXR1cm4gdG9rZW5fc3RyIC0gaW5wdXRfc3RyO1xuICB9O1xuXG4gIHNjYW5fc3RtdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhc3NpZ25tZW50SXNPZlF1b3RlZFR5cGUsIGV4aXN0aW5nRGVwZW5kZW5jaWVzLCBpLCBpbmRleE9mU3ltYm9sTGVmdE9mQXNzaWdubWVudCwgbDEsIGxlbiwgbGVuMSwgbTEsIHN5bWJvbExlZnRPZkFzc2lnbm1lbnQ7XG4gICAgc2Nhbl9yZWxhdGlvbigpO1xuICAgIGFzc2lnbm1lbnRJc09mUXVvdGVkVHlwZSA9IGZhbHNlO1xuICAgIGlmICh0b2tlbiA9PT0gVF9RVU9UQVNTSUdOKSB7XG4gICAgICBhc3NpZ25tZW50SXNPZlF1b3RlZFR5cGUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodG9rZW4gPT09IFRfUVVPVEFTU0lHTiB8fCB0b2tlbiA9PT0gJz0nKSB7XG4gICAgICBzeW1ib2xMZWZ0T2ZBc3NpZ25tZW50ID0gbGFzdEZvdW5kU3ltYm9sO1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiYXNzaWdubWVudCFcIik7XG4gICAgICB9XG4gICAgICBhc3NpZ25tZW50Rm91bmQgPSB0cnVlO1xuICAgICAgaXNTeW1ib2xMZWZ0T2ZBc3NpZ25tZW50ID0gZmFsc2U7XG4gICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgcHVzaF9zeW1ib2woU0VUUSk7XG4gICAgICBzd2FwKCk7XG4gICAgICAvLyBpZiBpdCdzIGEgOj0gdGhlbiBhZGQgYSBxdW90ZVxuICAgICAgaWYgKGFzc2lnbm1lbnRJc09mUXVvdGVkVHlwZSkge1xuICAgICAgICBwdXNoX3N5bWJvbChRVU9URSk7XG4gICAgICB9XG4gICAgICBzY2FuX3JlbGF0aW9uKCk7XG4gICAgICAvLyBpZiBpdCdzIGEgOj0gdGhlbiB5b3UgaGF2ZSB0byBsaXN0XG4gICAgICAvLyB0b2dldGhlciB0aGUgcXVvdGUgYW5kIGl0cyBhcmd1bWVudFxuICAgICAgaWYgKGFzc2lnbm1lbnRJc09mUXVvdGVkVHlwZSkge1xuICAgICAgICBsaXN0KDIpO1xuICAgICAgfVxuICAgICAgbGlzdCgzKTtcbiAgICAgIGlzU3ltYm9sTGVmdE9mQXNzaWdubWVudCA9IHRydWU7XG4gICAgICBpZiAoY29kZUdlbikge1xuICAgICAgICAvLyBpbiBjYXNlIG9mIHJlLWFzc2lnbm1lbnQsIHRoZSBzeW1ib2wgb24gdGhlXG4gICAgICAgIC8vIGxlZnQgd2lsbCBhbHNvIGJlIGluIHRoZSBzZXQgb2YgdGhlIHN5bWJvbHNcbiAgICAgICAgLy8gb24gdGhlIHJpZ2h0LiBJbiB0aGF0IGNhc2UganVzdCByZW1vdmUgaXQgZnJvbVxuICAgICAgICAvLyB0aGUgc3ltYm9scyBvbiB0aGUgcmlnaHQuXG4gICAgICAgIGluZGV4T2ZTeW1ib2xMZWZ0T2ZBc3NpZ25tZW50ID0gc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50LmluZGV4T2Yoc3ltYm9sTGVmdE9mQXNzaWdubWVudCk7XG4gICAgICAgIGlmIChpbmRleE9mU3ltYm9sTGVmdE9mQXNzaWdubWVudCAhPT0gLTEpIHtcbiAgICAgICAgICBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnQuc3BsaWNlKGluZGV4T2ZTeW1ib2xMZWZ0T2ZBc3NpZ25tZW50LCAxKTtcbiAgICAgICAgICBzeW1ib2xzSGF2aW5nUmVhc3NpZ25tZW50cy5wdXNoKHN5bWJvbExlZnRPZkFzc2lnbm1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBwcmludCBvdXQgdGhlIGltbWVkaWF0ZSBkZXBlbmRlbmNpZXNcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJsb2NhbGx5LCBcIiArIHN5bWJvbExlZnRPZkFzc2lnbm1lbnQgKyBcIiBkZXBlbmRzIG9uOiBcIik7XG4gICAgICAgICAgZm9yIChsMSA9IDAsIGxlbiA9IHN5bWJvbHNSaWdodE9mQXNzaWdubWVudC5sZW5ndGg7IGwxIDwgbGVuOyBsMSsrKSB7XG4gICAgICAgICAgICBpID0gc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50W2wxXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiICBcIiArIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBvayBhZGQgdGhlIGxvY2FsIGRlcGVuZGVuY2llcyB0byB0aGUgZXhpc3RpbmdcbiAgICAgICAgLy8gZGVwZW5kZW5jaWVzIG9mIHRoaXMgbGVmdC12YWx1ZSBzeW1ib2xcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIGV4aXRpbmcgZGVwZW5kZW5jaWVzIGxpc3QgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgICAgICBpZiAoc3ltYm9sc0RlcGVuZGVuY2llc1tzeW1ib2xMZWZ0T2ZBc3NpZ25tZW50XSA9PSBudWxsKSB7XG4gICAgICAgICAgc3ltYm9sc0RlcGVuZGVuY2llc1tzeW1ib2xMZWZ0T2ZBc3NpZ25tZW50XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGV4aXN0aW5nRGVwZW5kZW5jaWVzID0gc3ltYm9sc0RlcGVuZGVuY2llc1tzeW1ib2xMZWZ0T2ZBc3NpZ25tZW50XTtcbi8vIGNvcHkgb3ZlciB0aGUgbmV3IGRlcGVuZGVuY2llcyB0byB0aGUgZXhpc3Rpbmdcbi8vIGRlcGVuZGVuY2llcyBhdm9pZGluZyByZXBldGl0aW9uc1xuICAgICAgICBmb3IgKG0xID0gMCwgbGVuMSA9IHN5bWJvbHNSaWdodE9mQXNzaWdubWVudC5sZW5ndGg7IG0xIDwgbGVuMTsgbTErKykge1xuICAgICAgICAgIGkgPSBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnRbbTFdO1xuICAgICAgICAgIGlmIChleGlzdGluZ0RlcGVuZGVuY2llcy5pbmRleE9mKGkpID09PSAtMSkge1xuICAgICAgICAgICAgZXhpc3RpbmdEZXBlbmRlbmNpZXMucHVzaChpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN5bWJvbHNSaWdodE9mQXNzaWdubWVudCA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBzY2FuX3JlbGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgc2Nhbl9leHByZXNzaW9uKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBUX0VROlxuICAgICAgICBwdXNoX3N5bWJvbChURVNURVEpO1xuICAgICAgICBzd2FwKCk7XG4gICAgICAgIGdldF9uZXh0X3Rva2VuKCk7XG4gICAgICAgIHNjYW5fZXhwcmVzc2lvbigpO1xuICAgICAgICByZXR1cm4gbGlzdCgzKTtcbiAgICAgIGNhc2UgVF9ORVE6XG4gICAgICAgIHB1c2hfc3ltYm9sKE5PVCk7XG4gICAgICAgIHN3YXAoKTtcbiAgICAgICAgcHVzaF9zeW1ib2woVEVTVEVRKTtcbiAgICAgICAgc3dhcCgpO1xuICAgICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgICBzY2FuX2V4cHJlc3Npb24oKTtcbiAgICAgICAgbGlzdCgzKTtcbiAgICAgICAgcmV0dXJuIGxpc3QoMik7XG4gICAgICBjYXNlIFRfTFRFUTpcbiAgICAgICAgcHVzaF9zeW1ib2woVEVTVExFKTtcbiAgICAgICAgc3dhcCgpO1xuICAgICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgICBzY2FuX2V4cHJlc3Npb24oKTtcbiAgICAgICAgcmV0dXJuIGxpc3QoMyk7XG4gICAgICBjYXNlIFRfR1RFUTpcbiAgICAgICAgcHVzaF9zeW1ib2woVEVTVEdFKTtcbiAgICAgICAgc3dhcCgpO1xuICAgICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgICBzY2FuX2V4cHJlc3Npb24oKTtcbiAgICAgICAgcmV0dXJuIGxpc3QoMyk7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgcHVzaF9zeW1ib2woVEVTVExUKTtcbiAgICAgICAgc3dhcCgpO1xuICAgICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgICBzY2FuX2V4cHJlc3Npb24oKTtcbiAgICAgICAgcmV0dXJuIGxpc3QoMyk7XG4gICAgICBjYXNlICc+JzpcbiAgICAgICAgcHVzaF9zeW1ib2woVEVTVEdUKTtcbiAgICAgICAgc3dhcCgpO1xuICAgICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgICBzY2FuX2V4cHJlc3Npb24oKTtcbiAgICAgICAgcmV0dXJuIGxpc3QoMyk7XG4gICAgfVxuICB9O1xuXG4gIHNjYW5fZXhwcmVzc2lvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoO1xuICAgIGggPSB0b3M7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnKyc6XG4gICAgICAgIGdldF9uZXh0X3Rva2VuKCk7XG4gICAgICAgIHNjYW5fdGVybSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJy0nOlxuICAgICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgICBzY2FuX3Rlcm0oKTtcbiAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc2Nhbl90ZXJtKCk7XG4gICAgfVxuICAgIHdoaWxlIChuZXdsaW5lX2ZsYWcgPT09IDAgJiYgKHRva2VuID09PSAnKycgfHwgdG9rZW4gPT09ICctJykpIHtcbiAgICAgIGlmICh0b2tlbiA9PT0gJysnKSB7XG4gICAgICAgIGdldF9uZXh0X3Rva2VuKCk7XG4gICAgICAgIHNjYW5fdGVybSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0X25leHRfdG9rZW4oKTtcbiAgICAgICAgc2Nhbl90ZXJtKCk7XG4gICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodG9zIC0gaCA+IDEpIHtcbiAgICAgIGxpc3QodG9zIC0gaCk7XG4gICAgICBwdXNoX3N5bWJvbChBREQpO1xuICAgICAgc3dhcCgpO1xuICAgICAgcmV0dXJuIGNvbnMoKTtcbiAgICB9XG4gIH07XG5cbiAgaXNfZmFjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCh0eXBlb2YgdG9rZW4uY2hhckNvZGVBdCA9PT0gXCJmdW5jdGlvblwiID8gdG9rZW4uY2hhckNvZGVBdCgwKSA6IHZvaWQgMCkgPT09IGRvdHByb2RfdW5pY29kZSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJyonOlxuICAgICAgY2FzZSAnLyc6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSAnKCc6XG4gICAgICBjYXNlIFRfU1lNQk9MOlxuICAgICAgY2FzZSBUX0ZVTkNUSU9OOlxuICAgICAgY2FzZSBUX0lOVEVHRVI6XG4gICAgICBjYXNlIFRfRE9VQkxFOlxuICAgICAgY2FzZSBUX1NUUklORzpcbiAgICAgICAgaWYgKG5ld2xpbmVfZmxhZykgeyAvLyBpbXBsaWNpdCBtdWwgY2FuJ3QgY3Jvc3MgbGluZVxuICAgICAgICAgIHNjYW5fc3RyID0gdG9rZW5fc3RyOyAvLyBiZXR0ZXIgZXJyb3IgZGlzcGxheVxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIHNpbXBsaWZ5XzFfaW5fcHJvZHVjdHMgPSBmdW5jdGlvbih0b3MsIGgpIHtcbiAgICBpZiAodG9zID4gaCAmJiBpc3JhdGlvbmFsKHN0YWNrW3RvcyAtIDFdKSAmJiBlcXVhbG4oc3RhY2tbdG9zIC0gMV0sIDEpKSB7XG4gICAgICByZXR1cm4gcG9wKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGNhbGN1bGF0ZSBhd2F5IGNvbnNlY3V0aXZlIGNvbnN0YW50c1xuICBtdWx0aXBseV9jb25zZWN1dGl2ZV9jb25zdGFudHMgPSBmdW5jdGlvbih0b3MsIGgpIHtcbiAgICBpZiAodG9zID4gaCArIDEgJiYgaXNOdW1lcmljQXRvbShzdGFja1t0b3MgLSAyXSkgJiYgaXNOdW1lcmljQXRvbShzdGFja1t0b3MgLSAxXSkpIHtcbiAgICAgIHJldHVybiBtdWx0aXBseSgpO1xuICAgIH1cbiAgfTtcblxuICBzY2FuX3Rlcm0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaDtcbiAgICBoID0gdG9zO1xuICAgIHNjYW5fZmFjdG9yKCk7XG4gICAgaWYgKHBhcnNlX3RpbWVfc2ltcGxpZmljYXRpb25zKSB7XG4gICAgICBzaW1wbGlmeV8xX2luX3Byb2R1Y3RzKHRvcywgaCk7XG4gICAgfVxuICAgIHdoaWxlIChpc19mYWN0b3IoKSkge1xuICAgICAgaWYgKHRva2VuID09PSAnKicpIHtcbiAgICAgICAgZ2V0X25leHRfdG9rZW4oKTtcbiAgICAgICAgc2Nhbl9mYWN0b3IoKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4gPT09ICcvJykge1xuICAgICAgICAvLyBpbiBjYXNlIG9mIDEvLi4uIHRoZW5cbiAgICAgICAgLy8gd2Ugc2Nhbm5lZCB0aGUgMSwgd2UgZ2V0IHJpZFxuICAgICAgICAvLyBvZiBpdCBiZWNhdXNlIG90aGVyd2lzZSBpdCBiZWNvbWVzXG4gICAgICAgIC8vIGFuIGV4dHJhIGZhY3RvciB0aGF0IHdhc24ndCB0aGVyZSBhbmRcbiAgICAgICAgLy8gdGhpbmdzIGxpa2VcbiAgICAgICAgLy8gMS8oMiphKSBiZWNvbWUgMSooMS8oMiphKSlcbiAgICAgICAgc2ltcGxpZnlfMV9pbl9wcm9kdWN0cyh0b3MsIGgpO1xuICAgICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgICBzY2FuX2ZhY3RvcigpO1xuICAgICAgICBpbnZlcnNlKCk7XG4gICAgICB9IGVsc2UgaWYgKCh0eXBlb2YgdG9rZW4uY2hhckNvZGVBdCA9PT0gXCJmdW5jdGlvblwiID8gdG9rZW4uY2hhckNvZGVBdCgwKSA6IHZvaWQgMCkgPT09IGRvdHByb2RfdW5pY29kZSkge1xuICAgICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgICBwdXNoX3N5bWJvbChJTk5FUik7XG4gICAgICAgIHN3YXAoKTtcbiAgICAgICAgc2Nhbl9mYWN0b3IoKTtcbiAgICAgICAgbGlzdCgzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYW5fZmFjdG9yKCk7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VfdGltZV9zaW1wbGlmaWNhdGlvbnMpIHtcbiAgICAgICAgbXVsdGlwbHlfY29uc2VjdXRpdmVfY29uc3RhbnRzKHRvcywgaCk7XG4gICAgICAgIHNpbXBsaWZ5XzFfaW5fcHJvZHVjdHModG9zLCBoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGggPT09IHRvcykge1xuICAgICAgcmV0dXJuIHB1c2hfaW50ZWdlcigxKTtcbiAgICB9IGVsc2UgaWYgKHRvcyAtIGggPiAxKSB7XG4gICAgICBsaXN0KHRvcyAtIGgpO1xuICAgICAgcHVzaF9zeW1ib2woTVVMVElQTFkpO1xuICAgICAgc3dhcCgpO1xuICAgICAgcmV0dXJuIGNvbnMoKTtcbiAgICB9XG4gIH07XG5cbiAgc2Nhbl9wb3dlciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0b2tlbiA9PT0gJ14nKSB7XG4gICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgcHVzaF9zeW1ib2woUE9XRVIpO1xuICAgICAgc3dhcCgpO1xuICAgICAgc2Nhbl9mYWN0b3IoKTtcbiAgICAgIHJldHVybiBsaXN0KDMpO1xuICAgIH1cbiAgfTtcblxuICBzY2FuX2luZGV4ID0gZnVuY3Rpb24oaCkge1xuICAgIC8vY29uc29sZS5sb2cgXCJbIGFzIGluZGV4XCJcbiAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgIHB1c2hfc3ltYm9sKElOREVYKTtcbiAgICBzd2FwKCk7XG4gICAgc2Nhbl9leHByZXNzaW9uKCk7XG4gICAgd2hpbGUgKHRva2VuID09PSAnLCcpIHtcbiAgICAgIGdldF9uZXh0X3Rva2VuKCk7XG4gICAgICBzY2FuX2V4cHJlc3Npb24oKTtcbiAgICB9XG4gICAgaWYgKHRva2VuICE9PSAnXScpIHtcbiAgICAgIHNjYW5fZXJyb3IoXCJdIGV4cGVjdGVkXCIpO1xuICAgIH1cbiAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgIHJldHVybiBsaXN0KHRvcyAtIGgpO1xuICB9O1xuXG4gIHNjYW5fZmFjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpcnN0RmFjdG9ySXNOdW1iZXIsIGg7XG4gICAgaCA9IHRvcztcbiAgICAvL2NvbnNvbGUubG9nIFwic2Nhbl9mYWN0b3IgdG9rZW46IFwiICsgdG9rZW5cbiAgICBmaXJzdEZhY3RvcklzTnVtYmVyID0gZmFsc2U7XG4gICAgaWYgKHRva2VuID09PSAnKCcpIHtcbiAgICAgIHNjYW5fc3ViZXhwcigpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFRfU1lNQk9MKSB7XG4gICAgICBzY2FuX3N5bWJvbCgpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFRfRlVOQ1RJT04pIHtcbiAgICAgIHNjYW5fZnVuY3Rpb25fY2FsbF93aXRoX2Z1bmN0aW9uX25hbWUoKTtcbiAgICB9IGVsc2UgaWYgKHRva2VuID09PSAnWycpIHtcbiAgICAgIC8vY29uc29sZS5sb2cgXCJbIGFzIHRlbnNvclwiXG4gICAgICAvL2RlYnVnZ2VyXG4gICAgICBzY2FuX3RlbnNvcigpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFRfSU5URUdFUikge1xuICAgICAgZmlyc3RGYWN0b3JJc051bWJlciA9IHRydWU7XG4gICAgICBiaWdudW1fc2Nhbl9pbnRlZ2VyKHRva2VuX2J1Zik7XG4gICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFRfRE9VQkxFKSB7XG4gICAgICBmaXJzdEZhY3RvcklzTnVtYmVyID0gdHJ1ZTtcbiAgICAgIGJpZ251bV9zY2FuX2Zsb2F0KHRva2VuX2J1Zik7XG4gICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09IFRfU1RSSU5HKSB7XG4gICAgICBzY2FuX3N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FuX2Vycm9yKFwic3ludGF4IGVycm9yXCIpO1xuICAgIH1cbiAgICAvLyBhZnRlciB0aGUgbWFpbiBpbml0aWFsIHBhcnQgb2YgdGhlIGZhY3RvciB0aGF0XG4gICAgLy8gd2UganVzdCBzY2FubmVkIGFib3ZlLFxuICAgIC8vIHdlIGNhbiBnZXQgYW4gYXJiaXRyYXJ5IGFib3V0IG9mIGFwcGVuZGFnZXNcbiAgICAvLyBvZiB0aGUgZm9ybSAuLi5bLi4uXSguLi4pLi4uXG4gICAgLy8gSWYgdGhlIG1haW4gcGFydCBpcyBub3QgYSBudW1iZXIsIHRoZW4gdGhlc2UgYXJlIGFsbCwgcmVzcGVjdGl2ZWx5LFxuICAgIC8vICAtIGluZGV4IHJlZmVyZW5jZXMgKGFzIG9wcG9zZWQgdG8gdGVuc29yIGRlZmluaXRpb24pIGFuZFxuICAgIC8vICAtIGZ1bmN0aW9uIGNhbGxzIHdpdGhvdXQgYW4gZXhwbGljaXQgZnVuY3Rpb24gbmFtZVxuICAgIC8vICAgIChpbnN0ZWFkIG9mIHN1YmV4cHJlc3Npb25zIG9yIHBhcmFtZXRlcnMgb2YgZnVuY3Rpb25cbiAgICAvLyAgICBkZWZpbml0aW9ucyBvciBmdW5jdGlvbiBjYWxscyB3aXRoIGFuIGV4cGxpY2l0IGZ1bmN0aW9uXG4gICAgLy8gICAgbmFtZSksIHJlc3BlY3RpdmVseVxuICAgIHdoaWxlICh0b2tlbiA9PT0gJ1snIHx8IHRva2VuID09PSAnKCcgJiYgbmV3bGluZV9mbGFnID09PSAwICYmICFmaXJzdEZhY3RvcklzTnVtYmVyKSB7XG4gICAgICBpZiAodG9rZW4gPT09ICdbJykge1xuICAgICAgICBzY2FuX2luZGV4KGgpO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJygnKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2cgXCIoIGFzIGZ1bmN0aW9uIGNhbGwgd2l0aG91dCBmdW5jdGlvbiBuYW1lIFwiXG4gICAgICAgIHNjYW5fZnVuY3Rpb25fY2FsbF93aXRob3V0X2Z1bmN0aW9uX25hbWUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKHRva2VuID09PSAnIScpIHtcbiAgICAgIGdldF9uZXh0X3Rva2VuKCk7XG4gICAgICBwdXNoX3N5bWJvbChGQUNUT1JJQUwpO1xuICAgICAgc3dhcCgpO1xuICAgICAgbGlzdCgyKTtcbiAgICB9XG4gICAgd2hpbGUgKCh0eXBlb2YgdG9rZW4uY2hhckNvZGVBdCA9PT0gXCJmdW5jdGlvblwiID8gdG9rZW4uY2hhckNvZGVBdCgwKSA6IHZvaWQgMCkgPT09IHRyYW5zcG9zZV91bmljb2RlKSB7XG4gICAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgICAgcHVzaF9zeW1ib2woVFJBTlNQT1NFKTtcbiAgICAgIHN3YXAoKTtcbiAgICAgIGxpc3QoMik7XG4gICAgfVxuICAgIHJldHVybiBzY2FuX3Bvd2VyKCk7XG4gIH07XG5cbiAgYWRkU3ltYm9sUmlnaHRPZkFzc2lnbm1lbnQgPSBmdW5jdGlvbih0aGVTeW1ib2wpIHtcbiAgICB2YXIgaSwgbDEsIHByZWZpeFZhciwgcmVmMjtcbiAgICBpZiAocHJlZGVmaW5lZFN5bWJvbHNJbkdsb2JhbFNjb3BlX2RvTm90VHJhY2tJbkRlcGVuZGVuY2llcy5pbmRleE9mKHRoZVN5bWJvbCkgPT09IC0xICYmIHN5bWJvbHNSaWdodE9mQXNzaWdubWVudC5pbmRleE9mKHRoZVN5bWJvbCkgPT09IC0xICYmIHN5bWJvbHNSaWdodE9mQXNzaWdubWVudC5pbmRleE9mKFwiJ1wiICsgdGhlU3ltYm9sKSA9PT0gLTEgJiYgIXNraXBSb290VmFyaWFibGVUb0JlU29sdmVkKSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIuLi4gYWRkaW5nIHN5bWJvbDogXCIgKyB0aGVTeW1ib2wgKyBcIiB0byB0aGUgc2V0IG9mIHRoZSBzeW1ib2xzIHJpZ2h0IG9mIGFzc2lnbm1lbnRcIik7XG4gICAgICB9XG4gICAgICBwcmVmaXhWYXIgPSBcIlwiO1xuICAgICAgZm9yIChpID0gbDEgPSAxLCByZWYyID0gZnVuY3Rpb25JbnZva2F0aW9uc1NjYW5uaW5nU3RhY2subGVuZ3RoOyAoMSA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDEgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICAgIGlmIChmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFja1tpXSAhPT0gXCJcIikge1xuICAgICAgICAgIHByZWZpeFZhciArPSBmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFja1tpXSArIFwiX1wiICsgaSArIFwiX1wiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGVTeW1ib2wgPSBwcmVmaXhWYXIgKyB0aGVTeW1ib2w7XG4gICAgICByZXR1cm4gc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50LnB1c2godGhlU3ltYm9sKTtcbiAgICB9XG4gIH07XG5cbiAgYWRkU3ltYm9sTGVmdE9mQXNzaWdubWVudCA9IGZ1bmN0aW9uKHRoZVN5bWJvbCkge1xuICAgIHZhciBpLCBsMSwgcHJlZml4VmFyLCByZWYyO1xuICAgIGlmIChwcmVkZWZpbmVkU3ltYm9sc0luR2xvYmFsU2NvcGVfZG9Ob3RUcmFja0luRGVwZW5kZW5jaWVzLmluZGV4T2YodGhlU3ltYm9sKSA9PT0gLTEgJiYgc3ltYm9sc0xlZnRPZkFzc2lnbm1lbnQuaW5kZXhPZih0aGVTeW1ib2wpID09PSAtMSAmJiBzeW1ib2xzTGVmdE9mQXNzaWdubWVudC5pbmRleE9mKFwiJ1wiICsgdGhlU3ltYm9sKSA9PT0gLTEgJiYgIXNraXBSb290VmFyaWFibGVUb0JlU29sdmVkKSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIuLi4gYWRkaW5nIHN5bWJvbDogXCIgKyB0aGVTeW1ib2wgKyBcIiB0byB0aGUgc2V0IG9mIHRoZSBzeW1ib2xzIGxlZnQgb2YgYXNzaWdubWVudFwiKTtcbiAgICAgIH1cbiAgICAgIHByZWZpeFZhciA9IFwiXCI7XG4gICAgICBmb3IgKGkgPSBsMSA9IDEsIHJlZjIgPSBmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5sZW5ndGg7ICgxIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMSA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgICAgaWYgKGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrW2ldICE9PSBcIlwiKSB7XG4gICAgICAgICAgcHJlZml4VmFyICs9IGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrW2ldICsgXCJfXCIgKyBpICsgXCJfXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoZVN5bWJvbCA9IHByZWZpeFZhciArIHRoZVN5bWJvbDtcbiAgICAgIHJldHVybiBzeW1ib2xzTGVmdE9mQXNzaWdubWVudC5wdXNoKHRoZVN5bWJvbCk7XG4gICAgfVxuICB9O1xuXG4gIHNjYW5fc3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRva2VuICE9PSBUX1NZTUJPTCkge1xuICAgICAgc2Nhbl9lcnJvcihcInN5bWJvbCBleHBlY3RlZFwiKTtcbiAgICB9XG4gICAgaWYgKG1ldGFfbW9kZSAmJiB0b2tlbl9idWYubGVuZ3RoID09PSAxKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuX2J1ZlswXSkge1xuICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgICBwdXNoKHN5bWJvbChNRVRBQSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICBwdXNoKHN5bWJvbChNRVRBQikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICBwdXNoKHN5bWJvbChNRVRBWCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHB1c2godXNyX3N5bWJvbCh0b2tlbl9idWYpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaCh1c3Jfc3ltYm9sKHRva2VuX2J1ZikpO1xuICAgIH1cbiAgICAvL2NvbnNvbGUubG9nIFwiZm91bmQgc3ltYm9sOiBcIiArIHRva2VuX2J1ZlxuICAgIGlmIChzY2FubmluZ1BhcmFtZXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJvdXQgb2Ygc2Nhbm5pbmcgcGFyYW1ldGVycywgcHJvY2Vzc2luZyBcIiArIHRva2VuX2J1Zik7XG4gICAgICB9XG4gICAgICBsYXN0Rm91bmRTeW1ib2wgPSB0b2tlbl9idWY7XG4gICAgICBpZiAoaXNTeW1ib2xMZWZ0T2ZBc3NpZ25tZW50KSB7XG4gICAgICAgIGFkZFN5bWJvbExlZnRPZkFzc2lnbm1lbnQodG9rZW5fYnVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic3RpbGwgc2Nhbm5pbmcgcGFyYW1ldGVycywgc2tpcHBpbmcgXCIgKyB0b2tlbl9idWYpO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sTGVmdE9mQXNzaWdubWVudCkge1xuICAgICAgICBhZGRTeW1ib2xSaWdodE9mQXNzaWdubWVudChcIidcIiArIHRva2VuX2J1Zik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJmb3VuZCBzeW1ib2w6IFwiICsgdG9rZW5fYnVmICsgXCIgbGVmdCBvZiBhc3NpZ25tZW50OiBcIiArIGlzU3ltYm9sTGVmdE9mQXNzaWdubWVudCk7XG4gICAgfVxuICAgIGlmICghaXNTeW1ib2xMZWZ0T2ZBc3NpZ25tZW50KSB7XG4gICAgICBhZGRTeW1ib2xSaWdodE9mQXNzaWdubWVudCh0b2tlbl9idWYpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0X25leHRfdG9rZW4oKTtcbiAgfTtcblxuICBzY2FuX3N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIG5ld19zdHJpbmcodG9rZW5fYnVmKTtcbiAgICByZXR1cm4gZ2V0X25leHRfdG9rZW4oKTtcbiAgfTtcblxuICBzY2FuX2Z1bmN0aW9uX2NhbGxfd2l0aF9mdW5jdGlvbl9uYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZ1bmN0aW9uTmFtZSwgaSwgbDEsIG4sIHAsIHJlZjI7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIi0tIHNjYW5fZnVuY3Rpb25fY2FsbF93aXRoX2Z1bmN0aW9uX25hbWUgc3RhcnRcIik7XG4gICAgfVxuICAgIG4gPSAxOyAvLyB0aGUgcGFyYW1ldGVyIG51bWJlciBhcyB3ZSBzY2FuIHBhcmFtZXRlcnNcbiAgICBwID0gbmV3IFUoKTtcbiAgICBwID0gdXNyX3N5bWJvbCh0b2tlbl9idWYpO1xuICAgIHB1c2gocCk7XG4gICAgZnVuY3Rpb25OYW1lID0gdG9rZW5fYnVmO1xuICAgIGlmIChmdW5jdGlvbk5hbWUgPT09IFwicm9vdHNcIiB8fCBmdW5jdGlvbk5hbWUgPT09IFwiZGVmaW50XCIgfHwgZnVuY3Rpb25OYW1lID09PSBcInN1bVwiIHx8IGZ1bmN0aW9uTmFtZSA9PT0gXCJwcm9kdWN0XCIgfHwgZnVuY3Rpb25OYW1lID09PSBcImZvclwiKSB7XG4gICAgICBmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5wdXNoKHRva2VuX2J1Zik7XG4gICAgfVxuICAgIGxhc3RGb3VuZFN5bWJvbCA9IHRva2VuX2J1ZjtcbiAgICBpZiAoIWlzU3ltYm9sTGVmdE9mQXNzaWdubWVudCkge1xuICAgICAgYWRkU3ltYm9sUmlnaHRPZkFzc2lnbm1lbnQodG9rZW5fYnVmKTtcbiAgICB9XG4gICAgZ2V0X25leHRfdG9rZW4oKTsgLy8gb3BlbiBwYXJlbnNcbiAgICBnZXRfbmV4dF90b2tlbigpOyAvLyAxc3QgcGFyYW1ldGVyXG4gICAgc2Nhbm5pbmdQYXJhbWV0ZXJzLnB1c2godHJ1ZSk7XG4gICAgaWYgKHRva2VuICE9PSAnKScpIHtcbiAgICAgIHNjYW5fc3RtdCgpO1xuICAgICAgbisrO1xuICAgICAgd2hpbGUgKHRva2VuID09PSAnLCcpIHtcbiAgICAgICAgZ2V0X25leHRfdG9rZW4oKTtcbiAgICAgICAgLy8gcm9vdHMnIGRpc2FwcGVhcmluZyB2YXJpYWJsZSwgaWYgdGhlcmUsIGlzIHRoZSBzZWNvbmQgb25lXG4gICAgICAgIGlmIChuID09PSAyICYmIGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrW2Z1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrLmxlbmd0aCAtIDFdLmluZGV4T2YoXCJyb290c1wiKSAhPT0gLTEpIHtcbiAgICAgICAgICBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnQgPSBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnQuZmlsdGVyKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgIHJldHVybiAhKG5ldyBSZWdFeHAoXCJyb290c19cIiArIChmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5sZW5ndGggLSAxKSArIFwiX1wiICsgdG9rZW5fYnVmKSkudGVzdCh4KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBza2lwUm9vdFZhcmlhYmxlVG9CZVNvbHZlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3VtcycgZGlzYXBwZWFyaW5nIHZhcmlhYmxlLCBpcyBhbHN3YXlzIHRoZSBzZWNvbmQgb25lXG4gICAgICAgIGlmIChuID09PSAyICYmIGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrW2Z1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrLmxlbmd0aCAtIDFdLmluZGV4T2YoXCJzdW1cIikgIT09IC0xKSB7XG4gICAgICAgICAgc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50ID0gc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50LmZpbHRlcihmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICByZXR1cm4gIShuZXcgUmVnRXhwKFwic3VtX1wiICsgKGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrLmxlbmd0aCAtIDEpICsgXCJfXCIgKyB0b2tlbl9idWYpKS50ZXN0KHgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNraXBSb290VmFyaWFibGVUb0JlU29sdmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcm9kdWN0J3MgZGlzYXBwZWFyaW5nIHZhcmlhYmxlLCBpcyBhbHN3YXlzIHRoZSBzZWNvbmQgb25lXG4gICAgICAgIGlmIChuID09PSAyICYmIGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrW2Z1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrLmxlbmd0aCAtIDFdLmluZGV4T2YoXCJwcm9kdWN0XCIpICE9PSAtMSkge1xuICAgICAgICAgIHN5bWJvbHNSaWdodE9mQXNzaWdubWVudCA9IHN5bWJvbHNSaWdodE9mQXNzaWdubWVudC5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgcmV0dXJuICEobmV3IFJlZ0V4cChcInByb2R1Y3RfXCIgKyAoZnVuY3Rpb25JbnZva2F0aW9uc1NjYW5uaW5nU3RhY2subGVuZ3RoIC0gMSkgKyBcIl9cIiArIHRva2VuX2J1ZikpLnRlc3QoeCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2tpcFJvb3RWYXJpYWJsZVRvQmVTb2x2ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGZvcidzIGRpc2FwcGVhcmluZyB2YXJpYWJsZSwgaXMgYWxzd2F5cyB0aGUgc2Vjb25kIG9uZVxuICAgICAgICBpZiAobiA9PT0gMiAmJiBmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFja1tmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5sZW5ndGggLSAxXS5pbmRleE9mKFwiZm9yXCIpICE9PSAtMSkge1xuICAgICAgICAgIHN5bWJvbHNSaWdodE9mQXNzaWdubWVudCA9IHN5bWJvbHNSaWdodE9mQXNzaWdubWVudC5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgcmV0dXJuICEobmV3IFJlZ0V4cChcImZvcl9cIiArIChmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5sZW5ndGggLSAxKSArIFwiX1wiICsgdG9rZW5fYnVmKSkudGVzdCh4KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBza2lwUm9vdFZhcmlhYmxlVG9CZVNvbHZlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGVmaW50J3MgZGlzYXBwZWFyaW5nIHZhcmlhYmxlcyBjYW4gYmUgaW4gcG9zaXRpb25zIDIsNSw4Li4uXG4gICAgICAgIGlmIChmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFja1tmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5sZW5ndGggLSAxXS5pbmRleE9mKFwiZGVmaW50XCIpICE9PSAtMSAmJiAobiA9PT0gMiB8fCAobiA+IDIgJiYgKChuIC0gMikgJSAzID09PSAwKSkpKSB7XG4gICAgICAgICAgc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50ID0gc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50LmZpbHRlcihmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICByZXR1cm4gIShuZXcgUmVnRXhwKFwiZGVmaW50X1wiICsgKGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrLmxlbmd0aCAtIDEpICsgXCJfXCIgKyB0b2tlbl9idWYpKS50ZXN0KHgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNraXBSb290VmFyaWFibGVUb0JlU29sdmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzY2FuX3N0bXQoKTtcbiAgICAgICAgc2tpcFJvb3RWYXJpYWJsZVRvQmVTb2x2ZWQgPSBmYWxzZTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgLy8gdG9kbyByZWZhY3RvciB0aGlzLCB0aGVyZSBhcmUgdHdvIGNvcGllc1xuICAgICAgLy8gdGhpcyBjYXRjaGVzIHRoZSBjYXNlIHdoZXJlIHRoZSBcInJvb3RzXCIgdmFyaWFibGUgaXMgbm90IHNwZWNpZmllZFxuICAgICAgaWYgKG4gPT09IDIgJiYgZnVuY3Rpb25JbnZva2F0aW9uc1NjYW5uaW5nU3RhY2tbZnVuY3Rpb25JbnZva2F0aW9uc1NjYW5uaW5nU3RhY2subGVuZ3RoIC0gMV0uaW5kZXhPZihcInJvb3RzXCIpICE9PSAtMSkge1xuICAgICAgICBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnQgPSBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnQuZmlsdGVyKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICByZXR1cm4gIShuZXcgUmVnRXhwKFwicm9vdHNfXCIgKyAoZnVuY3Rpb25JbnZva2F0aW9uc1NjYW5uaW5nU3RhY2subGVuZ3RoIC0gMSkgKyBcIl9cIiArIFwieFwiKSkudGVzdCh4KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNjYW5uaW5nUGFyYW1ldGVycy5wb3AoKTtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnQubGVuZ3RoOyAoMCA8PSByZWYyID8gbDEgPD0gcmVmMiA6IGwxID49IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIGlmIChzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnRbaV0gIT0gbnVsbCkge1xuICAgICAgICBpZiAoZnVuY3Rpb25OYW1lID09PSBcInJvb3RzXCIpIHtcbiAgICAgICAgICBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnRbaV0gPSBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnRbaV0ucmVwbGFjZShuZXcgUmVnRXhwKFwicm9vdHNfXCIgKyAoZnVuY3Rpb25JbnZva2F0aW9uc1NjYW5uaW5nU3RhY2subGVuZ3RoIC0gMSkgKyBcIl9cIiksIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmdW5jdGlvbk5hbWUgPT09IFwiZGVmaW50XCIpIHtcbiAgICAgICAgICBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnRbaV0gPSBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnRbaV0ucmVwbGFjZShuZXcgUmVnRXhwKFwiZGVmaW50X1wiICsgKGZ1bmN0aW9uSW52b2thdGlvbnNTY2FubmluZ1N0YWNrLmxlbmd0aCAtIDEpICsgXCJfXCIpLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnVuY3Rpb25OYW1lID09PSBcInN1bVwiKSB7XG4gICAgICAgICAgc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50W2ldID0gc3ltYm9sc1JpZ2h0T2ZBc3NpZ25tZW50W2ldLnJlcGxhY2UobmV3IFJlZ0V4cChcInN1bV9cIiArIChmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5sZW5ndGggLSAxKSArIFwiX1wiKSwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZ1bmN0aW9uTmFtZSA9PT0gXCJwcm9kdWN0XCIpIHtcbiAgICAgICAgICBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnRbaV0gPSBzeW1ib2xzUmlnaHRPZkFzc2lnbm1lbnRbaV0ucmVwbGFjZShuZXcgUmVnRXhwKFwicHJvZHVjdF9cIiArIChmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5sZW5ndGggLSAxKSArIFwiX1wiKSwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZ1bmN0aW9uTmFtZSA9PT0gXCJmb3JcIikge1xuICAgICAgICAgIHN5bWJvbHNSaWdodE9mQXNzaWdubWVudFtpXSA9IHN5bWJvbHNSaWdodE9mQXNzaWdubWVudFtpXS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJmb3JfXCIgKyAoZnVuY3Rpb25JbnZva2F0aW9uc1NjYW5uaW5nU3RhY2subGVuZ3RoIC0gMSkgKyBcIl9cIiksIFwiXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0b2tlbiAhPT0gJyknKSB7XG4gICAgICBzY2FuX2Vycm9yKFwiKSBleHBlY3RlZFwiKTtcbiAgICB9XG4gICAgZ2V0X25leHRfdG9rZW4oKTtcbiAgICBsaXN0KG4pO1xuICAgIGlmIChmdW5jdGlvbk5hbWUgPT09IFwicm9vdHNcIiB8fCBmdW5jdGlvbk5hbWUgPT09IFwiZGVmaW50XCIgfHwgZnVuY3Rpb25OYW1lID09PSBcInN1bVwiIHx8IGZ1bmN0aW9uTmFtZSA9PT0gXCJwcm9kdWN0XCIgfHwgZnVuY3Rpb25OYW1lID09PSBcImZvclwiKSB7XG4gICAgICBmdW5jdGlvbkludm9rYXRpb25zU2Nhbm5pbmdTdGFjay5wb3AoKTtcbiAgICB9XG4gICAgaWYgKGZ1bmN0aW9uTmFtZSA9PT0gc3ltYm9sKFBBVFRFUk4pLnByaW50bmFtZSkge1xuICAgICAgcGF0dGVybkhhc0JlZW5Gb3VuZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChERUJVRykge1xuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiLS0gc2Nhbl9mdW5jdGlvbl9jYWxsX3dpdGhfZnVuY3Rpb25fbmFtZSBlbmRcIik7XG4gICAgfVxuICB9O1xuXG4gIHNjYW5fZnVuY3Rpb25fY2FsbF93aXRob3V0X2Z1bmN0aW9uX25hbWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbjtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiLS0gc2Nhbl9mdW5jdGlvbl9jYWxsX3dpdGhvdXRfZnVuY3Rpb25fbmFtZSBzdGFydFwiKTtcbiAgICB9XG4gICAgLy8gdGhlIGZ1bmN0aW9uIHdpbGwgaGF2ZSB0byBiZSBsb29rZWQgdXBcbiAgICAvLyBhdCBydW50aW1lIChpLmUuIHdlIG5lZWQgdG8gZXZhdWxhdGUgc29tZXRoaW5nIHRvIGZpbmQgaXRcbiAgICAvLyBlLmcuIGl0IG1pZ2h0IGJlIGluc2lkZSBhIHRlbnNvciwgc28gd2UnZCBuZWVkIHRvIGV2YWx1YXRlXG4gICAgLy8gYSB0ZW5zb3IgZWxlbWVudCBhY2Nlc3MgaW4gdGhhdCBjYXNlKVxuICAgIHB1c2hfc3ltYm9sKEVWQUwpO1xuICAgIHN3YXAoKTtcbiAgICBsaXN0KDIpO1xuICAgIG4gPSAxOyAvLyB0aGUgcGFyYW1ldGVyIG51bWJlciBhcyB3ZSBzY2FuIHBhcmFtZXRlcnNcbiAgICBnZXRfbmV4dF90b2tlbigpOyAvLyBsZWZ0IHBhcmVuXG4gICAgc2Nhbm5pbmdQYXJhbWV0ZXJzLnB1c2godHJ1ZSk7XG4gICAgaWYgKHRva2VuICE9PSAnKScpIHtcbiAgICAgIHNjYW5fc3RtdCgpO1xuICAgICAgbisrO1xuICAgICAgd2hpbGUgKHRva2VuID09PSAnLCcpIHtcbiAgICAgICAgZ2V0X25leHRfdG9rZW4oKTtcbiAgICAgICAgc2Nhbl9zdG10KCk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICB9XG4gICAgc2Nhbm5pbmdQYXJhbWV0ZXJzLnBvcCgpO1xuICAgIGlmICh0b2tlbiAhPT0gJyknKSB7XG4gICAgICBzY2FuX2Vycm9yKFwiKSBleHBlY3RlZFwiKTtcbiAgICB9XG4gICAgZ2V0X25leHRfdG9rZW4oKTtcbiAgICBsaXN0KG4pO1xuICAgIGlmIChERUJVRykge1xuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiLS0gc2Nhbl9mdW5jdGlvbl9jYWxsX3dpdGhvdXRfZnVuY3Rpb25fbmFtZSBlbmQ6IFwiICsgc3RhY2tbdG9zIC0gMV0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBzY2FuIHN1YmV4cHJlc3Npb25cbiAgc2Nhbl9zdWJleHByID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG47XG4gICAgbiA9IDA7XG4gICAgaWYgKHRva2VuICE9PSAnKCcpIHtcbiAgICAgIHNjYW5fZXJyb3IoXCIoIGV4cGVjdGVkXCIpO1xuICAgIH1cbiAgICBnZXRfbmV4dF90b2tlbigpO1xuICAgIHNjYW5fc3RtdCgpO1xuICAgIGlmICh0b2tlbiAhPT0gJyknKSB7XG4gICAgICBzY2FuX2Vycm9yKFwiKSBleHBlY3RlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldF9uZXh0X3Rva2VuKCk7XG4gIH07XG5cbiAgc2Nhbl90ZW5zb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbjtcbiAgICBuID0gMDtcbiAgICBpZiAodG9rZW4gIT09ICdbJykge1xuICAgICAgc2Nhbl9lcnJvcihcIlsgZXhwZWN0ZWRcIik7XG4gICAgfVxuICAgIGdldF9uZXh0X3Rva2VuKCk7XG4gICAgLy9jb25zb2xlLmxvZyBcInNjYW5uaW5nIHRoZSBuZXh0IHN0YXRlbWVudFwiXG4gICAgc2Nhbl9zdG10KCk7XG4gICAgbiA9IDE7XG4gICAgd2hpbGUgKHRva2VuID09PSAnLCcpIHtcbiAgICAgIGdldF9uZXh0X3Rva2VuKCk7XG4gICAgICBzY2FuX3N0bXQoKTtcbiAgICAgIG4rKztcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyBcImJ1aWxkaW5nIHRlbnNvciB3aXRoIGVsZW1lbnRzIG51bWJlcjogXCIgKyBuXG4gICAgYnVpbGRfdGVuc29yKG4pO1xuICAgIGlmICh0b2tlbiAhPT0gJ10nKSB7XG4gICAgICBzY2FuX2Vycm9yKFwiXSBleHBlY3RlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldF9uZXh0X3Rva2VuKCk7XG4gIH07XG5cbiAgc2Nhbl9lcnJvciA9IGZ1bmN0aW9uKGVycm1zZykge1xuICAgIGVycm9yTWVzc2FnZSA9IFwiXCI7XG4gICAgLy8gdHJ5IG5vdCB0byBwdXQgcXVlc3Rpb24gbWFyayBvbiBvcnBoYW4gbGluZVxuICAgIHdoaWxlIChpbnB1dF9zdHIgIT09IHNjYW5fc3RyKSB7XG4gICAgICBpZiAoKHNjYW5uZWRbaW5wdXRfc3RyXSA9PT0gJ1xcbicgfHwgc2Nhbm5lZFtpbnB1dF9zdHJdID09PSAnXFxyJykgJiYgaW5wdXRfc3RyICsgMSA9PT0gc2Nhbl9zdHIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBlcnJvck1lc3NhZ2UgKz0gc2Nhbm5lZFtpbnB1dF9zdHIrK107XG4gICAgfVxuICAgIGVycm9yTWVzc2FnZSArPSBcIiA/IFwiO1xuICAgIHdoaWxlIChzY2FubmVkW2lucHV0X3N0cl0gJiYgKHNjYW5uZWRbaW5wdXRfc3RyXSAhPT0gJ1xcbicgJiYgc2Nhbm5lZFtpbnB1dF9zdHJdICE9PSAnXFxyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSArPSBzY2FubmVkW2lucHV0X3N0cisrXTtcbiAgICB9XG4gICAgZXJyb3JNZXNzYWdlICs9ICdcXG4nO1xuICAgIHJldHVybiBzdG9wKGVycm1zZyk7XG4gIH07XG5cbiAgLy8gVGhlcmUgYXJlIG4gZXhwcmVzc2lvbnMgb24gdGhlIHN0YWNrLCBwb3NzaWJseSB0ZW5zb3JzLlxuXG4gIC8vIFRoaXMgZnVuY3Rpb24gYXNzZW1ibGVzIHRoZSBzdGFjayBleHByZXNzaW9ucyBpbnRvIGEgc2luZ2xlIHRlbnNvci5cblxuICAvLyBGb3IgZXhhbXBsZSwgYXQgdGhlIHRvcCBsZXZlbCBvZiB0aGUgZXhwcmVzc2lvbiAoKGEsYiksKGMsZCkpLCB0aGUgdmVjdG9yc1xuICAvLyAoYSxiKSBhbmQgKGMsZCkgd291bGQgYmUgb24gdGhlIHN0YWNrLlxuXG4gIC8vIHRha2VzIGFuIGludGVnZXJcbiAgYnVpbGRfdGVuc29yID0gZnVuY3Rpb24obikge1xuICAgIHZhciBpLCBsMSwgcmVmMjtcbiAgICAvLyBpbnQgaSwgaiwgaywgbmRpbSwgbmVsZW1cbiAgICBpID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBhbGxvY190ZW5zb3Iobik7XG4gICAgcDIudGVuc29yLm5kaW0gPSAxO1xuICAgIHAyLnRlbnNvci5kaW1bMF0gPSBuO1xuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMiA9IG47ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAyLnRlbnNvci5lbGVtW2ldID0gc3RhY2tbdG9zIC0gbiArIGldO1xuICAgIH1cbiAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMik7XG4gICAgbW92ZVRvcyh0b3MgLSBuKTtcbiAgICBwdXNoKHAyKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGdldF9uZXh0X3Rva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgbmV3bGluZV9mbGFnID0gMDtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgZ2V0X3Rva2VuKCk7XG4gICAgICBpZiAodG9rZW4gIT09IFRfTkVXTElORSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG5ld2xpbmVfZmxhZyA9IDE7XG4gICAgfVxuICAgIGlmIChERUJVRykge1xuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiZ2V0X25leHRfdG9rZW4gdG9rZW46IFwiICsgdG9rZW4pO1xuICAgIH1cbiAgfTtcblxuICAvL2lmIHRva2VuID09ICcpJ1xuICAvLyAgZGVidWdnZXJcbiAgZ2V0X3Rva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gc2tpcCBzcGFjZXNcbiAgICB3aGlsZSAoaXNzcGFjZShzY2FubmVkW3NjYW5fc3RyXSkpIHtcbiAgICAgIGlmIChzY2FubmVkW3NjYW5fc3RyXSA9PT0gJ1xcbicgfHwgc2Nhbm5lZFtzY2FuX3N0cl0gPT09ICdcXHInKSB7XG4gICAgICAgIHRva2VuID0gVF9ORVdMSU5FO1xuICAgICAgICBzY2FuX3N0cisrO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzY2FuX3N0cisrO1xuICAgIH1cbiAgICB0b2tlbl9zdHIgPSBzY2FuX3N0cjtcbiAgICAvLyBlbmQgb2Ygc3RyaW5nP1xuICAgIGlmIChzY2FuX3N0ciA9PT0gc2Nhbm5lZC5sZW5ndGgpIHtcbiAgICAgIHRva2VuID0gXCJcIjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbnVtYmVyP1xuICAgIGlmIChpc2RpZ2l0KHNjYW5uZWRbc2Nhbl9zdHJdKSB8fCBzY2FubmVkW3NjYW5fc3RyXSA9PT0gJy4nKSB7XG4gICAgICB3aGlsZSAoaXNkaWdpdChzY2FubmVkW3NjYW5fc3RyXSkpIHtcbiAgICAgICAgc2Nhbl9zdHIrKztcbiAgICAgIH1cbiAgICAgIGlmIChzY2FubmVkW3NjYW5fc3RyXSA9PT0gJy4nKSB7XG4gICAgICAgIHNjYW5fc3RyKys7XG4gICAgICAgIHdoaWxlIChpc2RpZ2l0KHNjYW5uZWRbc2Nhbl9zdHJdKSkge1xuICAgICAgICAgIHNjYW5fc3RyKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjYW5uZWRbc2Nhbl9zdHJdID09PSAnZScgJiYgKHNjYW5uZWRbc2Nhbl9zdHIgKyAxXSA9PT0gJysnIHx8IHNjYW5uZWRbc2Nhbl9zdHIgKyAxXSA9PT0gJy0nIHx8IGlzZGlnaXQoc2Nhbm5lZFtzY2FuX3N0ciArIDFdKSkpIHtcbiAgICAgICAgICBzY2FuX3N0ciArPSAyO1xuICAgICAgICAgIHdoaWxlIChpc2RpZ2l0KHNjYW5uZWRbc2Nhbl9zdHJdKSkge1xuICAgICAgICAgICAgc2Nhbl9zdHIrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW4gPSBUX0RPVUJMRTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2VuID0gVF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgdXBkYXRlX3Rva2VuX2J1Zih0b2tlbl9zdHIsIHNjYW5fc3RyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3ltYm9sP1xuICAgIGlmIChpc2FscGhhKHNjYW5uZWRbc2Nhbl9zdHJdKSkge1xuICAgICAgd2hpbGUgKGlzYWxudW1vcnVuZGVyc2NvcmUoc2Nhbm5lZFtzY2FuX3N0cl0pKSB7XG4gICAgICAgIHNjYW5fc3RyKys7XG4gICAgICB9XG4gICAgICBpZiAoc2Nhbm5lZFtzY2FuX3N0cl0gPT09ICcoJykge1xuICAgICAgICB0b2tlbiA9IFRfRlVOQ1RJT047XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2tlbiA9IFRfU1lNQk9MO1xuICAgICAgfVxuICAgICAgdXBkYXRlX3Rva2VuX2J1Zih0b2tlbl9zdHIsIHNjYW5fc3RyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RyaW5nID9cbiAgICBpZiAoc2Nhbm5lZFtzY2FuX3N0cl0gPT09ICdcIicpIHtcbiAgICAgIHNjYW5fc3RyKys7XG4gICAgICB3aGlsZSAoc2Nhbm5lZFtzY2FuX3N0cl0gIT09ICdcIicpIHtcbiAgICAgICAgLy9pZiAoc2Nhbl9zdHIgPT0gc2Nhbm5lZC5sZW5ndGggfHwgc2Nhbm5lZFtzY2FuX3N0cl0gPT0gJ1xcbicgfHwgc2Nhbm5lZFtzY2FuX3N0cl0gPT0gJ1xccicpXG4gICAgICAgIGlmIChzY2FuX3N0ciA9PT0gc2Nhbm5lZC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgc2Nhbl9zdHIrKztcbiAgICAgICAgICBzY2FuX2Vycm9yKFwicnVuYXdheSBzdHJpbmdcIik7XG4gICAgICAgICAgc2Nhbl9zdHItLTtcbiAgICAgICAgfVxuICAgICAgICBzY2FuX3N0cisrO1xuICAgICAgfVxuICAgICAgc2Nhbl9zdHIrKztcbiAgICAgIHRva2VuID0gVF9TVFJJTkc7XG4gICAgICB1cGRhdGVfdG9rZW5fYnVmKHRva2VuX3N0ciArIDEsIHNjYW5fc3RyIC0gMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGNvbW1lbnQ/XG4gICAgaWYgKHNjYW5uZWRbc2Nhbl9zdHJdID09PSAnIycgfHwgc2Nhbm5lZFtzY2FuX3N0cl0gPT09ICctJyAmJiBzY2FubmVkW3NjYW5fc3RyICsgMV0gPT09ICctJykge1xuICAgICAgd2hpbGUgKHNjYW5uZWRbc2Nhbl9zdHJdICYmIHNjYW5uZWRbc2Nhbl9zdHJdICE9PSAnXFxuJyAmJiBzY2FubmVkW3NjYW5fc3RyXSAhPT0gJ1xccicpIHtcbiAgICAgICAgc2Nhbl9zdHIrKztcbiAgICAgIH1cbiAgICAgIGlmIChzY2FubmVkW3NjYW5fc3RyXSkge1xuICAgICAgICBzY2FuX3N0cisrO1xuICAgICAgfVxuICAgICAgdG9rZW4gPSBUX05FV0xJTkU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHF1b3RlLWFzc2lnbm1lbnRcbiAgICBpZiAoc2Nhbm5lZFtzY2FuX3N0cl0gPT09ICc6JyAmJiBzY2FubmVkW3NjYW5fc3RyICsgMV0gPT09ICc9Jykge1xuICAgICAgc2Nhbl9zdHIgKz0gMjtcbiAgICAgIHRva2VuID0gVF9RVU9UQVNTSUdOO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyByZWxhdGlvbmFsIG9wZXJhdG9yP1xuICAgIGlmIChzY2FubmVkW3NjYW5fc3RyXSA9PT0gJz0nICYmIHNjYW5uZWRbc2Nhbl9zdHIgKyAxXSA9PT0gJz0nKSB7XG4gICAgICBzY2FuX3N0ciArPSAyO1xuICAgICAgdG9rZW4gPSBUX0VRO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyAhPSBvcGVyYXRvci4gSXQncyBhIGxpdHRsZSBvZGQgYmVjYXVzZVxuICAgIC8vIFwiIVwiIGlzIG5vdCBhIFwibm90XCIsIHdoaWNoIHdvdWxkIG1ha2UgdGhpbmdzIGNvbnNpc3RlbnQuXG4gICAgLy8gKGl0J3MgdXNlZCBmb3IgZmFjdG9yaWFsKS5cbiAgICAvLyBBbiBhbHRlcm5hdGl2ZSB3b3VsZCBiZSB0byB1c2UgXCI8PlwiIGJ1dCBpdCdzIG5vdCB1c2VkXG4gICAgLy8gYSBsb3QgaW4gb3RoZXIgbGFuZ3VhZ2VzLi4uXG4gICAgaWYgKHNjYW5uZWRbc2Nhbl9zdHJdID09PSAnIScgJiYgc2Nhbm5lZFtzY2FuX3N0ciArIDFdID09PSAnPScpIHtcbiAgICAgIHNjYW5fc3RyICs9IDI7XG4gICAgICB0b2tlbiA9IFRfTkVRO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2Nhbm5lZFtzY2FuX3N0cl0gPT09ICc8JyAmJiBzY2FubmVkW3NjYW5fc3RyICsgMV0gPT09ICc9Jykge1xuICAgICAgc2Nhbl9zdHIgKz0gMjtcbiAgICAgIHRva2VuID0gVF9MVEVRO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2Nhbm5lZFtzY2FuX3N0cl0gPT09ICc+JyAmJiBzY2FubmVkW3NjYW5fc3RyICsgMV0gPT09ICc9Jykge1xuICAgICAgc2Nhbl9zdHIgKz0gMjtcbiAgICAgIHRva2VuID0gVF9HVEVRO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzaW5nbGUgY2hhciB0b2tlblxuICAgIHJldHVybiB0b2tlbiA9IHNjYW5uZWRbc2Nhbl9zdHIrK107XG4gIH07XG5cbiAgLy8gYm90aCBzdHJpbmdzXG4gIHVwZGF0ZV90b2tlbl9idWYgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIHRva2VuX2J1ZiA9IHNjYW5uZWQuc3Vic3RyaW5nKGEsIGIpO1xuICB9O1xuXG4gICQuc2NhbiA9IHNjYW47XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBBdXRob3IgOiBwaGlsaXBwZS5iaWxsZXRAbm9vcy5mclxuXG4gIC8vICBzZ24gc2lnbiBmdW5jdGlvblxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgRXZhbF9zZ24gPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcmV0dXJuIHNnbigpO1xuICB9O1xuXG4gIHNnbiA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICB5eXNnbigpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgLy9kZWZpbmUgWCBwMVxuICB5eXNnbiA9IGZ1bmN0aW9uKCkge1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgaWYgKHAxLmQgPiAwKSB7XG4gICAgICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHAxLmQgPT09IDApIHtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc3JhdGlvbmFsKHAxKSkge1xuICAgICAgaWYgKE1TSUdOKG1tdWwocDEucS5hLCBwMS5xLmIpKSA9PT0gLTEpIHtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKE1aRVJPKG1tdWwocDEucS5hLCBwMS5xLmIpKSkge1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNjb21wbGV4bnVtYmVyKHAxKSkge1xuICAgICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgYWJzdmFsKCk7XG4gICAgICBwb3dlcigpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNuZWdhdGl2ZXRlcm0ocDEpKSB7XG4gICAgICBwdXNoX3N5bWJvbChTR04pO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLypcbiAgICBwdXNoX2ludGVnZXIoMilcbiAgICBwdXNoKHAxKVxuICAgIGhlYXZpc2lkZSgpXG4gICAgbXVsdGlwbHkoKVxuICAgIHB1c2hfaW50ZWdlcigtMSlcbiAgICBhZGQoKVxuICAgICovXG4gICAgcHVzaF9zeW1ib2woU0dOKTtcbiAgICBwdXNoKHAxKTtcbiAgICByZXR1cm4gbGlzdCgyKTtcbiAgfTtcblxuICAvLyBzaGFwZSBvZiB0ZW5zb3JcbiAgRXZhbF9zaGFwZSA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gc2hhcGUoKTtcbiAgfTtcblxuICBzaGFwZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhaSwgYW4sIGksIGwxLCBtMSwgbmRpbSwgcmVmMiwgcmVmMywgdDtcbiAgICBpID0gMDtcbiAgICBuZGltID0gMDtcbiAgICB0ID0gMDtcbiAgICBhaSA9IFtdO1xuICAgIGFuID0gW107XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gTUFYRElNOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBhaVtpXSA9IDA7XG4gICAgICBhbltpXSA9IDA7XG4gICAgfVxuICAgIC8vVSAqKmEsICoqYlxuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmICghaXN0ZW5zb3IocDEpKSB7XG4gICAgICBpZiAoIWlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgICAgc3RvcChcInRyYW5zcG9zZTogdGVuc29yIGV4cGVjdGVkLCAxc3QgYXJnIGlzIG5vdCBhIHRlbnNvclwiKTtcbiAgICAgIH1cbiAgICAgIHB1c2goemVybyk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5kaW0gPSBwMS50ZW5zb3IubmRpbTtcbiAgICBwMiA9IGFsbG9jX3RlbnNvcihuZGltKTtcbiAgICBwMi50ZW5zb3IubmRpbSA9IDE7XG4gICAgcDIudGVuc29yLmRpbVswXSA9IG5kaW07XG4gICAgZm9yIChpID0gbTEgPSAwLCByZWYzID0gbmRpbTsgKDAgPD0gcmVmMyA/IG0xIDwgcmVmMyA6IG0xID4gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK20xIDogLS1tMSkge1xuICAgICAgcHVzaF9pbnRlZ2VyKHAxLnRlbnNvci5kaW1baV0pO1xuICAgICAgcDIudGVuc29yLmVsZW1baV0gPSBwb3AoKTtcbiAgICB9XG4gICAgcHVzaChwMik7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvKlxuICAgU2ltcGxpZnkgZmFjdG9yaWFsc1xuXG4gIFRoZSBmb2xsb3dpbmcgc2NyaXB0XG5cbiAgICBGKG4saykgPSBrIGJpbm9taWFsKG4saylcbiAgICAoRihuLGspICsgRihuLGstMSkpIC8gRihuKzEsaylcblxuICBnZW5lcmF0ZXNcblxuICAgICAgICAgayEgbiEgICAgICAgICAgICAgbiEgKDEgLSBrICsgbikhICAgICAgICAgICAgICBrISBuIVxuICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0gKyAtLS0tLS0tLS0tLS0tLS0tLS0tLSAtIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICgtMSArIGspISAoMSArIG4pISAgICAgKDEgKyBuKSEgKC1rICsgbikhICAgICBrICgtMSArIGspISAoMSArIG4pIVxuXG4gIFNpbXBsaWZ5IGVhY2ggdGVybSB0byBnZXRcblxuICAgICAgayAgICAgICAxIC0gayArIG4gICAgICAgMVxuICAgLS0tLS0tLSArIC0tLS0tLS0tLS0tIC0gLS0tLS0tLVxuICAgIDEgKyBuICAgICAgIDEgKyBuICAgICAgIDEgKyBuXG5cbiAgVGhlbiBzaW1wbGlmeSB0aGUgc3VtIHRvIGdldFxuXG4gICAgICBuXG4gICAtLS0tLS0tXG4gICAgMSArIG5cblxuICAqL1xuICAvLyBzaW1wbGlmeSBmYWN0b3JpYWxzIHRlcm0tYnktdGVybVxuICBFdmFsX3NpbWZhYyA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gc2ltZmFjKCk7XG4gIH07XG5cbiAgLy9pZiAxXG4gIHNpbWZhYyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoO1xuICAgIGggPSAwO1xuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woQUREKSkge1xuICAgICAgaCA9IHRvcztcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIHdoaWxlIChwMSAhPT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgc2ltZmFjX3Rlcm0oKTtcbiAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgfVxuICAgICAgYWRkX2FsbCh0b3MgLSBoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBzaW1mYWNfdGVybSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vZWxzZVxuICAvKlxuICB2b2lkXG4gIHNpbWZhYyh2b2lkKVxuICB7XG4gICAgaW50IGhcbiAgICBzYXZlKClcbiAgICBwMSA9IHBvcCgpXG4gICAgaWYgKGNhcihwMSkgPT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIGggPSB0b3NcbiAgICAgIHAxID0gY2RyKHAxKVxuICAgICAgd2hpbGUgKHAxICE9IHN5bWJvbChOSUwpKSB7XG4gICAgICAgIHB1c2goY2FyKHAxKSlcbiAgICAgICAgc2ltZmFjX3Rlcm0oKVxuICAgICAgICBwMSA9IGNkcihwMSlcbiAgICAgIH1cbiAgICAgIGFkZGsodG9zIC0gaClcbiAgICAgIHAxID0gcG9wKClcbiAgICAgIGlmIChmaW5kKHAxLCBzeW1ib2woRkFDVE9SSUFMKSkpIHtcbiAgICAgICAgcHVzaChwMSlcbiAgICAgICAgaWYgKGNhcihwMSkgPT0gc3ltYm9sKEFERCkpIHtcbiAgICAgICAgICBDb25kZW5zZSgpXG4gICAgICAgICAgc2ltZmFjX3Rlcm0oKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDEpXG4gICAgICBzaW1mYWNfdGVybSgpXG4gICAgfVxuICAgIHJlc3RvcmUoKVxuICB9XG5cbiAgI2VuZGlmXG4gICAqL1xuICBzaW1mYWNfdGVybSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb05vdGhpbmcsIGg7XG4gICAgaCA9IDA7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgLy8gaWYgbm90IGEgcHJvZHVjdCBvZiBmYWN0b3JzIHRoZW4gZG9uZVxuICAgIGlmIChjYXIocDEpICE9PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gcHVzaCBhbGwgZmFjdG9yc1xuICAgIGggPSB0b3M7XG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHdoaWxlIChwMSAhPT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgfVxuICAgIC8vIGtlZXAgdHJ5aW5nIHVudGlsIG5vIG1vcmUgdG8gZG9cbiAgICB3aGlsZSAoeXlzaW1mYWMoaCkpIHtcbiAgICAgIGRvTm90aGluZyA9IDE7XG4gICAgfVxuICAgIG11bHRpcGx5X2FsbF9ub2V4cGFuZCh0b3MgLSBoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIC8vIHRyeSBhbGwgcGFpcnMgb2YgZmFjdG9yc1xuICB5eXNpbWZhYyA9IGZ1bmN0aW9uKGgpIHtcbiAgICB2YXIgaSwgaiwgbDEsIG0xLCByZWYyLCByZWYzLCByZWY0LCByZWY1O1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIGZvciAoaSA9IGwxID0gcmVmMiA9IGgsIHJlZjMgPSB0b3M7IChyZWYyIDw9IHJlZjMgPyBsMSA8IHJlZjMgOiBsMSA+IHJlZjMpOyBpID0gcmVmMiA8PSByZWYzID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAxID0gc3RhY2tbaV07XG4gICAgICBmb3IgKGogPSBtMSA9IHJlZjQgPSBoLCByZWY1ID0gdG9zOyAocmVmNCA8PSByZWY1ID8gbTEgPCByZWY1IDogbTEgPiByZWY1KTsgaiA9IHJlZjQgPD0gcmVmNSA/ICsrbTEgOiAtLW0xKSB7XG4gICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcDIgPSBzdGFja1tqXTtcbiAgICAgICAgLy8gIG4hIC8gbiAgICAtPiAgKG4gLSAxKSFcbiAgICAgICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChGQUNUT1JJQUwpICYmIGNhcihwMikgPT09IHN5bWJvbChQT1dFUikgJiYgaXNtaW51c29uZShjYWRkcihwMikpICYmIGVxdWFsKGNhZHIocDEpLCBjYWRyKHAyKSkpIHtcbiAgICAgICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgICAgICBwdXNoKG9uZSk7XG4gICAgICAgICAgc3VidHJhY3QoKTtcbiAgICAgICAgICBmYWN0b3JpYWwoKTtcbiAgICAgICAgICBzdGFja1tpXSA9IHBvcCgpO1xuICAgICAgICAgIHN0YWNrW2pdID0gb25lO1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIC8vICBuIC8gbiEgICAgLT4gIDEgLyAobiAtIDEpIVxuICAgICAgICBpZiAoY2FyKHAyKSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBpc21pbnVzb25lKGNhZGRyKHAyKSkgJiYgY2FhZHIocDIpID09PSBzeW1ib2woRkFDVE9SSUFMKSAmJiBlcXVhbChwMSwgY2FkYWRyKHAyKSkpIHtcbiAgICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIGZhY3RvcmlhbCgpO1xuICAgICAgICAgIHJlY2lwcm9jYXRlKCk7XG4gICAgICAgICAgc3RhY2tbaV0gPSBwb3AoKTtcbiAgICAgICAgICBzdGFja1tqXSA9IG9uZTtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICAvLyAgKG4gKyAxKSBuISAgLT4gIChuICsgMSkhXG4gICAgICAgIGlmIChjYXIocDIpID09PSBzeW1ib2woRkFDVE9SSUFMKSkge1xuICAgICAgICAgIHB1c2gocDEpO1xuICAgICAgICAgIHB1c2goY2FkcihwMikpO1xuICAgICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgICAgcDMgPSBwb3AoKTtcbiAgICAgICAgICBpZiAoaXNwbHVzb25lKHAzKSkge1xuICAgICAgICAgICAgcHVzaChwMSk7XG4gICAgICAgICAgICBmYWN0b3JpYWwoKTtcbiAgICAgICAgICAgIHN0YWNrW2ldID0gcG9wKCk7XG4gICAgICAgICAgICBzdGFja1tqXSA9IG9uZTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyAgMSAvICgobiArIDEpIG4hKSAgLT4gIDEgLyAobiArIDEpIVxuICAgICAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBpc21pbnVzb25lKGNhZGRyKHAxKSkgJiYgY2FyKHAyKSA9PT0gc3ltYm9sKFBPV0VSKSAmJiBpc21pbnVzb25lKGNhZGRyKHAyKSkgJiYgY2FhZHIocDIpID09PSBzeW1ib2woRkFDVE9SSUFMKSkge1xuICAgICAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgICAgIHB1c2goY2FkcihjYWRyKHAyKSkpO1xuICAgICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgICAgcDMgPSBwb3AoKTtcbiAgICAgICAgICBpZiAoaXNwbHVzb25lKHAzKSkge1xuICAgICAgICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICAgICAgICBmYWN0b3JpYWwoKTtcbiAgICAgICAgICAgIHJlY2lwcm9jYXRlKCk7XG4gICAgICAgICAgICBzdGFja1tpXSA9IHBvcCgpO1xuICAgICAgICAgICAgc3RhY2tbal0gPSBvbmU7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gIChuICsgMSkhIC8gbiEgIC0+ICBuICsgMVxuXG4gICAgICAgIC8vICBuISAvIChuICsgMSkhICAtPiAgMSAvIChuICsgMSlcbiAgICAgICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChGQUNUT1JJQUwpICYmIGNhcihwMikgPT09IHN5bWJvbChQT1dFUikgJiYgaXNtaW51c29uZShjYWRkcihwMikpICYmIGNhYWRyKHAyKSA9PT0gc3ltYm9sKEZBQ1RPUklBTCkpIHtcbiAgICAgICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgICAgICBwdXNoKGNhZHIoY2FkcihwMikpKTtcbiAgICAgICAgICBzdWJ0cmFjdCgpO1xuICAgICAgICAgIHAzID0gcG9wKCk7XG4gICAgICAgICAgaWYgKGlzcGx1c29uZShwMykpIHtcbiAgICAgICAgICAgIHN0YWNrW2ldID0gY2FkcihwMSk7XG4gICAgICAgICAgICBzdGFja1tqXSA9IG9uZTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNtaW51c29uZShwMykpIHtcbiAgICAgICAgICAgIHB1c2goY2FkcihjYWRyKHAyKSkpO1xuICAgICAgICAgICAgcmVjaXByb2NhdGUoKTtcbiAgICAgICAgICAgIHN0YWNrW2ldID0gcG9wKCk7XG4gICAgICAgICAgICBzdGFja1tqXSA9IG9uZTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXF1YWxuKHAzLCAyKSkge1xuICAgICAgICAgICAgc3RhY2tbaV0gPSBjYWRyKHAxKTtcbiAgICAgICAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgICAgICAgcHVzaF9pbnRlZ2VyKC0xKTtcbiAgICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgICAgc3RhY2tbal0gPSBwb3AoKTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXF1YWxuKHAzLCAtMikpIHtcbiAgICAgICAgICAgIHB1c2goY2FkcihjYWRyKHAyKSkpO1xuICAgICAgICAgICAgcmVjaXByb2NhdGUoKTtcbiAgICAgICAgICAgIHN0YWNrW2ldID0gcG9wKCk7XG4gICAgICAgICAgICBwdXNoKGNhZHIoY2FkcihwMikpKTtcbiAgICAgICAgICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICAgIHJlY2lwcm9jYXRlKCk7XG4gICAgICAgICAgICBzdGFja1tqXSA9IHBvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIEV2YWxfc2ltcGxpZnkgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBydW5Vc2VyRGVmaW5lZFNpbXBsaWZpY2F0aW9ucygpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gc2ltcGxpZnkoKTtcbiAgfTtcblxuICBydW5Vc2VyRGVmaW5lZFNpbXBsaWZpY2F0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhdExlYXN0T25lU3VjY2Vzc0luUm91bGRPZlJ1bGVzQXBwbGljYXRpb25zLCBlYWNoQ29uc2VjdXRpdmVSdWxlQXBwbGljYXRpb24sIGVhY2hTaW1wbGlmaWNhdGlvbiwgbDEsIGxlbiwgbGVuMSwgbTEsIG51bWJlck9mUnVsZXNBcHBsaWNhdGlvbnMsIG9yaWdpbmFsZXhwYW5kaW5nLCBzdWNjZXNzO1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdW5mb3J0dW5hdGVseSBmb3IgdGhlIHRpbWUgYmVpbmcgdXNlclxuICAgIC8vIHNwZWNpZmllZCBzaW1wbGlmaWNhdGlvbnMgYXJlIG9ubHlcbiAgICAvLyBydW4gaW4gdGhpbmdzIHdoaWNoIGRvbid0IGNvbnRhaW5cbiAgICAvLyBpbnRlZ3JhbHMuXG4gICAgLy8gRG9lc24ndCB3b3JrIHlldCwgY291bGQgYmUgYmVjYXVzZSBvZlxuICAgIC8vIHNvbWUgY2xvYmJlcmluZyBhcyBcInRyYW5zZm9ybVwiIGlzIGNhbGxlZFxuICAgIC8vIHJlY3Vyc2l2ZWx5P1xuICAgIGlmICh1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybS5sZW5ndGggIT09IDAgJiYgIUZpbmQoY2FkcihwMSksIHN5bWJvbChJTlRFR1JBTCkpKSB7XG4gICAgICBvcmlnaW5hbGV4cGFuZGluZyA9IGV4cGFuZGluZztcbiAgICAgIGV4cGFuZGluZyA9IGZhbHNlO1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVuVXNlckRlZmluZWRTaW1wbGlmaWNhdGlvbnMgcGFzc2VkOiBcIiArIHN0YWNrW3RvcyAtIDFdLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgICAgRXZhbCgpO1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVuVXNlckRlZmluZWRTaW1wbGlmaWNhdGlvbnMgYWZ0ZXIgZXZhbCBubyBleHBhbmRpbmc6IFwiICsgc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgICBleHBhbmRpbmcgPSBvcmlnaW5hbGV4cGFuZGluZztcbiAgICAgIHAxID0gc3RhY2tbdG9zIC0gMV07XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJwYXR0ZXJucyB0byBiZSBjaGVja2VkOiBcIik7XG4gICAgICB9XG4gICAgICBmb3IgKGwxID0gMCwgbGVuID0gdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm0ubGVuZ3RoOyBsMSA8IGxlbjsgbDErKykge1xuICAgICAgICBlYWNoU2ltcGxpZmljYXRpb24gPSB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybVtsMV07XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiLi4uXCIgKyBlYWNoU2ltcGxpZmljYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhdExlYXN0T25lU3VjY2Vzc0luUm91bGRPZlJ1bGVzQXBwbGljYXRpb25zID0gdHJ1ZTtcbiAgICAgIG51bWJlck9mUnVsZXNBcHBsaWNhdGlvbnMgPSAwO1xuICAgICAgd2hpbGUgKGF0TGVhc3RPbmVTdWNjZXNzSW5Sb3VsZE9mUnVsZXNBcHBsaWNhdGlvbnMgJiYgbnVtYmVyT2ZSdWxlc0FwcGxpY2F0aW9ucyA8IE1BWF9DT05TRUNVVElWRV9BUFBMSUNBVElPTlNfT0ZfQUxMX1JVTEVTKSB7XG4gICAgICAgIGF0TGVhc3RPbmVTdWNjZXNzSW5Sb3VsZE9mUnVsZXNBcHBsaWNhdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgbnVtYmVyT2ZSdWxlc0FwcGxpY2F0aW9ucysrO1xuICAgICAgICBmb3IgKG0xID0gMCwgbGVuMSA9IHVzZXJTaW1wbGlmaWNhdGlvbnNJbkxpc3RGb3JtLmxlbmd0aDsgbTEgPCBsZW4xOyBtMSsrKSB7XG4gICAgICAgICAgZWFjaFNpbXBsaWZpY2F0aW9uID0gdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm1bbTFdO1xuICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICAgIGVhY2hDb25zZWN1dGl2ZVJ1bGVBcHBsaWNhdGlvbiA9IDA7XG4gICAgICAgICAgd2hpbGUgKHN1Y2Nlc3MgJiYgZWFjaENvbnNlY3V0aXZlUnVsZUFwcGxpY2F0aW9uIDwgTUFYX0NPTlNFQ1VUSVZFX0FQUExJQ0FUSU9OU19PRl9TSU5HTEVfUlVMRSkge1xuICAgICAgICAgICAgZWFjaENvbnNlY3V0aXZlUnVsZUFwcGxpY2F0aW9uKys7XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzaW1wbGlmeSAtIHRvczogXCIgKyB0b3MgKyBcIiBjaGVja2luZyBwYXR0ZXJuOiBcIiArIGVhY2hTaW1wbGlmaWNhdGlvbiArIFwiIG9uOiBcIiArIHAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHB1c2hfc3ltYm9sKE5JTCk7XG4gICAgICAgICAgICBzdWNjZXNzID0gdHJhbnNmb3JtKGVhY2hTaW1wbGlmaWNhdGlvbiwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICBhdExlYXN0T25lU3VjY2Vzc0luUm91bGRPZlJ1bGVzQXBwbGljYXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAxID0gc3RhY2tbdG9zIC0gMV07XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwMSBhdCB0aGlzIHN0YWdlIG9mIHNpbXBsaWZpY2F0aW9uOiBcIiArIHAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVhY2hDb25zZWN1dGl2ZVJ1bGVBcHBsaWNhdGlvbiA9PT0gTUFYX0NPTlNFQ1VUSVZFX0FQUExJQ0FUSU9OU19PRl9TSU5HTEVfUlVMRSkge1xuICAgICAgICAgICAgc3RvcChcIm1heGltdW0gYXBwbGljYXRpb24gb2Ygc2luZ2xlIHRyYW5zZm9ybWF0aW9uIHJ1bGUgZXhjZWVkZWQ6IFwiICsgZWFjaFNpbXBsaWZpY2F0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChudW1iZXJPZlJ1bGVzQXBwbGljYXRpb25zID09PSBNQVhfQ09OU0VDVVRJVkVfQVBQTElDQVRJT05TX09GX0FMTF9SVUxFUykge1xuICAgICAgICBzdG9wKFwibWF4aW11bSBhcHBsaWNhdGlvbiBvZiBhbGwgdHJhbnNmb3JtYXRpb24gcnVsZXMgZXhjZWVkZWQgXCIpO1xuICAgICAgfVxuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTUVUQVggPSBcIiArIGdldF9iaW5kaW5nKHN5bWJvbChNRVRBWCkpKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJNRVRBQSA9IFwiICsgZ2V0X2JpbmRpbmcoc3ltYm9sKE1FVEFBKSkpO1xuICAgICAgICByZXR1cm4gY29uc29sZS5sb2coXCJNRVRBQiA9IFwiICsgZ2V0X2JpbmRpbmcoc3ltYm9sKE1FVEFCKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgc2ltcGxpZnlGb3JDb2RlR2VuZXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBydW5Vc2VyRGVmaW5lZFNpbXBsaWZpY2F0aW9ucygpO1xuICAgIGNvZGVHZW4gPSB0cnVlO1xuICAgIC8vIGluIFwiY29kZUdlblwiIG1vZGUgd2UgY29tcGxldGVseVxuICAgIC8vIGV2YWwgYW5kIHNpbXBsaWZ5IHRoZSBmdW5jdGlvbiBib2RpZXNcbiAgICAvLyBiZWNhdXNlIHdlIHJlYWxseSB3YW50IHRvIHJlc29sdmUgYWxsXG4gICAgLy8gdGhlIHZhcmlhYmxlcyBpbmRpcmVjdGlvbnMgYW5kIGFwcGx5XG4gICAgLy8gYWxsIHRoZSBzaW1wbGlmaWNhdGlvbnMgd2UgY2FuLlxuICAgIHNpbXBsaWZ5X21haW4oKTtcbiAgICBjb2RlR2VuID0gZmFsc2U7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBzaW1wbGlmeSA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICBzaW1wbGlmeV9tYWluKCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBzaW1wbGlmeV9tYWluID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MsIGZib2R5O1xuICAgIHAxID0gcG9wKCk7XG4gICAgLy8gd2hlbiB3ZSBkbyBjb2RlIGdlbmVyYXRpb24sIHdlIHByb2NlZWQgdG9cbiAgICAvLyBmdWxseSBldmFsdWF0ZSBhbmQgc2ltcGxpZnkgdGhlIGJvZHkgb2ZcbiAgICAvLyBhIGZ1bmN0aW9uLCBzbyB3ZSByZXNvbHZlIGFsbCB2YXJpYWJsZXNcbiAgICAvLyBpbmRpcmVjdGlvbnMgYW5kIHdlIHNpbXBsaWZ5IGV2ZXJ5dGhpbmdcbiAgICAvLyB3ZSBjYW4gZ2l2ZW4gdGhlIGN1cnJlbnQgYXNzaWdubWVudHMuXG4gICAgaWYgKGNvZGVHZW4gJiYgY2FyKHAxKSA9PT0gc3ltYm9sKEZVTkNUSU9OKSkge1xuICAgICAgZmJvZHkgPSBjYWRyKHAxKTtcbiAgICAgIHB1c2goZmJvZHkpO1xuICAgICAgLy8gbGV0J3Mgc2ltcGxpZnkgdGhlIGJvZHkgc28gd2UgZ2l2ZSBpdCBhXG4gICAgICAvLyBjb21wYWN0IGZvcm1cbiAgICAgIGV2YWwoKTtcbiAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICBwMyA9IHBvcCgpO1xuICAgICAgLy8gcmVwbGFjZSB0aGUgZXZhbGVkIGJvZHlcbiAgICAgIGFyZ3MgPSBjYWRkcihwMSk7XG4gICAgICBwdXNoX3N5bWJvbChGVU5DVElPTik7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHB1c2goYXJncyk7XG4gICAgICBsaXN0KDMpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICB9XG4gICAgaWYgKGlzdGVuc29yKHAxKSkge1xuICAgICAgc2ltcGxpZnlfdGVuc29yKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChGaW5kKHAxLCBzeW1ib2woRkFDVE9SSUFMKSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgc2ltZmFjKCk7XG4gICAgICBwMiA9IHBvcCgpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICByYXRpb25hbGl6ZSgpO1xuICAgICAgc2ltZmFjKCk7XG4gICAgICBwMyA9IHBvcCgpO1xuICAgICAgaWYgKGNvdW50KHAyKSA8IGNvdW50KHAzKSkge1xuICAgICAgICBwMSA9IHAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcDEgPSBwMztcbiAgICAgIH1cbiAgICB9XG4gICAgZjEwKCk7XG4gICAgZjEoKTtcbiAgICBmMigpO1xuICAgIGYzKCk7XG4gICAgZjQoKTtcbiAgICBmNSgpO1xuICAgIGY5KCk7XG4gICAgc2ltcGxpZnlfcG9sYXJSZWN0KCk7XG4gICAgaWYgKGRvX3NpbXBsaWZ5X25lc3RlZF9yYWRpY2Fscykge1xuICAgICAgLy8gaWYgdGhlcmUgaXMgc29tZSBkZS1uZXN0aW5nIHRoZW5cbiAgICAgIC8vIHJlLXJ1biBhIHNpbXBsaWZpY2F0aW9uIGJlY2F1c2VcbiAgICAgIC8vIHRoZSBzaGFwZSBvZiB0aGUgZXhwcmVzc2lvbiBtaWdodFxuICAgICAgLy8gaGF2ZSBjaGFuZ2VkIHNpZ25pZmljYW50bHkuXG4gICAgICAvLyBlLmcuIHNpbXBsaWZ5KDE0XigxLzIpIC0gKDE2IC0gNCo3XigxLzIpKV4oMS8yKSlcbiAgICAgIC8vIG5lZWRzIHNvbWUgbW9yZSBzZW1wbGlmaWNhdGlvbiBhZnRlciB0aGUgZGUtbmVzdGluZy5cbiAgICAgIGlmIChzaW1wbGlmeV9uZXN0ZWRfcmFkaWNhbHMoKSkge1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImRlLW5lc3Rpbmcgc3VjY2Vzc2Z1bCBpbnRvOiBcIiArIHAxLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHNpbXBsaWZ5X3JlY3RUb0Nsb2NrKCk7XG4gICAgc2ltcGxpZnlfcmF0aW9uYWxfZXhwcmVzc2lvbnMoKTtcbiAgICByZXR1cm4gcHVzaChwMSk7XG4gIH07XG5cbiAgc2ltcGxpZnlfdGVuc29yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGwxLCBtMSwgcmVmMiwgcmVmMztcbiAgICBpID0gMDtcbiAgICBwMiA9IGFsbG9jX3RlbnNvcihwMS50ZW5zb3IubmVsZW0pO1xuICAgIHAyLnRlbnNvci5uZGltID0gcDEudGVuc29yLm5kaW07XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gcDEudGVuc29yLm5kaW07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAyLnRlbnNvci5kaW1baV0gPSBwMS50ZW5zb3IuZGltW2ldO1xuICAgIH1cbiAgICBmb3IgKGkgPSBtMSA9IDAsIHJlZjMgPSBwMS50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjMgPyBtMSA8IHJlZjMgOiBtMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKyttMSA6IC0tbTEpIHtcbiAgICAgIHB1c2gocDEudGVuc29yLmVsZW1baV0pO1xuICAgICAgc2ltcGxpZnkoKTtcbiAgICAgIHAyLnRlbnNvci5lbGVtW2ldID0gcG9wKCk7XG4gICAgfVxuICAgIGNoZWNrX3RlbnNvcl9kaW1lbnNpb25zKHAyKTtcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAyKSkge1xuICAgICAgcDIgPSB6ZXJvOyAvLyBudWxsIHRlbnNvciBiZWNvbWVzIHNjYWxhciB6ZXJvXG4gICAgfVxuICAgIHJldHVybiBwdXNoKHAyKTtcbiAgfTtcblxuICAvLyB0cnkgcmF0aW9uYWxpemluZ1xuICBmMSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChjYXIocDEpICE9PSBzeW1ib2woQUREKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoKHAxKTtcbiAgICByYXRpb25hbGl6ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKGNvdW50KHAyKSA8IGNvdW50KHAxKSkge1xuICAgICAgcmV0dXJuIHAxID0gcDI7XG4gICAgfVxuICB9O1xuXG4gIC8vIHRyeSBjb25kZW5zaW5nXG4gIGYyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGNhcihwMSkgIT09IHN5bWJvbChBREQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocDEpO1xuICAgIENvbmRlbnNlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBpZiAoY291bnQocDIpIDw9IGNvdW50KHAxKSkge1xuICAgICAgcmV0dXJuIHAxID0gcDI7XG4gICAgfVxuICB9O1xuXG4gIC8vIHRoaXMgc2ltcGxpZmllcyBmb3JtcyBsaWtlIChBLUIpIC8gKEItQSlcbiAgZjMgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKHAxKTtcbiAgICByYXRpb25hbGl6ZSgpO1xuICAgIG5lZ2F0ZSgpO1xuICAgIHJhdGlvbmFsaXplKCk7XG4gICAgbmVnYXRlKCk7XG4gICAgcmF0aW9uYWxpemUoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGlmIChjb3VudChwMikgPCBjb3VudChwMSkpIHtcbiAgICAgIHJldHVybiBwMSA9IHAyO1xuICAgIH1cbiAgfTtcblxuICBmMTAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYiwgY2FycDEsIG1pYW8sIG9yaWdpbmFsZXhwYW5kaW5nO1xuICAgIGNhcnAxID0gY2FyKHAxKTtcbiAgICBtaWFvID0gY2RyKHAxKTtcbiAgICBpZiAoY2FycDEgPT09IHN5bWJvbChNVUxUSVBMWSkgfHwgaXNpbm5lcm9yZG90KHAxKSkge1xuICAgICAgLy8gYm90aCBvcGVyYW5kcyBhIHRyYW5zcG9zZT9cbiAgICAgIGlmICgoY2FyKGNhcihjZHIocDEpKSkgPT09IHN5bWJvbChUUkFOU1BPU0UpKSAmJiAoY2FyKGNhcihjZHIoY2RyKHAxKSkpKSA9PT0gc3ltYm9sKFRSQU5TUE9TRSkpKSB7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwibWF5YmUgY29sbGVjdGluZyBhIHRyYW5zcG9zZSBcIiArIHAxKTtcbiAgICAgICAgfVxuICAgICAgICBhID0gY2FkcihjYXIoY2RyKHAxKSkpO1xuICAgICAgICBiID0gY2FkcihjYXIoY2RyKGNkcihwMSkpKSk7XG4gICAgICAgIGlmIChjYXJwMSA9PT0gc3ltYm9sKE1VTFRJUExZKSkge1xuICAgICAgICAgIHB1c2goYSk7XG4gICAgICAgICAgcHVzaChiKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzaW5uZXJvcmRvdChwMSkpIHtcbiAgICAgICAgICBwdXNoKGIpO1xuICAgICAgICAgIHB1c2goYSk7XG4gICAgICAgICAgaW5uZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgb3JpZ2luYWxleHBhbmRpbmcgPSBleHBhbmRpbmc7XG4gICAgICAgIGV4cGFuZGluZyA9IGZhbHNlO1xuICAgICAgICB0cmFuc3Bvc2UoKTtcbiAgICAgICAgZXhwYW5kaW5nID0gb3JpZ2luYWxleHBhbmRpbmc7XG4gICAgICAgIHAyID0gcG9wKCk7XG4gICAgICAgIGlmIChjb3VudChwMikgPCBjb3VudChwMSkpIHtcbiAgICAgICAgICBwMSA9IHAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcImNvbGxlY3RpbmcgYSB0cmFuc3Bvc2UgXCIgKyBwMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gdHJ5IGV4cGFuZGluZyBkZW5vbWluYXRvcnNcbiAgZjQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAxKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoKHAxKTtcbiAgICByYXRpb25hbGl6ZSgpO1xuICAgIGludmVyc2UoKTtcbiAgICByYXRpb25hbGl6ZSgpO1xuICAgIGludmVyc2UoKTtcbiAgICByYXRpb25hbGl6ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKGNvdW50KHAyKSA8IGNvdW50KHAxKSkge1xuICAgICAgcmV0dXJuIHAxID0gcDI7XG4gICAgfVxuICB9O1xuXG4gIC8vIHNpbXBsaWZpZXMgdHJpZyBmb3Jtc1xuICBzaW1wbGlmeV90cmlnID0gZnVuY3Rpb24oKSB7XG4gICAgc2F2ZSgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgZjUoKTtcbiAgICBwdXNoKHAxKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIGY1ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKEZpbmQocDEsIHN5bWJvbChTSU4pKSA9PT0gMCAmJiBGaW5kKHAxLCBzeW1ib2woQ09TKSkgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcDIgPSBwMTtcbiAgICB0cmlnbW9kZSA9IDE7XG4gICAgcHVzaChwMik7XG4gICAgRXZhbCgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgdHJpZ21vZGUgPSAyO1xuICAgIHB1c2gocDIpO1xuICAgIEV2YWwoKTtcbiAgICBwNCA9IHBvcCgpO1xuICAgIHRyaWdtb2RlID0gMDtcbiAgICBpZiAoY291bnQocDQpIDwgY291bnQocDMpIHx8IG50ZXJtcyhwNCkgPCBudGVybXMocDMpKSB7XG4gICAgICBwMyA9IHA0O1xuICAgIH1cbiAgICBpZiAoY291bnQocDMpIDwgY291bnQocDEpIHx8IG50ZXJtcyhwMykgPCBudGVybXMocDEpKSB7XG4gICAgICByZXR1cm4gcDEgPSBwMztcbiAgICB9XG4gIH07XG5cbiAgLy8gaWYgaXQncyBhIHN1bSB0aGVuIHRyeSB0byBzaW1wbGlmeSBlYWNoIHRlcm1cbiAgZjkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2xkcDEsIG9sZHAyO1xuICAgIGlmIChjYXIocDEpICE9PSBzeW1ib2woQUREKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgcDIgPSBjZHIocDEpO1xuICAgIHdoaWxlIChpc2NvbnMocDIpKSB7XG4gICAgICBwdXNoKGNhcihwMikpO1xuICAgICAgc2ltcGxpZnkoKTtcbiAgICAgIGFkZCgpO1xuICAgICAgb2xkcDEgPSBwMTtcbiAgICAgIG9sZHAyID0gcDI7XG4gICAgICBwMSA9IHBvcCgpO1xuICAgICAgc2ltcGxpZnlfcmF0aW9uYWxfZXhwcmVzc2lvbnMoKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcDEgPSBvbGRwMTtcbiAgICAgIHAyID0gb2xkcDI7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgfVxuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKGNvdW50KHAyKSA8IGNvdW50KHAxKSkge1xuICAgICAgcmV0dXJuIHAxID0gcDI7XG4gICAgfVxuICB9O1xuXG4gIHNpbXBsaWZ5X3JhdGlvbmFsX2V4cHJlc3Npb25zID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlbm9tLCBudW0sIHBvbHlWYXIsIHNhc2EsIHRoZUdDRDtcbiAgICBwdXNoKHAxKTtcbiAgICBkZW5vbWluYXRvcigpO1xuICAgIGRlbm9tID0gcG9wKCk7XG4gICAgaWYgKGlzb25lKGRlbm9tKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoKHAxKTtcbiAgICBudW1lcmF0b3IoKTtcbiAgICBudW0gPSBwb3AoKTtcbiAgICBpZiAoaXNvbmUobnVtKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIShwb2x5VmFyID0gYXJldW5pdmFycG9seXNmYWN0b3JlZG9yZXhwYW5kZWRmb3JtKG51bSwgZGVub20pKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoKG51bSk7XG4gICAgcHVzaChkZW5vbSk7XG4gICAgZ2NkKCk7XG4gICAgcHVzaChwb2x5VmFyKTtcbiAgICBmYWN0b3IoKTtcbiAgICB0aGVHQ0QgPSBwb3AoKTtcbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gY29tbW9uIGZhY3RvcnMgdGhlblxuICAgIC8vIGJhaWxcbiAgICBpZiAoaXNvbmUodGhlR0NEKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwdXNoKG51bSk7XG4gICAgcHVzaChwb2x5VmFyKTtcbiAgICBmYWN0b3IoKTtcbiAgICBwdXNoKHRoZUdDRCk7XG4gICAgLy9kaXZpZGUoKVxuICAgIGludmVyc2UoKTtcbiAgICBtdWx0aXBseV9ub2V4cGFuZCgpO1xuICAgIHNpbXBsaWZ5KCk7XG4gICAgc2FzYSA9IHN0YWNrW3RvcyAtIDFdLnRvU3RyaW5nKCk7XG4gICAgcHVzaChkZW5vbSk7XG4gICAgcHVzaChwb2x5VmFyKTtcbiAgICBmYWN0b3IoKTtcbiAgICBwdXNoKHRoZUdDRCk7XG4gICAgLy9kaXZpZGUoKVxuICAgIGludmVyc2UoKTtcbiAgICBtdWx0aXBseV9ub2V4cGFuZCgpO1xuICAgIHNpbXBsaWZ5KCk7XG4gICAgc2FzYSA9IHN0YWNrW3RvcyAtIDFdLnRvU3RyaW5nKCk7XG4gICAgZGl2aWRlKCk7XG4gICAgLy9zaW1wbGlmeSgpXG4gICAgQ29uZGVuc2UoKTtcbiAgICBzYXNhID0gc3RhY2tbdG9zIC0gMV0udG9TdHJpbmcoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGlmIChjb3VudChwMikgPCBjb3VudChwMSkpIHtcbiAgICAgIHJldHVybiBwMSA9IHAyO1xuICAgIH1cbiAgfTtcblxuICAvLyB0aGluZ3MgbGlrZSA2Kihjb3MoMi85KnBpKStpKnNpbigyLzkqcGkpKVxuICAvLyB3aGVyZSB3ZSBoYXZlIHNpbiBhbmQgY29zLCB0aG9zZSBtaWdodCBzdGFydCB0b1xuICAvLyBsb29rIGJldHRlciBpbiBjbG9jayBmb3JtIGkuZS4gIDYqKC0xKV4oMi85KSBcbiAgc2ltcGxpZnlfcmVjdFRvQ2xvY2sgPSBmdW5jdGlvbigpIHtcbiAgICAvL2RlYnVnZ2VyXG4gICAgaWYgKEZpbmQocDEsIHN5bWJvbChTSU4pKSA9PT0gMCAmJiBGaW5kKHAxLCBzeW1ib2woQ09TKSkgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgRXZhbCgpO1xuICAgIGNsb2NrZm9ybSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImJlZm9yZSBzaW1wbGlmaWNhdGlvbiBjbG9ja2Zvcm06IFwiICsgcDEgKyBcIiBhZnRlcjogXCIgKyBwMik7XG4gICAgfVxuICAgIGlmIChjb3VudChwMikgPCBjb3VudChwMSkpIHtcbiAgICAgIHJldHVybiBwMSA9IHAyO1xuICAgIH1cbiAgfTtcblxuICBzaW1wbGlmeV9wb2xhclJlY3QgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKHAxKTtcbiAgICBwb2xhclJlY3RBTWludXNPbmVCYXNlKCk7XG4gICAgRXZhbCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKGNvdW50KHAyKSA8IGNvdW50KHAxKSkge1xuICAgICAgcmV0dXJuIHAxID0gcDI7XG4gICAgfVxuICB9O1xuXG4gIHBvbGFyUmVjdEFNaW51c09uZUJhc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoaXNpbWFnaW5hcnl1bml0KHAxKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlcXVhbChjYXIocDEpLCBzeW1ib2woUE9XRVIpKSAmJiBpc21pbnVzb25lKGNhZHIocDEpKSkge1xuICAgICAgLy8gYmFzZSB3ZSBqdXN0IHNhaWQgaXMgbWludXMgMVxuICAgICAgcHVzaChvbmUpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICAvLyBleHBvbmVudFxuICAgICAgcHVzaChjYWRkcihwMSkpO1xuICAgICAgcG9sYXJSZWN0QU1pbnVzT25lQmFzZSgpO1xuICAgICAgcG93ZXIoKTtcbiAgICAgIC8vIHRyeSB0byBzaW1wbGlmeSBpdCB1c2luZyBwb2xhciBhbmQgcmVjdFxuICAgICAgcG9sYXIoKTtcbiAgICAgIHJlY3QoKTtcbiAgICB9IGVsc2UgaWYgKGlzY29ucyhwMSkpIHtcbiAgICAgIGggPSB0b3M7XG4gICAgICB3aGlsZSAoaXNjb25zKHAxKSkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwicmVjdXJzaW5nIG9uOiBcIiArIGNhcihwMSkudG9TdHJpbmcoKSlcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgcG9sYXJSZWN0QU1pbnVzT25lQmFzZSgpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiLi4udHJhbnNmb3JtZWQgaW50bzogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgfVxuICAgICAgbGlzdCh0b3MgLSBoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMSk7XG4gICAgfVxuICAgIHJlc3RvcmUoKTtcbiAgfTtcblxuICBudGVybXMgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKGNhcihwKSAhPT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGVuZ3RoKHApIC0gMTtcbiAgICB9XG4gIH07XG5cbiAgc2ltcGxpZnlfbmVzdGVkX3JhZGljYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByZXZfZXhwYW5kaW5nLCBzaW1wbGlmaWNhdGlvbldpdGhDb25kZW5zZSwgc2ltcGxpZmljYXRpb25XaXRob3V0Q29uZGVuc2UsIHNvbWV0aGluZ1NpbXBsaWZpZWQ7XG4gICAgaWYgKHJlY3Vyc2lvbkxldmVsTmVzdGVkUmFkaWNhbHNSZW1vdmFsID4gMCkge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGVuZXN0aW5nIGJhaWxpbmcgb3V0IGJlY2F1c2Ugb2YgdG9vIG11Y2ggcmVjdXJzaW9uXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwdXNoKHAxKTtcbiAgICBzb21ldGhpbmdTaW1wbGlmaWVkID0gdGFrZV9jYXJlX29mX25lc3RlZF9yYWRpY2FscygpO1xuICAgIC8vIGluIHRoaXMgcGFyYWdyYXBoIHdlIGNoZWNrIHdoZXRoZXIgd2UgY2FuIGNvbGxlY3RcbiAgICAvLyBjb21tb24gZmFjdG9ycyB3aXRob3V0IGNvbXBsaWNhdGluZyB0aGUgZXhwcmVzc2lvblxuICAgIC8vIGluIHBhcnRpY3VsYXIgd2Ugd2FudCB0byBhdm9pZCBcbiAgICAvLyBjb2xsZWN0aW5nIHJhZGljYWxzIGxpa2UgaW4gdGhpcyBjYXNlIHdoZXJlXG4gICAgLy8gd2UgY29sbGVjdCBzcXJ0KDIpOlxuICAgIC8vICAgMi0yXigxLzIpIGludG8gMl4oMS8yKSooLTErMl4oMS8yKSlcbiAgICAvLyBidXQgd2UgZG8gbGlrZSB0byBjb2xsZWN0IG90aGVyIG5vbi1yYWRpY2FscyBlLmcuXG4gICAgLy8gICAxNy8yKzMvMio1XigxLzIpIGludG8gMS8yKigxNyszKjVeKDEvMikpXG4gICAgLy8gc28gd2hhdCB3ZSBkbyBpcyB3ZSBjb3VudCB0aGUgcG93ZXJzIGFuZCB3ZSBjaGVja1xuICAgIC8vIHdoaWNoIHZlcnNpb24gaGFzIHRoZSBsZWFzdCBudW1iZXIgb2YgdGhlbS5cbiAgICBzaW1wbGlmaWNhdGlvbldpdGhvdXRDb25kZW5zZSA9IHN0YWNrW3RvcyAtIDFdO1xuICAgIHByZXZfZXhwYW5kaW5nID0gZXhwYW5kaW5nO1xuICAgIGV4cGFuZGluZyA9IDA7XG4gICAgeXljb25kZW5zZSgpO1xuICAgIGV4cGFuZGluZyA9IHByZXZfZXhwYW5kaW5nO1xuICAgIHNpbXBsaWZpY2F0aW9uV2l0aENvbmRlbnNlID0gcG9wKCk7XG4gICAgLy9jb25zb2xlLmxvZyhcIm9jY3VycmVuY2VzIG9mIHBvd2VycyBpbiBcIiArIHNpbXBsaWZpY2F0aW9uV2l0aG91dENvbmRlbnNlICsgXCIgOlwiICsgY291bnRPY2N1cnJlbmNlc09mU3ltYm9sKHN5bWJvbChQT1dFUiksc2ltcGxpZmljYXRpb25XaXRob3V0Q29uZGVuc2UpKVxuICAgIC8vY29uc29sZS5sb2coXCJvY2N1cnJlbmNlcyBvZiBwb3dlcnMgaW4gXCIgKyBzaW1wbGlmaWNhdGlvbldpdGhDb25kZW5zZSArIFwiIDpcIiArIGNvdW50T2NjdXJyZW5jZXNPZlN5bWJvbChzeW1ib2woUE9XRVIpLHNpbXBsaWZpY2F0aW9uV2l0aENvbmRlbnNlKSlcbiAgICBpZiAoY291bnRPY2N1cnJlbmNlc09mU3ltYm9sKHN5bWJvbChQT1dFUiksIHNpbXBsaWZpY2F0aW9uV2l0aG91dENvbmRlbnNlKSA8IGNvdW50T2NjdXJyZW5jZXNPZlN5bWJvbChzeW1ib2woUE9XRVIpLCBzaW1wbGlmaWNhdGlvbldpdGhDb25kZW5zZSkpIHtcbiAgICAgIHB1c2goc2ltcGxpZmljYXRpb25XaXRob3V0Q29uZGVuc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHNpbXBsaWZpY2F0aW9uV2l0aENvbmRlbnNlKTtcbiAgICB9XG4gICAgLy8gd2UgZ290IG91dCByZXN1bHQsIHdyYXAgdXBcbiAgICBwMSA9IHBvcCgpO1xuICAgIHJldHVybiBzb21ldGhpbmdTaW1wbGlmaWVkO1xuICB9O1xuXG4gIHRha2VfY2FyZV9vZl9uZXN0ZWRfcmFkaWNhbHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgQSwgQiwgQywgU09MVVRJT04sIGFueVJhZGljYWxTaW1wbGlmaWNhdGlvbldvcmtlZCwgYmFzZSwgY2hlY2tTaXplLCBjb21tb25CYXNlcywgY29tbW9uSW5uZXJFeHBvbmVudCwgY291bnRpbmdUZXJtcywgZWFjaFNvbHV0aW9uLCBleHBvbmVudCwgZmlyc3RUZXJtLCBoLCBpLCBpbm5lcmJhc2UsIGlubmVyZXhwb25lbnQsIGwxLCBsZW4sIGxlbjEsIGxlbjIsIGxlbjMsIGxvd2VyY2FzZV9hLCBsb3dlcmNhc2VfYiwgbTEsIG4xLCBudW1iZXJPZlRlcm1zLCBvMSwgcG9zc2libGVOZXdFeHByZXNzaW9uLCBwb3NzaWJsZU5ld0V4cHJlc3Npb25WYWx1ZSwgcG9zc2libGVSYXRpb25hbFNvbHV0aW9ucywgcG9zc2libGVTb2x1dGlvbnMsIHBvdGVudGlhbFBvd2VyLCByZWFsT2Zwb3NzaWJsZVJhdGlvbmFsU29sdXRpb25zLCByZWYyLCBzZWNvbmRUZXJtLCBzZWNvbmRUZXJtRmFjdG9yLCB0ZXJtc1RoYXRBcmVOb3RQb3dlcnMsIHdoaWNoUmF0aW9uYWxTb2x1dGlvbjtcbiAgICBpZiAocmVjdXJzaW9uTGV2ZWxOZXN0ZWRSYWRpY2Fsc1JlbW92YWwgPiAwKSB7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJkZW5lc3RpbmcgYmFpbGluZyBvdXQgYmVjYXVzZSBvZiB0b28gbXVjaCByZWN1cnNpb25cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNhdmUoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIC8vY29uc29sZS5sb2coXCJ0YWtlX2NhcmVfb2ZfbmVzdGVkX3JhZGljYWxzIHAxOiBcIiArIHAxLnRvU3RyaW5nKCkpXG4gICAgaWYgKGVxdWFsKGNhcihwMSksIHN5bWJvbChQT1dFUikpKSB7XG4gICAgICAvL2NvbnNvbGUubG9nKFwib2sgaXQncyBhIHBvd2VyIFwiKVxuICAgICAgYmFzZSA9IGNhZHIocDEpO1xuICAgICAgZXhwb25lbnQgPSBjYWRkcihwMSk7XG4gICAgICBpZiAoIWlzbWludXNvbmUoZXhwb25lbnQpICYmIGVxdWFsKGNhcihiYXNlKSwgc3ltYm9sKEFERCkpICYmIGlzZnJhY3Rpb24oZXhwb25lbnQpICYmIChlcXVhbHEoZXhwb25lbnQsIDEsIDMpIHx8IGVxdWFscShleHBvbmVudCwgMSwgMikpKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJvayB0aGVyZSBpcyBhIHJhZGl4IHdpdGggYSB0ZXJtIGluc2lkZVwiKVxuICAgICAgICBmaXJzdFRlcm0gPSBjYWRyKGJhc2UpO1xuICAgICAgICBwdXNoKGZpcnN0VGVybSk7XG4gICAgICAgIHRha2VfY2FyZV9vZl9uZXN0ZWRfcmFkaWNhbHMoKTtcbiAgICAgICAgcG9wKCk7XG4gICAgICAgIHNlY29uZFRlcm0gPSBjYWRkcihiYXNlKTtcbiAgICAgICAgcHVzaChzZWNvbmRUZXJtKTtcbiAgICAgICAgdGFrZV9jYXJlX29mX25lc3RlZF9yYWRpY2FscygpO1xuICAgICAgICBwb3AoKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInBvc3NpYmxlIGRvdWJsZSByYWRpY2FsIHRlcm0xOiBcIiArIGZpcnN0VGVybSlcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInBvc3NpYmxlIGRvdWJsZSByYWRpY2FsIHRlcm0yOiBcIiArIHNlY29uZFRlcm0pXG4gICAgICAgIG51bWJlck9mVGVybXMgPSAwO1xuICAgICAgICBjb3VudGluZ1Rlcm1zID0gYmFzZTtcbiAgICAgICAgd2hpbGUgKGNkcihjb3VudGluZ1Rlcm1zKSAhPT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgICAgICBudW1iZXJPZlRlcm1zKys7XG4gICAgICAgICAgY291bnRpbmdUZXJtcyA9IGNkcihjb3VudGluZ1Rlcm1zKTtcbiAgICAgICAgfVxuICAgICAgICAvL2NvbnNvbGUubG9nKFwibnVtYmVyIG9mIHRlcm1zOiBcIiArIG51bWJlck9mVGVybXMpXG4gICAgICAgIGlmIChudW1iZXJPZlRlcm1zID4gMikge1xuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ0b28gbWFueSB0ZXJtcyB1bmRlciBvdXRlciByYWRpeCBcIilcbiAgICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxpc3QgaGVyZSBhbGwgdGhlIGZhY3RvcnNcbiAgICAgICAgY29tbW9uSW5uZXJFeHBvbmVudCA9IG51bGw7XG4gICAgICAgIGNvbW1vbkJhc2VzID0gW107XG4gICAgICAgIHRlcm1zVGhhdEFyZU5vdFBvd2VycyA9IFtdO1xuICAgICAgICBpZiAoY2FyKHNlY29uZFRlcm0pID09PSBzeW1ib2woTVVMVElQTFkpKSB7XG4gICAgICAgICAgLy8gcHJvZHVjdCBvZiBmYWN0b3JzXG4gICAgICAgICAgc2Vjb25kVGVybUZhY3RvciA9IGNkcihzZWNvbmRUZXJtKTtcbiAgICAgICAgICBpZiAoaXNjb25zKHNlY29uZFRlcm1GYWN0b3IpKSB7XG4gICAgICAgICAgICB3aGlsZSAoaXNjb25zKHNlY29uZFRlcm1GYWN0b3IpKSB7XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJzZWNvbmQgdGVybSBmYWN0b3IgQklTOiBcIiArIGNhcihzZWNvbmRUZXJtRmFjdG9yKS50b1N0cmluZygpKVxuICAgICAgICAgICAgICBwb3RlbnRpYWxQb3dlciA9IGNhcihzZWNvbmRUZXJtRmFjdG9yKTtcbiAgICAgICAgICAgICAgaWYgKGNhcihwb3RlbnRpYWxQb3dlcikgPT09IHN5bWJvbChQT1dFUikpIHtcbiAgICAgICAgICAgICAgICBpbm5lcmJhc2UgPSBjYWRyKHBvdGVudGlhbFBvd2VyKTtcbiAgICAgICAgICAgICAgICBpbm5lcmV4cG9uZW50ID0gY2FkZHIocG90ZW50aWFsUG93ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChlcXVhbHEoaW5uZXJleHBvbmVudCwgMSwgMikpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjb21tb25Jbm5lckV4cG9uZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uSW5uZXJFeHBvbmVudCA9IGlubmVyZXhwb25lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkJhc2VzLnB1c2goaW5uZXJiYXNlKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcXVhbChpbm5lcmV4cG9uZW50LCBjb21tb25Jbm5lckV4cG9uZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJjb21tb24gYmFzZTogXCIgKyBpbm5lcmJhc2UudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgICBjb21tb25CYXNlcy5wdXNoKGlubmVyYmFzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwibm8gY29tbW9uIGJhc2VzIGhlcmUgXCIpXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInRoaXMgb25lIGlzIGEgcG93ZXIgYmFzZTogXCIgKyBpbm5lcmJhc2UgKyBcIiAsIGV4cG9uZW50OiBcIiArIGlubmVyZXhwb25lbnQpXG4gICAgICAgICAgICAgICAgdGVybXNUaGF0QXJlTm90UG93ZXJzLnB1c2gocG90ZW50aWFsUG93ZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNlY29uZFRlcm1GYWN0b3IgPSBjZHIoc2Vjb25kVGVybUZhY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNhcihzZWNvbmRUZXJtKSA9PT0gc3ltYm9sKFBPV0VSKSkge1xuICAgICAgICAgIGlubmVyYmFzZSA9IGNhZHIoc2Vjb25kVGVybSk7XG4gICAgICAgICAgaW5uZXJleHBvbmVudCA9IGNhZGRyKHNlY29uZFRlcm0pO1xuICAgICAgICAgIGlmICgoY29tbW9uSW5uZXJFeHBvbmVudCA9PSBudWxsKSAmJiBlcXVhbHEoaW5uZXJleHBvbmVudCwgMSwgMikpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ0YWNrbGluZyBkb3VibGUgcmFkaWNhbCAyOiBcIiArIHAxLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBjb21tb25Jbm5lckV4cG9uZW50ID0gaW5uZXJleHBvbmVudDtcbiAgICAgICAgICAgIGNvbW1vbkJhc2VzLnB1c2goaW5uZXJiYXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbW1vbkJhc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHB1c2gocDEpO1xuICAgICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgQSA9IGZpcnN0VGVybTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkE6IFwiICsgQS50b1N0cmluZygpKVxuICAgICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICAgIGZvciAobDEgPSAwLCBsZW4gPSBjb21tb25CYXNlcy5sZW5ndGg7IGwxIDwgbGVuOyBsMSsrKSB7XG4gICAgICAgICAgaSA9IGNvbW1vbkJhc2VzW2wxXTtcbiAgICAgICAgICBwdXNoKGkpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImJhc2lzIHdpdGggY29tbW9uIGV4cG9uZW50OiBcIiArIGkudG9TdHJpbmcoKSlcbiAgICAgICAgQyA9IHBvcCgpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiQzogXCIgKyBDLnRvU3RyaW5nKCkpXG4gICAgICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgICAgZm9yIChtMSA9IDAsIGxlbjEgPSB0ZXJtc1RoYXRBcmVOb3RQb3dlcnMubGVuZ3RoOyBtMSA8IGxlbjE7IG0xKyspIHtcbiAgICAgICAgICBpID0gdGVybXNUaGF0QXJlTm90UG93ZXJzW20xXTtcbiAgICAgICAgICBwdXNoKGkpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInRlcm1zIHRoYXQgYXJlIG5vdCBwb3dlcnM6IFwiICsgaS50b1N0cmluZygpKVxuICAgICAgICBCID0gcG9wKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJCOiBcIiArIEIudG9TdHJpbmcoKSlcbiAgICAgICAgaWYgKGVxdWFscShleHBvbmVudCwgMSwgMykpIHtcbiAgICAgICAgICBwdXNoKEEpO1xuICAgICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICAgIHB1c2goQyk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoKEIpO1xuICAgICAgICAgIGRpdmlkZSgpOyAvLyA0dGggY29lZmZcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiY29uc3RhbnQgY29lZmYgXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICBjaGVja1NpemUgPSBwb3AoKTtcbiAgICAgICAgICBwdXNoKGNoZWNrU2l6ZSk7XG4gICAgICAgICAgcmVhbCgpO1xuICAgICAgICAgIHl5ZmxvYXQoKTtcbiAgICAgICAgICBpZiAoTWF0aC5hYnMocG9wKCkuZCkgPiBNYXRoLnBvdygyLCAzMikpIHtcbiAgICAgICAgICAgIHB1c2gocDEpO1xuICAgICAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXNoKGNoZWNrU2l6ZSk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDMpO1xuICAgICAgICAgIHB1c2goQyk7XG4gICAgICAgICAgbXVsdGlwbHkoKTsgLy8gM3JkIGNvZWZmXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm5leHQgY29lZmYgXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICBjaGVja1NpemUgPSBwb3AoKTtcbiAgICAgICAgICBwdXNoKGNoZWNrU2l6ZSk7XG4gICAgICAgICAgcmVhbCgpO1xuICAgICAgICAgIHl5ZmxvYXQoKTtcbiAgICAgICAgICBpZiAoTWF0aC5hYnMocG9wKCkuZCkgPiBNYXRoLnBvdygyLCAzMikpIHtcbiAgICAgICAgICAgIHBvcCgpO1xuICAgICAgICAgICAgcHVzaChwMSk7XG4gICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHB1c2goY2hlY2tTaXplKTtcbiAgICAgICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoLTMpO1xuICAgICAgICAgIHB1c2goQSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoKEIpO1xuICAgICAgICAgIGRpdmlkZSgpOyAvLyAybmQgY29lZmZcbiAgICAgICAgICBjaGVja1NpemUgPSBwb3AoKTtcbiAgICAgICAgICBwdXNoKGNoZWNrU2l6ZSk7XG4gICAgICAgICAgcmVhbCgpO1xuICAgICAgICAgIHl5ZmxvYXQoKTtcbiAgICAgICAgICBpZiAoTWF0aC5hYnMocG9wKCkuZCkgPiBNYXRoLnBvdygyLCAzMikpIHtcbiAgICAgICAgICAgIHBvcCgpO1xuICAgICAgICAgICAgcG9wKCk7XG4gICAgICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHVzaChjaGVja1NpemUpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJuZXh0IGNvZWZmIFwiICsgc3RhY2tbdG9zLTFdLnRvU3RyaW5nKCkpXG4gICAgICAgICAgcHVzaChzeW1ib2woU0VDUkVUWCkpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDEpOyAvLyAxc3QgY29lZmZcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwibmV4dCBjb2VmZiBcIiArIHN0YWNrW3Rvcy0xXS50b1N0cmluZygpKVxuICAgICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMyk7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGVxdWFscShleHBvbmVudCwgMSwgMikpIHtcbiAgICAgICAgICBwdXNoKEMpOyAvLyAzdGggY29lZmZcbiAgICAgICAgICBjaGVja1NpemUgPSBwb3AoKTtcbiAgICAgICAgICBwdXNoKGNoZWNrU2l6ZSk7XG4gICAgICAgICAgcmVhbCgpO1xuICAgICAgICAgIHl5ZmxvYXQoKTtcbiAgICAgICAgICBpZiAoTWF0aC5hYnMocG9wKCkuZCkgPiBNYXRoLnBvdygyLCAzMikpIHtcbiAgICAgICAgICAgIHB1c2gocDEpO1xuICAgICAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXNoKGNoZWNrU2l6ZSk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcImNvbnN0YW50IGNvZWZmIFwiICsgc3RhY2tbdG9zLTFdLnRvU3RyaW5nKCkpXG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKC0yKTtcbiAgICAgICAgICBwdXNoKEEpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgcHVzaChCKTtcbiAgICAgICAgICBkaXZpZGUoKTsgLy8gMm5kIGNvZWZmXG4gICAgICAgICAgY2hlY2tTaXplID0gcG9wKCk7XG4gICAgICAgICAgcHVzaChjaGVja1NpemUpO1xuICAgICAgICAgIHJlYWwoKTtcbiAgICAgICAgICB5eWZsb2F0KCk7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHBvcCgpLmQpID4gTWF0aC5wb3coMiwgMzIpKSB7XG4gICAgICAgICAgICBwb3AoKTtcbiAgICAgICAgICAgIHB1c2gocDEpO1xuICAgICAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwdXNoKGNoZWNrU2l6ZSk7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm5leHQgY29lZmYgXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICBwdXNoKHN5bWJvbChTRUNSRVRYKSk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoX2ludGVnZXIoMSk7IC8vIDFzdCBjb2VmZlxuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJuZXh0IGNvZWZmIFwiICsgc3RhY2tbdG9zLTFdLnRvU3RyaW5nKCkpXG4gICAgICAgICAgcHVzaChzeW1ib2woU0VDUkVUWCkpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigyKTtcbiAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgICAgYWRkKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIndob2xlIHBvbHlub21pYWw6IFwiICsgc3RhY2tbdG9zLTFdLnRvU3RyaW5nKCkpXG4gICAgICAgIHB1c2goc3ltYm9sKFNFQ1JFVFgpKTtcbiAgICAgICAgcmVjdXJzaW9uTGV2ZWxOZXN0ZWRSYWRpY2Fsc1JlbW92YWwrKztcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImludm9raW5nIHJvb3RzIGF0IHJlY3Vyc2lvbiBsZXZlbDogXCIgKyByZWN1cnNpb25MZXZlbE5lc3RlZFJhZGljYWxzUmVtb3ZhbClcbiAgICAgICAgcm9vdHMoKTtcbiAgICAgICAgcmVjdXJzaW9uTGV2ZWxOZXN0ZWRSYWRpY2Fsc1JlbW92YWwtLTtcbiAgICAgICAgaWYgKGVxdWFsKHN0YWNrW3RvcyAtIDFdLCBzeW1ib2woTklMKSkpIHtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicm9vdHMgYmFpbGVkIG91dCBiZWNhdXNlIG9mIHRvbyBtdWNoIHJlY3Vyc2lvblwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9wKCk7XG4gICAgICAgICAgcHVzaChwMSk7XG4gICAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiYWxsIHNvbHV0aW9uczogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcblxuICAgICAgICAvLyBleGNsdWRlIHRoZSBzb2x1dGlvbnMgd2l0aCByYWRpY2Fsc1xuICAgICAgICBwb3NzaWJsZVNvbHV0aW9ucyA9IFtdO1xuICAgICAgICByZWYyID0gc3RhY2tbdG9zIC0gMV0udGVuc29yLmVsZW07XG4gICAgICAgIGZvciAobjEgPSAwLCBsZW4yID0gcmVmMi5sZW5ndGg7IG4xIDwgbGVuMjsgbjErKykge1xuICAgICAgICAgIGVhY2hTb2x1dGlvbiA9IHJlZjJbbjFdO1xuICAgICAgICAgIGlmICghRmluZChlYWNoU29sdXRpb24sIHN5bWJvbChQT1dFUikpKSB7XG4gICAgICAgICAgICBwb3NzaWJsZVNvbHV0aW9ucy5wdXNoKGVhY2hTb2x1dGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBvcCgpOyAvLyBwb3BwaW5nIHRoZSB0ZW5zb3Igd2l0aCB0aGUgc29sdXRpb25zXG4gICAgICAgIFxuICAgICAgICAvL2NvbnNvbGUubG9nKFwicG9zc2libGUgc29sdXRpb25zOiBcIiArIHBvc3NpYmxlU29sdXRpb25zLnRvU3RyaW5nKCkpXG4gICAgICAgIGlmIChwb3NzaWJsZVNvbHV0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHBvc3NpYmxlUmF0aW9uYWxTb2x1dGlvbnMgPSBbXTtcbiAgICAgICAgcmVhbE9mcG9zc2libGVSYXRpb25hbFNvbHV0aW9ucyA9IFtdO1xuLy9jb25zb2xlLmxvZyhcImNoZWNraW5nIHRoZSBvbmUgd2l0aCBtYXhpbXVtIHJlYWwgcGFydCBcIilcbiAgICAgICAgZm9yIChvMSA9IDAsIGxlbjMgPSBwb3NzaWJsZVNvbHV0aW9ucy5sZW5ndGg7IG8xIDwgbGVuMzsgbzErKykge1xuICAgICAgICAgIGkgPSBwb3NzaWJsZVNvbHV0aW9uc1tvMV07XG4gICAgICAgICAgcHVzaChpKTtcbiAgICAgICAgICByZWFsKCk7XG4gICAgICAgICAgeXlmbG9hdCgpO1xuICAgICAgICAgIHBvc3NpYmxlUmF0aW9uYWxTb2x1dGlvbnMucHVzaChpKTtcbiAgICAgICAgICByZWFsT2Zwb3NzaWJsZVJhdGlvbmFsU29sdXRpb25zLnB1c2gocG9wKCkuZCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpY2hSYXRpb25hbFNvbHV0aW9uID0gcmVhbE9mcG9zc2libGVSYXRpb25hbFNvbHV0aW9ucy5pbmRleE9mKE1hdGgubWF4LmFwcGx5KE1hdGgsIHJlYWxPZnBvc3NpYmxlUmF0aW9uYWxTb2x1dGlvbnMpKTtcbiAgICAgICAgU09MVVRJT04gPSBwb3NzaWJsZVJhdGlvbmFsU29sdXRpb25zW3doaWNoUmF0aW9uYWxTb2x1dGlvbl07XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJwaWNrZWQgc29sdXRpb246IFwiICsgU09MVVRJT04pXG4gICAgICAgIC8qXG4gICAgICAgICNwb3NzaWJsZU5ld0V4cHJlc3Npb25zID0gW11cbiAgICAgICAgI3JlYWxPZlBvc3NpYmxlTmV3RXhwcmVzc2lvbnMgPSBbXVxuICAgICAgICAgKiBwaWNrIHRoZSBzb2x1dGlvbiB3aGljaCBjdWJpYyByb290IGhhcyBubyByYWRpY2Fsc1xuICAgICAgICBsb3dlcmNhc2VfYiA9IG51bGxcbiAgICAgICAgZm9yIFNPTFVUSU9OIGluIHBvc3NpYmxlU29sdXRpb25zXG4gICAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0aW5nIHNvbHV0aW9uOiBcIiArIFNPTFVUSU9OLnRvU3RyaW5nKCkpXG5cbiAgICAgICAgICBkZWJ1Z2dlclxuICAgICAgICAgIGlmIGVxdWFscShleHBvbmVudCwxLDMpXG4gICAgICAgICAgICBwdXNoKEEpXG4gICAgICAgICAgICBwdXNoKFNPTFVUSU9OKVxuICAgICAgICAgICAgcHVzaF9pbnRlZ2VyKDMpXG4gICAgICAgICAgICBwb3dlcigpXG4gICAgICAgICAgICBwdXNoX2ludGVnZXIoMylcbiAgICAgICAgICAgIHB1c2goQylcbiAgICAgICAgICAgIG11bHRpcGx5KClcbiAgICAgICAgICAgIHB1c2goU09MVVRJT04pXG4gICAgICAgICAgICBtdWx0aXBseSgpXG4gICAgICAgICAgICBhZGQoKVxuICAgICAgICAgICAgZGl2aWRlKClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYXJndW1lbnQgb2YgY3ViaWMgcm9vdDogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICAgIHB1c2hfcmF0aW9uYWwoMSwzKVxuICAgICAgICAgICAgcG93ZXIoKVxuICAgICAgICAgIGVsc2UgaWYgZXF1YWxxKGV4cG9uZW50LDEsMilcbiAgICAgICAgICAgIHB1c2goQSlcbiAgICAgICAgICAgIHB1c2goU09MVVRJT04pXG4gICAgICAgICAgICBwdXNoX2ludGVnZXIoMilcbiAgICAgICAgICAgIHBvd2VyKClcbiAgICAgICAgICAgIHB1c2goQylcbiAgICAgICAgICAgIGFkZCgpXG4gICAgICAgICAgICBkaXZpZGUoKVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJhcmd1bWVudCBvZiBjdWJpYyByb290OiBcIiArIHN0YWNrW3Rvcy0xXS50b1N0cmluZygpKVxuICAgICAgICAgICAgcHVzaF9yYXRpb25hbCgxLDIpXG4gICAgICAgICAgICBwb3dlcigpXG4gICAgICAgICAgY29uc29sZS5sb2coXCJiIGlzOiBcIiArIHN0YWNrW3Rvcy0xXS50b1N0cmluZygpKVxuXG4gICAgICAgICAgbG93ZXJjYXNlX2IgPSBwb3AoKVxuXG4gICAgICAgICAgaWYgIUZpbmQobG93ZXJjYXNlX2IsIHN5bWJvbChQT1dFUikpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGVxdWFscShleHBvbmVudCwgMSwgMykpIHtcbiAgICAgICAgICBwdXNoKEEpO1xuICAgICAgICAgIHB1c2goU09MVVRJT04pO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgICBwb3dlcigpO1xuICAgICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgICBwdXNoKEMpO1xuICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgcHVzaChTT0xVVElPTik7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiYXJndW1lbnQgb2YgY3ViaWMgcm9vdDogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDMpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXF1YWxxKGV4cG9uZW50LCAxLCAyKSkge1xuICAgICAgICAgIHB1c2goQSk7XG4gICAgICAgICAgcHVzaChTT0xVVElPTik7XG4gICAgICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgcHVzaChDKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBkaXZpZGUoKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiYXJndW1lbnQgb2YgY3ViaWMgcm9vdDogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImIgaXM6IFwiICsgc3RhY2tbdG9zLTFdLnRvU3RyaW5nKCkpXG4gICAgICAgIGxvd2VyY2FzZV9iID0gcG9wKCk7XG4gICAgICAgIGlmIChsb3dlcmNhc2VfYiA9PSBudWxsKSB7XG4gICAgICAgICAgcHVzaChwMSk7XG4gICAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKGxvd2VyY2FzZV9iKTtcbiAgICAgICAgcHVzaChTT0xVVElPTik7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIGlmIChlcXVhbHEoZXhwb25lbnQsIDEsIDMpKSB7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcImEgaXM6IFwiICsgc3RhY2tbdG9zLTFdLnRvU3RyaW5nKCkpXG4gICAgICAgICAgbG93ZXJjYXNlX2EgPSBwb3AoKTtcbiAgICAgICAgICBwdXNoKGxvd2VyY2FzZV9iKTtcbiAgICAgICAgICBwdXNoKEMpO1xuICAgICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICAgIHB1c2gobG93ZXJjYXNlX2EpO1xuICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgIHNpbXBsaWZ5KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXF1YWxxKGV4cG9uZW50LCAxLCAyKSkge1xuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJhIGNvdWxkIGJlOiBcIiArIHN0YWNrW3Rvcy0xXS50b1N0cmluZygpKVxuICAgICAgICAgIGxvd2VyY2FzZV9hID0gcG9wKCk7XG4gICAgICAgICAgcHVzaChsb3dlcmNhc2VfYik7XG4gICAgICAgICAgcHVzaChDKTtcbiAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICAgIHBvd2VyKCk7XG4gICAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgICBwdXNoKGxvd2VyY2FzZV9hKTtcbiAgICAgICAgICBhZGQoKTtcbiAgICAgICAgICBzaW1wbGlmeSgpO1xuICAgICAgICAgIHBvc3NpYmxlTmV3RXhwcmVzc2lvbiA9IHBvcCgpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ2ZXJpZnlpbmcgaWYgIFwiICsgcG9zc2libGVOZXdFeHByZXNzaW9uICsgXCIgaXMgcG9zaXRpdmVcIilcbiAgICAgICAgICBwdXNoKHBvc3NpYmxlTmV3RXhwcmVzc2lvbik7XG4gICAgICAgICAgcmVhbCgpO1xuICAgICAgICAgIHl5ZmxvYXQoKTtcbiAgICAgICAgICBwb3NzaWJsZU5ld0V4cHJlc3Npb25WYWx1ZSA9IHBvcCgpO1xuICAgICAgICAgIGlmICghaXNuZWdhdGl2ZW51bWJlcihwb3NzaWJsZU5ld0V4cHJlc3Npb25WYWx1ZSkpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCIuLi4gaXQgaXMgcG9zaXRpdmVcIilcbiAgICAgICAgICAgIHB1c2gocG9zc2libGVOZXdFeHByZXNzaW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIi4uLiBpdCBpcyBOT1QgcG9zaXRpdmVcIilcbiAgICAgICAgICAgIHB1c2gobG93ZXJjYXNlX2IpO1xuICAgICAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgICAgICBsb3dlcmNhc2VfYiA9IHBvcCgpO1xuICAgICAgICAgICAgcHVzaChsb3dlcmNhc2VfYSk7XG4gICAgICAgICAgICBuZWdhdGUoKTtcbiAgICAgICAgICAgIGxvd2VyY2FzZV9hID0gcG9wKCk7XG4gICAgICAgICAgICBwdXNoKGxvd2VyY2FzZV9iKTtcbiAgICAgICAgICAgIHB1c2goQyk7XG4gICAgICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgICAgICBwdXNoKGxvd2VyY2FzZV9hKTtcbiAgICAgICAgICAgIGFkZCgpO1xuICAgICAgICAgICAgc2ltcGxpZnkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcG9zc2libGVOZXdFeHByZXNzaW9uIGlzIG5vdyBhdCB0b3Agb2Ygc3RhY2tcblxuICAgICAgICAvL2NvbnNvbGUubG9nKFwicG90ZW50aWFsIG5ldyBleHByZXNzaW9uOiBcIiArIHN0YWNrW3Rvcy0xXS50b1N0cmluZygpKVxuICAgICAgICBwMSA9IHBvcCgpO1xuICAgICAgICAvL25ld0V4cHJlc3Npb24gPSBwb3AoKVxuICAgICAgICAvL2RlYnVnZ2VyXG4gICAgICAgIC8vcHVzaChuZXdFeHByZXNzaW9uKVxuICAgICAgICAvL3JlYWwoKVxuICAgICAgICAvL3l5ZmxvYXQoKVxuICAgICAgICAvL3Bvc3NpYmxlTmV3RXhwcmVzc2lvbnMucHVzaChuZXdFeHByZXNzaW9uKVxuICAgICAgICAvL3JlYWxPZlBvc3NpYmxlTmV3RXhwcmVzc2lvbnMucHVzaChwb3AoKS5kKVxuXG4gICAgICAgIC8vd2hpY2hFeHByZXNzaW9uID0gcmVhbE9mUG9zc2libGVOZXdFeHByZXNzaW9ucy5pbmRleE9mKE1hdGgubWF4LmFwcGx5KE1hdGgsIHJlYWxPZlBvc3NpYmxlTmV3RXhwcmVzc2lvbnMpKVxuICAgICAgICAvL3AxID0gcG9zc2libGVOZXdFeHByZXNzaW9uc1t3aGljaEV4cHJlc3Npb25dXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJmaW5hbCBuZXcgZXhwcmVzc2lvbjogXCIgKyBwMS50b1N0cmluZygpKVxuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzY29ucyhwMSkpIHtcbiAgICAgIGggPSB0b3M7XG4gICAgICBhbnlSYWRpY2FsU2ltcGxpZmljYXRpb25Xb3JrZWQgPSBmYWxzZTtcbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJyZWN1cnNpbmcgb246IFwiICsgY2FyKHAxKS50b1N0cmluZygpKVxuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgICBhbnlSYWRpY2FsU2ltcGxpZmljYXRpb25Xb3JrZWQgPSBhbnlSYWRpY2FsU2ltcGxpZmljYXRpb25Xb3JrZWQgfHwgdGFrZV9jYXJlX29mX25lc3RlZF9yYWRpY2FscygpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiLi4udHJhbnNmb3JtZWQgaW50bzogXCIgKyBzdGFja1t0b3MtMV0udG9TdHJpbmcoKSlcbiAgICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgfVxuICAgICAgbGlzdCh0b3MgLSBoKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybiBhbnlSYWRpY2FsU2ltcGxpZmljYXRpb25Xb3JrZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb250cm9sIGZsb3cgc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmVcIik7XG4gIH07XG5cbiAgLy8gU2luZSBmdW5jdGlvbiBvZiBudW1lcmljYWwgYW5kIHN5bWJvbGljIGFyZ3VtZW50c1xuICBFdmFsX3NpbiA9IGZ1bmN0aW9uKCkge1xuICAgIC8vY29uc29sZS5sb2cgXCJzaW4gLS0tLSBcIlxuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gc2luZSgpO1xuICB9O1xuXG4gIC8vY29uc29sZS5sb2cgXCJzaW4gZW5kIC0tLS0gXCJcbiAgc2luZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vY29uc29sZS5sb2cgXCJzaW5lIC0tLS0gXCJcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFERCkpIHtcbiAgICAgIC8vIHNpbiBvZiBhIHN1bSBjYW4gYmUgZnVydGhlciBkZWNvbXBvc2VkIGludG9cbiAgICAgIC8vc2luKGFscGhhK2JldGEpID0gc2luKGFscGhhKSpjb3MoYmV0YSkrc2luKGJldGEpKmNvcyhhbHBoYSlcbiAgICAgIHNpbmVfb2ZfYW5nbGVfc3VtKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpbmVfb2ZfYW5nbGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvL2NvbnNvbGUubG9nIFwic2luZSBlbmQgLS0tLSBcIlxuXG4gIC8vIFVzZSBhbmdsZSBzdW0gZm9ybXVsYSBmb3Igc3BlY2lhbCBhbmdsZXMuXG5cbiAgLy9kZWZpbmUgQSBwM1xuICAvL2RlZmluZSBCIHA0XG5cbiAgLy8gZGVjb21wb3NlIHN1bSBzaW4oYWxwaGErYmV0YSkgaW50b1xuICAvLyBzaW4oYWxwaGEpKmNvcyhiZXRhKStzaW4oYmV0YSkqY29zKGFscGhhKVxuICBzaW5lX29mX2FuZ2xlX3N1bSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vY29uc29sZS5sb2cgXCJzaW4gb2YgYW5nbGUgc3VtIC0tLS0gXCJcbiAgICBwMiA9IGNkcihwMSk7XG4gICAgd2hpbGUgKGlzY29ucyhwMikpIHtcbiAgICAgIHA0ID0gY2FyKHAyKTtcbiAgICAgIGlmIChpc25waShwNCkpIHsgLy8gcDQgaXMgQlxuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgcHVzaChwNCk7XG4gICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgIHAzID0gcG9wKCk7XG4gICAgICAgIHB1c2gocDMpO1xuICAgICAgICBzaW5lKCk7XG4gICAgICAgIHB1c2gocDQpO1xuICAgICAgICBjb3NpbmUoKTtcbiAgICAgICAgbXVsdGlwbHkoKTtcbiAgICAgICAgcHVzaChwMyk7XG4gICAgICAgIGNvc2luZSgpO1xuICAgICAgICBwdXNoKHA0KTtcbiAgICAgICAgc2luZSgpO1xuICAgICAgICBtdWx0aXBseSgpO1xuICAgICAgICBhZGQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy9jb25zb2xlLmxvZyBcInNpbiBvZiBhbmdsZSBzdW0gZW5kIC0tLS0gXCJcbiAgICAgIHAyID0gY2RyKHAyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpbmVfb2ZfYW5nbGUoKTtcbiAgfTtcblxuICAvL2NvbnNvbGUubG9nIFwic2luIG9mIGFuZ2xlIHN1bSBlbmQgLS0tLSBcIlxuICBzaW5lX29mX2FuZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQsIG47XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBUkNTSU4pKSB7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgZCA9IE1hdGguc2luKHAxLmQpO1xuICAgICAgaWYgKE1hdGguYWJzKGQpIDwgMWUtMTApIHtcbiAgICAgICAgZCA9IDAuMDtcbiAgICAgIH1cbiAgICAgIHB1c2hfZG91YmxlKGQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzaW5lIGZ1bmN0aW9uIGlzIGFudGlzeW1tZXRyaWMsIHNpbigteCkgPSAtc2luKHgpXG4gICAgaWYgKGlzbmVnYXRpdmUocDEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIG5lZ2F0ZSgpO1xuICAgICAgc2luZSgpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHNpbihhcmN0YW4oeCkpID0geCAvIHNxcnQoMSArIHheMilcblxuICAgIC8vIHNlZSBwLiAxNzMgb2YgdGhlIENSQyBIYW5kYm9vayBvZiBNYXRoZW1hdGljYWwgU2NpZW5jZXNcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFSQ1RBTikpIHtcbiAgICAgIHB1c2goY2FkcihwMSkpO1xuICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgcHVzaChjYWRyKHAxKSk7XG4gICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICBwb3dlcigpO1xuICAgICAgYWRkKCk7XG4gICAgICBwdXNoX3JhdGlvbmFsKC0xLCAyKTtcbiAgICAgIHBvd2VyKCk7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBtdWx0aXBseSBieSAxODAvcGkgdG8gZ28gZnJvbSByYWRpYW5zIHRvIGRlZ3JlZXMuXG4gICAgLy8gd2UgZ28gZnJvbSByYWRpYW5zIHRvIGRlZ3JlZXMgYmVjYXVzZSBpdCdzIG11Y2hcbiAgICAvLyBlYXNpZXIgdG8gY2FsY3VsYXRlIHN5bWJvbGljIHJlc3VsdHMgb2YgbW9zdCAobm90IGFsbCkgXCJjbGFzc2ljXCJcbiAgICAvLyBhbmdsZXMgKGUuZy4gMzAsNDUsNjAuLi4pIGlmIHdlIGNhbGN1bGF0ZSB0aGUgZGVncmVlc1xuICAgIC8vIGFuZCB0aGUgd2UgZG8gYSBzd2l0Y2ggb24gdGhhdC5cbiAgICAvLyBBbHRlcm5hdGl2ZWx5LCB3ZSBjb3VsZCBsb29rIGF0IHRoZSBmcmFjdGlvbiBvZiBwaVxuICAgIC8vIChlLmcuIDYwIGRlZ3JlZXMgaXMgMS8zIHBpKSBidXQgdGhhdCdzIG1vcmVcbiAgICAvLyBjb252b2x1dGVkIGFzIHdlJ2QgbmVlZCB0byBsb29rIGF0IGJvdGggbnVtZXJhdG9yIGFuZFxuICAgIC8vIGRlbm9taW5hdG9yLlxuICAgIHB1c2gocDEpO1xuICAgIHB1c2hfaW50ZWdlcigxODApO1xuICAgIG11bHRpcGx5KCk7XG4gICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cykge1xuICAgICAgcHVzaF9kb3VibGUoTWF0aC5QSSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2hfc3ltYm9sKFBJKTtcbiAgICB9XG4gICAgZGl2aWRlKCk7XG4gICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgLy8gbW9zdCBcImdvb2RcIiAoaS5lLiBjb21wYWN0KSB0cmlnb25vbWV0cmljIHJlc3VsdHNcbiAgICAvLyBoYXBwZW4gZm9yIGEgcm91bmQgbnVtYmVyIG9mIGRlZ3JlZXMuIFRoZXJlIGFyZSBzb21lIGV4Y2VwdGlvbnNcbiAgICAvLyB0aG91Z2gsIGUuZy4gMjIuNSBkZWdyZWVzLCB3aGljaCB3ZSBkb24ndCBjYXB0dXJlIGhlcmUuXG4gICAgaWYgKG4gPCAwIHx8IGlzTmFOKG4pKSB7XG4gICAgICBwdXNoKHN5bWJvbChTSU4pKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbGlzdCgyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gdmFsdWVzIG9mIHNvbWUgZmFtb3VzIGFuZ2xlcy4gTWFueSBtb3JlIGhlcmU6XG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHJpZ29ub21ldHJpY19jb25zdGFudHNfZXhwcmVzc2VkX2luX3JlYWxfcmFkaWNhbHNcbiAgICBzd2l0Y2ggKG4gJSAzNjApIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTgwOlxuICAgICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKDApO1xuICAgICAgY2FzZSAzMDpcbiAgICAgIGNhc2UgMTUwOlxuICAgICAgICByZXR1cm4gcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgIGNhc2UgMjEwOlxuICAgICAgY2FzZSAzMzA6XG4gICAgICAgIHJldHVybiBwdXNoX3JhdGlvbmFsKC0xLCAyKTtcbiAgICAgIGNhc2UgNDU6XG4gICAgICBjYXNlIDEzNTpcbiAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDIpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgICAgIGNhc2UgMjI1OlxuICAgICAgY2FzZSAzMTU6XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoLTEsIDIpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHJldHVybiBtdWx0aXBseSgpO1xuICAgICAgY2FzZSA2MDpcbiAgICAgIGNhc2UgMTIwOlxuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwdXNoX2ludGVnZXIoMyk7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHBvd2VyKCk7XG4gICAgICAgIHJldHVybiBtdWx0aXBseSgpO1xuICAgICAgY2FzZSAyNDA6XG4gICAgICBjYXNlIDMwMDpcbiAgICAgICAgcHVzaF9yYXRpb25hbCgtMSwgMik7XG4gICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gICAgICBjYXNlIDkwOlxuICAgICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgY2FzZSAyNzA6XG4gICAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcHVzaChzeW1ib2woU0lOKSk7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICByZXR1cm4gbGlzdCgyKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gICAgICAgICAgICBleHAoeCkgLSBleHAoLXgpXG4gIC8vICBzaW5oKHgpID0gLS0tLS0tLS0tLS0tLS0tLVxuICAvLyAgICAgICAgICAgICAgICAgICAyXG4gIEV2YWxfc2luaCA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4geXNpbmgoKTtcbiAgfTtcblxuICB5c2luaCA9IGZ1bmN0aW9uKCkge1xuICAgIHNhdmUoKTtcbiAgICB5eXNpbmgoKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHl5c2luaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkO1xuICAgIGQgPSAwLjA7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFSQ1NJTkgpKSB7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgZCA9IE1hdGguc2luaChwMS5kKTtcbiAgICAgIGlmIChNYXRoLmFicyhkKSA8IDFlLTEwKSB7XG4gICAgICAgIGQgPSAwLjA7XG4gICAgICB9XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgIHB1c2goemVybyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2hfc3ltYm9sKFNJTkgpO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiBsaXN0KDIpO1xuICB9O1xuXG4gIHN1YnN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGwxLCBtMSwgcmVmMiwgcmVmMztcbiAgICBpID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDMgPSBwb3AoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGlmIChwMiA9PT0gc3ltYm9sKE5JTCkgfHwgcDMgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzdGVuc29yKHAxKSkge1xuICAgICAgcDQgPSBhbGxvY190ZW5zb3IocDEudGVuc29yLm5lbGVtKTtcbiAgICAgIHA0LnRlbnNvci5uZGltID0gcDEudGVuc29yLm5kaW07XG4gICAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwMS50ZW5zb3IubmRpbTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgICBwNC50ZW5zb3IuZGltW2ldID0gcDEudGVuc29yLmRpbVtpXTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IG0xID0gMCwgcmVmMyA9IHAxLnRlbnNvci5uZWxlbTsgKDAgPD0gcmVmMyA/IG0xIDwgcmVmMyA6IG0xID4gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK20xIDogLS1tMSkge1xuICAgICAgICBwdXNoKHAxLnRlbnNvci5lbGVtW2ldKTtcbiAgICAgICAgcHVzaChwMik7XG4gICAgICAgIHB1c2gocDMpO1xuICAgICAgICBzdWJzdCgpO1xuICAgICAgICBwNC50ZW5zb3IuZWxlbVtpXSA9IHBvcCgpO1xuICAgICAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwNCk7XG4gICAgICB9XG4gICAgICBwdXNoKHA0KTtcbiAgICB9IGVsc2UgaWYgKGVxdWFsKHAxLCBwMikpIHtcbiAgICAgIHB1c2gocDMpO1xuICAgIH0gZWxzZSBpZiAoaXNjb25zKHAxKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBzdWJzdCgpO1xuICAgICAgcHVzaChjZHIocDEpKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgcHVzaChwMyk7XG4gICAgICBzdWJzdCgpO1xuICAgICAgY29ucygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyAnc3VtJyBmdW5jdGlvblxuXG4gIC8vZGVmaW5lIEEgcDNcbiAgLy9kZWZpbmUgQiBwNFxuICAvL2RlZmluZSBJIHA1XG4gIC8vZGVmaW5lIFggcDZcblxuICAvLyBsZWF2ZXMgdGhlIHN1bSBhdCB0aGUgdG9wIG9mIHRoZSBzdGFja1xuICBFdmFsX3N1bSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib2R5LCBpLCBpbmRleFZhcmlhYmxlLCBqLCBrLCBsMSwgcmVmMiwgcmVmMztcbiAgICBpID0gMDtcbiAgICBqID0gMDtcbiAgICBrID0gMDtcbiAgICAvLyAxc3QgYXJnXG4gICAgYm9keSA9IGNhZHIocDEpO1xuICAgIC8vIDJuZCBhcmcgKGluZGV4KVxuICAgIGluZGV4VmFyaWFibGUgPSBjYWRkcihwMSk7XG4gICAgaWYgKCFpc3N5bWJvbChpbmRleFZhcmlhYmxlKSkge1xuICAgICAgc3RvcChcInN1bTogMm5kIGFyZz9cIik7XG4gICAgfVxuICAgIC8vIDNyZCBhcmcgKGxvd2VyIGxpbWl0KVxuICAgIHB1c2goY2FkZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIGogPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChpc05hTihqKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIDR0aCBhcmcgKHVwcGVyIGxpbWl0KVxuICAgIHB1c2goY2FkZGRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBrID0gcG9wX2ludGVnZXIoKTtcbiAgICBpZiAoaXNOYU4oaykpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyByZW1lbWJlciBjb250ZW50cyBvZiB0aGUgaW5kZXhcbiAgICAvLyB2YXJpYWJsZSBzbyB3ZSBjYW4gcHV0IGl0IGJhY2sgYWZ0ZXIgdGhlIGxvb3BcbiAgICBwNCA9IGdldF9iaW5kaW5nKGluZGV4VmFyaWFibGUpO1xuICAgIHB1c2hfaW50ZWdlcigwKTtcbiAgICBmb3IgKGkgPSBsMSA9IHJlZjIgPSBqLCByZWYzID0gazsgKHJlZjIgPD0gcmVmMyA/IGwxIDw9IHJlZjMgOiBsMSA+PSByZWYzKTsgaSA9IHJlZjIgPD0gcmVmMyA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwdXNoX2ludGVnZXIoaSk7XG4gICAgICBwNSA9IHBvcCgpO1xuICAgICAgc2V0X2JpbmRpbmcoaW5kZXhWYXJpYWJsZSwgcDUpO1xuICAgICAgcHVzaChib2R5KTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIGFkZCgpO1xuICAgIH1cbiAgICAvLyBwdXQgYmFjayB0aGUgaW5kZXggdmFyaWFibGUgdG8gb3JpZ2luYWwgY29udGVudFxuICAgIHJldHVybiBzZXRfYmluZGluZyhpbmRleFZhcmlhYmxlLCBwNCk7XG4gIH07XG5cbiAgLy8gVGFuZ2VudCBmdW5jdGlvbiBvZiBudW1lcmljYWwgYW5kIHN5bWJvbGljIGFyZ3VtZW50c1xuICBFdmFsX3RhbiA9IGZ1bmN0aW9uKCkge1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICByZXR1cm4gdGFuZ2VudCgpO1xuICB9O1xuXG4gIHRhbmdlbnQgPSBmdW5jdGlvbigpIHtcbiAgICBzYXZlKCk7XG4gICAgeXl0YW5nZW50KCk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICB5eXRhbmdlbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZCwgbjtcbiAgICBuID0gMDtcbiAgICBkID0gMC4wO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGNhcihwMSkgPT09IHN5bWJvbChBUkNUQU4pKSB7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgZCA9IE1hdGgudGFuKHAxLmQpO1xuICAgICAgaWYgKE1hdGguYWJzKGQpIDwgMWUtMTApIHtcbiAgICAgICAgZCA9IDAuMDtcbiAgICAgIH1cbiAgICAgIHB1c2hfZG91YmxlKGQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB0YW4gZnVuY3Rpb24gaXMgYW50aXN5bW1ldHJpYywgdGFuKC14KSA9IC10YW4oeClcbiAgICBpZiAoaXNuZWdhdGl2ZShwMSkpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgbmVnYXRlKCk7XG4gICAgICB0YW5nZW50KCk7XG4gICAgICBuZWdhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbXVsdGlwbHkgYnkgMTgwL3BpIHRvIGdvIGZyb20gcmFkaWFucyB0byBkZWdyZWVzLlxuICAgIC8vIHdlIGdvIGZyb20gcmFkaWFucyB0byBkZWdyZWVzIGJlY2F1c2UgaXQncyBtdWNoXG4gICAgLy8gZWFzaWVyIHRvIGNhbGN1bGF0ZSBzeW1ib2xpYyByZXN1bHRzIG9mIG1vc3QgKG5vdCBhbGwpIFwiY2xhc3NpY1wiXG4gICAgLy8gYW5nbGVzIChlLmcuIDMwLDQ1LDYwLi4uKSBpZiB3ZSBjYWxjdWxhdGUgdGhlIGRlZ3JlZXNcbiAgICAvLyBhbmQgdGhlIHdlIGRvIGEgc3dpdGNoIG9uIHRoYXQuXG4gICAgLy8gQWx0ZXJuYXRpdmVseSwgd2UgY291bGQgbG9vayBhdCB0aGUgZnJhY3Rpb24gb2YgcGlcbiAgICAvLyAoZS5nLiA2MCBkZWdyZWVzIGlzIDEvMyBwaSkgYnV0IHRoYXQncyBtb3JlXG4gICAgLy8gY29udm9sdXRlZCBhcyB3ZSdkIG5lZWQgdG8gbG9vayBhdCBib3RoIG51bWVyYXRvciBhbmRcbiAgICAvLyBkZW5vbWluYXRvci5cbiAgICBwdXNoKHAxKTtcbiAgICBwdXNoX2ludGVnZXIoMTgwKTtcbiAgICBtdWx0aXBseSgpO1xuICAgIGlmIChldmFsdWF0aW5nQXNGbG9hdHMpIHtcbiAgICAgIHB1c2hfZG91YmxlKE1hdGguUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoX3N5bWJvbChQSSk7XG4gICAgfVxuICAgIGRpdmlkZSgpO1xuICAgIG4gPSBwb3BfaW50ZWdlcigpO1xuICAgIC8vIG1vc3QgXCJnb29kXCIgKGkuZS4gY29tcGFjdCkgdHJpZ29ub21ldHJpYyByZXN1bHRzXG4gICAgLy8gaGFwcGVuIGZvciBhIHJvdW5kIG51bWJlciBvZiBkZWdyZWVzLiBUaGVyZSBhcmUgc29tZSBleGNlcHRpb25zXG4gICAgLy8gdGhvdWdoLCBlLmcuIDIyLjUgZGVncmVlcywgd2hpY2ggd2UgZG9uJ3QgY2FwdHVyZSBoZXJlLlxuICAgIGlmIChuIDwgMCB8fCBpc05hTihuKSkge1xuICAgICAgcHVzaChzeW1ib2woVEFOKSk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGxpc3QoMik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAobiAlIDM2MCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxODA6XG4gICAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMCk7XG4gICAgICBjYXNlIDMwOlxuICAgICAgY2FzZSAyMTA6XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMyk7XG4gICAgICAgIHB1c2hfaW50ZWdlcigzKTtcbiAgICAgICAgcHVzaF9yYXRpb25hbCgxLCAyKTtcbiAgICAgICAgcG93ZXIoKTtcbiAgICAgICAgcmV0dXJuIG11bHRpcGx5KCk7XG4gICAgICBjYXNlIDE1MDpcbiAgICAgIGNhc2UgMzMwOlxuICAgICAgICBwdXNoX3JhdGlvbmFsKC0xLCAzKTtcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDMpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICByZXR1cm4gbXVsdGlwbHkoKTtcbiAgICAgIGNhc2UgNDU6XG4gICAgICBjYXNlIDIyNTpcbiAgICAgICAgcmV0dXJuIHB1c2hfaW50ZWdlcigxKTtcbiAgICAgIGNhc2UgMTM1OlxuICAgICAgY2FzZSAzMTU6XG4gICAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoLTEpO1xuICAgICAgY2FzZSA2MDpcbiAgICAgIGNhc2UgMjQwOlxuICAgICAgICBwdXNoX2ludGVnZXIoMyk7XG4gICAgICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgICAgIHJldHVybiBwb3dlcigpO1xuICAgICAgY2FzZSAxMjA6XG4gICAgICBjYXNlIDMwMDpcbiAgICAgICAgcHVzaF9pbnRlZ2VyKDMpO1xuICAgICAgICBwdXNoX3JhdGlvbmFsKDEsIDIpO1xuICAgICAgICBwb3dlcigpO1xuICAgICAgICByZXR1cm4gbmVnYXRlKCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwdXNoKHN5bWJvbChUQU4pKTtcbiAgICAgICAgcHVzaChwMSk7XG4gICAgICAgIHJldHVybiBsaXN0KDIpO1xuICAgIH1cbiAgfTtcblxuICAvLyAgICAgICAgICAgICBleHAoMiB4KSAtIDFcbiAgLy8gIHRhbmgoeCkgPSAtLS0tLS0tLS0tLS0tLVxuICAvLyAgICAgICAgICAgICBleHAoMiB4KSArIDFcbiAgRXZhbF90YW5oID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGQ7XG4gICAgZCA9IDAuMDtcbiAgICBwdXNoKGNhZHIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoY2FyKHAxKSA9PT0gc3ltYm9sKEFSQ1RBTkgpKSB7XG4gICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzZG91YmxlKHAxKSkge1xuICAgICAgZCA9IE1hdGgudGFuaChwMS5kKTtcbiAgICAgIGlmIChNYXRoLmFicyhkKSA8IDFlLTEwKSB7XG4gICAgICAgIGQgPSAwLjA7XG4gICAgICB9XG4gICAgICBwdXNoX2RvdWJsZShkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgIHB1c2goemVybyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2hfc3ltYm9sKFRBTkgpO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiBsaXN0KDIpO1xuICB9O1xuXG4gIEV2YWxfdGF5bG9yID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gMXN0IGFyZ1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICAvLyAybmQgYXJnXG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHB1c2goY2FyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgaWYgKHAyID09PSBzeW1ib2woTklMKSkge1xuICAgICAgZ3Vlc3MoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMik7XG4gICAgfVxuICAgIC8vIDNyZCBhcmdcbiAgICBwMSA9IGNkcihwMSk7XG4gICAgcHVzaChjYXIocDEpKTtcbiAgICBFdmFsKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBpZiAocDIgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICBwdXNoX2ludGVnZXIoMjQpOyAvLyBkZWZhdWx0IG51bWJlciBvZiB0ZXJtc1xuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKHAyKTtcbiAgICB9XG4gICAgLy8gNHRoIGFyZ1xuICAgIHAxID0gY2RyKHAxKTtcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwMiA9IHBvcCgpO1xuICAgIGlmIChwMiA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIHB1c2hfaW50ZWdlcigwKTsgLy8gZGVmYXVsdCBleHBhbnNpb24gcG9pbnRcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwMik7XG4gICAgfVxuICAgIHJldHVybiB0YXlsb3IoKTtcbiAgfTtcblxuICAvL2RlZmluZSBGIHAxXG4gIC8vZGVmaW5lIFggcDJcbiAgLy9kZWZpbmUgTiBwM1xuICAvL2RlZmluZSBBIHA0XG4gIC8vZGVmaW5lIEMgcDVcbiAgdGF5bG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGssIGwxLCByZWYyO1xuICAgIGkgPSAwO1xuICAgIGsgPSAwO1xuICAgIHNhdmUoKTtcbiAgICBwNCA9IHBvcCgpO1xuICAgIHAzID0gcG9wKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIHB1c2gocDMpO1xuICAgIGsgPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChpc05hTihrKSkge1xuICAgICAgcHVzaF9zeW1ib2woVEFZTE9SKTtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChwMik7XG4gICAgICBwdXNoKHAzKTtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgbGlzdCg1KTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgcHVzaChwMik7XG4gICAgcHVzaChwNCk7XG4gICAgc3Vic3QoKTtcbiAgICBFdmFsKCk7XG4gICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgIHA1ID0gcG9wKCk7XG4gICAgZm9yIChpID0gbDEgPSAxLCByZWYyID0gazsgKDEgPD0gcmVmMiA/IGwxIDw9IHJlZjIgOiBsMSA+PSByZWYyKTsgaSA9IDEgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgZGVyaXZhdGl2ZSgpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDEpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcHVzaChwNSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgc3VidHJhY3QoKTtcbiAgICAgIG11bHRpcGx5KCk7XG4gICAgICBwNSA9IHBvcCgpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIHB1c2gocDQpO1xuICAgICAgc3Vic3QoKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHB1c2gocDUpO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIHB1c2hfaW50ZWdlcihpKTtcbiAgICAgIGZhY3RvcmlhbCgpO1xuICAgICAgZGl2aWRlKCk7XG4gICAgICBhZGQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyhkb2NzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0b3AtbGV2ZWwgY29tbWVudHMsIGtlZXAgYW4gZXllIG9uIHRoZSBmb3JtYXR0aW5nISlcbiAgLyogdGVuc29yID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIEdlbmVyYWwgZGVzY3JpcHRpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBUZW5zb3JzIGFyZSBhIHN0cmFuZ2UgaW4tYmV0d2VlbiBvZiBtYXRyaWNlcyBhbmQgXCJjb21wdXRlclwiXG4gIHJlY3Rhbmd1bGFyIGRhdGEgc3RydWN0dXJlcy5cblxuICBUZW5zb3JzLCB1bmxpa2UgbWF0cmljZXMsIGFuZCBsaWtlIHJlY3Rhbmd1bGFyIGRhdGEgc3RydWN0dXJlcyxcbiAgY2FuIGhhdmUgYW4gYXJiaXRyYXJ5IG51bWJlciBvZiBkaW1lbnNpb25zIChyYW5rKSwgYWx0aG91Z2ggYSB0ZW5zb3Igd2l0aFxuICByYW5rIHplcm8gaXMganVzdCBhIHNjYWxhci5cblxuICBUZW5zb3JzLCBsaWtlIG1hdHJpY2VzIGFuZCB1bmxpa2UgbWFueSBjb21wdXRlciByZWN0YW5ndWxhciBkYXRhIHN0cnVjdHVyZXMsXG4gIG11c3QgYmUgXCJjb250aWd1b3VzXCIgaS5lLiBoYXZlIG5vIGVtcHR5IHNwYWNlcyB3aXRoaW4gaXRzIHNpemUsIGFuZCBcInVuaWZvcm1cIixcbiAgaS5lLiBlYWNoIGVsZW1lbnQgbXVzdCBoYXZlIHRoZSBzYW1lIHNoYXBlIGFuZCBoZW5jZSB0aGUgc2FtZSByYW5rLlxuXG4gIEFsc28gdGVuc29ycyBoYXZlIG5lY2Vzc2FyaWx5IHRvIG1ha2UgYSBkaXN0aW5jdGlvbiBiZXR3ZWVuIHJvdyB2ZWN0b3JzLFxuICBjb2x1bW4gdmVjdG9ycyAod2hpY2ggaGF2ZSBhIHJhbmsgb2YgMikgYW5kIHVuaS1kaW1lbnNpb25hbCB2ZWN0b3JzIChyYW5rIDEpLlxuICBUaGV5IGxvb2sgdmVyeSBzaW1pbGFyIGJ1dCB0aGV5IGFyZSBmdW5kYW1lbnRhbGx5IGRpZmZlcmVudC5cblxuICBUZW5zb3JzIGFyZSAxLWluZGV4ZWQsIGFzIHBlciBnZW5lcmFsIG1hdGggbm90YXRpb24sIGFuZCBsaWtlIEZvcnRyYW4sXG4gIEx1YSwgTWF0aGVtYXRpY2EsIFNBU0wsIE1BVExBQiwgSnVsaWEsIEVybGFuZyBhbmQgQVBMLlxuXG4gIFRlbnNvcnMgd2l0aCBlbGVtZW50cyB0aGF0IGFyZSBhbHNvIHRlbnNvcnMgZ2V0IHByb21vdGVkIHRvIGEgaGlnaGVyIHJhbmtcbiAgLCB0aGlzIGlzIHNvIHdlIGNhbiByZXByZXNlbnQgYW5kIGdldCB0aGUgcmFuayBvZiBhIG1hdHJpeCBjb3JyZWN0bHkuXG4gIEV4YW1wbGU6XG4gIFN0YXJ0IHdpdGggYSB0ZW5zb3Igb2YgcmFuayAxIHdpdGggMiBlbGVtZW50cyAoaS5lLiBzaGFwZTogMilcbiAgaWYgeW91IHB1dCBpbiBib3RoIGl0cyBlbGVtZW50cyBhbm90aGVyIDIgdGVuc29yc1xuICBvZiByYW5rIDEgd2l0aCAyIGVsZW1lbnRzIChpLmUuIHNoYXBlOiAyKVxuICB0aGVuIHRoZSByZXN1bHQgaXMgYSB0ZW5zb3Igb2YgcmFuayAyIHdpdGggc2hhcGUgMiwyXG4gIGkuZS4gdGhlIGRpbWVuc2lvbiBvZiBhIHRlbnNvciBhdCBhbGwgdGltZXMgbXVzdCBiZVxuICB0aGUgbnVtYmVyIG9mIG5lc3RlZCB0ZW5zb3JzIGluIGl0LlxuICBBbHNvLCBhbGwgdGVuc29ycyBtdXN0IGJlIFwidW5pZm9ybVwiIGkuZS4gdGhleSBtdXN0IGJlIGFjY2Vzc2VkXG4gIHVuaWZvcm1seSwgd2hpY2ggbWVhbnMgdGhhdCBhbGwgZXhpc3RpbmcgZWxlbWVudHMgb2YgYSB0ZW5zb3JcbiAgbXVzdCBiZSBjb250aWd1b3VzIGFuZCBoYXZlIHRoZSBzYW1lIHNoYXBlLlxuICBJbXBsaWNhdGlvbiBvZiBpdCBhbGwgaXMgdGhhdCB5b3UgY2FuJ3QgcHV0IGFyYml0cmFyeVxuICB0ZW5zb3JzIGluc2lkZSB0ZW5zb3JzIChsaWtlIHlvdSB3b3VsZCBkbyB0byByZXByZXNlbnQgYmxvY2sgbWF0cmljZXMpXG4gIFJhdGhlciwgYWxsIHRlbnNvcnMgaW5zaWRlIHRlbnNvcnMgbXVzdCBoYXZlIHNhbWUgc2hhcGUgKGFuZCBoZW5jZSwgcmFuaylcblxuICBMaW1pdGF0aW9uc1xuICAtLS0tLS0tLS0tLVxuICBuLmEuXG5cbiAgSW1wbGVtZW50YXRpb24gaW5mb1xuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFRlbnNvcnMgYXJlIGltcGxlbWVudGVkLi4uXG5cbiAgKi9cbiAgLy8gQ2FsbGVkIGZyb20gdGhlIFwiZXZhbFwiIG1vZHVsZSB0byBldmFsdWF0ZSB0ZW5zb3IgZWxlbWVudHMuXG4gIC8vIHAxIHBvaW50cyB0byB0aGUgdGVuc29yIG9wZXJhbmQuXG4gIEV2YWxfdGVuc29yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEsIGIsIGksIGwxLCBtMSwgbmRpbSwgbmVsZW0sIHJlZjIsIHJlZjM7XG4gICAgaSA9IDA7XG4gICAgbmRpbSA9IDA7XG4gICAgbmVsZW0gPSAwO1xuICAgIC8vVSAqKmEsICoqYlxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8vICBjcmVhdGUgYSBuZXcgdGVuc29yIGZvciB0aGUgcmVzdWx0XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGNoZWNrX3RlbnNvcl9kaW1lbnNpb25zKHAxKTtcbiAgICBuZWxlbSA9IHAxLnRlbnNvci5uZWxlbTtcbiAgICBuZGltID0gcDEudGVuc29yLm5kaW07XG4gICAgcDIgPSBhbGxvY190ZW5zb3IobmVsZW0pO1xuICAgIHAyLnRlbnNvci5uZGltID0gbmRpbTtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBuZGltOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwMi50ZW5zb3IuZGltW2ldID0gcDEudGVuc29yLmRpbVtpXTtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8vICBiID0gRXZhbChhKVxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhID0gcDEudGVuc29yLmVsZW07XG4gICAgYiA9IHAyLnRlbnNvci5lbGVtO1xuICAgIGNoZWNrX3RlbnNvcl9kaW1lbnNpb25zKHAyKTtcbiAgICBmb3IgKGkgPSBtMSA9IDAsIHJlZjMgPSBuZWxlbTsgKDAgPD0gcmVmMyA/IG0xIDwgcmVmMyA6IG0xID4gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK20xIDogLS1tMSkge1xuICAgICAgLy9jb25zb2xlLmxvZyBcInB1c2gvcG9wOiBwdXNoaW5nIGVsZW1lbnQgYSBvZiBcIiArIGlcbiAgICAgIHB1c2goYVtpXSk7XG4gICAgICBFdmFsKCk7XG4gICAgICAvL2NvbnNvbGUubG9nIFwicHVzaC9wb3A6IHBvcHBpbmcgaW50byBlbGVtZW50IGIgb2YgXCIgKyBpXG4gICAgICBiW2ldID0gcG9wKCk7XG4gICAgfVxuICAgIGNoZWNrX3RlbnNvcl9kaW1lbnNpb25zKHAxKTtcbiAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMik7XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8vICBwdXNoIHRoZSByZXN1bHRcblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgcHVzaChwMik7XG4gICAgcmV0dXJuIHByb21vdGVfdGVuc29yKCk7XG4gIH07XG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vICBBZGQgdGVuc29yc1xuXG4gIC8vICBJbnB1dDogICAgT3BlcmFuZHMgb24gc3RhY2tcblxuICAvLyAgT3V0cHV0OiAgICBSZXN1bHQgb24gc3RhY2tcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHRlbnNvcl9wbHVzX3RlbnNvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBiLCBjLCBpLCBsMSwgbTEsIG4xLCBuZGltLCBuZWxlbSwgcmVmMiwgcmVmMywgcmVmNDtcbiAgICBpID0gMDtcbiAgICBuZGltID0gMDtcbiAgICBuZWxlbSA9IDA7XG4gICAgLy9VICoqYSwgKipiLCAqKmNcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIC8vIGFyZSB0aGUgZGltZW5zaW9uIGxpc3RzIGVxdWFsP1xuICAgIG5kaW0gPSBwMS50ZW5zb3IubmRpbTtcbiAgICBpZiAobmRpbSAhPT0gcDIudGVuc29yLm5kaW0pIHtcbiAgICAgIHB1c2goc3ltYm9sKE5JTCkpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBuZGltOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBpZiAocDEudGVuc29yLmRpbVtpXSAhPT0gcDIudGVuc29yLmRpbVtpXSkge1xuICAgICAgICBwdXNoKHN5bWJvbChOSUwpKTtcbiAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGNyZWF0ZSBhIG5ldyB0ZW5zb3IgZm9yIHRoZSByZXN1bHRcbiAgICBuZWxlbSA9IHAxLnRlbnNvci5uZWxlbTtcbiAgICBwMyA9IGFsbG9jX3RlbnNvcihuZWxlbSk7XG4gICAgcDMudGVuc29yLm5kaW0gPSBuZGltO1xuICAgIGZvciAoaSA9IG0xID0gMCwgcmVmMyA9IG5kaW07ICgwIDw9IHJlZjMgPyBtMSA8IHJlZjMgOiBtMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKyttMSA6IC0tbTEpIHtcbiAgICAgIHAzLnRlbnNvci5kaW1baV0gPSBwMS50ZW5zb3IuZGltW2ldO1xuICAgIH1cbiAgICAvLyBjID0gYSArIGJcbiAgICBhID0gcDEudGVuc29yLmVsZW07XG4gICAgYiA9IHAyLnRlbnNvci5lbGVtO1xuICAgIGMgPSBwMy50ZW5zb3IuZWxlbTtcbiAgICBmb3IgKGkgPSBuMSA9IDAsIHJlZjQgPSBuZWxlbTsgKDAgPD0gcmVmNCA/IG4xIDwgcmVmNCA6IG4xID4gcmVmNCk7IGkgPSAwIDw9IHJlZjQgPyArK24xIDogLS1uMSkge1xuICAgICAgcHVzaChhW2ldKTtcbiAgICAgIHB1c2goYltpXSk7XG4gICAgICBhZGQoKTtcbiAgICAgIGNbaV0gPSBwb3AoKTtcbiAgICB9XG4gICAgLy8gcHVzaCB0aGUgcmVzdWx0XG4gICAgcHVzaChwMyk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIGNhcmVmdWwgbm90IHRvIHJlb3JkZXIgZmFjdG9yc1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdGVuc29yX3RpbWVzX3NjYWxhciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBiLCBpLCBsMSwgbTEsIG5kaW0sIG5lbGVtLCByZWYyLCByZWYzO1xuICAgIGkgPSAwO1xuICAgIG5kaW0gPSAwO1xuICAgIG5lbGVtID0gMDtcbiAgICAvL1UgKiphLCAqKmJcbiAgICBzYXZlKCk7XG4gICAgcDIgPSBwb3AoKTtcbiAgICBwMSA9IHBvcCgpO1xuICAgIG5kaW0gPSBwMS50ZW5zb3IubmRpbTtcbiAgICBuZWxlbSA9IHAxLnRlbnNvci5uZWxlbTtcbiAgICBwMyA9IGFsbG9jX3RlbnNvcihuZWxlbSk7XG4gICAgcDMudGVuc29yLm5kaW0gPSBuZGltO1xuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMiA9IG5kaW07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAzLnRlbnNvci5kaW1baV0gPSBwMS50ZW5zb3IuZGltW2ldO1xuICAgIH1cbiAgICBhID0gcDEudGVuc29yLmVsZW07XG4gICAgYiA9IHAzLnRlbnNvci5lbGVtO1xuICAgIGZvciAoaSA9IG0xID0gMCwgcmVmMyA9IG5lbGVtOyAoMCA8PSByZWYzID8gbTEgPCByZWYzIDogbTEgPiByZWYzKTsgaSA9IDAgPD0gcmVmMyA/ICsrbTEgOiAtLW0xKSB7XG4gICAgICBwdXNoKGFbaV0pO1xuICAgICAgcHVzaChwMik7XG4gICAgICBtdWx0aXBseSgpO1xuICAgICAgYltpXSA9IHBvcCgpO1xuICAgIH1cbiAgICBwdXNoKHAzKTtcbiAgICByZXR1cm4gcmVzdG9yZSgpO1xuICB9O1xuXG4gIHNjYWxhcl90aW1lc190ZW5zb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYiwgaSwgbDEsIG0xLCBuZGltLCBuZWxlbSwgcmVmMiwgcmVmMztcbiAgICBpID0gMDtcbiAgICBuZGltID0gMDtcbiAgICBuZWxlbSA9IDA7XG4gICAgLy9VICoqYSwgKipiXG4gICAgc2F2ZSgpO1xuICAgIHAyID0gcG9wKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBuZGltID0gcDIudGVuc29yLm5kaW07XG4gICAgbmVsZW0gPSBwMi50ZW5zb3IubmVsZW07XG4gICAgcDMgPSBhbGxvY190ZW5zb3IobmVsZW0pO1xuICAgIHAzLnRlbnNvci5uZGltID0gbmRpbTtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBuZGltOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwMy50ZW5zb3IuZGltW2ldID0gcDIudGVuc29yLmRpbVtpXTtcbiAgICB9XG4gICAgYSA9IHAyLnRlbnNvci5lbGVtO1xuICAgIGIgPSBwMy50ZW5zb3IuZWxlbTtcbiAgICBmb3IgKGkgPSBtMSA9IDAsIHJlZjMgPSBuZWxlbTsgKDAgPD0gcmVmMyA/IG0xIDwgcmVmMyA6IG0xID4gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK20xIDogLS1tMSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKGFbaV0pO1xuICAgICAgbXVsdGlwbHkoKTtcbiAgICAgIGJbaV0gPSBwb3AoKTtcbiAgICB9XG4gICAgcHVzaChwMyk7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyA9IGZ1bmN0aW9uKHApIHtcbiAgICBpZiAocC50ZW5zb3IubmVsZW0gIT09IHAudGVuc29yLmVsZW0ubGVuZ3RoKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInNvbWV0aGluZyB3cm9uZyBpbiB0ZW5zb3IgZGltZW5zaW9uc1wiKTtcbiAgICAgIGRlYnVnZ2VyO1xuICAgIH1cbiAgfTtcblxuICBpc19zcXVhcmVfbWF0cml4ID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChpc3RlbnNvcihwKSAmJiBwLnRlbnNvci5uZGltID09PSAyICYmIHAudGVuc29yLmRpbVswXSA9PT0gcC50ZW5zb3IuZGltWzFdKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgZ3JhZGllbnQgb2YgdGVuc29yXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBkX3RlbnNvcl90ZW5zb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYiwgYywgaSwgaiwgbDEsIG0xLCBuMSwgbmRpbSwgbmVsZW0sIHJlZjIsIHJlZjMsIHJlZjQ7XG4gICAgaSA9IDA7XG4gICAgaiA9IDA7XG4gICAgbmRpbSA9IDA7XG4gICAgbmVsZW0gPSAwO1xuICAgIC8vVSAqKmEsICoqYiwgKipjXG4gICAgbmRpbSA9IHAxLnRlbnNvci5uZGltO1xuICAgIG5lbGVtID0gcDEudGVuc29yLm5lbGVtO1xuICAgIGlmIChuZGltICsgMSA+PSBNQVhESU0pIHtcbiAgICAgIHB1c2hfc3ltYm9sKERFUklWQVRJVkUpO1xuICAgICAgcHVzaChwMSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGxpc3QoMyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHAzID0gYWxsb2NfdGVuc29yKG5lbGVtICogcDIudGVuc29yLm5lbGVtKTtcbiAgICBwMy50ZW5zb3IubmRpbSA9IG5kaW0gKyAxO1xuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMiA9IG5kaW07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAzLnRlbnNvci5kaW1baV0gPSBwMS50ZW5zb3IuZGltW2ldO1xuICAgIH1cbiAgICBwMy50ZW5zb3IuZGltW25kaW1dID0gcDIudGVuc29yLmRpbVswXTtcbiAgICBhID0gcDEudGVuc29yLmVsZW07XG4gICAgYiA9IHAyLnRlbnNvci5lbGVtO1xuICAgIGMgPSBwMy50ZW5zb3IuZWxlbTtcbiAgICBmb3IgKGkgPSBtMSA9IDAsIHJlZjMgPSBuZWxlbTsgKDAgPD0gcmVmMyA/IG0xIDwgcmVmMyA6IG0xID4gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK20xIDogLS1tMSkge1xuICAgICAgZm9yIChqID0gbjEgPSAwLCByZWY0ID0gcDIudGVuc29yLm5lbGVtOyAoMCA8PSByZWY0ID8gbjEgPCByZWY0IDogbjEgPiByZWY0KTsgaiA9IDAgPD0gcmVmNCA/ICsrbjEgOiAtLW4xKSB7XG4gICAgICAgIHB1c2goYVtpXSk7XG4gICAgICAgIHB1c2goYltqXSk7XG4gICAgICAgIGRlcml2YXRpdmUoKTtcbiAgICAgICAgY1tpICogcDIudGVuc29yLm5lbGVtICsgal0gPSBwb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDMpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgZ3JhZGllbnQgb2Ygc2NhbGFyXG5cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBkX3NjYWxhcl90ZW5zb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYiwgaSwgbDEsIHJlZjI7XG4gICAgLy9VICoqYSwgKipiXG4gICAgcDMgPSBhbGxvY190ZW5zb3IocDIudGVuc29yLm5lbGVtKTtcbiAgICBwMy50ZW5zb3IubmRpbSA9IDE7XG4gICAgcDMudGVuc29yLmRpbVswXSA9IHAyLnRlbnNvci5kaW1bMF07XG4gICAgYSA9IHAyLnRlbnNvci5lbGVtO1xuICAgIGIgPSBwMy50ZW5zb3IuZWxlbTtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwMi50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgcHVzaChhW2ldKTtcbiAgICAgIGRlcml2YXRpdmUoKTtcbiAgICAgIGJbaV0gPSBwb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDMpO1xuICB9O1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAgRGVyaXZhdGl2ZSBvZiB0ZW5zb3JcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGRfdGVuc29yX3NjYWxhciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhLCBiLCBpLCBsMSwgbTEsIHJlZjIsIHJlZjM7XG4gICAgaSA9IDA7XG4gICAgLy9VICoqYSwgKipiXG4gICAgcDMgPSBhbGxvY190ZW5zb3IocDEudGVuc29yLm5lbGVtKTtcbiAgICBwMy50ZW5zb3IubmRpbSA9IHAxLnRlbnNvci5uZGltO1xuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMiA9IHAxLnRlbnNvci5uZGltOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBwMy50ZW5zb3IuZGltW2ldID0gcDEudGVuc29yLmRpbVtpXTtcbiAgICB9XG4gICAgYSA9IHAxLnRlbnNvci5lbGVtO1xuICAgIGIgPSBwMy50ZW5zb3IuZWxlbTtcbiAgICBmb3IgKGkgPSBtMSA9IDAsIHJlZjMgPSBwMS50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjMgPyBtMSA8IHJlZjMgOiBtMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKyttMSA6IC0tbTEpIHtcbiAgICAgIHB1c2goYVtpXSk7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIGRlcml2YXRpdmUoKTtcbiAgICAgIGJbaV0gPSBwb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1c2gocDMpO1xuICB9O1xuXG4gIGNvbXBhcmVfdGVuc29ycyA9IGZ1bmN0aW9uKHAxLCBwMikge1xuICAgIHZhciBpLCBsMSwgbTEsIHJlZjIsIHJlZjM7XG4gICAgaSA9IDA7XG4gICAgaWYgKHAxLnRlbnNvci5uZGltIDwgcDIudGVuc29yLm5kaW0pIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKHAxLnRlbnNvci5uZGltID4gcDIudGVuc29yLm5kaW0pIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwMS50ZW5zb3IubmRpbTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgaWYgKHAxLnRlbnNvci5kaW1baV0gPCBwMi50ZW5zb3IuZGltW2ldKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChwMS50ZW5zb3IuZGltW2ldID4gcDIudGVuc29yLmRpbVtpXSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gbTEgPSAwLCByZWYzID0gcDEudGVuc29yLm5lbGVtOyAoMCA8PSByZWYzID8gbTEgPCByZWYzIDogbTEgPiByZWYzKTsgaSA9IDAgPD0gcmVmMyA/ICsrbTEgOiAtLW0xKSB7XG4gICAgICBpZiAoZXF1YWwocDEudGVuc29yLmVsZW1baV0sIHAyLnRlbnNvci5lbGVtW2ldKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChsZXNzcChwMS50ZW5zb3IuZWxlbVtpXSwgcDIudGVuc29yLmVsZW1baV0pKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gIFJhaXNlIGEgdGVuc29yIHRvIGEgcG93ZXJcblxuICAvLyAgSW5wdXQ6ICAgIHAxICB0ZW5zb3JcblxuICAvLyAgICAgIHAyICBleHBvbmVudFxuXG4gIC8vICBPdXRwdXQ6ICAgIFJlc3VsdCBvbiBzdGFja1xuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcG93ZXJfdGVuc29yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGssIGwxLCBtMSwgbiwgcmVmMiwgcmVmMywgcmVzdWx0cztcbiAgICBpID0gMDtcbiAgICBrID0gMDtcbiAgICBuID0gMDtcbiAgICAvLyBmaXJzdCBhbmQgbGFzdCBkaW1zIG11c3QgYmUgZXF1YWxcbiAgICBrID0gcDEudGVuc29yLm5kaW0gLSAxO1xuICAgIGlmIChwMS50ZW5zb3IuZGltWzBdICE9PSBwMS50ZW5zb3IuZGltW2tdKSB7XG4gICAgICBwdXNoX3N5bWJvbChQT1dFUik7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbGlzdCgzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHVzaChwMik7XG4gICAgbiA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgaWYgKGlzTmFOKG4pKSB7XG4gICAgICBwdXNoX3N5bWJvbChQT1dFUik7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHB1c2gocDIpO1xuICAgICAgbGlzdCgzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChwMS50ZW5zb3IubmRpbSAhPT0gMikge1xuICAgICAgICBzdG9wKFwicG93ZXIodGVuc29yLDApIHdpdGggdGVuc29yIHJhbmsgbm90IGVxdWFsIHRvIDJcIik7XG4gICAgICB9XG4gICAgICBuID0gcDEudGVuc29yLmRpbVswXTtcbiAgICAgIHAxID0gYWxsb2NfdGVuc29yKG4gKiBuKTtcbiAgICAgIHAxLnRlbnNvci5uZGltID0gMjtcbiAgICAgIHAxLnRlbnNvci5kaW1bMF0gPSBuO1xuICAgICAgcDEudGVuc29yLmRpbVsxXSA9IG47XG4gICAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBuOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICAgIHAxLnRlbnNvci5lbGVtW24gKiBpICsgaV0gPSBvbmU7XG4gICAgICB9XG4gICAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMSk7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG4gPCAwKSB7XG4gICAgICBuID0gLW47XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIGludigpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICB9XG4gICAgcHVzaChwMSk7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IG0xID0gMSwgcmVmMyA9IG47ICgxIDw9IHJlZjMgPyBtMSA8IHJlZjMgOiBtMSA+IHJlZjMpOyBpID0gMSA8PSByZWYzID8gKyttMSA6IC0tbTEpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgaW5uZXIoKTtcbiAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3Ioc3RhY2tbdG9zIC0gMV0pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIGNvcHlfdGVuc29yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGwxLCBtMSwgcmVmMiwgcmVmMztcbiAgICBpID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBwMiA9IGFsbG9jX3RlbnNvcihwMS50ZW5zb3IubmVsZW0pO1xuICAgIHAyLnRlbnNvci5uZGltID0gcDEudGVuc29yLm5kaW07XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gcDEudGVuc29yLm5kaW07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAyLnRlbnNvci5kaW1baV0gPSBwMS50ZW5zb3IuZGltW2ldO1xuICAgIH1cbiAgICBmb3IgKGkgPSBtMSA9IDAsIHJlZjMgPSBwMS50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjMgPyBtMSA8IHJlZjMgOiBtMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKyttMSA6IC0tbTEpIHtcbiAgICAgIHAyLnRlbnNvci5lbGVtW2ldID0gcDEudGVuc29yLmVsZW1baV07XG4gICAgfVxuICAgIGNoZWNrX3RlbnNvcl9kaW1lbnNpb25zKHAxKTtcbiAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMik7XG4gICAgcHVzaChwMik7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBUZW5zb3JzIHdpdGggZWxlbWVudHMgdGhhdCBhcmUgYWxzbyB0ZW5zb3JzIGdldCBwcm9tb3RlZCB0byBhIGhpZ2hlciByYW5rLlxuICBwcm9tb3RlX3RlbnNvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBqLCBrLCBsMSwgbTEsIG4xLCBuZGltLCBuZWxlbSwgbzEsIHExLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCByZWY2O1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIGsgPSAwO1xuICAgIG5lbGVtID0gMDtcbiAgICBuZGltID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBpZiAoIWlzdGVuc29yKHAxKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHAyID0gcDEudGVuc29yLmVsZW1bMF07XG4gICAgZm9yIChpID0gbDEgPSAxLCByZWYyID0gcDEudGVuc29yLm5lbGVtOyAoMSA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDEgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBpZiAoIWNvbXBhdGlibGUocDIsIHAxLnRlbnNvci5lbGVtW2ldKSkge1xuICAgICAgICBzdG9wKFwiQ2Fubm90IHByb21vdGUgdGVuc29yIGR1ZSB0byBpbmNvbnNpc3RlbnQgdGVuc29yIGNvbXBvbmVudHMuXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzdGVuc29yKHAyKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5kaW0gPSBwMS50ZW5zb3IubmRpbSArIHAyLnRlbnNvci5uZGltO1xuICAgIGlmIChuZGltID4gTUFYRElNKSB7XG4gICAgICBzdG9wKFwidGVuc29yIHJhbmsgPiBcIiArIE1BWERJTSk7XG4gICAgfVxuICAgIG5lbGVtID0gcDEudGVuc29yLm5lbGVtICogcDIudGVuc29yLm5lbGVtO1xuICAgIHAzID0gYWxsb2NfdGVuc29yKG5lbGVtKTtcbiAgICBwMy50ZW5zb3IubmRpbSA9IG5kaW07XG4gICAgZm9yIChpID0gbTEgPSAwLCByZWYzID0gcDEudGVuc29yLm5kaW07ICgwIDw9IHJlZjMgPyBtMSA8IHJlZjMgOiBtMSA+IHJlZjMpOyBpID0gMCA8PSByZWYzID8gKyttMSA6IC0tbTEpIHtcbiAgICAgIHAzLnRlbnNvci5kaW1baV0gPSBwMS50ZW5zb3IuZGltW2ldO1xuICAgIH1cbiAgICBmb3IgKGogPSBuMSA9IDAsIHJlZjQgPSBwMi50ZW5zb3IubmRpbTsgKDAgPD0gcmVmNCA/IG4xIDwgcmVmNCA6IG4xID4gcmVmNCk7IGogPSAwIDw9IHJlZjQgPyArK24xIDogLS1uMSkge1xuICAgICAgcDMudGVuc29yLmRpbVtpICsgal0gPSBwMi50ZW5zb3IuZGltW2pdO1xuICAgIH1cbiAgICBrID0gMDtcbiAgICBmb3IgKGkgPSBvMSA9IDAsIHJlZjUgPSBwMS50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjUgPyBvMSA8IHJlZjUgOiBvMSA+IHJlZjUpOyBpID0gMCA8PSByZWY1ID8gKytvMSA6IC0tbzEpIHtcbiAgICAgIHAyID0gcDEudGVuc29yLmVsZW1baV07XG4gICAgICBmb3IgKGogPSBxMSA9IDAsIHJlZjYgPSBwMi50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjYgPyBxMSA8IHJlZjYgOiBxMSA+IHJlZjYpOyBqID0gMCA8PSByZWY2ID8gKytxMSA6IC0tcTEpIHtcbiAgICAgICAgcDMudGVuc29yLmVsZW1baysrXSA9IHAyLnRlbnNvci5lbGVtW2pdO1xuICAgICAgfVxuICAgIH1cbiAgICBjaGVja190ZW5zb3JfZGltZW5zaW9ucyhwMik7XG4gICAgY2hlY2tfdGVuc29yX2RpbWVuc2lvbnMocDMpO1xuICAgIHB1c2gocDMpO1xuICAgIHJldHVybiByZXN0b3JlKCk7XG4gIH07XG5cbiAgY29tcGF0aWJsZSA9IGZ1bmN0aW9uKHAsIHEpIHtcbiAgICB2YXIgaSwgbDEsIHJlZjI7XG4gICAgaWYgKCFpc3RlbnNvcihwKSAmJiAhaXN0ZW5zb3IocSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoIWlzdGVuc29yKHApIHx8ICFpc3RlbnNvcihxKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChwLnRlbnNvci5uZGltICE9PSBxLnRlbnNvci5uZGltKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gcC50ZW5zb3IubmRpbTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgaWYgKHAudGVuc29yLmRpbVtpXSAhPT0gcS50ZW5zb3IuZGltW2ldKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMTtcbiAgfTtcblxuICAvLyBJZiB0aGUgbnVtYmVyIG9mIGFyZ3MgaXMgb2RkIHRoZW4gdGhlIGxhc3QgYXJnIGlzIHRoZSBkZWZhdWx0IHJlc3VsdC5cbiAgLy8gV29ya3MgbGlrZSBhIHN3aXRjaCBzdGF0ZW1lbnQuIENvdWxkIGFsc28gYmUgdXNlZCBmb3IgcGllY2V3aXNlXG4gIC8vIGZ1bmN0aW9ucz8gVE9ETyBzaG91bGQgcHJvYmFibHkgYmUgY2FsbGVkIFwic3dpdGNoXCI/XG4gIEV2YWxfdGVzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjaGVja1Jlc3VsdCwgb3JpZztcbiAgICBvcmlnID0gcDE7XG4gICAgcDEgPSBjZHIocDEpO1xuICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAvLyBvZGQgbnVtYmVyIG9mIHBhcmFtZXRlcnMgbWVhbnMgdGhhdCB0aGVcbiAgICAgIC8vIGxhc3QgYXJndW1lbnQgYmVjb21lcyB0aGUgZGVmYXVsdCBjYXNlXG4gICAgICAvLyBpLmUuIHRoZSBvbmUgd2l0aG91dCBhIHRlc3QuXG4gICAgICBpZiAoY2RyKHAxKSA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgRXZhbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjaGVja1Jlc3VsdCA9IGlzWmVyb0xpa2VPck5vblplcm9MaWtlT3JVbmRldGVybWluZWQoY2FyKHAxKSk7XG4gICAgICBpZiAoY2hlY2tSZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAvLyB3ZSBjb3VsZG4ndCBkZXRlcm1pbmUgdGhlIHJlc3VsdFxuICAgICAgICAvLyBvZiBhIHRlc3QuIFRoaXMgbWVhbnMgd2UgY2FuJ3QgY29uY2x1ZGVcbiAgICAgICAgLy8gYW55dGhpbmcgYWJvdXQgdGhlIHJlc3VsdCBvZiB0aGVcbiAgICAgICAgLy8gb3ZlcmFsbCB0ZXN0LCBzbyB3ZSBtdXN0IGJhaWxcbiAgICAgICAgLy8gd2l0aCB0aGUgdW5ldmFsbGVkIHRlc3RcbiAgICAgICAgcHVzaChvcmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChjaGVja1Jlc3VsdCkge1xuICAgICAgICAvLyB0ZXN0IHN1Y2Nlc2Z1bCwgd2UgZm91bmQgb3V0IG91dHB1dFxuICAgICAgICBwdXNoKGNhZHIocDEpKTtcbiAgICAgICAgRXZhbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0ZXN0IHVuc3VjY2Vzc2Z1bCwgY29udGludWUgdG8gdGhlXG4gICAgICAgIC8vIG5leHQgcGFpciBvZiB0ZXN0LHZhbHVlXG4gICAgICAgIHAxID0gY2RkcihwMSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG5vIHRlc3QgbWF0Y2hlZCBhbmQgdGhlcmUgd2FzIG5vXG4gICAgLy8gY2F0Y2gtYWxsIGNhc2UsIHNvIHdlIHJldHVybiB6ZXJvLlxuICAgIHJldHVybiBwdXNoX2ludGVnZXIoMCk7XG4gIH07XG5cbiAgLy8gd2UgdGVzdCBBPT1CIGJ5IGZpcnN0IHN1YnRyYWN0aW5nIGFuZCBjaGVja2luZyBpZiB3ZSBzeW1ib2xpY2FsbHlcbiAgLy8gZ2V0IHplcm8uIElmIG5vdCwgd2UgZXZhbHVhdGUgdG8gZmxvYXQgYW5kIGNoZWNrIGlmIHdlIGdldCBhIHplcm8uXG4gIC8vIElmIHdlIGdldCBhbm90aGVyIE5VTUJFUiB0aGVuIHdlIGtub3cgdGhleSBhcmUgZGlmZmVyZW50LlxuICAvLyBJZiB3ZSBnZXQgc29tZXRoaW5nIGVsc2UsIHRoZW4gd2UgZG9uJ3Qga25vdyBhbmQgd2UgcmV0dXJuIHRoZVxuICAvLyB1bmF2ZWx1YXRlZCB0ZXN0LCB3aGljaCBpcyB0aGUgc2FtZSBhcyBzYXlpbmcgXCJtYXliZVwiLlxuICBFdmFsX3Rlc3RlcSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjaGVja1Jlc3VsdCwgb3JpZywgc3VidHJhY3Rpb25SZXN1bHQ7XG4gICAgLy8gZmlyc3QgdHJ5IHdpdGhvdXQgc2ltcGxpZnluZyBib3RoIHNpZGVzXG4gICAgb3JpZyA9IHAxO1xuICAgIHB1c2goY2FkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBwdXNoKGNhZGRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHN1YnRyYWN0KCk7XG4gICAgc3VidHJhY3Rpb25SZXN1bHQgPSBwb3AoKTtcbiAgICAvLyBPSyBzbyB3ZSBhcmUgZG9pbmcgc29tZXRoaW5nIHRyaWNreSBoZXJlXG4gICAgLy8gd2UgYXJlIHVzaW5nIGlzWmVyb0xpa2VPck5vblplcm9MaWtlT3JVbmRldGVybWluZWQgdG8gY2hlY2sgaWYgdGhlIHJlc3VsdFxuICAgIC8vIGlzIHplcm8gb3Igbm90IHplcm8gb3IgdW5rbm93bi5cbiAgICAvLyBpc1plcm9MaWtlT3JOb25aZXJvTGlrZU9yVW5kZXRlcm1pbmVkIGhhcyBzb21lIHJvdXRpbmVzXG4gICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSB6ZXJvLW5lc3Mvbm9uLXplcm8tbmVzcyBvclxuICAgIC8vIHVuZGV0ZXJtaW5hdGUtbmVzcyBvZiB0aGluZ3Mgc28gd2UgdXNlXG4gICAgLy8gdGhhdCBoZXJlIGFuZCBkb3duIGJlbG93LlxuICAgIGNoZWNrUmVzdWx0ID0gaXNaZXJvTGlrZU9yTm9uWmVyb0xpa2VPclVuZGV0ZXJtaW5lZChzdWJ0cmFjdGlvblJlc3VsdCk7XG4gICAgaWYgKGNoZWNrUmVzdWx0KSB7XG4gICAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICgoY2hlY2tSZXN1bHQgIT0gbnVsbCkgJiYgIWNoZWNrUmVzdWx0KSB7XG4gICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHdlIGRpZG4ndCBnZXQgYSBzaW1wbGUgbnVtZXJpYyByZXN1bHQgYnV0XG4gICAgLy8gbGV0J3MgdHJ5IGFnYWluIGFmdGVyIGRvaW5nXG4gICAgLy8gYSBzaW1wbGlmaWNhdGlvbiBvbiBib3RoIHNpZGVzXG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHNpbXBsaWZ5KCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBzaW1wbGlmeSgpO1xuICAgIHN1YnRyYWN0KCk7XG4gICAgc3VidHJhY3Rpb25SZXN1bHQgPSBwb3AoKTtcbiAgICBjaGVja1Jlc3VsdCA9IGlzWmVyb0xpa2VPck5vblplcm9MaWtlT3JVbmRldGVybWluZWQoc3VidHJhY3Rpb25SZXN1bHQpO1xuICAgIGlmIChjaGVja1Jlc3VsdCkge1xuICAgICAgcHVzaF9pbnRlZ2VyKDApO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoKGNoZWNrUmVzdWx0ICE9IG51bGwpICYmICFjaGVja1Jlc3VsdCkge1xuICAgICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IHRvIGEgbnVtYmVyIHRoZW4gd2VcbiAgICAvLyBkb24ndCBrbm93IHdoZXRoZXIgdGhlIHF1YW50aXRpZXMgYXJlXG4gICAgLy8gZGlmZmVyZW50IHNvIGRvIG5vdGhpbmdcbiAgICByZXR1cm4gcHVzaChvcmlnKTtcbiAgfTtcblxuICAvLyBSZWxhdGlvbmFsIG9wZXJhdG9ycyBleHBlY3QgYSBudW1lcmljIHJlc3VsdCBmb3Igb3BlcmFuZCBkaWZmZXJlbmNlLlxuICBFdmFsX3Rlc3RnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb21wYXJpc29uLCBvcmlnO1xuICAgIG9yaWcgPSBwMTtcbiAgICBjb21wYXJpc29uID0gY21wX2FyZ3MoKTtcbiAgICBpZiAoY29tcGFyaXNvbiA9PSBudWxsKSB7XG4gICAgICBwdXNoKG9yaWcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29tcGFyaXNvbiA+PSAwKSB7XG4gICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKDApO1xuICAgIH1cbiAgfTtcblxuICBFdmFsX3Rlc3RndCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb21wYXJpc29uLCBvcmlnO1xuICAgIG9yaWcgPSBwMTtcbiAgICBjb21wYXJpc29uID0gY21wX2FyZ3MoKTtcbiAgICBpZiAoY29tcGFyaXNvbiA9PSBudWxsKSB7XG4gICAgICBwdXNoKG9yaWcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMCk7XG4gICAgfVxuICB9O1xuXG4gIEV2YWxfdGVzdGxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbXBhcmlzb24sIG9yaWc7XG4gICAgb3JpZyA9IHAxO1xuICAgIGNvbXBhcmlzb24gPSBjbXBfYXJncygpO1xuICAgIGlmIChjb21wYXJpc29uID09IG51bGwpIHtcbiAgICAgIHB1c2gob3JpZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb21wYXJpc29uIDw9IDApIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMCk7XG4gICAgfVxuICB9O1xuXG4gIEV2YWxfdGVzdGx0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbXBhcmlzb24sIG9yaWc7XG4gICAgb3JpZyA9IHAxO1xuICAgIGNvbXBhcmlzb24gPSBjbXBfYXJncygpO1xuICAgIGlmIChjb21wYXJpc29uID09IG51bGwpIHtcbiAgICAgIHB1c2gob3JpZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb21wYXJpc29uIDwgMCkge1xuICAgICAgcmV0dXJuIHB1c2hfaW50ZWdlcigxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHB1c2hfaW50ZWdlcigwKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gbm90IGRlZmluaXRpb25cbiAgRXZhbF9ub3QgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hlY2tSZXN1bHQsIHdob2xlQW5kRXhwcmVzc2lvbjtcbiAgICB3aG9sZUFuZEV4cHJlc3Npb24gPSBwMTtcbiAgICBjaGVja1Jlc3VsdCA9IGlzWmVyb0xpa2VPck5vblplcm9MaWtlT3JVbmRldGVybWluZWQoY2FkcihwMSkpO1xuICAgIGlmIChjaGVja1Jlc3VsdCA9PSBudWxsKSB7XG4gICAgICAvLyBpbmNvbmNsdXNpdmUgdGVzdCBvbiBwcmVkaWNhdGVcbiAgICAgIHJldHVybiBwdXNoKHdob2xlQW5kRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmIChjaGVja1Jlc3VsdCkge1xuICAgICAgLy8gdHJ1ZSAtPiBmYWxzZVxuICAgICAgcmV0dXJuIHB1c2hfaW50ZWdlcigwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmFsc2UgLT4gdHJ1ZVxuICAgICAgcmV0dXJuIHB1c2hfaW50ZWdlcigxKTtcbiAgICB9XG4gIH07XG5cbiAgLyogYW5kID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIFRhZ3NcbiAgLS0tLVxuICBzY3JpcHRpbmcsIEpTLCBpbnRlcm5hbCwgdHJlZW5vZGUsIGdlbmVyYWwgY29uY2VwdFxuXG4gIFBhcmFtZXRlcnNcbiAgLS0tLS0tLS0tLVxuICBhLGIsLi4uXG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIExvZ2ljYWwtYW5kIG9mIHByZWRpY2F0ZSBleHByZXNzaW9ucy5cblxuICAqL1xuICAvLyBhbmQgZGVmaW5pdGlvblxuICBFdmFsX2FuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbmRQcmVkaWNhdGVzLCBjaGVja1Jlc3VsdCwgc29tZVByZWRpY2F0ZVVua25vd24sIHdob2xlQW5kRXhwcmVzc2lvbjtcbiAgICB3aG9sZUFuZEV4cHJlc3Npb24gPSBwMTtcbiAgICBhbmRQcmVkaWNhdGVzID0gY2RyKHdob2xlQW5kRXhwcmVzc2lvbik7XG4gICAgc29tZVByZWRpY2F0ZVVua25vd24gPSBmYWxzZTtcbiAgICB3aGlsZSAoaXNjb25zKGFuZFByZWRpY2F0ZXMpKSB7XG4gICAgICAvLyBldmFsIGVhY2ggcHJlZGljYXRlXG4gICAgICBjaGVja1Jlc3VsdCA9IGlzWmVyb0xpa2VPck5vblplcm9MaWtlT3JVbmRldGVybWluZWQoY2FyKGFuZFByZWRpY2F0ZXMpKTtcbiAgICAgIGlmIChjaGVja1Jlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgIC8vIGhlcmUgd2UgaGF2ZSBzdHVmZiB0aGF0IGlzIG5vdCByZWNvbmR1Y2libGUgdG8gYW55XG4gICAgICAgIC8vIG51bWVyaWMgdmFsdWUgKG9yIHRlbnNvciB3aXRoIG51bWVyaWMgdmFsdWVzKSBlLmcuXG4gICAgICAgIC8vICdhK2InLCBzbyBpdCBqdXN0IG1lYW5zIHRoYXQgd2UganVzdCBkb24ndCBrbm93IHRoZVxuICAgICAgICAvLyB0cnV0aCB2YWx1ZSBvZiB0aGlzIHBhcnRpY3VsYXIgcHJlZGljYXRlLlxuICAgICAgICAvLyBXZSdsbCB0cmFjayB0aGUgZmFjdCB0aGF0IHdlIGZvdW5kIGFuIHVua25vd25cbiAgICAgICAgLy8gcHJlZGljYXRlIGFuZCB3ZSBjb250aW51ZSB3aXRoIHRoZSBvdGhlciBwcmVkaWNhdGVzLlxuICAgICAgICAvLyAobm90ZSB0aGF0IGluIGNhc2Ugc29tZSBzdWJzZXF1ZW50IHByZWRpY2F0ZSB3aWxsIGJlIGZhbHNlLFxuICAgICAgICAvLyBpdCB3b24ndCBtYXR0ZXIgdGhhdCB3ZSBmb3VuZCBzb21lIHVua25vd25zIGFuZFxuICAgICAgICAvLyB0aGUgd2hvbGUgdGVzdCB3aWxsIGJlIGltbWVkaWF0ZWx5IHplcm8pLlxuICAgICAgICBzb21lUHJlZGljYXRlVW5rbm93biA9IHRydWU7XG4gICAgICAgIGFuZFByZWRpY2F0ZXMgPSBjZHIoYW5kUHJlZGljYXRlcyk7XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrUmVzdWx0KSB7XG4gICAgICAgIC8vIGZvdW5kIGEgdHJ1ZSwgbW92ZSBvbiB0byB0aGUgbmV4dCBwcmVkaWNhdGVcbiAgICAgICAgYW5kUHJlZGljYXRlcyA9IGNkcihhbmRQcmVkaWNhdGVzKTtcbiAgICAgIH0gZWxzZSBpZiAoIWNoZWNrUmVzdWx0KSB7XG4gICAgICAgIC8vIGZvdW5kIGEgZmFsc2UsIGVub3VnaCB0byBmYWxzaWZ5IGV2ZXJ5dGhpbmcgYW5kIHJldHVyblxuICAgICAgICBwdXNoX2ludGVnZXIoMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgY2hlY2tlZCBhbGwgdGhlIHByZWRpY2F0ZXMgYW5kIG5vbmUgb2YgdGhlbVxuICAgIC8vIHdhcyBmYWxzZS4gU28gdGhleSB3ZXJlIGFsbCBlaXRoZXIgdHJ1ZSBvciB1bmtub3duLlxuICAgIC8vIE5vdywgaWYgZXZlbiBqdXN0IG9uZSB3YXMgdW5rbm93biwgd2UnbGwgaGF2ZSB0byBjYWxsIHRoaXNcbiAgICAvLyB0ZXN0IGFzIGluY29uY2x1c2l2ZSBhbmQgcmV0dXJuIHRoZSB3aG9sZSB0ZXN0IGV4cHJlc3Npb24uXG4gICAgLy8gSWYgYWxsIHRoZSBwcmVkaWNhdGVzIHdlcmUga25vd24sIHRoZW4gd2UgY2FuIGNvbmNsdWRlXG4gICAgLy8gdGhhdCB0aGUgdGVzdCByZXR1cm5zIHRydWUuXG4gICAgaWYgKHNvbWVQcmVkaWNhdGVVbmtub3duKSB7XG4gICAgICByZXR1cm4gcHVzaCh3aG9sZUFuZEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKDEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBvciBkZWZpbml0aW9uXG4gIEV2YWxfb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hlY2tSZXN1bHQsIG9yUHJlZGljYXRlcywgc29tZVByZWRpY2F0ZVVua25vd24sIHdob2xlT3JFeHByZXNzaW9uO1xuICAgIHdob2xlT3JFeHByZXNzaW9uID0gcDE7XG4gICAgb3JQcmVkaWNhdGVzID0gY2RyKHdob2xlT3JFeHByZXNzaW9uKTtcbiAgICBzb21lUHJlZGljYXRlVW5rbm93biA9IGZhbHNlO1xuICAgIHdoaWxlIChpc2NvbnMob3JQcmVkaWNhdGVzKSkge1xuICAgICAgLy8gZXZhbCBlYWNoIHByZWRpY2F0ZVxuICAgICAgY2hlY2tSZXN1bHQgPSBpc1plcm9MaWtlT3JOb25aZXJvTGlrZU9yVW5kZXRlcm1pbmVkKGNhcihvclByZWRpY2F0ZXMpKTtcbiAgICAgIGlmIChjaGVja1Jlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgIC8vIGhlcmUgd2UgaGF2ZSBzdHVmZiB0aGF0IGlzIG5vdCByZWNvbmR1Y2libGUgdG8gYW55XG4gICAgICAgIC8vIG51bWVyaWMgdmFsdWUgKG9yIHRlbnNvciB3aXRoIG51bWVyaWMgdmFsdWVzKSBlLmcuXG4gICAgICAgIC8vICdhK2InLCBzbyBpdCBqdXN0IG1lYW5zIHRoYXQgd2UganVzdCBkb24ndCBrbm93IHRoZVxuICAgICAgICAvLyB0cnV0aCB2YWx1ZSBvZiB0aGlzIHBhcnRpY3VsYXIgcHJlZGljYXRlLlxuICAgICAgICAvLyBXZSdsbCB0cmFjayB0aGUgZmFjdCB0aGF0IHdlIGZvdW5kIGFuIHVua25vd25cbiAgICAgICAgLy8gcHJlZGljYXRlIGFuZCB3ZSBjb250aW51ZSB3aXRoIHRoZSBvdGhlciBwcmVkaWNhdGVzLlxuICAgICAgICAvLyAobm90ZSB0aGF0IGluIGNhc2Ugc29tZSBzdWJzZXF1ZW50IHByZWRpY2F0ZSB3aWxsIGJlIGZhbHNlLFxuICAgICAgICAvLyBpdCB3b24ndCBtYXR0ZXIgdGhhdCB3ZSBmb3VuZCBzb21lIHVua25vd25zIGFuZFxuICAgICAgICAvLyB0aGUgd2hvbGUgdGVzdCB3aWxsIGJlIGltbWVkaWF0ZWx5IHplcm8pLlxuICAgICAgICBzb21lUHJlZGljYXRlVW5rbm93biA9IHRydWU7XG4gICAgICAgIG9yUHJlZGljYXRlcyA9IGNkcihvclByZWRpY2F0ZXMpO1xuICAgICAgfSBlbHNlIGlmIChjaGVja1Jlc3VsdCkge1xuICAgICAgICAvLyBmb3VuZCBhIHRydWUsIGVub3VnaCB0byByZXR1cm4gdHJ1ZVxuICAgICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoIWNoZWNrUmVzdWx0KSB7XG4gICAgICAgIC8vIGZvdW5kIGEgZmFsc2UsIG1vdmUgb24gdG8gdGhlIG5leHQgcHJlZGljYXRlXG4gICAgICAgIG9yUHJlZGljYXRlcyA9IGNkcihvclByZWRpY2F0ZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBXZSBjaGVja2VkIGFsbCB0aGUgcHJlZGljYXRlcyBhbmQgbm9uZSBvZiB0aGVtXG4gICAgLy8gd2FzIHRydWUuIFNvIHRoZXkgd2VyZSBhbGwgZWl0aGVyIGZhbHNlIG9yIHVua25vd24uXG4gICAgLy8gTm93LCBpZiBldmVuIGp1c3Qgb25lIHdhcyB1bmtub3duLCB3ZSdsbCBoYXZlIHRvIGNhbGwgdGhpc1xuICAgIC8vIHRlc3QgYXMgaW5jb25jbHVzaXZlIGFuZCByZXR1cm4gdGhlIHdob2xlIHRlc3QgZXhwcmVzc2lvbi5cbiAgICAvLyBJZiBhbGwgdGhlIHByZWRpY2F0ZXMgd2VyZSBrbm93biwgdGhlbiB3ZSBjYW4gY29uY2x1ZGVcbiAgICAvLyB0aGF0IHRoZSB0ZXN0IHJldHVybnMgZmFsc2UuXG4gICAgaWYgKHNvbWVQcmVkaWNhdGVVbmtub3duKSB7XG4gICAgICByZXR1cm4gcHVzaCh3aG9sZU9yRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwdXNoX2ludGVnZXIoMCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIHVzZSBzdWJ0cmFjdCBmb3IgY2FzZXMgbGlrZSBBIDwgQSArIDFcblxuICAvLyBUT0RPIHlvdSBjb3VsZCBiZSBzbWFydGVyIGhlcmUgYW5kXG4gIC8vIHNpbXBsaWZ5IGJvdGggc2lkZXMgb25seSBpbiB0aGUgY2FzZVxuICAvLyBvZiBcInJlbGF0aW9uYWwgb3BlcmF0b3I6IGNhbm5vdCBkZXRlcm1pbmUuLi5cIlxuICAvLyBhIGJpdCBsaWtlIHdlIGRvIGluIEV2YWxfdGVzdGVxXG4gIGNtcF9hcmdzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQ7XG4gICAgdCA9IDA7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIHNpbXBsaWZ5KCk7XG4gICAgcHVzaChjYWRkcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICBzaW1wbGlmeSgpO1xuICAgIHN1YnRyYWN0KCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICAvLyB0cnkgZmxvYXRpbmcgcG9pbnQgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKHAxLmsgIT09IE5VTSAmJiBwMS5rICE9PSBET1VCTEUpIHtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgeXlmbG9hdCgpO1xuICAgICAgRXZhbCgpO1xuICAgICAgcDEgPSBwb3AoKTtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyBcImNvbXBhcmlzb246IFwiICsgcDEudG9TdHJpbmcoKVxuICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDEpKSB7XG4gICAgICAvL2NvbnNvbGUubG9nIFwiY29tcGFyaXNvbiBpc1plcm8gXCJcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBzd2l0Y2ggKHAxLmspIHtcbiAgICAgIGNhc2UgTlVNOlxuICAgICAgICBpZiAoTVNJR04ocDEucS5hKSA9PT0gLTEpIHtcbiAgICAgICAgICB0ID0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERPVUJMRTpcbiAgICAgICAgLy9jb25zb2xlLmxvZyBcImNvbXBhcmlzb24gcDEuZDogXCIgKyBwMS5kXG4gICAgICAgIGlmIChwMS5kIDwgMC4wKSB7XG4gICAgICAgICAgdCA9IC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy9jb25zb2xlLmxvZyBcImNvbXBhcmlzb24gaXMgbnVsbFwiXG4gICAgICAgIHQgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvKlxuICBUcmFuc2Zvcm0gYW4gZXhwcmVzc2lvbiB1c2luZyBhIHBhdHRlcm4uIFRoZVxuICBwYXR0ZXJuIGNhbiBjb21lIGZyb20gdGhlIGludGVncmFscyB0YWJsZSBvclxuICB0aGUgdXNlci1kZWZpbmVkIHBhdHRlcm5zLlxuXG4gIFRoZSBleHByZXNzaW9uIGFuZCBmcmVlIHZhcmlhYmxlIGFyZSBvbiB0aGUgc3RhY2suXG5cbiAgVGhlIGFyZ3VtZW50IHMgaXMgYSBudWxsIHRlcm1pbmF0ZWQgbGlzdCBvZiB0cmFuc2Zvcm0gcnVsZXMuXG5cbiAgRm9yIGV4YW1wbGUsIHNlZSB0aGUgaXRhYiAoaW50ZWdyYWxzIHRhYmxlKVxuXG4gIEludGVybmFsbHksIHRoZSBmb2xsb3dpbmcgc3ltYm9scyBhcmUgdXNlZDpcblxuICAgIEYgIGlucHV0IGV4cHJlc3Npb25cblxuICAgIFggIGZyZWUgdmFyaWFibGUsIGkuZS4gRiBvZiBYXG5cbiAgICBBICB0ZW1wbGF0ZSBleHByZXNzaW9uXG5cbiAgICBCICByZXN1bHQgZXhwcmVzc2lvblxuXG4gICAgQyAgbGlzdCBvZiBjb25kaXRpb25hbCBleHByZXNzaW9uc1xuXG4gIFB1dHMgdGhlIGZpbmFsIGV4cHJlc3Npb24gb24gdG9wIG9mIHN0YWNrXG4gICh3aGV0aGVyIGl0J3MgdHJhbnNmb3JtZWQgb3Igbm90KSBhbmQgcmV0dXJuc1xuICB0cnVlIGlzIHN1Y2Nlc3NmdWwsIGZhbHNlIGlmIG5vdC5cblxuICAqL1xuICAvLyBwMSBhbmQgcDIgYXJlIHRtcHNcblxuICAvL2RlZmluZSBGIHAzXG4gIC8vZGVmaW5lIFggcDRcbiAgLy9kZWZpbmUgQSBwNVxuICAvL2RlZmluZSBCIHA2XG4gIC8vZGVmaW5lIEMgcDdcbiAgdHJhbnNmb3JtID0gZnVuY3Rpb24ocywgZ2VuZXJhbFRyYW5zZm9ybSkge1xuICAgIHZhciBib29rbWFya1Rvc1RvUHJpbnREZWNvbXBzLCBlYWNoVHJhbnNmb3JtRW50cnksIGksIGwxLCBsZW4sIGxlbjEsIG0xLCBuMSwgbnVtYmVyT2ZEZWNvbXBzLCByZWYyLCByZXN0VGVybSwgc2Vjb25kVGVybSwgc3VjY2VzcywgdGhlVHJhbnNmb3JtLCB0cmFuc2Zvcm1faCwgdHJhbnNmb3JtYXRpb25TdWNjZXNzZnVsLCB0cmFuc2Zvcm1lZFRlcm1zO1xuICAgIHRyYW5zZm9ybV9oID0gMDtcbiAgICBzYXZlKCk7XG4gICAgcDEgPSBudWxsO1xuICAgIHA0ID0gcG9wKCk7IC8vIFggaS5lLiBmcmVlIHZhcmlhYmxlXG4gICAgcDMgPSBwb3AoKTsgLy8gRiBpLmUuIGlucHV0IGV4cHJlc3Npb25cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiICAgICAgICAgISEhISEhISEhICAgdHJhbnNmb3JtIG9uOiBcIiArIHAzKTtcbiAgICB9XG4gICAgc2F2ZU1ldGFCaW5kaW5ncygpO1xuICAgIHNldF9iaW5kaW5nKHN5bWJvbChNRVRBWCksIHA0KTtcbiAgICAvLyBwdXQgY29uc3RhbnRzIGluIEYoWCkgb24gdGhlIHN0YWNrXG4gICAgdHJhbnNmb3JtX2ggPSB0b3M7XG4gICAgcHVzaF9pbnRlZ2VyKDEpO1xuICAgIHB1c2gocDMpO1xuICAgIHB1c2gocDQpO1xuICAgIHBvbHlmb3JtKCk7XG4gICAgcHVzaChwNCk7XG4gICAgYm9va21hcmtUb3NUb1ByaW50RGVjb21wcyA9IHRvcyAtIDI7XG4gICAgZGVjb21wKGdlbmVyYWxUcmFuc2Zvcm0pO1xuICAgIG51bWJlck9mRGVjb21wcyA9IHRvcyAtIGJvb2ttYXJrVG9zVG9QcmludERlY29tcHM7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIiAgXCIgKyBudW1iZXJPZkRlY29tcHMgKyBcIiBkZWNvbXBvc2VkIGVsZW1lbnRzID09PT09PSBcIik7XG4gICAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBudW1iZXJPZkRlY29tcHM7ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgIGRlY29tcG9zaXRpb24gZWxlbWVudCBcIiArIGkgKyBcIjogXCIgKyBzdGFja1t0b3MgLSAxIC0gaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0cmFuc2Zvcm1hdGlvblN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICBpZiAoZ2VuZXJhbFRyYW5zZm9ybSkge1xuICAgICAgaWYgKCFpc051bWVyaWNBdG9tKHAzKSkge1xuICAgICAgICB0aGVUcmFuc2Zvcm0gPSBzO1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImFwcGx5aW5nIHRyYW5zZm9ybTogXCIgKyB0aGVUcmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic2Nhbm5pbmcgdGFibGUgZW50cnkgXCIgKyB0aGVUcmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIHB1c2godGhlVHJhbnNmb3JtKTtcbiAgICAgICAgLy8gcmVwbGFjZW1lbnRzIG9mIG1ldGEgdmFyaWFibGVzLiBOb3RlIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gdXNlIHNjYW5fbWV0YSBiZWNhdXNlIHRoZSBwYXR0ZXJuIGlzIG5vdCBhIHN0cmluZ1xuICAgICAgICAvLyB0aGF0IHdlIGhhdmUgdG8gcGFyc2UsIGl0J3MgYSB0cmVlIGFscmVhZHkuXG4gICAgICAgIC8vIHJlcGxhY2UgYV8gd2l0aCBNRVRBQSBpbiB0aGUgcGFzc2VkIHRyYW5zZm9ybWF0aW9uXG4gICAgICAgIHB1c2goc3ltYm9sKFNZTUJPTF9BX1VOREVSU0NPUkUpKTtcbiAgICAgICAgcHVzaChzeW1ib2woTUVUQUEpKTtcbiAgICAgICAgc3Vic3QoKTtcbiAgICAgICAgLy8gcmVwbGFjZSBiXyB3aXRoIE1FVEFCIGluIHRoZSBwYXNzZWQgdHJhbnNmb3JtYXRpb25cbiAgICAgICAgcHVzaChzeW1ib2woU1lNQk9MX0JfVU5ERVJTQ09SRSkpO1xuICAgICAgICBwdXNoKHN5bWJvbChNRVRBQikpO1xuICAgICAgICBzdWJzdCgpO1xuICAgICAgICAvLyByZXBsYWNlIHhfIHdpdGggTUVUQVggaW4gdGhlIHBhc3NlZCB0cmFuc2Zvcm1hdGlvblxuICAgICAgICBwdXNoKHN5bWJvbChTWU1CT0xfWF9VTkRFUlNDT1JFKSk7XG4gICAgICAgIHB1c2goc3ltYm9sKE1FVEFYKSk7XG4gICAgICAgIHN1YnN0KCk7XG4gICAgICAgIHAxID0gcG9wKCk7XG4gICAgICAgIHA1ID0gY2FyKHAxKTtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJ0ZW1wbGF0ZSBleHByZXNzaW9uOiBcIiArIHA1KTtcbiAgICAgICAgfVxuICAgICAgICBwNiA9IGNhZHIocDEpO1xuICAgICAgICBwNyA9IGNkZHIocDEpO1xuICAgICAgICAvKlxuICAgICAgICBwNSA9IHAxLnRlbnNvci5lbGVtWzBdXG4gICAgICAgIHA2ID0gcDEudGVuc29yLmVsZW1bMV1cbiAgICAgICAgZm9yIGkgaW4gWzIuLihwMS50ZW5zb3IuZWxlbS5sZW5ndGgtMSldXG4gICAgICAgICAgcHVzaCBwMS50ZW5zb3IuZWxlbVtpXVxuICAgICAgICBsaXN0KHAxLnRlbnNvci5lbGVtLmxlbmd0aCAtIDIpXG4gICAgICAgIHA3ID0gcG9wKClcbiAgICAgICAgKi9cbiAgICAgICAgaWYgKGZfZXF1YWxzX2EodHJhbnNmb3JtX2gsIGdlbmVyYWxUcmFuc2Zvcm0pKSB7XG4gICAgICAgICAgLy8gc3VjY2Vzc2Z1bCB0cmFuc2Zvcm1hdGlvbixcbiAgICAgICAgICAvLyB0cmFuc2Zvcm1lZCByZXN1bHQgaXMgaW4gcDZcbiAgICAgICAgICB0cmFuc2Zvcm1hdGlvblN1Y2Nlc3NmdWwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRoZSBtYXRjaCBmYWlsZWQgYnV0IHBlcmhhcHMgd2UgY2FuIG1hdGNoXG4gICAgICAgICAgLy8gc29tZXRoaW5nIGxvd2VyIGRvd24gaW4gdGhlIHRyZWUsIHNvXG4gICAgICAgICAgLy8gbGV0J3MgcmVjdXJzZSB0aGUgdHJlZVxuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwMyBhdCB0aGlzIHBvaW50OiBcIiArIHAzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhbnNmb3JtZWRUZXJtcyA9IFtdO1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjYXIocDMpOiBcIiArIGNhcihwMykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN0VGVybSA9IHAzO1xuICAgICAgICAgIGlmIChpc2NvbnMocmVzdFRlcm0pKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1lZFRlcm1zLnB1c2goY2FyKHAzKSk7XG4gICAgICAgICAgICByZXN0VGVybSA9IGNkcihwMyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChpc2NvbnMocmVzdFRlcm0pKSB7XG4gICAgICAgICAgICBzZWNvbmRUZXJtID0gY2FyKHJlc3RUZXJtKTtcbiAgICAgICAgICAgIHJlc3RUZXJtID0gY2RyKHJlc3RUZXJtKTtcbiAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRvcyBiZWZvcmUgcmVjdXJzaXZlIHRyYW5zZm9ybTogXCIgKyB0b3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHVzaChzZWNvbmRUZXJtKTtcbiAgICAgICAgICAgIHB1c2hfc3ltYm9sKE5JTCk7XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0aW5nOiBcIiArIHNlY29uZFRlcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9pZiAoc2Vjb25kVGVybStcIlwiKSA9PSBcImVpZyhBIHgsdHJhbnNwb3NlKEEgeCkpKClcIlxuICAgICAgICAgICAgLy8gIGRlYnVnZ2VyXG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJhYm91dCB0byB0cnkgdG8gc2ltcGxpZnkgb3RoZXIgdGVybTogXCIgKyBzZWNvbmRUZXJtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cmFuc2Zvcm0ocywgZ2VuZXJhbFRyYW5zZm9ybSk7XG4gICAgICAgICAgICB0cmFuc2Zvcm1hdGlvblN1Y2Nlc3NmdWwgPSB0cmFuc2Zvcm1hdGlvblN1Y2Nlc3NmdWwgfHwgc3VjY2VzcztcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkVGVybXMucHVzaChwb3AoKSk7XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0cmllZCB0byBzaW1wbGlmeSBvdGhlciB0ZXJtOiBcIiArIHNlY29uZFRlcm0gKyBcIiAuLi5zdWNjZXNzZnVsPzogXCIgKyBzdWNjZXNzICsgXCIgLi4udHJhbnNmb3JtZWQ6IFwiICsgdHJhbnNmb3JtZWRUZXJtc1t0cmFuc2Zvcm1lZFRlcm1zLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gcmVjcmVhdGUgdGhlIHRyZWUgd2Ugd2VyZSBwYXNzZWQsXG4gICAgICAgICAgLy8gYnV0IHdpdGggYWxsIHRoZSB0ZXJtcyBiZWluZyB0cmFuc2Zvcm1lZFxuICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZFRlcm1zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChtMSA9IDAsIGxlbiA9IHRyYW5zZm9ybWVkVGVybXMubGVuZ3RoOyBtMSA8IGxlbjsgbTErKykge1xuICAgICAgICAgICAgICBpID0gdHJhbnNmb3JtZWRUZXJtc1ttMV07XG4gICAgICAgICAgICAgIHB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0KHRyYW5zZm9ybWVkVGVybXMubGVuZ3RoKTtcbiAgICAgICAgICAgIHA2ID0gcG9wKCk7IC8vIFwiaW50ZWdyYWxzXCIgbW9kZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKG4xID0gMCwgbGVuMSA9IHMubGVuZ3RoOyBuMSA8IGxlbjE7IG4xKyspIHtcbiAgICAgICAgZWFjaFRyYW5zZm9ybUVudHJ5ID0gc1tuMV07XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic2Nhbm5pbmcgdGFibGUgZW50cnkgXCIgKyBlYWNoVHJhbnNmb3JtRW50cnkpO1xuICAgICAgICAgIGlmICgoZWFjaFRyYW5zZm9ybUVudHJ5ICsgXCJcIikuaW5kZXhPZihcImYoc3FydChhK2IqeCksMi8zKjEvYipzcXJ0KChhK2IqeCleMykpXCIpICE9PSAtMSkge1xuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlYWNoVHJhbnNmb3JtRW50cnkpIHtcbiAgICAgICAgICBzY2FuX21ldGEoZWFjaFRyYW5zZm9ybUVudHJ5KTtcbiAgICAgICAgICBwMSA9IHBvcCgpO1xuICAgICAgICAgIHA1ID0gY2FkcihwMSk7XG4gICAgICAgICAgcDYgPSBjYWRkcihwMSk7XG4gICAgICAgICAgcDcgPSBjZGRkcihwMSk7XG4gICAgICAgICAgLypcbiAgICAgICAgICBwNSA9IHAxLnRlbnNvci5lbGVtWzBdXG4gICAgICAgICAgcDYgPSBwMS50ZW5zb3IuZWxlbVsxXVxuICAgICAgICAgIGZvciBpIGluIFsyLi4ocDEudGVuc29yLmVsZW0ubGVuZ3RoLTEpXVxuICAgICAgICAgICAgcHVzaCBwMS50ZW5zb3IuZWxlbVtpXVxuICAgICAgICAgIGxpc3QocDEudGVuc29yLmVsZW0ubGVuZ3RoIC0gMilcbiAgICAgICAgICBwNyA9IHBvcCgpXG4gICAgICAgICAgKi9cbiAgICAgICAgICBpZiAoZl9lcXVhbHNfYSh0cmFuc2Zvcm1faCwgZ2VuZXJhbFRyYW5zZm9ybSkpIHtcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIGEgc3VjY2Vzc2Z1bCB0cmFuc2Zvcm1hdGlvbixcbiAgICAgICAgICAgIC8vIHRyYW5zZm9ybWVkIHJlc3VsdCBpcyBpbiBwNlxuICAgICAgICAgICAgdHJhbnNmb3JtYXRpb25TdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBtb3ZlVG9zKHRyYW5zZm9ybV9oKTtcbiAgICBpZiAodHJhbnNmb3JtYXRpb25TdWNjZXNzZnVsKSB7XG4gICAgICAvL2NvbnNvbGUubG9nIFwidHJhbnNmb3JtYXRpb24gc3VjY2Vzc2Z1bFwiXG4gICAgICAvLyBhIHRyYW5zZm9ybWF0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICBwdXNoKHA2KTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHAxID0gcG9wKCk7XG4gICAgICAvL2NvbnNvbGUubG9nIFwiLi4uaW50bzogXCIgKyBwMVxuICAgICAgdHJhbnNmb3JtYXRpb25TdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdHJhbnNmb3JtYXRpb25zIGZhaWxlZFxuICAgICAgaWYgKGdlbmVyYWxUcmFuc2Zvcm0pIHtcbiAgICAgICAgLy8gcmVzdWx0ID0gb3JpZ2luYWwgZXhwcmVzc2lvblxuICAgICAgICBwMSA9IHAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcDEgPSBzeW1ib2woTklMKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdG9yZU1ldGFCaW5kaW5ncygpO1xuICAgIHB1c2gocDEpO1xuICAgIHJlc3RvcmUoKTtcbiAgICByZXR1cm4gdHJhbnNmb3JtYXRpb25TdWNjZXNzZnVsO1xuICB9O1xuXG4gIHNhdmVNZXRhQmluZGluZ3MgPSBmdW5jdGlvbigpIHtcbiAgICBwdXNoKGdldF9iaW5kaW5nKHN5bWJvbChNRVRBQSkpKTtcbiAgICBwdXNoKGdldF9iaW5kaW5nKHN5bWJvbChNRVRBQikpKTtcbiAgICByZXR1cm4gcHVzaChnZXRfYmluZGluZyhzeW1ib2woTUVUQVgpKSk7XG4gIH07XG5cbiAgcmVzdG9yZU1ldGFCaW5kaW5ncyA9IGZ1bmN0aW9uKCkge1xuICAgIHNldF9iaW5kaW5nKHN5bWJvbChNRVRBWCksIHBvcCgpKTtcbiAgICBzZXRfYmluZGluZyhzeW1ib2woTUVUQUIpLCBwb3AoKSk7XG4gICAgcmV0dXJuIHNldF9iaW5kaW5nKHN5bWJvbChNRVRBQSksIHBvcCgpKTtcbiAgfTtcblxuICAvLyBzZWFyY2ggZm9yIGEgTUVUQUEgYW5kIE1FVEFCIHN1Y2ggdGhhdCBGID0gQVxuICBmX2VxdWFsc19hID0gZnVuY3Rpb24oaCwgZ2VuZXJhbFRyYW5zZm9ybSkge1xuICAgIHZhciBmZWFfaSwgZmVhX2osIGwxLCBtMSwgb3JpZ2luYWxleHBhbmRpbmcsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjU7XG4gICAgZmVhX2kgPSAwO1xuICAgIGZlYV9qID0gMDtcbiAgICBmb3IgKGZlYV9pID0gbDEgPSByZWYyID0gaCwgcmVmMyA9IHRvczsgKHJlZjIgPD0gcmVmMyA/IGwxIDwgcmVmMyA6IGwxID4gcmVmMyk7IGZlYV9pID0gcmVmMiA8PSByZWYzID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHNldF9iaW5kaW5nKHN5bWJvbChNRVRBQSksIHN0YWNrW2ZlYV9pXSk7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCIgIGJpbmRpbmcgTUVUQUEgdG8gXCIgKyBnZXRfYmluZGluZyhzeW1ib2woTUVUQUEpKSk7XG4gICAgICB9XG4gICAgICBmb3IgKGZlYV9qID0gbTEgPSByZWY0ID0gaCwgcmVmNSA9IHRvczsgKHJlZjQgPD0gcmVmNSA/IG0xIDwgcmVmNSA6IG0xID4gcmVmNSk7IGZlYV9qID0gcmVmNCA8PSByZWY1ID8gKyttMSA6IC0tbTEpIHtcbiAgICAgICAgc2V0X2JpbmRpbmcoc3ltYm9sKE1FVEFCKSwgc3RhY2tbZmVhX2pdKTtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgIGJpbmRpbmcgTUVUQUIgdG8gXCIgKyBnZXRfYmluZGluZyhzeW1ib2woTUVUQUIpKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm93IHRlc3QgYWxsIHRoZSBjb25kaXRpb25zIChpdCdzIGFuIGFuZCBiZXR3ZWVuIHRoZW0pXG4gICAgICAgIHAxID0gcDc7XG4gICAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgICBFdmFsKCk7XG4gICAgICAgICAgcDIgPSBwb3AoKTtcbiAgICAgICAgICBpZiAoaXNaZXJvQXRvbU9yVGVuc29yKHAyKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNjb25zKHAxKSkge1xuICAgICAgICAgIC8vIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQsXG4gICAgICAgICAgLy8gc2tpcCB0byB0aGUgbmV4dCBiaW5kaW5nIG9mIG1ldGFzXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaChwMyk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWJvdXQgdG8gZXZhbHVhdGUgdGVtcGxhdGUgZXhwcmVzc2lvbjogXCIgKyBwNSArIFwiIGJpbmRpbmcgTUVUQUEgdG8gXCIgKyBnZXRfYmluZGluZyhzeW1ib2woTUVUQUEpKSArIFwiIGFuZCBiaW5kaW5nIE1FVEFCIHRvIFwiICsgZ2V0X2JpbmRpbmcoc3ltYm9sKE1FVEFCKSkgKyBcIiBhbmQgYmluZGluZyBNRVRBWCB0byBcIiArIGdldF9iaW5kaW5nKHN5bWJvbChNRVRBWCkpKTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKHA1KTtcbiAgICAgICAgaWYgKGdlbmVyYWxUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBvcmlnaW5hbGV4cGFuZGluZyA9IGV4cGFuZGluZztcbiAgICAgICAgICBleHBhbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBFdmFsKCk7XG4gICAgICAgIGlmIChnZW5lcmFsVHJhbnNmb3JtKSB7XG4gICAgICAgICAgZXhwYW5kaW5nID0gb3JpZ2luYWxleHBhbmRpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCIgIGNvbXBhcmluZyBcIiArIHN0YWNrW3RvcyAtIDFdICsgXCIgdG86IFwiICsgc3RhY2tbdG9zIC0gMl0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnRyYWN0KCk7XG4gICAgICAgIHAxID0gcG9wKCk7XG4gICAgICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IocDEpKSB7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImJpbmRpbmcgTUVUQUEgdG8gXCIgKyBnZXRfYmluZGluZyhzeW1ib2woTUVUQUEpKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImJpbmRpbmcgTUVUQUIgdG8gXCIgKyBnZXRfYmluZGluZyhzeW1ib2woTUVUQUIpKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImJpbmRpbmcgTUVUQVggdG8gXCIgKyBnZXRfYmluZGluZyhzeW1ib2woTUVUQVgpKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbXBhcmluZyBcIiArIHAzICsgXCIgdG86IFwiICsgcDUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gMTsgLy8geWVzXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7IC8vIG5vXG4gIH07XG5cbiAgLy8gVHJhbnNwb3NlIHRlbnNvciBpbmRpY2VzXG4gIEV2YWxfdHJhbnNwb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaChjYWRyKHAxKSk7XG4gICAgRXZhbCgpO1xuICAgIC8vIGFkZCBkZWZhdWx0IHBhcmFtcyBpZiB0aGV5XG4gICAgLy8gaGF2ZSBub3QgYmVlbiBwYXNzZWRcbiAgICBpZiAoY2RkcihwMSkgPT09IHN5bWJvbChOSUwpKSB7XG4gICAgICBwdXNoX2ludGVnZXIoMSk7XG4gICAgICBwdXNoX2ludGVnZXIoMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2goY2FkZHIocDEpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIHB1c2goY2FkZGRyKHAxKSk7XG4gICAgICBFdmFsKCk7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc3Bvc2UoKTtcbiAgfTtcblxuICB0cmFuc3Bvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYWNjdW11bGF0b3IsIGFpLCBhbiwgYiwgZWFjaEVudHJ5LCBpLCBpbm5lclRyYW5zcFN3aXRjaDEsIGlubmVyVHJhbnNwU3dpdGNoMiwgaiwgaywgbCwgbDEsIG0sIG0xLCBuMSwgbmRpbSwgbmVsZW0sIG8xLCBxMSwgcjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlZjYsIHJlZjcsIHJlZjgsIHMxLCB0O1xuICAgIGkgPSAwO1xuICAgIGogPSAwO1xuICAgIGsgPSAwO1xuICAgIGwgPSAwO1xuICAgIG0gPSAwO1xuICAgIG5kaW0gPSAwO1xuICAgIG5lbGVtID0gMDtcbiAgICB0ID0gMDtcbiAgICBhaSA9IFtdO1xuICAgIGFuID0gW107XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gTUFYRElNOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBhaVtpXSA9IDA7XG4gICAgICBhbltpXSA9IDA7XG4gICAgfVxuICAgIC8vVSAqKmEsICoqYlxuICAgIHNhdmUoKTtcbiAgICAvLyBieSBkZWZhdWx0IHAzIGlzIDIgYW5kIHAyIGlzIDFcbiAgICBwMyA9IHBvcCgpOyAvLyBpbmRleCB0byBiZSB0cmFuc3Bvc2VkXG4gICAgcDIgPSBwb3AoKTsgLy8gb3RoZXIgaW5kZXggdG8gYmUgdHJhbnNwb3NlZFxuICAgIHAxID0gcG9wKCk7IC8vIHdoYXQgbmVlZHMgdG8gYmUgdHJhbnNwb3NlZFxuICAgIFxuICAgIC8vIGEgdHJhbnNwb3NpdGlvbiBqdXN0IGdvZXMgYXdheSB3aGVuXG4gICAgLy8gYXBwbGllZCB0byBhIHNjYWxhclxuICAgIGlmIChpc051bWVyaWNBdG9tKHAxKSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHRyYW5zcG9zaXRpb24gZ29lcyBhd2F5IGZvciBpZGVudGl0eSBtYXRyaXhcbiAgICBpZiAoKGlzcGx1c29uZShwMikgJiYgaXNwbHVzdHdvKHAzKSkgfHwgKGlzcGx1c29uZShwMykgJiYgaXNwbHVzdHdvKHAyKSkpIHtcbiAgICAgIGlmIChpc2lkZW50aXR5bWF0cml4KHAxKSkge1xuICAgICAgICBwdXNoKHAxKTtcbiAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGEgdHJhbnNwb3NpdGlvbiBqdXN0IGdvZXMgYXdheSB3aGVuXG4gICAgLy8gYXBwbGllZCB0byBhbm90aGVyIHRyYW5zcG9zaXRpb24gd2l0aFxuICAgIC8vIHRoZSBzYW1lIGNvbHVtbnMgdG8gYmUgc3dpdGNoZWRcbiAgICBpZiAoaXN0cmFuc3Bvc2UocDEpKSB7XG4gICAgICBpbm5lclRyYW5zcFN3aXRjaDEgPSBjYXIoY2RyKGNkcihwMSkpKTtcbiAgICAgIGlubmVyVHJhbnNwU3dpdGNoMiA9IGNhcihjZHIoY2RyKGNkcihwMSkpKSk7XG4gICAgICBpZiAoKGVxdWFsKGlubmVyVHJhbnNwU3dpdGNoMSwgcDMpICYmIGVxdWFsKGlubmVyVHJhbnNwU3dpdGNoMiwgcDIpKSB8fCAoZXF1YWwoaW5uZXJUcmFuc3BTd2l0Y2gyLCBwMykgJiYgZXF1YWwoaW5uZXJUcmFuc3BTd2l0Y2gxLCBwMikpIHx8ICgoZXF1YWwoaW5uZXJUcmFuc3BTd2l0Y2gxLCBzeW1ib2woTklMKSkgJiYgZXF1YWwoaW5uZXJUcmFuc3BTd2l0Y2gyLCBzeW1ib2woTklMKSkpICYmICgoaXNwbHVzb25lKHAzKSAmJiBpc3BsdXN0d28ocDIpKSB8fCAoaXNwbHVzb25lKHAyKSAmJiBpc3BsdXN0d28ocDMpKSkpKSB7XG4gICAgICAgIHB1c2goY2FyKGNkcihwMSkpKTtcbiAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGlmIG9wZXJhbmQgaXMgYSBzdW0gdGhlbiBkaXN0cmlidXRlXG4gICAgLy8gKGlmIHdlIGFyZSBpbiBleHBhbmRpbmcgbW9kZSlcbiAgICBpZiAoZXhwYW5kaW5nICYmIGlzYWRkKHAxKSkge1xuICAgICAgcDEgPSBjZHIocDEpO1xuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgIC8vIGFkZCB0aGUgZGltZW5zaW9ucyB0byBzd2l0Y2ggYnV0IG9ubHkgaWZcbiAgICAgICAgLy8gdGhleSBhcmUgbm90IHRoZSBkZWZhdWx0IG9uZXMuXG4gICAgICAgIHB1c2gocDIpO1xuICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgdHJhbnNwb3NlKCk7XG4gICAgICAgIGFkZCgpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGlmIG9wZXJhbmQgaXMgYSBtdWx0aXBsaWNhdGlvbiB0aGVuIGRpc3RyaWJ1dGVcbiAgICAvLyAoaWYgd2UgYXJlIGluIGV4cGFuZGluZyBtb2RlKVxuICAgIGlmIChleHBhbmRpbmcgJiYgaXNtdWx0aXBseShwMSkpIHtcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIHB1c2gob25lKTtcbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgIC8vIGFkZCB0aGUgZGltZW5zaW9ucyB0byBzd2l0Y2ggYnV0IG9ubHkgaWZcbiAgICAgICAgLy8gdGhleSBhcmUgbm90IHRoZSBkZWZhdWx0IG9uZXMuXG4gICAgICAgIHB1c2gocDIpO1xuICAgICAgICBwdXNoKHAzKTtcbiAgICAgICAgdHJhbnNwb3NlKCk7XG4gICAgICAgIG11bHRpcGx5KCk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZGlzdHJpYnV0ZSB0aGUgdHJhbnNwb3NlIG9mIGEgZG90XG4gICAgLy8gaWYgaW4gZXhwYW5kaW5nIG1vZGVcbiAgICAvLyBub3RlIHRoYXQgdGhlIGRpc3RyaWJ1dGlvbiBoYXBwZW5zXG4gICAgLy8gaW4gcmV2ZXJzZSBhcyBwZXIgdHJhbnBvc2UgcnVsZXMuXG4gICAgLy8gVGhlIGRvdCBvcGVyYXRvciBpcyBub3RcbiAgICAvLyBjb21tdXRhdGl2ZSwgc28sIGl0IG1hdHRlcnMuXG4gICAgaWYgKGV4cGFuZGluZyAmJiBpc2lubmVyb3Jkb3QocDEpKSB7XG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICBhY2N1bXVsYXRvciA9IFtdO1xuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaChbY2FyKHAxKSwgcDIsIHAzXSk7XG4gICAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIH1cbiAgICAgIGZvciAoZWFjaEVudHJ5ID0gbTEgPSByZWYzID0gYWNjdW11bGF0b3IubGVuZ3RoIC0gMTsgKHJlZjMgPD0gMCA/IG0xIDw9IDAgOiBtMSA+PSAwKTsgZWFjaEVudHJ5ID0gcmVmMyA8PSAwID8gKyttMSA6IC0tbTEpIHtcbiAgICAgICAgcHVzaChhY2N1bXVsYXRvcltlYWNoRW50cnldWzBdKTtcbiAgICAgICAgcHVzaChhY2N1bXVsYXRvcltlYWNoRW50cnldWzFdKTtcbiAgICAgICAgcHVzaChhY2N1bXVsYXRvcltlYWNoRW50cnldWzJdKTtcbiAgICAgICAgdHJhbnNwb3NlKCk7XG4gICAgICAgIGlmIChlYWNoRW50cnkgIT09IGFjY3VtdWxhdG9yLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBpbm5lcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaXN0ZW5zb3IocDEpKSB7XG4gICAgICBpZiAoIWlzWmVyb0F0b21PclRlbnNvcihwMSkpIHtcbiAgICAgICAgLy9zdG9wKFwidHJhbnNwb3NlOiB0ZW5zb3IgZXhwZWN0ZWQsIDFzdCBhcmcgaXMgbm90IGEgdGVuc29yXCIpXG4gICAgICAgIHB1c2hfc3ltYm9sKFRSQU5TUE9TRSk7XG4gICAgICAgIHB1c2gocDEpO1xuICAgICAgICBpZiAoKCFpc3BsdXNvbmUocDIpIHx8ICFpc3BsdXN0d28ocDMpKSAmJiAoIWlzcGx1c29uZShwMykgfHwgIWlzcGx1c3R3byhwMikpKSB7XG4gICAgICAgICAgcHVzaChwMik7XG4gICAgICAgICAgcHVzaChwMyk7XG4gICAgICAgICAgbGlzdCg0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaXN0KDIpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcHVzaCh6ZXJvKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbmRpbSA9IHAxLnRlbnNvci5uZGltO1xuICAgIG5lbGVtID0gcDEudGVuc29yLm5lbGVtO1xuICAgIC8vIGlzIGl0IGEgdmVjdG9yP1xuICAgIC8vIHNvIGhlcmUgaXQncyBzb21ldGhpbmcgY3VyaW91cyAtIG5vdGUgaG93IHZlY3RvcnMgYXJlXG4gICAgLy8gbm90IHJlYWxseSBzcGVjaWFsIHR3by1kaW1lbnNpb25hbCBtYXRyaWNlcywgYnV0IHJhdGhlclxuICAgIC8vIDEtZGltZW5zaW9uIG9iamVjdHMgKGxpa2UgdGVuc29ycyBjYW4gYmUpLiBTbyBzaW5jZVxuICAgIC8vIHRoZXkgaGF2ZSBvbmUgZGltZW5zaW9uLCB0cmFuc3Bvc2l0aW9uIGhhcyBubyBlZmZlY3QuXG4gICAgLy8gKGFzIG9wcG9zZWQgYXMgaWYgdGhleSB3ZXJlIHNwZWNpYWwgdHdvLWRpbWVuc2lvbmFsXG4gICAgLy8gbWF0cmljZXMpXG4gICAgLy8gc2VlIGFsc28gUmFuIFBhbiwgVGVuc29yIFRyYW5zcG9zZSBhbmQgSXRzIFByb3BlcnRpZXMuIENvUlIgYWJzLzE0MTEuMTUwMyAoMjAxNClcbiAgICBpZiAobmRpbSA9PT0gMSkge1xuICAgICAgcHVzaChwMSk7XG4gICAgICByZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHB1c2gocDIpO1xuICAgIGwgPSBwb3BfaW50ZWdlcigpO1xuICAgIHB1c2gocDMpO1xuICAgIG0gPSBwb3BfaW50ZWdlcigpO1xuICAgIGlmIChsIDwgMSB8fCBsID4gbmRpbSB8fCBtIDwgMSB8fCBtID4gbmRpbSkge1xuICAgICAgc3RvcChcInRyYW5zcG9zZTogaW5kZXggb3V0IG9mIHJhbmdlXCIpO1xuICAgIH1cbiAgICBsLS07XG4gICAgbS0tO1xuICAgIHAyID0gYWxsb2NfdGVuc29yKG5lbGVtKTtcbiAgICBwMi50ZW5zb3IubmRpbSA9IG5kaW07XG4gICAgZm9yIChpID0gbjEgPSAwLCByZWY0ID0gbmRpbTsgKDAgPD0gcmVmNCA/IG4xIDwgcmVmNCA6IG4xID4gcmVmNCk7IGkgPSAwIDw9IHJlZjQgPyArK24xIDogLS1uMSkge1xuICAgICAgcDIudGVuc29yLmRpbVtpXSA9IHAxLnRlbnNvci5kaW1baV07XG4gICAgfVxuICAgIHAyLnRlbnNvci5kaW1bbF0gPSBwMS50ZW5zb3IuZGltW21dO1xuICAgIHAyLnRlbnNvci5kaW1bbV0gPSBwMS50ZW5zb3IuZGltW2xdO1xuICAgIGEgPSBwMS50ZW5zb3IuZWxlbTtcbiAgICBiID0gcDIudGVuc29yLmVsZW07XG4vLyBpbml0IHRlbnNvciBpbmRleFxuICAgIGZvciAoaSA9IG8xID0gMCwgcmVmNSA9IG5kaW07ICgwIDw9IHJlZjUgPyBvMSA8IHJlZjUgOiBvMSA+IHJlZjUpOyBpID0gMCA8PSByZWY1ID8gKytvMSA6IC0tbzEpIHtcbiAgICAgIGFpW2ldID0gMDtcbiAgICAgIGFuW2ldID0gcDEudGVuc29yLmRpbVtpXTtcbiAgICB9XG4vLyBjb3B5IGNvbXBvbmVudHMgZnJvbSBhIHRvIGJcbiAgICBmb3IgKGkgPSBxMSA9IDAsIHJlZjYgPSBuZWxlbTsgKDAgPD0gcmVmNiA/IHExIDwgcmVmNiA6IHExID4gcmVmNik7IGkgPSAwIDw9IHJlZjYgPyArK3ExIDogLS1xMSkge1xuICAgICAgLy8gc3dhcCBpbmRpY2VzIGwgYW5kIG1cbiAgICAgIHQgPSBhaVtsXTtcbiAgICAgIGFpW2xdID0gYWlbbV07XG4gICAgICBhaVttXSA9IHQ7XG4gICAgICB0ID0gYW5bbF07XG4gICAgICBhbltsXSA9IGFuW21dO1xuICAgICAgYW5bbV0gPSB0O1xuICAgICAgayA9IDA7XG4gICAgICBmb3IgKGogPSByMSA9IDAsIHJlZjcgPSBuZGltOyAoMCA8PSByZWY3ID8gcjEgPCByZWY3IDogcjEgPiByZWY3KTsgaiA9IDAgPD0gcmVmNyA/ICsrcjEgOiAtLXIxKSB7XG4gICAgICAgIGsgPSAoayAqIGFuW2pdKSArIGFpW2pdO1xuICAgICAgfVxuICAgICAgLy8gc3dhcCBpbmRpY2VzIGJhY2tcbiAgICAgIHQgPSBhaVtsXTtcbiAgICAgIGFpW2xdID0gYWlbbV07XG4gICAgICBhaVttXSA9IHQ7XG4gICAgICB0ID0gYW5bbF07XG4gICAgICBhbltsXSA9IGFuW21dO1xuICAgICAgYW5bbV0gPSB0O1xuICAgICAgYltrXSA9IGFbaV07XG4vLyBpbmNyZW1lbnQgdGVuc29yIGluZGV4XG5cbiAgICAgIC8vIFN1cHBvc2UgdGhlIHRlbnNvciBkaW1lbnNpb25zIGFyZSAyIGFuZCAzLlxuLy8gVGhlbiB0aGUgdGVuc29yIGluZGV4IGFpIGluY3JlbWVudHMgYXMgZm9sbG93czpcbi8vIDAwIC0+IDAxXG4vLyAwMSAtPiAwMlxuLy8gMDIgLT4gMTBcbi8vIDEwIC0+IDExXG4vLyAxMSAtPiAxMlxuLy8gMTIgLT4gMDBcbiAgICAgIGZvciAoaiA9IHMxID0gcmVmOCA9IG5kaW0gLSAxOyAocmVmOCA8PSAwID8gczEgPD0gMCA6IHMxID49IDApOyBqID0gcmVmOCA8PSAwID8gKytzMSA6IC0tczEpIHtcbiAgICAgICAgaWYgKCsrYWlbal0gPCBhbltqXSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGFpW2pdID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgcHVzaChwMik7XG4gICAgcmV0dXJuIHJlc3RvcmUoKTtcbiAgfTtcblxuICAvLyBFdmFsdWF0ZSBhIHVzZXIgZGVmaW5lZCBmdW5jdGlvblxuXG4gIC8vZGVmaW5lIEYgcDMgIyBGIGlzIHRoZSBmdW5jdGlvbiBib2R5XG4gIC8vZGVmaW5lIEEgcDQgIyBBIGlzIHRoZSBmb3JtYWwgYXJndW1lbnQgbGlzdFxuICAvL2RlZmluZSBCIHA1ICMgQiBpcyB0aGUgY2FsbGluZyBhcmd1bWVudCBsaXN0XG4gIC8vZGVmaW5lIFMgcDYgIyBTIGlzIHRoZSBhcmd1bWVudCBzdWJzdGl0dXRpb24gbGlzdFxuXG4gIC8vIHdlIGdvdCBoZXJlIGJlY2F1c2UgdGhlcmUgd2FzIGEgZnVuY3Rpb24gaW52b2NhdGlvbiBhbmRcbiAgLy8gaXQncyBub3QgYmVlbiBwYXJzZWQgKGFuZCBjb25zZXF1ZW50bHkgdGFnZ2VkKSBhcyBhbnlcbiAgLy8gc3lzdGVtIGZ1bmN0aW9uLlxuICAvLyBTbyB3ZSBhcmUgZGVhbGluZyB3aXRoIGFub3RoZXIgZnVuY3Rpb24uXG4gIC8vIFRoZSBmdW5jdGlvbiBjb3VsZCBiZSBhY3R1YWxseSBkZWZpbmVkLCBvciBub3QgeWV0LFxuICAvLyBzbyB3ZSdsbCBkZWFsIHdpdGggYm90aCBjYXNlcy5cbiAgLyogZCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBUYWdzXG4gIC0tLS1cbiAgc2NyaXB0aW5nLCBKUywgaW50ZXJuYWwsIHRyZWVub2RlLCBnZW5lcmFsIGNvbmNlcHRcblxuICBQYXJhbWV0ZXJzXG4gIC0tLS0tLS0tLS1cbiAgZix4XG5cbiAgR2VuZXJhbCBkZXNjcmlwdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFJldHVybnMgdGhlIHBhcnRpYWwgZGVyaXZhdGl2ZSBvZiBmIHdpdGggcmVzcGVjdCB0byB4LiB4IGNhbiBiZSBhIHZlY3RvciBlLmcuIFt4LHldLlxuXG4gICovXG4gIEV2YWxfdXNlcl9mdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib2R5QW5kRm9ybWFsQXJndW1lbnRzLCBoO1xuICAgIC8vIFVzZSBcImRlcml2YXRpdmVcIiBpbnN0ZWFkIG9mIFwiZFwiIGlmIHRoZXJlIGlzIG5vIHVzZXIgZnVuY3Rpb24gXCJkXCJcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRXZhbF91c2VyX2Z1bmN0aW9uIGV2YWx1YXRpbmc6IFwiICsgY2FyKHAxKSk7XG4gICAgfVxuICAgIGlmIChjYXIocDEpID09PSBzeW1ib2woU1lNQk9MX0QpICYmIGdldF9iaW5kaW5nKHN5bWJvbChTWU1CT0xfRCkpID09PSBzeW1ib2woU1lNQk9MX0QpKSB7XG4gICAgICBFdmFsX2Rlcml2YXRpdmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbm9ybWFsbHkgY2FyKHAxKSBpcyBhIHN5bWJvbCB3aXRoIHRoZSBmdW5jdGlvbiBuYW1lXG4gICAgLy8gYnV0IGl0IGNvdWxkIGJlIHNvbWV0aGluZyB0aGF0IGhhcyB0byBiZVxuICAgIC8vIGV2YWx1YXRlZCB0byBnZXQgdG8gdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24gaW5zdGVhZFxuICAgIC8vIChlLmcuIHRoZSBmdW5jdGlvbiBpcyBhbiBlbGVtZW50IG9mIGFuIGFycmF5KVxuICAgIC8vIHNvIHdlIGRvIGFuIGV2YWwgdG8gc29ydCBpdCBhbGwgb3V0LiBcbiAgICBwdXNoKGNhcihwMSkpO1xuICAgIEV2YWwoKTtcbiAgICAvLyB3ZSBleHBlY3QgdG8gZmluZCBlaXRoZXIgdGhlIGJvZHkgYW5kXG4gICAgLy8gZm9ybXVsYSBhcmd1bWVudHMsIE9SLCBpZiB0aGUgZnVuY3Rpb25cbiAgICAvLyBoYXMgbm90IGJlZW4gZGVmaW5lZCB5ZXQsIHRoZW4gdGhlXG4gICAgLy8gZnVuY3Rpb24gd2lsbCBqdXN0IGNvbnRhaW4gaXRzIG93biBuYW1lLCBhc1xuICAgIC8vIGFsbCB1bmRlZmluZWQgdmFyaWFibGVzIGRvLlxuICAgIGJvZHlBbmRGb3JtYWxBcmd1bWVudHMgPSBwb3AoKTtcbiAgICBpZiAoaXNOdW1lcmljQXRvbShib2R5QW5kRm9ybWFsQXJndW1lbnRzKSkge1xuICAgICAgc3RvcChcImV4cGVjdGVkIGZ1bmN0aW9uIGludm9jYXRpb24sIGZvdW5kIG11bHRpcGxpY2F0aW9uIGluc3RlYWQuIFVzZSAnKicgc3ltYm9sIGV4cGxpY2l0bHkgZm9yIG11bHRpcGxpY2F0aW9uLlwiKTtcbiAgICB9IGVsc2UgaWYgKGlzdGVuc29yKGJvZHlBbmRGb3JtYWxBcmd1bWVudHMpKSB7XG4gICAgICBzdG9wKFwiZXhwZWN0ZWQgZnVuY3Rpb24gaW52b2NhdGlvbiwgZm91bmQgdGVuc29yIHByb2R1Y3QgaW5zdGVhZC4gVXNlICdkb3QvaW5uZXInIGV4cGxpY2l0bHkuXCIpO1xuICAgIH0gZWxzZSBpZiAoaXNzdHIoYm9keUFuZEZvcm1hbEFyZ3VtZW50cykpIHtcbiAgICAgIHN0b3AoXCJleHBlY3RlZCBmdW5jdGlvbiwgZm91bmQgc3RyaW5nIGluc3RlYWQuXCIpO1xuICAgIH1cbiAgICBwMyA9IGNhcihjZHIoYm9keUFuZEZvcm1hbEFyZ3VtZW50cykpOyAvLyBwMyBpcyBmdW5jdGlvbiBib2R5IEZcbiAgICAvLyBwNCBpcyB0aGUgZm9ybWFsIGFyZ3VtZW50IGxpc3RcbiAgICAvLyB0aGF0IGlzIGFsc28gY29udGFpbmVkIGhlcmUgaW4gdGhlIEZVTkNUSU9OIG5vZGUgXG4gICAgcDQgPSBjYXIoY2RyKGNkcihib2R5QW5kRm9ybWFsQXJndW1lbnRzKSkpO1xuICAgIHA1ID0gY2RyKHAxKTtcbiAgICAvLyBuZXh0IGNoZWNrIGlzIHdoZXRoZXIgZXZhbHVhdGlvbiBkaWQgbm90aGluZywgc28gdGhlIGZ1bmN0aW9uIGlzIHVuZGVmaW5lZFxuICAgIGlmICgoY2FyKGJvZHlBbmRGb3JtYWxBcmd1bWVudHMpICE9PSBzeW1ib2woRlVOQ1RJT04pKSB8fCAoYm9keUFuZEZvcm1hbEFyZ3VtZW50cyA9PT0gY2FyKHAxKSkpIHsgLy8gcDMgaXMgRlxuICAgICAgLy8gbGVhdmUgZXZlcnl0aGluZyBhcyBpdCB3YXMgYW5kIHJldHVyblxuICAgICAgaCA9IHRvcztcbiAgICAgIHB1c2goYm9keUFuZEZvcm1hbEFyZ3VtZW50cyk7XG4gICAgICBwMSA9IHA1O1xuICAgICAgd2hpbGUgKGlzY29ucyhwMSkpIHtcbiAgICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgICAgRXZhbCgpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgICBsaXN0KHRvcyAtIGgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgdGhlIGFyZ3VtZW50IHN1YnN0aXR1dGlvbiBsaXN0IHA2KFMpXG4gICAgcDEgPSBwNDtcbiAgICBwMiA9IHA1O1xuICAgIGggPSB0b3M7XG4gICAgd2hpbGUgKGlzY29ucyhwMSkgJiYgaXNjb25zKHAyKSkge1xuICAgICAgcHVzaChjYXIocDEpKTtcbiAgICAgIHB1c2goY2FyKHAyKSk7XG4gICAgICAvLyB3aHkgZXhwbGljaXRseSBFdmFsIHRoZSBwYXJhbWV0ZXJzIHdoZW5cbiAgICAgIC8vIHRoZSBib2R5IG9mIHRoZSBmdW5jdGlvbiBpc1xuICAgICAgLy8gZXZhbGxlZCBhbnl3YXlzPyBDb21tZW50aW5nIGl0IG91dC4gQWxsIHRlc3RzIHBhc3MuLi5cbiAgICAgIC8vRXZhbCgpXG4gICAgICBwMSA9IGNkcihwMSk7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgfVxuICAgIGxpc3QodG9zIC0gaCk7XG4gICAgcDYgPSBwb3AoKTtcbiAgICBwdXNoKHAzKTtcbiAgICBpZiAoaXNjb25zKHA2KSkgeyAvLyBwNiBpcyBTXG4gICAgICBwdXNoKHA2KTtcbiAgICAgIHJld3JpdGVfYXJncygpO1xuICAgIH1cbiAgICAvL2NvbnNvbGUubG9nIFwicmV3cml0dGVuIGJvZHk6IFwiICsgc3RhY2tbdG9zLTFdXG4gICAgcmV0dXJuIEV2YWwoKTtcbiAgfTtcblxuICAvLyBSZXdyaXRlIGJ5IGV4cGFuZGluZyBzeW1ib2xzIHRoYXQgY29udGFpbiBhcmdzXG4gIHJld3JpdGVfYXJncyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoLCBuO1xuICAgIG4gPSAwO1xuICAgIHNhdmUoKTtcbiAgICAvLyBzdWJzdC4gbGlzdCB3aGljaCBpcyBhIGxpc3RcbiAgICAvLyB3aGVyZSBlYWNoIGNvbnNlY3V0aXZlIHBhaXJcbiAgICAvLyBpcyB3aGF0IG5lZWRzIHRvIGJlIHN1YnN0aXR1dGVkIGFuZCB3aXRoIHdoYXRcbiAgICBwMiA9IHBvcCgpO1xuICAgIHAxID0gcG9wKCk7XG4gICAgaWYgKGlzdGVuc29yKHAxKSkge1xuICAgICAgbiA9IHJld3JpdGVfYXJnc190ZW5zb3IoKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICBpZiAoaXNjb25zKHAxKSkge1xuICAgICAgaCA9IHRvcztcbiAgICAgIGlmIChjYXIocDEpID09PSBjYXIocDIpKSB7XG4gICAgICAgIC8vIHJld3JpdGUgYSBmdW5jdGlvbiBpblxuICAgICAgICAvLyB0aGUgYm9keSB3aXRoIHRoZSBvbmVcbiAgICAgICAgLy8gcGFzc2VkIGZyb20gdGhlIHBhcmFtYXRlcnNcbiAgICAgICAgcHVzaF9zeW1ib2woRVZBTCk7XG4gICAgICAgIHB1c2goY2FyKGNkcihwMikpKTtcbiAgICAgICAgbGlzdCgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIG1hdGNoXG4gICAgICAgIC8vIHRoZW4gbm8gc3Vic3RpdHV0aW9uIG5lY2Vzc2FyeVxuICAgICAgICBwdXNoKGNhcihwMSkpO1xuICAgICAgfVxuICAgICAgLy8gY29udGludWUgcmVjdXJzaXZlbHkgdG9cbiAgICAgIC8vIHJld3JpdGUgdGhlIHJlc3Qgb2YgdGhlIGJvZHlcbiAgICAgIHAxID0gY2RyKHAxKTtcbiAgICAgIHdoaWxlIChpc2NvbnMocDEpKSB7XG4gICAgICAgIHB1c2goY2FyKHAxKSk7XG4gICAgICAgIHB1c2gocDIpO1xuICAgICAgICBuICs9IHJld3JpdGVfYXJncygpO1xuICAgICAgICBwMSA9IGNkcihwMSk7XG4gICAgICB9XG4gICAgICBsaXN0KHRvcyAtIGgpO1xuICAgICAgcmVzdG9yZSgpO1xuICAgICAgcmV0dXJuIG47XG4gICAgfVxuICAgIGlmICghaXNzeW1ib2wocDEpKSB7XG4gICAgICBwdXNoKHAxKTtcbiAgICAgIHJlc3RvcmUoKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvLyBIZXJlIHdlIGFyZSBpbiBhIHN5bWJvbCBjYXNlXG4gICAgLy8gc28gd2UgbmVlZCB0byBzdWJzdGl0dXRlXG5cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIGRpcmVjdCBtYXRjaFxuICAgIC8vIG9mIHN5bWJvbHMgcmlnaHQgYXdheVxuICAgIHAzID0gcDI7XG4gICAgd2hpbGUgKGlzY29ucyhwMykpIHtcbiAgICAgIGlmIChwMSA9PT0gY2FyKHAzKSkge1xuICAgICAgICBwdXNoKGNhZHIocDMpKTtcbiAgICAgICAgcmVzdG9yZSgpO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHAzID0gY2RkcihwMyk7XG4gICAgfVxuICAgIC8vIEdldCB0aGUgc3ltYm9sJ3MgY29udGVudCwgaWYgX3RoYXRfXG4gICAgLy8gbWF0Y2hlcyB0aGVuIGRvIHRoZSBzdWJzdGl0dXRpb25cbiAgICBwMyA9IGdldF9iaW5kaW5nKHAxKTtcbiAgICBwdXNoKHAzKTtcbiAgICBpZiAocDEgIT09IHAzKSB7XG4gICAgICBwdXNoKHAyKTtcbiAgICAgIG4gPSByZXdyaXRlX2FyZ3MoKTtcbiAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIHBvcCgpO1xuICAgICAgICBwdXNoKHAxKTsgLy8gcmVzdG9yZSBpZiBub3QgcmV3cml0dGVuIHdpdGggYXJnXG4gICAgICB9XG4gICAgfVxuICAgIHJlc3RvcmUoKTtcbiAgICByZXR1cm4gbjtcbiAgfTtcblxuICByZXdyaXRlX2FyZ3NfdGVuc29yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGwxLCBuLCByZWYyO1xuICAgIG4gPSAwO1xuICAgIGkgPSAwO1xuICAgIHB1c2gocDEpO1xuICAgIGNvcHlfdGVuc29yKCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwMS50ZW5zb3IubmVsZW07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHB1c2gocDEudGVuc29yLmVsZW1baV0pO1xuICAgICAgcHVzaChwMik7XG4gICAgICBuICs9IHJld3JpdGVfYXJncygpO1xuICAgICAgcDEudGVuc29yLmVsZW1baV0gPSBwb3AoKTtcbiAgICB9XG4gICAgY2hlY2tfdGVuc29yX2RpbWVuc2lvbnMocDEpO1xuICAgIHB1c2gocDEpO1xuICAgIHJldHVybiBuO1xuICB9O1xuXG4gIEV2YWxfemVybyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBrLCBsMSwgbSwgbTEsIG4sIHJlZjIsIHJlZjM7XG4gICAgaSA9IDA7XG4gICAgayA9IFtdO1xuICAgIG0gPSAwO1xuICAgIG4gPSAwO1xuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMiA9IE1BWERJTTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAga1tpXSA9IDA7XG4gICAgfVxuICAgIG0gPSAxO1xuICAgIG4gPSAwO1xuICAgIHAyID0gY2RyKHAxKTtcbiAgICB3aGlsZSAoaXNjb25zKHAyKSkge1xuICAgICAgcHVzaChjYXIocDIpKTtcbiAgICAgIEV2YWwoKTtcbiAgICAgIGkgPSBwb3BfaW50ZWdlcigpO1xuICAgICAgaWYgKGkgPCAxIHx8IGlzTmFOKGkpKSB7XG4gICAgICAgIC8vIGlmIHRoZSBpbnB1dCBpcyBub25zZW5zaWNhbFxuICAgICAgICAvLyBqdXN0IHJldHVybiAwXG4gICAgICAgIHB1c2goemVybyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG0gKj0gaTtcbiAgICAgIGtbbisrXSA9IGk7XG4gICAgICBwMiA9IGNkcihwMik7XG4gICAgfVxuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBwdXNoKHplcm8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwMSA9IGFsbG9jX3RlbnNvcihtKTtcbiAgICBwMS50ZW5zb3IubmRpbSA9IG47XG4gICAgZm9yIChpID0gbTEgPSAwLCByZWYzID0gbjsgKDAgPD0gcmVmMyA/IG0xIDwgcmVmMyA6IG0xID4gcmVmMyk7IGkgPSAwIDw9IHJlZjMgPyArK20xIDogLS1tMSkge1xuICAgICAgcDEudGVuc29yLmRpbVtpXSA9IGtbaV07XG4gICAgfVxuICAgIHJldHVybiBwdXNoKHAxKTtcbiAgfTtcblxuICBhbGxvY2F0ZWRJZCA9IDA7XG5cbiAgYWxsb2NfdGVuc29yID0gZnVuY3Rpb24obmVsZW0pIHtcbiAgICB2YXIgaSwgbDEsIHAsIHJlZjI7XG4gICAgaSA9IDA7XG4gICAgcCA9IG5ldyBVKCk7XG4gICAgcC5rID0gVEVOU09SO1xuICAgIHAudGVuc29yID0gbmV3IHRlbnNvcigpO1xuICAgIHAudGVuc29yLm5lbGVtID0gbmVsZW07XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gbmVsZW07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHAudGVuc29yLmVsZW1baV0gPSB6ZXJvO1xuICAgIH1cbiAgICBwLnRlbnNvci5hbGxvY2F0ZWRJZCA9IGFsbG9jYXRlZElkO1xuICAgIC8vaWYgYWxsb2NhdGVkSWQgPT0gOVxuICAgIC8vICBkZWJ1Z2dlclxuICAgIGFsbG9jYXRlZElkKys7XG4gICAgY2hlY2tfdGVuc29yX2RpbWVuc2lvbnMocCk7XG4gICAgcmV0dXJuIHA7XG4gIH07XG5cbiAgLypcbiAgLy8gZ2FyYmFnZSBjb2xsZWN0b3JcblxuICB2b2lkXG4gIGdjKHZvaWQpXG4gIHtcbiAgICBpbnQgaSwgalxuICAgIFUgKnBcblxuICAgIC8vIHRhZyBldmVyeXRoaW5nXG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbWNvdW50OyBpKyspIHtcbiAgICAgIHAgPSBtZW1baV1cbiAgICAgIGZvciAoaiA9IDA7IGogPCBOOyBqKyspXG4gICAgICAgIHBbal0udGFnID0gMVxuICAgIH1cblxuICAgIC8vIHVudGFnIHdoYXQncyB1c2VkXG5cbiAgICB1bnRhZyhwMClcbiAgICB1bnRhZyhwMSlcbiAgICB1bnRhZyhwMilcbiAgICB1bnRhZyhwMylcbiAgICB1bnRhZyhwNClcbiAgICB1bnRhZyhwNSlcbiAgICB1bnRhZyhwNilcbiAgICB1bnRhZyhwNylcbiAgICB1bnRhZyhwOClcbiAgICB1bnRhZyhwOSlcblxuICAgIHVudGFnKG9uZSlcbiAgICB1bnRhZyh6ZXJvKVxuICAgIHVudGFnKGltYWdpbmFyeXVuaXQpXG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgTlNZTTsgaSsrKSB7XG4gICAgICB1bnRhZyhiaW5kaW5nW2ldKVxuICAgICAgdW50YWcoYXJnbGlzdFtpXSlcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG9zOyBpKyspXG4gICAgICB1bnRhZyhzdGFja1tpXSlcblxuICAgIGZvciAoaSA9IChpbnQpIChmcmFtZSAtIHN0YWNrKTsgaSA8IFRPUzsgaSsrKVxuICAgICAgdW50YWcoc3RhY2tbaV0pXG5cbiAgICAvLyBjb2xsZWN0IGV2ZXJ5dGhpbmcgdGhhdCdzIHN0aWxsIHRhZ2dlZFxuXG4gICAgZnJlZV9jb3VudCA9IDBcblxuICAgIGZvciAoaSA9IDA7IGkgPCBtY291bnQ7IGkrKykge1xuICAgICAgcCA9IG1lbVtpXVxuICAgICAgZm9yIChqID0gMDsgaiA8IE47IGorKykge1xuICAgICAgICBpZiAocFtqXS50YWcgPT0gMClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICAvLyBzdGlsbCB0YWdnZWQgc28gaXQncyB1bnVzZWQsIHB1dCBvbiBmcmVlIGxpc3RcbiAgICAgICAgc3dpdGNoIChwW2pdLmspIHtcbiAgICAgICAgY2FzZSBURU5TT1I6XG4gICAgICAgICAgZnJlZShwW2pdLnUudGVuc29yKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgU1RSOlxuICAgICAgICAgIGZyZWUocFtqXS51LnN0cilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIE5VTTpcbiAgICAgICAgICBtZnJlZShwW2pdLnUucS5hKVxuICAgICAgICAgIG1mcmVlKHBbal0udS5xLmIpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBwW2pdLmsgPSBDT05TOyAvLyBzbyBubyBkb3VibGUgZnJlZSBvY2N1cnMgYWJvdmVcbiAgICAgICAgcFtqXS51LmNvbnMuY2RyID0gZnJlZV9saXN0XG4gICAgICAgIGZyZWVfbGlzdCA9IHAgKyBqXG4gICAgICAgIGZyZWVfY291bnQrK1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZvaWRcbiAgdW50YWcoVSAqcClcbiAge1xuICAgIGludCBpXG5cbiAgICBpZiAoaXNjb25zKHApKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChwLT50YWcgPT0gMClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgcC0+dGFnID0gMFxuICAgICAgICB1bnRhZyhwLT51LmNvbnMuY2FyKVxuICAgICAgICBwID0gcC0+dS5jb25zLmNkclxuICAgICAgfSB3aGlsZSAoaXNjb25zKHApKVxuICAgICAgdW50YWcocClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChwLT50YWcpIHtcbiAgICAgIHAtPnRhZyA9IDBcbiAgICAgICBpZiAoaXN0ZW5zb3IocCkpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHAtPnUudGVuc29yLT5uZWxlbTsgaSsrKVxuICAgICAgICAgIHVudGFnKHAtPnUudGVuc29yLT5lbGVtW2ldKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGdldCBtZW1vcnkgZm9yIDEwMCwwMDAgYXRvbXNcblxuICB2b2lkXG4gIGFsbG9jX21lbSh2b2lkKVxuICB7XG4gICAgaW50IGlcbiAgICBVICpwXG4gICAgaWYgKG1jb3VudCA9PSBNKVxuICAgICAgcmV0dXJuXG4gICAgcCA9IChVICopIG1hbGxvYyhOICogc2l6ZW9mIChzdHJ1Y3QgVSkpXG4gICAgaWYgKHAgPT0gTlVMTClcbiAgICAgIHJldHVyblxuICAgIG1lbVttY291bnQrK10gPSBwXG4gICAgZm9yIChpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcFtpXS5rID0gQ09OUzsgLy8gc28gbm8gZnJlZSBpbiBnY1xuICAgICAgcFtpXS51LmNvbnMuY2RyID0gcCArIGkgKyAxXG4gICAgfVxuICAgIHBbTiAtIDFdLnUuY29ucy5jZHIgPSBmcmVlX2xpc3RcbiAgICBmcmVlX2xpc3QgPSBwXG4gICAgZnJlZV9jb3VudCArPSBOXG4gIH1cblxuICB2b2lkXG4gIHByaW50X21lbV9pbmZvKHZvaWQpXG4gIHtcbiAgICBjaGFyIGJ1ZlsxMDBdXG5cbiAgICBzcHJpbnRmKGJ1ZiwgXCIlZCBibG9ja3MgKCVkIGJ5dGVzL2Jsb2NrKVxcblwiLCBOICogbWNvdW50LCAoaW50KSBzaXplb2YgKFUpKVxuICAgIHByaW50c3RyKGJ1ZilcblxuICAgIHNwcmludGYoYnVmLCBcIiVkIGZyZWVcXG5cIiwgZnJlZV9jb3VudClcbiAgICBwcmludHN0cihidWYpXG5cbiAgICBzcHJpbnRmKGJ1ZiwgXCIlZCB1c2VkXFxuXCIsIE4gKiBtY291bnQgLSBmcmVlX2NvdW50KVxuICAgIHByaW50c3RyKGJ1ZilcbiAgfVxuICAqL1xuICAvLyByZXR1cm5zIDEgaWYgZXhwciBwIGNvbnRhaW5zIGV4cHIgcSwgb3RoZXJ3ZWlzZSByZXR1cm5zIDBcbiAgRmluZCA9IGZ1bmN0aW9uKHAsIHEpIHtcbiAgICB2YXIgaSwgbDEsIHJlZjI7XG4gICAgaSA9IDA7XG4gICAgaWYgKGVxdWFsKHAsIHEpKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGlzdGVuc29yKHApKSB7XG4gICAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwLnRlbnNvci5uZWxlbTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgICBpZiAoRmluZChwLnRlbnNvci5lbGVtW2ldLCBxKSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgaWYgKEZpbmQoY2FyKHApLCBxKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHAgPSBjZHIocCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIC8vIGZpbmQgc3R1ZmYgbGlrZSAoLTEpXihzb21ldGhpbmcgKGJ1dCBkaXNyZWdhcmRcbiAgLy8gaW1hZ2luYXJ5IHVuaXRzIHdoaWNoIGFyZSBpbiB0aGUgZm9ybSAoLTEpXigxLzIpKVxuICBmaW5kUG9zc2libGVDbG9ja0Zvcm0gPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIGksIGwxLCByZWYyO1xuICAgIGkgPSAwO1xuICAgIGlmIChpc2ltYWdpbmFyeXVuaXQocCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woUE9XRVIpICYmICFpc2ludGVnZXIoY2FkZHIocDEpKSkge1xuICAgICAgaWYgKEZpbmQoY2FkcihwKSwgaW1hZ2luYXJ5dW5pdCkpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyBcImZvdW5kIGleZnJhY3Rpb24gXCIgKyBwXG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woUE9XRVIpICYmIGVxdWFsbihjYWRyKHApLCAtMSkgJiYgIWlzaW50ZWdlcihjYWRkcihwMSkpKSB7XG4gICAgICAvL2NvbnNvbGUubG9nIFwiZm91bmQgLTFeZnJhY3Rpb24gaW4gXCIgKyBwXG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGlzdGVuc29yKHApKSB7XG4gICAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwLnRlbnNvci5uZWxlbTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgICBpZiAoZmluZFBvc3NpYmxlQ2xvY2tGb3JtKHAudGVuc29yLmVsZW1baV0pKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB3aGlsZSAoaXNjb25zKHApKSB7XG4gICAgICBpZiAoZmluZFBvc3NpYmxlQ2xvY2tGb3JtKGNhcihwKSkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICBwID0gY2RyKHApO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICAvLyBmaW5kIHN0dWZmIGxpa2UgKGUpXihpIHNvbWV0aGluZylcbiAgZmluZFBvc3NpYmxlRXhwb25lbnRpYWxGb3JtID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBpLCBsMSwgcmVmMjtcbiAgICBpID0gMDtcbiAgICBpZiAoY2FyKHApID09PSBzeW1ib2woUE9XRVIpICYmIGNhZHIocCkgPT09IHN5bWJvbChFKSkge1xuICAgICAgcmV0dXJuIEZpbmQoY2FkZHIocCksIGltYWdpbmFyeXVuaXQpO1xuICAgIH1cbiAgICBpZiAoaXN0ZW5zb3IocCkpIHtcbiAgICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMiA9IHAudGVuc29yLm5lbGVtOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICAgIGlmIChmaW5kUG9zc2libGVFeHBvbmVudGlhbEZvcm0ocC50ZW5zb3IuZWxlbVtpXSkpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgIGlmIChmaW5kUG9zc2libGVFeHBvbmVudGlhbEZvcm0oY2FyKHApKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHAgPSBjZHIocCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gICQuRmluZCA9IEZpbmQ7XG5cbiAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBsMSwgcmVmMjtcbiAgICAvL2RlYnVnZ2VyXG4gICAgLy9jb25zb2xlLmxvZyBcIkRPSU5HIEFOIElOSVQgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCJcbiAgICBpID0gMDtcbiAgICBmbGFnID0gMDtcbiAgICByZXNldF9hZnRlcl9lcnJvcigpO1xuICAgIGNoYWluT2ZVc2VyU3ltYm9sc05vdEZ1bmN0aW9uc0JlaW5nRXZhbHVhdGVkID0gW107XG4gICAgaWYgKGZsYWcpIHsgLy8gYWxyZWFkeSBpbml0dGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZsYWcgPSAxO1xuLy8gdG90YWwgY2xlYXJvdXQgb2Ygc3ltYm9sIHRhYmxlXG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gTlNZTTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgc3ltdGFiW2ldID0gbmV3IFUoKTtcbiAgICAgIHN5bXRhYltpXS5rID0gU1lNO1xuICAgICAgYmluZGluZ1tpXSA9IHN5bXRhYltpXTtcbiAgICAgIGlzU3ltYm9sUmVjbGFpbWFibGVbaV0gPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZm4oKTtcbiAgfTtcblxuICBkZWZuX3N0ciA9IFtcbiAgICBcInZlcnNpb249XFxcIlwiICsgdmVyc2lvbiArIFwiXFxcIlwiLFxuICAgIFwiZT1leHAoMSlcIixcbiAgICBcImk9c3FydCgtMSlcIixcbiAgICBcImF1dG9leHBhbmQ9MVwiLFxuICAgIFwiYXNzdW1lUmVhbFZhcmlhYmxlcz0xXCIsXG4gICAgXCJ0cmFuZ2U9Wy1waSxwaV1cIixcbiAgICBcInhyYW5nZT1bLTEwLDEwXVwiLFxuICAgIFwieXJhbmdlPVstMTAsMTBdXCIsXG4gICAgXCJsYXN0PTBcIixcbiAgICBcInRyYWNlPTBcIixcbiAgICBcImZvcmNlRml4ZWRQcmludG91dD0xXCIsXG4gICAgXCJtYXhGaXhlZFByaW50b3V0RGlnaXRzPTZcIixcbiAgICBcInByaW50TGVhdmVFQWxvbmU9MVwiLFxuICAgIFwicHJpbnRMZWF2ZVhBbG9uZT0wXCIsXG4gICAgLy8gY3Jvc3MgZGVmaW5pdGlvblxuICAgIFwiY3Jvc3ModSx2KT1bdVsyXSp2WzNdLXVbM10qdlsyXSx1WzNdKnZbMV0tdVsxXSp2WzNdLHVbMV0qdlsyXS11WzJdKnZbMV1dXCIsXG4gICAgLy8gY3VybCBkZWZpbml0aW9uXG4gICAgXCJjdXJsKHYpPVtkKHZbM10seSktZCh2WzJdLHopLGQodlsxXSx6KS1kKHZbM10seCksZCh2WzJdLHgpLWQodlsxXSx5KV1cIixcbiAgICAvLyBkaXYgZGVmaW5pdGlvblxuICAgIFwiZGl2KHYpPWQodlsxXSx4KStkKHZbMl0seSkrZCh2WzNdLHopXCIsXG4gICAgLy8gTm90ZSB0aGF0IHdlIHVzZSB0aGUgbWF0aGVtYXRpY3MgLyBKYXZhc2NyaXB0IC8gTWF0aGVtYXRpY2FcbiAgICAvLyBjb252ZW50aW9uIHRoYXQgXCJsb2dcIiBpcyBpbmRlZWQgdGhlIG5hdHVyYWwgbG9nYXJpdGhtLlxuXG4gICAgLy8gSW4gZW5naW5lZXJpbmcsIGJpb2xvZ3ksIGFzdHJvbm9teSwgXCJsb2dcIiBjYW4gc3RhbmQgaW5zdGVhZFxuICAgIC8vIGZvciB0aGUgXCJjb21tb25cIiBsb2dhcml0aG0gaS5lLiBiYXNlIDEwLiBBbHNvIG5vdGUgdGhhdCBHb29nbGVcbiAgICAvLyBjYWxjdWxhdGlvbnMgdXNlIGxvZyBmb3IgdGhlIGNvbW1vbiBsb2dhcml0aG0uXG4gICAgXCJsbih4KT1sb2coeClcIlxuICBdO1xuXG4gIGRlZm4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVmaW5pdGlvbk9mSW50ZXJlc3QsIGRlZm5faSwgbDEsIG9yaWdpbmFsQ29kZUdlbiwgcmVmMjtcbiAgICBwMCA9IHN5bWJvbChOSUwpO1xuICAgIHAxID0gc3ltYm9sKE5JTCk7XG4gICAgcDIgPSBzeW1ib2woTklMKTtcbiAgICBwMyA9IHN5bWJvbChOSUwpO1xuICAgIHA0ID0gc3ltYm9sKE5JTCk7XG4gICAgcDUgPSBzeW1ib2woTklMKTtcbiAgICBwNiA9IHN5bWJvbChOSUwpO1xuICAgIHA3ID0gc3ltYm9sKE5JTCk7XG4gICAgcDggPSBzeW1ib2woTklMKTtcbiAgICBwOSA9IHN5bWJvbChOSUwpO1xuICAgIHN0ZF9zeW1ib2woXCJhYnNcIiwgQUJTKTtcbiAgICBzdGRfc3ltYm9sKFwiYWRkXCIsIEFERCk7XG4gICAgc3RkX3N5bWJvbChcImFkalwiLCBBREopO1xuICAgIHN0ZF9zeW1ib2woXCJhbmRcIiwgQU5EKTtcbiAgICBzdGRfc3ltYm9sKFwiYXBwcm94cmF0aW9cIiwgQVBQUk9YUkFUSU8pO1xuICAgIHN0ZF9zeW1ib2woXCJhcmNjb3NcIiwgQVJDQ09TKTtcbiAgICBzdGRfc3ltYm9sKFwiYXJjY29zaFwiLCBBUkNDT1NIKTtcbiAgICBzdGRfc3ltYm9sKFwiYXJjc2luXCIsIEFSQ1NJTik7XG4gICAgc3RkX3N5bWJvbChcImFyY3NpbmhcIiwgQVJDU0lOSCk7XG4gICAgc3RkX3N5bWJvbChcImFyY3RhblwiLCBBUkNUQU4pO1xuICAgIHN0ZF9zeW1ib2woXCJhcmN0YW5oXCIsIEFSQ1RBTkgpO1xuICAgIHN0ZF9zeW1ib2woXCJhcmdcIiwgQVJHKTtcbiAgICBzdGRfc3ltYm9sKFwiYXRvbWl6ZVwiLCBBVE9NSVpFKTtcbiAgICBzdGRfc3ltYm9sKFwiYmVzc2VsalwiLCBCRVNTRUxKKTtcbiAgICBzdGRfc3ltYm9sKFwiYmVzc2VseVwiLCBCRVNTRUxZKTtcbiAgICBzdGRfc3ltYm9sKFwiYmluZGluZ1wiLCBCSU5ESU5HKTtcbiAgICBzdGRfc3ltYm9sKFwiYmlub21pYWxcIiwgQklOT01JQUwpO1xuICAgIHN0ZF9zeW1ib2woXCJjZWlsaW5nXCIsIENFSUxJTkcpO1xuICAgIHN0ZF9zeW1ib2woXCJjaGVja1wiLCBDSEVDSyk7XG4gICAgc3RkX3N5bWJvbChcImNob29zZVwiLCBDSE9PU0UpO1xuICAgIHN0ZF9zeW1ib2woXCJjaXJjZXhwXCIsIENJUkNFWFApO1xuICAgIHN0ZF9zeW1ib2woXCJjbGVhclwiLCBDTEVBUik7XG4gICAgc3RkX3N5bWJvbChcImNsZWFyYWxsXCIsIENMRUFSQUxMKTtcbiAgICBzdGRfc3ltYm9sKFwiY2xlYXJwYXR0ZXJuc1wiLCBDTEVBUlBBVFRFUk5TKTtcbiAgICBzdGRfc3ltYm9sKFwiY2xvY2tcIiwgQ0xPQ0spO1xuICAgIHN0ZF9zeW1ib2woXCJjb2VmZlwiLCBDT0VGRik7XG4gICAgc3RkX3N5bWJvbChcImNvZmFjdG9yXCIsIENPRkFDVE9SKTtcbiAgICBzdGRfc3ltYm9sKFwiY29uZGVuc2VcIiwgQ09OREVOU0UpO1xuICAgIHN0ZF9zeW1ib2woXCJjb25qXCIsIENPTkopO1xuICAgIHN0ZF9zeW1ib2woXCJjb250cmFjdFwiLCBDT05UUkFDVCk7XG4gICAgc3RkX3N5bWJvbChcImNvc1wiLCBDT1MpO1xuICAgIHN0ZF9zeW1ib2woXCJjb3NoXCIsIENPU0gpO1xuICAgIHN0ZF9zeW1ib2woXCJkZWNvbXBcIiwgREVDT01QKTtcbiAgICBzdGRfc3ltYm9sKFwiZGVmaW50XCIsIERFRklOVCk7XG4gICAgc3RkX3N5bWJvbChcImRlZ1wiLCBERUdSRUUpO1xuICAgIHN0ZF9zeW1ib2woXCJkZW5vbWluYXRvclwiLCBERU5PTUlOQVRPUik7XG4gICAgc3RkX3N5bWJvbChcImRldFwiLCBERVQpO1xuICAgIHN0ZF9zeW1ib2woXCJkZXJpdmF0aXZlXCIsIERFUklWQVRJVkUpO1xuICAgIHN0ZF9zeW1ib2woXCJkaW1cIiwgRElNKTtcbiAgICBzdGRfc3ltYm9sKFwiZGlyYWNcIiwgRElSQUMpO1xuICAgIHN0ZF9zeW1ib2woXCJkaXZpc29yc1wiLCBESVZJU09SUyk7XG4gICAgc3RkX3N5bWJvbChcImRvXCIsIERPKTtcbiAgICBzdGRfc3ltYm9sKFwiZG90XCIsIERPVCk7XG4gICAgc3RkX3N5bWJvbChcImRyYXdcIiwgRFJBVyk7XG4gICAgc3RkX3N5bWJvbChcImRzb2x2ZVwiLCBEU09MVkUpO1xuICAgIHN0ZF9zeW1ib2woXCJlcmZcIiwgRVJGKTtcbiAgICBzdGRfc3ltYm9sKFwiZXJmY1wiLCBFUkZDKTtcbiAgICBzdGRfc3ltYm9sKFwiZWlnZW5cIiwgRUlHRU4pO1xuICAgIHN0ZF9zeW1ib2woXCJlaWdlbnZhbFwiLCBFSUdFTlZBTCk7XG4gICAgc3RkX3N5bWJvbChcImVpZ2VudmVjXCIsIEVJR0VOVkVDKTtcbiAgICBzdGRfc3ltYm9sKFwiZXZhbFwiLCBFVkFMKTtcbiAgICBzdGRfc3ltYm9sKFwiZXhwXCIsIEVYUCk7XG4gICAgc3RkX3N5bWJvbChcImV4cGFuZFwiLCBFWFBBTkQpO1xuICAgIHN0ZF9zeW1ib2woXCJleHBjb3NcIiwgRVhQQ09TKTtcbiAgICBzdGRfc3ltYm9sKFwiZXhwc2luXCIsIEVYUFNJTik7XG4gICAgc3RkX3N5bWJvbChcImZhY3RvclwiLCBGQUNUT1IpO1xuICAgIHN0ZF9zeW1ib2woXCJmYWN0b3JpYWxcIiwgRkFDVE9SSUFMKTtcbiAgICBzdGRfc3ltYm9sKFwiZmFjdG9ycG9seVwiLCBGQUNUT1JQT0xZKTtcbiAgICBzdGRfc3ltYm9sKFwiZmlsdGVyXCIsIEZJTFRFUik7XG4gICAgc3RkX3N5bWJvbChcImZsb2F0XCIsIEZMT0FURik7XG4gICAgc3RkX3N5bWJvbChcImZsb29yXCIsIEZMT09SKTtcbiAgICBzdGRfc3ltYm9sKFwiZm9yXCIsIEZPUik7XG4gICAgc3RkX3N5bWJvbChcImZ1bmN0aW9uXCIsIEZVTkNUSU9OKTtcbiAgICBzdGRfc3ltYm9sKFwiR2FtbWFcIiwgR0FNTUEpO1xuICAgIHN0ZF9zeW1ib2woXCJnY2RcIiwgR0NEKTtcbiAgICBzdGRfc3ltYm9sKFwiaGVybWl0ZVwiLCBIRVJNSVRFKTtcbiAgICBzdGRfc3ltYm9sKFwiaGlsYmVydFwiLCBISUxCRVJUKTtcbiAgICBzdGRfc3ltYm9sKFwiaW1hZ1wiLCBJTUFHKTtcbiAgICBzdGRfc3ltYm9sKFwiY29tcG9uZW50XCIsIElOREVYKTtcbiAgICBzdGRfc3ltYm9sKFwiaW5uZXJcIiwgSU5ORVIpO1xuICAgIHN0ZF9zeW1ib2woXCJpbnRlZ3JhbFwiLCBJTlRFR1JBTCk7XG4gICAgc3RkX3N5bWJvbChcImludlwiLCBJTlYpO1xuICAgIHN0ZF9zeW1ib2woXCJpbnZnXCIsIElOVkcpO1xuICAgIHN0ZF9zeW1ib2woXCJpc2ludGVnZXJcIiwgSVNJTlRFR0VSKTtcbiAgICBzdGRfc3ltYm9sKFwiaXNwcmltZVwiLCBJU1BSSU1FKTtcbiAgICBzdGRfc3ltYm9sKFwibGFndWVycmVcIiwgTEFHVUVSUkUpO1xuICAgIC8vICBzdGRfc3ltYm9sKFwibGFwbGFjZVwiLCBMQVBMQUNFKVxuICAgIHN0ZF9zeW1ib2woXCJsY21cIiwgTENNKTtcbiAgICBzdGRfc3ltYm9sKFwibGVhZGluZ1wiLCBMRUFESU5HKTtcbiAgICBzdGRfc3ltYm9sKFwibGVnZW5kcmVcIiwgTEVHRU5EUkUpO1xuICAgIHN0ZF9zeW1ib2woXCJsb2dcIiwgTE9HKTtcbiAgICBzdGRfc3ltYm9sKFwibG9va3VwXCIsIExPT0tVUCk7XG4gICAgc3RkX3N5bWJvbChcIm1vZFwiLCBNT0QpO1xuICAgIHN0ZF9zeW1ib2woXCJtdWx0aXBseVwiLCBNVUxUSVBMWSk7XG4gICAgc3RkX3N5bWJvbChcIm5vdFwiLCBOT1QpO1xuICAgIHN0ZF9zeW1ib2woXCJucm9vdHNcIiwgTlJPT1RTKTtcbiAgICBzdGRfc3ltYm9sKFwibnVtYmVyXCIsIE5VTUJFUik7XG4gICAgc3RkX3N5bWJvbChcIm51bWVyYXRvclwiLCBOVU1FUkFUT1IpO1xuICAgIHN0ZF9zeW1ib2woXCJvcGVyYXRvclwiLCBPUEVSQVRPUik7XG4gICAgc3RkX3N5bWJvbChcIm9yXCIsIE9SKTtcbiAgICBzdGRfc3ltYm9sKFwib3V0ZXJcIiwgT1VURVIpO1xuICAgIHN0ZF9zeW1ib2woXCJwYXR0ZXJuXCIsIFBBVFRFUk4pO1xuICAgIHN0ZF9zeW1ib2woXCJwYXR0ZXJuc2luZm9cIiwgUEFUVEVSTlNJTkZPKTtcbiAgICBzdGRfc3ltYm9sKFwicG9sYXJcIiwgUE9MQVIpO1xuICAgIHN0ZF9zeW1ib2woXCJwb3dlclwiLCBQT1dFUik7XG4gICAgc3RkX3N5bWJvbChcInByaW1lXCIsIFBSSU1FKTtcbiAgICBzdGRfc3ltYm9sKFwicHJpbnRcIiwgUFJJTlQpO1xuICAgIHN0ZF9zeW1ib2woXCJwcmludDJkYXNjaWlcIiwgUFJJTlQyREFTQ0lJKTtcbiAgICBzdGRfc3ltYm9sKFwicHJpbnRjb21wdXRlclwiLCBQUklOVEZVTEwpO1xuICAgIHN0ZF9zeW1ib2woXCJwcmludGxhdGV4XCIsIFBSSU5UTEFURVgpO1xuICAgIHN0ZF9zeW1ib2woXCJwcmludGxpc3RcIiwgUFJJTlRMSVNUKTtcbiAgICBzdGRfc3ltYm9sKFwicHJpbnRodW1hblwiLCBQUklOVFBMQUlOKTtcbiAgICBzdGRfc3ltYm9sKFwicHJpbnRMZWF2ZUVBbG9uZVwiLCBQUklOVF9MRUFWRV9FX0FMT05FKTtcbiAgICBzdGRfc3ltYm9sKFwicHJpbnRMZWF2ZVhBbG9uZVwiLCBQUklOVF9MRUFWRV9YX0FMT05FKTtcbiAgICBzdGRfc3ltYm9sKFwicHJvZHVjdFwiLCBQUk9EVUNUKTtcbiAgICBzdGRfc3ltYm9sKFwicXVvdGVcIiwgUVVPVEUpO1xuICAgIHN0ZF9zeW1ib2woXCJxdW90aWVudFwiLCBRVU9USUVOVCk7XG4gICAgc3RkX3N5bWJvbChcInJhbmtcIiwgUkFOSyk7XG4gICAgc3RkX3N5bWJvbChcInJhdGlvbmFsaXplXCIsIFJBVElPTkFMSVpFKTtcbiAgICBzdGRfc3ltYm9sKFwicmVhbFwiLCBSRUFMKTtcbiAgICBzdGRfc3ltYm9sKFwicmVjdFwiLCBZWVJFQ1QpO1xuICAgIHN0ZF9zeW1ib2woXCJyb290c1wiLCBST09UUyk7XG4gICAgc3RkX3N5bWJvbChcInJvdW5kXCIsIFJPVU5EKTtcbiAgICBzdGRfc3ltYm9sKFwiZXF1YWxzXCIsIFNFVFEpO1xuICAgIHN0ZF9zeW1ib2woXCJzZ25cIiwgU0dOKTtcbiAgICBzdGRfc3ltYm9sKFwic2lsZW50cGF0dGVyblwiLCBTSUxFTlRQQVRURVJOKTtcbiAgICBzdGRfc3ltYm9sKFwic2ltcGxpZnlcIiwgU0lNUExJRlkpO1xuICAgIHN0ZF9zeW1ib2woXCJzaW5cIiwgU0lOKTtcbiAgICBzdGRfc3ltYm9sKFwic2luaFwiLCBTSU5IKTtcbiAgICBzdGRfc3ltYm9sKFwic2hhcGVcIiwgU0hBUEUpO1xuICAgIHN0ZF9zeW1ib2woXCJzcXJ0XCIsIFNRUlQpO1xuICAgIHN0ZF9zeW1ib2woXCJzdG9wXCIsIFNUT1ApO1xuICAgIHN0ZF9zeW1ib2woXCJzdWJzdFwiLCBTVUJTVCk7XG4gICAgc3RkX3N5bWJvbChcInN1bVwiLCBTVU0pO1xuICAgIHN0ZF9zeW1ib2woXCJzeW1ib2xzaW5mb1wiLCBTWU1CT0xTSU5GTyk7XG4gICAgc3RkX3N5bWJvbChcInRhblwiLCBUQU4pO1xuICAgIHN0ZF9zeW1ib2woXCJ0YW5oXCIsIFRBTkgpO1xuICAgIHN0ZF9zeW1ib2woXCJ0YXlsb3JcIiwgVEFZTE9SKTtcbiAgICBzdGRfc3ltYm9sKFwidGVzdFwiLCBURVNUKTtcbiAgICBzdGRfc3ltYm9sKFwidGVzdGVxXCIsIFRFU1RFUSk7XG4gICAgc3RkX3N5bWJvbChcInRlc3RnZVwiLCBURVNUR0UpO1xuICAgIHN0ZF9zeW1ib2woXCJ0ZXN0Z3RcIiwgVEVTVEdUKTtcbiAgICBzdGRfc3ltYm9sKFwidGVzdGxlXCIsIFRFU1RMRSk7XG4gICAgc3RkX3N5bWJvbChcInRlc3RsdFwiLCBURVNUTFQpO1xuICAgIHN0ZF9zeW1ib2woXCJ0cmFuc3Bvc2VcIiwgVFJBTlNQT1NFKTtcbiAgICBzdGRfc3ltYm9sKFwidW5pdFwiLCBVTklUKTtcbiAgICBzdGRfc3ltYm9sKFwiemVyb1wiLCBaRVJPKTtcbiAgICBzdGRfc3ltYm9sKFwibmlsXCIsIE5JTCk7XG4gICAgc3RkX3N5bWJvbChcImF1dG9leHBhbmRcIiwgQVVUT0VYUEFORCk7XG4gICAgc3RkX3N5bWJvbChcImJha2VcIiwgQkFLRSk7XG4gICAgc3RkX3N5bWJvbChcImFzc3VtZVJlYWxWYXJpYWJsZXNcIiwgQVNTVU1FX1JFQUxfVkFSSUFCTEVTKTtcbiAgICBzdGRfc3ltYm9sKFwibGFzdFwiLCBMQVNUKTtcbiAgICBzdGRfc3ltYm9sKFwibGFzdHByaW50XCIsIExBU1RfUFJJTlQpO1xuICAgIHN0ZF9zeW1ib2woXCJsYXN0MmRhc2NpaXByaW50XCIsIExBU1RfMkRBU0NJSV9QUklOVCk7XG4gICAgc3RkX3N5bWJvbChcImxhc3RmdWxscHJpbnRcIiwgTEFTVF9GVUxMX1BSSU5UKTtcbiAgICBzdGRfc3ltYm9sKFwibGFzdGxhdGV4cHJpbnRcIiwgTEFTVF9MQVRFWF9QUklOVCk7XG4gICAgc3RkX3N5bWJvbChcImxhc3RsaXN0cHJpbnRcIiwgTEFTVF9MSVNUX1BSSU5UKTtcbiAgICBzdGRfc3ltYm9sKFwibGFzdHBsYWlucHJpbnRcIiwgTEFTVF9QTEFJTl9QUklOVCk7XG4gICAgc3RkX3N5bWJvbChcInRyYWNlXCIsIFRSQUNFKTtcbiAgICBzdGRfc3ltYm9sKFwiZm9yY2VGaXhlZFByaW50b3V0XCIsIEZPUkNFX0ZJWEVEX1BSSU5UT1VUKTtcbiAgICBzdGRfc3ltYm9sKFwibWF4Rml4ZWRQcmludG91dERpZ2l0c1wiLCBNQVhfRklYRURfUFJJTlRPVVRfRElHSVRTKTtcbiAgICBzdGRfc3ltYm9sKFwiflwiLCBZWUUpOyAvLyB0aWxkZSBzbyBzb3J0IHB1dHMgaXQgYWZ0ZXIgb3RoZXIgc3ltYm9sc1xuICAgIHN0ZF9zeW1ib2woXCIkRFJBV1hcIiwgRFJBV1gpOyAvLyBzcGVjaWFsIHB1cnBvc2UgaW50ZXJuYWwgc3ltYm9sc1xuICAgIHN0ZF9zeW1ib2woXCIkTUVUQUFcIiwgTUVUQUEpO1xuICAgIHN0ZF9zeW1ib2woXCIkTUVUQUJcIiwgTUVUQUIpO1xuICAgIHN0ZF9zeW1ib2woXCIkTUVUQVhcIiwgTUVUQVgpO1xuICAgIHN0ZF9zeW1ib2woXCIkU0VDUkVUWFwiLCBTRUNSRVRYKTtcbiAgICBzdGRfc3ltYm9sKFwidmVyc2lvblwiLCBWRVJTSU9OKTtcbiAgICBzdGRfc3ltYm9sKFwicGlcIiwgUEkpO1xuICAgIHN0ZF9zeW1ib2woXCJhXCIsIFNZTUJPTF9BKTtcbiAgICBzdGRfc3ltYm9sKFwiYlwiLCBTWU1CT0xfQik7XG4gICAgc3RkX3N5bWJvbChcImNcIiwgU1lNQk9MX0MpO1xuICAgIHN0ZF9zeW1ib2woXCJkXCIsIFNZTUJPTF9EKTtcbiAgICBzdGRfc3ltYm9sKFwiaVwiLCBTWU1CT0xfSSk7XG4gICAgc3RkX3N5bWJvbChcImpcIiwgU1lNQk9MX0opO1xuICAgIHN0ZF9zeW1ib2woXCJuXCIsIFNZTUJPTF9OKTtcbiAgICBzdGRfc3ltYm9sKFwiclwiLCBTWU1CT0xfUik7XG4gICAgc3RkX3N5bWJvbChcInNcIiwgU1lNQk9MX1MpO1xuICAgIHN0ZF9zeW1ib2woXCJ0XCIsIFNZTUJPTF9UKTtcbiAgICBzdGRfc3ltYm9sKFwieFwiLCBTWU1CT0xfWCk7XG4gICAgc3RkX3N5bWJvbChcInlcIiwgU1lNQk9MX1kpO1xuICAgIHN0ZF9zeW1ib2woXCJ6XCIsIFNZTUJPTF9aKTtcbiAgICBzdGRfc3ltYm9sKFwiSVwiLCBTWU1CT0xfSURFTlRJVFlfTUFUUklYKTtcbiAgICBzdGRfc3ltYm9sKFwiYV9cIiwgU1lNQk9MX0FfVU5ERVJTQ09SRSk7XG4gICAgc3RkX3N5bWJvbChcImJfXCIsIFNZTUJPTF9CX1VOREVSU0NPUkUpO1xuICAgIHN0ZF9zeW1ib2woXCJ4X1wiLCBTWU1CT0xfWF9VTkRFUlNDT1JFKTtcbiAgICBzdGRfc3ltYm9sKFwiJEMxXCIsIEMxKTtcbiAgICBzdGRfc3ltYm9sKFwiJEMyXCIsIEMyKTtcbiAgICBzdGRfc3ltYm9sKFwiJEMzXCIsIEMzKTtcbiAgICBzdGRfc3ltYm9sKFwiJEM0XCIsIEM0KTtcbiAgICBzdGRfc3ltYm9sKFwiJEM1XCIsIEM1KTtcbiAgICBzdGRfc3ltYm9sKFwiJEM2XCIsIEM2KTtcbiAgICBkZWZpbmVTb21lSGFuZHlDb25zdGFudHMoKTtcbiAgICAvLyBkb24ndCBhZGQgYWxsIHRoZXNlIGZ1bmN0aW9ucyB0byB0aGVcbiAgICAvLyBzeW1ib2xzRGVwZW5kZW5jaWVzLCBjbG9uZSB0aGUgb3JpZ2luYWxcbiAgICBvcmlnaW5hbENvZGVHZW4gPSBjb2RlR2VuO1xuICAgIGNvZGVHZW4gPSBmYWxzZTtcbiAgICBmb3IgKGRlZm5faSA9IGwxID0gMCwgcmVmMiA9IGRlZm5fc3RyLmxlbmd0aDsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGRlZm5faSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBkZWZpbml0aW9uT2ZJbnRlcmVzdCA9IGRlZm5fc3RyW2RlZm5faV07XG4gICAgICBzY2FuKGRlZmluaXRpb25PZkludGVyZXN0KTtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIi4uLiBldmFsaW5nIFwiICsgZGVmaW5pdGlvbk9mSW50ZXJlc3QpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInRvcCBvZiBzdGFjazpcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKHByaW50X2xpc3Qoc3RhY2tbdG9zIC0gMV0pKTtcbiAgICAgIH1cbiAgICAgIEV2YWwoKTtcbiAgICAgIHBvcCgpO1xuICAgIH1cbiAgICAvLyByZXN0b3JlIHRoZSBzeW1ib2wgZGVwZW5kZW5jaWVzIGFzIHRoZXkgd2VyZSBiZWZvcmUuXG4gICAgcmV0dXJuIGNvZGVHZW4gPSBvcmlnaW5hbENvZGVHZW47XG4gIH07XG5cbiAgZGVmaW5lU29tZUhhbmR5Q29uc3RhbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgcHVzaF9pbnRlZ2VyKDApO1xuICAgIHplcm8gPSBwb3AoKTsgLy8gbXVzdCBiZSB1bnRhZ2dlZCBpbiBnY1xuICAgIHB1c2hfaW50ZWdlcigxKTtcbiAgICBvbmUgPSBwb3AoKTsgLy8gbXVzdCBiZSB1bnRhZ2dlZCBpbiBnY1xuICAgIHB1c2hfZG91YmxlKDEuMCk7XG4gICAgb25lX2FzX2RvdWJsZSA9IHBvcCgpO1xuICAgIC8vIGkgaXMgdGhlIHNxdWFyZSByb290IG9mIC0xIGkuZS4gLTEgXiAxLzJcbiAgICBwdXNoX3N5bWJvbChQT1dFUik7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhwcmludF9saXN0KHN0YWNrW3RvcyAtIDFdKSk7XG4gICAgfVxuICAgIHB1c2hfaW50ZWdlcigtMSk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhwcmludF9saXN0KHN0YWNrW3RvcyAtIDFdKSk7XG4gICAgfVxuICAgIHB1c2hfcmF0aW9uYWwoMSwgMik7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhwcmludF9saXN0KHN0YWNrW3RvcyAtIDFdKSk7XG4gICAgfVxuICAgIGxpc3QoMyk7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhwcmludF9saXN0KHN0YWNrW3RvcyAtIDFdKSk7XG4gICAgfVxuICAgIHJldHVybiBpbWFnaW5hcnl1bml0ID0gcG9wKCk7IC8vIG11c3QgYmUgdW50YWdnZWQgaW4gZ2NcbiAgfTtcblxuICAvLyBCaWdudW0gY29tcGFyZVxuXG4gIC8vICByZXR1cm5zXG5cbiAgLy8gIC0xICAgIGEgPCBiXG5cbiAgLy8gIDAgICAgYSA9IGJcblxuICAvLyAgMSAgICBhID4gYlxuICBtY21wID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhLmNvbXBhcmUoYik7XG4gIH07XG5cbiAgLy8gYSBpcyBhIGJpZ2ludCwgbiBpcyBhIG5vcm1hbCBpbnRcbiAgbWNtcGludCA9IGZ1bmN0aW9uKGEsIG4pIHtcbiAgICB2YXIgYiwgdDtcbiAgICBiID0gYmlnSW50KG4pO1xuICAgIHQgPSBtY21wKGEsIGIpO1xuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIHN0cmNtcCA9IGZ1bmN0aW9uKHN0cjEsIHN0cjIpIHtcbiAgICBpZiAoc3RyMSA9PT0gc3RyMikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmIChzdHIxID4gc3RyMikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH07XG5cbiAgZG91YmxlVG9SZWFzb25hYmxlU3RyaW5nID0gZnVuY3Rpb24oZCkge1xuICAgIHZhciBtYXhGaXhlZFByaW50b3V0RGlnaXRzLCBzdHJpbmdSZXByZXNlbnRhdGlvbjtcbiAgICAvLyB3aGVuIGdlbmVyYXRpbmcgY29kZSwgcHJpbnQgb3V0XG4gICAgLy8gdGhlIHN0YW5kYXJkIEpTIE51bWJlciBwcmludG91dFxuICAgIGlmIChjb2RlR2VuKSB7XG4gICAgICByZXR1cm4gXCJcIiArIGQ7XG4gICAgfVxuICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoZ2V0X2JpbmRpbmcoc3ltYm9sKEZPUkNFX0ZJWEVEX1BSSU5UT1VUKSkpKSB7XG4gICAgICBzdHJpbmdSZXByZXNlbnRhdGlvbiA9IFwiXCIgKyBkO1xuICAgICAgLy8gbWFuaXB1bGF0ZSB0aGUgc3RyaW5nIHNvIHRoYXQgaXQgY2FuIGJlIHBhcnNlZCBieVxuICAgICAgLy8gQWxnZWJyaXRlIChzb21ldGhpbmcgbGlrZSAxLjIzZS0xMjMgd291bGRuJ3QgY3V0IGl0IGJlY2F1c2VcbiAgICAgIC8vIHRoYXQgd291bGQgYmUgcGFyc2VkIGFzIDEuMjMqZSAtIDEyMylcbiAgICAgIGlmIChwcmludE1vZGUgPT09IFBSSU5UTU9ERV9MQVRFWCkge1xuICAgICAgICAvLyAxLjBcXG1hdGhybXtlfXstMTB9IGxvb2tzIG11Y2ggYmV0dGVyIHRoYW4gdGhlIHBsYWluIDEuMGUtMTBcbiAgICAgICAgaWYgKC9cXGQqXFwuXFxkKmUuKi9nbS50ZXN0KHN0cmluZ1JlcHJlc2VudGF0aW9uKSkge1xuICAgICAgICAgIHN0cmluZ1JlcHJlc2VudGF0aW9uID0gc3RyaW5nUmVwcmVzZW50YXRpb24ucmVwbGFjZSgvZSguKikvZ20sIFwiXFxcXG1hdGhybXtlfXskMX1cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gZG90IGluIHRoZSBtYW50aXNzYSwgYWRkIGl0IHNvIHdlIHNlZSBpdCdzXG4gICAgICAgICAgLy8gYSBkb3VibGUgYW5kIG5vdCBhIHBlcmZlY3QgbnVtYmVyXG4gICAgICAgICAgLy8gZS5nLiAxZS0xMCBiZWNvbWVzIDEuMFxcbWF0aHJte2V9ey0xMH1cbiAgICAgICAgICBzdHJpbmdSZXByZXNlbnRhdGlvbiA9IHN0cmluZ1JlcHJlc2VudGF0aW9uLnJlcGxhY2UoLyhcXGQrKWUoLiopL2dtLCBcIiQxLjBcXFxcbWF0aHJte2V9eyQyfVwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKC9cXGQqXFwuXFxkKmUuKi9nbS50ZXN0KHN0cmluZ1JlcHJlc2VudGF0aW9uKSkge1xuICAgICAgICAgIHN0cmluZ1JlcHJlc2VudGF0aW9uID0gc3RyaW5nUmVwcmVzZW50YXRpb24ucmVwbGFjZSgvZSguKikvZ20sIFwiKjEwXigkMSlcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gZG90IGluIHRoZSBtYW50aXNzYSwgYWRkIGl0IHNvIHdlIHNlZSBpdCdzXG4gICAgICAgICAgLy8gYSBkb3VibGUgYW5kIG5vdCBhIHBlcmZlY3QgbnVtYmVyXG4gICAgICAgICAgLy8gZS5nLiAxZS0xMCBiZWNvbWVzIDEuMGUtMTBcbiAgICAgICAgICBzdHJpbmdSZXByZXNlbnRhdGlvbiA9IHN0cmluZ1JlcHJlc2VudGF0aW9uLnJlcGxhY2UoLyhcXGQrKWUoLiopL2dtLCBcIiQxLjAqMTBeKCQyKVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoKGdldF9iaW5kaW5nKHN5bWJvbChNQVhfRklYRURfUFJJTlRPVVRfRElHSVRTKSkpO1xuICAgICAgbWF4Rml4ZWRQcmludG91dERpZ2l0cyA9IHBvcF9pbnRlZ2VyKCk7XG4gICAgICAvL2NvbnNvbGUubG9nIFwibWF4Rml4ZWRQcmludG91dERpZ2l0czogXCIgKyBtYXhGaXhlZFByaW50b3V0RGlnaXRzXG4gICAgICAvL2NvbnNvbGUubG9nIFwidHlwZTogXCIgKyB0eXBlb2YobWF4Rml4ZWRQcmludG91dERpZ2l0cylcbiAgICAgIC8vY29uc29sZS5sb2cgXCJ0b0ZpeGVkOiBcIiArIGQudG9GaXhlZChtYXhGaXhlZFByaW50b3V0RGlnaXRzKVxuICAgICAgc3RyaW5nUmVwcmVzZW50YXRpb24gPSBcIlwiICsgZC50b0ZpeGVkKG1heEZpeGVkUHJpbnRvdXREaWdpdHMpO1xuICAgICAgLy8gcmVtb3ZlIGFueSB0cmFpbGluZyB6ZXJvZXMgYWZ0ZXIgdGhlIGRvdFxuICAgICAgLy8gc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI2Mjk5MTYwL3VzaW5nLXJlZ2V4LWhvdy1kby1pLXJlbW92ZS10aGUtdHJhaWxpbmctemVyb3MtZnJvbS1hLWRlY2ltYWwtbnVtYmVyXG4gICAgICBzdHJpbmdSZXByZXNlbnRhdGlvbiA9IHN0cmluZ1JlcHJlc2VudGF0aW9uLnJlcGxhY2UoLyhcXC5cXGQqP1sxLTldKTArJC9nbSwgXCIkMVwiKTtcbiAgICAgIC8vIGluIGNhc2UgdGhlcmUgYXJlIG9ubHkgemVyb2VzIGFmdGVyIHRoZSBkb3QsIHJlbW92ZXMgdGhlIGRvdCB0b29cbiAgICAgIHN0cmluZ1JlcHJlc2VudGF0aW9uID0gc3RyaW5nUmVwcmVzZW50YXRpb24ucmVwbGFjZSgvXFwuMCskL2dtLCBcIlwiKTtcbiAgICAgIC8vIHdlIGFjdHVhbGx5IHdhbnQgdG8gZ2l2ZSBhIGhpbnQgdG8gdXNlciB0aGF0XG4gICAgICAvLyBpdCdzIGEgZG91YmxlLCBzbyBhZGQgYSB0cmFpbGluZyBcIi4wXCIgaWYgdGhlcmVcbiAgICAgIC8vIGlzIG5vIGRlY2ltYWwgcG9pbnRcbiAgICAgIGlmIChzdHJpbmdSZXByZXNlbnRhdGlvbi5pbmRleE9mKFwiLlwiKSA9PT0gLTEpIHtcbiAgICAgICAgc3RyaW5nUmVwcmVzZW50YXRpb24gKz0gXCIuMFwiO1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlRmxvYXQoc3RyaW5nUmVwcmVzZW50YXRpb24pICE9PSBkKSB7XG4gICAgICAgIHN0cmluZ1JlcHJlc2VudGF0aW9uID0gZC50b0ZpeGVkKG1heEZpeGVkUHJpbnRvdXREaWdpdHMpICsgXCIuLi5cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ1JlcHJlc2VudGF0aW9uO1xuICB9O1xuXG4gIC8vIGRvZXMgbm90aGluZ1xuICBjbGVhcl90ZXJtID0gZnVuY3Rpb24oKSB7fTtcblxuICAvLyBzIGlzIGEgc3RyaW5nIGhlcmUgYW55d2F5c1xuICBpc3NwYWNlID0gZnVuY3Rpb24ocykge1xuICAgIGlmIChzID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHMgPT09ICcgJyB8fCBzID09PSAnXFx0JyB8fCBzID09PSAnXFxuJyB8fCBzID09PSAnXFx2JyB8fCBzID09PSAnXFxmJyB8fCBzID09PSAnXFxyJztcbiAgfTtcblxuICBpc2RpZ2l0ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKHN0ciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAvXlxcZCskLy50ZXN0KHN0cik7XG4gIH07XG5cbiAgaXNhbHBoYSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmIChzdHIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvL0NoZWNrIGZvciBub24tYWxwaGFiZXRpYyBjaGFyYWN0ZXJzIGFuZCBzcGFjZVxuICAgIHJldHVybiBzdHIuc2VhcmNoKC9bXkEtWmEtel0vKSA9PT0gLTE7XG4gIH07XG5cbiAgaXNhbHBoYU9yVW5kZXJzY29yZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmIChzdHIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvL0NoZWNrIGZvciBub24tYWxwaGFiZXRpYyBjaGFyYWN0ZXJzIGFuZCBzcGFjZVxuICAgIHJldHVybiBzdHIuc2VhcmNoKC9bXkEtWmEtel9dLykgPT09IC0xO1xuICB9O1xuXG4gIGlzdW5kZXJzY29yZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmIChzdHIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnNlYXJjaCgvXy8pID09PSAtMTtcbiAgfTtcblxuICBpc2FsbnVtb3J1bmRlcnNjb3JlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKHN0ciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBpc2FscGhhT3JVbmRlcnNjb3JlKHN0cikgfHwgaXNkaWdpdChzdHIpO1xuICB9O1xuXG4gIGNvdW50ID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBuO1xuICAgIGlmIChpc2NvbnMocCkpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgd2hpbGUgKGlzY29ucyhwKSkge1xuICAgICAgICBuICs9IGNvdW50KGNhcihwKSkgKyAxO1xuICAgICAgICBwID0gY2RyKHApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuID0gMTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG4gIH07XG5cbiAgLy8gdGhpcyBwcm9iYWJseSB3b3JrcyBvdXQgdG8gYmVcbiAgLy8gbW9yZSBnZW5lcmFsIHRoYW4ganVzdCBjb3VudGluZyBzeW1ib2xzLCBpdCBjYW5cbiAgLy8gcHJvYmFibHkgY291bnQgaW5zdGFuY2VzIG9mIGFueXRoaW5nIHlvdSBwYXNzIGFzXG4gIC8vIGZpcnN0IGFyZ3VtZW50IGJ1dCBkaWRuJ3QgdHJ5IGl0LlxuICBjb3VudE9jY3VycmVuY2VzT2ZTeW1ib2wgPSBmdW5jdGlvbihuZWVkbGUsIHApIHtcbiAgICB2YXIgbjtcbiAgICBuID0gMDtcbiAgICBpZiAoaXNjb25zKHApKSB7XG4gICAgICB3aGlsZSAoaXNjb25zKHApKSB7XG4gICAgICAgIG4gKz0gY291bnRPY2N1cnJlbmNlc09mU3ltYm9sKG5lZWRsZSwgY2FyKHApKTtcbiAgICAgICAgcCA9IGNkcihwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGVxdWFsKG5lZWRsZSwgcCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuO1xuICB9O1xuXG4gIC8vIHJldHVybnMgdGhlIHRvdGFsIG51bWJlciBvZiBlbGVtZW50c1xuICAvLyBpbiBhbiBleHByZXNzaW9uXG4gIGNvdW50c2l6ZSA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgaSwgbDEsIG4sIHJlZjI7XG4gICAgbiA9IDA7XG4gICAgaWYgKGlzdGVuc29yKHApKSB7XG4gICAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwLnRlbnNvci5uZWxlbTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgICBuICs9IHAudGVuc29yLmVsZW1baV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc2NvbnMocCkpIHtcbiAgICAgIHdoaWxlIChpc2NvbnMocCkpIHtcbiAgICAgICAgbiArPSBjb3VudChjYXIocCkpICsgMTtcbiAgICAgICAgcCA9IGNkcihwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbiA9IDE7XG4gICAgfVxuICAgIHJldHVybiBuO1xuICB9O1xuXG4gIC8vam1wX2J1ZiBzdG9wX3JldHVybiwgZHJhd19zdG9wX3JldHVyblxuXG4gIC8vIHMgaXMgYSBzdHJpbmcgaGVyZVxuICBzdG9wID0gZnVuY3Rpb24ocykge1xuICAgIHZhciBtZXNzYWdlO1xuICAgIC8vaWYgKGRyYXdfZmxhZyA9PSAyKVxuICAgIC8vICBsb25nam1wKGRyYXdfc3RvcF9yZXR1cm4sIDEpXG4gICAgLy9lbHNlXG4gICAgZXJyb3JNZXNzYWdlICs9IFwiU3RvcDogXCI7XG4gICAgZXJyb3JNZXNzYWdlICs9IHM7XG4gICAgLy9kZWJ1Z2dlclxuICAgIG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XG4gICAgZXJyb3JNZXNzYWdlID0gJyc7XG4gICAgbW92ZVRvcygwKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH07XG5cbiAgXG4gIC8vbG9uZ2ptcChzdG9wX3JldHVybiwgMSlcblxuICAvLyBGaWd1cmluZyBvdXQgZGVwZW5kZW5jaWVzIGlzIGtleSB0byBhdXRvbWF0aWNhbGx5XG4gIC8vIGdlbmVyYXRpbmcgYSBtZXRob2Qgc2lnbmF0dXJlIHdoZW4gZ2VuZXJhdGluZyBKUyBjb2RlXG4gIC8vIGZyb20gYWxnZWJyaXRlIHNjcmlwdHMuXG4gIC8vIFRoaXMgaXMgaW1wb3J0YW50IGJlY2F1c2UgdGhlIHVzZXIgY2FuIGtlZXAgdXNpbmcgbm9ybWFsIEFsZ2Vicml0ZVxuICAvLyBzY3JpcHRpbmcgd2l0aG91dCBzcGVjaWFsIG5vdGF0aW9ucy5cbiAgLy8gQmFzaWNhbGx5IHRoZSBwcm9jZXNzIGNvbnNpc3RzIG9mIGZpZ3VyaW5nIG91dFxuICAvLyB0aGUgXCJncm91bmQgdmFyaWFibGVzXCIgdGhhdCBhcmUgbmVlZGVkIHRvIGNvbXB1dGUgZWFjaCB2YXJpYWJsZS5cbiAgLy8gTm93IHRoZXJlIGFyZSB0d28gd2F5cyBvZiBkb2luZyB0aGlzOlxuICAvLyAgICogYXQgcGFyc2UgdGltZVxuICAvLyAgICogYWZ0ZXIgcnVubmluZyB0aGUgc2NyaXB0c1xuICAvLyBEb2luZyBpdCBhdCBwYXJzZSB0aW1lIG1lYW5zIHRoYXQgd2UgY2FuJ3QgdHJhY2sgc2ltcGxpZmljYXRpb25zXG4gIC8vIGNhbmNlbGluZy1vdXQgc29tZSB2YXJpYWJsZXMgZm9yIGV4YW1wbGUuIEJ1dCBvbiB0aGUgb3RoZXIgc2lkZVxuICAvLyBpdCdzIHZlcnkgcXVpY2sgYW5kIHRoZSB1c2VyIGNhbiBzb21laG93IHNlZSB3aGF0IHRoZSBzaWduYXR1cmUgaXNcbiAgLy8gZ29pbmcgdG8gbG9vayBsaWtlIChhc3N1bWluZyB0aGEgY29kZSBpcyByYXRoZXIgc2ltcGxlKSwgb3IgYW55d2F5c1xuICAvLyBpcyBnb2luZyB0byBlYXNpbHkgbWFrZSBzZW5zZSBvZiB0aGUgZ2VuZXJhdGVkIHNpZ25hdHVyZS5cbiAgLy8gRG9pbmcgaXQgYWZ0ZXIgZXhlY3V0aW9uIG9uIHRoZSBvdGhlciBoYW5kIHdvdWxkIGFsbG93IHVzIHRvIHNlZVxuICAvLyBpZiBzb21lIHZhcmlhYmxlIGNhbmNlbC1vdXQuIEJ1dCBpZiB2YXJpYWJsZXMgY2FuY2VsIG91dCB0aGVuXG4gIC8vIHRoZXkgbWlnaHQgZG8gc28gYWNjb3JkaW5nIHRvIHNvbWUgcnVuLXRpbWUgYmVoYXZpb3VyIHRoYXQgdGhlIHVzZXJcbiAgLy8gbWlnaHQgc3RydWdnbGUgdG8ga2VlcCB0cmFjayBvZi5cbiAgLy8gU28gdGhlIGVmZm9ydCBmb3IgdGhlIHVzZXIgdG8gbWFrZSBzZW5zZSBvZiB0aGUgc2lnbmF0dXJlIGluIHRoZSBmaXJzdCBjYXNlXG4gIC8vIGlzIHNpbWlsYXIgdG8gdGhlIGVmZm9ydCBvZiBrZWVwaW5nIHRhYiBvZiB0eXBlcyBpbiBhIHR5cGVkIGxhbmd1YWdlLlxuICAvLyBXaGlsZSBpbiB0aGUgc2Vjb25kIGNhc2UgdGhlIGVmZm9ydCBpcyBzaW1pbGFyIHRvIHJ1bm5pbmcgdGhlXG4gIC8vIGNvZGUgYW5kIHNpbXBsaWZpY2F0aW9ucyBpbiBoZXIgaGVhZC5cblxuICAvLyBJZiB3ZSBqdXN0IHdhbnQgdG8gY29tcHV0ZSB0aGUgZGVwZW5kZW5jaWVzLCB3ZSBkb24ndCBuZWVkIHRvIGRvXG4gIC8vIGFueXRoaW5nIGNvc3RseSwgd2UgZG9uJ3QgXCJydW5cIiB0aGUgY29kZSBhbmQgd2UgZG9uJ3Qgc2ltcGxpZnlcbiAgLy8gdGhlIGNvZGUuIEp1c3QgZmluZGluZyB0aGUgcGxhaW4gZGVwZW5kZW5jaWVzXG4gIC8vIFRPRE8gY2hhbmdlIHRoZSBuYW1lIG9mIHRoaXMgZnVuY3Rpb24sIGFzIGl0IGRvZXNuJ3QganVzdCBmaW5kIHRoZVxuICAvLyBkZXBlbmRlbmNpZXMuIEl0IGFsc28gcnVucyBpdCBhbmQgZ2VuZXJhdGVzIHRoZSBKUyBjb2RlLlxuICBmaW5kRGVwZW5kZW5jaWVzSW5TY3JpcHQgPSBmdW5jdGlvbihzdHJpbmdUb0JlUGFyc2VkLCBkb250R2VuZXJhdGVDb2RlKSB7XG4gICAgdmFyIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzLCBhbGxSZXR1cm5lZFBsYWluU3RyaW5ncywgYm9keUZvclJlYWRhYmxlU3VtbWFyeU9mR2VuZXJhdGVkQ29kZSwgY3ljbGVzRGVzY3JpcHRpb25zLCBkZVF1b3RlZERlcCwgZGVwZW5kZW5jeUluZm8sIGVhY2hEZXBlbmRlbmN5LCBlcnJvciwgZ2VuZXJhdGVkQm9keSwgZ2VuZXJhdGVkQ29kZSwgaSwgaW5kZXhPZkVhY2hSZXBsYWNlbWVudCwgaW5kZXhPZlBhcnRSZW1haW5pbmdUb0JlUGFyc2VkLCBpbml0ZWQsIGtleSwgbDEsIGxlbiwgbGVuMSwgbGVuMiwgbGVuMywgbGVuNCwgbGVuNSwgbGVuNiwgbGVuNywgbTEsIG4sIG4xLCBuZXdVc2VyU3ltYm9sLCBvMSwgb3JpZ1ByaW50TW9kZSwgb3JpZ2luYWxVc2VyU3ltYm9sLCBwYXJhbWV0ZXJzLCBxMSwgcjEsIHJlYWRhYmxlU3VtbWFyeU9mR2VuZXJhdGVkQ29kZSwgcmVjdXJzZWREZXBlbmRlbmNpZXMsIHJlZjIsIHJlcGxhY2VtZW50c0Zyb20sIHJlcGxhY2VtZW50c1RvLCBzMSwgc2NyaXB0RXZhbHVhdGlvbiwgc3RyaW5nVG9CZVJ1biwgdDEsIHRlc3RhYmxlU3RyaW5nLCB0aW1lU3RhcnRGcm9tQWxnZWJyYSwgdG9CZVByaW50ZWQsIHUxLCB1c2VyVmFyaWFibGVzTWVudGlvbmVkLCB2YWx1ZSwgdmFyaWFibGVzV2l0aEN5Y2xlcztcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwic3RyaW5nVG9CZVBhcnNlZDogXCIgKyBzdHJpbmdUb0JlUGFyc2VkKTtcbiAgICB9XG4gICAgdGltZVN0YXJ0RnJvbUFsZ2VicmEgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpbml0ZWQgPSB0cnVlO1xuICAgIGNvZGVHZW4gPSB0cnVlO1xuICAgIHN5bWJvbHNEZXBlbmRlbmNpZXMgPSB7fTtcbiAgICBzeW1ib2xzSGF2aW5nUmVhc3NpZ25tZW50cyA9IFtdO1xuICAgIHN5bWJvbHNJbkV4cHJlc3Npb25zV2l0aG91dEFzc2lnbm1lbnRzID0gW107XG4gICAgcGF0dGVybkhhc0JlZW5Gb3VuZCA9IGZhbHNlO1xuICAgIGluZGV4T2ZQYXJ0UmVtYWluaW5nVG9CZVBhcnNlZCA9IDA7XG4gICAgYWxsUmV0dXJuZWRQbGFpblN0cmluZ3MgPSBcIlwiO1xuICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzID0gXCJcIjtcbiAgICBuID0gMDtcbiAgICAvLyB3ZSBhcmUgZ29pbmcgdG8gc3RvcmUgdGhlIGRlcGVuZGVuY2llcyBfb2YgdGhlIGJsb2NrIGFzIGEgd2hvbGVfXG4gICAgLy8gc28gYWxsIGFmZmVjdGVkIHZhcmlhYmxlcyBpbiB0aGUgd2hvbGUgYmxvY2sgYXJlIGx1bXBlZFxuICAgIC8vIHRvZ2V0aGVyLCBhbmQgc2FtZSBmb3IgdGhlIHZhcmlhYmxlIHRoYXQgYWZmZWN0IHRob3NlLCB3ZVxuICAgIC8vIGx1bXAgdGhlbSBhbGwgdG9nZXRoZXIuXG4gICAgZGVwZW5kZW5jeUluZm8gPSB7XG4gICAgICBhZmZlY3RzVmFyaWFibGVzOiBbXSxcbiAgICAgIGFmZmVjdGVkQnk6IFtdXG4gICAgfTtcbiAgICBzdHJpbmdUb0JlUnVuID0gc3RyaW5nVG9CZVBhcnNlZDtcbiAgICAvLyBwYXJzZSB0aGUgaW5wdXQuIFRoaXMgY29sbGVjdHMgdGhlXG4gICAgLy8gZGVwZW5kZW5jeSBpbmZvcm1hdGlvblxuICAgIHdoaWxlICgxKSB7XG4gICAgICB0cnkge1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICBjaGVja19zdGFjaygpO1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZpbmREZXBlbmRlbmNpZXNJblNjcmlwdDogc2Nhbm5pbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IHNjYW4oc3RyaW5nVG9CZVBhcnNlZC5zdWJzdHJpbmcoaW5kZXhPZlBhcnRSZW1haW5pbmdUb0JlUGFyc2VkKSk7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic2Nhbm5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBwb3AoKTtcbiAgICAgICAgY2hlY2tfc3RhY2soKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICBlcnJvciA9IGVycm9yMTtcbiAgICAgICAgaWYgKFBSSU5UT1VUUkVTVUxUKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IGVycm9yICsgXCJcIjtcbiAgICAgICAgLy9kZWJ1Z2dlclxuICAgICAgICByZXNldF9hZnRlcl9lcnJvcigpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXhPZlBhcnRSZW1haW5pbmdUb0JlUGFyc2VkICs9IG47XG4gICAgfVxuICAgIHRlc3RhYmxlU3RyaW5nID0gXCJcIjtcbiAgICAvLyBwcmludCBvdXQgYWxsIGxvY2FsIGRlcGVuZGVuY2llcyBhcyBjb2xsZWN0ZWQgYnkgdGhpc1xuICAgIC8vIHBhcnNpbmcgcGFzc1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJhbGwgbG9jYWwgZGVwZW5kZW5jaWVzIC0tLS0tLS0tLS0tLS0tLS1cIik7XG4gICAgfVxuICAgIHRlc3RhYmxlU3RyaW5nICs9IFwiQWxsIGxvY2FsIGRlcGVuZGVuY2llczogXCI7XG4gICAgZm9yIChrZXkgaW4gc3ltYm9sc0RlcGVuZGVuY2llcykge1xuICAgICAgdmFsdWUgPSBzeW1ib2xzRGVwZW5kZW5jaWVzW2tleV07XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ2YXJpYWJsZSBcIiArIGtleSArIFwiIGRlcGVuZHMgb246IFwiKTtcbiAgICAgIH1cbiAgICAgIGRlcGVuZGVuY3lJbmZvLmFmZmVjdHNWYXJpYWJsZXMucHVzaChrZXkpO1xuICAgICAgdGVzdGFibGVTdHJpbmcgKz0gXCIgdmFyaWFibGUgXCIgKyBrZXkgKyBcIiBkZXBlbmRzIG9uOiBcIjtcbiAgICAgIGZvciAobDEgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGwxIDwgbGVuOyBsMSsrKSB7XG4gICAgICAgIGkgPSB2YWx1ZVtsMV07XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiICAgIFwiICsgaSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlbMF0gIT09IFwiJ1wiKSB7XG4gICAgICAgICAgZGVwZW5kZW5jeUluZm8uYWZmZWN0ZWRCeS5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIHRlc3RhYmxlU3RyaW5nICs9IGkgKyBcIiwgXCI7XG4gICAgICB9XG4gICAgICB0ZXN0YWJsZVN0cmluZyArPSBcIjsgXCI7XG4gICAgfVxuICAgIHRlc3RhYmxlU3RyaW5nICs9IFwiLiBcIjtcbiAgICAvLyBwcmludCBvdXQgdGhlIHN5bWJvbHMgd2l0aCByZS1hc3NpZ25tZW50czpcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiU3ltYm9scyB3aXRoIHJlYXNzaWdubWVudHMgLS0tLS0tLS0tLS0tLS0tLVwiKTtcbiAgICB9XG4gICAgdGVzdGFibGVTdHJpbmcgKz0gXCJTeW1ib2xzIHdpdGggcmVhc3NpZ25tZW50czogXCI7XG4gICAgZm9yIChtMSA9IDAsIGxlbjEgPSBzeW1ib2xzSGF2aW5nUmVhc3NpZ25tZW50cy5sZW5ndGg7IG0xIDwgbGVuMTsgbTErKykge1xuICAgICAga2V5ID0gc3ltYm9sc0hhdmluZ1JlYXNzaWdubWVudHNbbTFdO1xuICAgICAgaWYgKGRlcGVuZGVuY3lJbmZvLmFmZmVjdGVkQnkuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICBkZXBlbmRlbmN5SW5mby5hZmZlY3RlZEJ5LnB1c2goa2V5KTtcbiAgICAgICAgdGVzdGFibGVTdHJpbmcgKz0ga2V5ICsgXCIsIFwiO1xuICAgICAgfVxuICAgIH1cbiAgICB0ZXN0YWJsZVN0cmluZyArPSBcIi4gXCI7XG4gICAgLy8gcHJpbnQgb3V0IHRoZSBzeW1ib2xzIHRoYXQgYXBwZWFyIGluIGV4cHJlc3Npb25zIHdpdGhvdXQgYXNzaWdubWVudHNcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiU3ltYm9scyBpbiBleHByZXNzaW9ucyB3aXRob3V0IGFzc2lnbm1lbnRzIC0tLS0tLS0tLS0tLS0tLS1cIik7XG4gICAgfVxuICAgIHRlc3RhYmxlU3RyaW5nICs9IFwiU3ltYm9scyBpbiBleHByZXNzaW9ucyB3aXRob3V0IGFzc2lnbm1lbnRzOiBcIjtcbiAgICBmb3IgKG4xID0gMCwgbGVuMiA9IHN5bWJvbHNJbkV4cHJlc3Npb25zV2l0aG91dEFzc2lnbm1lbnRzLmxlbmd0aDsgbjEgPCBsZW4yOyBuMSsrKSB7XG4gICAgICBrZXkgPSBzeW1ib2xzSW5FeHByZXNzaW9uc1dpdGhvdXRBc3NpZ25tZW50c1tuMV07XG4gICAgICBpZiAoZGVwZW5kZW5jeUluZm8uYWZmZWN0ZWRCeS5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgIGRlcGVuZGVuY3lJbmZvLmFmZmVjdGVkQnkucHVzaChrZXkpO1xuICAgICAgICB0ZXN0YWJsZVN0cmluZyArPSBrZXkgKyBcIiwgXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHRlc3RhYmxlU3RyaW5nICs9IFwiLiBcIjtcbiAgICAvLyBBTEwgQWxnZWJyaXRlIGNvZGUgaXMgYWZmZWN0ZWQgYnkgYW55IHBhdHRlcm4gY2hhbmdpbmdcbiAgICBkZXBlbmRlbmN5SW5mby5hZmZlY3RlZEJ5LnB1c2goXCJQQVRURVJOX0RFUEVOREVOQ1lcIik7XG4gICAgaWYgKHBhdHRlcm5IYXNCZWVuRm91bmQpIHtcbiAgICAgIGRlcGVuZGVuY3lJbmZvLmFmZmVjdHNWYXJpYWJsZXMucHVzaChcIlBBVFRFUk5fREVQRU5ERU5DWVwiKTtcbiAgICAgIHRlc3RhYmxlU3RyaW5nICs9IFwiIC0gUEFUVEVSTl9ERVBFTkRFTkNZIGluc2VydGVkIC0gXCI7XG4gICAgfVxuICAgIC8vIHByaW50IG91dCBhbGwgZ2xvYmFsIGRlcGVuZGVuY2llcyBhcyBjb2xsZWN0ZWQgYnkgdGhpc1xuICAgIC8vIHBhcnNpbmcgcGFzc1xuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJBbGwgZGVwZW5kZW5jaWVzIHJlY3Vyc2l2ZWx5IC0tLS0tLS0tLS0tLS0tLS1cIik7XG4gICAgfVxuICAgIHRlc3RhYmxlU3RyaW5nICs9IFwiQWxsIGRlcGVuZGVuY2llcyByZWN1cnNpdmVseTogXCI7XG4gICAgc2NyaXB0RXZhbHVhdGlvbiA9IFtcIlwiLCBcIlwiXTtcbiAgICBnZW5lcmF0ZWRDb2RlID0gXCJcIjtcbiAgICByZWFkYWJsZVN1bW1hcnlPZkdlbmVyYXRlZENvZGUgPSBcIlwiO1xuICAgIGlmIChlcnJvck1lc3NhZ2UgPT09IFwiXCIgJiYgIWRvbnRHZW5lcmF0ZUNvZGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGFsbFJldHVybmVkUGxhaW5TdHJpbmdzID0gXCJcIjtcbiAgICAgICAgYWxsUmV0dXJuZWRMYXRleFN0cmluZ3MgPSBcIlwiO1xuICAgICAgICBzY3JpcHRFdmFsdWF0aW9uID0gcnVuKHN0cmluZ1RvQmVQYXJzZWQsIHRydWUpO1xuICAgICAgICBhbGxSZXR1cm5lZFBsYWluU3RyaW5ncyA9IFwiXCI7XG4gICAgICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzID0gXCJcIjtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICBlcnJvciA9IGVycm9yMTtcbiAgICAgICAgaWYgKFBSSU5UT1VUUkVTVUxUKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IGVycm9yICsgXCJcIjtcbiAgICAgICAgLy9kZWJ1Z2dlclxuICAgICAgICBpbml0KCk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3JNZXNzYWdlID09PSBcIlwiKSB7XG4gICAgICAgIGZvciAoa2V5IGluIHN5bWJvbHNEZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICBjb2RlR2VuID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiICB2YXJpYWJsZSBcIiArIGtleSArIFwiIGlzOiBcIiArIGdldF9iaW5kaW5nKHVzcl9zeW1ib2woa2V5KSkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvZGVHZW4gPSBmYWxzZTtcbiAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiICB2YXJpYWJsZSBcIiArIGtleSArIFwiIGRlcGVuZHMgb246IFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGVzdGFibGVTdHJpbmcgKz0gXCIgdmFyaWFibGUgXCIgKyBrZXkgKyBcIiBkZXBlbmRzIG9uOiBcIjtcbiAgICAgICAgICByZWN1cnNlZERlcGVuZGVuY2llcyA9IFtdO1xuICAgICAgICAgIHZhcmlhYmxlc1dpdGhDeWNsZXMgPSBbXTtcbiAgICAgICAgICBjeWNsZXNEZXNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgICByZWN1cnNpdmVEZXBlbmRlbmNpZXMoa2V5LCByZWN1cnNlZERlcGVuZGVuY2llcywgW10sIHZhcmlhYmxlc1dpdGhDeWNsZXMsIFtdLCBjeWNsZXNEZXNjcmlwdGlvbnMpO1xuICAgICAgICAgIGZvciAobzEgPSAwLCBsZW4zID0gdmFyaWFibGVzV2l0aEN5Y2xlcy5sZW5ndGg7IG8xIDwgbGVuMzsgbzErKykge1xuICAgICAgICAgICAgaSA9IHZhcmlhYmxlc1dpdGhDeWNsZXNbbzFdO1xuICAgICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiICAgIC0tPiBjeWNsZSB0aHJvdWdoIFwiICsgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAocTEgPSAwLCBsZW40ID0gcmVjdXJzZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBxMSA8IGxlbjQ7IHExKyspIHtcbiAgICAgICAgICAgIGkgPSByZWN1cnNlZERlcGVuZGVuY2llc1txMV07XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIgICAgXCIgKyBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlc3RhYmxlU3RyaW5nICs9IGkgKyBcIiwgXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRlc3RhYmxlU3RyaW5nICs9IFwiOyBcIjtcbiAgICAgICAgICBmb3IgKHIxID0gMCwgbGVuNSA9IGN5Y2xlc0Rlc2NyaXB0aW9ucy5sZW5ndGg7IHIxIDwgbGVuNTsgcjErKykge1xuICAgICAgICAgICAgaSA9IGN5Y2xlc0Rlc2NyaXB0aW9uc1tyMV07XG4gICAgICAgICAgICB0ZXN0YWJsZVN0cmluZyArPSBcIiBcIiArIGkgKyBcIiwgXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgIGNvZGUgZ2VuZXJhdGlvbjpcIiArIGtleSArIFwiIGlzOiBcIiArIGdldF9iaW5kaW5nKHVzcl9zeW1ib2woa2V5KSkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHJlYWxseSB3YW50IHRvIG1ha2UgYW4gZXh0cmEgZWZmb3J0XG4gICAgICAgICAgLy8gdG8gZ2VuZXJhdGUgc2ltcGxpZmllZCBjb2RlLCBzb1xuICAgICAgICAgIC8vIHJ1biBhIFwic2ltcGxpZnlcIiBvbiB0aGUgY29udGVudCBvZiBlYWNoXG4gICAgICAgICAgLy8gdmFyaWFibGUgdGhhdCB3ZSBhcmUgZ2VuZXJhdGluZyBjb2RlIGZvci5cbiAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhlIHZhcmlhYmxlXG4gICAgICAgICAgLy8gd2lsbCBzdGlsbCBwb2ludCB0byB1bi1zaW1wbGlmaWVkIHN0cnVjdHVyZXMsXG4gICAgICAgICAgLy8gd2Ugb25seSBzaW1wbGlmeSB0aGUgZ2VuZXJhdGVkIGNvZGUuXG4gICAgICAgICAgcHVzaChnZXRfYmluZGluZyh1c3Jfc3ltYm9sKGtleSkpKTtcbiAgICAgICAgICAvLyBTaW5jZSB3ZSBnbyBhbmQgc2ltcGxpZnkgYWxsIHZhcmlhYmxlcyB3ZSBtZWV0LFxuICAgICAgICAgIC8vIHdlIGhhdmUgdG8gcmVwbGFjZSBlYWNoIHZhcmlhYmxlIHBhc3NlZCBhcyBhIHBhcmFtZXRlclxuICAgICAgICAgIC8vIHdpdGggc29tZXRoaW5nIGVudGlyZWx5IG5ldywgc28gdGhhdCB0aGVyZSBpcyBubyBjaGFuY2VcbiAgICAgICAgICAvLyB0aGF0IGl0IG1pZ2h0IGV2b2tlIHByZXZpb3VzIHZhbHVlcyBpbiB0aGUgZXh0ZXJuYWwgc2NvcGVcbiAgICAgICAgICAvLyBhcyBpbiB0aGlzIGNhc2U6XG4gICAgICAgICAgLy8gIGEgPSAyXG4gICAgICAgICAgLy8gIGYoYSkgPSBhKzErYlxuICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgJ2EnIGluIHRoZSBib2R5IG9mIGYgdG8gYmUgc2ltcGxpZmllZCB0byAyXG4gICAgICAgICAgLy8gVGhlcmUgYXJlIHR3byBjYXNlczogMSkgdGhlIHZhcmlhYmxlIGFjdHVhbGx5IHdhcyBhbHJlYWR5IGluXG4gICAgICAgICAgLy8gdGhlIHN5bWJvbCB0YWJsZSwgaW4gd2hpY2ggY2FzZSB0aGVyZSBpcyBnb2luZyB0byBiZSB0aGlzIG5ld1xuICAgICAgICAgIC8vIG9uZSBwcmVwZW5kZWQgd2l0aCBBVk9JRF9CSU5ESU5HX1RPX0VYVEVSTkFMX1NDT1BFX1ZBTFVFLCBhbmRcbiAgICAgICAgICAvLyB3ZSdsbCBoYXZlIHRvIHJlbW92ZSB1cCB0aGlzIHZhcmlhYmxlIGxhdGVyLlxuICAgICAgICAgIC8vIE9SIDIpIHRoZSB2YXJpYWJsZSB3YXNuJ3QgYWxyZWFkeSBpbiB0aGUgc3ltYm9sIHRhYmxlLCBpbiB3aGljaFxuICAgICAgICAgIC8vIGNhc2Ugd2UgZGlyZWN0bHkgY3JlYXRlIHRoaXMgb25lLCB3aGljaCBtZWFucyB0aGF0IHdlJ2xsIGhhdmVcbiAgICAgICAgICAvLyB0byByZW5hbWUgaXQgbGF0ZXIgdG8gdGhlIGNvcnJlY3QgbmFtZSB3aXRob3V0IHRoZSBwcmVwZW5kZWRcbiAgICAgICAgICAvLyBwYXJ0LlxuICAgICAgICAgIHJlcGxhY2VtZW50c0Zyb20gPSBbXTtcbiAgICAgICAgICByZXBsYWNlbWVudHNUbyA9IFtdO1xuICAgICAgICAgIGZvciAoczEgPSAwLCBsZW42ID0gcmVjdXJzZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBzMSA8IGxlbjY7IHMxKyspIHtcbiAgICAgICAgICAgIGVhY2hEZXBlbmRlbmN5ID0gcmVjdXJzZWREZXBlbmRlbmNpZXNbczFdO1xuICAgICAgICAgICAgaWYgKGVhY2hEZXBlbmRlbmN5WzBdID09PSBcIidcIikge1xuICAgICAgICAgICAgICBkZVF1b3RlZERlcCA9IGVhY2hEZXBlbmRlbmN5LnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgICAgb3JpZ2luYWxVc2VyU3ltYm9sID0gdXNyX3N5bWJvbChkZVF1b3RlZERlcCk7XG4gICAgICAgICAgICAgIG5ld1VzZXJTeW1ib2wgPSB1c3Jfc3ltYm9sKFwiQVZPSURfQklORElOR19UT19FWFRFUk5BTF9TQ09QRV9WQUxVRVwiICsgZGVRdW90ZWREZXApO1xuICAgICAgICAgICAgICByZXBsYWNlbWVudHNGcm9tLnB1c2gob3JpZ2luYWxVc2VyU3ltYm9sKTtcbiAgICAgICAgICAgICAgcmVwbGFjZW1lbnRzVG8ucHVzaChuZXdVc2VyU3ltYm9sKTtcbiAgICAgICAgICAgICAgcHVzaChvcmlnaW5hbFVzZXJTeW1ib2wpO1xuICAgICAgICAgICAgICBwdXNoKG5ld1VzZXJTeW1ib2wpO1xuICAgICAgICAgICAgICBzdWJzdCgpO1xuICAgICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFmdGVyIHN1YnN0aXR1dGlvbjogXCIgKyBzdGFja1t0b3MgLSAxXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNpbXBsaWZ5Rm9yQ29kZUdlbmVyYXRpb24oKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgICAgICAgaWYgKFBSSU5UT1VUUkVTVUxUKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGVycm9yICsgXCJcIjtcbiAgICAgICAgICAgIC8vZGVidWdnZXJcbiAgICAgICAgICAgIGluaXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChpbmRleE9mRWFjaFJlcGxhY2VtZW50ID0gdDEgPSAwLCByZWYyID0gcmVwbGFjZW1lbnRzRnJvbS5sZW5ndGg7ICgwIDw9IHJlZjIgPyB0MSA8IHJlZjIgOiB0MSA+IHJlZjIpOyBpbmRleE9mRWFjaFJlcGxhY2VtZW50ID0gMCA8PSByZWYyID8gKyt0MSA6IC0tdDEpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cgXCJyZXBsYWNpbmcgYmFjayBcIiArIHJlcGxhY2VtZW50c1RvW2luZGV4T2ZFYWNoUmVwbGFjZW1lbnRdICsgXCIgaW50bzogXCIgKyByZXBsYWNlbWVudHNGcm9tW2luZGV4T2ZFYWNoUmVwbGFjZW1lbnRdXG4gICAgICAgICAgICBwdXNoKHJlcGxhY2VtZW50c1RvW2luZGV4T2ZFYWNoUmVwbGFjZW1lbnRdKTtcbiAgICAgICAgICAgIHB1c2gocmVwbGFjZW1lbnRzRnJvbVtpbmRleE9mRWFjaFJlcGxhY2VtZW50XSk7XG4gICAgICAgICAgICBzdWJzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjbGVhclJlbmFtZWRWYXJpYWJsZXNUb0F2b2lkQmluZGluZ1RvRXh0ZXJuYWxTY29wZSgpO1xuICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHRvQmVQcmludGVkID0gcG9wKCk7XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIGdldCBhbGwgdGhlIHZhcmlhYmxlcyB1c2VkIG9uIHRoZSByaWdodCBzaWRlXG4gICAgICAgICAgICAvLyBoZXJlLiBJLmUuIHRvIHByaW50IHRoZSBhcmd1bWVudHMgaXQncyBiZXR0ZXIgdG8gbG9vayBhdCB0aGVcbiAgICAgICAgICAgIC8vIGFjdHVhbCBtZXRob2QgYm9keSBhZnRlciBzaW1wbGlmaWNhdGlvbi5cbiAgICAgICAgICAgIHVzZXJWYXJpYWJsZXNNZW50aW9uZWQgPSBbXTtcbiAgICAgICAgICAgIGNvbGxlY3RVc2VyU3ltYm9scyh0b0JlUHJpbnRlZCwgdXNlclZhcmlhYmxlc01lbnRpb25lZCk7XG4gICAgICAgICAgICBhbGxSZXR1cm5lZFBsYWluU3RyaW5ncyA9IFwiXCI7XG4gICAgICAgICAgICBhbGxSZXR1cm5lZExhdGV4U3RyaW5ncyA9IFwiXCI7XG4gICAgICAgICAgICBjb2RlR2VuID0gdHJ1ZTtcbiAgICAgICAgICAgIGdlbmVyYXRlZEJvZHkgPSB0b0JlUHJpbnRlZC50b1N0cmluZygpO1xuICAgICAgICAgICAgY29kZUdlbiA9IGZhbHNlO1xuICAgICAgICAgICAgb3JpZ1ByaW50TW9kZSA9IHByaW50TW9kZTtcbiAgICAgICAgICAgIHByaW50TW9kZSA9IFBSSU5UTU9ERV9MQVRFWDtcbiAgICAgICAgICAgIGJvZHlGb3JSZWFkYWJsZVN1bW1hcnlPZkdlbmVyYXRlZENvZGUgPSB0b0JlUHJpbnRlZC50b1N0cmluZygpO1xuICAgICAgICAgICAgcHJpbnRNb2RlID0gb3JpZ1ByaW50TW9kZTtcbiAgICAgICAgICAgIGlmICh2YXJpYWJsZXNXaXRoQ3ljbGVzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgZ2VuZXJhdGVkQ29kZSArPSBcIi8vIFwiICsga2V5ICsgXCIgaXMgcGFydCBvZiBhIGN5Y2xpYyBkZXBlbmRlbmN5LCBubyBjb2RlIGdlbmVyYXRlZC5cIjtcbiAgICAgICAgICAgICAgcmVhZGFibGVTdW1tYXJ5T2ZHZW5lcmF0ZWRDb2RlICs9IFwiI1wiICsga2V5ICsgXCIgaXMgcGFydCBvZiBhIGN5Y2xpYyBkZXBlbmRlbmN5LCBubyBjb2RlIGdlbmVyYXRlZC5cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAqIHVzaW5nIHRoaXMgcGFyYWdyYXBoIGluc3RlYWQgb2YgdGhlIGZvbGxvd2luZyBvbmVcbiAgICAgICAgICAgICAgICogY3JlYXRlcyBtZXRob2RzIHNpZ25hdHVyZXMgdGhhdFxuICAgICAgICAgICAgICAgKiBhcmUgc2xpZ2h0bHkgbGVzcyBlZmZpY2llbnRcbiAgICAgICAgICAgICAgICogaS5lLiB2YXJpYWJsZXMgY29tcGFyZSBldmVuIGlmIHRoZXkgYXJlXG4gICAgICAgICAgICAgICAqIHNpbXBsaWZpZWQgYXdheS5cbiAgICAgICAgICAgICAgICogSW4gdGhlb3J5IHRoZXNlIHNpZ25hdHVyZXMgYXJlIG1vcmUgc3RhYmxlLCBidXRcbiAgICAgICAgICAgICAgICogaW4gcHJhY3RpY2Ugc2lnbmF0dXJlcyB2YXJ5IHF1aXRlIGEgYml0IGFueXdheXNcbiAgICAgICAgICAgICAgICogZGVwZW5kaW5nIG9uIHByZXZpb3VzIGFzc2lnbm1lbnRzIGZvciBleGFtcGxlLFxuICAgICAgICAgICAgICAgKiBzbyBpdCdzIHVuY2xlYXIgd2hldGhlciBnb2luZyBmb3Igc3RhYmlsaXR5XG4gICAgICAgICAgICAgICAqIGlzIHNlbnNpYmxlIGF0IGFsbC4uXG4gICAgICAgICAgICAgIGlmIHJlY3Vyc2VkRGVwZW5kZW5jaWVzLmxlbmd0aCAhPSAwXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycyA9IFwiKFwiXG4gICAgICAgICAgICAgICAgZm9yIGkgaW4gcmVjdXJzZWREZXBlbmRlbmNpZXNcbiAgICAgICAgICAgICAgICAgIGlmIGkuaW5kZXhPZihcIidcIikgIT0gMFxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzICs9IGkgKyBcIiwgXCJcbiAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgcmVjdXJzZWREZXBlbmRlbmNpZXMuaW5kZXhPZihpLnN1YnN0cmluZygxKSkgPT0gLTFcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzICs9IGkuc3Vic3RyaW5nKDEpICsgXCIsIFwiXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAvLyByZW1vdmUgYWxsIG5hdGl2ZSBmdW5jdGlvbnMgZnJvbSB0aGVcbiAgICAgICAgICAgICAgLy8gcGFyYW1ldGVycyBhcyB3ZWxsLlxuICAgICAgICAgICAgICB1c2VyVmFyaWFibGVzTWVudGlvbmVkID0gdXNlclZhcmlhYmxlc01lbnRpb25lZC5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVkZWZpbmVkU3ltYm9sc0luR2xvYmFsU2NvcGVfZG9Ob3RUcmFja0luRGVwZW5kZW5jaWVzLmluZGV4T2YoeCArIFwiXCIpID09PSAtMTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgdmFyaWFibGUgdGhhdCBhcmUgbm90IGluIHRoZSBkZXBlbmRlbmN5IGxpc3RcbiAgICAgICAgICAgICAgLy8gaS5lLiBvbmx5IGFsbG93IHRoZSB2YXJpYWJsZXMgdGhhdCBhcmUgaW4gdGhlIGRlcGVuZGVuY3kgbGlzdFxuICAgICAgICAgICAgICB1c2VyVmFyaWFibGVzTWVudGlvbmVkID0gdXNlclZhcmlhYmxlc01lbnRpb25lZC5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWN1cnNlZERlcGVuZGVuY2llcy5pbmRleE9mKHggKyBcIlwiKSAhPT0gLTEgfHwgcmVjdXJzZWREZXBlbmRlbmNpZXMuaW5kZXhPZihcIlxcJ1wiICsgeCArIFwiXCIpICE9PSAtMTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmICh1c2VyVmFyaWFibGVzTWVudGlvbmVkLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSBcIihcIjtcbiAgICAgICAgICAgICAgICBmb3IgKHUxID0gMCwgbGVuNyA9IHVzZXJWYXJpYWJsZXNNZW50aW9uZWQubGVuZ3RoOyB1MSA8IGxlbjc7IHUxKyspIHtcbiAgICAgICAgICAgICAgICAgIGkgPSB1c2VyVmFyaWFibGVzTWVudGlvbmVkW3UxXTtcbiAgICAgICAgICAgICAgICAgIGlmIChpLnByaW50bmFtZSAhPT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgKz0gaS5wcmludG5hbWUgKyBcIiwgXCI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVsaW1pbmF0ZSB0aGUgbGFzdCBcIiwgXCIgZm9yIHByaW50b3V0IGNsYXJpdHlcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzID0gcGFyYW1ldGVycy5yZXBsYWNlKC8sICQvZ20sIFwiXCIpO1xuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgKz0gXCIpXCI7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVkQ29kZSArPSBrZXkgKyBcIiA9IGZ1bmN0aW9uIFwiICsgcGFyYW1ldGVycyArIFwiIHsgcmV0dXJuICggXCIgKyBnZW5lcmF0ZWRCb2R5ICsgXCIgKTsgfVwiO1xuICAgICAgICAgICAgICAgIHJlYWRhYmxlU3VtbWFyeU9mR2VuZXJhdGVkQ29kZSArPSBrZXkgKyBwYXJhbWV0ZXJzICsgXCIgPSBcIiArIGJvZHlGb3JSZWFkYWJsZVN1bW1hcnlPZkdlbmVyYXRlZENvZGU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVkQ29kZSArPSBrZXkgKyBcIiA9IFwiICsgZ2VuZXJhdGVkQm9keSArIFwiO1wiO1xuICAgICAgICAgICAgICAgIHJlYWRhYmxlU3VtbWFyeU9mR2VuZXJhdGVkQ29kZSArPSBrZXkgKyBcIiA9IFwiICsgYm9keUZvclJlYWRhYmxlU3VtbWFyeU9mR2VuZXJhdGVkQ29kZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2VuZXJhdGVkQ29kZSArPSBcIlxcblwiO1xuICAgICAgICAgICAgcmVhZGFibGVTdW1tYXJ5T2ZHZW5lcmF0ZWRDb2RlICs9IFwiXFxuXCI7XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIgICAgXCIgKyBnZW5lcmF0ZWRDb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZWxpbWluYXRlIHRoZSBsYXN0IG5ldyBsaW5lXG4gICAgZ2VuZXJhdGVkQ29kZSA9IGdlbmVyYXRlZENvZGUucmVwbGFjZSgvXFxuJC9nbSwgXCJcIik7XG4gICAgcmVhZGFibGVTdW1tYXJ5T2ZHZW5lcmF0ZWRDb2RlID0gcmVhZGFibGVTdW1tYXJ5T2ZHZW5lcmF0ZWRDb2RlLnJlcGxhY2UoL1xcbiQvZ20sIFwiXCIpO1xuICAgIC8vIGNsZWFudXBcbiAgICBzeW1ib2xzRGVwZW5kZW5jaWVzID0ge307XG4gICAgc3ltYm9sc0hhdmluZ1JlYXNzaWdubWVudHMgPSBbXTtcbiAgICBwYXR0ZXJuSGFzQmVlbkZvdW5kID0gZmFsc2U7XG4gICAgc3ltYm9sc0luRXhwcmVzc2lvbnNXaXRob3V0QXNzaWdubWVudHMgPSBbXTtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwidGVzdGFibGUgc3RyaW5nOiBcIiArIHRlc3RhYmxlU3RyaW5nKTtcbiAgICB9XG4gICAgaWYgKFRJTUlOR19ERUJVR1MpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZmluZERlcGVuZGVuY2llc0luU2NyaXB0IHRpbWUgZm9yOiBcIiArIHN0cmluZ1RvQmVSdW4gKyBcIiA6IFwiICsgKChuZXcgRGF0ZSgpLmdldFRpbWUoKSkgLSB0aW1lU3RhcnRGcm9tQWxnZWJyYSkgKyBcIm1zXCIpO1xuICAgIH1cbiAgICByZXR1cm4gW3Rlc3RhYmxlU3RyaW5nLCBzY3JpcHRFdmFsdWF0aW9uWzBdLCBnZW5lcmF0ZWRDb2RlLCByZWFkYWJsZVN1bW1hcnlPZkdlbmVyYXRlZENvZGUsIHNjcmlwdEV2YWx1YXRpb25bMV0sIGVycm9yTWVzc2FnZSwgZGVwZW5kZW5jeUluZm9dO1xuICB9O1xuXG4gIHJlY3Vyc2l2ZURlcGVuZGVuY2llcyA9IGZ1bmN0aW9uKHZhcmlhYmxlVG9CZUNoZWNrZWQsIGFycmF5V2hlcmVEZXBlbmRlbmNpZXNXaWxsQmVBZGRlZCwgdmFyaWFibGVzQWxyZWFkeUZsZXNoZWRPdXQsIHZhcmlhYmxlc1dpdGhDeWNsZXMsIGNoYWluQmVpbmdDaGVja2VkLCBjeWNsZXNEZXNjcmlwdGlvbnMpIHtcbiAgICB2YXIgY3ljbGVzRGVzY3JpcHRpb24sIGksIGssIGwxLCBsZW4sIGxlbjEsIG0xLCByZWYyO1xuICAgIHZhcmlhYmxlc0FscmVhZHlGbGVzaGVkT3V0LnB1c2godmFyaWFibGVUb0JlQ2hlY2tlZCk7XG4gICAgLy8gcmVjdXJzaXZlIGRlcGVuZGVuY2llcyBjYW4gb25seSBiZSBkZXNjZW5kZWQgaWYgdGhlIHZhcmlhYmxlIGlzIG5vdCBib3VuZCB0byBhIHBhcmFtZXRlclxuICAgIGlmIChzeW1ib2xzRGVwZW5kZW5jaWVzW2NoYWluQmVpbmdDaGVja2VkW2NoYWluQmVpbmdDaGVja2VkLmxlbmd0aCAtIDFdXSAhPSBudWxsKSB7XG4gICAgICBpZiAoc3ltYm9sc0RlcGVuZGVuY2llc1tjaGFpbkJlaW5nQ2hlY2tlZFtjaGFpbkJlaW5nQ2hlY2tlZC5sZW5ndGggLSAxXV0uaW5kZXhPZihcIidcIiArIHZhcmlhYmxlVG9CZUNoZWNrZWQpICE9PSAtMSkge1xuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImNhbid0IGtlZXAgZm9sbG93aW5nIHRoZSBjaGFpbiBvZiBcIiArIHZhcmlhYmxlVG9CZUNoZWNrZWQgKyBcIiBiZWNhdXNlIGl0J3MgYWN0dWFsbHkgYSB2YXJpYWJsZSBib3VuZCB0byBhIHBhcmFtZXRlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJyYXlXaGVyZURlcGVuZGVuY2llc1dpbGxCZUFkZGVkLmluZGV4T2YoXCInXCIgKyB2YXJpYWJsZVRvQmVDaGVja2VkKSA9PT0gLTEgJiYgYXJyYXlXaGVyZURlcGVuZGVuY2llc1dpbGxCZUFkZGVkLmluZGV4T2YodmFyaWFibGVUb0JlQ2hlY2tlZCkgPT09IC0xKSB7XG4gICAgICAgICAgYXJyYXlXaGVyZURlcGVuZGVuY2llc1dpbGxCZUFkZGVkLnB1c2godmFyaWFibGVUb0JlQ2hlY2tlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5V2hlcmVEZXBlbmRlbmNpZXNXaWxsQmVBZGRlZDtcbiAgICAgIH1cbiAgICB9XG4gICAgY2hhaW5CZWluZ0NoZWNrZWQucHVzaCh2YXJpYWJsZVRvQmVDaGVja2VkKTtcbiAgICBpZiAoc3ltYm9sc0RlcGVuZGVuY2llc1t2YXJpYWJsZVRvQmVDaGVja2VkXSA9PSBudWxsKSB7XG4gICAgICAvLyBlbmQgY2FzZTogdGhlIHBhc3NlZCB2YXJpYWJsZSBoYXMgbm8gZGVwZW5kZW5jaWVzXG4gICAgICAvLyBzbyB0aGVyZSBpcyBub3RoaW5nIGVsc2UgdG8gZG9cbiAgICAgIGlmIChhcnJheVdoZXJlRGVwZW5kZW5jaWVzV2lsbEJlQWRkZWQuaW5kZXhPZih2YXJpYWJsZVRvQmVDaGVja2VkKSA9PT0gLTEpIHtcbiAgICAgICAgYXJyYXlXaGVyZURlcGVuZGVuY2llc1dpbGxCZUFkZGVkLnB1c2godmFyaWFibGVUb0JlQ2hlY2tlZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlXaGVyZURlcGVuZGVuY2llc1dpbGxCZUFkZGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWYyID0gc3ltYm9sc0RlcGVuZGVuY2llc1t2YXJpYWJsZVRvQmVDaGVja2VkXTtcbiAgICAgIC8vIHJlY3Vyc2lvbiBjYXNlOiB3ZSBoYXZlIHRvIGRpZyBkZWVwZXJcbiAgICAgIGZvciAobDEgPSAwLCBsZW4gPSByZWYyLmxlbmd0aDsgbDEgPCBsZW47IGwxKyspIHtcbiAgICAgICAgaSA9IHJlZjJbbDFdO1xuICAgICAgICAvLyBjaGVjayB0aGF0IHRoZXJlIGlzIG5vIHJlY3Vyc2lvbiBpbiBkZXBlbmRlbmNpZXNcbiAgICAgICAgLy8gd2UgZG8gdGhhdCBieSBrZWVwaW5nIGEgbGlzdCBvZiB2YXJpYWJsZXMgdGhhdFxuICAgICAgICAvLyBoYXZlIGFscmVhZHkgYmVlbiBcImZsZXNoZWQtb3V0XCIuIElmIHdlIGVuY291bnRlclxuICAgICAgICAvLyBhbnkgb2YgdGhvc2UgXCJmbGVzaGVkLW91dFwiIHZhcmlhYmxlcyB3aGlsZVxuICAgICAgICAvLyBmbGVzaGluZyBvdXQsIHRoZW4gdGhlcmUgaXMgYSBjeWNsZSBcbiAgICAgICAgaWYgKGNoYWluQmVpbmdDaGVja2VkLmluZGV4T2YoaSkgIT09IC0xKSB7XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIiAgZm91bmQgY3ljbGU6XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjeWNsZXNEZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgICAgICAgZm9yIChtMSA9IDAsIGxlbjEgPSBjaGFpbkJlaW5nQ2hlY2tlZC5sZW5ndGg7IG0xIDwgbGVuMTsgbTErKykge1xuICAgICAgICAgICAgayA9IGNoYWluQmVpbmdDaGVja2VkW20xXTtcbiAgICAgICAgICAgIGlmICh2YXJpYWJsZXNXaXRoQ3ljbGVzLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHZhcmlhYmxlc1dpdGhDeWNsZXMucHVzaChrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhrICsgXCIgLS0+IFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN5Y2xlc0Rlc2NyaXB0aW9uICs9IGsgKyBcIiAtLT4gXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgLi4uIHRoZW4gXCIgKyBpICsgXCIgYWdhaW5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN5Y2xlc0Rlc2NyaXB0aW9uICs9IFwiIC4uLiB0aGVuIFwiICsgaSArIFwiIGFnYWluXCI7XG4gICAgICAgICAgY3ljbGVzRGVzY3JpcHRpb25zLnB1c2goY3ljbGVzRGVzY3JpcHRpb24pO1xuICAgICAgICAgIC8vaWYgREVCVUcgdGhlbiBjb25zb2xlLmxvZyBcIiAgICAtLT4gY3ljbGUgdGhyb3VnaCBcIiArIGlcbiAgICAgICAgICAvLyB3ZSB3YW50IHRvIGZsZXNoLW91dCBpIGJ1dCBpdCdzIGFscmVhZHkgYmVlblxuICAgICAgICAgIC8vIGZsZXNoZWQtb3V0LCBqdXN0IGFkZCBpdCB0byB0aGUgdmFyaWFibGVzXG4gICAgICAgICAgLy8gd2l0aCBjeWNsZXMgYW5kIG1vdmUgb25cbiAgICAgICAgICAvLyB0b2RvIHJlZmFjdG9yIHRoaXMsIHRoZXJlIGFyZSB0d28gY29waWVzIG9mIHRoZXNlIHR3byBsaW5lc1xuICAgICAgICAgIGlmICh2YXJpYWJsZXNXaXRoQ3ljbGVzLmluZGV4T2YoaSkgPT09IC0xKSB7XG4gICAgICAgICAgICB2YXJpYWJsZXNXaXRoQ3ljbGVzLnB1c2goaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGZsZXNoLW91dCBpIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgcmVjdXJzaXZlRGVwZW5kZW5jaWVzKGksIGFycmF5V2hlcmVEZXBlbmRlbmNpZXNXaWxsQmVBZGRlZCwgdmFyaWFibGVzQWxyZWFkeUZsZXNoZWRPdXQsIHZhcmlhYmxlc1dpdGhDeWNsZXMsIGNoYWluQmVpbmdDaGVja2VkLCBjeWNsZXNEZXNjcmlwdGlvbnMpO1xuICAgICAgICAgIGNoYWluQmVpbmdDaGVja2VkLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvL3ZhcmlhYmxlc0FscmVhZHlGbGVzaGVkT3V0LnBvcCgpXG4gICAgICByZXR1cm4gYXJyYXlXaGVyZURlcGVuZGVuY2llc1dpbGxCZUFkZGVkO1xuICAgIH1cbiAgfTtcblxuICAvLyBwYXJzZXMgYW5kIHJ1bnMgb25lIHN0YXRlbWVudC9leHByZXNzaW9uIGF0IGEgdGltZVxuICBpbml0ZWQgPSBmYWxzZTtcblxuICBsYXRleEVycm9yU2lnbiA9IFwiXFxcXHJsYXB7XFxcXGxhcmdlXFxcXGNvbG9ye3JlZH1cXFxcYmlndHJpYW5nbGV1cH17XFxcXCBcXFxcIFxcXFx0aW55XFxcXGNvbG9ye3JlZH0hfVwiO1xuXG4gIHR1cm5FcnJvck1lc3NhZ2VUb0xhdGV4ID0gZnVuY3Rpb24odGhlRXJyb3JNZXNzYWdlKSB7XG4gICAgdGhlRXJyb3JNZXNzYWdlID0gdGhlRXJyb3JNZXNzYWdlLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbiAgICB0aGVFcnJvck1lc3NhZ2UgPSB0aGVFcnJvck1lc3NhZ2UucmVwbGFjZSgvXy9nLCBcIn0gXFxcXF8gXFxcXHRleHR7XCIpO1xuICAgIHRoZUVycm9yTWVzc2FnZSA9IHRoZUVycm9yTWVzc2FnZS5yZXBsYWNlKG5ldyBSZWdFeHAoU3RyaW5nLmZyb21DaGFyQ29kZSh0cmFuc3Bvc2VfdW5pY29kZSksICdnJyksIFwifXt9XntUfVxcXFx0ZXh0e1wiKTtcbiAgICB0aGVFcnJvck1lc3NhZ2UgPSB0aGVFcnJvck1lc3NhZ2UucmVwbGFjZShuZXcgUmVnRXhwKFN0cmluZy5mcm9tQ2hhckNvZGUoZG90cHJvZF91bmljb2RlKSwgJ2cnKSwgXCJ9XFxcXGNkb3QgXFxcXHRleHR7XCIpO1xuICAgIHRoZUVycm9yTWVzc2FnZSA9IHRoZUVycm9yTWVzc2FnZS5yZXBsYWNlKFwiU3RvcDpcIiwgXCJ9ICBcXFxccXVhZCBcXFxcdGV4dHtTdG9wOlwiKTtcbiAgICB0aGVFcnJvck1lc3NhZ2UgPSB0aGVFcnJvck1lc3NhZ2UucmVwbGFjZShcIi0+XCIsIFwifSAgXFxcXHJpZ2h0YXJyb3cgXFxcXHRleHR7XCIpO1xuICAgIHRoZUVycm9yTWVzc2FnZSA9IHRoZUVycm9yTWVzc2FnZS5yZXBsYWNlKFwiP1wiLCBcIn1cXFxcZW5zcGFjZSBcIiArIGxhdGV4RXJyb3JTaWduICsgXCIgXFxcXGVuc3BhY2UgIFxcXFx0ZXh0e1wiKTtcbiAgICB0aGVFcnJvck1lc3NhZ2UgPSBcIiQkXFxcXHRleHR7XCIgKyB0aGVFcnJvck1lc3NhZ2UucmVwbGFjZSgvXFxuL2csIFwiXCIpICsgXCJ9JCRcIjtcbiAgICAvL2NvbnNvbGUubG9nIFwidGhlRXJyb3JNZXNzYWdlOiBcIiArIHRoZUVycm9yTWVzc2FnZVxuICAgIHJldHVybiB0aGVFcnJvck1lc3NhZ2U7XG4gIH07XG5cbiAgLy8gdGhlcmUgYXJlIGFyb3VuZCBhIGRvemVuIGRpZmZlcmVudCB1bmljb2RlcyB0aGF0XG4gIC8vIHJlcHJlc2VudCBzb21lIHNvcnQgb2YgbWlkZGxlIGRvdCwgbGV0J3MgY2F0Y2ggdGhlIG1vc3RcbiAgLy8gY29tbW9uIGFuZCB0dXJuIHRoZW0gaW50byB3aGF0IHdlIGNhbiBwcm9jZXNzXG4gIG5vcm1hbGlzZURvdHMgPSBmdW5jdGlvbihzdHJpbmdUb05vcm1hbGlzZSkge1xuICAgIHN0cmluZ1RvTm9ybWFsaXNlID0gc3RyaW5nVG9Ob3JtYWxpc2UucmVwbGFjZShuZXcgUmVnRXhwKFN0cmluZy5mcm9tQ2hhckNvZGUoODkwMSksICdnJyksIFN0cmluZy5mcm9tQ2hhckNvZGUoZG90cHJvZF91bmljb2RlKSk7XG4gICAgc3RyaW5nVG9Ob3JtYWxpc2UgPSBzdHJpbmdUb05vcm1hbGlzZS5yZXBsYWNlKG5ldyBSZWdFeHAoU3RyaW5nLmZyb21DaGFyQ29kZSg4MjI2KSwgJ2cnKSwgU3RyaW5nLmZyb21DaGFyQ29kZShkb3Rwcm9kX3VuaWNvZGUpKTtcbiAgICBzdHJpbmdUb05vcm1hbGlzZSA9IHN0cmluZ1RvTm9ybWFsaXNlLnJlcGxhY2UobmV3IFJlZ0V4cChTdHJpbmcuZnJvbUNoYXJDb2RlKDEyNTM5KSwgJ2cnKSwgU3RyaW5nLmZyb21DaGFyQ29kZShkb3Rwcm9kX3VuaWNvZGUpKTtcbiAgICBzdHJpbmdUb05vcm1hbGlzZSA9IHN0cmluZ1RvTm9ybWFsaXNlLnJlcGxhY2UobmV3IFJlZ0V4cChTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2KSwgJ2cnKSwgU3RyaW5nLmZyb21DaGFyQ29kZShkb3Rwcm9kX3VuaWNvZGUpKTtcbiAgICBzdHJpbmdUb05vcm1hbGlzZSA9IHN0cmluZ1RvTm9ybWFsaXNlLnJlcGxhY2UobmV3IFJlZ0V4cChTdHJpbmcuZnJvbUNoYXJDb2RlKDY1MzgxKSwgJ2cnKSwgU3RyaW5nLmZyb21DaGFyQ29kZShkb3Rwcm9kX3VuaWNvZGUpKTtcbiAgICByZXR1cm4gc3RyaW5nVG9Ob3JtYWxpc2U7XG4gIH07XG5cbiAgVElNSU5HX0RFQlVHUyA9IGZhbHNlO1xuXG4gIHJ1biA9IGZ1bmN0aW9uKHN0cmluZ1RvQmVSdW4sIGdlbmVyYXRlTGF0ZXggPSBmYWxzZSkge1xuICAgIHZhciBhbGxSZXR1cm5lZExhdGV4U3RyaW5ncywgYWxsUmV0dXJuZWRQbGFpblN0cmluZ3MsIGNvbGxlY3RlZExhdGV4UmVzdWx0LCBjb2xsZWN0ZWRQbGFpblJlc3VsdCwgZXJyb3IsIGVycm9yV2hpbGVFeGVjdXRpb24sIGksIGluZGV4T2ZQYXJ0UmVtYWluaW5nVG9CZVBhcnNlZCwgbiwgc3RyaW5nVG9CZVJldHVybmVkLCB0aGVFcnJvck1lc3NhZ2UsIHRpbWVTdGFydCwgdGltaW5nRGVidWdXcml0ZTtcbiAgICB0aW1lU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAvL3N0cmluZ1RvQmVSdW4gPSBzdHJpbmdUb0JlUnVuICsgXCJcXG5cIlxuICAgIHN0cmluZ1RvQmVSdW4gPSBub3JtYWxpc2VEb3RzKHN0cmluZ1RvQmVSdW4pO1xuICAgIC8vY29uc29sZS5sb2cgXCJydW4gcnVubmluZzogXCIgKyBzdHJpbmdUb0JlUnVuXG4gICAgaWYgKHN0cmluZ1RvQmVSdW4gPT09IFwic2VsZnRlc3RcIikge1xuICAgICAgc2VsZnRlc3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFpbml0ZWQpIHtcbiAgICAgIGluaXRlZCA9IHRydWU7XG4gICAgICBpbml0KCk7XG4gICAgfVxuICAgIGkgPSAwO1xuICAgIG4gPSAwO1xuICAgIGluZGV4T2ZQYXJ0UmVtYWluaW5nVG9CZVBhcnNlZCA9IDA7XG4gICAgYWxsUmV0dXJuZWRQbGFpblN0cmluZ3MgPSBcIlwiO1xuICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzID0gXCJcIjtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gd2hpbGUgd2UgY2FuIGtlZXAgc2Nhbm5pbmcgY29tbWFuZHMgb3V0IG9mIHRoZVxuICAgICAgICAvLyBwYXNzZWQgaW5wdXQgQU5EIHdlIGNhbiBleGVjdXRlIHRoZW0uLi5cbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJcIjtcbiAgICAgICAgY2hlY2tfc3RhY2soKTtcbiAgICAgICAgbiA9IHNjYW4oc3RyaW5nVG9CZVJ1bi5zdWJzdHJpbmcoaW5kZXhPZlBhcnRSZW1haW5pbmdUb0JlUGFyc2VkKSk7XG4gICAgICAgIHAxID0gcG9wKCk7XG4gICAgICAgIGNoZWNrX3N0YWNrKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgZXJyb3IgPSBlcnJvcjE7XG4gICAgICAgIGlmIChQUklOVE9VVFJFU1VMVCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICAvL2RlYnVnZ2VyXG4gICAgICAgIGFsbFJldHVybmVkUGxhaW5TdHJpbmdzICs9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgIGlmIChnZW5lcmF0ZUxhdGV4KSB7XG4gICAgICAgICAgLy9kZWJ1Z2dlclxuICAgICAgICAgIHRoZUVycm9yTWVzc2FnZSA9IHR1cm5FcnJvck1lc3NhZ2VUb0xhdGV4KGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzICs9IHRoZUVycm9yTWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICByZXNldF9hZnRlcl9lcnJvcigpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gaWYgZGVidWcgbW9kZSB0aGVuIHByaW50IHRoZSBzb3VyY2UgdGV4dFxuXG4gICAgICAvL2lmIChlcXVhbG4oZ2V0X2JpbmRpbmcoc3ltYm9sKFRSQUNFKSksIDEpKSB7XG4gICAgICAvLyAgZm9yIChpID0gMCBpIDwgbiBpKyspXG4gICAgICAvLyAgICBpZiAoc1tpXSAhPSAnXFxyJylcbiAgICAgIC8vICAgICAgcHJpbnRjaGFyKHNbaV0pXG4gICAgICAvLyAgaWYgKHNbbiAtIDFdICE9ICdcXG4nKSAjIG4gaXMgbm90IHplcm8sIHNlZSBhYm92ZVxuICAgICAgLy8gICAgcHJpbnRjaGFyKCdcXG4nKVxuICAgICAgLy99XG4gICAgICBpbmRleE9mUGFydFJlbWFpbmluZ1RvQmVQYXJzZWQgKz0gbjtcbiAgICAgIHB1c2gocDEpO1xuICAgICAgLy9kZWJ1Z2dlclxuICAgICAgZXJyb3JXaGlsZUV4ZWN1dGlvbiA9IGZhbHNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RyaW5nc0VtaXR0ZWRCeVVzZXJQcmludG91dHMgPSBcIlwiO1xuICAgICAgICB0b3BfbGV2ZWxfZXZhbCgpO1xuICAgICAgICAvL2NvbnNvbGUubG9nIFwiZW1pdHRlZCBzdHJpbmcgYWZ0ZXIgdG9wX2xldmVsX2V2YWwoKTogPlwiICsgc3RyaW5nc0VtaXR0ZWRCeVVzZXJQcmludG91dHMgKyBcIjxcIlxuICAgICAgICAvL2NvbnNvbGUubG9nIFwiYWxsUmV0dXJuZWRQbGFpblN0cmluZ3Mgc3RyaW5nIGFmdGVyIHRvcF9sZXZlbF9ldmFsKCk6ID5cIiArIGFsbFJldHVybmVkUGxhaW5TdHJpbmdzICsgXCI8XCJcbiAgICAgICAgcDIgPSBwb3AoKTtcbiAgICAgICAgY2hlY2tfc3RhY2soKTtcbiAgICAgICAgaWYgKGlzc3RyKHAyKSkge1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocDIuc3RyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlxcblwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIHJldHVybiB2YWx1ZSBpcyBuaWwgdGhlcmUgaXNuJ3QgbXVjaCBwb2ludFxuICAgICAgICAvLyBpbiBhZGRpbmcgXCJuaWxcIiB0byB0aGUgcHJpbnRvdXRcbiAgICAgICAgaWYgKHAyID09PSBzeW1ib2woTklMKSkge1xuICAgICAgICAgIC8vY29sbGVjdGVkUGxhaW5SZXN1bHQgPSBzdHJpbmdzRW1pdHRlZEJ5VXNlclByaW50b3V0c1xuICAgICAgICAgIGNvbGxlY3RlZFBsYWluUmVzdWx0ID0gc3RyaW5nc0VtaXR0ZWRCeVVzZXJQcmludG91dHM7XG4gICAgICAgICAgaWYgKGdlbmVyYXRlTGF0ZXgpIHtcbiAgICAgICAgICAgIGNvbGxlY3RlZExhdGV4UmVzdWx0ID0gXCIkJFwiICsgc3RyaW5nc0VtaXR0ZWRCeVVzZXJQcmludG91dHMgKyBcIiQkXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vY29uc29sZS5sb2cgXCJlbWl0dGVkIHN0cmluZyBiZWZvcmUgY29sbGVjdFBsYWluU3RyaW5nRnJvbVJldHVyblZhbHVlOiA+XCIgKyBzdHJpbmdzRW1pdHRlZEJ5VXNlclByaW50b3V0cyArIFwiPFwiXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyBcImFsbFJldHVybmVkUGxhaW5TdHJpbmdzIHN0cmluZyBiZWZvcmUgY29sbGVjdFBsYWluU3RyaW5nRnJvbVJldHVyblZhbHVlOiA+XCIgKyBhbGxSZXR1cm5lZFBsYWluU3RyaW5ncyArIFwiPFwiXG4gICAgICAgICAgY29sbGVjdGVkUGxhaW5SZXN1bHQgPSBwcmludF9leHByKHAyKTtcbiAgICAgICAgICBjb2xsZWN0ZWRQbGFpblJlc3VsdCArPSBcIlxcblwiO1xuICAgICAgICAgIC8vY29uc29sZS5sb2cgXCJjb2xsZWN0ZWRQbGFpblJlc3VsdDogPlwiICsgY29sbGVjdGVkUGxhaW5SZXN1bHQgKyBcIjxcIlxuICAgICAgICAgIGlmIChnZW5lcmF0ZUxhdGV4KSB7XG4gICAgICAgICAgICBjb2xsZWN0ZWRMYXRleFJlc3VsdCA9IFwiJCRcIiArIGNvbGxlY3RMYXRleFN0cmluZ0Zyb21SZXR1cm5WYWx1ZShwMikgKyBcIiQkXCI7XG4gICAgICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb2xsZWN0ZWRMYXRleFJlc3VsdDogXCIgKyBjb2xsZWN0ZWRMYXRleFJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFsbFJldHVybmVkUGxhaW5TdHJpbmdzICs9IGNvbGxlY3RlZFBsYWluUmVzdWx0O1xuICAgICAgICBpZiAoZ2VuZXJhdGVMYXRleCkge1xuICAgICAgICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzICs9IGNvbGxlY3RlZExhdGV4UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChQUklOVE9VVFJFU1VMVCkge1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwcmludGxpbmVcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coY29sbGVjdGVkUGxhaW5SZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL2FsZXJ0IGNvbGxlY3RlZFBsYWluUmVzdWx0XG4gICAgICAgIGlmIChQUklOVE9VVFJFU1VMVCkge1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJkaXNwbGF5OlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJpbnQyZGFzY2lpKHAyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2VuZXJhdGVMYXRleCkge1xuICAgICAgICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzICs9IFwiXFxuXCI7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICBlcnJvciA9IGVycm9yMTtcbiAgICAgICAgZXJyb3JXaGlsZUV4ZWN1dGlvbiA9IHRydWU7XG4gICAgICAgIGNvbGxlY3RlZFBsYWluUmVzdWx0ID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgaWYgKGdlbmVyYXRlTGF0ZXgpIHtcbiAgICAgICAgICBjb2xsZWN0ZWRMYXRleFJlc3VsdCA9IHR1cm5FcnJvck1lc3NhZ2VUb0xhdGV4KGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChQUklOVE9VVFJFU1VMVCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGNvbGxlY3RlZFBsYWluUmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBhbGxSZXR1cm5lZFBsYWluU3RyaW5ncyArPSBjb2xsZWN0ZWRQbGFpblJlc3VsdDtcbiAgICAgICAgaWYgKGNvbGxlY3RlZFBsYWluUmVzdWx0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgYWxsUmV0dXJuZWRQbGFpblN0cmluZ3MgKz0gXCJcXG5cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2VuZXJhdGVMYXRleCkge1xuICAgICAgICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzICs9IGNvbGxlY3RlZExhdGV4UmVzdWx0O1xuICAgICAgICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzICs9IFwiXFxuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5pdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWxsUmV0dXJuZWRQbGFpblN0cmluZ3NbYWxsUmV0dXJuZWRQbGFpblN0cmluZ3MubGVuZ3RoIC0gMV0gPT09IFwiXFxuXCIpIHtcbiAgICAgIGFsbFJldHVybmVkUGxhaW5TdHJpbmdzID0gYWxsUmV0dXJuZWRQbGFpblN0cmluZ3Muc3Vic3RyaW5nKDAsIGFsbFJldHVybmVkUGxhaW5TdHJpbmdzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBpZiAoZ2VuZXJhdGVMYXRleCkge1xuICAgICAgaWYgKGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzW2FsbFJldHVybmVkTGF0ZXhTdHJpbmdzLmxlbmd0aCAtIDFdID09PSBcIlxcblwiKSB7XG4gICAgICAgIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzID0gYWxsUmV0dXJuZWRMYXRleFN0cmluZ3Muc3Vic3RyaW5nKDAsIGFsbFJldHVybmVkTGF0ZXhTdHJpbmdzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZ2VuZXJhdGVMYXRleCkge1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiYWxsUmV0dXJuZWRMYXRleFN0cmluZ3M6IFwiICsgYWxsUmV0dXJuZWRMYXRleFN0cmluZ3MpO1xuICAgICAgfVxuICAgICAgc3RyaW5nVG9CZVJldHVybmVkID0gW2FsbFJldHVybmVkUGxhaW5TdHJpbmdzLCBhbGxSZXR1cm5lZExhdGV4U3RyaW5nc107XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmluZ1RvQmVSZXR1cm5lZCA9IGFsbFJldHVybmVkUGxhaW5TdHJpbmdzO1xuICAgIH1cbiAgICBpZiAoVElNSU5HX0RFQlVHUykge1xuICAgICAgdGltaW5nRGVidWdXcml0ZSA9IFwicnVuIHRpbWUgb246IFwiICsgc3RyaW5nVG9CZVJ1biArIFwiIDogXCIgKyAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aW1lU3RhcnQpICsgXCJtc1wiO1xuICAgICAgY29uc29sZS5sb2codGltaW5nRGVidWdXcml0ZSk7XG4gICAgfVxuICAgIGFsbFJldHVybmVkUGxhaW5TdHJpbmdzID0gXCJcIjtcbiAgICBhbGxSZXR1cm5lZExhdGV4U3RyaW5ncyA9IFwiXCI7XG4gICAgcmV0dXJuIHN0cmluZ1RvQmVSZXR1cm5lZDtcbiAgfTtcblxuICBjaGVja19zdGFjayA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0b3MgIT09IDApIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgc3RvcChcInN0YWNrIGVycm9yXCIpO1xuICAgIH1cbiAgICBpZiAoZnJhbWUgIT09IFRPUykge1xuICAgICAgZGVidWdnZXI7XG4gICAgICBzdG9wKFwiZnJhbWUgZXJyb3JcIik7XG4gICAgfVxuICAgIGlmIChjaGFpbk9mVXNlclN5bWJvbHNOb3RGdW5jdGlvbnNCZWluZ0V2YWx1YXRlZC5sZW5ndGggIT09IDApIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgc3RvcChcInN5bWJvbHMgZXZhbHVhdGlvbiBzdGlsbCBvbmdvaW5nP1wiKTtcbiAgICB9XG4gICAgaWYgKGV2YWx1YXRpbmdBc0Zsb2F0cyAhPT0gMCkge1xuICAgICAgZGVidWdnZXI7XG4gICAgICBzdG9wKFwibnVtZXJpYyBldmFsdWF0aW9uIHN0aWxsIG9uZ29pbmc/XCIpO1xuICAgIH1cbiAgICBpZiAoZXZhbHVhdGluZ1BvbGFyICE9PSAwKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICAgIHJldHVybiBzdG9wKFwiZXZhbHVhdGlvbiBvZiBwb2xhciBzdGlsbCBvbmdvaW5nP1wiKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gY2Fubm90IHJlZmVyZW5jZSBzeW1ib2xzIHlldFxuXG4gIC8vIHJldHVybnMgbmlsIG9uIHN0YWNrIGlmIG5vIHJlc3VsdCB0byBwcmludFxuICB0b3BfbGV2ZWxfZXZhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmFsbGVkQXJndW1lbnQsIG9yaWdpbmFsQXJndW1lbnQsIHNob3VsZEF1dG9leHBhbmQ7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIiMjIyMgdG9wIGxldmVsIGV2YWxcIik7XG4gICAgfVxuICAgIHRyaWdtb2RlID0gMDtcbiAgICBzaG91bGRBdXRvZXhwYW5kID0gc3ltYm9sKEFVVE9FWFBBTkQpO1xuICAgIGlmIChpc1plcm9BdG9tT3JUZW5zb3IoZ2V0X2JpbmRpbmcoc2hvdWxkQXV0b2V4cGFuZCkpKSB7XG4gICAgICBleHBhbmRpbmcgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBhbmRpbmcgPSAxO1xuICAgIH1cbiAgICBvcmlnaW5hbEFyZ3VtZW50ID0gdG9wKCk7XG4gICAgRXZhbCgpO1xuICAgIGV2YWxsZWRBcmd1bWVudCA9IHRvcCgpO1xuICAgIC8vIFwiZHJhd1wiLCBcImZvclwiIGFuZCBcInNldHFcIiByZXR1cm4gXCJuaWxcIiwgdGhlcmUgaXMgbm8gcmVzdWx0IHRvIHByaW50XG4gICAgaWYgKGV2YWxsZWRBcmd1bWVudCA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gdXBkYXRlIFwibGFzdFwiIHRvIGNvbnRhaW4gdGhlIGxhc3QgcmVzdWx0XG4gICAgc2V0X2JpbmRpbmcoc3ltYm9sKExBU1QpLCBldmFsbGVkQXJndW1lbnQpO1xuICAgIGlmICghaXNaZXJvQXRvbU9yVGVuc29yKGdldF9iaW5kaW5nKHN5bWJvbChCQUtFKSkpKSB7XG4gICAgICBiYWtlKCk7XG4gICAgICBldmFsbGVkQXJndW1lbnQgPSB0b3AoKTtcbiAgICB9XG4gICAgLy8gSWYgdXNlciBhc2tlZCBleHBsaWNpdGx5IGFza2VkIHRvIGV2YWx1YXRlIFwiaVwiIG9yIFwialwiIGFuZFxuICAgIC8vIHRoZXkgcmVwcmVzZW50IHRoZSBpbWFnaW5hcnkgdW5pdCAoLTEpXigxLzIpLCB0aGVuIFxuICAgIC8vIHNob3cgKC0xKV4oMS8yKS5cbiAgICBpZiAoKG9yaWdpbmFsQXJndW1lbnQgPT09IHN5bWJvbChTWU1CT0xfSSkgfHwgb3JpZ2luYWxBcmd1bWVudCA9PT0gc3ltYm9sKFNZTUJPTF9KKSkgJiYgaXNpbWFnaW5hcnl1bml0KGV2YWxsZWRBcmd1bWVudCkpIHtcblxuICAgIC8vIEluIGFsbCBvdGhlciBjYXNlcywgcmVwbGFjZSBhbGwgaW5zdGFuY2VzIG9mICgtMSleKDEvMikgaW4gdGhlIHJlc3VsdFxuICAgIC8vIHdpdGggdGhlIHN5bWJvbCBcImlcIiBvciBcImpcIiBkZXBlbmRpbmcgb24gd2hpY2ggb25lXG4gICAgLy8gcmVwcmVzZW50cyB0aGUgaW1hZ2luYXJ5IHVuaXRcbiAgICB9IGVsc2UgaWYgKGlzaW1hZ2luYXJ5dW5pdChnZXRfYmluZGluZyhzeW1ib2woU1lNQk9MX0opKSkpIHtcbiAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICBwdXNoX3N5bWJvbChTWU1CT0xfSik7XG4gICAgICByZXR1cm4gc3Vic3QoKTtcbiAgICB9IGVsc2UgaWYgKGlzaW1hZ2luYXJ5dW5pdChnZXRfYmluZGluZyhzeW1ib2woU1lNQk9MX0kpKSkpIHtcbiAgICAgIHB1c2goaW1hZ2luYXJ5dW5pdCk7XG4gICAgICBwdXNoX3N5bWJvbChTWU1CT0xfSSk7XG4gICAgICByZXR1cm4gc3Vic3QoKTtcbiAgICB9XG4gIH07XG5cbiAgY2hlY2tfZXNjX2ZsYWcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoZXNjX2ZsYWcpIHtcbiAgICAgIHJldHVybiBzdG9wKFwiZXNjIGtleVwiKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gdGhpcyBpcyBjYWxsZWQgd2hlbiB0aGUgd2hvbGUgbm90ZWJvb2sgaXMgcmUtcnVuXG4gIC8vIHNvIHdlIGdldCB0aGUgY2hhbmNlIG9mIGNsZWFyaW5nIHRoZSB3aG9sZSBzdGF0ZSBmcm9tXG4gIC8vIHNjcmF0Y2guXG4gIC8vIEluIHByYWN0aWNlLCB0aGUgc3RhdGUgd2UgbmVlZCB0byBjbGVhciB0aGF0IHBlcnNpc3RzXG4gIC8vIGFjcm9zcyBibG9ja3MgYXJlIG9ubHkgdGhlIHBhdHRlcm5zLCBzb1xuICAvLyBqdXN0IGVqZWN0IHRob3NlLlxuICBjbGVhckFsZ2VicmFFbnZpcm9ubWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vY29uc29sZS5sb2cgXCJDTEVBUklORyBjbGVhckFsZ2VicmFFbnZpcm9ubWVudCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCJcbiAgICByZXR1cm4gZG9fY2xlYXJhbGwoKTtcbiAgfTtcblxuICBjb21wdXRlRGVwZW5kZW5jaWVzRnJvbUFsZ2VicmEgPSBmdW5jdGlvbihjb2RlRnJvbUFsZ2VicmFCbG9jaykge1xuICAgIHZhciBpLCBrZWVwU3RhdGUsIGwxLCBsZW4sIGxlbjEsIG0xLCBvcmlnaW5hbGNvZGVGcm9tQWxnZWJyYUJsb2NrLCB1c2VyU2ltcGxpZmljYXRpb25zSW5Qcm9ncmFtRm9ybTtcbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY29tcHV0ZURlcGVuZGVuY2llc0Zyb21BbGdlYnJhISEhXCIpO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZmluZERlcGVuZGVuY2llc0luU2NyaXB0KGNvZGVGcm9tQWxnZWJyYUJsb2NrLCB0cnVlKVs2XVxuXG4gICAgLy8gVE9ETyB0aGlzIHBhcnQgYmVsb3cgaXMgZHVwbGljYXRlZCBmcm9tIGNvbXB1dGVSZXN1bHRzQW5kSmF2YVNjcmlwdEZyb21BbGdlYnJhXG4gICAgLy8gICAgICAuLi5zaG91bGQgcmVmYWN0b3IuXG4gICAgb3JpZ2luYWxjb2RlRnJvbUFsZ2VicmFCbG9jayA9IGNvZGVGcm9tQWxnZWJyYUJsb2NrO1xuICAgIGtlZXBTdGF0ZSA9IHRydWU7XG4gICAgY2FsbGVkX2Zyb21fQWxnZWJyYV9ibG9jayA9IHRydWU7XG4gICAgLy9jb25zb2xlLmxvZyBcImNvZGVGcm9tQWxnZWJyYUJsb2NrOiBcIiArIGNvZGVGcm9tQWxnZWJyYUJsb2NrXG4gICAgY29kZUZyb21BbGdlYnJhQmxvY2sgPSBub3JtYWxpc2VEb3RzKGNvZGVGcm9tQWxnZWJyYUJsb2NrKTtcbiAgICBpZiAoIWtlZXBTdGF0ZSkge1xuICAgICAgdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm0gPSBbXTtcbiAgICAgIHVzZXJTaW1wbGlmaWNhdGlvbnNJblByb2dyYW1Gb3JtID0gXCJcIjtcbiAgICAgIGZvciAobDEgPSAwLCBsZW4gPSB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybS5sZW5ndGg7IGwxIDwgbGVuOyBsMSsrKSB7XG4gICAgICAgIGkgPSB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybVtsMV07XG4gICAgICAgIC8vY29uc29sZS5sb2cgXCJzaWxlbnRwYXR0ZXJuKFwiICsgY2FyKGkpICsgXCIsXCIrY2RyKGkpK1wiKVwiXG4gICAgICAgIHVzZXJTaW1wbGlmaWNhdGlvbnNJblByb2dyYW1Gb3JtICs9IFwic2lsZW50cGF0dGVybihcIiArIGNhcihpKSArIFwiLFwiICsgY2FyKGNkcihpKSkgKyBcIixcIiArIGNhcihjZHIoY2RyKGkpKSkgKyBcIilcXG5cIjtcbiAgICAgIH1cbiAgICAgIGRvX2NsZWFyYWxsKCk7XG4gICAgICBjb2RlRnJvbUFsZ2VicmFCbG9jayA9IHVzZXJTaW1wbGlmaWNhdGlvbnNJblByb2dyYW1Gb3JtICsgY29kZUZyb21BbGdlYnJhQmxvY2s7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb2RlRnJvbUFsZ2VicmFCbG9jayBpbmNsdWRpbmcgcGF0dGVybnM6IFwiICsgY29kZUZyb21BbGdlYnJhQmxvY2spO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY29tcHV0ZURlcGVuZGVuY2llc0Zyb21BbGdlYnJhOiBwYXR0ZXJucyBpbiB0aGUgbGlzdCAtLS0tLS0tLS0tLS0tLS0gXCIpO1xuICAgICAgZm9yIChtMSA9IDAsIGxlbjEgPSB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybS5sZW5ndGg7IG0xIDwgbGVuMTsgbTErKykge1xuICAgICAgICBpID0gdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm1bbTFdO1xuICAgICAgICBjb25zb2xlLmxvZyhjYXIoaSkgKyBcIixcIiArIGNkcihpKSArIFwiKVwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKFwiLi4uZW5kIG9mIGxpc3QgLS0tLS0tLS0tLS0tLS0tIFwiKTtcbiAgICB9XG4gICAgY2FsbGVkX2Zyb21fQWxnZWJyYV9ibG9jayA9IGZhbHNlO1xuICAgIHJldHVybiBmaW5kRGVwZW5kZW5jaWVzSW5TY3JpcHQoY29kZUZyb21BbGdlYnJhQmxvY2ssIHRydWUpWzZdO1xuICB9O1xuXG4gIGNvbXB1dGVSZXN1bHRzQW5kSmF2YVNjcmlwdEZyb21BbGdlYnJhID0gZnVuY3Rpb24oY29kZUZyb21BbGdlYnJhQmxvY2spIHtcbiAgICB2YXIgY29kZSwgZGVwZW5kZW5jeUluZm8sIGksIGtlZXBTdGF0ZSwgbDEsIGxhdGV4UmVzdWx0LCBsZW4sIGxlbjEsIG0xLCBvcmlnaW5hbGNvZGVGcm9tQWxnZWJyYUJsb2NrLCByZWFkYWJsZVN1bW1hcnlPZkNvZGUsIHJlc3VsdCwgc3RyaW5nVG9CZVJ1biwgdGVzdGFibGVTdHJpbmdJc0lnbm9yZWRIZXJlLCB0aW1lU3RhcnRGcm9tQWxnZWJyYSwgdXNlclNpbXBsaWZpY2F0aW9uc0luUHJvZ3JhbUZvcm07XG4gICAgb3JpZ2luYWxjb2RlRnJvbUFsZ2VicmFCbG9jayA9IGNvZGVGcm9tQWxnZWJyYUJsb2NrO1xuICAgIGtlZXBTdGF0ZSA9IHRydWU7XG4gICAgY2FsbGVkX2Zyb21fQWxnZWJyYV9ibG9jayA9IHRydWU7XG4gICAgdGltZVN0YXJ0RnJvbUFsZ2VicmEgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAoVElNSU5HX0RFQlVHUykge1xuICAgICAgY29uc29sZS5sb2coXCIgLS0tLS0tLS0tIGNvbXB1dGVSZXN1bHRzQW5kSmF2YVNjcmlwdEZyb21BbGdlYnJhIGlucHV0OiBcIiArIGNvZGVGcm9tQWxnZWJyYUJsb2NrICsgXCIgYXQ6IFwiICsgKG5ldyBEYXRlKCkpKTtcbiAgICB9XG4gICAgLy8gd2Ugc3RhcnQgXCJjbGVhblwiIGVhY2ggdGltZTpcbiAgICAvLyBjbGVhciBhbGwgdGhlIHN5bWJvbHMgYW5kIHRoZW4gcmUtZGVmaW5lXG4gICAgLy8gdGhlIFwic3RhcnRpbmdcIiBzeW1ib2xzLlxuXG4gICAgLy9jb25zb2xlLmxvZyBcImNvZGVGcm9tQWxnZWJyYUJsb2NrOiBcIiArIGNvZGVGcm9tQWxnZWJyYUJsb2NrXG4gICAgY29kZUZyb21BbGdlYnJhQmxvY2sgPSBub3JtYWxpc2VEb3RzKGNvZGVGcm9tQWxnZWJyYUJsb2NrKTtcbiAgICBzdHJpbmdUb0JlUnVuID0gY29kZUZyb21BbGdlYnJhQmxvY2s7XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImNvbXB1dGVSZXN1bHRzQW5kSmF2YVNjcmlwdEZyb21BbGdlYnJhOiBwYXR0ZXJucyBpbiB0aGUgbGlzdCAtLS0tLS0tLS0tLS0tLS0gXCIpO1xuICAgICAgZm9yIChsMSA9IDAsIGxlbiA9IHVzZXJTaW1wbGlmaWNhdGlvbnNJbkxpc3RGb3JtLmxlbmd0aDsgbDEgPCBsZW47IGwxKyspIHtcbiAgICAgICAgaSA9IHVzZXJTaW1wbGlmaWNhdGlvbnNJbkxpc3RGb3JtW2wxXTtcbiAgICAgICAgY29uc29sZS5sb2coY2FyKGkpICsgXCIsXCIgKyBjZHIoaSkgKyBcIilcIik7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcIi4uLmVuZCBvZiBsaXN0IC0tLS0tLS0tLS0tLS0tLSBcIik7XG4gICAgfVxuICAgIGlmICgha2VlcFN0YXRlKSB7XG4gICAgICB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybSA9IFtdO1xuICAgICAgdXNlclNpbXBsaWZpY2F0aW9uc0luUHJvZ3JhbUZvcm0gPSBcIlwiO1xuICAgICAgZm9yIChtMSA9IDAsIGxlbjEgPSB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybS5sZW5ndGg7IG0xIDwgbGVuMTsgbTErKykge1xuICAgICAgICBpID0gdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm1bbTFdO1xuICAgICAgICAvL2NvbnNvbGUubG9nIFwic2lsZW50cGF0dGVybihcIiArIGNhcihpKSArIFwiLFwiK2NkcihpKStcIilcIlxuICAgICAgICB1c2VyU2ltcGxpZmljYXRpb25zSW5Qcm9ncmFtRm9ybSArPSBcInNpbGVudHBhdHRlcm4oXCIgKyBjYXIoaSkgKyBcIixcIiArIGNhcihjZHIoaSkpICsgXCIsXCIgKyBjYXIoY2RyKGNkcihpKSkpICsgXCIpXFxuXCI7XG4gICAgICB9XG4gICAgICBkb19jbGVhcmFsbCgpO1xuICAgICAgY29kZUZyb21BbGdlYnJhQmxvY2sgPSB1c2VyU2ltcGxpZmljYXRpb25zSW5Qcm9ncmFtRm9ybSArIGNvZGVGcm9tQWxnZWJyYUJsb2NrO1xuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29kZUZyb21BbGdlYnJhQmxvY2sgaW5jbHVkaW5nIHBhdHRlcm5zOiBcIiArIGNvZGVGcm9tQWxnZWJyYUJsb2NrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy9kZWJ1Z2dlclxuICAgIFt0ZXN0YWJsZVN0cmluZ0lzSWdub3JlZEhlcmUsIHJlc3VsdCwgY29kZSwgcmVhZGFibGVTdW1tYXJ5T2ZDb2RlLCBsYXRleFJlc3VsdCwgZXJyb3JNZXNzYWdlLCBkZXBlbmRlbmN5SW5mb10gPSBmaW5kRGVwZW5kZW5jaWVzSW5TY3JpcHQoY29kZUZyb21BbGdlYnJhQmxvY2spO1xuICAgIGNhbGxlZF9mcm9tX0FsZ2VicmFfYmxvY2sgPSBmYWxzZTtcbiAgICBpZiAocmVhZGFibGVTdW1tYXJ5T2ZDb2RlICE9PSBcIlwiIHx8IGVycm9yTWVzc2FnZSAhPT0gXCJcIikge1xuICAgICAgcmVzdWx0ICs9IFwiXFxuXCIgKyByZWFkYWJsZVN1bW1hcnlPZkNvZGU7XG4gICAgICBpZiAoZXJyb3JNZXNzYWdlICE9PSBcIlwiKSB7XG4gICAgICAgIHJlc3VsdCArPSBcIlxcblwiICsgZXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoL1xcbi9nLCBcIlxcblxcblwiKTtcbiAgICAgIGxhdGV4UmVzdWx0ICs9IFwiXFxuXCIgKyBcIiQkXCIgKyByZWFkYWJsZVN1bW1hcnlPZkNvZGUgKyBcIiQkXCI7XG4gICAgICBpZiAoZXJyb3JNZXNzYWdlICE9PSBcIlwiKSB7XG4gICAgICAgIGxhdGV4UmVzdWx0ICs9IHR1cm5FcnJvck1lc3NhZ2VUb0xhdGV4KGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBsYXRleFJlc3VsdCA9IGxhdGV4UmVzdWx0LnJlcGxhY2UoL1xcbi9nLCBcIlxcblxcblwiKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIGVtcHR5IHJlc3VsdHMgYWx0b2dldGhlciBmcm9tIGxhdGV4IG91dHB1dCwgd2hpY2ggaGFwcGVuc1xuICAgIC8vIGZvciBleGFtcGxlIGZvciBhc3NpZ25tZW50cyB0byB2YXJpYWJsZXMgb3JcbiAgICAvLyBmdW5jdGlvbnMgZGVmaW5pdGlvbnNcbiAgICBsYXRleFJlc3VsdCA9IGxhdGV4UmVzdWx0LnJlcGxhY2UoL1xcbiovLCBcIlwiKTtcbiAgICBsYXRleFJlc3VsdCA9IGxhdGV4UmVzdWx0LnJlcGxhY2UoL1xcJFxcJFxcJFxcJFxcbiovZywgXCJcIik7XG4gICAgY29kZSA9IGNvZGUucmVwbGFjZSgvTWF0aFxcLi9nLCBcIlwiKTtcbiAgICBjb2RlID0gY29kZS5yZXBsYWNlKC9cXG4vZywgXCJcXG5cXG5cIik7XG4gICAgLy9jb25zb2xlLmxvZyBcImNvZGU6IFwiICsgY29kZVxuICAgIC8vY29uc29sZS5sb2cgXCJyZXN1bHQ6IFwiICsgcmVzdWx0XG4gICAgLy9jb25zb2xlLmxvZyBcImxhdGV4UmVzdWx0OiBcIiArIGxhdGV4UmVzdWx0XG4gICAgaWYgKFRJTUlOR19ERUJVR1MpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiY29tcHV0ZVJlc3VsdHNBbmRKYXZhU2NyaXB0RnJvbUFsZ2VicmEgdGltZSAodG90YWwgdGltZSBmcm9tIG5vdGVib29rIGFuZCBiYWNrKSBmb3I6IFwiICsgc3RyaW5nVG9CZVJ1biArIFwiIDogXCIgKyAoKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSAtIHRpbWVTdGFydEZyb21BbGdlYnJhKSArIFwibXNcIik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAvL2NvZGU6IFwiLy8gbm8gY29kZSBnZW5lcmF0ZWQgeWV0XFxuLy90cnkgYWdhaW4gbGF0ZXJcIlxuICAgICAgLy9jb2RlOiBcImNvbnNvbGUubG9nKCdzb21lIHBhc3NlZCBjb2RlIGlzIHJ1bicpOyB3aW5kb3cuc29tZXRoaW5nID0gMTtcIlxuICAgICAgY29kZTogY29kZSxcbiAgICAgIC8vIFRPRE8gdGVtcG9yYXJpbHkgcGFzcyBsYXRleCBpbiBwbGFjZSBvZiBzdGFuZGFyZCByZXN1bHQgdG9vXG4gICAgICByZXN1bHQ6IGxhdGV4UmVzdWx0LFxuICAgICAgbGF0ZXhSZXN1bHQ6IGxhdGV4UmVzdWx0LFxuICAgICAgZGVwZW5kZW5jeUluZm86IGRlcGVuZGVuY3lJbmZvXG4gICAgfTtcbiAgfTtcblxuICAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIgJiYgZXhwb3J0cyAhPT0gbnVsbCA/IGV4cG9ydHMgOiB0aGlzKS5ydW4gPSBydW47XG5cbiAgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiICYmIGV4cG9ydHMgIT09IG51bGwgPyBleHBvcnRzIDogdGhpcykuZmluZERlcGVuZGVuY2llc0luU2NyaXB0ID0gZmluZERlcGVuZGVuY2llc0luU2NyaXB0O1xuXG4gICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBleHBvcnRzICE9PSBudWxsID8gZXhwb3J0cyA6IHRoaXMpLmNvbXB1dGVEZXBlbmRlbmNpZXNGcm9tQWxnZWJyYSA9IGNvbXB1dGVEZXBlbmRlbmNpZXNGcm9tQWxnZWJyYTtcblxuICAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIgJiYgZXhwb3J0cyAhPT0gbnVsbCA/IGV4cG9ydHMgOiB0aGlzKS5jb21wdXRlUmVzdWx0c0FuZEphdmFTY3JpcHRGcm9tQWxnZWJyYSA9IGNvbXB1dGVSZXN1bHRzQW5kSmF2YVNjcmlwdEZyb21BbGdlYnJhO1xuXG4gICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBleHBvcnRzICE9PSBudWxsID8gZXhwb3J0cyA6IHRoaXMpLmNsZWFyQWxnZWJyYUVudmlyb25tZW50ID0gY2xlYXJBbGdlYnJhRW52aXJvbm1lbnQ7XG5cbiAgLy8gICBfX19fX19fXG4gIC8vICB8ICB8IDwtIHN0YWNrXG4gIC8vICB8ICB8XG4gIC8vICB8X19fX19fX3xcbiAgLy8gIHwgIHwgPC0gc3RhY2sgKyB0b3NcbiAgLy8gIHwgIHxcbiAgLy8gIHwgIHxcbiAgLy8gIHxfX19fX19ffFxuICAvLyAgfCAgfCA8LSBmcmFtZVxuICAvLyAgfF9fX19fX198XG4gIC8vICAgICAgPC0gc3RhY2sgKyBUT1NcblxuICAvLyAgVGhlIHN0YWNrIGdyb3dzIGZyb20gbG93IG1lbW9yeSB0b3dhcmRzIGhpZ2ggbWVtb3J5LiBUaGlzIGlzIHNvIHRoYXRcbiAgLy8gIG11bHRpcGxlIGV4cHJlc3Npb25zIGNhbiBiZSBwdXNoZWQgb24gdGhlIHN0YWNrIGFuZCB0aGVuIGFjY2Vzc2VkIGFzIGFuXG4gIC8vICBhcnJheS5cblxuICAvLyAgVGhlIGZyYW1lIGFyZWEgaG9sZHMgbG9jYWwgdmFyaWFibGVzIGFuZCBncm93cyBmcm9tIGhpZ2ggbWVtb3J5IHRvd2FyZHNcbiAgLy8gIGxvdyBtZW1vcnkuIFRoZSBmcmFtZSBhcmVhIG1ha2VzIGxvY2FsIHZhcmlhYmxlcyB2aXNpYmxlIHRvIHRoZSBnYXJiYWdlXG4gIC8vICBjb2xsZWN0b3IuXG4gIHRvcyA9IDA7XG5cbiAgLy8gcCBpcyBhIFVcbiAgbmlsX3N5bWJvbHMgPSAwO1xuXG4gIHB1c2ggPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKHAgPT0gbnVsbCkge1xuICAgICAgZGVidWdnZXI7XG4gICAgfVxuICAgIGlmIChwLmlzWmVybyAhPSBudWxsKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyBcInB1c2hpbmcgXCJcbiAgICAvL2NvbnNvbGUubG9nIHByaW50X2xpc3QocClcbiAgICBpZiAocCA9PT0gc3ltYm9sKE5JTCkpIHtcbiAgICAgIG5pbF9zeW1ib2xzKys7XG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJwdXNoaW5nIHN5bWJvbChOSUwpICNcIiArIG5pbF9zeW1ib2xzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy9pZiBuaWxfc3ltYm9scyA9PSAxMTFcbiAgICAvLyAgZGVidWdnZXJcbiAgICBpZiAodG9zID49IGZyYW1lKSB7XG4gICAgICBzdG9wKFwic3RhY2sgb3ZlcmZsb3dcIik7XG4gICAgfVxuICAgIHJldHVybiBzdGFja1t0b3MrK10gPSBwO1xuICB9O1xuXG4gIC8vIHJldHVybnMgYSBVXG4gIG1vdmVUb3MgPSBmdW5jdGlvbihzdGFja1Bvcykge1xuICAgIGlmICh0b3MgPD0gc3RhY2tQb3MpIHtcbiAgICAgIC8vIHdlIGFyZSBtb3ZpbmcgdGhlIHN0YWNrIHBvaW50ZXJcbiAgICAgIC8vIFwidXBcIiB0aGUgc3RhY2sgKGFzIGlmIHdlIHdlcmUgZG9pbmcgYSBwdXNoKVxuICAgICAgdG9zID0gc3RhY2tQb3M7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHdlIGFyZSBtb3ZpbmcgdGhlIHN0YWNrIHBvaW50ZXJcbiAgICAvLyBcImRvd25cIiB0aGUgc3RhY2sgaS5lLiBhcyBpZiB3ZSB3ZXJlXG4gICAgLy8gZG9pbmcgYSBwb3AsIHdlIGNhbiB6ZXJvLVxuICAgIC8vIG91dCBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgd2UgcGFzc1xuICAgIC8vIHNvIHdlIGNhbiByZWNsYWltIHRoZSBtZW1vcnlcbiAgICB3aGlsZSAodG9zID4gc3RhY2tQb3MpIHtcbiAgICAgIHN0YWNrW3Rvc10gPSBudWxsO1xuICAgICAgdG9zLS07XG4gICAgfVxuICB9O1xuXG4gIHRvcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdGFja1t0b3MgLSAxXTtcbiAgfTtcblxuICBwb3AgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbWVudFRvQmVSZXR1cm5lZDtcbiAgICAvL3BvcHNOdW0rK1xuICAgIC8vY29uc29sZS5sb2cgXCJwb3AgI1wiICsgcG9wc051bVxuICAgIGlmICh0b3MgPT09IDApIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgc3RvcChcInN0YWNrIHVuZGVyZmxvd1wiKTtcbiAgICB9XG4gICAgaWYgKHN0YWNrW3RvcyAtIDFdID09IG51bGwpIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgIH1cbiAgICBlbGVtZW50VG9CZVJldHVybmVkID0gc3RhY2tbLS10b3NdO1xuICAgIFxuICAgIC8vIGdpdmUgYSBjaGFuY2UgdG8gdGhlIGdhcmJhZ2VcbiAgICAvLyBjb2xsZWN0aW9uIHRvIHJlY2xhaW0gc3BhY2VcbiAgICAvLyBUaGlzIGlzIEpTLXNwZWNpZmljLCBpdCB3b3VsZFxuICAgIC8vIGFjdHVhbGx5IG1ha2UgdGhlIEMgZ2FyYmFnZVxuICAgIC8vIGNvbGxlY3RvciB1c2VsZXNzLlxuICAgIHN0YWNrW3Rvc10gPSBudWxsO1xuICAgIHJldHVybiBlbGVtZW50VG9CZVJldHVybmVkO1xuICB9O1xuXG4gIC8vIG4gaXMgYW4gaW50ZWdlclxuICBwdXNoX2ZyYW1lID0gZnVuY3Rpb24obikge1xuICAgIHZhciBpLCBsMSwgcmVmMiwgcmVzdWx0cztcbiAgICBpID0gMDtcbiAgICBmcmFtZSAtPSBuO1xuICAgIGlmIChmcmFtZSA8IHRvcykge1xuICAgICAgZGVidWdnZXI7XG4gICAgICBzdG9wKFwiZnJhbWUgb3ZlcmZsb3csIGNpcmN1bGFyIHJlZmVyZW5jZT9cIik7XG4gICAgfVxuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBuOyAoMCA8PSByZWYyID8gbDEgPCByZWYyIDogbDEgPiByZWYyKTsgaSA9IDAgPD0gcmVmMiA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICByZXN1bHRzLnB1c2goc3RhY2tbZnJhbWUgKyBpXSA9IHN5bWJvbChOSUwpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gbiBpcyBhbiBpbnRlZ2VyXG4gIHBvcF9mcmFtZSA9IGZ1bmN0aW9uKG4pIHtcbiAgICBmcmFtZSArPSBuO1xuICAgIGlmIChmcmFtZSA+IFRPUykge1xuICAgICAgcmV0dXJuIHN0b3AoXCJmcmFtZSB1bmRlcmZsb3dcIik7XG4gICAgfVxuICB9O1xuXG4gIHNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICBmcmFtZSAtPSAxMDtcbiAgICBpZiAoZnJhbWUgPCB0b3MpIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgc3RvcChcImZyYW1lIG92ZXJmbG93LCBjaXJjdWxhciByZWZlcmVuY2U/XCIpO1xuICAgIH1cbiAgICBzdGFja1tmcmFtZSArIDBdID0gcDA7XG4gICAgc3RhY2tbZnJhbWUgKyAxXSA9IHAxO1xuICAgIHN0YWNrW2ZyYW1lICsgMl0gPSBwMjtcbiAgICBzdGFja1tmcmFtZSArIDNdID0gcDM7XG4gICAgc3RhY2tbZnJhbWUgKyA0XSA9IHA0O1xuICAgIHN0YWNrW2ZyYW1lICsgNV0gPSBwNTtcbiAgICBzdGFja1tmcmFtZSArIDZdID0gcDY7XG4gICAgc3RhY2tbZnJhbWUgKyA3XSA9IHA3O1xuICAgIHN0YWNrW2ZyYW1lICsgOF0gPSBwODtcbiAgICByZXR1cm4gc3RhY2tbZnJhbWUgKyA5XSA9IHA5O1xuICB9O1xuXG4gIHJlc3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoZnJhbWUgPiBUT1MgLSAxMCkge1xuICAgICAgc3RvcChcImZyYW1lIHVuZGVyZmxvd1wiKTtcbiAgICB9XG4gICAgcDAgPSBzdGFja1tmcmFtZSArIDBdO1xuICAgIHAxID0gc3RhY2tbZnJhbWUgKyAxXTtcbiAgICBwMiA9IHN0YWNrW2ZyYW1lICsgMl07XG4gICAgcDMgPSBzdGFja1tmcmFtZSArIDNdO1xuICAgIHA0ID0gc3RhY2tbZnJhbWUgKyA0XTtcbiAgICBwNSA9IHN0YWNrW2ZyYW1lICsgNV07XG4gICAgcDYgPSBzdGFja1tmcmFtZSArIDZdO1xuICAgIHA3ID0gc3RhY2tbZnJhbWUgKyA3XTtcbiAgICBwOCA9IHN0YWNrW2ZyYW1lICsgOF07XG4gICAgcDkgPSBzdGFja1tmcmFtZSArIDldO1xuICAgIHJldHVybiBmcmFtZSArPSAxMDtcbiAgfTtcblxuICAvLyBMb2NhbCBVICogaXMgT0sgaGVyZSBiZWNhdXNlIHRoZXJlIGlzIG5vIGZ1bmN0aW9uYWwgcGF0aCB0byB0aGUgZ2FyYmFnZSBjb2xsZWN0b3IuXG4gIHN3YXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcCwgcTtcbiAgICAvL1UgKnAsICpxXG4gICAgLy8gcCBhbmQgcSBhcmUgYm90aCBVc1xuICAgIHAgPSBwb3AoKTtcbiAgICBxID0gcG9wKCk7XG4gICAgcHVzaChwKTtcbiAgICByZXR1cm4gcHVzaChxKTtcbiAgfTtcblxuICAvLyBMb2NhbCBVICogaXMgT0sgaGVyZSBiZWNhdXNlIHRoZXJlIGlzIG5vIGZ1bmN0aW9uYWwgcGF0aCB0byB0aGUgZ2FyYmFnZSBjb2xsZWN0b3IuXG4gIGR1cGwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcDtcbiAgICAvL1UgKnBcbiAgICBwID0gcG9wKCk7XG4gICAgcHVzaChwKTtcbiAgICByZXR1cm4gcHVzaChwKTtcbiAgfTtcblxuICAkLmR1cGwgPSBkdXBsO1xuXG4gICQuc3dhcCA9IHN3YXA7XG5cbiAgJC5yZXN0b3JlID0gcmVzdG9yZTtcblxuICAkLnNhdmUgPSBzYXZlO1xuXG4gICQucHVzaCA9IHB1c2g7XG5cbiAgJC5wb3AgPSBwb3A7XG5cbiAgLy8gVGhlIHN5bWJvbCB0YWJsZSBpcyBhIHNpbXBsZSBhcnJheSBvZiBzdHJ1Y3QgVS5cblxuICAvLyBwdXQgc3ltYm9sIGF0IGluZGV4IG5cbiAgRXZhbF9zeW1ib2xzaW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzeW1ib2xzaW5mb1RvQmVQcmludGVkO1xuICAgIHN5bWJvbHNpbmZvVG9CZVByaW50ZWQgPSBzeW1ib2xzaW5mbygpO1xuICAgIGlmIChzeW1ib2xzaW5mb1RvQmVQcmludGVkICE9PSBcIlwiKSB7XG4gICAgICByZXR1cm4gbmV3X3N0cmluZyhzeW1ib2xzaW5mb1RvQmVQcmludGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHB1c2hfc3ltYm9sKE5JTCk7XG4gICAgfVxuICB9O1xuXG4gIHN5bWJvbHNpbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJpbmRpbmdpLCBpLCBsMSwgcmVmMiwgcmVmMywgc3ltYm9sc2luZm9Ub0JlUHJpbnRlZCwgc3ltdGFiaTtcbiAgICBzeW1ib2xzaW5mb1RvQmVQcmludGVkID0gXCJcIjtcbiAgICBmb3IgKGkgPSBsMSA9IHJlZjIgPSBOSUwgKyAxLCByZWYzID0gc3ltdGFiLmxlbmd0aDsgKHJlZjIgPD0gcmVmMyA/IGwxIDwgcmVmMyA6IGwxID4gcmVmMyk7IGkgPSByZWYyIDw9IHJlZjMgPyArK2wxIDogLS1sMSkge1xuICAgICAgaWYgKHN5bXRhYltpXS5wcmludG5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgaWYgKGlzU3ltYm9sUmVjbGFpbWFibGVbaV0gPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN5bXRhYmkgPSBzeW10YWJbaV0gKyBcIlwiO1xuICAgICAgYmluZGluZ2kgPSAoYmluZGluZ1tpXSArIFwiXCIpLnN1YnN0cmluZygwLCA0KTtcbiAgICAgIHN5bWJvbHNpbmZvVG9CZVByaW50ZWQgKz0gXCJzeW1ib2w6IFwiICsgc3ltdGFiaSArIFwiIHNpemU6IFwiICsgY291bnRzaXplKGJpbmRpbmdbaV0pICsgXCIgdmFsdWU6IFwiICsgYmluZGluZ2kgKyBcIi4uLlxcblwiO1xuICAgIH1cbiAgICByZXR1cm4gc3ltYm9sc2luZm9Ub0JlUHJpbnRlZDtcbiAgfTtcblxuICAvLyBzIGlzIGEgc3RyaW5nLCBuIGlzIGFuIGludFxuICAvLyBUT0RPOiBlbHNld2hlcmUgd2hlbiB3ZSBjcmVhdGUgYSBzeW1ib2wgd2VcbiAgLy8gcmF0aGVyIHByZWZlciB0byBjcmVhdGUgYSBuZXcgZW50cnkuIEhlcmUgd2UganVzdFxuICAvLyByZXVzZSB0aGUgZXhpc3Rpbmcgb25lLiBJZiB0aGF0IGNhbiBuZXZlciBiZSBhIHByb2JsZW1cbiAgLy8gdGhlbiBleHBsYWluIHdoeSwgb3RoZXJ3aXNlIGRvIGNyZWF0ZSBhIG5ldyBlbnRyeS5cbiAgc3RkX3N5bWJvbCA9IGZ1bmN0aW9uKHMsIG4sIGxhdGV4UHJpbnQpIHtcbiAgICB2YXIgcDtcbiAgICBwID0gc3ltdGFiW25dO1xuICAgIGlmIChwID09IG51bGwpIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgIH1cbiAgICBwLnByaW50bmFtZSA9IHM7XG4gICAgaWYgKGxhdGV4UHJpbnQgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHAubGF0ZXhQcmludCA9IGxhdGV4UHJpbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwLmxhdGV4UHJpbnQgPSBzO1xuICAgIH1cbiAgfTtcblxuICAvLyBzeW1ib2wgbG9va3VwLCBvciBzeW1ib2wgY3JlYXRpb24gaWYgc3ltYm9sIGRvZXNuJ3QgZXhpc3QgeWV0XG4gIC8vIHRoaXMgaGFwcGVucyBvZnRlbiBmcm9tIHRoZSBzY2FubmVyLiBXaGVuIHRoZSBzY2FubmVyIHNlZXMgc29tZXRoaW5nXG4gIC8vIGxpa2UgbXlWYXIgPSAyLCBpdCBjcmVhdGUgYSB0cmVlIChTRVRRIChcIm15VmFyXCIgc3ltYm9sIGFzIGNyZWF0ZWQvbG9va2VkIHVwIGhlcmUgKDIpKSlcbiAgLy8gdXNlci1kZWZpbmVkIGZ1bmN0aW9ucyBhbHNvIGhhdmUgYSB1c3Igc3ltYm9sLlxuXG4gIC8vIE5vdGUgdGhhdCBzb21lIHN5bWJvbHMgbGlrZSwgc2F5LCBcImFic1wiLFxuICAvLyBhcmUgcGlja2VkIHVwIGJ5IHRoZSBzY2FubmVyIGRpcmVjdGx5IGFzIGtleXdvcmRzLFxuICAvLyBzbyB0aGV5IGFyZSBub3QgbG9va2VkIHVwIHZpYSB0aGlzLlxuICAvLyBTbyBpbiBmYWN0IHlvdSBjb3VsZCByZWRlZmluZSBhYnMgdG8gYmUgYWJzKHgpID0geFxuICAvLyBidXQgc3RpbGwgYWJzIHdvdWxkIGJlIHBpY2tlZCB1cCBieSB0aGUgc2Nhbm5lciBhcyBhIHBhcnRpY3VsYXJcbiAgLy8gbm9kZSB0eXBlIGFuZCBjYWxscyB0byBhYnMoKSB3aWxsIGJlIGFsd2F5cyB0byB0aGUgXCJuYXRpdmVcIiBhYnNcblxuICAvLyBBbHNvIG5vdGUgdGhhdCBzb21lIHN5bWJvbHMgc3VjaCBhcyBcInplcm9cIiBhcmUgKHN0cmFuZ2VseSkgbm90IHBpY2tlZCB1cCBieVxuICAvLyB0aGUgc2Nhbm5lciBhcyBzcGVjaWFsIG5vZGVzLCByYXRoZXIgdGhleSBhcmUgaWRlbnRpZmllZCBhcyBrZXl3b3Jkc1xuICAvLyAoZS5nLiBub3QgcmVkZWZpbmFibGUpIGF0IHRpbWUgb2Ygc3ltYm9sIGxvb2t1cCAoaW4gRXZhbF9zeW0pIGFuZFxuICAvLyBldmFsbGVkLCB3aGVyZSBldmFsIGhhcyBhIGNhc2UgZm9yIFpFUk8uXG5cbiAgLy8gQWxzbyBub3RlIHRoYXQgdGhlcmUgYXJlIGEgbnVtYmVyIG9mIHN5bWJvbHMsIHN1Y2ggYXMgYSxiLGMseCx5LHosLi4uXG4gIC8vIHRoYXQgYXJlIGFjdHVhbGx5IGNyZWF0ZWQgYnkgc3RkX3N5bWJvbHMuXG4gIC8vIFRoZXkgYXJlIG5vdCBzcGVjaWFsIG5vZGUgdHlwZXMgKGxpa2UgYWJzKSwgdGhleSBhcmUgbm9ybWFsIHN5bWJvbHNcbiAgLy8gdGhhdCBhcmUgbG9va2VkIHVwLCBidXQgdGhlIGFkdmFudGFnZSBpcyB0aGF0IHNpbmNlIHRoZXkgYXJlIG9mdGVuXG4gIC8vIHVzZWQgaW50ZXJuYWxseSBieSBhbGdlYnJpdGUsIHdlIGNyZWF0ZSB0aGUgc3ltYm9sIGluIGFkdmFuY2UgYW5kXG4gIC8vIHdlIGNhbiByZWZlcmVuY2UgdGhlIHN5bWJvbCBlbnRyeSBpbiBhIGNsZWFuIHdheVxuICAvLyAoZS5nLiBzeW1ib2woU1lNQk9MX1gpKSByYXRoZXIgdGhhblxuICAvLyBieSBsb29raW5nIHVwIGEgc3RyaW5nLlxuXG4gIC8vIHMgaXMgYSBzdHJpbmdcbiAgdXNyX3N5bWJvbCA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgaSwgbDEsIHJlZjI7XG4gICAgLy9jb25zb2xlLmxvZyBcInVzcl9zeW1ib2wgb2YgXCIgKyBzXG4gICAgLy9pZiBzID09IFwiYWFhXCJcbiAgICAvLyAgZGVidWdnZXJcblxuICAgIC8vIGZpbmQgZWl0aGVyIHRoZSBleGlzdGluZyBzeW1ib2wsIG9yIGlmIHdlXG4gICAgLy8gcmVhY2ggYW4gZW1wdHkgc3ltYm9sIChwcmludG5hbWUgPT0gXCJcIikgdGhlblxuICAgIC8vIHJlLXVzZSB0aGF0IGxvY2F0aW9uLlxuICAgIGkgPSAwO1xuICAgIGZvciAoaSA9IGwxID0gMCwgcmVmMiA9IE5TWU07ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIGlmIChzID09PSBzeW10YWJbaV0ucHJpbnRuYW1lKSB7XG4gICAgICAgIC8vIGZvdW5kIHRoZSBzeW1ib2xcbiAgICAgICAgcmV0dXJuIHN5bXRhYltpXTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW10YWJbaV0ucHJpbnRuYW1lID09PSBcIlwiKSB7XG4gICAgICAgIC8vIGZvdW5kIGFuIGVudHJ5IGluIHRoZSBzeW1ib2wgdGFibGVcbiAgICAgICAgLy8gd2l0aCBubyBwcmludG5hbWUsIGV4aXQgdGhlIGxvb3BcbiAgICAgICAgLy8gYW5kIHJlLXVzZSB0aGlzIGxvY2F0aW9uXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA9PT0gTlNZTSkge1xuICAgICAgc3RvcChcInN5bWJvbCB0YWJsZSBvdmVyZmxvd1wiKTtcbiAgICB9XG4gICAgc3ltdGFiW2ldID0gbmV3IFUoKTtcbiAgICBzeW10YWJbaV0uayA9IFNZTTtcbiAgICBzeW10YWJbaV0ucHJpbnRuYW1lID0gcztcbiAgICAvLyBzYXkgdGhhdCB3ZSBqdXN0IGNyZWF0ZWQgdGhlIHN5bWJvbFxuICAgIC8vIHRoZW4sIGJpbmRpbmdbdGhlIG5ldyBzeW1ib2wgZW50cnldXG4gICAgLy8gYnkgZGVmYXVsdCBwb2ludHMgdG8gdGhlIHN5bWJvbC5cbiAgICAvLyBTbyB0aGUgdmFsdWUgb2YgYW4gdW5hc3NpZ25lZCBzeW1ib2wgd2lsbFxuICAgIC8vIGJlIGp1c3QgaXRzIG5hbWUuXG4gICAgYmluZGluZ1tpXSA9IHN5bXRhYltpXTtcbiAgICBpc1N5bWJvbFJlY2xhaW1hYmxlW2ldID0gZmFsc2U7XG4gICAgcmV0dXJuIHN5bXRhYltpXTtcbiAgfTtcblxuICAvLyBnZXQgdGhlIHN5bWJvbCdzIHByaW50bmFtZVxuXG4gIC8vIHAgaXMgYSBVXG4gIGdldF9wcmludG5hbWUgPSBmdW5jdGlvbihwKSB7XG4gICAgaWYgKHAuayAhPT0gU1lNKSB7XG4gICAgICBzdG9wKFwic3ltYm9sIGVycm9yXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcC5wcmludG5hbWU7XG4gIH07XG5cbiAgLy8gcCBhbmQgcSBhcmUgYm90aCBVXG4gIC8vIHRoZXJlIGFyZSB0d28gVXMgYXQgcGxheSBoZXJlLiBPbmUgYmVsb25ncyB0byB0aGVcbiAgLy8gc3ltdGFiIGFycmF5IGFuZCBpcyB0aGUgdmFyaWFibGUgbmFtZS5cbiAgLy8gVGhlIG90aGVyIG9uZSBpcyB0aGUgVSB3aXRoIHRoZSBjb250ZW50LCBhbmQgdGhhdFxuICAvLyBvbmUgd2lsbCBnbyBpbiB0aGUgY29ycmVzcG9uZGluZyBcImJpbmRpbmdcIiBhcnJheSBlbnRyeS5cbiAgc2V0X2JpbmRpbmcgPSBmdW5jdGlvbihwLCBxKSB7XG4gICAgdmFyIGluZGV4Rm91bmQ7XG4gICAgaWYgKHAuayAhPT0gU1lNKSB7XG4gICAgICBzdG9wKFwic3ltYm9sIGVycm9yXCIpO1xuICAgIH1cbiAgICAvL2NvbnNvbGUubG9nIFwic2V0dGluZyBiaW5kaW5nIG9mIFwiICsgcC50b1N0cmluZygpICsgXCIgdG86IFwiICsgcS50b1N0cmluZygpXG4gICAgLy9pZiBwLnRvU3RyaW5nKCkgPT0gXCJhYWFcIlxuICAgIC8vICBkZWJ1Z2dlclxuICAgIGluZGV4Rm91bmQgPSBzeW10YWIuaW5kZXhPZihwKTtcbiAgICAvKlxuICAgIGlmIGluZGV4Rm91bmQgPT0gLTFcbiAgICAgIGRlYnVnZ2VyXG4gICAgICBmb3IgaSBpbiBbMC4uLnN5bXRhYi5sZW5ndGhdXG4gICAgICAgIGlmIHAucHJpbnRuYW1lID09IHN5bXRhYltpXS5wcmludG5hbWVcbiAgICAgICAgICBpbmRleEZvdW5kID0gaVxuICAgICAgICAgIGNvbnNvbGUubG9nIFwicmVtZWRpZWQgYW4gaW5kZXggbm90IGZvdW5kISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIVwiXG4gICAgICAgICAgYnJlYWtcbiAgICAqL1xuICAgIGlmIChzeW10YWIuaW5kZXhPZihwLCBpbmRleEZvdW5kICsgMSkgIT09IC0xKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIm9wcywgbW9yZSB0aGFuIG9uZSBlbGVtZW50IVwiKTtcbiAgICAgIGRlYnVnZ2VyO1xuICAgIH1cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwibG9va3VwID4+IHNldF9iaW5kaW5nIGxvb2t1cCBcIiArIGluZGV4Rm91bmQpO1xuICAgIH1cbiAgICBpc1N5bWJvbFJlY2xhaW1hYmxlW2luZGV4Rm91bmRdID0gZmFsc2U7XG4gICAgcmV0dXJuIGJpbmRpbmdbaW5kZXhGb3VuZF0gPSBxO1xuICB9O1xuXG4gIC8vIHAgaXMgYSBVXG4gIGdldF9iaW5kaW5nID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBpbmRleEZvdW5kO1xuICAgIGlmIChwLmsgIT09IFNZTSkge1xuICAgICAgc3RvcChcInN5bWJvbCBlcnJvclwiKTtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyBcImdldHRpbmcgYmluZGluZyBvZiBcIiArIHAudG9TdHJpbmcoKVxuICAgIC8vaWYgcC50b1N0cmluZygpID09IFwiYWFhXCJcbiAgICAvLyAgZGVidWdnZXJcbiAgICBpbmRleEZvdW5kID0gc3ltdGFiLmluZGV4T2YocCk7XG4gICAgLypcbiAgICBpZiBpbmRleEZvdW5kID09IC0xXG4gICAgICBkZWJ1Z2dlclxuICAgICAgZm9yIGkgaW4gWzAuLi5zeW10YWIubGVuZ3RoXVxuICAgICAgICBpZiBwLnByaW50bmFtZSA9PSBzeW10YWJbaV0ucHJpbnRuYW1lXG4gICAgICAgICAgaW5kZXhGb3VuZCA9IGlcbiAgICAgICAgICBjb25zb2xlLmxvZyBcInJlbWVkaWVkIGFuIGluZGV4IG5vdCBmb3VuZCEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISFcIlxuICAgICAgICAgIGJyZWFrXG4gICAgKi9cbiAgICBpZiAoc3ltdGFiLmluZGV4T2YocCwgaW5kZXhGb3VuZCArIDEpICE9PSAtMSkge1xuICAgICAgY29uc29sZS5sb2coXCJvcHMsIG1vcmUgdGhhbiBvbmUgZWxlbWVudCFcIik7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgaWYgKERFQlVHKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImxvb2t1cCA+PiBnZXRfYmluZGluZyBsb29rdXAgXCIgKyBpbmRleEZvdW5kKTtcbiAgICB9XG4gICAgLy9pZiBpbmRleEZvdW5kID09IDEzOVxuICAgIC8vICBkZWJ1Z2dlclxuICAgIC8vaWYgaW5kZXhGb3VuZCA9PSAxMzdcbiAgICAvLyAgZGVidWdnZXJcbiAgICByZXR1cm4gYmluZGluZ1tpbmRleEZvdW5kXTtcbiAgfTtcblxuICAvLyB0aGUgY29uY2VwdCBvZiB1c2VyIHN5bWJvbCBpcyBhIGxpdHRsZSBmdXp6eVxuICAvLyBiZXVjYXNlIG1hdGhlbWF0aWNzIGlzIGZ1bGwgb2Ygc3ltYm9scyB0aGF0IGFjdHVhbGx5XG4gIC8vIGhhdmUgYSBzcGVjaWFsIG1lYW5pbmcsIGUuZy4gZSxpLEkgaW4gc29tZSBjYXNlcyBqLi4uXG4gIGlzX3Vzcl9zeW1ib2wgPSBmdW5jdGlvbihwKSB7XG4gICAgdmFyIHRoZVN5bW51bTtcbiAgICBpZiAocC5rICE9PSBTWU0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhlU3ltbnVtID0gc3ltbnVtKHApO1xuICAgIC8vIHNlZSBcImRlZnNcIiBmaWxlIGZvciB0aGUgbmFtaW5nIG9mIHRoZSBzeW1ib2xzXG4gICAgaWYgKHRoZVN5bW51bSA+IFBJICYmIHRoZVN5bW51bSAhPT0gU1lNQk9MX0kgJiYgdGhlU3ltbnVtICE9PSBTWU1CT0xfSURFTlRJVFlfTUFUUklYKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIGdldCBzeW1ib2wncyBudW1iZXIgZnJvbSBwdHJcbiAgLy8gcCBpcyBVXG4gIGxvb2t1cHNUb3RhbCA9IDA7XG5cbiAgc3ltbnVtID0gZnVuY3Rpb24ocCkge1xuICAgIHZhciBpbmRleEZvdW5kO1xuICAgIGxvb2t1cHNUb3RhbCsrO1xuICAgIGlmIChwLmsgIT09IFNZTSkge1xuICAgICAgc3RvcChcInN5bWJvbCBlcnJvclwiKTtcbiAgICB9XG4gICAgaW5kZXhGb3VuZCA9IHN5bXRhYi5pbmRleE9mKHApO1xuICAgIGlmIChzeW10YWIuaW5kZXhPZihwLCBpbmRleEZvdW5kICsgMSkgIT09IC0xKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIm9wcywgbW9yZSB0aGFuIG9uZSBlbGVtZW50IVwiKTtcbiAgICAgIGRlYnVnZ2VyO1xuICAgIH1cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwibG9va3VwID4+IHN5bW51bSBsb29rdXAgXCIgKyBpbmRleEZvdW5kICsgXCIgbG9va3VwICMgXCIgKyBsb29rdXBzVG90YWwpO1xuICAgIH1cbiAgICAvL2lmIGxvb2t1cHNUb3RhbCA9PSAyMVxuICAgIC8vICBkZWJ1Z2dlclxuICAgIC8vaWYgaW5kZXhGb3VuZCA9PSA3OVxuICAgIC8vICBkZWJ1Z2dlclxuICAgIHJldHVybiBpbmRleEZvdW5kO1xuICB9O1xuXG4gIC8vIHB1c2ggaW5kZXhlZCBzeW1ib2xcblxuICAvLyBrIGlzIGFuIGludFxuICBwdXNoX3N5bWJvbCA9IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gcHVzaChzeW10YWJba10pO1xuICB9O1xuXG4gIGNsZWFyX3N5bWJvbHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbDEsIHJlZjIsIHJlZjMsIHJlc3VsdHM7XG4vLyB3ZSBjYW4gY2xlYXIganVzdCB3aGF0J3MgYXNzaWduYWJsZS5cbi8vIGV2ZXJ5dGhpbmcgYmVmb3JlIE5JTCBpcyBub3QgYXNzaWduYWJsZSxcbi8vIHNvIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2xlYXIgaXQuXG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IGwxID0gcmVmMiA9IE5JTCArIDEsIHJlZjMgPSBOU1lNOyAocmVmMiA8PSByZWYzID8gbDEgPCByZWYzIDogbDEgPiByZWYzKTsgaSA9IHJlZjIgPD0gcmVmMyA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICAvLyBzdG9wIGF0IHRoZSBmaXJzdCBlbXB0eVxuICAgICAgLy8gZW50cnkgdGhhdCBpcyBub3QgcmVjbGFpbWFibGVcbiAgICAgIGlmIChzeW10YWJbaV0ucHJpbnRuYW1lID09PSBcIlwiKSB7XG4gICAgICAgIGlmIChpc1N5bWJvbFJlY2xhaW1hYmxlW2ldID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzeW10YWJbaV0gPSBuZXcgVSgpO1xuICAgICAgc3ltdGFiW2ldLmsgPSBTWU07XG4gICAgICBiaW5kaW5nW2ldID0gc3ltdGFiW2ldO1xuICAgICAgcmVzdWx0cy5wdXNoKGlzU3ltYm9sUmVjbGFpbWFibGVbaV0gPSBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vc3ltdGFiW2ldLnByaW50bmFtZSA9IFwiXCJcbiAgLy9iaW5kaW5nW2ldID0gc3ltdGFiW2ldXG5cbiAgLy8gY29sbGVjdCBhbGwgdGhlIHZhcmlhYmxlcyBpbiBhIHRyZWVcbiAgY29sbGVjdFVzZXJTeW1ib2xzID0gZnVuY3Rpb24ocCwgYWNjdW11bGF0b3IgPSBbXSkge1xuICAgIHZhciBpLCBsMSwgcmVmMjtcbiAgICBpZiAoaXNfdXNyX3N5bWJvbChwKSkge1xuICAgICAgaWYgKGFjY3VtdWxhdG9yLmluZGV4T2YocCkgPT09IC0xKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2gocCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzdGVuc29yKHApKSB7XG4gICAgICBmb3IgKGkgPSBsMSA9IDAsIHJlZjIgPSBwLnRlbnNvci5uZWxlbTsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgICBjb2xsZWN0VXNlclN5bWJvbHMocC50ZW5zb3IuZWxlbVtpXSwgYWNjdW11bGF0b3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aGlsZSAoaXNjb25zKHApKSB7XG4gICAgICBjb2xsZWN0VXNlclN5bWJvbHMoY2FyKHApLCBhY2N1bXVsYXRvcik7XG4gICAgICBwID0gY2RyKHApO1xuICAgIH1cbiAgfTtcblxuICAkLmdldF9iaW5kaW5nID0gZ2V0X2JpbmRpbmc7XG5cbiAgJC5zZXRfYmluZGluZyA9IHNldF9iaW5kaW5nO1xuXG4gICQudXNyX3N5bWJvbCA9IHVzcl9zeW1ib2w7XG5cbiAgJC5zeW1ib2xzaW5mbyA9IHN5bWJvbHNpbmZvO1xuXG4gICQuY29sbGVjdFVzZXJTeW1ib2xzID0gY29sbGVjdFVzZXJTeW1ib2xzO1xuXG4gIGlmICghaW5pdGVkKSB7XG4gICAgaW5pdGVkID0gdHJ1ZTtcbiAgICBpbml0KCk7XG4gIH1cblxuICAkLmluaXQgPSBpbml0O1xuXG4gIHBhcnNlX2ludGVybmFsID0gZnVuY3Rpb24oYXJndSkge1xuICAgIGlmICh0eXBlb2YgYXJndSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBzY2FuKGFyZ3UpO1xuICAgIC8vIG5vdyBpdHMgaW4gdGhlIHN0YWNrXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJndSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmIChhcmd1ICUgMSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcHVzaF9pbnRlZ2VyKGFyZ3UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHB1c2hfZG91YmxlKGFyZ3UpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJndSBpbnN0YW5jZW9mIFUpIHtcbiAgICAgIC8vIGhleSBsb29rIGl0cyBhIFVcbiAgICAgIHJldHVybiBwdXNoKGFyZ3UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ3Vua25vd24gYXJndW1lbnQgdHlwZScsIGFyZ3UpO1xuICAgICAgcmV0dXJuIHB1c2goc3ltYm9sKE5JTCkpO1xuICAgIH1cbiAgfTtcblxuICBwYXJzZSA9IGZ1bmN0aW9uKGFyZ3UpIHtcbiAgICB2YXIgZGF0YSwgZXJyb3I7XG4gICAgdHJ5IHtcbiAgICAgIHBhcnNlX2ludGVybmFsKGFyZ3UpO1xuICAgICAgZGF0YSA9IHBvcCgpO1xuICAgICAgY2hlY2tfc3RhY2soKTtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgcmVzZXRfYWZ0ZXJfZXJyb3IoKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICAvLyBleGVjIGhhbmRsZXMgdGhlIHJ1bm5pbmcgaWEgSlMgb2YgYWxsIHRoZSBhbGdlYnJpdGVcbiAgLy8gZnVuY3Rpb25zLiBUaGUgZnVuY3Rpb24gbmFtZSBpcyBwYXNzZWQgaW4gXCJuYW1lXCIgYW5kXG4gIC8vIHRoZSBjb3JyZXNwb25kaW5nIGZ1bmN0aW9uIGlzIHB1c2hlZCBhdCB0aGUgdG9wIG9mIHRoZSBzdGFja1xuICBleGVjID0gZnVuY3Rpb24obmFtZSwgLi4uYXJndXMpIHtcbiAgICB2YXIgYXJndSwgZXJyb3IsIGZuLCBsMSwgbGVuLCByZXN1bHQ7XG4gICAgZm4gPSBnZXRfYmluZGluZyh1c3Jfc3ltYm9sKG5hbWUpKTtcbiAgICBjaGVja19zdGFjaygpO1xuICAgIHB1c2goZm4pO1xuICAgIGZvciAobDEgPSAwLCBsZW4gPSBhcmd1cy5sZW5ndGg7IGwxIDwgbGVuOyBsMSsrKSB7XG4gICAgICBhcmd1ID0gYXJndXNbbDFdO1xuICAgICAgcGFyc2VfaW50ZXJuYWwoYXJndSk7XG4gICAgfVxuICAgIGxpc3QoMSArIGFyZ3VzLmxlbmd0aCk7XG4gICAgcDEgPSBwb3AoKTtcbiAgICBwdXNoKHAxKTtcbiAgICB0cnkge1xuICAgICAgdG9wX2xldmVsX2V2YWwoKTtcbiAgICAgIHJlc3VsdCA9IHBvcCgpO1xuICAgICAgY2hlY2tfc3RhY2soKTtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgcmVzZXRfYWZ0ZXJfZXJyb3IoKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gICQuZXhlYyA9IGV4ZWM7XG5cbiAgJC5wYXJzZSA9IHBhcnNlO1xuXG4gIChmdW5jdGlvbigpIHtcbiAgICB2YXIgYnVpbHRpbl9mbnMsIGZuLCBsMSwgbGVuLCByZXN1bHRzO1xuICAgIGJ1aWx0aW5fZm5zID0gW1wiYWJzXCIsIFwiYWRkXCIsIFwiYWRqXCIsIFwiYW5kXCIsIFwiYXBwcm94cmF0aW9cIiwgXCJhcmNjb3NcIiwgXCJhcmNjb3NoXCIsIFwiYXJjc2luXCIsIFwiYXJjc2luaFwiLCBcImFyY3RhblwiLCBcImFyY3RhbmhcIiwgXCJhcmdcIiwgXCJhdG9taXplXCIsIFwiYmVzc2VsalwiLCBcImJlc3NlbHlcIiwgXCJiaW5kaW5nXCIsIFwiYmlub21pYWxcIiwgXCJjZWlsaW5nXCIsIFwiY2hlY2tcIiwgXCJjaG9vc2VcIiwgXCJjaXJjZXhwXCIsIFwiY2xlYXJcIiwgXCJjbGVhcmFsbFwiLCBcImNsZWFycGF0dGVybnNcIiwgXCJjbG9ja1wiLCBcImNvZWZmXCIsIFwiY29mYWN0b3JcIiwgXCJjb25kZW5zZVwiLCBcImNvbmpcIiwgXCJjb250cmFjdFwiLCBcImNvc1wiLCBcImNvc2hcIiwgXCJkZWNvbXBcIiwgXCJkZWZpbnRcIiwgXCJkZWdcIiwgXCJkZW5vbWluYXRvclwiLCBcImRldFwiLCBcImRlcml2YXRpdmVcIiwgXCJkaW1cIiwgXCJkaXJhY1wiLCBcImRpdmlzb3JzXCIsIFwiZG9cIiwgXCJkb3RcIiwgXCJkcmF3XCIsIFwiZHNvbHZlXCIsIFwiZWlnZW5cIiwgXCJlaWdlbnZhbFwiLCBcImVpZ2VudmVjXCIsIFwiZXJmXCIsIFwiZXJmY1wiLCBcImV2YWxcIiwgXCJleHBcIiwgXCJleHBhbmRcIiwgXCJleHBjb3NcIiwgXCJleHBzaW5cIiwgXCJmYWN0b3JcIiwgXCJmYWN0b3JpYWxcIiwgXCJmYWN0b3Jwb2x5XCIsIFwiZmlsdGVyXCIsIFwiZmxvYXRcIiwgXCJmbG9vclwiLCBcImZvclwiLCBcIkdhbW1hXCIsIFwiZ2NkXCIsIFwiaGVybWl0ZVwiLCBcImhpbGJlcnRcIiwgXCJpbWFnXCIsIFwiY29tcG9uZW50XCIsIFwiaW5uZXJcIiwgXCJpbnRlZ3JhbFwiLCBcImludlwiLCBcImludmdcIiwgXCJpc2ludGVnZXJcIiwgXCJpc3ByaW1lXCIsIFwibGFndWVycmVcIiwgXCJsY21cIiwgXCJsZWFkaW5nXCIsIFwibGVnZW5kcmVcIiwgXCJsb2dcIiwgXCJtb2RcIiwgXCJtdWx0aXBseVwiLCBcIm5vdFwiLCBcIm5yb290c1wiLCBcIm51bWJlclwiLCBcIm51bWVyYXRvclwiLCBcIm9wZXJhdG9yXCIsIFwib3JcIiwgXCJvdXRlclwiLCBcInBhdHRlcm5cIiwgXCJwYXR0ZXJuc2luZm9cIiwgXCJwb2xhclwiLCBcInBvd2VyXCIsIFwicHJpbWVcIiwgXCJwcmludFwiLCBcInByaW50MmRhc2NpaVwiLCBcInByaW50Y29tcHV0ZXJcIiwgXCJwcmludGxhdGV4XCIsIFwicHJpbnRsaXN0XCIsIFwicHJpbnRodW1hblwiLCBcInByb2R1Y3RcIiwgXCJxdW90ZVwiLCBcInF1b3RpZW50XCIsIFwicmFua1wiLCBcInJhdGlvbmFsaXplXCIsIFwicmVhbFwiLCBcInJlY3RcIiwgXCJyb290c1wiLCBcInJvdW5kXCIsIFwiZXF1YWxzXCIsIFwic2hhcGVcIiwgXCJzZ25cIiwgXCJzaWxlbnRwYXR0ZXJuXCIsIFwic2ltcGxpZnlcIiwgXCJzaW5cIiwgXCJzaW5oXCIsIFwic3FydFwiLCBcInN0b3BcIiwgXCJzdWJzdFwiLCBcInN1bVwiLCBcInN5bWJvbHNpbmZvXCIsIFwidGFuXCIsIFwidGFuaFwiLCBcInRheWxvclwiLCBcInRlc3RcIiwgXCJ0ZXN0ZXFcIiwgXCJ0ZXN0Z2VcIiwgXCJ0ZXN0Z3RcIiwgXCJ0ZXN0bGVcIiwgXCJ0ZXN0bHRcIiwgXCJ0cmFuc3Bvc2VcIiwgXCJ1bml0XCIsIFwiemVyb1wiXTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChsMSA9IDAsIGxlbiA9IGJ1aWx0aW5fZm5zLmxlbmd0aDsgbDEgPCBsZW47IGwxKyspIHtcbiAgICAgIGZuID0gYnVpbHRpbl9mbnNbbDFdO1xuICAgICAgcmVzdWx0cy5wdXNoKCRbZm5dID0gZXhlYy5iaW5kKHRoaXMsIGZuKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9KSgpO1xuXG4gIGZyZWV6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmcm96ZW5Db250ZW50cywgZnJvemVuSGFzaCwgZnJvemVuUGF0dGVybnMsIGZyb3plblN5bWJvbHMsIGksIGwxLCByZWYyO1xuICAgIGZyb3plblN5bWJvbHMgPSBbXTtcbiAgICBmcm96ZW5Db250ZW50cyA9IFtdO1xuICAgIGZyb3plblBhdHRlcm5zID0gW107XG4gICAgZnJvemVuSGFzaCA9IFwiXCI7XG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gc3ltdGFiLmxlbmd0aDsgKDAgPD0gcmVmMiA/IGwxIDwgcmVmMiA6IGwxID4gcmVmMik7IGkgPSAwIDw9IHJlZjIgPyArK2wxIDogLS1sMSkge1xuICAgICAgLy9pZiBzeW10YWJbaV0ucHJpbnRuYW1lID09IFwiXCJcbiAgICAgIC8vICBpZiBpc1N5bWJvbFJlY2xhaW1hYmxlW2ldID09IGZhbHNlXG4gICAgICAvLyAgICBicmVha1xuICAgICAgLy8gIGVsc2VcbiAgICAgIC8vICAgIGNvbnRpbnVlXG4gICAgICBpZiAoaXNTeW1ib2xSZWNsYWltYWJsZVtpXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZnJvemVuU3ltYm9scy5wdXNoKHN5bXRhYltpXSk7XG4gICAgICAgIGZyb3plbkNvbnRlbnRzLnB1c2goYmluZGluZ1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGp1c3QgY2xvbmUgdGhlbVxuICAgIGZyb3plblBhdHRlcm5zID0gdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm0uc2xpY2UoMCk7XG4gICAgcmV0dXJuIFtmcm96ZW5TeW1ib2xzLCBmcm96ZW5Db250ZW50cywgZnJvemVuUGF0dGVybnMsIHplcm8sIG9uZSwgaW1hZ2luYXJ5dW5pdCwgZ2V0U3RhdGVIYXNoKCldO1xuICB9O1xuXG4gIHVuZnJlZXplID0gZnVuY3Rpb24oZnJvemVuKSB7XG4gICAgdmFyIGZyb3plbkNvbnRlbnRzLCBmcm96ZW5QYXR0ZXJucywgZnJvemVuU3ltYm9scywgaSwgbDEsIHJlZjI7XG4gICAgW2Zyb3plblN5bWJvbHMsIGZyb3plbkNvbnRlbnRzLCBmcm96ZW5QYXR0ZXJucywgemVybywgb25lLCBpbWFnaW5hcnl1bml0XSA9IGZyb3plbjtcbi8vY2xlYXJfc3ltYm9scygpXG4gICAgZm9yIChpID0gbDEgPSAwLCByZWYyID0gZnJvemVuU3ltYm9scy5sZW5ndGg7ICgwIDw9IHJlZjIgPyBsMSA8IHJlZjIgOiBsMSA+IHJlZjIpOyBpID0gMCA8PSByZWYyID8gKytsMSA6IC0tbDEpIHtcbiAgICAgIHN5bXRhYltpXSA9IGZyb3plblN5bWJvbHNbaV07XG4gICAgICBiaW5kaW5nW2ldID0gZnJvemVuQ29udGVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybSA9IGZyb3plblBhdHRlcm5zLnNsaWNlKDApO1xuICB9O1xuXG4gIGNvbXBhcmVTdGF0ZSA9IGZ1bmN0aW9uKHByZXZpb3VzSGFzaCkge1xuICAgIHZhciBmcm96ZW5IYXNoO1xuICAgIGZyb3plbkhhc2ggPSBnZXRTdGF0ZUhhc2goKTtcbiAgICBpZiAoZnJvemVuSGFzaCA9PT0gcHJldmlvdXNIYXNoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBnZXRTdGF0ZUhhc2ggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmluZGluZ2ksIGZyb3plbkhhc2gsIGksIGwxLCBsZW4sIG0xLCByZWYyLCByZWYzLCBzeW10YWJpO1xuICAgIGZyb3plbkhhc2ggPSBcIlwiO1xuICAgIGZvciAoaSA9IGwxID0gcmVmMiA9IE5JTCArIDEsIHJlZjMgPSBzeW10YWIubGVuZ3RoOyAocmVmMiA8PSByZWYzID8gbDEgPCByZWYzIDogbDEgPiByZWYzKTsgaSA9IHJlZjIgPD0gcmVmMyA/ICsrbDEgOiAtLWwxKSB7XG4gICAgICBpZiAoc3ltdGFiW2ldLnByaW50bmFtZSA9PT0gXCJcIikge1xuICAgICAgICBpZiAoaXNTeW1ib2xSZWNsYWltYWJsZVtpXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3ltdGFiaSA9IHByaW50X2xpc3Qoc3ltdGFiW2ldKTtcbiAgICAgIGJpbmRpbmdpID0gcHJpbnRfbGlzdChiaW5kaW5nW2ldKTtcbiAgICAgIGZyb3plbkhhc2ggKz0gXCIgLy9cIiArIHN5bXRhYmkgKyBcIiA6IFwiICsgYmluZGluZ2k7XG4gICAgfVxuICAgIGZvciAobTEgPSAwLCBsZW4gPSB1c2VyU2ltcGxpZmljYXRpb25zSW5MaXN0Rm9ybS5sZW5ndGg7IG0xIDwgbGVuOyBtMSsrKSB7XG4gICAgICBpID0gdXNlclNpbXBsaWZpY2F0aW9uc0luTGlzdEZvcm1bbTFdO1xuICAgICAgZnJvemVuSGFzaCArPSBcIiBwYXR0ZXJuOiBcIiArIGk7XG4gICAgfVxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coXCJmcm96ZW5IYXNoOiBcIiArIGZyb3plbkhhc2gpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvemVuSGFzaDtcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsInZhciBiaWdJbnQgPSAoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIEJBU0UgPSAxZTcsXHJcbiAgICAgICAgTE9HX0JBU0UgPSA3LFxyXG4gICAgICAgIE1BWF9JTlQgPSA5MDA3MTk5MjU0NzQwOTkyLFxyXG4gICAgICAgIE1BWF9JTlRfQVJSID0gc21hbGxUb0FycmF5KE1BWF9JTlQpLFxyXG4gICAgICAgIERFRkFVTFRfQUxQSEFCRVQgPSBcIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO1xyXG5cclxuICAgIHZhciBzdXBwb3J0c05hdGl2ZUJpZ0ludCA9IHR5cGVvZiBCaWdJbnQgPT09IFwiZnVuY3Rpb25cIjtcclxuXHJcbiAgICBmdW5jdGlvbiBJbnRlZ2VyKHYsIHJhZGl4LCBhbHBoYWJldCwgY2FzZVNlbnNpdGl2ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdiA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIEludGVnZXJbMF07XHJcbiAgICAgICAgaWYgKHR5cGVvZiByYWRpeCAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuICtyYWRpeCA9PT0gMTAgJiYgIWFscGhhYmV0ID8gcGFyc2VWYWx1ZSh2KSA6IHBhcnNlQmFzZSh2LCByYWRpeCwgYWxwaGFiZXQsIGNhc2VTZW5zaXRpdmUpO1xyXG4gICAgICAgIHJldHVybiBwYXJzZVZhbHVlKHYpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEJpZ0ludGVnZXIodmFsdWUsIHNpZ24pIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5zaWduID0gc2lnbjtcclxuICAgICAgICB0aGlzLmlzU21hbGwgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJbnRlZ2VyLnByb3RvdHlwZSk7XHJcblxyXG4gICAgZnVuY3Rpb24gU21hbGxJbnRlZ2VyKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuc2lnbiA9IHZhbHVlIDwgMDtcclxuICAgICAgICB0aGlzLmlzU21hbGwgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSW50ZWdlci5wcm90b3R5cGUpO1xyXG5cclxuICAgIGZ1bmN0aW9uIE5hdGl2ZUJpZ0ludCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEludGVnZXIucHJvdG90eXBlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBpc1ByZWNpc2Uobikge1xyXG4gICAgICAgIHJldHVybiAtTUFYX0lOVCA8IG4gJiYgbiA8IE1BWF9JTlQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc21hbGxUb0FycmF5KG4pIHsgLy8gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgZG9lc24ndCByZWZlcmVuY2UgQkFTRSwgbmVlZCB0byBjaGFuZ2UgdGhpcyBmdW5jdGlvbiBpZiBCQVNFIGNoYW5nZXNcclxuICAgICAgICBpZiAobiA8IDFlNylcclxuICAgICAgICAgICAgcmV0dXJuIFtuXTtcclxuICAgICAgICBpZiAobiA8IDFlMTQpXHJcbiAgICAgICAgICAgIHJldHVybiBbbiAlIDFlNywgTWF0aC5mbG9vcihuIC8gMWU3KV07XHJcbiAgICAgICAgcmV0dXJuIFtuICUgMWU3LCBNYXRoLmZsb29yKG4gLyAxZTcpICUgMWU3LCBNYXRoLmZsb29yKG4gLyAxZTE0KV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXJyYXlUb1NtYWxsKGFycikgeyAvLyBJZiBCQVNFIGNoYW5nZXMgdGhpcyBmdW5jdGlvbiBtYXkgbmVlZCB0byBjaGFuZ2VcclxuICAgICAgICB0cmltKGFycik7XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGxlbmd0aCA8IDQgJiYgY29tcGFyZUFicyhhcnIsIE1BWF9JTlRfQVJSKSA8IDApIHtcclxuICAgICAgICAgICAgc3dpdGNoIChsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBhcnJbMF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBhcnJbMF0gKyBhcnJbMV0gKiBCQVNFO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGFyclswXSArIChhcnJbMV0gKyBhcnJbMl0gKiBCQVNFKSAqIEJBU0U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0cmltKHYpIHtcclxuICAgICAgICB2YXIgaSA9IHYubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlICh2Wy0taV0gPT09IDApO1xyXG4gICAgICAgIHYubGVuZ3RoID0gaSArIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQXJyYXkobGVuZ3RoKSB7IC8vIGZ1bmN0aW9uIHNoYW1lbGVzc2x5IHN0b2xlbiBmcm9tIFlhZmZsZSdzIGxpYnJhcnkgaHR0cHM6Ly9naXRodWIuY29tL1lhZmZsZS9CaWdJbnRlZ2VyXHJcbiAgICAgICAgdmFyIHggPSBuZXcgQXJyYXkobGVuZ3RoKTtcclxuICAgICAgICB2YXIgaSA9IC0xO1xyXG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgeFtpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB4O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRydW5jYXRlKG4pIHtcclxuICAgICAgICBpZiAobiA+IDApIHJldHVybiBNYXRoLmZsb29yKG4pO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkKGEsIGIpIHsgLy8gYXNzdW1lcyBhIGFuZCBiIGFyZSBhcnJheXMgd2l0aCBhLmxlbmd0aCA+PSBiLmxlbmd0aFxyXG4gICAgICAgIHZhciBsX2EgPSBhLmxlbmd0aCxcclxuICAgICAgICAgICAgbF9iID0gYi5sZW5ndGgsXHJcbiAgICAgICAgICAgIHIgPSBuZXcgQXJyYXkobF9hKSxcclxuICAgICAgICAgICAgY2FycnkgPSAwLFxyXG4gICAgICAgICAgICBiYXNlID0gQkFTRSxcclxuICAgICAgICAgICAgc3VtLCBpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsX2I7IGkrKykge1xyXG4gICAgICAgICAgICBzdW0gPSBhW2ldICsgYltpXSArIGNhcnJ5O1xyXG4gICAgICAgICAgICBjYXJyeSA9IHN1bSA+PSBiYXNlID8gMSA6IDA7XHJcbiAgICAgICAgICAgIHJbaV0gPSBzdW0gLSBjYXJyeSAqIGJhc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChpIDwgbF9hKSB7XHJcbiAgICAgICAgICAgIHN1bSA9IGFbaV0gKyBjYXJyeTtcclxuICAgICAgICAgICAgY2FycnkgPSBzdW0gPT09IGJhc2UgPyAxIDogMDtcclxuICAgICAgICAgICAgcltpKytdID0gc3VtIC0gY2FycnkgKiBiYXNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FycnkgPiAwKSByLnB1c2goY2FycnkpO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFkZEFueShhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEubGVuZ3RoID49IGIubGVuZ3RoKSByZXR1cm4gYWRkKGEsIGIpO1xyXG4gICAgICAgIHJldHVybiBhZGQoYiwgYSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkU21hbGwoYSwgY2FycnkpIHsgLy8gYXNzdW1lcyBhIGlzIGFycmF5LCBjYXJyeSBpcyBudW1iZXIgd2l0aCAwIDw9IGNhcnJ5IDwgTUFYX0lOVFxyXG4gICAgICAgIHZhciBsID0gYS5sZW5ndGgsXHJcbiAgICAgICAgICAgIHIgPSBuZXcgQXJyYXkobCksXHJcbiAgICAgICAgICAgIGJhc2UgPSBCQVNFLFxyXG4gICAgICAgICAgICBzdW0sIGk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBzdW0gPSBhW2ldIC0gYmFzZSArIGNhcnJ5O1xyXG4gICAgICAgICAgICBjYXJyeSA9IE1hdGguZmxvb3Ioc3VtIC8gYmFzZSk7XHJcbiAgICAgICAgICAgIHJbaV0gPSBzdW0gLSBjYXJyeSAqIGJhc2U7XHJcbiAgICAgICAgICAgIGNhcnJ5ICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChjYXJyeSA+IDApIHtcclxuICAgICAgICAgICAgcltpKytdID0gY2FycnkgJSBiYXNlO1xyXG4gICAgICAgICAgICBjYXJyeSA9IE1hdGguZmxvb3IoY2FycnkgLyBiYXNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICB2YXIgbiA9IHBhcnNlVmFsdWUodik7XHJcbiAgICAgICAgaWYgKHRoaXMuc2lnbiAhPT0gbi5zaWduKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnRyYWN0KG4ubmVnYXRlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYSA9IHRoaXMudmFsdWUsIGIgPSBuLnZhbHVlO1xyXG4gICAgICAgIGlmIChuLmlzU21hbGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGFkZFNtYWxsKGEsIE1hdGguYWJzKGIpKSwgdGhpcy5zaWduKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGFkZEFueShhLCBiKSwgdGhpcy5zaWduKTtcclxuICAgIH07XHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5wbHVzID0gQmlnSW50ZWdlci5wcm90b3R5cGUuYWRkO1xyXG5cclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICB2YXIgbiA9IHBhcnNlVmFsdWUodik7XHJcbiAgICAgICAgdmFyIGEgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgIGlmIChhIDwgMCAhPT0gbi5zaWduKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnRyYWN0KG4ubmVnYXRlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYiA9IG4udmFsdWU7XHJcbiAgICAgICAgaWYgKG4uaXNTbWFsbCkge1xyXG4gICAgICAgICAgICBpZiAoaXNQcmVjaXNlKGEgKyBiKSkgcmV0dXJuIG5ldyBTbWFsbEludGVnZXIoYSArIGIpO1xyXG4gICAgICAgICAgICBiID0gc21hbGxUb0FycmF5KE1hdGguYWJzKGIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGFkZFNtYWxsKGIsIE1hdGguYWJzKGEpKSwgYSA8IDApO1xyXG4gICAgfTtcclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUucGx1cyA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUuYWRkO1xyXG5cclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUJpZ0ludCh0aGlzLnZhbHVlICsgcGFyc2VWYWx1ZSh2KS52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnBsdXMgPSBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmFkZDtcclxuXHJcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdChhLCBiKSB7IC8vIGFzc3VtZXMgYSBhbmQgYiBhcmUgYXJyYXlzIHdpdGggYSA+PSBiXHJcbiAgICAgICAgdmFyIGFfbCA9IGEubGVuZ3RoLFxyXG4gICAgICAgICAgICBiX2wgPSBiLmxlbmd0aCxcclxuICAgICAgICAgICAgciA9IG5ldyBBcnJheShhX2wpLFxyXG4gICAgICAgICAgICBib3Jyb3cgPSAwLFxyXG4gICAgICAgICAgICBiYXNlID0gQkFTRSxcclxuICAgICAgICAgICAgaSwgZGlmZmVyZW5jZTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYl9sOyBpKyspIHtcclxuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IGFbaV0gLSBib3Jyb3cgLSBiW2ldO1xyXG4gICAgICAgICAgICBpZiAoZGlmZmVyZW5jZSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGRpZmZlcmVuY2UgKz0gYmFzZTtcclxuICAgICAgICAgICAgICAgIGJvcnJvdyA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSBib3Jyb3cgPSAwO1xyXG4gICAgICAgICAgICByW2ldID0gZGlmZmVyZW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChpID0gYl9sOyBpIDwgYV9sOyBpKyspIHtcclxuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IGFbaV0gLSBib3Jyb3c7XHJcbiAgICAgICAgICAgIGlmIChkaWZmZXJlbmNlIDwgMCkgZGlmZmVyZW5jZSArPSBiYXNlO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJbaSsrXSA9IGRpZmZlcmVuY2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByW2ldID0gZGlmZmVyZW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICg7IGkgPCBhX2w7IGkrKykge1xyXG4gICAgICAgICAgICByW2ldID0gYVtpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJpbShyKTtcclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdEFueShhLCBiLCBzaWduKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgIGlmIChjb21wYXJlQWJzKGEsIGIpID49IDApIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBzdWJ0cmFjdChhLCBiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHN1YnRyYWN0KGIsIGEpO1xyXG4gICAgICAgICAgICBzaWduID0gIXNpZ247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbHVlID0gYXJyYXlUb1NtYWxsKHZhbHVlKTtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGlmIChzaWduKSB2YWx1ZSA9IC12YWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTbWFsbEludGVnZXIodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIodmFsdWUsIHNpZ24pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0U21hbGwoYSwgYiwgc2lnbikgeyAvLyBhc3N1bWVzIGEgaXMgYXJyYXksIGIgaXMgbnVtYmVyIHdpdGggMCA8PSBiIDwgTUFYX0lOVFxyXG4gICAgICAgIHZhciBsID0gYS5sZW5ndGgsXHJcbiAgICAgICAgICAgIHIgPSBuZXcgQXJyYXkobCksXHJcbiAgICAgICAgICAgIGNhcnJ5ID0gLWIsXHJcbiAgICAgICAgICAgIGJhc2UgPSBCQVNFLFxyXG4gICAgICAgICAgICBpLCBkaWZmZXJlbmNlO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IGFbaV0gKyBjYXJyeTtcclxuICAgICAgICAgICAgY2FycnkgPSBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBiYXNlKTtcclxuICAgICAgICAgICAgZGlmZmVyZW5jZSAlPSBiYXNlO1xyXG4gICAgICAgICAgICByW2ldID0gZGlmZmVyZW5jZSA8IDAgPyBkaWZmZXJlbmNlICsgYmFzZSA6IGRpZmZlcmVuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHIgPSBhcnJheVRvU21hbGwocik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiByID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGlmIChzaWduKSByID0gLXI7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU21hbGxJbnRlZ2VyKHIpO1xyXG4gICAgICAgIH0gcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKHIsIHNpZ24pO1xyXG4gICAgfVxyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICB2YXIgbiA9IHBhcnNlVmFsdWUodik7XHJcbiAgICAgICAgaWYgKHRoaXMuc2lnbiAhPT0gbi5zaWduKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChuLm5lZ2F0ZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGEgPSB0aGlzLnZhbHVlLCBiID0gbi52YWx1ZTtcclxuICAgICAgICBpZiAobi5pc1NtYWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gc3VidHJhY3RTbWFsbChhLCBNYXRoLmFicyhiKSwgdGhpcy5zaWduKTtcclxuICAgICAgICByZXR1cm4gc3VidHJhY3RBbnkoYSwgYiwgdGhpcy5zaWduKTtcclxuICAgIH07XHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5taW51cyA9IEJpZ0ludGVnZXIucHJvdG90eXBlLnN1YnRyYWN0O1xyXG5cclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHZhciBuID0gcGFyc2VWYWx1ZSh2KTtcclxuICAgICAgICB2YXIgYSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgaWYgKGEgPCAwICE9PSBuLnNpZ24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKG4ubmVnYXRlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYiA9IG4udmFsdWU7XHJcbiAgICAgICAgaWYgKG4uaXNTbWFsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNtYWxsSW50ZWdlcihhIC0gYik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdWJ0cmFjdFNtYWxsKGIsIE1hdGguYWJzKGEpLCBhID49IDApO1xyXG4gICAgfTtcclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUubWludXMgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLnN1YnRyYWN0O1xyXG5cclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHJldHVybiBuZXcgTmF0aXZlQmlnSW50KHRoaXMudmFsdWUgLSBwYXJzZVZhbHVlKHYpLnZhbHVlKTtcclxuICAgIH1cclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUubWludXMgPSBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnN1YnRyYWN0O1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIodGhpcy52YWx1ZSwgIXRoaXMuc2lnbik7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5uZWdhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNpZ24gPSB0aGlzLnNpZ247XHJcbiAgICAgICAgdmFyIHNtYWxsID0gbmV3IFNtYWxsSW50ZWdlcigtdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgc21hbGwuc2lnbiA9ICFzaWduO1xyXG4gICAgICAgIHJldHVybiBzbWFsbDtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUJpZ0ludCgtdGhpcy52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcih0aGlzLnZhbHVlLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTbWFsbEludGVnZXIoTWF0aC5hYnModGhpcy52YWx1ZSkpO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTmF0aXZlQmlnSW50KHRoaXMudmFsdWUgPj0gMCA/IHRoaXMudmFsdWUgOiAtdGhpcy52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5TG9uZyhhLCBiKSB7XHJcbiAgICAgICAgdmFyIGFfbCA9IGEubGVuZ3RoLFxyXG4gICAgICAgICAgICBiX2wgPSBiLmxlbmd0aCxcclxuICAgICAgICAgICAgbCA9IGFfbCArIGJfbCxcclxuICAgICAgICAgICAgciA9IGNyZWF0ZUFycmF5KGwpLFxyXG4gICAgICAgICAgICBiYXNlID0gQkFTRSxcclxuICAgICAgICAgICAgcHJvZHVjdCwgY2FycnksIGksIGFfaSwgYl9qO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhX2w7ICsraSkge1xyXG4gICAgICAgICAgICBhX2kgPSBhW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJfbDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICBiX2ogPSBiW2pdO1xyXG4gICAgICAgICAgICAgICAgcHJvZHVjdCA9IGFfaSAqIGJfaiArIHJbaSArIGpdO1xyXG4gICAgICAgICAgICAgICAgY2FycnkgPSBNYXRoLmZsb29yKHByb2R1Y3QgLyBiYXNlKTtcclxuICAgICAgICAgICAgICAgIHJbaSArIGpdID0gcHJvZHVjdCAtIGNhcnJ5ICogYmFzZTtcclxuICAgICAgICAgICAgICAgIHJbaSArIGogKyAxXSArPSBjYXJyeTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0cmltKHIpO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5U21hbGwoYSwgYikgeyAvLyBhc3N1bWVzIGEgaXMgYXJyYXksIGIgaXMgbnVtYmVyIHdpdGggfGJ8IDwgQkFTRVxyXG4gICAgICAgIHZhciBsID0gYS5sZW5ndGgsXHJcbiAgICAgICAgICAgIHIgPSBuZXcgQXJyYXkobCksXHJcbiAgICAgICAgICAgIGJhc2UgPSBCQVNFLFxyXG4gICAgICAgICAgICBjYXJyeSA9IDAsXHJcbiAgICAgICAgICAgIHByb2R1Y3QsIGk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBwcm9kdWN0ID0gYVtpXSAqIGIgKyBjYXJyeTtcclxuICAgICAgICAgICAgY2FycnkgPSBNYXRoLmZsb29yKHByb2R1Y3QgLyBiYXNlKTtcclxuICAgICAgICAgICAgcltpXSA9IHByb2R1Y3QgLSBjYXJyeSAqIGJhc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChjYXJyeSA+IDApIHtcclxuICAgICAgICAgICAgcltpKytdID0gY2FycnkgJSBiYXNlO1xyXG4gICAgICAgICAgICBjYXJyeSA9IE1hdGguZmxvb3IoY2FycnkgLyBiYXNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2hpZnRMZWZ0KHgsIG4pIHtcclxuICAgICAgICB2YXIgciA9IFtdO1xyXG4gICAgICAgIHdoaWxlIChuLS0gPiAwKSByLnB1c2goMCk7XHJcbiAgICAgICAgcmV0dXJuIHIuY29uY2F0KHgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5S2FyYXRzdWJhKHgsIHkpIHtcclxuICAgICAgICB2YXIgbiA9IE1hdGgubWF4KHgubGVuZ3RoLCB5Lmxlbmd0aCk7XHJcblxyXG4gICAgICAgIGlmIChuIDw9IDMwKSByZXR1cm4gbXVsdGlwbHlMb25nKHgsIHkpO1xyXG4gICAgICAgIG4gPSBNYXRoLmNlaWwobiAvIDIpO1xyXG5cclxuICAgICAgICB2YXIgYiA9IHguc2xpY2UobiksXHJcbiAgICAgICAgICAgIGEgPSB4LnNsaWNlKDAsIG4pLFxyXG4gICAgICAgICAgICBkID0geS5zbGljZShuKSxcclxuICAgICAgICAgICAgYyA9IHkuc2xpY2UoMCwgbik7XHJcblxyXG4gICAgICAgIHZhciBhYyA9IG11bHRpcGx5S2FyYXRzdWJhKGEsIGMpLFxyXG4gICAgICAgICAgICBiZCA9IG11bHRpcGx5S2FyYXRzdWJhKGIsIGQpLFxyXG4gICAgICAgICAgICBhYmNkID0gbXVsdGlwbHlLYXJhdHN1YmEoYWRkQW55KGEsIGIpLCBhZGRBbnkoYywgZCkpO1xyXG5cclxuICAgICAgICB2YXIgcHJvZHVjdCA9IGFkZEFueShhZGRBbnkoYWMsIHNoaWZ0TGVmdChzdWJ0cmFjdChzdWJ0cmFjdChhYmNkLCBhYyksIGJkKSwgbikpLCBzaGlmdExlZnQoYmQsIDIgKiBuKSk7XHJcbiAgICAgICAgdHJpbShwcm9kdWN0KTtcclxuICAgICAgICByZXR1cm4gcHJvZHVjdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIGlzIGRlcml2ZWQgZnJvbSBhIHN1cmZhY2UgZml0IG9mIGEgZ3JhcGggcGxvdHRpbmcgdGhlIHBlcmZvcm1hbmNlIGRpZmZlcmVuY2VcclxuICAgIC8vIGJldHdlZW4gbG9uZyBtdWx0aXBsaWNhdGlvbiBhbmQga2FyYXRzdWJhIG11bHRpcGxpY2F0aW9uIHZlcnN1cyB0aGUgbGVuZ3RocyBvZiB0aGUgdHdvIGFycmF5cy5cclxuICAgIGZ1bmN0aW9uIHVzZUthcmF0c3ViYShsMSwgbDIpIHtcclxuICAgICAgICByZXR1cm4gLTAuMDEyICogbDEgLSAwLjAxMiAqIGwyICsgMC4wMDAwMTUgKiBsMSAqIGwyID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseSA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgdmFyIG4gPSBwYXJzZVZhbHVlKHYpLFxyXG4gICAgICAgICAgICBhID0gdGhpcy52YWx1ZSwgYiA9IG4udmFsdWUsXHJcbiAgICAgICAgICAgIHNpZ24gPSB0aGlzLnNpZ24gIT09IG4uc2lnbixcclxuICAgICAgICAgICAgYWJzO1xyXG4gICAgICAgIGlmIChuLmlzU21hbGwpIHtcclxuICAgICAgICAgICAgaWYgKGIgPT09IDApIHJldHVybiBJbnRlZ2VyWzBdO1xyXG4gICAgICAgICAgICBpZiAoYiA9PT0gMSkgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIGlmIChiID09PSAtMSkgcmV0dXJuIHRoaXMubmVnYXRlKCk7XHJcbiAgICAgICAgICAgIGFicyA9IE1hdGguYWJzKGIpO1xyXG4gICAgICAgICAgICBpZiAoYWJzIDwgQkFTRSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG11bHRpcGx5U21hbGwoYSwgYWJzKSwgc2lnbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYiA9IHNtYWxsVG9BcnJheShhYnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXNlS2FyYXRzdWJhKGEubGVuZ3RoLCBiLmxlbmd0aCkpIC8vIEthcmF0c3ViYSBpcyBvbmx5IGZhc3RlciBmb3IgY2VydGFpbiBhcnJheSBzaXplc1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIobXVsdGlwbHlLYXJhdHN1YmEoYSwgYiksIHNpZ24pO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihtdWx0aXBseUxvbmcoYSwgYiksIHNpZ24pO1xyXG4gICAgfTtcclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS50aW1lcyA9IEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5O1xyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5U21hbGxBbmRBcnJheShhLCBiLCBzaWduKSB7IC8vIGEgPj0gMFxyXG4gICAgICAgIGlmIChhIDwgQkFTRSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZ0ludGVnZXIobXVsdGlwbHlTbWFsbChiLCBhKSwgc2lnbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihtdWx0aXBseUxvbmcoYiwgc21hbGxUb0FycmF5KGEpKSwgc2lnbik7XHJcbiAgICB9XHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLl9tdWx0aXBseUJ5U21hbGwgPSBmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgIGlmIChpc1ByZWNpc2UoYS52YWx1ZSAqIHRoaXMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU21hbGxJbnRlZ2VyKGEudmFsdWUgKiB0aGlzLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG11bHRpcGx5U21hbGxBbmRBcnJheShNYXRoLmFicyhhLnZhbHVlKSwgc21hbGxUb0FycmF5KE1hdGguYWJzKHRoaXMudmFsdWUpKSwgdGhpcy5zaWduICE9PSBhLnNpZ24pO1xyXG4gICAgfTtcclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLl9tdWx0aXBseUJ5U21hbGwgPSBmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgIGlmIChhLnZhbHVlID09PSAwKSByZXR1cm4gSW50ZWdlclswXTtcclxuICAgICAgICBpZiAoYS52YWx1ZSA9PT0gMSkgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgaWYgKGEudmFsdWUgPT09IC0xKSByZXR1cm4gdGhpcy5uZWdhdGUoKTtcclxuICAgICAgICByZXR1cm4gbXVsdGlwbHlTbWFsbEFuZEFycmF5KE1hdGguYWJzKGEudmFsdWUpLCB0aGlzLnZhbHVlLCB0aGlzLnNpZ24gIT09IGEuc2lnbik7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseSA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlVmFsdWUodikuX211bHRpcGx5QnlTbWFsbCh0aGlzKTtcclxuICAgIH07XHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLnRpbWVzID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseTtcclxuXHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUJpZ0ludCh0aGlzLnZhbHVlICogcGFyc2VWYWx1ZSh2KS52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnRpbWVzID0gTmF0aXZlQmlnSW50LnByb3RvdHlwZS5tdWx0aXBseTtcclxuXHJcbiAgICBmdW5jdGlvbiBzcXVhcmUoYSkge1xyXG4gICAgICAgIC8vY29uc29sZS5hc3NlcnQoMiAqIEJBU0UgKiBCQVNFIDwgTUFYX0lOVCk7XHJcbiAgICAgICAgdmFyIGwgPSBhLmxlbmd0aCxcclxuICAgICAgICAgICAgciA9IGNyZWF0ZUFycmF5KGwgKyBsKSxcclxuICAgICAgICAgICAgYmFzZSA9IEJBU0UsXHJcbiAgICAgICAgICAgIHByb2R1Y3QsIGNhcnJ5LCBpLCBhX2ksIGFfajtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFfaSA9IGFbaV07XHJcbiAgICAgICAgICAgIGNhcnJ5ID0gMCAtIGFfaSAqIGFfaTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGk7IGogPCBsOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGFfaiA9IGFbal07XHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0ID0gMiAqIChhX2kgKiBhX2opICsgcltpICsgal0gKyBjYXJyeTtcclxuICAgICAgICAgICAgICAgIGNhcnJ5ID0gTWF0aC5mbG9vcihwcm9kdWN0IC8gYmFzZSk7XHJcbiAgICAgICAgICAgICAgICByW2kgKyBqXSA9IHByb2R1Y3QgLSBjYXJyeSAqIGJhc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcltpICsgbF0gPSBjYXJyeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJpbShyKTtcclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH1cclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zcXVhcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKHNxdWFyZSh0aGlzLnZhbHVlKSwgZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLnNxdWFyZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlICogdGhpcy52YWx1ZTtcclxuICAgICAgICBpZiAoaXNQcmVjaXNlKHZhbHVlKSkgcmV0dXJuIG5ldyBTbWFsbEludGVnZXIodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihzcXVhcmUoc21hbGxUb0FycmF5KE1hdGguYWJzKHRoaXMudmFsdWUpKSksIGZhbHNlKTtcclxuICAgIH07XHJcblxyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5zcXVhcmUgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHJldHVybiBuZXcgTmF0aXZlQmlnSW50KHRoaXMudmFsdWUgKiB0aGlzLnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXZNb2QxKGEsIGIpIHsgLy8gTGVmdCBvdmVyIGZyb20gcHJldmlvdXMgdmVyc2lvbi4gUGVyZm9ybXMgZmFzdGVyIHRoYW4gZGl2TW9kMiBvbiBzbWFsbGVyIGlucHV0IHNpemVzLlxyXG4gICAgICAgIHZhciBhX2wgPSBhLmxlbmd0aCxcclxuICAgICAgICAgICAgYl9sID0gYi5sZW5ndGgsXHJcbiAgICAgICAgICAgIGJhc2UgPSBCQVNFLFxyXG4gICAgICAgICAgICByZXN1bHQgPSBjcmVhdGVBcnJheShiLmxlbmd0aCksXHJcbiAgICAgICAgICAgIGRpdmlzb3JNb3N0U2lnbmlmaWNhbnREaWdpdCA9IGJbYl9sIC0gMV0sXHJcbiAgICAgICAgICAgIC8vIG5vcm1hbGl6YXRpb25cclxuICAgICAgICAgICAgbGFtYmRhID0gTWF0aC5jZWlsKGJhc2UgLyAoMiAqIGRpdmlzb3JNb3N0U2lnbmlmaWNhbnREaWdpdCkpLFxyXG4gICAgICAgICAgICByZW1haW5kZXIgPSBtdWx0aXBseVNtYWxsKGEsIGxhbWJkYSksXHJcbiAgICAgICAgICAgIGRpdmlzb3IgPSBtdWx0aXBseVNtYWxsKGIsIGxhbWJkYSksXHJcbiAgICAgICAgICAgIHF1b3RpZW50RGlnaXQsIHNoaWZ0LCBjYXJyeSwgYm9ycm93LCBpLCBsLCBxO1xyXG4gICAgICAgIGlmIChyZW1haW5kZXIubGVuZ3RoIDw9IGFfbCkgcmVtYWluZGVyLnB1c2goMCk7XHJcbiAgICAgICAgZGl2aXNvci5wdXNoKDApO1xyXG4gICAgICAgIGRpdmlzb3JNb3N0U2lnbmlmaWNhbnREaWdpdCA9IGRpdmlzb3JbYl9sIC0gMV07XHJcbiAgICAgICAgZm9yIChzaGlmdCA9IGFfbCAtIGJfbDsgc2hpZnQgPj0gMDsgc2hpZnQtLSkge1xyXG4gICAgICAgICAgICBxdW90aWVudERpZ2l0ID0gYmFzZSAtIDE7XHJcbiAgICAgICAgICAgIGlmIChyZW1haW5kZXJbc2hpZnQgKyBiX2xdICE9PSBkaXZpc29yTW9zdFNpZ25pZmljYW50RGlnaXQpIHtcclxuICAgICAgICAgICAgICAgIHF1b3RpZW50RGlnaXQgPSBNYXRoLmZsb29yKChyZW1haW5kZXJbc2hpZnQgKyBiX2xdICogYmFzZSArIHJlbWFpbmRlcltzaGlmdCArIGJfbCAtIDFdKSAvIGRpdmlzb3JNb3N0U2lnbmlmaWNhbnREaWdpdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcXVvdGllbnREaWdpdCA8PSBiYXNlIC0gMVxyXG4gICAgICAgICAgICBjYXJyeSA9IDA7XHJcbiAgICAgICAgICAgIGJvcnJvdyA9IDA7XHJcbiAgICAgICAgICAgIGwgPSBkaXZpc29yLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY2FycnkgKz0gcXVvdGllbnREaWdpdCAqIGRpdmlzb3JbaV07XHJcbiAgICAgICAgICAgICAgICBxID0gTWF0aC5mbG9vcihjYXJyeSAvIGJhc2UpO1xyXG4gICAgICAgICAgICAgICAgYm9ycm93ICs9IHJlbWFpbmRlcltzaGlmdCArIGldIC0gKGNhcnJ5IC0gcSAqIGJhc2UpO1xyXG4gICAgICAgICAgICAgICAgY2FycnkgPSBxO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJvcnJvdyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1haW5kZXJbc2hpZnQgKyBpXSA9IGJvcnJvdyArIGJhc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9ycm93ID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmRlcltzaGlmdCArIGldID0gYm9ycm93O1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcnJvdyA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2hpbGUgKGJvcnJvdyAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcXVvdGllbnREaWdpdCAtPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FycnkgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhcnJ5ICs9IHJlbWFpbmRlcltzaGlmdCArIGldIC0gYmFzZSArIGRpdmlzb3JbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcnJ5IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1haW5kZXJbc2hpZnQgKyBpXSA9IGNhcnJ5ICsgYmFzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FycnkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmRlcltzaGlmdCArIGldID0gY2Fycnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcnJ5ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBib3Jyb3cgKz0gY2Fycnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0W3NoaWZ0XSA9IHF1b3RpZW50RGlnaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRlbm9ybWFsaXphdGlvblxyXG4gICAgICAgIHJlbWFpbmRlciA9IGRpdk1vZFNtYWxsKHJlbWFpbmRlciwgbGFtYmRhKVswXTtcclxuICAgICAgICByZXR1cm4gW2FycmF5VG9TbWFsbChyZXN1bHQpLCBhcnJheVRvU21hbGwocmVtYWluZGVyKV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGl2TW9kMihhLCBiKSB7IC8vIEltcGxlbWVudGF0aW9uIGlkZWEgc2hhbWVsZXNzbHkgc3RvbGVuIGZyb20gU2lsZW50IE1hdHQncyBsaWJyYXJ5IGh0dHA6Ly9zaWxlbnRtYXR0LmNvbS9iaWdpbnRlZ2VyL1xyXG4gICAgICAgIC8vIFBlcmZvcm1zIGZhc3RlciB0aGFuIGRpdk1vZDEgb24gbGFyZ2VyIGlucHV0IHNpemVzLlxyXG4gICAgICAgIHZhciBhX2wgPSBhLmxlbmd0aCxcclxuICAgICAgICAgICAgYl9sID0gYi5sZW5ndGgsXHJcbiAgICAgICAgICAgIHJlc3VsdCA9IFtdLFxyXG4gICAgICAgICAgICBwYXJ0ID0gW10sXHJcbiAgICAgICAgICAgIGJhc2UgPSBCQVNFLFxyXG4gICAgICAgICAgICBndWVzcywgeGxlbiwgaGlnaHgsIGhpZ2h5LCBjaGVjaztcclxuICAgICAgICB3aGlsZSAoYV9sKSB7XHJcbiAgICAgICAgICAgIHBhcnQudW5zaGlmdChhWy0tYV9sXSk7XHJcbiAgICAgICAgICAgIHRyaW0ocGFydCk7XHJcbiAgICAgICAgICAgIGlmIChjb21wYXJlQWJzKHBhcnQsIGIpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goMCk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB4bGVuID0gcGFydC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGhpZ2h4ID0gcGFydFt4bGVuIC0gMV0gKiBiYXNlICsgcGFydFt4bGVuIC0gMl07XHJcbiAgICAgICAgICAgIGhpZ2h5ID0gYltiX2wgLSAxXSAqIGJhc2UgKyBiW2JfbCAtIDJdO1xyXG4gICAgICAgICAgICBpZiAoeGxlbiA+IGJfbCkge1xyXG4gICAgICAgICAgICAgICAgaGlnaHggPSAoaGlnaHggKyAxKSAqIGJhc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3Vlc3MgPSBNYXRoLmNlaWwoaGlnaHggLyBoaWdoeSk7XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrID0gbXVsdGlwbHlTbWFsbChiLCBndWVzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZUFicyhjaGVjaywgcGFydCkgPD0gMCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBndWVzcy0tO1xyXG4gICAgICAgICAgICB9IHdoaWxlIChndWVzcyk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGd1ZXNzKTtcclxuICAgICAgICAgICAgcGFydCA9IHN1YnRyYWN0KHBhcnQsIGNoZWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0LnJldmVyc2UoKTtcclxuICAgICAgICByZXR1cm4gW2FycmF5VG9TbWFsbChyZXN1bHQpLCBhcnJheVRvU21hbGwocGFydCldO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpdk1vZFNtYWxsKHZhbHVlLCBsYW1iZGEpIHtcclxuICAgICAgICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoLFxyXG4gICAgICAgICAgICBxdW90aWVudCA9IGNyZWF0ZUFycmF5KGxlbmd0aCksXHJcbiAgICAgICAgICAgIGJhc2UgPSBCQVNFLFxyXG4gICAgICAgICAgICBpLCBxLCByZW1haW5kZXIsIGRpdmlzb3I7XHJcbiAgICAgICAgcmVtYWluZGVyID0gMDtcclxuICAgICAgICBmb3IgKGkgPSBsZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICBkaXZpc29yID0gcmVtYWluZGVyICogYmFzZSArIHZhbHVlW2ldO1xyXG4gICAgICAgICAgICBxID0gdHJ1bmNhdGUoZGl2aXNvciAvIGxhbWJkYSk7XHJcbiAgICAgICAgICAgIHJlbWFpbmRlciA9IGRpdmlzb3IgLSBxICogbGFtYmRhO1xyXG4gICAgICAgICAgICBxdW90aWVudFtpXSA9IHEgfCAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW3F1b3RpZW50LCByZW1haW5kZXIgfCAwXTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXZNb2RBbnkoc2VsZiwgdikge1xyXG4gICAgICAgIHZhciB2YWx1ZSwgbiA9IHBhcnNlVmFsdWUodik7XHJcbiAgICAgICAgaWYgKHN1cHBvcnRzTmF0aXZlQmlnSW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbbmV3IE5hdGl2ZUJpZ0ludChzZWxmLnZhbHVlIC8gbi52YWx1ZSksIG5ldyBOYXRpdmVCaWdJbnQoc2VsZi52YWx1ZSAlIG4udmFsdWUpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGEgPSBzZWxmLnZhbHVlLCBiID0gbi52YWx1ZTtcclxuICAgICAgICB2YXIgcXVvdGllbnQ7XHJcbiAgICAgICAgaWYgKGIgPT09IDApIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBkaXZpZGUgYnkgemVyb1wiKTtcclxuICAgICAgICBpZiAoc2VsZi5pc1NtYWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChuLmlzU21hbGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IFNtYWxsSW50ZWdlcih0cnVuY2F0ZShhIC8gYikpLCBuZXcgU21hbGxJbnRlZ2VyKGEgJSBiKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFtJbnRlZ2VyWzBdLCBzZWxmXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4uaXNTbWFsbCkge1xyXG4gICAgICAgICAgICBpZiAoYiA9PT0gMSkgcmV0dXJuIFtzZWxmLCBJbnRlZ2VyWzBdXTtcclxuICAgICAgICAgICAgaWYgKGIgPT0gLTEpIHJldHVybiBbc2VsZi5uZWdhdGUoKSwgSW50ZWdlclswXV07XHJcbiAgICAgICAgICAgIHZhciBhYnMgPSBNYXRoLmFicyhiKTtcclxuICAgICAgICAgICAgaWYgKGFicyA8IEJBU0UpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGl2TW9kU21hbGwoYSwgYWJzKTtcclxuICAgICAgICAgICAgICAgIHF1b3RpZW50ID0gYXJyYXlUb1NtYWxsKHZhbHVlWzBdKTtcclxuICAgICAgICAgICAgICAgIHZhciByZW1haW5kZXIgPSB2YWx1ZVsxXTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNpZ24pIHJlbWFpbmRlciA9IC1yZW1haW5kZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHF1b3RpZW50ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuc2lnbiAhPT0gbi5zaWduKSBxdW90aWVudCA9IC1xdW90aWVudDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBTbWFsbEludGVnZXIocXVvdGllbnQpLCBuZXcgU21hbGxJbnRlZ2VyKHJlbWFpbmRlcildO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgQmlnSW50ZWdlcihxdW90aWVudCwgc2VsZi5zaWduICE9PSBuLnNpZ24pLCBuZXcgU21hbGxJbnRlZ2VyKHJlbWFpbmRlcildO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGIgPSBzbWFsbFRvQXJyYXkoYWJzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbXBhcmlzb24gPSBjb21wYXJlQWJzKGEsIGIpO1xyXG4gICAgICAgIGlmIChjb21wYXJpc29uID09PSAtMSkgcmV0dXJuIFtJbnRlZ2VyWzBdLCBzZWxmXTtcclxuICAgICAgICBpZiAoY29tcGFyaXNvbiA9PT0gMCkgcmV0dXJuIFtJbnRlZ2VyW3NlbGYuc2lnbiA9PT0gbi5zaWduID8gMSA6IC0xXSwgSW50ZWdlclswXV07XHJcblxyXG4gICAgICAgIC8vIGRpdk1vZDEgaXMgZmFzdGVyIG9uIHNtYWxsZXIgaW5wdXQgc2l6ZXNcclxuICAgICAgICBpZiAoYS5sZW5ndGggKyBiLmxlbmd0aCA8PSAyMDApXHJcbiAgICAgICAgICAgIHZhbHVlID0gZGl2TW9kMShhLCBiKTtcclxuICAgICAgICBlbHNlIHZhbHVlID0gZGl2TW9kMihhLCBiKTtcclxuXHJcbiAgICAgICAgcXVvdGllbnQgPSB2YWx1ZVswXTtcclxuICAgICAgICB2YXIgcVNpZ24gPSBzZWxmLnNpZ24gIT09IG4uc2lnbixcclxuICAgICAgICAgICAgbW9kID0gdmFsdWVbMV0sXHJcbiAgICAgICAgICAgIG1TaWduID0gc2VsZi5zaWduO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcXVvdGllbnQgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgaWYgKHFTaWduKSBxdW90aWVudCA9IC1xdW90aWVudDtcclxuICAgICAgICAgICAgcXVvdGllbnQgPSBuZXcgU21hbGxJbnRlZ2VyKHF1b3RpZW50KTtcclxuICAgICAgICB9IGVsc2UgcXVvdGllbnQgPSBuZXcgQmlnSW50ZWdlcihxdW90aWVudCwgcVNpZ24pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbW9kID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGlmIChtU2lnbikgbW9kID0gLW1vZDtcclxuICAgICAgICAgICAgbW9kID0gbmV3IFNtYWxsSW50ZWdlcihtb2QpO1xyXG4gICAgICAgIH0gZWxzZSBtb2QgPSBuZXcgQmlnSW50ZWdlcihtb2QsIG1TaWduKTtcclxuICAgICAgICByZXR1cm4gW3F1b3RpZW50LCBtb2RdO1xyXG4gICAgfVxyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRpdk1vZEFueSh0aGlzLCB2KTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBxdW90aWVudDogcmVzdWx0WzBdLFxyXG4gICAgICAgICAgICByZW1haW5kZXI6IHJlc3VsdFsxXVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5kaXZtb2QgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmRpdm1vZCA9IEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdm1vZDtcclxuXHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gZGl2TW9kQW55KHRoaXMsIHYpWzBdO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUub3ZlciA9IE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUJpZ0ludCh0aGlzLnZhbHVlIC8gcGFyc2VWYWx1ZSh2KS52YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5vdmVyID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGUgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5vdmVyID0gQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlO1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgcmV0dXJuIGRpdk1vZEFueSh0aGlzLCB2KVsxXTtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLm1vZCA9IE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUucmVtYWluZGVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUJpZ0ludCh0aGlzLnZhbHVlICUgcGFyc2VWYWx1ZSh2KS52YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5yZW1haW5kZXIgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLm1vZCA9IEJpZ0ludGVnZXIucHJvdG90eXBlLnJlbWFpbmRlciA9IEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZDtcclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHZhciBuID0gcGFyc2VWYWx1ZSh2KSxcclxuICAgICAgICAgICAgYSA9IHRoaXMudmFsdWUsXHJcbiAgICAgICAgICAgIGIgPSBuLnZhbHVlLFxyXG4gICAgICAgICAgICB2YWx1ZSwgeCwgeTtcclxuICAgICAgICBpZiAoYiA9PT0gMCkgcmV0dXJuIEludGVnZXJbMV07XHJcbiAgICAgICAgaWYgKGEgPT09IDApIHJldHVybiBJbnRlZ2VyWzBdO1xyXG4gICAgICAgIGlmIChhID09PSAxKSByZXR1cm4gSW50ZWdlclsxXTtcclxuICAgICAgICBpZiAoYSA9PT0gLTEpIHJldHVybiBuLmlzRXZlbigpID8gSW50ZWdlclsxXSA6IEludGVnZXJbLTFdO1xyXG4gICAgICAgIGlmIChuLnNpZ24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIEludGVnZXJbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbi5pc1NtYWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZXhwb25lbnQgXCIgKyBuLnRvU3RyaW5nKCkgKyBcIiBpcyB0b28gbGFyZ2UuXCIpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzU21hbGwpIHtcclxuICAgICAgICAgICAgaWYgKGlzUHJlY2lzZSh2YWx1ZSA9IE1hdGgucG93KGEsIGIpKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU21hbGxJbnRlZ2VyKHRydW5jYXRlKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHggPSB0aGlzO1xyXG4gICAgICAgIHkgPSBJbnRlZ2VyWzFdO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmIChiICYgMSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgeSA9IHkudGltZXMoeCk7XHJcbiAgICAgICAgICAgICAgICAtLWI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGIgPT09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICBiIC89IDI7XHJcbiAgICAgICAgICAgIHggPSB4LnNxdWFyZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geTtcclxuICAgIH07XHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLnBvdyA9IEJpZ0ludGVnZXIucHJvdG90eXBlLnBvdztcclxuXHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgdmFyIG4gPSBwYXJzZVZhbHVlKHYpO1xyXG4gICAgICAgIHZhciBhID0gdGhpcy52YWx1ZSwgYiA9IG4udmFsdWU7XHJcbiAgICAgICAgdmFyIF8wID0gQmlnSW50KDApLCBfMSA9IEJpZ0ludCgxKSwgXzIgPSBCaWdJbnQoMik7XHJcbiAgICAgICAgaWYgKGIgPT09IF8wKSByZXR1cm4gSW50ZWdlclsxXTtcclxuICAgICAgICBpZiAoYSA9PT0gXzApIHJldHVybiBJbnRlZ2VyWzBdO1xyXG4gICAgICAgIGlmIChhID09PSBfMSkgcmV0dXJuIEludGVnZXJbMV07XHJcbiAgICAgICAgaWYgKGEgPT09IEJpZ0ludCgtMSkpIHJldHVybiBuLmlzRXZlbigpID8gSW50ZWdlclsxXSA6IEludGVnZXJbLTFdO1xyXG4gICAgICAgIGlmIChuLmlzTmVnYXRpdmUoKSkgcmV0dXJuIG5ldyBOYXRpdmVCaWdJbnQoXzApO1xyXG4gICAgICAgIHZhciB4ID0gdGhpcztcclxuICAgICAgICB2YXIgeSA9IEludGVnZXJbMV07XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKChiICYgXzEpID09PSBfMSkge1xyXG4gICAgICAgICAgICAgICAgeSA9IHkudGltZXMoeCk7XHJcbiAgICAgICAgICAgICAgICAtLWI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGIgPT09IF8wKSBicmVhaztcclxuICAgICAgICAgICAgYiAvPSBfMjtcclxuICAgICAgICAgICAgeCA9IHguc3F1YXJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB5O1xyXG4gICAgfVxyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvdyA9IGZ1bmN0aW9uIChleHAsIG1vZCkge1xyXG4gICAgICAgIGV4cCA9IHBhcnNlVmFsdWUoZXhwKTtcclxuICAgICAgICBtb2QgPSBwYXJzZVZhbHVlKG1vZCk7XHJcbiAgICAgICAgaWYgKG1vZC5pc1plcm8oKSkgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHRha2UgbW9kUG93IHdpdGggbW9kdWx1cyAwXCIpO1xyXG4gICAgICAgIHZhciByID0gSW50ZWdlclsxXSxcclxuICAgICAgICAgICAgYmFzZSA9IHRoaXMubW9kKG1vZCk7XHJcbiAgICAgICAgaWYgKGV4cC5pc05lZ2F0aXZlKCkpIHtcclxuICAgICAgICAgICAgZXhwID0gZXhwLm11bHRpcGx5KEludGVnZXJbLTFdKTtcclxuICAgICAgICAgICAgYmFzZSA9IGJhc2UubW9kSW52KG1vZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChleHAuaXNQb3NpdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIGlmIChiYXNlLmlzWmVybygpKSByZXR1cm4gSW50ZWdlclswXTtcclxuICAgICAgICAgICAgaWYgKGV4cC5pc09kZCgpKSByID0gci5tdWx0aXBseShiYXNlKS5tb2QobW9kKTtcclxuICAgICAgICAgICAgZXhwID0gZXhwLmRpdmlkZSgyKTtcclxuICAgICAgICAgICAgYmFzZSA9IGJhc2Uuc3F1YXJlKCkubW9kKG1vZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUubW9kUG93ID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3cgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3c7XHJcblxyXG4gICAgZnVuY3Rpb24gY29tcGFyZUFicyhhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5sZW5ndGggPiBiLmxlbmd0aCA/IDEgOiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBhW2ldID4gYltpXSA/IDEgOiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZUFicyA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgdmFyIG4gPSBwYXJzZVZhbHVlKHYpLFxyXG4gICAgICAgICAgICBhID0gdGhpcy52YWx1ZSxcclxuICAgICAgICAgICAgYiA9IG4udmFsdWU7XHJcbiAgICAgICAgaWYgKG4uaXNTbWFsbCkgcmV0dXJuIDE7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVBYnMoYSwgYik7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlQWJzID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICB2YXIgbiA9IHBhcnNlVmFsdWUodiksXHJcbiAgICAgICAgICAgIGEgPSBNYXRoLmFicyh0aGlzLnZhbHVlKSxcclxuICAgICAgICAgICAgYiA9IG4udmFsdWU7XHJcbiAgICAgICAgaWYgKG4uaXNTbWFsbCkge1xyXG4gICAgICAgICAgICBiID0gTWF0aC5hYnMoYik7XHJcbiAgICAgICAgICAgIHJldHVybiBhID09PSBiID8gMCA6IGEgPiBiID8gMSA6IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5jb21wYXJlQWJzID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICB2YXIgYSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgdmFyIGIgPSBwYXJzZVZhbHVlKHYpLnZhbHVlO1xyXG4gICAgICAgIGEgPSBhID49IDAgPyBhIDogLWE7XHJcbiAgICAgICAgYiA9IGIgPj0gMCA/IGIgOiAtYjtcclxuICAgICAgICByZXR1cm4gYSA9PT0gYiA/IDAgOiBhID4gYiA/IDEgOiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAvLyBTZWUgZGlzY3Vzc2lvbiBhYm91dCBjb21wYXJpc29uIHdpdGggSW5maW5pdHk6XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BldGVyb2xzb24vQmlnSW50ZWdlci5qcy9pc3N1ZXMvNjFcclxuICAgICAgICBpZiAodiA9PT0gSW5maW5pdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodiA9PT0gLUluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG4gPSBwYXJzZVZhbHVlKHYpLFxyXG4gICAgICAgICAgICBhID0gdGhpcy52YWx1ZSxcclxuICAgICAgICAgICAgYiA9IG4udmFsdWU7XHJcbiAgICAgICAgaWYgKHRoaXMuc2lnbiAhPT0gbi5zaWduKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuLnNpZ24gPyAxIDogLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuLmlzU21hbGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbiA/IC0xIDogMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVBYnMoYSwgYikgKiAodGhpcy5zaWduID8gLTEgOiAxKTtcclxuICAgIH07XHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG8gPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlO1xyXG5cclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgaWYgKHYgPT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYgPT09IC1JbmZpbml0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBuID0gcGFyc2VWYWx1ZSh2KSxcclxuICAgICAgICAgICAgYSA9IHRoaXMudmFsdWUsXHJcbiAgICAgICAgICAgIGIgPSBuLnZhbHVlO1xyXG4gICAgICAgIGlmIChuLmlzU21hbGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgPT0gYiA/IDAgOiBhID4gYiA/IDEgOiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGEgPCAwICE9PSBuLnNpZ24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgPCAwID8gLTEgOiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYSA8IDAgPyAxIDogLTE7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5jb21wYXJlVG8gPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmNvbXBhcmU7XHJcblxyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICBpZiAodiA9PT0gSW5maW5pdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodiA9PT0gLUluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgdmFyIGIgPSBwYXJzZVZhbHVlKHYpLnZhbHVlO1xyXG4gICAgICAgIHJldHVybiBhID09PSBiID8gMCA6IGEgPiBiID8gMSA6IC0xO1xyXG4gICAgfVxyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5jb21wYXJlVG8gPSBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmNvbXBhcmU7XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKHYpID09PSAwO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuZXEgPSBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmVxdWFscyA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUuZXEgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmVxdWFscyA9IEJpZ0ludGVnZXIucHJvdG90eXBlLmVxID0gQmlnSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzO1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZSh2KSAhPT0gMDtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLm5lcSA9IE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUubm90RXF1YWxzID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5uZXEgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLm5vdEVxdWFscyA9IEJpZ0ludGVnZXIucHJvdG90eXBlLm5lcSA9IEJpZ0ludGVnZXIucHJvdG90eXBlLm5vdEVxdWFscztcclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ncmVhdGVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKHYpID4gMDtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmd0ID0gTmF0aXZlQmlnSW50LnByb3RvdHlwZS5ncmVhdGVyID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5ndCA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUuZ3JlYXRlciA9IEJpZ0ludGVnZXIucHJvdG90eXBlLmd0ID0gQmlnSW50ZWdlci5wcm90b3R5cGUuZ3JlYXRlcjtcclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5sZXNzZXIgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUodikgPCAwO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUubHQgPSBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmxlc3NlciA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUubHQgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmxlc3NlciA9IEJpZ0ludGVnZXIucHJvdG90eXBlLmx0ID0gQmlnSW50ZWdlci5wcm90b3R5cGUubGVzc2VyO1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmdyZWF0ZXJPckVxdWFscyA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZSh2KSA+PSAwO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuZ2VxID0gTmF0aXZlQmlnSW50LnByb3RvdHlwZS5ncmVhdGVyT3JFcXVhbHMgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmdlcSA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUuZ3JlYXRlck9yRXF1YWxzID0gQmlnSW50ZWdlci5wcm90b3R5cGUuZ2VxID0gQmlnSW50ZWdlci5wcm90b3R5cGUuZ3JlYXRlck9yRXF1YWxzO1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmxlc3Nlck9yRXF1YWxzID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKHYpIDw9IDA7XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5sZXEgPSBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmxlc3Nlck9yRXF1YWxzID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5sZXEgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmxlc3Nlck9yRXF1YWxzID0gQmlnSW50ZWdlci5wcm90b3R5cGUubGVxID0gQmlnSW50ZWdlci5wcm90b3R5cGUubGVzc2VyT3JFcXVhbHM7XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy52YWx1ZVswXSAmIDEpID09PSAwO1xyXG4gICAgfTtcclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy52YWx1ZSAmIDEpID09PSAwO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy52YWx1ZSAmIEJpZ0ludCgxKSkgPT09IEJpZ0ludCgwKTtcclxuICAgIH1cclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudmFsdWVbMF0gJiAxKSA9PT0gMTtcclxuICAgIH07XHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy52YWx1ZSAmIDEpID09PSAxO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnZhbHVlICYgQmlnSW50KDEpKSA9PT0gQmlnSW50KDEpO1xyXG4gICAgfVxyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmlzUG9zaXRpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnNpZ247XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5pc1Bvc2l0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID4gMDtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmlzUG9zaXRpdmUgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmlzUG9zaXRpdmU7XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaWduO1xyXG4gICAgfTtcclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA8IDA7XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5pc05lZ2F0aXZlID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5pc05lZ2F0aXZlO1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmlzVW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5pc1VuaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHRoaXMudmFsdWUpID09PSAxO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuaXNVbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFicygpLnZhbHVlID09PSBCaWdJbnQoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gMDtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gQmlnSW50KDApO1xyXG4gICAgfVxyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmlzRGl2aXNpYmxlQnkgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHZhciBuID0gcGFyc2VWYWx1ZSh2KTtcclxuICAgICAgICBpZiAobi5pc1plcm8oKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChuLmlzVW5pdCgpKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAobi5jb21wYXJlQWJzKDIpID09PSAwKSByZXR1cm4gdGhpcy5pc0V2ZW4oKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5tb2QobikuaXNaZXJvKCk7XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5pc0RpdmlzaWJsZUJ5ID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5pc0RpdmlzaWJsZUJ5ID0gQmlnSW50ZWdlci5wcm90b3R5cGUuaXNEaXZpc2libGVCeTtcclxuXHJcbiAgICBmdW5jdGlvbiBpc0Jhc2ljUHJpbWUodikge1xyXG4gICAgICAgIHZhciBuID0gdi5hYnMoKTtcclxuICAgICAgICBpZiAobi5pc1VuaXQoKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChuLmVxdWFscygyKSB8fCBuLmVxdWFscygzKSB8fCBuLmVxdWFscyg1KSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKG4uaXNFdmVuKCkgfHwgbi5pc0RpdmlzaWJsZUJ5KDMpIHx8IG4uaXNEaXZpc2libGVCeSg1KSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChuLmxlc3Nlcig0OSkpIHJldHVybiB0cnVlO1xyXG4gICAgICAgIC8vIHdlIGRvbid0IGtub3cgaWYgaXQncyBwcmltZTogbGV0IHRoZSBvdGhlciBmdW5jdGlvbnMgZmlndXJlIGl0IG91dFxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1pbGxlclJhYmluVGVzdChuLCBhKSB7XHJcbiAgICAgICAgdmFyIG5QcmV2ID0gbi5wcmV2KCksXHJcbiAgICAgICAgICAgIGIgPSBuUHJldixcclxuICAgICAgICAgICAgciA9IDAsXHJcbiAgICAgICAgICAgIGQsIHQsIGksIHg7XHJcbiAgICAgICAgd2hpbGUgKGIuaXNFdmVuKCkpIGIgPSBiLmRpdmlkZSgyKSwgcisrO1xyXG4gICAgICAgIG5leHQ6IGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChuLmxlc3NlcihhW2ldKSkgY29udGludWU7XHJcbiAgICAgICAgICAgIHggPSBiaWdJbnQoYVtpXSkubW9kUG93KGIsIG4pO1xyXG4gICAgICAgICAgICBpZiAoeC5pc1VuaXQoKSB8fCB4LmVxdWFscyhuUHJldikpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBmb3IgKGQgPSByIC0gMTsgZCAhPSAwOyBkLS0pIHtcclxuICAgICAgICAgICAgICAgIHggPSB4LnNxdWFyZSgpLm1vZChuKTtcclxuICAgICAgICAgICAgICAgIGlmICh4LmlzVW5pdCgpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoeC5lcXVhbHMoblByZXYpKSBjb250aW51ZSBuZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IFwic3RyaWN0XCIgdG8gdHJ1ZSB0byBmb3JjZSBHUkgtc3VwcG9ydGVkIGxvd2VyIGJvdW5kIG9mIDIqbG9nKE4pXjJcclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmlzUHJpbWUgPSBmdW5jdGlvbiAoc3RyaWN0KSB7XHJcbiAgICAgICAgdmFyIGlzUHJpbWUgPSBpc0Jhc2ljUHJpbWUodGhpcyk7XHJcbiAgICAgICAgaWYgKGlzUHJpbWUgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGlzUHJpbWU7XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzLmFicygpO1xyXG4gICAgICAgIHZhciBiaXRzID0gbi5iaXRMZW5ndGgoKTtcclxuICAgICAgICBpZiAoYml0cyA8PSA2NClcclxuICAgICAgICAgICAgcmV0dXJuIG1pbGxlclJhYmluVGVzdChuLCBbMiwgMywgNSwgNywgMTEsIDEzLCAxNywgMTksIDIzLCAyOSwgMzEsIDM3XSk7XHJcbiAgICAgICAgdmFyIGxvZ04gPSBNYXRoLmxvZygyKSAqIGJpdHMudG9KU051bWJlcigpO1xyXG4gICAgICAgIHZhciB0ID0gTWF0aC5jZWlsKChzdHJpY3QgPT09IHRydWUpID8gKDIgKiBNYXRoLnBvdyhsb2dOLCAyKSkgOiBsb2dOKTtcclxuICAgICAgICBmb3IgKHZhciBhID0gW10sIGkgPSAwOyBpIDwgdDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGEucHVzaChiaWdJbnQoaSArIDIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1pbGxlclJhYmluVGVzdChuLCBhKTtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmlzUHJpbWUgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmlzUHJpbWUgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1ByaW1lO1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmlzUHJvYmFibGVQcmltZSA9IGZ1bmN0aW9uIChpdGVyYXRpb25zLCBybmcpIHtcclxuICAgICAgICB2YXIgaXNQcmltZSA9IGlzQmFzaWNQcmltZSh0aGlzKTtcclxuICAgICAgICBpZiAoaXNQcmltZSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gaXNQcmltZTtcclxuICAgICAgICB2YXIgbiA9IHRoaXMuYWJzKCk7XHJcbiAgICAgICAgdmFyIHQgPSBpdGVyYXRpb25zID09PSB1bmRlZmluZWQgPyA1IDogaXRlcmF0aW9ucztcclxuICAgICAgICBmb3IgKHZhciBhID0gW10sIGkgPSAwOyBpIDwgdDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGEucHVzaChiaWdJbnQucmFuZEJldHdlZW4oMiwgbi5taW51cygyKSwgcm5nKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtaWxsZXJSYWJpblRlc3QobiwgYSk7XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLmlzUHJvYmFibGVQcmltZSA9IEJpZ0ludGVnZXIucHJvdG90eXBlLmlzUHJvYmFibGVQcmltZTtcclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnYgPSBmdW5jdGlvbiAobikge1xyXG4gICAgICAgIHZhciB0ID0gYmlnSW50Lnplcm8sIG5ld1QgPSBiaWdJbnQub25lLCByID0gcGFyc2VWYWx1ZShuKSwgbmV3UiA9IHRoaXMuYWJzKCksIHEsIGxhc3RULCBsYXN0UjtcclxuICAgICAgICB3aGlsZSAoIW5ld1IuaXNaZXJvKCkpIHtcclxuICAgICAgICAgICAgcSA9IHIuZGl2aWRlKG5ld1IpO1xyXG4gICAgICAgICAgICBsYXN0VCA9IHQ7XHJcbiAgICAgICAgICAgIGxhc3RSID0gcjtcclxuICAgICAgICAgICAgdCA9IG5ld1Q7XHJcbiAgICAgICAgICAgIHIgPSBuZXdSO1xyXG4gICAgICAgICAgICBuZXdUID0gbGFzdFQuc3VidHJhY3QocS5tdWx0aXBseShuZXdUKSk7XHJcbiAgICAgICAgICAgIG5ld1IgPSBsYXN0Ui5zdWJ0cmFjdChxLm11bHRpcGx5KG5ld1IpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyLmlzVW5pdCgpKSB0aHJvdyBuZXcgRXJyb3IodGhpcy50b1N0cmluZygpICsgXCIgYW5kIFwiICsgbi50b1N0cmluZygpICsgXCIgYXJlIG5vdCBjby1wcmltZVwiKTtcclxuICAgICAgICBpZiAodC5jb21wYXJlKDApID09PSAtMSkge1xyXG4gICAgICAgICAgICB0ID0gdC5hZGQobik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5uZWdhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUubW9kSW52ID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnYgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnY7XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLnNpZ24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN1YnRyYWN0U21hbGwodmFsdWUsIDEsIHRoaXMuc2lnbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihhZGRTbWFsbCh2YWx1ZSwgMSksIHRoaXMuc2lnbik7XHJcbiAgICB9O1xyXG4gICAgU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgaWYgKHZhbHVlICsgMSA8IE1BWF9JTlQpIHJldHVybiBuZXcgU21hbGxJbnRlZ2VyKHZhbHVlICsgMSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKE1BWF9JTlRfQVJSLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTmF0aXZlQmlnSW50KHRoaXMudmFsdWUgKyBCaWdJbnQoMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5zaWduKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihhZGRTbWFsbCh2YWx1ZSwgMSksIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3VidHJhY3RTbWFsbCh2YWx1ZSwgMSwgdGhpcy5zaWduKTtcclxuICAgIH07XHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICBpZiAodmFsdWUgLSAxID4gLU1BWF9JTlQpIHJldHVybiBuZXcgU21hbGxJbnRlZ2VyKHZhbHVlIC0gMSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKE1BWF9JTlRfQVJSLCB0cnVlKTtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYXRpdmVCaWdJbnQodGhpcy52YWx1ZSAtIEJpZ0ludCgxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHBvd2Vyc09mVHdvID0gWzFdO1xyXG4gICAgd2hpbGUgKDIgKiBwb3dlcnNPZlR3b1twb3dlcnNPZlR3by5sZW5ndGggLSAxXSA8PSBCQVNFKSBwb3dlcnNPZlR3by5wdXNoKDIgKiBwb3dlcnNPZlR3b1twb3dlcnNPZlR3by5sZW5ndGggLSAxXSk7XHJcbiAgICB2YXIgcG93ZXJzMkxlbmd0aCA9IHBvd2Vyc09mVHdvLmxlbmd0aCwgaGlnaGVzdFBvd2VyMiA9IHBvd2Vyc09mVHdvW3Bvd2VyczJMZW5ndGggLSAxXTtcclxuXHJcbiAgICBmdW5jdGlvbiBzaGlmdF9pc1NtYWxsKG4pIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMobikgPD0gQkFTRTtcclxuICAgIH1cclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdExlZnQgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHZhciBuID0gcGFyc2VWYWx1ZSh2KS50b0pTTnVtYmVyKCk7XHJcbiAgICAgICAgaWYgKCFzaGlmdF9pc1NtYWxsKG4pKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihTdHJpbmcobikgKyBcIiBpcyB0b28gbGFyZ2UgZm9yIHNoaWZ0aW5nLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4gPCAwKSByZXR1cm4gdGhpcy5zaGlmdFJpZ2h0KC1uKTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcztcclxuICAgICAgICBpZiAocmVzdWx0LmlzWmVybygpKSByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIHdoaWxlIChuID49IHBvd2VyczJMZW5ndGgpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bHRpcGx5KGhpZ2hlc3RQb3dlcjIpO1xyXG4gICAgICAgICAgICBuIC09IHBvd2VyczJMZW5ndGggLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0Lm11bHRpcGx5KHBvd2Vyc09mVHdvW25dKTtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnNoaWZ0TGVmdCA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0ID0gQmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0O1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHZhciByZW1RdW87XHJcbiAgICAgICAgdmFyIG4gPSBwYXJzZVZhbHVlKHYpLnRvSlNOdW1iZXIoKTtcclxuICAgICAgICBpZiAoIXNoaWZ0X2lzU21hbGwobikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFN0cmluZyhuKSArIFwiIGlzIHRvbyBsYXJnZSBmb3Igc2hpZnRpbmcuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobiA8IDApIHJldHVybiB0aGlzLnNoaWZ0TGVmdCgtbik7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XHJcbiAgICAgICAgd2hpbGUgKG4gPj0gcG93ZXJzMkxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzWmVybygpIHx8IChyZXN1bHQuaXNOZWdhdGl2ZSgpICYmIHJlc3VsdC5pc1VuaXQoKSkpIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIHJlbVF1byA9IGRpdk1vZEFueShyZXN1bHQsIGhpZ2hlc3RQb3dlcjIpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZW1RdW9bMV0uaXNOZWdhdGl2ZSgpID8gcmVtUXVvWzBdLnByZXYoKSA6IHJlbVF1b1swXTtcclxuICAgICAgICAgICAgbiAtPSBwb3dlcnMyTGVuZ3RoIC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVtUXVvID0gZGl2TW9kQW55KHJlc3VsdCwgcG93ZXJzT2ZUd29bbl0pO1xyXG4gICAgICAgIHJldHVybiByZW1RdW9bMV0uaXNOZWdhdGl2ZSgpID8gcmVtUXVvWzBdLnByZXYoKSA6IHJlbVF1b1swXTtcclxuICAgIH07XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdFJpZ2h0O1xyXG5cclxuICAgIGZ1bmN0aW9uIGJpdHdpc2UoeCwgeSwgZm4pIHtcclxuICAgICAgICB5ID0gcGFyc2VWYWx1ZSh5KTtcclxuICAgICAgICB2YXIgeFNpZ24gPSB4LmlzTmVnYXRpdmUoKSwgeVNpZ24gPSB5LmlzTmVnYXRpdmUoKTtcclxuICAgICAgICB2YXIgeFJlbSA9IHhTaWduID8geC5ub3QoKSA6IHgsXHJcbiAgICAgICAgICAgIHlSZW0gPSB5U2lnbiA/IHkubm90KCkgOiB5O1xyXG4gICAgICAgIHZhciB4RGlnaXQgPSAwLCB5RGlnaXQgPSAwO1xyXG4gICAgICAgIHZhciB4RGl2TW9kID0gbnVsbCwgeURpdk1vZCA9IG51bGw7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIHdoaWxlICgheFJlbS5pc1plcm8oKSB8fCAheVJlbS5pc1plcm8oKSkge1xyXG4gICAgICAgICAgICB4RGl2TW9kID0gZGl2TW9kQW55KHhSZW0sIGhpZ2hlc3RQb3dlcjIpO1xyXG4gICAgICAgICAgICB4RGlnaXQgPSB4RGl2TW9kWzFdLnRvSlNOdW1iZXIoKTtcclxuICAgICAgICAgICAgaWYgKHhTaWduKSB7XHJcbiAgICAgICAgICAgICAgICB4RGlnaXQgPSBoaWdoZXN0UG93ZXIyIC0gMSAtIHhEaWdpdDsgLy8gdHdvJ3MgY29tcGxlbWVudCBmb3IgbmVnYXRpdmUgbnVtYmVyc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB5RGl2TW9kID0gZGl2TW9kQW55KHlSZW0sIGhpZ2hlc3RQb3dlcjIpO1xyXG4gICAgICAgICAgICB5RGlnaXQgPSB5RGl2TW9kWzFdLnRvSlNOdW1iZXIoKTtcclxuICAgICAgICAgICAgaWYgKHlTaWduKSB7XHJcbiAgICAgICAgICAgICAgICB5RGlnaXQgPSBoaWdoZXN0UG93ZXIyIC0gMSAtIHlEaWdpdDsgLy8gdHdvJ3MgY29tcGxlbWVudCBmb3IgbmVnYXRpdmUgbnVtYmVyc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB4UmVtID0geERpdk1vZFswXTtcclxuICAgICAgICAgICAgeVJlbSA9IHlEaXZNb2RbMF07XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZuKHhEaWdpdCwgeURpZ2l0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdW0gPSBmbih4U2lnbiA/IDEgOiAwLCB5U2lnbiA/IDEgOiAwKSAhPT0gMCA/IGJpZ0ludCgtMSkgOiBiaWdJbnQoMCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHJlc3VsdC5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xyXG4gICAgICAgICAgICBzdW0gPSBzdW0ubXVsdGlwbHkoaGlnaGVzdFBvd2VyMikuYWRkKGJpZ0ludChyZXN1bHRbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1bTtcclxuICAgIH1cclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmVnYXRlKCkucHJldigpO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUubm90ID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5ub3QgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3Q7XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICByZXR1cm4gYml0d2lzZSh0aGlzLCBuLCBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSAmIGI7IH0pO1xyXG4gICAgfTtcclxuICAgIE5hdGl2ZUJpZ0ludC5wcm90b3R5cGUuYW5kID0gU21hbGxJbnRlZ2VyLnByb3RvdHlwZS5hbmQgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbmQ7XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiAobikge1xyXG4gICAgICAgIHJldHVybiBiaXR3aXNlKHRoaXMsIG4sIGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhIHwgYjsgfSk7XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS5vciA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUub3IgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS5vcjtcclxuXHJcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiAobikge1xyXG4gICAgICAgIHJldHVybiBiaXR3aXNlKHRoaXMsIG4sIGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhIF4gYjsgfSk7XHJcbiAgICB9O1xyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS54b3IgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLnhvciA9IEJpZ0ludGVnZXIucHJvdG90eXBlLnhvcjtcclxuXHJcbiAgICB2YXIgTE9CTUFTS19JID0gMSA8PCAzMCwgTE9CTUFTS19CSSA9IChCQVNFICYgLUJBU0UpICogKEJBU0UgJiAtQkFTRSkgfCBMT0JNQVNLX0k7XHJcbiAgICBmdW5jdGlvbiByb3VnaExPQihuKSB7IC8vIGdldCBsb3dlc3RPbmVCaXQgKHJvdWdoKVxyXG4gICAgICAgIC8vIFNtYWxsSW50ZWdlcjogcmV0dXJuIE1pbihsb3dlc3RPbmVCaXQobiksIDEgPDwgMzApXHJcbiAgICAgICAgLy8gQmlnSW50ZWdlcjogcmV0dXJuIE1pbihsb3dlc3RPbmVCaXQobiksIDEgPDwgMTQpIFtCQVNFPTFlN11cclxuICAgICAgICB2YXIgdiA9IG4udmFsdWUsXHJcbiAgICAgICAgICAgIHggPSB0eXBlb2YgdiA9PT0gXCJudW1iZXJcIiA/IHYgfCBMT0JNQVNLX0kgOlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHYgPT09IFwiYmlnaW50XCIgPyB2IHwgQmlnSW50KExPQk1BU0tfSSkgOlxyXG4gICAgICAgICAgICAgICAgICAgIHZbMF0gKyB2WzFdICogQkFTRSB8IExPQk1BU0tfQkk7XHJcbiAgICAgICAgcmV0dXJuIHggJiAteDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbnRlZ2VyTG9nYXJpdGhtKHZhbHVlLCBiYXNlKSB7XHJcbiAgICAgICAgaWYgKGJhc2UuY29tcGFyZVRvKHZhbHVlKSA8PSAwKSB7XHJcbiAgICAgICAgICAgIHZhciB0bXAgPSBpbnRlZ2VyTG9nYXJpdGhtKHZhbHVlLCBiYXNlLnNxdWFyZShiYXNlKSk7XHJcbiAgICAgICAgICAgIHZhciBwID0gdG1wLnA7XHJcbiAgICAgICAgICAgIHZhciBlID0gdG1wLmU7XHJcbiAgICAgICAgICAgIHZhciB0ID0gcC5tdWx0aXBseShiYXNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHQuY29tcGFyZVRvKHZhbHVlKSA8PSAwID8geyBwOiB0LCBlOiBlICogMiArIDEgfSA6IHsgcDogcCwgZTogZSAqIDIgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgcDogYmlnSW50KDEpLCBlOiAwIH07XHJcbiAgICB9XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcztcclxuICAgICAgICBpZiAobi5jb21wYXJlVG8oYmlnSW50KDApKSA8IDApIHtcclxuICAgICAgICAgICAgbiA9IG4ubmVnYXRlKCkuc3VidHJhY3QoYmlnSW50KDEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4uY29tcGFyZVRvKGJpZ0ludCgwKSkgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJpZ0ludCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJpZ0ludChpbnRlZ2VyTG9nYXJpdGhtKG4sIGJpZ0ludCgyKSkuZSkuYWRkKGJpZ0ludCgxKSk7XHJcbiAgICB9XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLmJpdExlbmd0aCA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUuYml0TGVuZ3RoID0gQmlnSW50ZWdlci5wcm90b3R5cGUuYml0TGVuZ3RoO1xyXG5cclxuICAgIGZ1bmN0aW9uIG1heChhLCBiKSB7XHJcbiAgICAgICAgYSA9IHBhcnNlVmFsdWUoYSk7XHJcbiAgICAgICAgYiA9IHBhcnNlVmFsdWUoYik7XHJcbiAgICAgICAgcmV0dXJuIGEuZ3JlYXRlcihiKSA/IGEgOiBiO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gbWluKGEsIGIpIHtcclxuICAgICAgICBhID0gcGFyc2VWYWx1ZShhKTtcclxuICAgICAgICBiID0gcGFyc2VWYWx1ZShiKTtcclxuICAgICAgICByZXR1cm4gYS5sZXNzZXIoYikgPyBhIDogYjtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdjZChhLCBiKSB7XHJcbiAgICAgICAgYSA9IHBhcnNlVmFsdWUoYSkuYWJzKCk7XHJcbiAgICAgICAgYiA9IHBhcnNlVmFsdWUoYikuYWJzKCk7XHJcbiAgICAgICAgaWYgKGEuZXF1YWxzKGIpKSByZXR1cm4gYTtcclxuICAgICAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGI7XHJcbiAgICAgICAgaWYgKGIuaXNaZXJvKCkpIHJldHVybiBhO1xyXG4gICAgICAgIHZhciBjID0gSW50ZWdlclsxXSwgZCwgdDtcclxuICAgICAgICB3aGlsZSAoYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpKSB7XHJcbiAgICAgICAgICAgIGQgPSBtaW4ocm91Z2hMT0IoYSksIHJvdWdoTE9CKGIpKTtcclxuICAgICAgICAgICAgYSA9IGEuZGl2aWRlKGQpO1xyXG4gICAgICAgICAgICBiID0gYi5kaXZpZGUoZCk7XHJcbiAgICAgICAgICAgIGMgPSBjLm11bHRpcGx5KGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xyXG4gICAgICAgICAgICBhID0gYS5kaXZpZGUocm91Z2hMT0IoYSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XHJcbiAgICAgICAgICAgICAgICBiID0gYi5kaXZpZGUocm91Z2hMT0IoYikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhLmdyZWF0ZXIoYikpIHtcclxuICAgICAgICAgICAgICAgIHQgPSBiOyBiID0gYTsgYSA9IHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYiA9IGIuc3VidHJhY3QoYSk7XHJcbiAgICAgICAgfSB3aGlsZSAoIWIuaXNaZXJvKCkpO1xyXG4gICAgICAgIHJldHVybiBjLmlzVW5pdCgpID8gYSA6IGEubXVsdGlwbHkoYyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsY20oYSwgYikge1xyXG4gICAgICAgIGEgPSBwYXJzZVZhbHVlKGEpLmFicygpO1xyXG4gICAgICAgIGIgPSBwYXJzZVZhbHVlKGIpLmFicygpO1xyXG4gICAgICAgIHJldHVybiBhLmRpdmlkZShnY2QoYSwgYikpLm11bHRpcGx5KGIpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmFuZEJldHdlZW4oYSwgYiwgcm5nKSB7XHJcbiAgICAgICAgYSA9IHBhcnNlVmFsdWUoYSk7XHJcbiAgICAgICAgYiA9IHBhcnNlVmFsdWUoYik7XHJcbiAgICAgICAgdmFyIHVzZWRSTkcgPSBybmcgfHwgTWF0aC5yYW5kb207XHJcbiAgICAgICAgdmFyIGxvdyA9IG1pbihhLCBiKSwgaGlnaCA9IG1heChhLCBiKTtcclxuICAgICAgICB2YXIgcmFuZ2UgPSBoaWdoLnN1YnRyYWN0KGxvdykuYWRkKDEpO1xyXG4gICAgICAgIGlmIChyYW5nZS5pc1NtYWxsKSByZXR1cm4gbG93LmFkZChNYXRoLmZsb29yKHVzZWRSTkcoKSAqIHJhbmdlKSk7XHJcbiAgICAgICAgdmFyIGRpZ2l0cyA9IHRvQmFzZShyYW5nZSwgQkFTRSkudmFsdWU7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdLCByZXN0cmljdGVkID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZ2l0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgdG9wID0gcmVzdHJpY3RlZCA/IGRpZ2l0c1tpXSA6IEJBU0U7XHJcbiAgICAgICAgICAgIHZhciBkaWdpdCA9IHRydW5jYXRlKHVzZWRSTkcoKSAqIHRvcCk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRpZ2l0KTtcclxuICAgICAgICAgICAgaWYgKGRpZ2l0IDwgdG9wKSByZXN0cmljdGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsb3cuYWRkKEludGVnZXIuZnJvbUFycmF5KHJlc3VsdCwgQkFTRSwgZmFsc2UpKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcGFyc2VCYXNlID0gZnVuY3Rpb24gKHRleHQsIGJhc2UsIGFscGhhYmV0LCBjYXNlU2Vuc2l0aXZlKSB7XHJcbiAgICAgICAgYWxwaGFiZXQgPSBhbHBoYWJldCB8fCBERUZBVUxUX0FMUEhBQkVUO1xyXG4gICAgICAgIHRleHQgPSBTdHJpbmcodGV4dCk7XHJcbiAgICAgICAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XHJcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGFscGhhYmV0ID0gYWxwaGFiZXQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRleHQubGVuZ3RoO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBhYnNCYXNlID0gTWF0aC5hYnMoYmFzZSk7XHJcbiAgICAgICAgdmFyIGFscGhhYmV0VmFsdWVzID0ge307XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFscGhhYmV0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFscGhhYmV0VmFsdWVzW2FscGhhYmV0W2ldXSA9IGk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgYyA9IHRleHRbaV07XHJcbiAgICAgICAgICAgIGlmIChjID09PSBcIi1cIikgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChjIGluIGFscGhhYmV0VmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWxwaGFiZXRWYWx1ZXNbY10gPj0gYWJzQmFzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjID09PSBcIjFcIiAmJiBhYnNCYXNlID09PSAxKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYyArIFwiIGlzIG5vdCBhIHZhbGlkIGRpZ2l0IGluIGJhc2UgXCIgKyBiYXNlICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJhc2UgPSBwYXJzZVZhbHVlKGJhc2UpO1xyXG4gICAgICAgIHZhciBkaWdpdHMgPSBbXTtcclxuICAgICAgICB2YXIgaXNOZWdhdGl2ZSA9IHRleHRbMF0gPT09IFwiLVwiO1xyXG4gICAgICAgIGZvciAoaSA9IGlzTmVnYXRpdmUgPyAxIDogMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGMgPSB0ZXh0W2ldO1xyXG4gICAgICAgICAgICBpZiAoYyBpbiBhbHBoYWJldFZhbHVlcykgZGlnaXRzLnB1c2gocGFyc2VWYWx1ZShhbHBoYWJldFZhbHVlc1tjXSkpO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChjID09PSBcIjxcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gaTtcclxuICAgICAgICAgICAgICAgIGRvIHsgaSsrOyB9IHdoaWxlICh0ZXh0W2ldICE9PSBcIj5cIiAmJiBpIDwgdGV4dC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgZGlnaXRzLnB1c2gocGFyc2VWYWx1ZSh0ZXh0LnNsaWNlKHN0YXJ0ICsgMSwgaSkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihjICsgXCIgaXMgbm90IGEgdmFsaWQgY2hhcmFjdGVyXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyc2VCYXNlRnJvbUFycmF5KGRpZ2l0cywgYmFzZSwgaXNOZWdhdGl2ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlQmFzZUZyb21BcnJheShkaWdpdHMsIGJhc2UsIGlzTmVnYXRpdmUpIHtcclxuICAgICAgICB2YXIgdmFsID0gSW50ZWdlclswXSwgcG93ID0gSW50ZWdlclsxXSwgaTtcclxuICAgICAgICBmb3IgKGkgPSBkaWdpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgdmFsID0gdmFsLmFkZChkaWdpdHNbaV0udGltZXMocG93KSk7XHJcbiAgICAgICAgICAgIHBvdyA9IHBvdy50aW1lcyhiYXNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzTmVnYXRpdmUgPyB2YWwubmVnYXRlKCkgOiB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3RyaW5naWZ5KGRpZ2l0LCBhbHBoYWJldCkge1xyXG4gICAgICAgIGFscGhhYmV0ID0gYWxwaGFiZXQgfHwgREVGQVVMVF9BTFBIQUJFVDtcclxuICAgICAgICBpZiAoZGlnaXQgPCBhbHBoYWJldC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFscGhhYmV0W2RpZ2l0XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiPFwiICsgZGlnaXQgKyBcIj5cIjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b0Jhc2UobiwgYmFzZSkge1xyXG4gICAgICAgIGJhc2UgPSBiaWdJbnQoYmFzZSk7XHJcbiAgICAgICAgaWYgKGJhc2UuaXNaZXJvKCkpIHtcclxuICAgICAgICAgICAgaWYgKG4uaXNaZXJvKCkpIHJldHVybiB7IHZhbHVlOiBbMF0sIGlzTmVnYXRpdmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IG5vbnplcm8gbnVtYmVycyB0byBiYXNlIDAuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYmFzZS5lcXVhbHMoLTEpKSB7XHJcbiAgICAgICAgICAgIGlmIChuLmlzWmVybygpKSByZXR1cm4geyB2YWx1ZTogWzBdLCBpc05lZ2F0aXZlOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICBpZiAobi5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXS5jb25jYXQuYXBwbHkoW10sIEFycmF5LmFwcGx5KG51bGwsIEFycmF5KC1uLnRvSlNOdW1iZXIoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoQXJyYXkucHJvdG90eXBlLnZhbHVlT2YsIFsxLCAwXSlcclxuICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzTmVnYXRpdmU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGFyciA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KG4udG9KU051bWJlcigpIC0gMSkpXHJcbiAgICAgICAgICAgICAgICAubWFwKEFycmF5LnByb3RvdHlwZS52YWx1ZU9mLCBbMCwgMV0pO1xyXG4gICAgICAgICAgICBhcnIudW5zaGlmdChbMV0pO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IFtdLmNvbmNhdC5hcHBseShbXSwgYXJyKSxcclxuICAgICAgICAgICAgICAgIGlzTmVnYXRpdmU6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbmVnID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKG4uaXNOZWdhdGl2ZSgpICYmIGJhc2UuaXNQb3NpdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIG5lZyA9IHRydWU7XHJcbiAgICAgICAgICAgIG4gPSBuLmFicygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYmFzZS5pc1VuaXQoKSkge1xyXG4gICAgICAgICAgICBpZiAobi5pc1plcm8oKSkgcmV0dXJuIHsgdmFsdWU6IFswXSwgaXNOZWdhdGl2ZTogZmFsc2UgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkobi50b0pTTnVtYmVyKCkpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLCAxKSxcclxuICAgICAgICAgICAgICAgIGlzTmVnYXRpdmU6IG5lZ1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3V0ID0gW107XHJcbiAgICAgICAgdmFyIGxlZnQgPSBuLCBkaXZtb2Q7XHJcbiAgICAgICAgd2hpbGUgKGxlZnQuaXNOZWdhdGl2ZSgpIHx8IGxlZnQuY29tcGFyZUFicyhiYXNlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGRpdm1vZCA9IGxlZnQuZGl2bW9kKGJhc2UpO1xyXG4gICAgICAgICAgICBsZWZ0ID0gZGl2bW9kLnF1b3RpZW50O1xyXG4gICAgICAgICAgICB2YXIgZGlnaXQgPSBkaXZtb2QucmVtYWluZGVyO1xyXG4gICAgICAgICAgICBpZiAoZGlnaXQuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBkaWdpdCA9IGJhc2UubWludXMoZGlnaXQpLmFicygpO1xyXG4gICAgICAgICAgICAgICAgbGVmdCA9IGxlZnQubmV4dCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG91dC5wdXNoKGRpZ2l0LnRvSlNOdW1iZXIoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG91dC5wdXNoKGxlZnQudG9KU051bWJlcigpKTtcclxuICAgICAgICByZXR1cm4geyB2YWx1ZTogb3V0LnJldmVyc2UoKSwgaXNOZWdhdGl2ZTogbmVnIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9CYXNlU3RyaW5nKG4sIGJhc2UsIGFscGhhYmV0KSB7XHJcbiAgICAgICAgdmFyIGFyciA9IHRvQmFzZShuLCBiYXNlKTtcclxuICAgICAgICByZXR1cm4gKGFyci5pc05lZ2F0aXZlID8gXCItXCIgOiBcIlwiKSArIGFyci52YWx1ZS5tYXAoZnVuY3Rpb24gKHgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ2lmeSh4LCBhbHBoYWJldCk7XHJcbiAgICAgICAgfSkuam9pbignJyk7XHJcbiAgICB9XHJcblxyXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIChyYWRpeCkge1xyXG4gICAgICAgIHJldHVybiB0b0Jhc2UodGhpcywgcmFkaXgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAocmFkaXgpIHtcclxuICAgICAgICByZXR1cm4gdG9CYXNlKHRoaXMsIHJhZGl4KTtcclxuICAgIH07XHJcblxyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gKHJhZGl4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRvQmFzZSh0aGlzLCByYWRpeCk7XHJcbiAgICB9O1xyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKHJhZGl4LCBhbHBoYWJldCkge1xyXG4gICAgICAgIGlmIChyYWRpeCA9PT0gdW5kZWZpbmVkKSByYWRpeCA9IDEwO1xyXG4gICAgICAgIGlmIChyYWRpeCAhPT0gMTApIHJldHVybiB0b0Jhc2VTdHJpbmcodGhpcywgcmFkaXgsIGFscGhhYmV0KTtcclxuICAgICAgICB2YXIgdiA9IHRoaXMudmFsdWUsIGwgPSB2Lmxlbmd0aCwgc3RyID0gU3RyaW5nKHZbLS1sXSksIHplcm9zID0gXCIwMDAwMDAwXCIsIGRpZ2l0O1xyXG4gICAgICAgIHdoaWxlICgtLWwgPj0gMCkge1xyXG4gICAgICAgICAgICBkaWdpdCA9IFN0cmluZyh2W2xdKTtcclxuICAgICAgICAgICAgc3RyICs9IHplcm9zLnNsaWNlKGRpZ2l0Lmxlbmd0aCkgKyBkaWdpdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNpZ24gPSB0aGlzLnNpZ24gPyBcIi1cIiA6IFwiXCI7XHJcbiAgICAgICAgcmV0dXJuIHNpZ24gKyBzdHI7XHJcbiAgICB9O1xyXG5cclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAocmFkaXgsIGFscGhhYmV0KSB7XHJcbiAgICAgICAgaWYgKHJhZGl4ID09PSB1bmRlZmluZWQpIHJhZGl4ID0gMTA7XHJcbiAgICAgICAgaWYgKHJhZGl4ICE9IDEwKSByZXR1cm4gdG9CYXNlU3RyaW5nKHRoaXMsIHJhZGl4LCBhbHBoYWJldCk7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS50b1N0cmluZyA9IFNtYWxsSW50ZWdlci5wcm90b3R5cGUudG9TdHJpbmc7XHJcblxyXG4gICAgTmF0aXZlQmlnSW50LnByb3RvdHlwZS50b0pTT04gPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS50b0pTT04gPSBTbWFsbEludGVnZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsgfVxyXG5cclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMudG9TdHJpbmcoKSwgMTApO1xyXG4gICAgfTtcclxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRvSlNOdW1iZXIgPSBCaWdJbnRlZ2VyLnByb3RvdHlwZS52YWx1ZU9mO1xyXG5cclxuICAgIFNtYWxsSW50ZWdlci5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgIH07XHJcbiAgICBTbWFsbEludGVnZXIucHJvdG90eXBlLnRvSlNOdW1iZXIgPSBTbWFsbEludGVnZXIucHJvdG90eXBlLnZhbHVlT2Y7XHJcbiAgICBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YgPSBOYXRpdmVCaWdJbnQucHJvdG90eXBlLnRvSlNOdW1iZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMudG9TdHJpbmcoKSwgMTApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlU3RyaW5nVmFsdWUodikge1xyXG4gICAgICAgIGlmIChpc1ByZWNpc2UoK3YpKSB7XHJcbiAgICAgICAgICAgIHZhciB4ID0gK3Y7XHJcbiAgICAgICAgICAgIGlmICh4ID09PSB0cnVuY2F0ZSh4KSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdXBwb3J0c05hdGl2ZUJpZ0ludCA/IG5ldyBOYXRpdmVCaWdJbnQoQmlnSW50KHgpKSA6IG5ldyBTbWFsbEludGVnZXIoeCk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW50ZWdlcjogXCIgKyB2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNpZ24gPSB2WzBdID09PSBcIi1cIjtcclxuICAgICAgICBpZiAoc2lnbikgdiA9IHYuc2xpY2UoMSk7XHJcbiAgICAgICAgdmFyIHNwbGl0ID0gdi5zcGxpdCgvZS9pKTtcclxuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoID4gMikgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbnRlZ2VyOiBcIiArIHNwbGl0LmpvaW4oXCJlXCIpKTtcclxuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgIHZhciBleHAgPSBzcGxpdFsxXTtcclxuICAgICAgICAgICAgaWYgKGV4cFswXSA9PT0gXCIrXCIpIGV4cCA9IGV4cC5zbGljZSgxKTtcclxuICAgICAgICAgICAgZXhwID0gK2V4cDtcclxuICAgICAgICAgICAgaWYgKGV4cCAhPT0gdHJ1bmNhdGUoZXhwKSB8fCAhaXNQcmVjaXNlKGV4cCkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW50ZWdlcjogXCIgKyBleHAgKyBcIiBpcyBub3QgYSB2YWxpZCBleHBvbmVudC5cIik7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gc3BsaXRbMF07XHJcbiAgICAgICAgICAgIHZhciBkZWNpbWFsUGxhY2UgPSB0ZXh0LmluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICBpZiAoZGVjaW1hbFBsYWNlID49IDApIHtcclxuICAgICAgICAgICAgICAgIGV4cCAtPSB0ZXh0Lmxlbmd0aCAtIGRlY2ltYWxQbGFjZSAtIDE7XHJcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgwLCBkZWNpbWFsUGxhY2UpICsgdGV4dC5zbGljZShkZWNpbWFsUGxhY2UgKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXhwIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGluY2x1ZGUgbmVnYXRpdmUgZXhwb25lbnQgcGFydCBmb3IgaW50ZWdlcnNcIik7XHJcbiAgICAgICAgICAgIHRleHQgKz0gKG5ldyBBcnJheShleHAgKyAxKSkuam9pbihcIjBcIik7XHJcbiAgICAgICAgICAgIHYgPSB0ZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaXNWYWxpZCA9IC9eKFswLTldWzAtOV0qKSQvLnRlc3Qodik7XHJcbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGludGVnZXI6IFwiICsgdik7XHJcbiAgICAgICAgaWYgKHN1cHBvcnRzTmF0aXZlQmlnSW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTmF0aXZlQmlnSW50KEJpZ0ludChzaWduID8gXCItXCIgKyB2IDogdikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IFtdLCBtYXggPSB2Lmxlbmd0aCwgbCA9IExPR19CQVNFLCBtaW4gPSBtYXggLSBsO1xyXG4gICAgICAgIHdoaWxlIChtYXggPiAwKSB7XHJcbiAgICAgICAgICAgIHIucHVzaCgrdi5zbGljZShtaW4sIG1heCkpO1xyXG4gICAgICAgICAgICBtaW4gLT0gbDtcclxuICAgICAgICAgICAgaWYgKG1pbiA8IDApIG1pbiA9IDA7XHJcbiAgICAgICAgICAgIG1heCAtPSBsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cmltKHIpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQmlnSW50ZWdlcihyLCBzaWduKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZU51bWJlclZhbHVlKHYpIHtcclxuICAgICAgICBpZiAoc3VwcG9ydHNOYXRpdmVCaWdJbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOYXRpdmVCaWdJbnQoQmlnSW50KHYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUHJlY2lzZSh2KSkge1xyXG4gICAgICAgICAgICBpZiAodiAhPT0gdHJ1bmNhdGUodikpIHRocm93IG5ldyBFcnJvcih2ICsgXCIgaXMgbm90IGFuIGludGVnZXIuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFNtYWxsSW50ZWdlcih2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlU3RyaW5nVmFsdWUodi50b1N0cmluZygpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHYgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlTnVtYmVyVmFsdWUodik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmdWYWx1ZSh2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2ID09PSBcImJpZ2ludFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTmF0aXZlQmlnSW50KHYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIH1cclxuICAgIC8vIFByZS1kZWZpbmUgbnVtYmVycyBpbiByYW5nZSBbLTk5OSw5OTldXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwMDA7IGkrKykge1xyXG4gICAgICAgIEludGVnZXJbaV0gPSBwYXJzZVZhbHVlKGkpO1xyXG4gICAgICAgIGlmIChpID4gMCkgSW50ZWdlclstaV0gPSBwYXJzZVZhbHVlKC1pKTtcclxuICAgIH1cclxuICAgIC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcbiAgICBJbnRlZ2VyLm9uZSA9IEludGVnZXJbMV07XHJcbiAgICBJbnRlZ2VyLnplcm8gPSBJbnRlZ2VyWzBdO1xyXG4gICAgSW50ZWdlci5taW51c09uZSA9IEludGVnZXJbLTFdO1xyXG4gICAgSW50ZWdlci5tYXggPSBtYXg7XHJcbiAgICBJbnRlZ2VyLm1pbiA9IG1pbjtcclxuICAgIEludGVnZXIuZ2NkID0gZ2NkO1xyXG4gICAgSW50ZWdlci5sY20gPSBsY207XHJcbiAgICBJbnRlZ2VyLmlzSW5zdGFuY2UgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4geCBpbnN0YW5jZW9mIEJpZ0ludGVnZXIgfHwgeCBpbnN0YW5jZW9mIFNtYWxsSW50ZWdlciB8fCB4IGluc3RhbmNlb2YgTmF0aXZlQmlnSW50OyB9O1xyXG4gICAgSW50ZWdlci5yYW5kQmV0d2VlbiA9IHJhbmRCZXR3ZWVuO1xyXG5cclxuICAgIEludGVnZXIuZnJvbUFycmF5ID0gZnVuY3Rpb24gKGRpZ2l0cywgYmFzZSwgaXNOZWdhdGl2ZSkge1xyXG4gICAgICAgIHJldHVybiBwYXJzZUJhc2VGcm9tQXJyYXkoZGlnaXRzLm1hcChwYXJzZVZhbHVlKSwgcGFyc2VWYWx1ZShiYXNlIHx8IDEwKSwgaXNOZWdhdGl2ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBJbnRlZ2VyO1xyXG59KSgpO1xyXG5cclxuLy8gTm9kZS5qcyBjaGVja1xyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuaGFzT3duUHJvcGVydHkoXCJleHBvcnRzXCIpKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGJpZ0ludDtcclxufVxyXG5cclxuLy9hbWQgY2hlY2tcclxuaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICBkZWZpbmUoIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gYmlnSW50O1xyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSBcIi4vY2lyY2xlXCI7XG5pbXBvcnQgeyBjYWxjRGlzdCwgRW52aXJvbm1lbnQsIG1hdGhpZnkgfSBmcm9tIFwiLi9lbnZpcm9ubWVudFwiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUG90ZW50aWFsKHhSYW5nZTogbnVtYmVyW10sIHlSYW5nZTogbnVtYmVyW10sIHN0ZXA6IG51bWJlcik6IFByb21pc2U8eyBwb2ludDogUG9pbnQsIHBvdDogbnVtYmVyIH1bXT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG5cdFx0bGV0IHJlc3VsdDogeyBwb2ludDogUG9pbnQsIHBvdDogbnVtYmVyIH1bXSA9IFtdO1xuXHRcdGZvciAobGV0IHggPSB4UmFuZ2VbMF07IHggPD0geFJhbmdlWzFdOyB4ID0geCArIHN0ZXApIHtcblx0XHRcdGZvciAobGV0IHkgPSB5UmFuZ2VbMF07IHkgPD0geVJhbmdlWzFdOyB5ID0geSArIHN0ZXApIHtcblx0XHRcdFx0bGV0IHBvdEV4cHIgPSBFbnZpcm9ubWVudC5nZXRJbnN0YW5jZSgpLmdldFBvdChuZXcgUG9pbnQoeCwgeSkpO1xuXHRcdFx0XHRsZXQgbW9kUG90RXhwciA9IG1hdGhpZnkocG90RXhwcik7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0bGV0IHBvdCA9IGV2YWwobW9kUG90RXhwcik7XG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goeyBwb2ludDogbmV3IFBvaW50KHgsIHkpLCBwb3Q6IHBvdCB9KTtcblx0XHRcdFx0fSBjYXRjaCB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2cobW9kUG90RXhwciwgeCwgeSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGNvbnNvbGUubG9nKFwiJSBkb25lXCIsICh4ICogMTAwIC8geFJhbmdlWzFdKSk7XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFwiJSBkb25lXCIsIDEwMCk7XG5cdFx0cmVzKHJlc3VsdCk7XG5cdH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVHcmFkaWVudFgocG9pbnQ6IFBvaW50KTogeyBwb2ludDogUG9pbnQsIGR1ZHg6IG51bWJlciB9IHtcblx0bGV0IGdyYWRpZW50RXhwciA9IEVudmlyb25tZW50LmdldEluc3RhbmNlKCkuZ2V0R3JhZGllbnRYKHBvaW50KTtcblx0XG5cdGxldCBtb2RHcmFkaWVudEV4cHIgPSBtYXRoaWZ5KGdyYWRpZW50RXhwcik7XG5cdHRyeSB7XG5cdFx0bGV0IGR1ZHggPSBldmFsKG1vZEdyYWRpZW50RXhwcik7XG5cdFx0cmV0dXJuIHsgcG9pbnQsIGR1ZHggfTtcblx0fSBjYXRjaCB7XG5cdFx0Y29uc29sZS5sb2cobW9kR3JhZGllbnRFeHByLCBwb2ludCk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUdyYWRpZW50WShwb2ludDogUG9pbnQpOiB7IHBvaW50OiBQb2ludCwgZHVkeTogbnVtYmVyIH0ge1xuXHRsZXQgZ3JhZGllbnRFeHByID0gRW52aXJvbm1lbnQuZ2V0SW5zdGFuY2UoKS5nZXRHcmFkaWVudFkocG9pbnQpO1xuXHRsZXQgbW9kR3JhZGllbnRFeHByID0gbWF0aGlmeShncmFkaWVudEV4cHIpO1xuXHR0cnkge1xuXHRcdGxldCBkdWR5ID0gZXZhbChtb2RHcmFkaWVudEV4cHIpO1xuXHRcdHJldHVybiB7IHBvaW50LCBkdWR5IH07XG5cdH0gY2F0Y2gge1xuXHRcdGNvbnNvbGUubG9nKG1vZEdyYWRpZW50RXhwciwgcG9pbnQpO1xuXHR9XG59XG5cbig8YW55PndpbmRvdykuY2FsY3VsYXRlR3JhZGllbnRYID0gY2FsY3VsYXRlR3JhZGllbnRYO1xuKDxhbnk+d2luZG93KS5jYWxjdWxhdGVHcmFkaWVudFkgPSBjYWxjdWxhdGVHcmFkaWVudFk7XG5cbmZ1bmN0aW9uIHBvaW50c0VxdWFsKHAxOiBQb2ludCwgcDI6IFBvaW50KTogYm9vbGVhbntcblx0aWYocDEueCA9PSBwMi54ICYmIHAxLnkgPT0gcDIueSl7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGFwdEFscGhhKGFscGhhOiBudW1iZXIsIGR1ZHg6IG51bWJlciwgZHVkeTogbnVtYmVyKTogbnVtYmVye1xuXHRpZihjYWxjRGlzdChuZXcgUG9pbnQoZHVkeCwgZHVkeSksIG5ldyBQb2ludCgwLCAwKSkgPj0gMC4wMSl7XG5cdFx0cmV0dXJuIGFscGhhLzEwO1xuXHR9XG5cdGlmKGNhbGNEaXN0KG5ldyBQb2ludChkdWR4LCBkdWR5KSwgbmV3IFBvaW50KDAsIDApKSA+PSAwLjAwMDEpe1xuXHRcdHJldHVybiBhbHBoYTtcblx0fVxuXHRpZigoY2FsY0Rpc3QobmV3IFBvaW50KGR1ZHgsIGR1ZHkpLCBuZXcgUG9pbnQoMCwgMCkpIDwgMC4wMDAwMDEpKXtcblx0XHRyZXR1cm4gYWxwaGEqMTAwMDtcblx0fVxuXHRpZigoY2FsY0Rpc3QobmV3IFBvaW50KGR1ZHgsIGR1ZHkpLCBuZXcgUG9pbnQoMCwgMCkpIDwgMC4wMDAwMSkpe1xuXHRcdHJldHVybiBhbHBoYSoxMDA7XG5cdH1cblx0aWYoKGNhbGNEaXN0KG5ldyBQb2ludChkdWR4LCBkdWR5KSwgbmV3IFBvaW50KDAsIDApKSA8IDAuMDAwMSkpe1xuXHRcdHJldHVybiBhbHBoYSoxMDtcblx0fVxuXHQvLyBpZigoY2FsY0Rpc3QobmV3IFBvaW50KGR1ZHgsIGR1ZHkpLCBuZXcgUG9pbnQoMCwgMCkpIDwgMC4wMDEpKXtcblx0Ly8gXHRyZXR1cm4gYWxwaGEqMTA7XG5cdC8vIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYWRpZW50RGVzY2VudChzdGFydDogUG9pbnQsIGdvYWw6IFBvaW50LCBib3VuZGFyeTogQ2lyY2xlLCBhbHBoYTogbnVtYmVyLCBlcHNpbG9uOiBudW1iZXIsIGNiPzogKHE6IFBvaW50W10sIGR1ZHg6IG51bWJlciwgZHVkeTogbnVtYmVyLCBjb3VudDogbnVtYmVyLCB0ZXJtaW5hdGVkOiBib29sZWFuKSA9PiBib29sZWFuKTogUHJvbWlzZTxQb2ludFtdPntcblx0cmV0dXJuIG5ldyBQcm9taXNlPFBvaW50W10+KChyZXMsIHJlcSk9Pntcblx0XHRsZXQgcTogUG9pbnRbXSA9IFtzdGFydF07XG5cdFx0bGV0IGR1ZHg6IG51bWJlciA9IGNhbGN1bGF0ZUdyYWRpZW50WChxWzBdKS5kdWR4O1xuXHRcdGxldCBkdWR5OiBudW1iZXIgPSBjYWxjdWxhdGVHcmFkaWVudFkocVswXSkuZHVkeTtcblx0XHRsZXQgY291bnQgPSAwO1xuXHRcdGNvbnNvbGUubG9nKFwiZ3JhZGllbnQ1ISEhXCIpO1xuXHRcdHdoaWxlICgoY2FsY0Rpc3QobmV3IFBvaW50KGR1ZHgsIGR1ZHkpLCBuZXcgUG9pbnQoMCwgMCkpID4gZXBzaWxvbikpIHtcblx0XHRcdGxldCBhbHBoYV9zdGFyID0gYWRhcHRBbHBoYShhbHBoYSwgZHVkeCwgZHVkeSk7XG5cdFx0XHRsZXQgeCA9IHFbcS5sZW5ndGggLSAxXS54IC0gYWxwaGFfc3RhcipkdWR4O1xuXHRcdFx0bGV0IHkgPSBxW3EubGVuZ3RoIC0gMV0ueSAtIGFscGhhX3N0YXIqZHVkeTtcblx0XHRcdGxldCBuZXdfcG9pbnQgPSBuZXcgUG9pbnQoeCwgeSk7XG5cdFx0XHRxLnB1c2gobmV3X3BvaW50KTtcblx0XHRcdGlmKGNiICYmICFjYihxLCBkdWR4LCBkdWR5LCBjb3VudCwgZmFsc2UpKXtcblx0XHRcdFx0cmV0dXJuIHE7XG5cdFx0XHR9XG5cdFx0XHRkdWR4ID0gY2FsY3VsYXRlR3JhZGllbnRYKHFbcS5sZW5ndGggLSAxXSkuZHVkeDtcblx0XHRcdGR1ZHkgPSBjYWxjdWxhdGVHcmFkaWVudFkocVtxLmxlbmd0aCAtIDFdKS5kdWR5O1xuXHRcdFx0Kytjb3VudDtcblx0XHR9XG5cdFx0Y2IocSwgZHVkeCwgZHVkeSwgY291bnQsIHRydWUpO1xuXHRcdHJlcyhxKTtcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0RGF0YSh2YWxzOiB7IHBvaW50OiBQb2ludCwgcG90OiBudW1iZXIgfVtdKTogeyB4OiBudW1iZXJbXSwgeTogbnVtYmVyW10sIHo6IG51bWJlcltdLCB0eXBlOiBzdHJpbmcgfSB7XG5cdGxldCB4OiBudW1iZXJbXSA9IFtdLCB5OiBudW1iZXJbXSA9IFtdLCB6OiBudW1iZXJbXSA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHZhbHMubGVuZ3RoOyBpKyspIHtcblx0XHR4LnB1c2godmFsc1tpXS5wb2ludC54KTtcblx0XHR5LnB1c2godmFsc1tpXS5wb2ludC55KTtcblx0XHR6LnB1c2godmFsc1tpXS5wb3QpO1xuXHR9XG5cdHJldHVybiB7IHgsIHksIHosIHR5cGU6IFwiY29udG91clwiIH07XG59IiwiZGVjbGFyZSBjb25zdCBQbG90bHk6IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRvdXJDaGFydChzdmdJZDogc3RyaW5nLCBkYXRhOiB7IHg6IG51bWJlcltdLCB5OiBudW1iZXJbXSwgejogbnVtYmVyW10sIHR5cGU6IHN0cmluZyB9W10sIHNoYXBlczogYW55KSB7XG5cblx0bGV0IGNoYXJ0RGF0YTogYW55ID0gZGF0YTtcblxuXHR2YXIgbGF5b3V0ID0ge1xuXHRcdGF1dG9zaXplOiBmYWxzZSxcblx0XHR3aWR0aDogNTAwLFxuXHRcdGhlaWdodDogNTAwLFxuXHRcdG1hcmdpbjoge1xuXHRcdCAgbDogNTAsXG5cdFx0ICByOiA1MCxcblx0XHQgIGI6IDEwMCxcblx0XHQgIHQ6IDEwMCxcblx0XHQgIHBhZDogNFxuXHRcdH0sXG5cdFx0cGFwZXJfYmdjb2xvcjogJyM3ZjdmN2YnLFxuXHRcdHBsb3RfYmdjb2xvcjogJyNjN2M3YzcnLFxuXHRcdHNoYXBlc1xuXHQgIH07XG5cblx0UGxvdGx5Lm5ld1Bsb3Qoc3ZnSWQsIGNoYXJ0RGF0YSwgbGF5b3V0KTtcblxufSIsImV4cG9ydCBjbGFzcyBDaXJjbGV7XG5cdGN4OiBudW1iZXI7XG5cdGN5OiBudW1iZXI7XG5cdHI6IG51bWJlcjtcblx0Y29uc3RydWN0b3IoY3g6IG51bWJlciwgY3k6IG51bWJlciwgcjogbnVtYmVyKXtcblx0XHR0aGlzLmN4ID0gY3g7XG5cdFx0dGhpcy5jeSA9IGN5O1xuXHRcdHRoaXMuciA9IHI7XG5cdH1cbn0iLCJpbXBvcnQgeyBjYWxjdWxhdGVHcmFkaWVudFgsIGNhbGN1bGF0ZVBvdGVudGlhbCwgY29udmVydERhdGEsIGdyYWRpZW50RGVzY2VudCB9IGZyb20gXCIuL2NhbGN1bGF0aW9uXCI7XG5pbXBvcnQgeyBjb250b3VyQ2hhcnQgfSBmcm9tIFwiLi9jaGFydFwiO1xuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSBcIi4vY2lyY2xlXCI7XG5pbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gXCIuL2Vudmlyb25tZW50XCI7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gXCIuL3BvaW50XCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRlbXBsYXRlKGlkOiBudW1iZXIpIHtcblx0Y29uc3QgdGVtcGxhdGUgPSBgXG5cdFx0XHQ8dGFibGU+XG5cdFx0XHQ8dHI+XG5cdFx0XHQ8dGQ+XG5cdFx0XHRcdDxsYWJlbCBmb3I9XCJzdGFydHhfJHtpZH1cIj5TdGFydCB4PC9sYWJlbD5cblx0XHRcdDwvdGQ+XG5cdFx0XHQ8dGQ+XG5cdFx0XHRcdDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9XCJzdGFydHhfJHtpZH1cIj5cblx0XHRcdDwvdGQ+XG5cdFx0XHQ8L3RyPlxuXHRcdFx0PHRyPlxuXHRcdFx0PHRkPlxuXHRcdFx0XHQ8bGFiZWwgZm9yPVwic3RhcnR5XyR7aWR9XCI+U3RhcnQgeTwvbGFiZWw+XG5cdFx0XHQ8L3RkPlxuXHRcdFx0PHRkPlxuXHRcdFx0XHQ8aW5wdXQgdHlwZT1cIm51bWJlclwiIGlkPVwic3RhcnR5XyR7aWR9XCI+XG5cdFx0XHQ8L3RkPlxuXHRcdFx0PC90cj5cblx0XHRcdDx0cj5cblx0XHRcdDx0ZD5cblx0XHRcdFx0PGxhYmVsIGZvcj1cImdvYWx4XyR7aWR9XCI+R29hbCB4PC9sYWJlbD5cblx0XHRcdDwvdGQ+XG5cdFx0XHQ8dGQ+XG5cdFx0XHRcdDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9XCJnb2FseF8ke2lkfVwiPlxuXHRcdFx0PC90ZD5cblx0XHRcdDwvdHI+XG5cdFx0XHQ8dHI+XG5cdFx0XHQ8dGQ+XG5cdFx0XHRcdDxsYWJlbCBmb3I9XCJnb2FseV8ke2lkfVwiPkdvYWwgeTwvbGFiZWw+XG5cdFx0XHQ8L3RkPlxuXHRcdFx0PHRkPlxuXHRcdFx0XHQ8aW5wdXQgdHlwZT1cIm51bWJlclwiIGlkPVwiZ29hbHlfJHtpZH1cIj5cblx0XHRcdDwvdGQ+XG5cdFx0XHQ8L3RyPlxuXHRcdFx0PHRyPlxuXHRcdFx0XHQ8dGQ+XG5cdFx0XHRcdFx0PGxhYmVsIGZvcj1cImthcHBhXyR7aWR9XCI+S2FwcGE8L2xhYmVsPlxuXHRcdFx0XHQ8L3RkPlxuXHRcdFx0XHQ8dGQ+XG5cdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJudW1iZXJcIiBpZD1cImthcHBhXyR7aWR9XCI+XG5cdFx0XHRcdDwvdGQ+XG5cdFx0XHQ8L3RyPlxuXHRcdFx0PHRyPlxuXHRcdFx0XHQ8dGQ+PGxhYmVsIGZvcj1cImJvdW5kYXJ5XyR7aWR9XCI+Qm91bmRhcnk8bGFiZWw+PC90ZD5cblx0XHRcdFx0PHRkPjxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiYm91bmRhcnlfJHtpZH1cIj48L3RkPlxuXHRcdFx0PC90cj5cblx0XHRcdDx0cj5cblx0XHRcdFx0PHRkPjxsYWJlbCBmb3I9XCJvYnN0YWNsZXNfJHtpZH1cIj5PYnN0YWNsZXM8L2xhYmVsPjwvdGQ+XG5cdFx0XHRcdDx0ZD48aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cIm9ic3RhY2xlc18ke2lkfVwiPjwvdGQ+XG5cdFx0XHQ8L3RyPlxuXHRcdFx0PHRyPlxuXHRcdFx0XHQ8dGQ+PGxhYmVsIGZvcj1cImFscGhhXyR7aWR9XCI+YWxwaGE8L2xhYmVsPjwvdGQ+XG5cdFx0XHRcdDx0ZD48aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImFscGhhXyR7aWR9XCI+PC90ZD5cblx0XHRcdDwvdHI+XG5cdFx0XHQ8dHI+XG5cdFx0XHRcdDx0ZD48bGFiZWwgZm9yPVwiZXBzaWxvbl8ke2lkfVwiPmVwc2lsb248L2xhYmVsPjwvdGQ+XG5cdFx0XHRcdDx0ZD48aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVwc2lsb25fJHtpZH1cIj48L3RkPlxuXHRcdFx0PC90cj5cblx0XHRcdDwvdGFibGU+XG5cdFx0XHQ8YnV0dG9uIGlkPVwiY29tcHV0ZVBvdF8ke2lkfVwiPkNvbXB1dGUgUG90ZW50aWFsPC9idXR0b24+XG5cdFx0XHQ8YnV0dG9uIGlkPVwiY29tcHV0ZVBhdGhfJHtpZH1cIj5GaW5kIFBhdGg8L2J1dHRvbj5cblx0XHRcdDxidXR0b24gaWQ9XCJzaG93T2JzdGFjbGVzXyR7aWR9XCI+U2hvdyBPYnN0YWNsZXM8L2J1dHRvbj5cblx0XHRcdDxkaXYgaWQ9XCJjb250b3VyX2NoYXJ0X2NvbnRhaW5lcl8ke2lkfVwiPjwvZGl2PlxuXHRcdGA7XG5cdHJldHVybiB0ZW1wbGF0ZTtcbn1cbmV4cG9ydCBjbGFzcyBEaXNwbGF5Q29tcG9uZW50IHtcblx0cGFyZW50OiBIVE1MRWxlbWVudDtcblx0c3ZnSUQ6IG51bWJlcjtcblx0ZGl2SUQ6IG51bWJlcjtcblx0c3RhdGljIGFjdGl2ZUlEOiBudW1iZXJbXSA9IFswXTtcblx0ZGF0YTogeyBwb2ludDogUG9pbnQsIHBvdDogbnVtYmVyIH1bXTtcblx0c2hhcGVzOiBhbnlbXSA9IFtdO1xuXHRvYnN0YWNsZXM6IENpcmNsZVtdID0gW107XG5cdHByaXZhdGUgc3RhdGljIGdldElEKCkge1xuXHRcdGxldCBtYXggPSBNYXRoLm1heCguLi5EaXNwbGF5Q29tcG9uZW50LmFjdGl2ZUlEKTtcblx0XHREaXNwbGF5Q29tcG9uZW50LmFjdGl2ZUlELnB1c2gobWF4ICsgMSk7XG5cdFx0cmV0dXJuIG1heCArIDE7XG5cdH1cblx0Y29uc3RydWN0b3IocGFyZW50SUQ6IHN0cmluZykge1xuXHRcdHRoaXMucGFyZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyZW50SUQpO1xuXHRcdHRoaXMuc3ZnSUQgPSBEaXNwbGF5Q29tcG9uZW50LmdldElEKCk7XG5cdFx0dGhpcy5kaXZJRCA9IHRoaXMuc3ZnSUQ7XG5cdH1cblx0c2hvdygpIHtcblx0XHRsZXQgdGVtcGxhdGUgPSBjcmVhdGVUZW1wbGF0ZSh0aGlzLnN2Z0lEKTtcblx0XHRsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRkaXYuc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgYmxhY2tcIjtcblx0XHRkaXYuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0ZGl2LnN0eWxlLndpZHRoID0gXCJmaXQtY29udGVudFwiO1xuXHRcdGRpdi5pZCA9IFwiY29udGFpbmVyX1wiICsgdGhpcy5kaXZJRDtcblx0XHRkaXYuaW5uZXJIVE1MID0gdGVtcGxhdGUudHJpbSgpO1xuXHRcdCg8SFRNTEVsZW1lbnQ+ZGl2LnF1ZXJ5U2VsZWN0b3IoXCIjY29tcHV0ZVBvdF9cIiArIHRoaXMuc3ZnSUQpKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4geyB0aGlzLmNhbGN1bGF0ZVBvdCgpIH0pO1xuXHRcdCg8SFRNTEVsZW1lbnQ+ZGl2LnF1ZXJ5U2VsZWN0b3IoXCIjY29tcHV0ZVBhdGhfXCIgKyB0aGlzLnN2Z0lEKSkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHsgdGhpcy5jYWxjdWxhdGVQYXRoKCk7IH0pO1xuXHRcdCg8SFRNTEVsZW1lbnQ+ZGl2LnF1ZXJ5U2VsZWN0b3IoXCIjc2hvd09ic3RhY2xlc19cIiArIHRoaXMuc3ZnSUQpKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4geyB0aGlzLnNob3dPYnN0YWNsZXMoKSB9KTtcblx0XHR0aGlzLnBhcmVudC5hcHBlbmRDaGlsZChkaXYpO1xuXHR9XG5cdGdldElucHV0cygpIHtcblx0XHRsZXQgc3RhcnQgPSB0aGlzLmdldFN0YXJ0KCkgfHwgbmV3IFBvaW50KDEsIDEwKTtcblx0XHRsZXQgZ29hbCA9IHRoaXMuZ2V0R29hbCgpIHx8IG5ldyBQb2ludCgxOSwgMTApO1xuXHRcdGxldCBib3VuZGFyeSA9IHRoaXMuZ2V0Qm91bmRhcnkoKSB8fCBuZXcgQ2lyY2xlKDEwLCAxMCwgMTApO1xuXHRcdGxldCBvYnN0YWNsZXMgPSB0aGlzLmdldE9ic3RhY2xlcygpIHx8IFtuZXcgQ2lyY2xlKDEwLCAxNSwgMiksIG5ldyBDaXJjbGUoMTAsIDUsIDIpXTtcblx0XHRsZXQga2FwcGEgPSB0aGlzLmdldEthcHBhKCkgfHwgMztcblx0XHRsZXQgYWxwaGEgPSB0aGlzLmdldEFscGhhKCkgfHwgMTtcblx0XHRsZXQgZXBzaWxvbiA9IHRoaXMuZ2V0RXBzaWxvbigpIHx8IDAuMDAwMDE7XG5cdFx0Y29uc29sZS5sb2coXCJJbnB1dHMgYXJlOlwiLCB7IHN0YXJ0LCBnb2FsLCBib3VuZGFyeSwgb2JzdGFjbGVzLCBrYXBwYSB9KTtcblx0XHRyZXR1cm4geyBzdGFydCwgZ29hbCwgYm91bmRhcnksIG9ic3RhY2xlcywga2FwcGEsIGFscGhhLCBlcHNpbG9uIH07XG5cdH1cblx0Z2V0U3RhcnQoKTogUG9pbnQge1xuXHRcdGxldCB4ID0gcGFyc2VGbG9hdCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJfXCIgKyB0aGlzLmRpdklEKS5xdWVyeVNlbGVjdG9yKFwiI3N0YXJ0eF9cIiArIHRoaXMuc3ZnSUQpKS52YWx1ZSk7XG5cdFx0bGV0IHkgPSBwYXJzZUZsb2F0KCg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lcl9cIiArIHRoaXMuZGl2SUQpLnF1ZXJ5U2VsZWN0b3IoXCIjc3RhcnR5X1wiICsgdGhpcy5zdmdJRCkpLnZhbHVlKTtcblx0XHRpZiAoIXggfHwgIXkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBQb2ludCh4LCB5KTtcblx0fVxuXHRnZXRHb2FsKCk6IFBvaW50IHtcblx0XHRsZXQgeCA9IHBhcnNlRmxvYXQoKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyX1wiICsgdGhpcy5kaXZJRCkucXVlcnlTZWxlY3RvcihcIiNnb2FseF9cIiArIHRoaXMuc3ZnSUQpKS52YWx1ZSk7XG5cdFx0bGV0IHkgPSBwYXJzZUZsb2F0KCg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lcl9cIiArIHRoaXMuZGl2SUQpLnF1ZXJ5U2VsZWN0b3IoXCIjZ29hbHlfXCIgKyB0aGlzLnN2Z0lEKSkudmFsdWUpO1xuXHRcdGlmICgheCB8fCAheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IFBvaW50KHgsIHkpO1xuXHR9XG5cdGdldEJvdW5kYXJ5KCk6IENpcmNsZSB7XG5cdFx0bGV0IHN0ciA9ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lcl9cIiArIHRoaXMuZGl2SUQpLnF1ZXJ5U2VsZWN0b3IoXCIjYm91bmRhcnlfXCIgKyB0aGlzLnN2Z0lEKSkudmFsdWU7XG5cdFx0dHJ5IHtcblx0XHRcdGxldCBhcnIgPSBldmFsKHN0cik7XG5cdFx0XHRyZXR1cm4gbmV3IENpcmNsZShhcnJbMF1bMF0sIGFyclswXVsxXSwgYXJyWzFdKTtcblx0XHR9IGNhdGNoIHtcblxuXHRcdH1cblx0fVxuXHRnZXRPYnN0YWNsZXMoKTogQ2lyY2xlW10ge1xuXHRcdGxldCBzdHIgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJfXCIgKyB0aGlzLmRpdklEKS5xdWVyeVNlbGVjdG9yKFwiI29ic3RhY2xlc19cIiArIHRoaXMuc3ZnSUQpKS52YWx1ZTtcblx0XHR0cnkge1xuXHRcdFx0bGV0IGFyciA9IGV2YWwoc3RyKTtcblx0XHRcdGxldCBvYnM6IENpcmNsZVtdID0gW107XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRvYnMucHVzaChuZXcgQ2lyY2xlKGFycltpXVswXVswXSwgYXJyW2ldWzBdWzFdLCBhcnJbaV1bMV0pKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYnM7XG5cdFx0fSBjYXRjaCB7XG5cblx0XHR9XG5cdH1cblx0Z2V0S2FwcGEoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gcGFyc2VGbG9hdCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJfXCIgKyB0aGlzLmRpdklEKS5xdWVyeVNlbGVjdG9yKFwiI2thcHBhX1wiICsgdGhpcy5zdmdJRCkpLnZhbHVlKTtcblx0fVxuXHRnZXRBbHBoYSgpOiBudW1iZXIge1xuXHRcdHJldHVybiBwYXJzZUZsb2F0KCg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lcl9cIiArIHRoaXMuZGl2SUQpLnF1ZXJ5U2VsZWN0b3IoXCIjYWxwaGFfXCIgKyB0aGlzLnN2Z0lEKSkudmFsdWUpO1xuXHR9XG5cdGdldEVwc2lsb24oKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gcGFyc2VGbG9hdCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJfXCIgKyB0aGlzLmRpdklEKS5xdWVyeVNlbGVjdG9yKFwiI2Vwc2lsb25fXCIgKyB0aGlzLnN2Z0lEKSkudmFsdWUpO1xuXHR9XG5cdGNhbGN1bGF0ZVBvdCgpOiB2b2lkIHtcblx0XHRjb25zb2xlLmxvZyhcInN0YXJ0ZWQhISFcIilcblx0XHRsZXQgeyBnb2FsLCBib3VuZGFyeSwgb2JzdGFjbGVzLCBrYXBwYSB9ID0gdGhpcy5nZXRJbnB1dHMoKTtcblx0XHRFbnZpcm9ubWVudC5nZXRJbnN0YW5jZSgpLnNldChnb2FsLCBib3VuZGFyeSwgb2JzdGFjbGVzLCBrYXBwYSk7XG5cdFx0dGhpcy5vYnN0YWNsZXMgPSBvYnN0YWNsZXM7XG5cdFx0Y2FsY3VsYXRlUG90ZW50aWFsKFswLCAyMF0sIFswLCAyMF0sIDAuNSkudGhlbih2YWxzID0+IHtcblx0XHRcdHRoaXMuZGF0YSA9IHZhbHM7XG5cdFx0XHR0aGlzLmRyYXdDaGFydCgpO1xuXHRcdH0pXG5cdH1cblx0Y2FsY3VsYXRlUGF0aCgpIHtcblx0XHRsZXQgeyBzdGFydCwgZ29hbCwgYm91bmRhcnksIG9ic3RhY2xlcywga2FwcGEsIGFscGhhLCBlcHNpbG9uIH0gPSB0aGlzLmdldElucHV0cygpO1xuXHRcdEVudmlyb25tZW50LmdldEluc3RhbmNlKCkuc2V0KGdvYWwsIGJvdW5kYXJ5LCBvYnN0YWNsZXMsIGthcHBhKTtcblx0XHRncmFkaWVudERlc2NlbnQoc3RhcnQsIGdvYWwsIGJvdW5kYXJ5LCBhbHBoYSwgZXBzaWxvbiwgdGhpcy5ncmFkaWVudENhbGxiYWNrLmJpbmQodGhpcykpXG5cdFx0LnRoZW4ocGF0aD0+e1xuXHRcdFx0Y29uc29sZS5sb2cocGF0aCk7XG5cdFx0fSk7XG5cdH1cblx0Z3JhZGllbnRDYWxsYmFjayhxOiBQb2ludFtdLCBkdWR4OiBudW1iZXIsIGR1ZHk6IG51bWJlciwgY291bnQ6IG51bWJlciwgdGVybWluYXRlZDogYm9vbGVhbik6IGJvb2xlYW4ge1xuXHRcdGlmIChxLmxlbmd0aCA+PSAyKSB7XG5cdFx0XHR0aGlzLnNoYXBlcy5wdXNoKHtcblx0XHRcdFx0dHlwZTogJ2xpbmUnLFxuXHRcdFx0XHR4MDogcVtxLmxlbmd0aCAtIDFdLngsXG5cdFx0XHRcdHkwOiBxW3EubGVuZ3RoIC0gMV0ueSxcblx0XHRcdFx0eDE6IHFbcS5sZW5ndGggLSAyXS54LFxuXHRcdFx0XHR5MTogcVtxLmxlbmd0aCAtIDJdLnksXG5cdFx0XHRcdGxpbmU6IHtcblx0XHRcdFx0XHRjb2xvcjogJ3JnYigyNTUsMjE1LDApJyxcblx0XHRcdFx0XHR3aWR0aDogMlxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYodGVybWluYXRlZCl7XG5cdFx0XHR0aGlzLmRyYXdDaGFydCgpO1xuXHRcdFx0Y29uc29sZS5sb2coYGl0ZXIgJHtjb3VudH0gcXg9JHtxW3EubGVuZ3RoIC0gMV0ueH0gcXk9JHtxW3EubGVuZ3RoIC0gMV0ueX1cblx0XHRcdFx0ZHVkeD0ke2R1ZHh9IGR1ZHk9JHtkdWR5fVxuXHRcdFx0YCk7XG5cdFx0fVxuXHRcdGlmIChjb3VudCAlIDIwID09IDApIHtcblx0XHRcdHRoaXMuZHJhd0NoYXJ0KCk7XG5cdFx0XHRjb25zb2xlLmxvZyhgaXRlciAke2NvdW50fSBxeD0ke3FbcS5sZW5ndGggLSAxXS54fSBxeT0ke3FbcS5sZW5ndGggLSAxXS55fVxuXHRcdFx0XHRkdWR4PSR7ZHVkeH0gZHVkeT0ke2R1ZHl9XG5cdFx0XHRgKTtcblx0XHR9XG5cdFx0aWYoY291bnQgPT0gMTAwMDAwKXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0c2hvd09ic3RhY2xlcygpIHtcblx0XHRpZiAodGhpcy5kYXRhKSB7XG5cdFx0XHRsZXQgc2hhcGVzID0gW107XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JzdGFjbGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHNoYXBlcy5wdXNoKHtcblx0XHRcdFx0XHR0eXBlOiAnY2lyY2xlJyxcblx0XHRcdFx0XHR4cmVmOiAneCcsXG5cdFx0XHRcdFx0eXJlZjogJ3knLFxuXHRcdFx0XHRcdHgwOiB0aGlzLm9ic3RhY2xlc1tpXS5jeCAtIHRoaXMub2JzdGFjbGVzW2ldLnIsXG5cdFx0XHRcdFx0eTA6IHRoaXMub2JzdGFjbGVzW2ldLmN5IC0gdGhpcy5vYnN0YWNsZXNbaV0ucixcblx0XHRcdFx0XHR4MTogdGhpcy5vYnN0YWNsZXNbaV0uY3ggKyB0aGlzLm9ic3RhY2xlc1tpXS5yLFxuXHRcdFx0XHRcdHkxOiB0aGlzLm9ic3RhY2xlc1tpXS5jeSArIHRoaXMub2JzdGFjbGVzW2ldLnIsXG5cdFx0XHRcdFx0b3BhY2l0eTogMC43NSxcblx0XHRcdFx0XHRmaWxsY29sb3I6ICdibGFjaycsXG5cdFx0XHRcdFx0bGluZToge1xuXHRcdFx0XHRcdFx0Y29sb3I6ICdibGFjaydcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zaGFwZXMucHVzaCguLi5zaGFwZXMpO1xuXHRcdFx0dGhpcy5kcmF3Q2hhcnQoKTtcblx0XHR9XG5cdH1cblx0ZHJhd0NoYXJ0KCkge1xuXHRcdGNvbnRvdXJDaGFydChcImNvbnRvdXJfY2hhcnRfY29udGFpbmVyX1wiICsgdGhpcy5zdmdJRCwgW2NvbnZlcnREYXRhKHRoaXMuZGF0YSldLCB0aGlzLnNoYXBlcyk7XG5cdH1cbn0iLCJpbXBvcnQgeyBDaXJjbGUgfSBmcm9tICcuL2NpcmNsZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vcG9pbnQnO1xudmFyIGFsZyA9IHJlcXVpcmUoXCJhbGdlYnJpdGVcIik7XG4oPGFueT53aW5kb3cpLmFsZyA9IGFsZztcbmZ1bmN0aW9uIGdldERpc3QocV9nb2FsOiBQb2ludCk6IHN0cmluZ3tcblx0bGV0IHN0ciA9IGBkaXN0YW5jZSA9IHNxcnQoICh4IC0gJHtxX2dvYWwueH0pXjIgKyAoeSAtICR7cV9nb2FsLnl9KV4yIClgO1xuXHRyZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBnZXRQb3RlbnRpYWwoa2FwcGE6IG51bWJlcik6IHN0cmluZ3tcblx0bGV0IHN0ciA9IGBwID0gKCAoZGlzdGFuY2VeMikgLyAoIGRpc3RhbmNlXigyKiR7a2FwcGF9KSArIGIgKV4oMS8ke2thcHBhfSkgKWA7XG5cdHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGdldFJlcHVsc2l2ZShib3VuZGFyeTogQ2lyY2xlLCBvYnN0YWNsZXM6IENpcmNsZVtdKTogc3RyaW5ne1xuXHRsZXQgc3RyID0gYGIgPSAoIC0xKiggKHggLSAke2JvdW5kYXJ5LmN4fSleMiArICh5IC0gJHtib3VuZGFyeS5jeX0pXjIgKSArICR7Ym91bmRhcnkucn1eMiApYDtcblx0b2JzdGFjbGVzLmZvckVhY2gobz0+e1xuXHRcdHN0ciA9IHN0ciArIGAqKCAoeCAtICR7by5jeH0pXjIgKyAoeSAtICR7by5jeX0pXjIgLSAke28ucn1eMiApYDtcblx0fSlcblx0cmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gZ2V0R3JhZGllbnRYKCk6IHN0cmluZ3tcblx0bGV0IHN0ciA9IGBkdWR4ID0gZChwLCB4KWA7XG5cdHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGdldEdyYWRpZW50WSgpOiBzdHJpbmd7XG5cdGxldCBzdHIgPSBgZHVkeSA9IGQocCwgeSlgO1xuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY0Rpc3QocDE6IFBvaW50LCBwMjogUG9pbnQpOiBudW1iZXJ7XG5cdHJldHVybiAoKHAxLnggLSBwMi54KSoqMiArIChwMS55IC0gcDIueSkqKjIpKiowLjU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRoaWZ5KHN0cjogc3RyaW5nKXtcblx0cmV0dXJuIHN0ci5yZXBsYWNlKC9cXF4vZywgXCIqKlwiKS5yZXBsYWNlKC9cXC5cXC5cXC4vZywgXCJcIik7XG59XG5cbmNvbnN0IFBPVF9DTEFNUCA9IFwiMVwiO1xuXG5leHBvcnQgY2xhc3MgRW52aXJvbm1lbnQge1xuXHRzdGF0aWMgZW52OiBFbnZpcm9ubWVudDtcblx0aXNTZXQ6IGJvb2xlYW47XG5cdG9ic3RhY2xlczogQ2lyY2xlW107XG5cdGJvdW5kYXJ5OiBDaXJjbGU7XG5cdHByaXZhdGUgY29uc3RydWN0b3IoKXtcblxuXHR9XG5cdHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogRW52aXJvbm1lbnQge1xuXHRcdGlmKEVudmlyb25tZW50LmVudiA9PSB1bmRlZmluZWQpe1xuXHRcdFx0RW52aXJvbm1lbnQuZW52ID0gbmV3IEVudmlyb25tZW50KCk7XG5cdFx0fVxuXHRcdHJldHVybiBFbnZpcm9ubWVudC5lbnY7XG5cdH1cblx0c2V0KGdvYWw6IFBvaW50LCBib3VuZGFyeTogQ2lyY2xlLCBvYnN0YWNsZXM6IENpcmNsZVtdLCBrYXBwYTogbnVtYmVyKTogdm9pZCB7XG5cdFx0dGhpcy5vYnN0YWNsZXMgPSBvYnN0YWNsZXM7XG5cdFx0dGhpcy5ib3VuZGFyeSA9IGJvdW5kYXJ5O1xuXHRcdGFsZy5ydW4oZ2V0UmVwdWxzaXZlKGJvdW5kYXJ5LCBvYnN0YWNsZXMpKTtcblx0XHRhbGcucnVuKGdldERpc3QoZ29hbCkpO1xuXHRcdGFsZy5ydW4oZ2V0UG90ZW50aWFsKGthcHBhKSk7XG5cdFx0YWxnLnJ1bihnZXRHcmFkaWVudFgoKSk7XG5cdFx0YWxnLnJ1bihnZXRHcmFkaWVudFkoKSk7XG5cdFx0dGhpcy5pc1NldCA9IHRydWU7XG5cdH1cblx0Y2xlYXIodmFyaWFibGU6IHN0cmluZyk6IHZvaWQge1xuXHRcdGFsZy5jbGVhcih2YXJpYWJsZSk7XG5cdFx0dGhpcy5pc1NldCA9IGZhbHNlO1xuXHR9XG5cdGNsZWFyQWxsKCk6IHZvaWQge1xuXHRcdGFsZy5jbGVhckFsbCgpO1xuXHRcdHRoaXMuaXNTZXQgPSBmYWxzZTtcblx0fVxuXHRnZXRQb3QocDogUG9pbnQpOiBzdHJpbmcge1xuXHRcdGlmKHRoaXMuaXNTZXQgJiYgdGhpcy5zYWZlUG9pbnQocCkpe1xuXHRcdFx0cmV0dXJuIGFsZy5ldmFsKGFsZy5ldmFsKFwicFwiLCBcInhcIiwgIHAueC50b1N0cmluZygpKS50b1N0cmluZygpLCBcInlcIiwgcC55LnRvU3RyaW5nKCkpLnRvU3RyaW5nKCk7XG5cdFx0fVxuXHRcdGlmKHRoaXMuaXNTZXQgJiYgIXRoaXMuc2FmZVBvaW50KHApKXtcblx0XHRcdHJldHVybiBQT1RfQ0xBTVA7XG5cdFx0fVxuXHR9XG5cdGdldEdyYWRpZW50WChwOiBQb2ludCk6IHN0cmluZyB7XG5cdFx0aWYodGhpcy5pc1NldCAmJiB0aGlzLnNhZmVQb2ludChwKSl7XG5cdFx0XHRsZXQgZXYgPSB0aGlzLnJlbW92ZURvdHMoYWxnLmV2YWwoXCJkdWR4XCIsIFwieFwiLCAgcC54LnRvU3RyaW5nKCkpLnRvU3RyaW5nKCkpO1xuXHRcdFx0ZXYgPSB0aGlzLnJlbW92ZURvdHMoYWxnLmV2YWwoZXYsIFwieVwiLCBwLnkudG9TdHJpbmcoKSkudG9TdHJpbmcoKSk7XG5cdFx0XHRyZXR1cm4gZXY7XG5cdFx0fVxuXHRcdGlmKHRoaXMuaXNTZXQgJiYgIXRoaXMuc2FmZVBvaW50KHApKXtcblx0XHRcdHJldHVybiBcIjBcIjtcblx0XHR9XG5cdH1cblx0cmVtb3ZlRG90cyhzdHI6IHN0cmluZyl7XG5cdFx0cmV0dXJuIHN0ci5yZXBsYWNlKC9cXC5cXC5cXC4vZywgXCJcIik7XG5cdH1cblx0Z2V0R3JhZGllbnRZKHA6IFBvaW50KTogc3RyaW5nIHtcblx0XHRpZih0aGlzLmlzU2V0ICYmIHRoaXMuc2FmZVBvaW50KHApKXtcblx0XHRcdGxldCBldiA9IHRoaXMucmVtb3ZlRG90cyhhbGcuZXZhbChcImR1ZHlcIiwgXCJ4XCIsICBwLngudG9TdHJpbmcoKSkudG9TdHJpbmcoKSk7XG5cdFx0XHRldiA9IHRoaXMucmVtb3ZlRG90cyhhbGcuZXZhbChldiwgXCJ5XCIsIHAueS50b1N0cmluZygpKS50b1N0cmluZygpKTtcblx0XHRcdHJldHVybiBldjtcblx0XHR9XG5cdFx0aWYodGhpcy5pc1NldCAmJiAhdGhpcy5zYWZlUG9pbnQocCkpe1xuXHRcdFx0cmV0dXJuIFwiMFwiO1xuXHRcdH1cblx0fVxuXHRzYWZlUG9pbnQocDogUG9pbnQpe1xuXHRcdC8vIHAgc2hvdWxkIG5vdCBiZSBpbnNpZGUgb3Igb24gdGhlIGNpcmNsZVxuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLm9ic3RhY2xlcy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRsZXQgeCA9IHRoaXMub2JzdGFjbGVzW2ldLmN4O1xuXHRcdFx0bGV0IHkgPSB0aGlzLm9ic3RhY2xlc1tpXS5jeTtcblx0XHRcdGxldCByID0gdGhpcy5vYnN0YWNsZXNbaV0ucjtcblx0XHRcdGlmKGNhbGNEaXN0KHAsIG5ldyBQb2ludCh4LCB5KSkgPD0gIHIpe1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIHAgc2hvdWxkIG5vdCBiZSBvdXRzaWRlIGJvdW5kYXJ5XG5cdFx0aWYoY2FsY0Rpc3QocCwgbmV3IFBvaW50KHRoaXMuYm91bmRhcnkuY3gsIHRoaXMuYm91bmRhcnkuY3kpKSA+IHRoaXMuYm91bmRhcnkucil7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59IiwiaW1wb3J0IHsgRGlzcGxheUNvbXBvbmVudCB9IGZyb20gJy4vZGlzcGxheWNvbXBvbmVudCc7XG5jb25zdCBwYXJlbnRJRCA9IFwibWFpbl9jb250YWluZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZERpc3BsYXlDb21wb25lbnQoKXtcblx0Y29uc3QgY29tcCA9IG5ldyBEaXNwbGF5Q29tcG9uZW50KHBhcmVudElEKTtcblx0Y29tcC5zaG93KCk7XG59XG5hZGREaXNwbGF5Q29tcG9uZW50KCk7XG4oPGFueT53aW5kb3cpLmFkZERpc3BsYXlDb21wb25lbnQgPSBhZGREaXNwbGF5Q29tcG9uZW50OyIsImV4cG9ydCBjbGFzcyBQb2ludCB7XG5cdHg6IG51bWJlcjtcblx0eTogbnVtYmVyO1xuXHRjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcil7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHR9XG59XG5cbig8YW55PndpbmRvdykuUG9pbnQgPSBQb2ludDsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4vLyBUaGlzIGVudHJ5IG1vZHVsZSB1c2VkICdleHBvcnRzJyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG4iXSwic291cmNlUm9vdCI6IiJ9
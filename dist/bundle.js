(()=>{var __webpack_modules__={879:function(__unused_webpack_module,exports,__webpack_require__){(function(){var $,ABS,ADD,ADJ,AND,APPROXRATIO,ARCCOS,ARCCOSH,ARCSIN,ARCSINH,ARCTAN,ARCTANH,ARG,ASSUME_REAL_VARIABLES,ATOMIZE,AUTOEXPAND,BAKE,BESSELJ,BESSELY,BINDING,BINOMIAL,BINOM_check_args,BUF,C1,C2,C3,C4,C5,C6,CEILING,CHECK,CHOOSE,CIRCEXP,CLEAR,CLEARALL,CLEARPATTERNS,CLOCK,COEFF,COFACTOR,CONDENSE,CONJ,CONS,CONTRACT,COS,COSH,Condense,DEBUG,DEBUG_ABS,DEBUG_ARG,DEBUG_CLOCKFORM,DEBUG_IMAG,DEBUG_IS,DEBUG_POWER,DEBUG_RECT,DECOMP,DEFINT,DEGREE,DENOMINATOR,DERIVATIVE,DET,DET_check_arg,DIM,DIRAC,DIVISORS,DO,DOT,DOUBLE,DRAW,DRAWX,DSOLVE,E,EIGEN,EIGENVAL,EIGENVEC,EIG_N,EIG_check_arg,EIG_yydd,EIG_yyqq,ERF,ERFC,EVAL,EXP,EXPAND,EXPCOS,EXPSIN,Eval,Eval_Eval,Eval_abs,Eval_add,Eval_adj,Eval_and,Eval_approxratio,Eval_arccos,Eval_arccosh,Eval_arcsin,Eval_arcsinh,Eval_arctan,Eval_arctanh,Eval_arg,Eval_besselj,Eval_bessely,Eval_binding,Eval_binomial,Eval_ceiling,Eval_check,Eval_choose,Eval_circexp,Eval_clear,Eval_clearall,Eval_clearpatterns,Eval_clock,Eval_coeff,Eval_cofactor,Eval_condense,Eval_conj,Eval_cons,Eval_contract,Eval_cos,Eval_cosh,Eval_decomp,Eval_defint,Eval_degree,Eval_denominator,Eval_derivative,Eval_det,Eval_dim,Eval_dirac,Eval_divisors,Eval_do,Eval_dsolve,Eval_eigen,Eval_eigenval,Eval_eigenvec,Eval_erf,Eval_erfc,Eval_exp,Eval_expand,Eval_expcos,Eval_expsin,Eval_factor,Eval_factorial,Eval_factorpoly,Eval_filter,Eval_float,Eval_floor,Eval_for,Eval_function_reference,Eval_gamma,Eval_gcd,Eval_hermite,Eval_hilbert,Eval_imag,Eval_index,Eval_inner,Eval_integral,Eval_inv,Eval_invg,Eval_isinteger,Eval_isprime,Eval_laguerre,Eval_lcm,Eval_leading,Eval_legendre,Eval_log,Eval_lookup,Eval_mod,Eval_multiply,Eval_noexpand,Eval_not,Eval_nroots,Eval_number,Eval_numerator,Eval_operator,Eval_or,Eval_outer,Eval_pattern,Eval_patternsinfo,Eval_polar,Eval_power,Eval_predicate,Eval_prime,Eval_print,Eval_print2dascii,Eval_printcomputer,Eval_printhuman,Eval_printlatex,Eval_printlist,Eval_product,Eval_quote,Eval_quotient,Eval_rank,Eval_rationalize,Eval_real,Eval_rect,Eval_roots,Eval_round,Eval_setq,Eval_sgn,Eval_shape,Eval_silentpattern,Eval_simfac,Eval_simplify,Eval_sin,Eval_sinh,Eval_sqrt,Eval_stop,Eval_subst,Eval_sum,Eval_sym,Eval_symbolsinfo,Eval_tan,Eval_tanh,Eval_taylor,Eval_tensor,Eval_test,Eval_testeq,Eval_testge,Eval_testgt,Eval_testle,Eval_testlt,Eval_transpose,Eval_unit,Eval_user_function,Eval_zero,Evalpoly,FACTOR,FACTORIAL,FACTORPOLY,FILTER,FLOATF,FLOOR,FOR,FORCE_FIXED_PRINTOUT,FUNCTION,Find,GAMMA,GCD,HERMITE,HILBERT,IMAG,INDEX,INNER,INTEGRAL,INV,INVG,INV_check_arg,INV_decomp,ISINTEGER,ISPRIME,LAGUERRE,LAST,LAST_2DASCII_PRINT,LAST_FULL_PRINT,LAST_LATEX_PRINT,LAST_LIST_PRINT,LAST_PLAIN_PRINT,LAST_PRINT,LCM,LEADING,LEGENDRE,LOG,LOOKUP,M,MAXDIM,MAXPRIMETAB,MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES,MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE,MAX_FIXED_PRINTOUT_DIGITS,MAX_PROGRAM_SIZE,MEQUAL,METAA,METAB,METAX,MLENGTH,MOD,MSIGN,MULTIPLY,MZERO,N,NIL,NOT,NROOTS,NROOTS_ABS,NROOTS_DELTA,NROOTS_EPSILON,NROOTS_RANDOM,NROOTS_YMAX,NROOTS_divpoly,NSYM,NUM,NUMBER,NUMERATOR,OPERATOR,OR,OUTER,PATTERN,PATTERNSINFO,PI,POLAR,POWER,PRIME,PRINT,PRINT2DASCII,PRINTFULL,PRINTLATEX,PRINTLIST,PRINTMODE_2DASCII,PRINTMODE_COMPUTER,PRINTMODE_HUMAN,PRINTMODE_LATEX,PRINTMODE_LIST,PRINTOUTRESULT,PRINTPLAIN,PRINT_LEAVE_E_ALONE,PRINT_LEAVE_X_ALONE,PRODUCT,QUOTE,QUOTIENT,RANK,RATIONALIZE,REAL,ROOTS,ROUND,SECRETX,SELFTEST,SETQ,SGN,SHAPE,SILENTPATTERN,SIMPLIFY,SIN,SINH,SPACE_BETWEEN_COLUMNS,SPACE_BETWEEN_ROWS,SQRT,STOP,STR,SUBST,SUM,SYM,SYMBOLSINFO,SYMBOL_A,SYMBOL_A_UNDERSCORE,SYMBOL_B,SYMBOL_B_UNDERSCORE,SYMBOL_C,SYMBOL_D,SYMBOL_I,SYMBOL_IDENTITY_MATRIX,SYMBOL_J,SYMBOL_N,SYMBOL_R,SYMBOL_S,SYMBOL_T,SYMBOL_X,SYMBOL_X_UNDERSCORE,SYMBOL_Y,SYMBOL_Z,TAN,TANH,TAYLOR,TENSOR,TEST,TESTEQ,TESTGE,TESTGT,TESTLE,TESTLT,TIMING_DEBUGS,TOS,TRACE,TRANSPOSE,T_DOUBLE,T_EQ,T_FUNCTION,T_GTEQ,T_INTEGER,T_LTEQ,T_NEQ,T_NEWLINE,T_QUOTASSIGN,T_STRING,T_SYMBOL,U,UNIT,USR_SYMBOLS,VERSION,YMAX,YYE,YYRECT,ZERO,__emit_char,__emit_str,__factor_add,__factorial,__is_negative,__is_radical_number,__lcm,__legendre,__legendre2,__legendre3,__normalize_radical_factors,__rationalize_tensor,_print,abs,absValFloat,absval,absval_tensor,add,addSymbolLeftOfAssignment,addSymbolRightOfAssignment,add_all,add_factor_to_accumulator,add_numbers,add_terms,addf,adj,alloc_tensor,allocatedId,any_denominators,approxAll,approxLogs,approxLogsOfRationals,approxOneRatioOnly,approxRadicals,approxRadicalsOfRationals,approxRationalsOfLogs,approxRationalsOfPowersOfE,approxRationalsOfPowersOfPI,approxRationalsOfRadicals,approxSineOfRationalMultiplesOfPI,approxSineOfRationals,approxTrigonometric,approx_just_an_integer,approx_logarithmsOfRationals,approx_nothingUseful,approx_radicalOfRatio,approx_ratioOfRadical,approx_rationalOfE,approx_rationalOfPi,approx_rationalsOfLogarithms,approx_sine_of_pi_times_rational,approx_sine_of_rational,approxratioRecursive,arccos,arccosh,arcsin,arcsinh,arctan,arctanh,areunivarpolysfactoredorexpandedform,arg,arglist,assignmentFound,avoidCalculatingPowersIntoArctans,bake,bake_poly,bake_poly_term,besselj,bessely,bigInt,bignum_factorial,bignum_float,bignum_power_number,bignum_scan_float,bignum_scan_integer,bignum_truncate,binding,binomial,buffer,build_tensor,caaddr,caadr,caar,cadaddr,cadadr,cadar,caddaddr,caddadr,caddar,caddddr,cadddr,caddr,cadr,called_from_Algebra_block,car,cdaddr,cdadr,cdar,cddaddr,cddar,cdddaddr,cddddr,cdddr,cddr,cdr,ceiling,chainOfUserSymbolsNotFunctionsBeingEvaluated,charTabIndex,chartab,checkFloatHasWorkedOutCompletely,check_esc_flag,check_stack,check_tensor_dimensions,choose,choose_check_args,circexp,clearAlgebraEnvironment,clearRenamedVariablesToAvoidBindingToExternalScope,clear_symbols,clear_term,clearall,clockform,cmpGlyphs,cmp_args,cmp_expr,cmp_terms,cmp_terms_count,codeGen,coeff,cofactor,collectLatexStringFromReturnValue,collectUserSymbols,combine_factors,combine_gammas,combine_terms,compareState,compare_numbers,compare_rationals,compare_tensors,compatible,computeDependenciesFromAlgebra,computeResultsAndJavaScriptFromAlgebra,compute_fa,conjugate,cons,consCount,contract,convert_bignum_to_double,convert_rational_to_double,copy_tensor,cosine,cosine_of_angle,cosine_of_angle_sum,count,countOccurrencesOfSymbol,count_denominators,counter,countsize,d_scalar_scalar,d_scalar_scalar_1,d_scalar_tensor,d_tensor_scalar,d_tensor_tensor,dabs,darccos,darccosh,darcsin,darcsinh,darctan,darctanh,dbesselj0,dbesseljn,dbessely0,dbesselyn,dcos,dcosh,dd,decomp,decomp_product,decomp_sum,defineSomeHandyConstants,define_user_function,defn,defn_str,degree,denominator,derf,derfc,derivative,derivative_of_integral,det,determinant,detg,dfunction,dhermite,dirac,display,display_flag,displaychar,divide,divide_numbers,divisors,divisors_onstack,divpoly,dlog,do_clearPatterns,do_clearall,do_simplify_nested_radicals,dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication,dotprod_unicode,doubleToReasonableString,dpow,dpower,dproduct,draw_flag,draw_stop_return,dsgn,dsin,dsinh,dsum,dtan,dtanh,dupl,eigen,elelmIndex,elem,emit_denominator,emit_denominators,emit_expr,emit_factor,emit_factorial_function,emit_flat_tensor,emit_fraction,emit_function,emit_index_function,emit_multiply,emit_number,emit_numerators,emit_numerical_fraction,emit_power,emit_string,emit_subexpr,emit_symbol,emit_tensor,emit_tensor_inner,emit_term,emit_top_expr,emit_unsigned_expr,emit_x,equal,equaln,equalq,erfc,errorMessage,esc_flag,evaluatingAsFloats,evaluatingPolar,exec,expand,expand_get_A,expand_get_AF,expand_get_B,expand_get_C,expand_get_CF,expand_tensor,expanding,expcos,exponential,expr_level,expsin,f1,f10,f2,f3,f4,f5,f9,f_equals_a,factor,factor_a,factor_again,factor_b,factor_number,factor_small_number,factor_term,factorial,factorpoly,factors,factpoly_expo,fill_buf,filter,filter_main,filter_sum,filter_tensor,findDependenciesInScript,findPossibleClockForm,findPossibleExponentialForm,findroot,fixup_fraction,fixup_power,flag,floatToRatioRoutine,fmt_index,fmt_level,fmt_x,frame,freeze,functionInvokationsScanningStack,gamma,gamma_of_sum,gammaf,gcd,gcd_main,gcd_numbers,gcd_polys,gcd_powers_with_same_base,gcd_product_product,gcd_product_sum,gcd_sum,gcd_sum_product,gcd_sum_sum,gen,getSimpleRoots,getStateHash,get_binding,get_factor_from_complex_root,get_factor_from_real_root,get_innerprod_factors,get_next_token,get_printname,get_size,get_token,getdisplaystr,glyph,gp,guess,hasImaginaryCoeff,hasNegativeRationalExponent,hash_addition,hash_function,hash_multiplication,hash_power,hashcode_values,hashed_itab,hermite,hilbert,i1,imag,imaginaryunit,index_function,init,initNRoots,inited,inner,inner_f,input_str,integral,integral_of_form,integral_of_product,integral_of_sum,inv,inverse,invert_number,invg,isNumberOneOverSomething,isNumericAtom,isNumericAtomOrTensor,isSimpleRoot,isSmall,isSymbolLeftOfAssignment,isSymbolReclaimable,isZeroAtom,isZeroAtomOrTensor,isZeroLikeOrNonZeroLikeOrUndetermined,isZeroTensor,is_denominator,is_factor,is_small_integer,is_square_matrix,is_usr_symbol,isadd,isalnumorunderscore,isalpha,isalphaOrUnderscore,iscomplexnumber,iscomplexnumberdouble,iscons,isdenominator,isdigit,isdouble,iseveninteger,isfactor,isfactorial,isfloating,isfraction,isidentitymatrix,isimaginarynumber,isimaginarynumberdouble,isimaginaryunit,isinnerordot,isinteger,isintegerfactor,isintegerorintegerfloat,isinv,iskeyword,isminusone,isminusoneoversqrttwo,isminusoneovertwo,ismultiply,isnegative,isnegativenumber,isnegativeterm,isnonnegativeinteger,isnpi,isone,isoneover,isoneoversqrttwo,isoneovertwo,isplusone,isplustwo,ispolyexpandedform,ispolyexpandedform_expr,ispolyexpandedform_factor,ispolyexpandedform_term,ispolyfactoredorexpandedform,ispolyfactoredorexpandedform_factor,ispolyfactoredorexpandedform_power,isposint,ispositivenumber,ispower,isquarterturn,isrational,isspace,isstr,issymbol,issymbolic,istensor,istranspose,isunderscore,isunivarpolyfactoredorexpandedform,itab,italu_hashcode,j1,laguerre,laguerre2,lastFoundSymbol,latexErrorSign,lcm,leading,legendre,length,lessp,level,list,listLength,logarithm,logbuf,lookupsTotal,lu_decomp,madd,makePositive,makeSignSameAs,make_hashed_itab,mask,mcmp,mcmpint,mdiv,mdivrem,meta_mode,mgcd,mini_solve,mint,mmod,mmul,mod,monic,move,moveTos,mp_clr_bit,mp_denominator,mp_numerator,mp_set_bit,mpow,mprime,mroot,mshiftright,msub,mtotal,multinomial_sum,multiply,multiply_all,multiply_all_noexpand,multiply_consecutive_constants,multiply_denominators,multiply_denominators_factor,multiply_denominators_term,multiply_noexpand,multiply_numbers,n_factor_number,negate,negate_expand,negate_noexpand,negate_number,new_string,newline_flag,nil_symbols,normaliseDots,normalisedCoeff,normalize_angle,nroots_a,nroots_b,nroots_c,nroots_df,nroots_dx,nroots_fa,nroots_fb,nroots_x,nroots_y,nterms,nthCadr,numerator,numericRootOfPolynomial,o,one,oneElement,one_as_double,out_buf,out_count,out_of_memory,outer,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,parse,parse_internal,parse_p1,parse_p2,parse_time_simplifications,partition,patternHasBeenFound,patternsinfo,peek,performing_roots,polar,polarRectAMinusOneBase,polycoeff,polyform,pop,pop_double,pop_frame,pop_integer,power,power_str,power_sum,power_tensor,predefinedSymbolsInGlobalScope_doNotTrackInDependencies,prime,primetab,print2dascii,printMode,print_ABS_latex,print_ARCCOS_codegen,print_ARCSIN_codegen,print_ARCTAN_codegen,print_BINOMIAL_latex,print_COS_codegen,print_DEFINT_latex,print_DOT_codegen,print_DOT_latex,print_DO_codegen,print_FOR_codegen,print_INV_codegen,print_INV_latex,print_PRODUCT_codegen,print_PRODUCT_latex,print_SETQ_codegen,print_SIN_codegen,print_SQRT_latex,print_SUM_codegen,print_SUM_latex,print_TAN_codegen,print_TESTEQ_latex,print_TESTGE_latex,print_TESTGT_latex,print_TESTLE_latex,print_TESTLT_latex,print_TEST_codegen,print_TEST_latex,print_TRANSPOSE_codegen,print_TRANSPOSE_latex,print_UNIT_codegen,print_a_over_b,print_base,print_base_of_denom,print_char,print_denom,print_double,print_expo_of_denom,print_exponent,print_expr,print_factor,print_factorial_function,print_glyphs,print_index_function,print_list,print_multiply_sign,print_number,print_power,print_str,print_subexpr,print_tensor,print_tensor_inner,print_tensor_inner_latex,print_tensor_latex,print_term,printchar,printchar_nowrap,printline,program_buf,promote_tensor,push,pushTryNotToDuplicate,push_cars,push_double,push_factor,push_frame,push_identity_matrix,push_integer,push_rational,push_symbol,push_term_factors,push_terms,push_zero_matrix,qadd,qdiv,qmul,qpow,qpowf,quickfactor,quickpower,rational,rationalize,rationalize_coefficients,real,reciprocate,rect,recursionLevelNestedRadicalsRemoval,recursiveDependencies,ref,ref1,rememberPrint,remove_negative_exponents,reset_after_error,restore,restoreMetaBindings,rewrite_args,rewrite_args_tensor,roots,roots2,roots3,run,runUserDefinedSimplifications,save,saveMetaBindings,scalar_times_tensor,scan,scan_error,scan_expression,scan_factor,scan_function_call_with_function_name,scan_function_call_without_function_name,scan_index,scan_meta,scan_power,scan_relation,scan_stmt,scan_str,scan_string,scan_subexpr,scan_symbol,scan_tensor,scan_term,scanned,scanningParameters,setM,setSignTo,set_binding,set_component,setq_indexed,sfac_product,sfac_product_f,sgn,shape,show_power_debug,sign,sign_of_term,simfac,simfac_term,simpleComplexityMeasure,simplify,simplifyForCodeGeneration,simplify_1_in_products,simplify_main,simplify_nested_radicals,simplify_polar,simplify_polarRect,simplify_rational_expressions,simplify_rectToClock,simplify_tensor,simplify_trig,simplifyfactorials,sine,sine_of_angle,sine_of_angle_sum,skipRootVariableToBeSolved,sort_stack,square,ssqrt,stack,stackAddsCount,std_symbol,step,step2,stop,strcmp,stringsEmittedByUserPrintouts,subf,subst,subtract,subtract_numbers,swap,symbol,symbolsDependencies,symbolsHavingReassignments,symbolsInExpressionsWithoutAssignments,symbolsLeftOfAssignment,symbolsRightOfAssignment,symbolsinfo,symnum,symtab,take_care_of_nested_radicals,tangent,taylor,tensor,tensor_plus_tensor,tensor_times_scalar,testApprox,test_flag,text_metric,theRandom,token,token_buf,token_str,top,top_level_eval,tos,transform,transpose,transpose_unicode,trigmode,trivial_divide,try_kth_prime,turnErrorMessageToLatex,ucmp,unfreeze,unique,unique_f,update_token_buf,userSimplificationsInListForm,userSimplificationsInStringForm,usr_symbol,verbosing,version,will_be_displayed_as_fraction,ybinomial,ycosh,ydirac,yerf,yerfc,yfloor,yindex,yround,ysinh,yyarg,yybesselj,yybessely,yyceiling,yycondense,yycontract,yycosh,yydegree,yydetg,yydivpoly,yyerf,yyerfc,yyexpand,yyfactorpoly,yyfloat,yyfloor,yyhermite,yyhermite2,yyinvg,yylcm,yylog,yymultiply,yyouter,yypower,yyrationalize,yyround,yysgn,yysimfac,yysinh,yytangent,zero,zzfloat,hasProp={}.hasOwnProperty;for(bigInt=__webpack_require__(736),version="1.3.1",SELFTEST=1,NSYM=1e3,DEBUG=!1,PRINTOUTRESULT=!1,PRINTMODE_LATEX="PRINTMODE_LATEX",PRINTMODE_2DASCII="PRINTMODE_2DASCII",PRINTMODE_COMPUTER="PRINTMODE_COMPUTER",PRINTMODE_HUMAN="PRINTMODE_HUMAN",PRINTMODE_LIST="PRINTMODE_LIST",printMode=PRINTMODE_COMPUTER,dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication=!0,recursionLevelNestedRadicalsRemoval=0,do_simplify_nested_radicals=!0,avoidCalculatingPowersIntoArctans=!0,rational=function(){class r{}return r.prototype.a=null,r.prototype.b=null,r}.call(this),U=function(){class r{toString(){return print_expr(this)}toLatexString(){return collectLatexStringFromReturnValue(this)}constructor(){this.cons={},this.cons.car=null,this.cons.cdr=null,this.q=new rational}}return r.prototype.cons=null,r.prototype.printname="",r.prototype.str="",r.prototype.tensor=null,r.prototype.q=null,r.prototype.d=0,r.prototype.k=0,r.prototype.tag=0,r}.call(this),errorMessage="",CONS=0,NUM=1,DOUBLE=2,STR=3,TENSOR=4,SYM=5,counter=0,ABS=counter++,ADD=counter++,ADJ=counter++,AND=counter++,APPROXRATIO=counter++,ARCCOS=counter++,ARCCOSH=counter++,ARCSIN=counter++,ARCSINH=counter++,ARCTAN=counter++,ARCTANH=counter++,ARG=counter++,ATOMIZE=counter++,BESSELJ=counter++,BESSELY=counter++,BINDING=counter++,BINOMIAL=counter++,CEILING=counter++,CHECK=counter++,CHOOSE=counter++,CIRCEXP=counter++,CLEAR=counter++,CLEARALL=counter++,CLEARPATTERNS=counter++,CLOCK=counter++,COEFF=counter++,COFACTOR=counter++,CONDENSE=counter++,CONJ=counter++,CONTRACT=counter++,COS=counter++,COSH=counter++,DECOMP=counter++,DEFINT=counter++,DEGREE=counter++,DENOMINATOR=counter++,DERIVATIVE=counter++,DET=counter++,DIM=counter++,DIRAC=counter++,DIVISORS=counter++,DO=counter++,DOT=counter++,DRAW=counter++,DSOLVE=counter++,EIGEN=counter++,EIGENVAL=counter++,EIGENVEC=counter++,ERF=counter++,ERFC=counter++,EVAL=counter++,EXP=counter++,EXPAND=counter++,EXPCOS=counter++,EXPSIN=counter++,FACTOR=counter++,FACTORIAL=counter++,FACTORPOLY=counter++,FILTER=counter++,FLOATF=counter++,FLOOR=counter++,FOR=counter++,FUNCTION=counter++,GAMMA=counter++,GCD=counter++,HERMITE=counter++,HILBERT=counter++,IMAG=counter++,INDEX=counter++,INNER=counter++,INTEGRAL=counter++,INV=counter++,INVG=counter++,ISINTEGER=counter++,ISPRIME=counter++,LAGUERRE=counter++,LCM=counter++,LEADING=counter++,LEGENDRE=counter++,LOG=counter++,LOOKUP=counter++,MOD=counter++,MULTIPLY=counter++,NOT=counter++,NROOTS=counter++,NUMBER=counter++,NUMERATOR=counter++,OPERATOR=counter++,OR=counter++,OUTER=counter++,PATTERN=counter++,PATTERNSINFO=counter++,POLAR=counter++,POWER=counter++,PRIME=counter++,PRINT_LEAVE_E_ALONE=counter++,PRINT_LEAVE_X_ALONE=counter++,PRINT=counter++,PRINT2DASCII=counter++,PRINTFULL=counter++,PRINTLATEX=counter++,PRINTLIST=counter++,PRINTPLAIN=counter++,PRODUCT=counter++,QUOTE=counter++,QUOTIENT=counter++,RANK=counter++,RATIONALIZE=counter++,REAL=counter++,ROUND=counter++,YYRECT=counter++,ROOTS=counter++,SETQ=counter++,SGN=counter++,SILENTPATTERN=counter++,SIMPLIFY=counter++,SIN=counter++,SINH=counter++,SHAPE=counter++,SQRT=counter++,STOP=counter++,SUBST=counter++,SUM=counter++,SYMBOLSINFO=counter++,TAN=counter++,TANH=counter++,TAYLOR=counter++,TEST=counter++,TESTEQ=counter++,TESTGE=counter++,TESTGT=counter++,TESTLE=counter++,TESTLT=counter++,TRANSPOSE=counter++,UNIT=counter++,ZERO=counter++,NIL=counter++,LAST=counter++,LAST_PRINT=counter++,LAST_2DASCII_PRINT=counter++,LAST_FULL_PRINT=counter++,LAST_LATEX_PRINT=counter++,LAST_LIST_PRINT=counter++,LAST_PLAIN_PRINT=counter++,AUTOEXPAND=counter++,BAKE=counter++,ASSUME_REAL_VARIABLES=counter++,TRACE=counter++,FORCE_FIXED_PRINTOUT=counter++,MAX_FIXED_PRINTOUT_DIGITS=counter++,YYE=counter++,DRAWX=counter++,METAA=counter++,METAB=counter++,METAX=counter++,SECRETX=counter++,VERSION=counter++,PI=counter++,SYMBOL_A=counter++,SYMBOL_B=counter++,SYMBOL_C=counter++,SYMBOL_D=counter++,SYMBOL_I=counter++,SYMBOL_J=counter++,SYMBOL_N=counter++,SYMBOL_R=counter++,SYMBOL_S=counter++,SYMBOL_T=counter++,SYMBOL_X=counter++,SYMBOL_Y=counter++,SYMBOL_Z=counter++,SYMBOL_IDENTITY_MATRIX=counter++,SYMBOL_A_UNDERSCORE=counter++,SYMBOL_B_UNDERSCORE=counter++,SYMBOL_X_UNDERSCORE=counter++,C1=counter++,C2=counter++,C3=counter++,C4=counter++,C5=counter++,C6=counter++,USR_SYMBOLS=counter++,E=YYE,TOS=1e5,BUF=1e4,MAX_PROGRAM_SIZE=100001,MAXPRIMETAB=1e4,MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES=5,MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE=10,MAXDIM=24,symbolsDependencies={},symbolsHavingReassignments=[],symbolsInExpressionsWithoutAssignments=[],patternHasBeenFound=!1,predefinedSymbolsInGlobalScope_doNotTrackInDependencies=["rationalize","abs","e","i","pi","sin","ceiling","cos","roots","integral","derivative","defint","sqrt","eig","cov","deig","dcov","float","floor","product","root","round","sum","test","unit"],parse_time_simplifications=!0,chainOfUserSymbolsNotFunctionsBeingEvaluated=[],stringsEmittedByUserPrintouts="",called_from_Algebra_block=!1,tensor=function(){class r{constructor(){this.dim=function(){var r,e,t;for(t=[],r=0,e=MAXDIM;0<=e?r<=e:r>=e;0<=e?r++:r--)t.push(0);return t}(),this.elem=[]}}return r.prototype.ndim=0,r.prototype.dim=null,r.prototype.nelem=0,r.prototype.elem=null,r}.call(this),display=function(){class r{}return r.prototype.h=0,r.prototype.w=0,r.prototype.n=0,r.prototype.a=[],r}.call(this),text_metric=function(){class r{}return r.prototype.ascent=0,r.prototype.descent=0,r.prototype.width=0,r}.call(this),tos=0,expanding=0,evaluatingAsFloats=0,evaluatingPolar=0,fmt_x=0,fmt_index=0,fmt_level=0,verbosing=0,primetab=function(){var r,e,t,o;for(o=[2],e=3;o.length<MAXPRIMETAB;){for(t=0,r=Math.sqrt(e);t<o.length&&o[t]<=r;){if(e%o[t]==0){t=-1;break}t++}-1!==t&&o.push(e),e+=2}return o[MAXPRIMETAB]=0,o}(),esc_flag=0,draw_flag=0,mtotal=0,trigmode=0,logbuf="",program_buf="",symtab=[],binding=[],isSymbolReclaimable=[],arglist=[],stack=[],frame=0,p0=null,p1=null,p2=null,p3=null,p4=null,p5=null,p6=null,p7=null,p8=null,p9=null,zero=null,one=null,one_as_double=null,imaginaryunit=null,out_buf="",out_count=0,test_flag=0,codeGen=!1,draw_stop_return=null,userSimplificationsInListForm=[],userSimplificationsInStringForm=[],transpose_unicode=7488,dotprod_unicode=183,symbol=function(r){return symtab[r]},iscons=function(r){return r.k===CONS},isrational=function(r){return r.k===NUM},isdouble=function(r){return r.k===DOUBLE},isNumericAtom=function(r){return isrational(r)||isdouble(r)},isstr=function(r){return r.k===STR},istensor=function(r){if(null!=r)return r.k===TENSOR},isNumericAtomOrTensor=function(r){var e,t,o,s,n;if(isNumericAtom(r)||r===symbol(SYMBOL_IDENTITY_MATRIX))return 1;if(!istensor(r)&&!isNumericAtom(r))return 0;for(o=r.tensor.nelem,e=r.tensor.elem,t=s=0,n=o;0<=n?s<n:s>n;t=0<=n?++s:--s)if(!isNumericAtomOrTensor(e[t]))return 0;return 1},issymbol=function(r){return r.k===SYM},iskeyword=function(r){return issymbol(r)&&symnum(r)<NIL},car=function(r){return iscons(r)?r.cons.car:symbol(NIL)},cdr=function(r){return iscons(r)?r.cons.cdr:symbol(NIL)},caar=function(r){return car(car(r))},cadr=function(r){return car(cdr(r))},cdar=function(r){return cdr(car(r))},cddr=function(r){return cdr(cdr(r))},caadr=function(r){return car(car(cdr(r)))},caddr=function(r){return car(cdr(cdr(r)))},cadar=function(r){return car(cdr(car(r)))},cdadr=function(r){return cdr(car(cdr(r)))},cddar=function(r){return cdr(cdr(car(r)))},cdddr=function(r){return cdr(cdr(cdr(r)))},caaddr=function(r){return car(car(cdr(cdr(r))))},cadadr=function(r){return car(cdr(car(cdr(r))))},caddar=function(r){return car(cdr(cdr(car(r))))},cdaddr=function(r){return cdr(car(cdr(cdr(r))))},cadddr=function(r){return car(cdr(cdr(cdr(r))))},cddddr=function(r){return cdr(cdr(cdr(cdr(r))))},caddddr=function(r){return car(cdr(cdr(cdr(cdr(r)))))},cadaddr=function(r){return car(cdr(car(cdr(cdr(r)))))},cddaddr=function(r){return cdr(cdr(car(cdr(cdr(r)))))},caddadr=function(r){return car(cdr(cdr(car(cdr(r)))))},cdddaddr=function(r){return cdr(cdr(cdr(car(cdr(cdr(r))))))},caddaddr=function(r){return car(cdr(cdr(car(cdr(cdr(r))))))},listLength=function(r){var e;for(e=-1;iscons(r);)r=cdr(r),e++;return e},nthCadr=function(r,e){var t;for(t=0;t<=e;)r=cdr(r),t++;return car(r)},isadd=function(r){return car(r)===symbol(ADD)},ismultiply=function(r){return car(r)===symbol(MULTIPLY)},ispower=function(r){return car(r)===symbol(POWER)},isfactorial=function(r){return car(r)===symbol(FACTORIAL)},isinnerordot=function(r){return car(r)===symbol(INNER)||car(r)===symbol(DOT)},istranspose=function(r){return car(r)===symbol(TRANSPOSE)},isinv=function(r){return car(r)===symbol(INV)},isidentitymatrix=function(r){return r===symbol(SYMBOL_IDENTITY_MATRIX)},MSIGN=function(r){return r.isPositive()?1:r.isZero()?0:-1},MLENGTH=function(r){return r.toString().length},MZERO=function(r){return r.isZero()},MEQUAL=function(r,e){return r.equals(e)},reset_after_error=function(){return moveTos(0),esc_flag=0,draw_flag=0,frame=TOS,evaluatingAsFloats=0,evaluatingPolar=0},$=null!==exports?exports:this,$.version=version,$.isadd=isadd,$.ismultiply=ismultiply,$.ispower=ispower,$.isfactorial=isfactorial,$.car=car,$.cdr=cdr,$.caar=caar,$.cadr=cadr,$.cdar=cdar,$.cddr=cddr,$.caadr=caadr,$.caddr=caddr,$.cadar=cadar,$.cdadr=cdadr,$.cddar=cddar,$.cdddr=cdddr,$.caaddr=caaddr,$.cadadr=cadadr,$.caddar=caddar,$.cdaddr=cdaddr,$.cadddr=cadddr,$.cddddr=cddddr,$.caddddr=caddddr,$.cadaddr=cadaddr,$.cddaddr=cddaddr,$.caddadr=caddadr,$.cdddaddr=cdddaddr,$.caddaddr=caddaddr,$.symbol=symbol,$.iscons=iscons,$.isrational=isrational,$.isdouble=isdouble,$.isNumericAtom=isNumericAtom,$.isstr=isstr,$.istensor=istensor,$.issymbol=issymbol,$.iskeyword=iskeyword,$.CONS=CONS,$.NUM=NUM,$.DOUBLE=DOUBLE,$.STR=STR,$.TENSOR=TENSOR,$.SYM=SYM,DEBUG_ABS=!1,Eval_abs=function(){return push(cadr(p1)),Eval(),abs()},absValFloat=function(){return Eval(),absval(),Eval(),zzfloat()},abs=function(){var r;if(r=top(),DEBUG_ABS&&console.trace(">>>>  ABS of "+r),numerator(),DEBUG_ABS&&console.log("ABS numerator "+stack[tos-1]),absval(),DEBUG_ABS&&console.log("ABSVAL numerator: "+stack[tos-1]),push(r),denominator(),DEBUG_ABS&&console.log("ABS denominator: "+stack[tos-1]),absval(),DEBUG_ABS&&console.log("ABSVAL denominator: "+stack[tos-1]),divide(),DEBUG_ABS&&console.log("ABSVAL divided: "+stack[tos-1]),DEBUG_ABS)return console.log("<<<<<<<  ABS")},absval=function(){var r,e;if(save(),e=p1=pop(),DEBUG_ABS&&console.log("ABS of "+p1),isZeroAtomOrTensor(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just zero"),push(zero),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(isnegativenumber(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just a negative"),push(p1),negate(),void restore();if(ispositivenumber(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just a positive"),push(p1),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(p1===symbol(PI))return DEBUG_ABS&&console.log(" abs: "+p1+" of PI"),push(p1),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(ADD)&&(findPossibleClockForm(p1)||findPossibleExponentialForm(p1)||Find(p1,imaginaryunit)))return DEBUG_ABS&&console.log(" abs: "+p1+" is a sum"),DEBUG_ABS&&console.log("abs of a sum"),push(p1),rect(),p1=pop(),push(p1),real(),push_integer(2),power(),push(p1),imag(),push_integer(2),power(),add(),push_rational(1,2),power(),simplify_trig(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&equaln(cadr(p1),-1))return DEBUG_ABS&&console.log(" abs: "+p1+" is -1 to any power"),evaluatingAsFloats?(DEBUG_ABS&&console.log(" abs: numeric, so result is 1.0"),push_double(1)):(DEBUG_ABS&&console.log(" abs: symbolic, so result is 1"),push_integer(1)),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&ispositivenumber(caddr(p1)))return DEBUG_ABS&&console.log(" abs: "+p1+" is something to the power of a positive number"),push(cadr(p1)),abs(),push(caddr(p1)),power(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&cadr(p1)===symbol(E))return DEBUG_ABS&&console.log(" abs: "+p1+" is an exponential"),push(caddr(p1)),real(),exponential(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(MULTIPLY)){for(DEBUG_ABS&&console.log(" abs: "+p1+" is a product"),r=!1,p1=cdr(p1);iscons(p1);)push(car(p1)),absval(),r&&multiply(),r=!0,p1=cdr(p1);return DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore()}return car(p1)===symbol(ABS)?(DEBUG_ABS&&console.log(" abs: "+p1+" is abs of a abs"),push_symbol(ABS),push(cadr(p1)),list(2),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore()):istensor(p1)?(absval_tensor(),void restore()):((isnegativeterm(p1)||car(p1)===symbol(ADD)&&isnegativeterm(cadr(p1)))&&(push(p1),negate(),p1=pop()),DEBUG_ABS&&console.log(" abs: "+p1+" is nothing decomposable"),push_symbol(ABS),push(p1),list(2),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),restore())},absval_tensor=function(){return 1!==p1.tensor.ndim&&stop("abs(tensor) with tensor rank > 1"),push(p1),push(p1),conjugate(),inner(),push_rational(1,2),power(),simplify(),Eval()},flag=0,Eval_add=function(){var r;for(r=tos,p1=cdr(p1);iscons(p1);)push(car(p1)),Eval(),p2=pop(),push_terms(p2),p1=cdr(p1);return add_terms(tos-r)},stackAddsCount=0,add_terms=function(r){var e,t,o,s,n,p,a,i,u;if(stackAddsCount++,t=0,e=tos-r,DEBUG&&console.log("stack before adding terms #"+stackAddsCount),DEBUG)for(t=n=0,p=tos;0<=p?n<p:n>p;t=0<=p?++n:--n)console.log(print_list(stack[t]));for(t=o=0;o<10&&!(r<2)&&(flag=0,(u=stack.slice(e,e+r)).sort(cmp_terms),stack=stack.slice(0,e).concat(u).concat(stack.slice(e+r)),0!==flag);t=++o)r=combine_terms(e,r);switch(moveTos(e+r),r){case 0:evaluatingAsFloats?push_double(0):push(zero);break;case 1:break;default:list(r),p1=pop(),push_symbol(ADD),push(p1),cons()}if(DEBUG&&console.log("stack after adding terms #"+stackAddsCount),DEBUG){for(i=[],t=s=0,a=tos;0<=a?s<a:s>a;t=0<=a?++s:--s)i.push(console.log(print_list(stack[t])));return i}},cmp_terms_count=0,cmp_terms=function(r,e){var t,o,s,n;if(cmp_terms_count++,t=0,isNumericAtom(r)&&isNumericAtom(e))return flag=1,0;if(istensor(r)&&istensor(e)){if(r.tensor.ndim<e.tensor.ndim)return-1;if(r.tensor.ndim>e.tensor.ndim)return 1;for(t=o=0,s=r.tensor.ndim;0<=s?o<s:o>s;t=0<=s?++o:--o){if(r.tensor.dim[t]<e.tensor.dim[t])return-1;if(r.tensor.dim[t]>e.tensor.dim[t])return 1}return flag=1,0}return car(r)===symbol(MULTIPLY)&&(r=cdr(r),isNumericAtom(car(r))&&(r=cdr(r),cdr(r)===symbol(NIL)&&(r=car(r)))),car(e)===symbol(MULTIPLY)&&(e=cdr(e),isNumericAtom(car(e))&&(e=cdr(e),cdr(e)===symbol(NIL)&&(e=car(e)))),0===(n=cmp_expr(r,e))&&(flag=1),n},combine_terms=function(r,e){var t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y;for(t=0;t<e-1;)if(check_esc_flag(),p3=stack[r+t],p4=stack[r+t+1],istensor(p3)&&istensor(p4)){if(push(p3),push(p4),tensor_plus_tensor(),(p1=pop())!==symbol(NIL)){for(stack[r+t]=p1,s=i=u=t+1,l=e-1;u<=l?i<l:i>l;s=u<=l?++i:--i)stack[r+s]=stack[r+s+1];e--,t--}t++}else if(istensor(p3)||istensor(p4))t++;else if(isNumericAtom(p3)&&isNumericAtom(p4)){if(push(p3),push(p4),add_numbers(),p1=pop(),isZeroAtomOrTensor(p1)){for(s=o=c=t,d=e-2;c<=d?o<d:o>d;s=c<=d?++o:--o)stack[r+s]=stack[r+s+2];e-=2}else{for(stack[r+t]=p1,s=n=_=t+1,m=e-1;_<=m?n<m:n>m;s=_<=m?++n:--n)stack[r+s]=stack[r+s+1];e--}t--,t++}else if(isNumericAtom(p3)||isNumericAtom(p4))t++;else if(evaluatingAsFloats?(p1=one_as_double,p2=one_as_double):(p1=one,p2=one),y=0,car(p3)===symbol(MULTIPLY)&&(p3=cdr(p3),y=1,isNumericAtom(car(p3))&&(p1=car(p3),p3=cdr(p3),cdr(p3)===symbol(NIL)&&(p3=car(p3),y=0))),car(p4)===symbol(MULTIPLY)&&(p4=cdr(p4),isNumericAtom(car(p4))&&(p2=car(p4),p4=cdr(p4),cdr(p4)===symbol(NIL)&&(p4=car(p4)))),equal(p3,p4))if(push(p1),push(p2),add_numbers(),p1=pop(),isZeroAtomOrTensor(p1)){for(s=p=f=t,h=e-2;f<=h?p<h:p>h;s=f<=h?++p:--p)stack[r+s]=stack[r+s+2];e-=2,t--,t++}else{for(push(p1),y?(push(symbol(MULTIPLY)),push(p3),cons()):push(p3),multiply(),stack[r+t]=pop(),s=a=g=t+1,b=e-1;g<=b?a<b:a>b;s=g<=b?++a:--a)stack[r+s]=stack[r+s+1];e--,t--,t++}else t++;return e},push_terms=function(r){var e;if(car(r)===symbol(ADD)){for(r=cdr(r),e=[];iscons(r);)push(car(r)),e.push(r=cdr(r));return e}if(!isZeroAtom(r))return push(r)},add=function(){var r;return save(),p2=pop(),p1=pop(),r=tos,push_terms(p1),push_terms(p2),add_terms(tos-r),restore()},add_all=function(r){var e,t,o,s,n;for(t=0,save(),n=tos-r,e=tos,t=o=0,s=r;0<=s?o<s:o>s;t=0<=s?++o:--o)push_terms(stack[n+t]);return add_terms(tos-e),p1=pop(),moveTos(tos-r),push(p1),restore()},subtract=function(){return negate(),add()},Eval_adj=function(){return push(cadr(p1)),Eval(),adj()},adj=function(){var r,e,t,o,s,n,p;for(r=0,t=0,save(),p1=pop(),istensor(p1)&&2===p1.tensor.ndim&&p1.tensor.dim[0]===p1.tensor.dim[1]||stop("adj: square matrix expected"),o=p1.tensor.dim[0],(p2=alloc_tensor(o*o)).tensor.ndim=2,p2.tensor.dim[0]=o,p2.tensor.dim[1]=o,r=s=0,n=o;0<=n?s<n:s>n;r=0<=n?++s:--s)for(t=e=0,p=o;0<=p?e<p:e>p;t=0<=p?++e:--e)cofactor(p1,o,r,t),p2.tensor.elem[o*t+r]=pop();return push(p2),restore()},Eval_approxratio=function(){var r;return r=cadr(p1),push(r),approxratioRecursive()},approxratioRecursive=function(){var r,e,t,o,s;if(r=0,save(),p1=pop(),istensor(p1)){for((p4=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,r=t=0,o=p1.tensor.ndim;0<=o?t<o:t>o;r=0<=o?++t:--t)p4.tensor.dim[r]=p1.tensor.dim[r];for(r=e=0,s=p1.tensor.nelem;0<=s?e<s:e>s;r=0<=s?++e:--e)push(p1.tensor.elem[r]),approxratioRecursive(),p4.tensor.elem[r]=pop(),check_tensor_dimensions(p4);push(p4)}else p1.k===DOUBLE?(push(p1),approxOneRatioOnly()):iscons(p1)?(push(car(p1)),approxratioRecursive(),push(cdr(p1)),approxratioRecursive(),cons()):push(p1);return restore()},approxOneRatioOnly=function(){var r,e,t,o,s,n;if(zzfloat(),(o=pop()).k!==DOUBLE)return push_symbol(APPROXRATIO),push(theArgument),list(2);2===(t=(s=o.d).toString().split(".")).length?(r=t[1].length,e=1/Math.pow(10,r),n=floatToRatioRoutine(s,e),push_rational(n[0],n[1])):push_integer(s)},floatToRatioRoutine=function(r,e){var t,o,s,n,p,a,i;if(s=void 0,o=void 0,void 0,a=void 0,n=void 0,p=void 0,i=[0,0],isNaN(r))return i;if(Infinity===r)return i[0]=1,i[1]=0,i;if(-Infinity===r)return i[0]=-1,i[1]=0,i;if(t=r<0?-1:1,r=Math.abs(r),Math.abs(r-Math.floor(r))<e)return s=r*t,o=1,i[0]=s,i[1]=o,i;if(r<1e-19)return s=t,o=1e19,i[0]=s,i[1]=o,i;if(r>1e19)return s=1e19*t,o=1,i[0]=s,i[1]=o,i;for(a=r,n=0,o=1;a=1/(a-Math.floor(a)),p=o,o=o*Math.floor(a)+n,n=p,s=Math.floor(r*o+.5),Math.abs(r-s/o)>e&&a!==Math.floor(a););return s*=t,i[0]=s,i[1]=o,i},approx_just_an_integer=0,approx_sine_of_rational=1,approx_sine_of_pi_times_rational=2,approx_rationalOfPi=3,approx_radicalOfRatio=4,approx_nothingUseful=5,approx_ratioOfRadical=6,approx_rationalOfE=7,approx_logarithmsOfRationals=8,approx_rationalsOfLogarithms=9,approxRationalsOfRadicals=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h;if(2!==(h=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(c=h[1].length,_=1/Math.pow(10,c),console.log("precision: "+_),e=null,l=Number.MAX_VALUE,d=0,i=(f=[2,3,5,6,7,8,10]).length;d<i;d++)for(n=f[d],a=p=1;p<=10;a=++p)s=Math.sqrt(n)/a,Math.abs(s)>1e-10?(m=r/s,u=Math.round(m),o=Math.abs(1-m/u)):(m=1,u=1,o=Math.abs(r-s)),o<2*_&&(t=simpleComplexityMeasure(u,n,a))<l&&(l=t,e=[u+" * sqrt( "+n+" ) / "+a,approx_ratioOfRadical,u,n,a]);return e},approxRadicalsOfRationals=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b;if(2!==(b=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(d=b[1].length,m=1/Math.pow(10,d),console.log("precision: "+m),e=null,c=Number.MAX_VALUE,_=0,i=(h=[1,2,3,5,6,7,8,10]).length;_<i;_++)for(n=h[_],p=0,u=(g=[1,2,3,5,6,7,8,10]).length;p<u;p++)a=g[p],s=Math.sqrt(n/a),Math.abs(s)>1e-10?(f=r/s,l=Math.round(f),o=Math.abs(1-f/l)):(f=1,l=1,o=Math.abs(r-s)),o<2*m&&(t=simpleComplexityMeasure(l,n,a))<c&&(c=t,e=[l+" * (sqrt( "+n+" / "+a+" )",approx_radicalOfRatio,l,n,a]);return e},approxRadicals=function(r){var e,t,o,s,n;return 2!==(n=r.toString().split(".")).length?[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2]:(o=n[1].length,s=1/Math.pow(10,o),console.log("precision: "+s),null!=(t=approxRationalsOfRadicals(r))?t:null!=(e=approxRadicalsOfRationals(r))?e:null)},approxLogs=function(r){var e,t,o,s,n;return 2!==(n=r.toString().split(".")).length?[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2]:(o=n[1].length,s=1/Math.pow(10,o),console.log("precision: "+s),null!=(t=approxRationalsOfLogs(r))?t:null!=(e=approxLogsOfRationals(r))?e:null)},approxRationalsOfLogs=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(2!==(m=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(l=m[1].length,d=1/Math.pow(10,l),console.log("precision: "+d),e=null,u=Number.MAX_VALUE,n=c=2;c<=5;n=++c)for(a=p=1;p<=5;a=++p)s=Math.log(n)/a,Math.abs(s)>1e-10?(_=r/s,i=Math.round(_),o=Math.abs(1-_/i)):(_=1,i=1,o=Math.abs(r-s)),1!==i&&Math.abs(Math.floor(i/a))===Math.abs(i/a)||o<2.2*d&&(t=simpleComplexityMeasure(i,n,a))<u&&(u=t,e=[i+" * log( "+n+" ) / "+a,approx_rationalsOfLogarithms,i,n,a]);return e},approxLogsOfRationals=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(2!==(m=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(l=m[1].length,d=1/Math.pow(10,l),console.log("precision: "+d),e=null,u=Number.MAX_VALUE,n=c=1;c<=5;n=++c)for(a=p=1;p<=5;a=++p)s=Math.log(n/a),Math.abs(s)>1e-10?(_=r/s,i=Math.round(_),o=Math.abs(1-_/i)):(_=1,i=1,o=Math.abs(r-s)),o<1.96*d&&(t=simpleComplexityMeasure(i,n,a))<u&&(u=t,e=[i+" * log( "+n+" / "+a+" )",approx_logarithmsOfRationals,i,n,a]);return e},approxRationalsOfPowersOfE=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(2!==(m=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(l=m[1].length,d=1/Math.pow(10,l),console.log("precision: "+d),e=null,u=Number.MAX_VALUE,n=c=1;c<=2;n=++c)for(a=p=1;p<=12;a=++p)s=Math.pow(Math.E,n)/a,Math.abs(s)>1e-10?(_=r/s,i=Math.round(_),o=Math.abs(1-_/i)):(_=1,i=1,o=Math.abs(r-s)),o<2*d&&(t=simpleComplexityMeasure(i,n,a))<u&&(u=t,e=[i+" * (e ^ "+n+" ) / "+a,approx_rationalOfE,i,n,a]);return e},approxRationalsOfPowersOfPI=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(2!==(m=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(l=m[1].length,d=1/Math.pow(10,l),console.log("precision: "+d),e=null,u=Number.MAX_VALUE,n=c=1;c<=5;n=++c)for(a=p=1;p<=12;a=++p)s=Math.pow(Math.PI,n)/a,Math.abs(s)>1e-10?(_=r/s,i=Math.round(_),o=Math.abs(1-_/i)):(_=1,i=1,o=Math.abs(r-s)),o<2*d&&(t=simpleComplexityMeasure(i,n,a))<u&&(u=t,e=[i+" * (pi ^ "+n+" ) / "+a+" )",approx_rationalOfPi,i,n,a]);return e},approxTrigonometric=function(r){var e,t,o,s,n;return 2!==(n=r.toString().split(".")).length?[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2]:(o=n[1].length,s=1/Math.pow(10,o),console.log("precision: "+s),null!=(t=approxSineOfRationals(r))?t:null!=(e=approxSineOfRationalMultiplesOfPI(r))?e:null)},approxSineOfRationals=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f;if(2!==(f=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(c=f[1].length,_=1/Math.pow(10,c),console.log("precision: "+_),e=null,l=Number.MAX_VALUE,p=d=1;d<=4;p=++d)for(i=a=1;a<=4;i=++a)s=p/i,n=Math.sin(s),Math.abs(n)>1e-10?(m=r/n,u=Math.round(m),o=Math.abs(1-m/u)):(m=1,u=1,o=Math.abs(r-n)),o<2*_&&(t=simpleComplexityMeasure(u,p,i))<l&&(l=t,e=[u+" * sin( "+p+"/"+i+" )",approx_sine_of_rational,u,p,i]);return e},approxSineOfRationalMultiplesOfPI=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f;if(2!==(f=r.toString().split(".")).length)return[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2];for(c=f[1].length,_=1/Math.pow(10,c),console.log("precision: "+_),e=null,l=Number.MAX_VALUE,p=d=1;d<=13;p=++d)for(i=a=1;a<=13;i=++a)s=p/i,n=Math.sin(Math.PI*s),Math.abs(n)>1e-10?(m=r/n,u=Math.round(m),o=Math.abs(1-m/u)):(m=1,u=1,o=Math.abs(r-n)),o<23*_&&(t=simpleComplexityMeasure(u,p,i))<l&&(l=t,e=[u+" * sin( "+p+"/"+i+" * pi )",approx_sine_of_pi_times_rational,u,p,i]);return e},approxAll=function(r){var e,t,o,s,n,p,a,i,u,l,c;return 2!==(c=r.toString().split(".")).length?[""+Math.floor(r),approx_just_an_integer,Math.floor(r),1,2]:(u=c[1].length,l=1/Math.pow(10,u),console.log("precision: "+l),i=Number.MAX_VALUE,a=0,p=null,null!=(t=approxRadicals(r))&&((a=simpleComplexityMeasure(t))<i?(console.log("better explanation by approxRadicals: "+t+" complexity: "+a),i=a,p=t):console.log("subpar explanation by approxRadicals: "+t+" complexity: "+a)),null!=(e=approxLogs(r))&&((a=simpleComplexityMeasure(e))<i?(console.log("better explanation by approxLogs: "+e+" complexity: "+a),i=a,p=e):console.log("subpar explanation by approxLogs: "+e+" complexity: "+a)),null!=(o=approxRationalsOfPowersOfE(r))&&((a=simpleComplexityMeasure(o))<i?(console.log("better explanation by approxRationalsOfPowersOfE: "+o+" complexity: "+a),i=a,p=o):console.log("subpar explanation by approxRationalsOfPowersOfE: "+o+" complexity: "+a)),null!=(s=approxRationalsOfPowersOfPI(r))&&((a=simpleComplexityMeasure(s))<i?(console.log("better explanation by approxRationalsOfPowersOfPI: "+s+" complexity: "+a),i=a,p=s):console.log("subpar explanation by approxRationalsOfPowersOfPI: "+s+" complexity: "+a)),null!=(n=approxTrigonometric(r))&&((a=simpleComplexityMeasure(n))<i?(console.log("better explanation by approxTrigonometric: "+n+" complexity: "+a),i=a,p=n):console.log("subpar explanation by approxTrigonometric: "+n+" complexity: "+a)),p)},simpleComplexityMeasure=function(r,e,t){var o;if(o=null,r instanceof Array){switch(r[1]){case approx_sine_of_pi_times_rational:o=4;break;case approx_rationalOfPi:o=Math.pow(4,Math.abs(r[3]))*Math.abs(r[2]);break;case approx_rationalOfE:o=Math.pow(3,Math.abs(r[3]))*Math.abs(r[2]);break;default:o=0}o+=Math.abs(r[2])*(Math.abs(r[3])+Math.abs(r[4]))}else o+=Math.abs(r)*(Math.abs(e)+Math.abs(t));return 1===r[2]?o-=1:o+=1,1===r[3]?o-=1:o+=1,1===r[4]?o-=1:o+=1,o<0&&(o=0),o},testApprox=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M,R,L,k,q,D,P,U,w,B,G,C,F,Y,X,W,z,Z,V,$,H,Q,j,J,K,rr,er,tr,or,sr;for(S=0,m=(P=[2,3,5,6,7,8,10]).length;S<m;S++)for(t=P[S],o=0,f=(U=[2,3,5,6,7,8,10]).length;o<f;o++)t!==(p=U[o])&&(console.log("testapproxRadicals testing: 1 * sqrt( "+t+" ) / "+p),e=t/p,rr=Math.sqrt(t)/p,z=(X=approxRadicals(rr))[2]*Math.sqrt(X[3])/X[4],Math.abs(rr-z)>1e-15&&console.log("fail testapproxRadicals: 1 * sqrt( "+t+" ) / "+p+" . obtained: "+X));for(a=0,h=(w=[2,3,5,6,7,8,10]).length;a<h;a++)for(t=w[a],c=0,g=(B=[2,3,5,6,7,8,10]).length;c<g;c++)t!==(p=B[c])&&(console.log("testapproxRadicals testing with 4 digits: 1 * sqrt( "+t+" ) / "+p),e=t/p,rr=(R=Math.sqrt(t)/p).toFixed(4),z=(X=approxRadicals(rr))[2]*Math.sqrt(X[3])/X[4],Math.abs(R-z)>1e-15&&console.log("fail testapproxRadicals with 4 digits: 1 * sqrt( "+t+" ) / "+p+" . obtained: "+X));for(E=0,b=(G=[2,3,5,6,7,8,10]).length;E<b;E++)for(t=G[E],I=0,y=(C=[2,3,5,6,7,8,10]).length;I<y;I++)t!==(p=C[I])&&(console.log("testapproxRadicals testing: 1 * sqrt( "+t+" / "+p+" )"),e=t/p,rr=Math.sqrt(t/p),null!=(X=approxRadicals(rr))&&(z=X[2]*Math.sqrt(X[3]/X[4]),X[1]===approx_radicalOfRatio&&Math.abs(rr-z)>1e-15&&console.log("fail testapproxRadicals: 1 * sqrt( "+t+" / "+p+" ) . obtained: "+X)));for(N=0,v=(F=[1,2,3,5,6,7,8,10]).length;N<v;N++)for(t=F[N],L=0,x=(Y=[1,2,3,5,6,7,8,10]).length;L<x;L++)p=Y[L],1===t&&1===p||(console.log("testapproxRadicals testing with 4 digits:: 1 * sqrt( "+t+" / "+p+" )"),e=t/p,rr=(R=Math.sqrt(t/p)).toFixed(4),z=(X=approxRadicals(rr))[2]*Math.sqrt(X[3]/X[4]),X[1]===approx_radicalOfRatio&&Math.abs(R-z)>1e-15&&console.log("fail testapproxRadicals with 4 digits:: 1 * sqrt( "+t+" / "+p+" ) . obtained: "+X));for(t=q=1;q<=5;t=++q)for(p=Z=1;Z<=5;p=++Z)console.log("testApproxAll testing: 1 * log("+t+" ) / "+p),e=t/p,rr=Math.log(t)/p,z=(X=approxAll(rr))[2]*Math.log(X[3])/X[4],Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * log("+t+" ) / "+p+" . obtained: "+X);for(t=$=1;$<=5;t=++$)for(p=Q=1;Q<=5;p=++Q)console.log("testApproxAll testing with 4 digits: 1 * log("+t+" ) / "+p),e=t/p,rr=(R=Math.log(t)/p).toFixed(4),z=(X=approxAll(rr))[2]*Math.log(X[3])/X[4],Math.abs(R-z)>1e-15&&console.log("fail testApproxAll with 4 digits: 1 * log("+t+" ) / "+p+" . obtained: "+X);for(t=J=1;J<=5;t=++J)for(p=er=1;er<=5;p=++er)console.log("testApproxAll testing: 1 * log("+t+" / "+p+" )"),e=t/p,rr=Math.log(t/p),z=(X=approxAll(rr))[2]*Math.log(X[3]/X[4]),Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * log("+t+" / "+p+" ) . obtained: "+X);for(t=or=1;or<=5;t=++or)for(p=s=1;s<=5;p=++s)console.log("testApproxAll testing with 4 digits: 1 * log("+t+" / "+p+" )"),e=t/p,rr=(R=Math.log(t/p)).toFixed(4),z=(X=approxAll(rr))[2]*Math.log(X[3]/X[4]),Math.abs(R-z)>1e-15&&console.log("fail testApproxAll with 4 digits: 1 * log("+t+" / "+p+" ) . obtained: "+X);for(t=i=1;i<=2;t=++i)for(p=d=1;d<=12;p=++d)console.log("testApproxAll testing: 1 * (e ^ "+t+" ) / "+p),e=t/p,rr=Math.pow(Math.E,t)/p,z=(X=approxAll(rr))[2]*Math.pow(Math.E,X[3])/X[4],Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * (e ^ "+t+" ) / "+p+" . obtained: "+X);for(t=A=1;A<=2;t=++A)for(p=O=1;O<=12;p=++O)console.log("approxRationalsOfPowersOfE testing with 4 digits: 1 * (e ^ "+t+" ) / "+p),e=t/p,rr=(R=Math.pow(Math.E,t)/p).toFixed(4),z=(X=approxRationalsOfPowersOfE(rr))[2]*Math.pow(Math.E,X[3])/X[4],Math.abs(R-z)>1e-15&&console.log("fail approxRationalsOfPowersOfE with 4 digits: 1 * (e ^ "+t+" ) / "+p+" . obtained: "+X);for(t=M=1;M<=2;t=++M)for(p=k=1;k<=12;p=++k)console.log("testApproxAll testing: 1 * pi ^ "+t+" / "+p),e=t/p,rr=Math.pow(Math.PI,t)/p,z=(X=approxAll(rr))[2]*Math.pow(Math.PI,X[3])/X[4],Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * pi ^ "+t+" / "+p+" ) . obtained: "+X);for(t=D=1;D<=2;t=++D)for(p=V=1;V<=12;p=++V)console.log("approxRationalsOfPowersOfPI testing with 4 digits: 1 * pi ^ "+t+" / "+p),e=t/p,rr=(R=Math.pow(Math.PI,t)/p).toFixed(4),z=(X=approxRationalsOfPowersOfPI(rr))[2]*Math.pow(Math.PI,X[3])/X[4],Math.abs(R-z)>1e-15&&console.log("fail approxRationalsOfPowersOfPI with 4 digits: 1 * pi ^ "+t+" / "+p+" ) . obtained: "+X);for(t=H=1;H<=4;t=++H)for(p=j=1;j<=4;p=++j)console.log("testApproxAll testing: 1 * sin( "+t+"/"+p+" )"),e=t/p,rr=Math.sin(e),W=(X=approxAll(rr))[3]/X[4],z=X[2]*Math.sin(W),Math.abs(rr-z)>1e-15&&console.log("fail testApproxAll: 1 * sin( "+t+"/"+p+" ) . obtained: "+X);for(t=K=1;K<=4;t=++K)for(p=tr=1;tr<=4;p=++tr)console.log("testApproxAll testing with 5 digits: 1 * sin( "+t+"/"+p+" )"),e=t/p,rr=(R=Math.sin(e)).toFixed(5),null==(X=approxAll(rr))&&console.log("fail testApproxAll with 5 digits: 1 * sin( "+t+"/"+p+" ) . obtained:  undefined "),W=X[3]/X[4],z=X[2]*Math.sin(W),(r=Math.abs(R-z))>1e-14&&console.log("fail testApproxAll with 5 digits: 1 * sin( "+t+"/"+p+" ) . obtained: "+X+" error: "+r);for(t=sr=1;sr<=4;t=++sr)for(p=n=1;n<=4;p=++n)console.log("testApproxAll testing with 4 digits: 1 * sin( "+t+"/"+p+" )"),e=t/p,rr=(R=Math.sin(e)).toFixed(4),null==(X=approxAll(rr))&&console.log("fail testApproxAll with 4 digits: 1 * sin( "+t+"/"+p+" ) . obtained:  undefined "),W=X[3]/X[4],z=X[2]*Math.sin(W),(r=Math.abs(R-z))>1e-14&&console.log("fail testApproxAll with 4 digits: 1 * sin( "+t+"/"+p+" ) . obtained: "+X+" error: "+r);for("0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0"),"0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0.0"),"0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0.00"),"0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0.000"),"0"!==approxAll(rr=0)[0]&&console.log("fail testApproxAll: 0.0000"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.0"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.00"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.000"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.0000"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.00000"),rr=Math.sqrt(2),"1 * sqrt( 2 ) / 1"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(2)"),"1 * sqrt( 2 ) / 1"!==approxAll(rr=1.41)[0]&&console.log("fail testApproxAll: 1.41"),"1 * sqrt( 2 ) / 1"!==approxRadicals(rr=1.4)[0]&&console.log("fail approxRadicals: 1.4"),"1 * log( 2 ) / 1"!==approxLogs(rr=.6)[0]&&console.log("fail approxLogs: 0.6"),"1 * log( 2 ) / 1"!==approxLogs(rr=.69)[0]&&console.log("fail approxLogs: 0.69"),"1 * log( 2 ) / 1"!==approxLogs(rr=.7)[0]&&console.log("fail approxLogs: 0.7"),"1 * log( 3 ) / 1"!==approxLogs(rr=1.09)[0]&&console.log("fail approxLogs: 1.09"),"1 * log( 3 ) / 1"!==approxAll(rr=1.09)[0]&&console.log("fail approxAll: 1.09"),"1 * log( 3 ) / 1"!==approxAll(rr=1.098)[0]&&console.log("fail approxAll: 1.098"),"1 * log( 3 ) / 1"!==approxAll(rr=1.1)[0]&&console.log("fail approxAll: 1.1"),"1 * log( 3 ) / 1"!==approxAll(rr=1.11)[0]&&console.log("fail approxAll: 1.11"),rr=Math.sqrt(3),"1 * sqrt( 3 ) / 1"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(3)"),"1"!==approxAll(rr=1)[0]&&console.log("fail testApproxAll: 1.0000"),"1 * (pi ^ 1 ) / 1 )"!==approxAll(rr=3.141592)[0]&&console.log("fail testApproxAll: 3.141592"),"10 * (pi ^ 1 ) / 1 )"!==approxAll(rr=31.41592)[0]&&console.log("fail testApproxAll: 31.41592"),"100 * (pi ^ 1 ) / 1 )"!==approxAll(rr=314.1592)[0]&&console.log("fail testApproxAll: 314.1592"),"10000000 * (pi ^ 1 ) / 1 )"!==approxAll(rr=31415926.53589793)[0]&&console.log("fail testApproxAll: 31415926.53589793"),rr=Math.sqrt(2),"2 * sin( 1/4 * pi )"!==approxTrigonometric(rr)[0]&&console.log("fail approxTrigonometric: Math.sqrt(2)"),rr=Math.sqrt(3),"2 * sin( 1/3 * pi )"!==approxTrigonometric(rr)[0]&&console.log("fail approxTrigonometric: Math.sqrt(3)"),rr=(Math.sqrt(6)-Math.sqrt(2))/4,"1 * sin( 1/12 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: (Math.sqrt(6) - Math.sqrt(2))/4"),rr=Math.sqrt(2-Math.sqrt(2))/2,"1 * sin( 1/8 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(2 - Math.sqrt(2))/2"),rr=(Math.sqrt(6)+Math.sqrt(2))/4,"1 * sin( 5/12 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: (Math.sqrt(6) + Math.sqrt(2))/4"),rr=Math.sqrt(2+Math.sqrt(3))/2,"1 * sin( 5/12 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(2 + Math.sqrt(3))/2"),rr=(Math.sqrt(5)-1)/4,"1 * sin( 1/10 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: (Math.sqrt(5) - 1)/4"),rr=Math.sqrt(10-2*Math.sqrt(5))/4,"1 * sin( 1/5 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sqrt(10 - 2*Math.sqrt(5))/4"),rr=Math.sin(Math.PI/7),"1 * sin( 1/7 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sin(Math.PI/7)"),rr=Math.sin(Math.PI/9),"1 * sin( 1/9 * pi )"!==approxAll(rr)[0]&&console.log("fail testApproxAll: Math.sin(Math.PI/9)"),"6 * (pi ^ 5 ) / 1 )"!==approxRationalsOfPowersOfPI(rr=1836.15267)[0]&&console.log("fail approxRationalsOfPowersOfPI: 1836.15267"),t=u=1;u<=13;t=++u)for(p=l=1;l<=13;p=++l)console.log("approxTrigonometric testing: 1 * sin( "+t+"/"+p+" * pi )"),e=t/p,rr=Math.sin(Math.PI*e),W=(X=approxTrigonometric(rr))[3]/X[4],z=X[2]*Math.sin(Math.PI*W),Math.abs(rr-z)>1e-15&&console.log("fail approxTrigonometric: 1 * sin( "+t+"/"+p+" * pi ) . obtained: "+X);for(t=_=1;_<=13;t=++_)for(p=T=1;T<=13;p=++T)5===t&&11===p||6===t&&11===p||(console.log("approxTrigonometric testing with 4 digits: 1 * sin( "+t+"/"+p+" * pi )"),e=t/p,rr=(R=Math.sin(Math.PI*e)).toFixed(4),W=(X=approxTrigonometric(rr))[3]/X[4],z=X[2]*Math.sin(Math.PI*W),(r=Math.abs(R-z))>1e-14&&console.log("fail approxTrigonometric with 4 digits: 1 * sin( "+t+"/"+p+" * pi ) . obtained: "+X+" error: "+r));return console.log("testApprox done")},$.approxRadicals=approxRadicals,$.approxRationalsOfLogs=approxRationalsOfLogs,$.approxAll=approxAll,$.testApprox=testApprox,Eval_arccos=function(){return push(cadr(p1)),Eval(),arccos()},arccos=function(){var r;if(r=0,save(),p1=pop(),car(p1)===symbol(COS))return push(cadr(p1)),void restore();if(isdouble(p1))return r=Math.acos(p1.d),push_double(r),void restore();if(isoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(Math.PI/4):(push_rational(1,4),push_symbol(PI),multiply()),void restore();if(isminusoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),-1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(3*Math.PI/4):(push_rational(3,4),push_symbol(PI),multiply()),void restore();if(!isrational(p1))return push_symbol(ARCCOS),push(p1),list(2),void restore();switch(push(p1),push_integer(2),multiply(),pop_integer()){case-2:evaluatingAsFloats?push_double(Math.PI):push_symbol(PI);break;case-1:evaluatingAsFloats?push_double(2*Math.PI/3):(push_rational(2,3),push_symbol(PI),multiply());break;case 0:evaluatingAsFloats?push_double(Math.PI/2):(push_rational(1,2),push_symbol(PI),multiply());break;case 1:evaluatingAsFloats?push_double(Math.PI/3):(push_rational(1,3),push_symbol(PI),multiply());break;case 2:evaluatingAsFloats?push_double(0):push(zero);break;default:push_symbol(ARCCOS),push(p1),list(2)}return restore()},Eval_arccosh=function(){return push(cadr(p1)),Eval(),arccosh()},arccosh=function(){var r;return r=0,save(),p1=pop(),car(p1)===symbol(COSH)?(push(cadr(p1)),void restore()):isdouble(p1)?((r=p1.d)<1&&stop("arccosh function argument is less than 1.0"),r=Math.log(r+Math.sqrt(r*r-1)),push_double(r),void restore()):isplusone(p1)?(push(zero),void restore()):(push_symbol(ARCCOSH),push(p1),list(2),restore())},Eval_arcsin=function(){return push(cadr(p1)),Eval(),arcsin()},arcsin=function(){var r;if(r=0,save(),p1=pop(),car(p1)===symbol(SIN))return push(cadr(p1)),void restore();if(isdouble(p1))return r=Math.asin(p1.d),push_double(r),void restore();if(isoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return push_rational(1,4),push_symbol(PI),multiply(),void restore();if(isminusoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),-1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(-Math.PI/4):(push_rational(-1,4),push_symbol(PI),multiply()),void restore();if(!isrational(p1))return push_symbol(ARCSIN),push(p1),list(2),void restore();switch(push(p1),push_integer(2),multiply(),pop_integer()){case-2:evaluatingAsFloats?push_double(-Math.PI/2):(push_rational(-1,2),push_symbol(PI),multiply());break;case-1:evaluatingAsFloats?push_double(-Math.PI/6):(push_rational(-1,6),push_symbol(PI),multiply());break;case 0:evaluatingAsFloats?push_double(0):push(zero);break;case 1:evaluatingAsFloats?push_double(Math.PI/6):(push_rational(1,6),push_symbol(PI),multiply());break;case 2:evaluatingAsFloats?push_double(Math.PI/2):(push_rational(1,2),push_symbol(PI),multiply());break;default:push_symbol(ARCSIN),push(p1),list(2)}return restore()},Eval_arcsinh=function(){return push(cadr(p1)),Eval(),arcsinh()},arcsinh=function(){var r;return r=0,save(),p1=pop(),car(p1)===symbol(SINH)?(push(cadr(p1)),void restore()):isdouble(p1)?(r=p1.d,r=Math.log(r+Math.sqrt(r*r+1)),push_double(r),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(ARCSINH),push(p1),list(2),restore())},Eval_arctan=function(){return push(cadr(p1)),Eval(),arctan()},arctan=function(){var r;return r=0,save(),p1=pop(),car(p1)===symbol(TAN)?(push(cadr(p1)),void restore()):isdouble(p1)?(r=Math.atan(p1.d),push_double(r),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):isnegative(p1)?(push(p1),negate(),arctan(),negate(),void restore()):Find(p1,symbol(SIN))&&Find(p1,symbol(COS))&&(push(p1),numerator(),p2=pop(),push(p1),denominator(),p3=pop(),car(p2)===symbol(SIN)&&car(p3)===symbol(COS)&&equal(cadr(p2),cadr(p3)))?(push(cadr(p2)),void restore()):car(p1)===symbol(POWER)&&equaln(cadr(p1),3)&&equalq(caddr(p1),-1,2)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,3)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),3)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2)?(push_rational(1,6),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):equaln(p1,1)?(push_rational(1,4),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):car(p1)===symbol(POWER)&&equaln(cadr(p1),3)&&equalq(caddr(p1),1,2)?(push_rational(1,3),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):(push_symbol(ARCTAN),push(p1),list(2),restore())},Eval_arctanh=function(){return push(cadr(p1)),Eval(),arctanh()},arctanh=function(){var r;return r=0,save(),p1=pop(),car(p1)===symbol(TANH)?(push(cadr(p1)),void restore()):isdouble(p1)?(((r=p1.d)<-1||r>1)&&stop("arctanh function argument is not in the interval [-1,1]"),r=Math.log((1+r)/(1-r))/2,push_double(r),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(ARCTANH),push(p1),list(2),restore())},DEBUG_ARG=!1,Eval_arg=function(){return push(cadr(p1)),Eval(),arg()},arg=function(){return save(),p1=pop(),push(p1),numerator(),yyarg(),push(p1),denominator(),yyarg(),subtract(),restore()},yyarg=function(){if(save(),p1=pop(),ispositivenumber(p1)||p1===symbol(PI))isdouble(p1)||evaluatingAsFloats?push_double(0):push_integer(0);else if(isnegativenumber(p1))isdouble(p1)||evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),negate();else if(issymbol(p1))push_symbol(ARG),push(p1),list(2);else if(car(p1)===symbol(POWER)&&equaln(cadr(p1),-1))evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),push(caddr(p1)),multiply();else if(car(p1)===symbol(POWER)&&cadr(p1)===symbol(E))push(caddr(p1)),imag();else if(car(p1)===symbol(POWER)&&isoneovertwo(caddr(p1)))DEBUG_ARG&&console.log("arg of a sqrt: "+p1),push(cadr(p1)),arg(),DEBUG_ARG&&console.log(" = 1/2 * "+stack[tos-1]),push(caddr(p1)),multiply();else if(car(p1)===symbol(MULTIPLY))for(push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),arg(),add(),p1=cdr(p1);else car(p1)===symbol(ADD)?(push(p1),rect(),p1=pop(),push(p1),real(),p2=pop(),push(p1),imag(),p3=pop(),isZeroAtomOrTensor(p2)?(evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),isnegative(p3)&&negate()):(push(p3),push(p2),divide(),arctan(),isnegative(p2)&&(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),isnegative(p3)?subtract():add()))):isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))?(push_symbol(ARG),push(p1),list(2)):push_integer(0);return restore()},bake=function(){var r,e,t,o,s,n;if(r=0,expanding++,save(),p1=pop(),e=ispolyexpandedform(p1,symbol(SYMBOL_S)),t=ispolyexpandedform(p1,symbol(SYMBOL_T)),o=ispolyexpandedform(p1,symbol(SYMBOL_X)),s=ispolyexpandedform(p1,symbol(SYMBOL_Y)),n=ispolyexpandedform(p1,symbol(SYMBOL_Z)),1===e&&0===t&&0===o&&0===s&&0===n)p2=symbol(SYMBOL_S),bake_poly();else if(0===e&&1===t&&0===o&&0===s&&0===n)p2=symbol(SYMBOL_T),bake_poly();else if(0===e&&0===t&&1===o&&0===s&&0===n)p2=symbol(SYMBOL_X),bake_poly();else if(0===e&&0===t&&0===o&&1===s&&0===n)p2=symbol(SYMBOL_Y),bake_poly();else if(0===e&&0===t&&0===o&&0===s&&1===n)p2=symbol(SYMBOL_Z),bake_poly();else if(iscons(p1)&&car(p1)!==symbol(FOR)){for(r=tos,push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),bake(),p1=cdr(p1);list(tos-r)}else push(p1);return restore(),expanding--},polyform=function(){var r;if(r=0,save(),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2))bake_poly();else if(iscons(p1)){for(r=tos,push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),polyform(),p1=cdr(p1);list(tos-r)}else push(p1);return restore()},bake_poly=function(){var r,e,t,o,s,n;for(t=0,r=tos,push(p1),push(p2),o=coeff(),e=tos,t=n=o-1;n>=0;t=n+=-1)p1=stack[r+t],bake_poly_term(t);return(s=tos-e)>1&&(list(s),push(symbol(ADD)),swap(),cons()),p1=pop(),moveTos(tos-o),push(p1)},bake_poly_term=function(r){var e,t;if(!isZeroAtomOrTensor(p1)){if(0!==r){if(e=tos,car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else equaln(p1,1)||push(p1);return 1===r?push(p2):(push(symbol(POWER)),push(p2),push_integer(r),list(3)),(t=tos-e)>1?(list(t),push(symbol(MULTIPLY)),swap(),cons()):void 0}if(car(p1)===symbol(ADD))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else push(p1)}},Eval_besselj=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),besselj()},besselj=function(){return save(),yybesselj(),restore()},yybesselj=function(){var r,e;if(r=0,p2=pop(),p1=pop(),push(p2),e=pop_integer(),isdouble(p1)&&!isNaN(e))return r=jn(e,p1.d),void push_double(r);if(isZeroAtomOrTensor(p1)&&isZeroAtomOrTensor(p2))push_integer(1);else{if(!isZeroAtomOrTensor(p1)||isNaN(e))return p2.k===NUM&&MEQUAL(p2.q.b,2)?MEQUAL(p2.q.a,1)?(evaluatingAsFloats?push_double(2/Math.PI):(push_integer(2),push_symbol(PI),divide()),push(p1),divide(),push_rational(1,2),power(),push(p1),sine(),void multiply()):MEQUAL(p2.q.a,-1)?(evaluatingAsFloats?push_double(2/Math.PI):(push_integer(2),push_symbol(PI),divide()),push(p1),divide(),push_rational(1,2),power(),push(p1),cosine(),void multiply()):(push_integer(MSIGN(p2.q.a)),p3=pop(),push_integer(2),push(p1),divide(),push(p2),push(p3),subtract(),multiply(),push(p1),push(p2),push(p3),subtract(),besselj(),multiply(),push(p1),push(p2),push_integer(2),push(p3),multiply(),subtract(),besselj(),void subtract()):isnegativeterm(p1)?(push(p1),negate(),push(p2),power(),push(p1),push(p2),negate(),power(),multiply(),push_symbol(BESSELJ),push(p1),negate(),push(p2),list(3),void multiply()):isnegativeterm(p2)?(push_integer(-1),push(p2),power(),push_symbol(BESSELJ),push(p1),push(p2),negate(),list(3),void multiply()):(push(symbol(BESSELJ)),push(p1),push(p2),list(3));push_integer(0)}},Eval_bessely=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),bessely()},bessely=function(){return save(),yybessely(),restore()},yybessely=function(){var r,e;return r=0,p2=pop(),p1=pop(),push(p2),e=pop_integer(),isdouble(p1)&&!isNaN(e)?(r=yn(e,p1.d),void push_double(r)):isnegativeterm(p2)?(push_integer(-1),push(p2),power(),push_symbol(BESSELY),push(p1),push(p2),negate(),list(3),void multiply()):(push_symbol(BESSELY),push(p1),push(p2),void list(3))},mint=function(r){return bigInt(r)},isSmall=function(r){return r.geq(Number.MIN_SAFE_INTEGER)&&r.leq(Number.MAX_SAFE_INTEGER)},setSignTo=function(r,e){if(r.isPositive()){if(e<0)return r.multiply(bigInt(-1))}else if(e>0)return r.multiply(bigInt(-1));return r},makeSignSameAs=function(r,e){if(r.isPositive()){if(e.isNegative())return r.multiply(bigInt(-1))}else if(e.isPositive())return r.multiply(bigInt(-1));return r},makePositive=function(r){return r.isNegative()?r.multiply(bigInt(-1)):r},add_numbers=function(){var r,e;if(r=1,e=1,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),r=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(r+e),restore();qadd()},subtract_numbers=function(){var r,e;if(r=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),r=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(r-e),restore();qsub()},multiply_numbers=function(){var r,e;if(r=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),r=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(r*e),restore();qmul()},divide_numbers=function(){var r,e;if(r=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),isZeroAtomOrTensor(p2)&&stop("divide by zero"),r=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(r/e),restore();qdiv()},invert_number=function(){var r,e;return save(),p1=pop(),isZeroAtomOrTensor(p1)&&stop("divide by zero"),isdouble(p1)?(push_double(1/p1.d),void restore()):(r=bigInt(p1.q.a),e=bigInt(p1.q.b),e=makeSignSameAs(e,r),r=setSignTo(r,1),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=r,push(p1),restore())},compare_rationals=function(r,e){var t,o;return t=mmul(r.q.a,e.q.b),o=mmul(r.q.b,e.q.a),mcmp(t,o)},compare_numbers=function(r,e){var t,o;return t=0,o=0,isrational(r)&&isrational(e)?compare_rationals(r,e):(t=isdouble(r)?r.d:convert_rational_to_double(r))<(o=isdouble(e)?e.d:convert_rational_to_double(e))?-1:t>o?1:0},negate_number=function(){if(save(),p1=pop(),isZeroAtomOrTensor(p1))return push(p1),void restore();switch(p1.k){case NUM:(p2=new U).k=NUM,p2.q.a=bigInt(p1.q.a.multiply(bigInt.minusOne)),p2.q.b=bigInt(p1.q.b),push(p2);break;case DOUBLE:push_double(-p1.d);break;default:stop("bug caught in mp_negate_number")}return restore()},bignum_truncate=function(){var r;return save(),p1=pop(),r=mdiv(p1.q.a,p1.q.b),(p1=new U).k=NUM,p1.q.a=r,p1.q.b=bigInt(1),push(p1),restore()},mp_numerator=function(){return save(),(p1=pop()).k!==NUM?(push(one),void restore()):((p2=new U).k=NUM,p2.q.a=bigInt(p1.q.a),p2.q.b=bigInt(1),push(p2),restore())},mp_denominator=function(){return save(),(p1=pop()).k!==NUM?(push(one),void restore()):((p2=new U).k=NUM,p2.q.a=bigInt(p1.q.b),p2.q.b=bigInt(1),push(p2),restore())},bignum_power_number=function(r){var e,t,o;return save(),p1=pop(),e=mpow(p1.q.a,Math.abs(r)),t=mpow(p1.q.b,Math.abs(r)),r<0&&(o=e,e=makeSignSameAs(e=t,t=o),t=setSignTo(t,1)),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=t,push(p1),restore()},convert_bignum_to_double=function(r){return r.toJSNumber()},convert_rational_to_double=function(r){var e;return r.q,(e=r.q.a.divmod(r.q.b)).quotient+e.remainder/r.q.b.toJSNumber()},push_integer=function(r){return DEBUG&&console.log("pushing integer "+r),save(),(p1=new U).k=NUM,p1.q.a=bigInt(r),p1.q.b=bigInt(1),push(p1),restore()},push_double=function(r){return save(),(p1=new U).k=DOUBLE,p1.d=r,push(p1),restore()},push_rational=function(r,e){var t;return(t=new U).k=NUM,t.q.a=bigInt(r),t.q.b=bigInt(e),push(t)},pop_integer=function(){var r;switch(r=NaN,save(),(p1=pop()).k){case NUM:isinteger(p1)&&isSmall(p1.q.a)&&(r=p1.q.a.toJSNumber());break;case DOUBLE:DEBUG&&console.log("popping integer but double is found"),Math.floor(p1.d)===p1.d&&(DEBUG&&console.log("...altough it's an integer"),r=p1.d)}return restore(),r},print_double=function(r,e){var t,o;return t="",o=doubleToReasonableString(r.d),t+print_str(1===e&&"-"===o?o+1:o)},bignum_scan_integer=function(r){var e,t,o;return save(),"+"!==(o=r[t=0])&&"-"!==o||t++,e=bigInt(r.substring(t)),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=bigInt(1),push(p1),"-"===o&&negate(),restore()},bignum_scan_float=function(r){return push_double(parseFloat(r))},print_number=function(r,e){var t,o,s;switch(o="",s="",r.k){case NUM:t=r.q.a.toString(),e||"-"===t[0]&&(t=t.substring(1)),printMode===PRINTMODE_LATEX&&isfraction(r)&&(t="\\frac{"+t+"}{"),o+=t,isfraction(r)&&(printMode!==PRINTMODE_LATEX&&(o+="/"),s=r.q.b.toString(),printMode===PRINTMODE_LATEX&&(s+="}"),o+=s);break;case DOUBLE:t=doubleToReasonableString(r.d),e||"-"===t[0]&&(t=t.substring(1)),o+=t}return o},gcd_numbers=function(){return save(),p2=pop(),p1=pop(),(p3=new U).k=NUM,p3.q.a=mgcd(p1.q.a,p2.q.a),p3.q.b=mgcd(p1.q.b,p2.q.b),p3.q.a=setSignTo(p3.q.a,1),push(p3),restore()},pop_double=function(){var r;switch(r=0,save(),(p1=pop()).k){case NUM:r=convert_rational_to_double(p1);break;case DOUBLE:r=p1.d;break;default:r=0}return restore(),r},bignum_float=function(){var r;return r=convert_rational_to_double(pop()),push_double(r)},bignum_factorial=function(r){return save(),(p1=new U).k=NUM,p1.q.a=__factorial(r),p1.q.b=bigInt(1),push(p1),restore()},__factorial=function(r){var e,t,o,s,n;if(o=0,0===r||1===r)return bigInt(1);if(e=bigInt(2),t=bigInt(0),3<=r)for(o=s=3,n=r;3<=n?s<=n:s>=n;o=3<=n?++s:--s)t=bigInt(o),e=mmul(e,t);return e},mask=[1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648],mp_set_bit=function(r,e){return console.log("not implemented yet"),r[e/32]|=mask[e%32]},mp_clr_bit=function(r,e){return console.log("not implemented yet"),r[e/32]&=~mask[e%32]},mshiftright=function(r){return r.shiftRight()},Eval_binomial=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),binomial()},binomial=function(){return save(),ybinomial(),restore()},ybinomial=function(){if(p2=pop(),p1=pop(),0!==BINOM_check_args())return push(p1),factorial(),push(p2),factorial(),divide(),push(p1),push(p2),subtract(),factorial(),divide();push(zero)},BINOM_check_args=function(){return isNumericAtom(p1)&&lessp(p1,zero)||isNumericAtom(p2)&&lessp(p2,zero)||isNumericAtom(p1)&&isNumericAtom(p2)&&lessp(p1,p2)?0:1},Eval_ceiling=function(){return push(cadr(p1)),Eval(),ceiling()},ceiling=function(){return save(),yyceiling(),restore()},yyceiling=function(){var r;return r=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(r=Math.ceil(p1.d),void push_double(r)):isinteger(p1)?void push(p1):((p3=new U).k=NUM,p3.q.a=mdiv(p1.q.a,p1.q.b),p3.q.b=mint(1),push(p3),isnegativenumber(p1)?1:(push_integer(1),add())):(push_symbol(CEILING),push(p1),void list(2))},Eval_choose=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),choose()},choose=function(){return save(),p2=pop(),p1=pop(),0===choose_check_args()?(push_integer(0),void restore()):(push(p1),factorial(),push(p2),factorial(),divide(),push(p1),push(p2),subtract(),factorial(),divide(),restore())},choose_check_args=function(){return isNumericAtom(p1)&&lessp(p1,zero)||isNumericAtom(p2)&&lessp(p2,zero)||isNumericAtom(p1)&&isNumericAtom(p2)&&lessp(p1,p2)?0:1},Eval_circexp=function(){return push(cadr(p1)),Eval(),circexp(),Eval()},circexp=function(){var r,e,t,o;if(e=0,r=0,save(),p1=pop(),car(p1)===symbol(COS))return push(cadr(p1)),expcos(),void restore();if(car(p1)===symbol(SIN))return push(cadr(p1)),expsin(),void restore();if(car(p1)===symbol(TAN))return p1=cadr(p1),push(imaginaryunit),push(p1),multiply(),exponential(),p2=pop(),push(imaginaryunit),push(p1),multiply(),negate(),exponential(),p3=pop(),push(p3),push(p2),subtract(),push(imaginaryunit),multiply(),push(p2),push(p3),add(),divide(),void restore();if(car(p1)===symbol(COSH))return p1=cadr(p1),push(p1),exponential(),push(p1),negate(),exponential(),add(),push_rational(1,2),multiply(),void restore();if(car(p1)===symbol(SINH))return p1=cadr(p1),push(p1),exponential(),push(p1),negate(),exponential(),subtract(),push_rational(1,2),multiply(),void restore();if(car(p1)===symbol(TANH))return p1=cadr(p1),push(p1),push_integer(2),multiply(),exponential(),p1=pop(),push(p1),push_integer(1),subtract(),push(p1),push_integer(1),add(),divide(),void restore();if(iscons(p1)){for(r=tos;iscons(p1);)push(car(p1)),circexp(),p1=cdr(p1);return list(tos-r),void restore()}if(p1.k===TENSOR){for(push(p1),copy_tensor(),e=t=0,o=(p1=pop()).tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)push(p1.tensor.elem[e]),circexp(),p1.tensor.elem[e]=pop();return push(p1),void restore()}return push(p1),restore()},Eval_clearall=function(){return do_clearall(),push(symbol(NIL))},do_clearall=function(){return 0===test_flag&&clear_term(),do_clearPatterns(),clear_symbols(),defn(),codeGen=!1},clearall=function(){return run("clearall")},clearRenamedVariablesToAvoidBindingToExternalScope=function(){var r,e,t,o;for(o=[],r=e=0,t=symtab.length;0<=t?e<t:e>t;r=0<=t?++e:--e)-1!==symtab[r].printname.indexOf("AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE")?(symtab[r].k=SYM,symtab[r].printname="",binding[r]=symtab[r],o.push(isSymbolReclaimable[r]=!0)):o.push(void 0);return o},Eval_clear=function(){var r,e;for(p2=cdr(p1);iscons(p2);)(e=car(p2)).k!==SYM&&stop("symbol error"),r=symtab.indexOf(e),symtab[r].k=SYM,symtab[r].printname="",binding[r]=symtab[r],isSymbolReclaimable[r]=!0,p2=cdr(p2);return push(symbol(NIL))},DEBUG_CLOCKFORM=!1,Eval_clock=function(){return push(cadr(p1)),Eval(),clockform()},clockform=function(){return save(),p1=pop(),push(p1),abs(),DEBUG_CLOCKFORM&&console.log("clockform: abs of "+p1+" : "+stack[tos-1]),push_symbol(POWER),push_integer(-1),push(p1),arg(),DEBUG_CLOCKFORM&&console.log("clockform: arg of "+p1+" : "+stack[tos-1]),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),divide(),DEBUG_CLOCKFORM&&console.log("clockform: divide : "+stack[tos-1]),list(3),DEBUG_CLOCKFORM&&console.log("clockform: power : "+stack[tos-1]),multiply(),DEBUG_CLOCKFORM&&console.log("clockform: multiply : "+stack[tos-1]),restore()},Eval_coeff=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),p3=pop(),p2=pop(),p1=pop(),p3===symbol(NIL)&&(p3=p2,p2=symbol(SYMBOL_X)),push(p1),push(p2),push(p3),power(),divide(),push(p2),filter()},coeff=function(){var r,e,t;for(save(),p2=pop(),p1=pop(),r=tos;;){if(push(p1),push(p2),push(zero),subst(),Eval(),p3=pop(),push(p3),push(p1),push(p3),subtract(),p1=pop(),equal(p1,zero))return e=tos-r,restore(),e;push(p1),push(p2),t=expanding,expanding=1,divide(),expanding=t,p1=pop()}},Eval_cofactor=function(){var r,e,t;return push(cadr(p1)),Eval(),p2=pop(),istensor(p2)&&2===p2.tensor.ndim&&p2.tensor.dim[0]===p2.tensor.dim[1]||stop("cofactor: 1st arg: square matrix expected"),t=p2.tensor.dim[0],push(caddr(p1)),Eval(),((r=pop_integer())<1||r>t)&&stop("cofactor: 2nd arg: row index expected"),push(cadddr(p1)),Eval(),((e=pop_integer())<1||e>t)&&stop("cofactor: 3rd arg: column index expected"),cofactor(p2,t,r-1,e-1)},cofactor=function(r,e,t,o){var s,n,p,a,i,u;for(s=0,p=0,s=a=0,i=e;0<=i?a<i:a>i;s=0<=i?++a:--a)for(p=n=0,u=e;0<=u?n<u:n>u;p=0<=u?++n:--n)s!==t&&p!==o&&push(r.tensor.elem[e*s+p]);if(determinant(e-1),(t+o)%2)return negate()},Eval_condense=function(){return push(cadr(p1)),Eval(),Condense()},Condense=function(){var r;return r=expanding,expanding=0,save(),yycondense(),restore(),expanding=r},yycondense=function(){if(p1=pop(),car(p1)===symbol(ADD)){for(p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);for(inverse(),p2=pop(),push(zero),p3=cdr(p1);iscons(p3);)push(p2),push(car(p3)),multiply_noexpand(),add(),p3=cdr(p3);return yyexpand(),push(p2),divide()}push(p1)},Eval_conj=function(){return push(cadr(p1)),Eval(),p1=pop(),push(p1),Find(p1,imaginaryunit)?conjugate():(polar(),conjugate(),clockform())},conjugate=function(){return push(imaginaryunit),push(imaginaryunit),negate(),subst(),Eval()},consCount=0,cons=function(){var r;return consCount++,DEBUG&&console.log("cons tos: "+tos+" # "+consCount),(r=new U).k=CONS,r.cons.cdr=pop(),r===r.cons.cdr&&console.log("something wrong p == its cdr"),r.cons.car=pop(),push(r)},Eval_contract=function(){return push(cadr(p1)),Eval(),cddr(p1)===symbol(NIL)?(push_integer(1),push_integer(2)):(push(caddr(p1)),Eval(),push(cadddr(p1)),Eval()),contract()},contract=function(){return save(),yycontract(),restore()},yycontract=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O;if(s=0,n=0,a=0,u=0,l=0,d=0,g=0,e=[],t=[],p3=pop(),p2=pop(),p1=pop(),!istensor(p1))return isZeroAtomOrTensor(p1)||stop("contract: tensor expected, 1st arg is not a tensor"),void push(zero);for(push(p2),l=pop_integer(),push(p3),d=pop_integer(),h=p1.tensor.ndim,(l<1||l>h||d<1||d>h||l===d||p1.tensor.dim[l-1]!==p1.tensor.dim[d-1])&&stop("contract: index out of range"),l--,d--,m=p1.tensor.dim[l],g=1,n=b=0,v=h;0<=v?b<v:b>v;n=0<=v?++b:--b)n!==l&&n!==d&&(g*=p1.tensor.dim[n]);for((p2=alloc_tensor(g)).tensor.ndim=h-2,a=0,n=p=0,x=h;0<=x?p<x:p>x;n=0<=x?++p:--p)n!==l&&n!==d&&(p2.tensor.dim[a++]=p1.tensor.dim[n]);for(r=p1.tensor.elem,o=p2.tensor.elem,n=i=0,E=h;0<=E?i<E:i>E;n=0<=E?++i:--i)e[n]=0,t[n]=p1.tensor.dim[n];for(n=c=0,A=g;0<=A?c<A:c>A;n=0<=A?++c:--c){for(push(zero),a=_=0,T=m;0<=T?_<T:_>T;a=0<=T?++_:--_){for(e[l]=a,e[d]=a,s=0,u=f=0,I=h;0<=I?f<I:f>I;u=0<=I?++f:--f)s=s*t[u]+e[u];push(r[s]),add()}for(o[n]=pop(),a=y=O=h-1;O<=0?y<=0:y>=0;a=O<=0?++y:--y)if(a!==l&&a!==d){if(++e[a]<t[a])break;e[a]=0}}return push(1===g?o[0]:p2)},Eval_cos=function(){return push(cadr(p1)),Eval(),cosine()},cosine=function(){return save(),p1=pop(),car(p1)===symbol(ADD)?cosine_of_angle_sum():cosine_of_angle(),restore()},cosine_of_angle_sum=function(){for(p2=cdr(p1);iscons(p2);){if(p4=car(p2),isnpi(p4))return push(p1),push(p4),subtract(),p3=pop(),push(p3),cosine(),push(p4),cosine(),multiply(),push(p3),sine(),push(p4),sine(),multiply(),void subtract();p2=cdr(p2)}return cosine_of_angle()},cosine_of_angle=function(){var r,e;if(car(p1)!==symbol(ARCCOS)){if(isdouble(p1))return r=Math.cos(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(isnegative(p1)&&(push(p1),negate(),p1=pop()),car(p1)===symbol(ARCTAN))return push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),push_rational(-1,2),void power();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(COS)),push(p1),void list(2);switch(e%360){case 90:case 270:return push_integer(0);case 60:case 300:return push_rational(1,2);case 120:case 240:return push_rational(-1,2);case 45:case 315:return push_rational(1,2),push_integer(2),push_rational(1,2),power(),multiply();case 135:case 225:return push_rational(-1,2),push_integer(2),push_rational(1,2),power(),multiply();case 30:case 330:return push_rational(1,2),push_integer(3),push_rational(1,2),power(),multiply();case 150:case 210:return push_rational(-1,2),push_integer(3),push_rational(1,2),power(),multiply();case 0:return push_integer(1);case 180:return push_integer(-1);default:return push(symbol(COS)),push(p1),list(2)}}else push(cadr(p1))},Eval_cosh=function(){return push(cadr(p1)),Eval(),ycosh()},ycosh=function(){return save(),yycosh(),restore()},yycosh=function(){var r;if(r=0,p1=pop(),car(p1)!==symbol(ARCCOSH)){if(isdouble(p1))return r=Math.cosh(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(!isZeroAtomOrTensor(p1))return push_symbol(COSH),push(p1),list(2);push(one)}else push(cadr(p1))},Eval_decomp=function(){var r;return save(),console.log("Eval_decomp is being called!!!!!!!!!!!!!!!!!!!!"),r=tos,push(symbol(NIL)),push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),decomp(!1),list(tos-r),restore()},pushTryNotToDuplicate=function(r){if(!(tos>0&&(DEBUG&&console.log("comparing "+r+" to: "+stack[tos-1]),equal(r,stack[tos-1]))))return push(r);DEBUG&&console.log("skipping "+r+" because it's already on stack ")},decomp=function(r){if(save(),p2=pop(),p1=pop(),DEBUG&&console.log("DECOMPOSING "+p1),r){if(!iscons(p1))return DEBUG&&console.log(" ground thing: "+p1),pushTryNotToDuplicate(p1),void restore()}else if(0===Find(p1,p2))return DEBUG&&console.log(" entire expression is constant"),pushTryNotToDuplicate(p1),void restore();if(isadd(p1))return decomp_sum(r),void restore();if(ismultiply(p1))return decomp_product(r),void restore();for(DEBUG&&console.log(" naive decomp"),p3=cdr(p1),DEBUG&&console.log("startig p3: "+p3);iscons(p3);)r&&push(car(p3)),DEBUG&&console.log("recursive decomposition"),push(car(p3)),DEBUG&&console.log("car(p3): "+car(p3)),push(p2),DEBUG&&console.log("p2: "+p2),decomp(r),p3=cdr(p3);return restore()},decomp_sum=function(r){var e;for(DEBUG&&console.log(" decomposing the sum "),p3=cdr(p1);iscons(p3);)(Find(car(p3),p2)||r)&&(push(car(p3)),push(p2),decomp(r)),p3=cdr(p3);for(e=tos,p3=cdr(p1);iscons(p3);)0===Find(car(p3),p2)&&pushTryNotToDuplicate(car(p3)),p3=cdr(p3);if(tos-e)return add_all(tos-e),p3=pop(),pushTryNotToDuplicate(p3),push(p3),negate()},decomp_product=function(r){var e;for(DEBUG&&console.log(" decomposing the product "),p3=cdr(p1);iscons(p3);)(Find(car(p3),p2)||r)&&(push(car(p3)),push(p2),decomp(r)),p3=cdr(p3);for(e=tos,p3=cdr(p1);iscons(p3);)0===Find(car(p3),p2)&&pushTryNotToDuplicate(car(p3)),p3=cdr(p3);if(tos-e)return multiply_all(tos-e)},define_user_function=function(){return p3=caadr(p1),p4=cdadr(p1),p5=caddr(p1),issymbol(p3)||stop("function name?"),car(p5)===symbol(EVAL)&&(push(cadr(p5)),Eval(),p5=pop()),push_symbol(FUNCTION),push(p5),push(p4),list(3),p5=pop(),set_binding(p3,p5),push_symbol(NIL)},Eval_function_reference=function(){return push(p1)},Eval_defint=function(){for(push(cadr(p1)),Eval(),p2=pop(),p1=cddr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1),Eval(),p3=pop(),push(car(p1)),p1=cdr(p1),Eval(),p4=pop(),push(car(p1)),p1=cdr(p1),Eval(),p5=pop(),push(p2),push(p3),integral(),p2=pop(),push(p2),push(p3),push(p5),subst(),Eval(),push(p2),push(p3),push(p4),subst(),Eval(),subtract(),p2=pop();return push(p2)},Eval_degree=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),degree()},degree=function(){return save(),p2=pop(),p1=pop(),p3=zero,yydegree(p1),push(p3),restore()},yydegree=function(r){var e;if(equal(r,p2)){if(isZeroAtomOrTensor(p3))return p3=one}else if(car(r)===symbol(POWER)){if(equal(cadr(r),p2)&&isNumericAtom(caddr(r))&&lessp(p3,caddr(r)))return p3=caddr(r)}else if(iscons(r)){for(r=cdr(r),e=[];iscons(r);)yydegree(car(r)),e.push(r=cdr(r));return e}},Eval_denominator=function(){return push(cadr(p1)),Eval(),denominator()},denominator=function(){var r,e;if(0,e=pop(),car(e)===symbol(ADD)&&(push(e),rationalize(),e=pop()),car(e)!==symbol(MULTIPLY)||isplusone(car(cdr(e))))return isrational(e)?(push(e),mp_denominator()):car(e)===symbol(POWER)&&isnegativeterm(caddr(e))?(push(e),reciprocate()):push(one);for(r=tos,e=cdr(e);iscons(e);)push(car(e)),denominator(),e=cdr(e);return multiply_all(tos-r)},Eval_derivative=function(){var r,e,t,o,s;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?(guess(),push(symbol(NIL))):isNumericAtom(p2)?(guess(),push(p2)):(push(p2),p1=cdr(p1),push(car(p1)),Eval()),p5=pop(),p4=pop(),p3=pop();;){if(isNumericAtom(p5)?(push(p5),e=pop_integer(),isNaN(e)&&stop("nth derivative: check n")):e=1,push(p3),e>=0)for(t=0,o=e;0<=o?t<o:t>o;0<=o?++t:--t)push(p4),derivative();else for(r=0,s=e=-e;0<=s?r<s:r>s;0<=s?++r:--r)push(p4),integral();if(p3=pop(),p5===symbol(NIL))break;if(isNumericAtom(p5)){if(p1=cdr(p1),push(car(p1)),Eval(),(p5=pop())===symbol(NIL))break;isNumericAtom(p5)||(p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop())}else p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop()}return push(p3)},derivative=function(){return save(),p2=pop(),p1=pop(),isNumericAtom(p2)&&stop("undefined function"),istensor(p1)?istensor(p2)?d_tensor_tensor():d_tensor_scalar():istensor(p2)?d_scalar_tensor():d_scalar_scalar(),restore()},d_scalar_scalar=function(){return issymbol(p2)?d_scalar_scalar_1():(push(p1),push(p2),push(symbol(SECRETX)),subst(),push(symbol(SECRETX)),derivative(),push(symbol(SECRETX)),push(p2),subst())},d_scalar_scalar_1=function(){if(equal(p1,p2))push(one);else if(iscons(p1))if(isadd(p1))dsum();else if(car(p1)!==symbol(MULTIPLY))if(car(p1)!==symbol(POWER))if(car(p1)!==symbol(DERIVATIVE))if(car(p1)!==symbol(LOG))if(car(p1)!==symbol(SIN))if(car(p1)!==symbol(COS))if(car(p1)!==symbol(TAN))if(car(p1)!==symbol(ARCSIN))if(car(p1)!==symbol(ARCCOS))if(car(p1)!==symbol(ARCTAN))if(car(p1)!==symbol(SINH))if(car(p1)!==symbol(COSH))if(car(p1)!==symbol(TANH))if(car(p1)!==symbol(ARCSINH))if(car(p1)!==symbol(ARCCOSH))if(car(p1)!==symbol(ARCTANH))if(car(p1)!==symbol(ABS))if(car(p1)!==symbol(SGN))if(car(p1)!==symbol(HERMITE))if(car(p1)!==symbol(ERF))if(car(p1)!==symbol(ERFC))if(car(p1)!==symbol(BESSELJ))if(car(p1)!==symbol(BESSELY)){if(car(p1)!==symbol(INTEGRAL)||caddr(p1)!==p2)return dfunction();derivative_of_integral()}else isZeroAtomOrTensor(caddr(p1))?dbessely0():dbesselyn();else isZeroAtomOrTensor(caddr(p1))?dbesselj0():dbesseljn();else derfc();else derf();else dhermite();else dsgn();else dabs();else darctanh();else darccosh();else darcsinh();else dtanh();else dcosh();else dsinh();else darctan();else darccos();else darcsin();else dtan();else dcos();else dsin();else dlog();else dd();else dpower();else dproduct();else push(zero)},dsum=function(){var r;for(r=tos,p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),derivative(),p1=cdr(p1);return add_all(tos-r)},dproduct=function(){var r,e,t,o,s,n,p;for(r=0,t=0,r=s=0,n=o=length(p1)-1;0<=n?s<n:s>n;r=0<=n?++s:--s){for(p3=cdr(p1),t=e=0,p=o;0<=p?e<p:e>p;t=0<=p?++e:--e)push(car(p3)),r===t&&(push(p2),derivative()),p3=cdr(p3);multiply_all(o)}return add_all(o)},dpower=function(){return push(caddr(p1)),push(cadr(p1)),divide(),push(cadr(p1)),push(p2),derivative(),multiply(),push(cadr(p1)),logarithm(),push(caddr(p1)),push(p2),derivative(),multiply(),add(),push(p1),multiply()},dlog=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),divide()},dd=function(){return push(cadr(p1)),push(p2),derivative(),p3=pop(),car(p3)===symbol(DERIVATIVE)?(push_symbol(DERIVATIVE),push_symbol(DERIVATIVE),push(cadr(p3)),lessp(caddr(p3),caddr(p1))?(push(caddr(p3)),list(3),push(caddr(p1))):(push(caddr(p1)),list(3),push(caddr(p3))),list(3)):(push(p3),push(caddr(p1)),derivative())},dfunction=function(){return(p3=cdr(p1))===symbol(NIL)||Find(p3,p2)?(push_symbol(DERIVATIVE),push(p1),push(p2),list(3)):push(zero)},dsin=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),cosine(),multiply()},dcos=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),sine(),multiply(),negate()},dtan=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),cosine(),push_integer(-2),power(),multiply()},darcsin=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),push_rational(-1,2),power(),multiply()},darccos=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),push_rational(-1,2),power(),multiply(),negate()},darctan=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),inverse(),multiply(),simplify()},dsinh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ycosh(),multiply()},dcosh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ysinh(),multiply()},dtanh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ycosh(),push_integer(-2),power(),multiply()},darcsinh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(2),power(),push_integer(1),add(),push_rational(-1,2),power(),multiply()},darccosh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(2),power(),push_integer(-1),add(),push_rational(-1,2),power(),multiply()},darctanh=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),inverse(),multiply()},dabs=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),sgn(),multiply()},dsgn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),dirac(),multiply(),push_integer(2),multiply()},dhermite=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(2),push(caddr(p1)),multiply(),multiply(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),hermite(),multiply()},derf=function(){return push(cadr(p1)),push_integer(2),power(),push_integer(-1),multiply(),exponential(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(-1,2),power(),multiply(),push_integer(2),multiply(),push(cadr(p1)),push(p2),derivative(),multiply()},derfc=function(){return push(cadr(p1)),push_integer(2),power(),push_integer(-1),multiply(),exponential(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(-1,2),power(),multiply(),push_integer(-2),multiply(),push(cadr(p1)),push(p2),derivative(),multiply()},dbesselj0=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(1),besselj(),multiply(),push_integer(-1),multiply()},dbesseljn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),besselj(),push(caddr(p1)),push_integer(-1),multiply(),push(cadr(p1)),divide(),push(cadr(p1)),push(caddr(p1)),besselj(),multiply(),add(),multiply()},dbessely0=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(1),besselj(),multiply(),push_integer(-1),multiply()},dbesselyn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),bessely(),push(caddr(p1)),push_integer(-1),multiply(),push(cadr(p1)),divide(),push(cadr(p1)),push(caddr(p1)),bessely(),multiply(),add(),multiply()},derivative_of_integral=function(){return push(cadr(p1))},DET_check_arg=function(){return istensor(p1)?2!==p1.tensor.ndim||p1.tensor.dim[0]!==p1.tensor.dim[1]?0:1:0},det=function(){var r,e,t,o,s,n,p;if(e=0,save(),p1=pop(),0===DET_check_arg())return push_symbol(DET),push(p1),list(2),void restore();for(o=p1.tensor.nelem,r=p1.tensor.elem,e=s=0,n=o;(0<=n?s<n:s>n)&&isNumericAtom(r[e]);e=0<=n?++s:--s);if(e===o)yydetg();else{for(e=t=0,p=p1.tensor.nelem;0<=p?t<p:t>p;e=0<=p?++t:--t)push(p1.tensor.elem[e]);determinant(p1.tensor.dim[0])}return restore()},determinant=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m;for(s=0,p=0,a=0,u=0,d=0,_=0,m=0,e=[],o=tos-r*r,s=i=0,l=r;0<=l?i<l:i>l;s=0<=l?++i:--i)e[s]=s,e[s+r]=0,e[s+r+r]=1;for(_=1,push(zero);;){for(push_integer(1===_?1:-1),s=n=0,c=r;0<=c?n<c:n>c;s=0<=c?++n:--n)a=r*e[s]+s,push(stack[o+a]),multiply();for(add(),p=r-1,d=0,t=!1;;)if((u=e[r+p]+e[r+r+p])<0)e[r+r+p]=-e[r+r+p],p--;else{if(u!==p+1)break;if(0===p){t=!0;break}d++,e[r+r+p]=-e[r+r+p],p--}if(t)break;m=e[p-e[r+p]+d],e[p-e[r+p]+d]=e[p-u+d],e[p-u+d]=m,e[r+p]=u,_=-_}return stack[o]=stack[tos-1],moveTos(o+1)},detg=function(){return save(),p1=pop(),0===DET_check_arg()?(push_symbol(DET),push(p1),list(2),void restore()):(yydetg(),restore())},yydetg=function(){var r,e,t,o;for(r=0,r=t=0,o=(e=p1.tensor.dim[0])*e;0<=o?t<o:t>o;r=0<=o?++t:--t)push(p1.tensor.elem[r]);return lu_decomp(e),moveTos(tos-e*e),push(p1)},M=function(r,e,t,o){return stack[r+e*t+o]},setM=function(r,e,t,o,s){return stack[r+e*t+o]=s},lu_decomp=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b;for(e=0,o=0,n=0,t=tos-r*r,p1=one,e=u=0,l=r-1;0<=l?u<l:u>l;e=0<=l?++u:--u){if(equal(M(t,r,e,e),zero)){for(o=s=c=e+1,d=r;(c<=d?s<d:s>d)&&equal(M(t,r,o,e),zero);o=c<=d?++s:--s);if(o===r){p1=zero;break}for(n=p=_=e,m=r;_<=m?p<m:p>m;n=_<=m?++p:--p)p2=M(t,r,e,n),setM(t,r,e,n,M(t,r,o,n)),setM(t,r,o,n,p2);push(p1),negate(),p1=pop()}for(push(p1),push(M(t,r,e,e)),multiply(),p1=pop(),o=a=f=e+1,h=r;f<=h?a<h:a>h;o=f<=h?++a:--a)for(push(M(t,r,o,e)),push(M(t,r,e,e)),divide(),negate(),p2=pop(),setM(t,r,o,e,zero),n=i=g=e+1,b=r;g<=b?i<b:i>b;n=g<=b?++i:--i)push(M(t,r,e,n)),push(p2),multiply(),push(M(t,r,o,n)),add(),setM(t,r,o,n,pop())}return push(p1),push(M(t,r,r-1,r-1)),multiply(),p1=pop()},Eval_dirac=function(){return push(cadr(p1)),Eval(),dirac()},dirac=function(){return save(),ydirac(),restore()},ydirac=function(){return p1=pop(),isdouble(p1)?0===p1.d?void push_integer(1):void push_integer(0):isrational(p1)?MZERO(mmul(p1.q.a,p1.q.b))?void push_integer(1):void push_integer(0):car(p1)===symbol(POWER)?(push_symbol(DIRAC),push(cadr(p1)),void list(2)):isnegativeterm(p1)?(push_symbol(DIRAC),push(p1),negate(),void list(2)):((isnegativeterm(p1)||car(p1)===symbol(ADD)&&isnegativeterm(cadr(p1)))&&(push(p1),negate(),p1=pop()),push_symbol(DIRAC),push(p1),list(2))},divisors=function(){var r,e,t,o,s,n;for(e=0,save(),r=tos-1,divisors_onstack(),t=tos-r,(n=stack.slice(r,r+t)).sort(cmp_expr),stack=stack.slice(0,r).concat(n).concat(stack.slice(r+t)),(p1=alloc_tensor(t)).tensor.ndim=1,p1.tensor.dim[0]=t,e=o=0,s=t;0<=s?o<s:o>s;e=0<=s?++o:--o)p1.tensor.elem[e]=stack[r+e];return moveTos(r),push(p1),restore()},divisors_onstack=function(){var r,e,t,o,s,n;if(e=0,save(),p1=pop(),r=tos,isNumericAtom(p1))push(p1),factor_small_number();else if(car(p1)===symbol(ADD))push(p1),__factor_add();else if(car(p1)===symbol(MULTIPLY))for(p1=cdr(p1),isNumericAtom(car(p1))&&(push(car(p1)),factor_small_number(),p1=cdr(p1));iscons(p1);)p2=car(p1),car(p2)===symbol(POWER)?(push(cadr(p2)),push(caddr(p2))):(push(p2),push(one)),p1=cdr(p1);else car(p1)===symbol(POWER)?(push(cadr(p1)),push(caddr(p1))):(push(p1),push(one));for(t=tos,push(one),gen(r,t),e=s=0,n=o=tos-t;0<=n?s<n:s>n;e=0<=n?++s:--s)stack[r+e]=stack[t+e];return moveTos(r+o),restore()},gen=function(r,e){var t,o,s,n;if(o=0,save(),p1=pop(),r===e)return push(p1),void restore();if(p2=stack[r+0],p3=stack[r+1],push(p3),t=pop_integer(),!isNaN(t))for(o=s=0,n=Math.abs(t);0<=n?s<=n:s>=n;o=0<=n?++s:--s)push(p1),push(p2),push_integer(sign(t)*o),power(),multiply(),gen(r+2,e);return restore()},__factor_add=function(){for(save(),p1=pop(),p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);if(p2=pop(),isplusone(p2))return push(p1),push(one),void restore();if(isNumericAtom(p2))push(p2),factor_small_number();else if(car(p2)===symbol(MULTIPLY))for(p3=cdr(p2),isNumericAtom(car(p3))?(push(car(p3)),factor_small_number()):(push(car(p3)),push(one)),p3=cdr(p3);iscons(p3);)push(car(p3)),push(one),p3=cdr(p3);else push(p2),push(one);for(push(p2),inverse(),p2=pop(),push(zero),p3=cdr(p1);iscons(p3);)push(p2),push(car(p3)),multiply(),add(),p3=cdr(p3);return push(one),restore()},dpow=function(){var r,e,t,o,s,n;return r=0,e=0,s=0,o=pop_double(),0===(t=pop_double())&&o<0&&stop("divide by zero"),t>=0||o%1==0?(s=Math.pow(t,o),void push_double(s)):(s=Math.pow(Math.abs(t),o),n=Math.PI*o,o%.5==0?(r=0,e=Math.sin(n)):(r=Math.cos(n),e=Math.sin(n)),push_double(r*s),push_double(e*s),push(imaginaryunit),multiply(),add())},EIG_N=0,EIG_yydd=[],EIG_yyqq=[],Eval_eigen=function(){return 0===EIG_check_arg()&&stop("eigen: argument is not a square matrix"),eigen(EIGEN),p1=usr_symbol("D"),set_binding(p1,p2),p1=usr_symbol("Q"),set_binding(p1,p3),push(symbol(NIL))},Eval_eigenval=function(){return 0===EIG_check_arg()?(push_symbol(EIGENVAL),push(p1),void list(2)):(eigen(EIGENVAL),push(p2))},Eval_eigenvec=function(){return 0===EIG_check_arg()?(push_symbol(EIGENVEC),push(p1),void list(2)):(eigen(EIGENVEC),push(p3))},EIG_check_arg=function(){var r,e,t,o,s,n,p,a,i,u,l;if(r=0,t=0,push(cadr(p1)),Eval(),yyfloat(),Eval(),p1=pop(),!istensor(p1))return 0;for(2===p1.tensor.ndim&&p1.tensor.dim[0]===p1.tensor.dim[1]||stop("eigen: argument is not a square matrix"),r=n=0,p=EIG_N=p1.tensor.dim[0];0<=p?n<p:n>p;r=0<=p?++n:--n)for(t=e=0,a=EIG_N;0<=a?e<a:e>a;t=0<=a?++e:--e)isdouble(p1.tensor.elem[EIG_N*r+t])||stop("eigen: matrix is not numerical");for(r=o=0,i=EIG_N-1;0<=i?o<i:o>i;r=0<=i?++o:--o)for(t=s=u=r+1,l=EIG_N;u<=l?s<l:s>l;t=u<=l?++s:--s)Math.abs(p1.tensor.elem[EIG_N*r+t].d-p1.tensor.elem[EIG_N*t+r].d)>1e-10&&stop("eigen: matrix is not symmetrical");return 1},eigen=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T;for(e=0,o=0,e=i=0,d=EIG_N*EIG_N;0<=d?i<d:i>d;e=0<=d?++i:--i)EIG_yydd[e]=0;for(e=t=0,_=EIG_N*EIG_N;0<=_?t<_:t>_;e=0<=_?++t:--t)EIG_yyqq[e]=0;for(e=s=0,f=EIG_N;0<=f?s<f:s>f;e=0<=f?++s:--s)for(EIG_yydd[EIG_N*e+e]=p1.tensor.elem[EIG_N*e+e].d,o=n=h=e+1,g=EIG_N;h<=g?n<g:n>g;o=h<=g?++n:--n)EIG_yydd[EIG_N*e+o]=p1.tensor.elem[EIG_N*e+o].d,EIG_yydd[EIG_N*o+e]=p1.tensor.elem[EIG_N*e+o].d;for(e=p=0,b=EIG_N;0<=b?p<b:p>b;e=0<=b?++p:--p)for(EIG_yyqq[EIG_N*e+e]=1,o=a=y=e+1,v=EIG_N;y<=v?a<v:a>v;o=y<=v?++a:--a)EIG_yyqq[EIG_N*e+o]=0,EIG_yyqq[EIG_N*o+e]=0;for(e=u=0;u<100&&0!==step();e=++u);if(100===e&&printstr("\nnote: eigen did not converge\n"),r===EIGEN||r===EIGENVAL)for(push(p1),copy_tensor(),p2=pop(),e=l=0,x=EIG_N;0<=x?l<x:l>x;e=0<=x?++l:--l)for(o=c=0,E=EIG_N;0<=E?c<E:c>E;o=0<=E?++c:--c)push_double(EIG_yydd[EIG_N*e+o]),p2.tensor.elem[EIG_N*e+o]=pop();if(r===EIGEN||r===EIGENVEC){for(push(p1),copy_tensor(),p3=pop(),A=[],e=T=0,m=EIG_N;0<=m?T<m:T>m;e=0<=m?++T:--T)A.push(function(){var r,t,s;for(t=[],o=s=0,r=EIG_N;0<=r?s<r:s>r;o=0<=r?++s:--s)push_double(EIG_yyqq[EIG_N*e+o]),t.push(p3.tensor.elem[EIG_N*e+o]=pop());return t}());return A}},step=function(){var r,e,t,o,s,n,p,a;for(e=0,o=0,r=0,e=s=0,n=EIG_N-1;0<=n?s<n:s>n;e=0<=n?++s:--s)for(o=t=p=e+1,a=EIG_N;p<=a?t<a:t>a;o=p<=a?++t:--t)0!==EIG_yydd[EIG_N*e+o]&&(step2(e,o),r++);return r},step2=function(r,e){var t,o,s,n,p,a,i,u,l,c,d,_,m;for(p=0,_=0,o=0,d=0,m=.5*(EIG_yydd[EIG_N*r+r]-EIG_yydd[EIG_N*e+e])/EIG_yydd[EIG_N*r+e],_=1/(Math.abs(m)+Math.sqrt(m*m+1)),m<0&&(_=-_),c=_*(t=1/Math.sqrt(_*_+1)),p=a=0,i=EIG_N;0<=i?a<i:a>i;p=0<=i?++a:--a)o=EIG_yydd[EIG_N*r+p],d=EIG_yydd[EIG_N*e+p],EIG_yydd[EIG_N*r+p]=t*o+c*d,EIG_yydd[EIG_N*e+p]=t*d-c*o;for(p=s=0,u=EIG_N;0<=u?s<u:s>u;p=0<=u?++s:--s)o=EIG_yydd[EIG_N*p+r],d=EIG_yydd[EIG_N*p+e],EIG_yydd[EIG_N*p+r]=t*o+c*d,EIG_yydd[EIG_N*p+e]=t*d-c*o;for(p=n=0,l=EIG_N;0<=l?n<l:n>l;p=0<=l?++n:--n)o=EIG_yyqq[EIG_N*r+p],d=EIG_yyqq[EIG_N*e+p],EIG_yyqq[EIG_N*r+p]=t*o+c*d,EIG_yyqq[EIG_N*e+p]=t*d-c*o;return EIG_yydd[EIG_N*r+e]=0,EIG_yydd[EIG_N*e+r]=0},Eval_erf=function(){return push(cadr(p1)),Eval(),yerf()},yerf=function(){return save(),yyerf(),restore()},yyerf=function(){var r;if(r=0,p1=pop(),isdouble(p1))return r=1-erfc(p1.d),void push_double(r);if(isZeroAtomOrTensor(p1))push(zero);else{if(isnegativeterm(p1))return push_symbol(ERF),push(p1),negate(),list(2),void negate();push_symbol(ERF),push(p1),list(2)}},Eval_erfc=function(){return push(cadr(p1)),Eval(),yerfc()},yerfc=function(){return save(),yyerfc(),restore()},yyerfc=function(){var r;if(r=0,p1=pop(),isdouble(p1))return r=erfc(p1.d),void push_double(r);isZeroAtomOrTensor(p1)?push(one):(push_symbol(ERFC),push(p1),list(2))},erfc=function(r){var e,t,o;return 0===r?1:(e=(t=1/(1+.5*(o=Math.abs(r))))*Math.exp(-o*o-1.26551223+t*(1.00002368+t*(.37409196+t*(.09678418+t*(t*(.27886807+t*(t*(1.48851587+t*(.17087277*t-.82215223))-1.13520398))-.18628806))))),r>=0?e:2-e)},Eval=function(){var r;switch(check_esc_flag(),save(),p1=pop(),!evaluatingAsFloats&&isfloating(p1)&&(r=!0,evaluatingAsFloats++),p1.k){case CONS:Eval_cons();break;case NUM:evaluatingAsFloats?push_double(convert_rational_to_double(p1)):push(p1);break;case DOUBLE:case STR:push(p1);break;case TENSOR:Eval_tensor();break;case SYM:Eval_sym();break;default:stop("atom?")}return r&&evaluatingAsFloats--,restore()},Eval_sym=function(){var r,e,t,o,s,n;if(iskeyword(p1))return push(p1),push(symbol(LAST)),list(2),void Eval();if(p1===symbol(PI)&&evaluatingAsFloats)push_double(Math.PI);else if(p2=get_binding(p1),DEBUG&&console.log("looked up: "+p1+" which contains: "+p2),push(p2),p1!==p2){if(-1!==(o=chainOfUserSymbolsNotFunctionsBeingEvaluated.indexOf(p1))){for(r="",e=t=s=o,n=chainOfUserSymbolsNotFunctionsBeingEvaluated.length;s<=n?t<n:t>n;e=s<=n?++t:--t)r+=chainOfUserSymbolsNotFunctionsBeingEvaluated[e].printname+" -> ";return r+=p1.printname,void stop("recursive evaluation of symbols: "+r)}return chainOfUserSymbolsNotFunctionsBeingEvaluated.push(p1),Eval(),chainOfUserSymbolsNotFunctionsBeingEvaluated.pop()}},Eval_cons=function(){var r;if(r=car(p1),car(r)!==symbol(EVAL))switch(issymbol(r)||stop("cons?"),symnum(r)){case ABS:return Eval_abs();case ADD:return Eval_add();case ADJ:return Eval_adj();case AND:return Eval_and();case ARCCOS:return Eval_arccos();case ARCCOSH:return Eval_arccosh();case ARCSIN:return Eval_arcsin();case ARCSINH:return Eval_arcsinh();case ARCTAN:return Eval_arctan();case ARCTANH:return Eval_arctanh();case ARG:return Eval_arg();case ATOMIZE:return Eval_atomize();case BESSELJ:return Eval_besselj();case BESSELY:return Eval_bessely();case BINDING:return Eval_binding();case BINOMIAL:return Eval_binomial();case CEILING:return Eval_ceiling();case CHECK:return Eval_check();case CHOOSE:return Eval_choose();case CIRCEXP:return Eval_circexp();case CLEAR:return Eval_clear();case CLEARALL:return Eval_clearall();case CLEARPATTERNS:return Eval_clearpatterns();case CLOCK:return Eval_clock();case COEFF:return Eval_coeff();case COFACTOR:return Eval_cofactor();case CONDENSE:return Eval_condense();case CONJ:return Eval_conj();case CONTRACT:return Eval_contract();case COS:return Eval_cos();case COSH:return Eval_cosh();case DECOMP:return Eval_decomp();case DEGREE:return Eval_degree();case DEFINT:return Eval_defint();case DENOMINATOR:return Eval_denominator();case DERIVATIVE:return Eval_derivative();case DET:return Eval_det();case DIM:return Eval_dim();case DIRAC:return Eval_dirac();case DIVISORS:return Eval_divisors();case DO:return Eval_do();case DOT:return Eval_inner();case DRAW:return Eval_draw();case DSOLVE:return Eval_dsolve();case EIGEN:return Eval_eigen();case EIGENVAL:return Eval_eigenval();case EIGENVEC:return Eval_eigenvec();case ERF:return Eval_erf();case ERFC:return Eval_erfc();case EVAL:return Eval_Eval();case EXP:return Eval_exp();case EXPAND:return Eval_expand();case EXPCOS:return Eval_expcos();case EXPSIN:return Eval_expsin();case FACTOR:return Eval_factor();case FACTORIAL:return Eval_factorial();case FACTORPOLY:return Eval_factorpoly();case FILTER:return Eval_filter();case FLOATF:return Eval_float();case APPROXRATIO:return Eval_approxratio();case FLOOR:return Eval_floor();case FOR:return Eval_for();case FUNCTION:return Eval_function_reference();case GAMMA:return Eval_gamma();case GCD:return Eval_gcd();case HERMITE:return Eval_hermite();case HILBERT:return Eval_hilbert();case IMAG:return Eval_imag();case INDEX:return Eval_index();case INNER:return Eval_inner();case INTEGRAL:return Eval_integral();case INV:return Eval_inv();case INVG:return Eval_invg();case ISINTEGER:return Eval_isinteger();case ISPRIME:return Eval_isprime();case LAGUERRE:return Eval_laguerre();case LCM:return Eval_lcm();case LEADING:return Eval_leading();case LEGENDRE:return Eval_legendre();case LOG:return Eval_log();case LOOKUP:return Eval_lookup();case MOD:return Eval_mod();case MULTIPLY:return Eval_multiply();case NOT:return Eval_not();case NROOTS:return Eval_nroots();case NUMBER:return Eval_number();case NUMERATOR:return Eval_numerator();case OPERATOR:return Eval_operator();case OR:return Eval_or();case OUTER:return Eval_outer();case PATTERN:return Eval_pattern();case PATTERNSINFO:return Eval_patternsinfo();case POLAR:return Eval_polar();case POWER:return Eval_power();case PRIME:return Eval_prime();case PRINT:return Eval_print();case PRINT2DASCII:return Eval_print2dascii();case PRINTFULL:return Eval_printcomputer();case PRINTLATEX:return Eval_printlatex();case PRINTLIST:return Eval_printlist();case PRINTPLAIN:return Eval_printhuman();case PRODUCT:return Eval_product();case QUOTE:return Eval_quote();case QUOTIENT:return Eval_quotient();case RANK:return Eval_rank();case RATIONALIZE:return Eval_rationalize();case REAL:return Eval_real();case ROUND:return Eval_round();case YYRECT:return Eval_rect();case ROOTS:return Eval_roots();case SETQ:return Eval_setq();case SGN:return Eval_sgn();case SILENTPATTERN:return Eval_silentpattern();case SIMPLIFY:return Eval_simplify();case SIN:return Eval_sin();case SINH:return Eval_sinh();case SHAPE:return Eval_shape();case SQRT:return Eval_sqrt();case STOP:return Eval_stop();case SUBST:return Eval_subst();case SUM:return Eval_sum();case SYMBOLSINFO:return Eval_symbolsinfo();case TAN:return Eval_tan();case TANH:return Eval_tanh();case TAYLOR:return Eval_taylor();case TEST:return Eval_test();case TESTEQ:return Eval_testeq();case TESTGE:return Eval_testge();case TESTGT:return Eval_testgt();case TESTLE:return Eval_testle();case TESTLT:return Eval_testlt();case TRANSPOSE:return Eval_transpose();case UNIT:return Eval_unit();case ZERO:return Eval_zero();default:return Eval_user_function()}else Eval_user_function()},Eval_binding=function(){return push(get_binding(cadr(p1)))},Eval_check=function(){var r;return null==(r=isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1)))?push(p1):push_integer(r)},Eval_det=function(){return push(cadr(p1)),Eval(),det()},Eval_dim=function(){var r;return push(cadr(p1)),Eval(),p2=pop(),iscons(cddr(p1))?(push(caddr(p1)),Eval(),r=pop_integer()):r=1,istensor(p2)?r<1||r>p2.tensor.ndim?push(p1):push_integer(p2.tensor.dim[r-1]):push_integer(1)},Eval_divisors=function(){return push(cadr(p1)),Eval(),divisors()},Eval_do=function(){var r;for(push(car(p1)),p1=cdr(p1),r=[];iscons(p1);)pop(),push(car(p1)),Eval(),r.push(p1=cdr(p1));return r},Eval_dsolve=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),dsolve()},Eval_Eval=function(){for(push(cadr(p1)),Eval(),p1=cddr(p1);iscons(p1);)push(car(p1)),Eval(),push(cadr(p1)),Eval(),subst(),p1=cddr(p1);return Eval()},Eval_exp=function(){return push(cadr(p1)),Eval(),exponential()},Eval_factorial=function(){return push(cadr(p1)),Eval(),factorial()},Eval_factorpoly=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),factorpoly(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),factorpoly(),r.push(p1=cdr(p1));return r},Eval_hermite=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),hermite()},Eval_hilbert=function(){return push(cadr(p1)),Eval(),hilbert()},Eval_index=function(){var r,e,t;if(r=tos,e=p1,p1=cdr(p1),push(car(p1)),Eval(),t=stack[tos-1],isNumericAtom(t)&&stop("trying to access a scalar as a tensor"),!istensor(t))return moveTos(r),void push(e);for(p1=cdr(p1);iscons(p1);){if(push(car(p1)),Eval(),!isintegerorintegerfloat(stack[tos-1]))return moveTos(r),void push(e);p1=cdr(p1)}return index_function(tos-r)},Eval_inv=function(){return push(cadr(p1)),Eval(),inv()},Eval_invg=function(){return push(cadr(p1)),Eval(),invg()},Eval_isinteger=function(){if(push(cadr(p1)),Eval(),p1=pop(),isrational(p1))isinteger(p1)?push(one):push(zero);else{if(!isdouble(p1))return push_symbol(ISINTEGER),push(p1),list(2);Math.floor(p1.d)===p1.d?push(one):push(zero)}},Eval_number=function(){return push(cadr(p1)),Eval(),(p1=pop()).k===NUM||p1.k===DOUBLE?push_integer(1):push_integer(0)},Eval_operator=function(){var r;for(r=tos,push_symbol(OPERATOR),p1=cdr(p1);iscons(p1);)push(car(p1)),Eval(),p1=cdr(p1);return list(tos-r)},Eval_quote=function(){return push(cadr(p1))},Eval_rank=function(){return push(cadr(p1)),Eval(),p1=pop(),istensor(p1)?push_integer(p1.tensor.ndim):push(zero)},Eval_setq=function(){if(caadr(p1)!==symbol(INDEX)){if(!iscons(cadr(p1)))return issymbol(cadr(p1))||stop("symbol assignment: error in symbol"),push(caddr(p1)),Eval(),p2=pop(),set_binding(cadr(p1),p2),push(symbol(NIL));define_user_function()}else setq_indexed()},setq_indexed=function(){var r;for(p4=cadadr(p1),console.log("p4: "+p4),issymbol(p4)||stop("indexed assignment: expected a symbol name"),r=tos,push(caddr(p1)),Eval(),p2=cdadr(p1);iscons(p2);)push(car(p2)),Eval(),p2=cdr(p2);return set_component(tos-r),p3=pop(),set_binding(p4,p3),push(symbol(NIL))},Eval_sqrt=function(){return push(cadr(p1)),Eval(),push_rational(1,2),power()},Eval_stop=function(){return stop("user stop")},Eval_subst=function(){return push(cadddr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadr(p1)),Eval(),subst(),Eval()},Eval_unit=function(){var r,e,t,o;if(r=0,push(cadr(p1)),Eval(),e=pop_integer(),isNaN(e))push(p1);else{if(!(e<1)){for((p1=alloc_tensor(e*e)).tensor.ndim=2,p1.tensor.dim[0]=e,p1.tensor.dim[1]=e,r=t=0,o=e;0<=o?t<o:t>o;r=0<=o?++t:--t)p1.tensor.elem[e*r+r]=one;return check_tensor_dimensions(p1),push(p1)}push(p1)}},Eval_noexpand=function(){var r;return r=expanding,expanding=0,Eval(),expanding=r},Eval_predicate=function(){return save(),p1=top(),car(p1)===symbol(SETQ)&&(pop(),push_symbol(TESTEQ),push(cadr(p1)),push(caddr(p1)),list(3)),Eval(),restore()},Eval_expand=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),expand()},expand=function(){var r;if(save(),p9=pop(),p5=pop(),istensor(p5))return expand_tensor(),void restore();if(car(p5)!==symbol(ADD))return push(p5),numerator(),p3=pop(),push(p5),denominator(),p2=pop(),remove_negative_exponents(),push(p3),push(p2),push(p9),!isone(p3)&&!isone(p2)||ispolyexpandedform(p2,p9)&&!isone(p2)?(divpoly(),p7=pop(),push(p3),push(p2),push(p7),multiply(),subtract(),p3=pop(),isZeroAtomOrTensor(p3)?(push(p7),void restore()):(push(p2),push(p9),factorpoly(),p2=pop(),expand_get_C(),expand_get_B(),expand_get_A(),istensor(p4)?(push(p4),r=expanding,expanding=1,inv(),expanding=r,push(p3),inner(),push(p2),inner()):(push(p3),push(p4),r=expanding,expanding=1,divide(),expanding=r,push(p2),multiply()),push(p7),add(),restore())):(pop(),pop(),pop(),push(p5),void restore());for(push_integer(0),p1=cdr(p5);iscons(p1);)push(car(p1)),push(p9),expand(),add(),p1=cdr(p1);restore()},expand_tensor=function(){var r,e,t;for(r=0,push(p5),copy_tensor(),r=e=0,t=(p5=pop()).tensor.nelem;0<=t?e<t:e>t;r=0<=t?++e:--e)push(p5.tensor.elem[r]),push(p9),expand(),p5.tensor.elem[r]=pop();return push(p5)},remove_negative_exponents=function(){var r,e,t,o,s,n;for(e=0,t=0,o=0,r=tos,factors(p2),factors(p3),t=0,e=s=0,n=tos-r;0<=n?s<n:s>n;e=0<=n?++s:--s)p1=stack[r+e],car(p1)===symbol(POWER)&&cadr(p1)===p9&&(push(caddr(p1)),o=pop_integer(),isNaN(o)||o<t&&(t=o));if(moveTos(r),0!==t)return push(p2),push(p9),push_integer(-t),power(),multiply(),p2=pop(),push(p3),push(p9),push_integer(-t),power(),multiply(),p3=pop()},expand_get_C=function(){var r,e,t,o,s,n,p,a,i,u;if(t=0,s=0,e=tos,car(p2)===symbol(MULTIPLY))for(p1=cdr(p2);iscons(p1);)p5=car(p1),expand_get_CF(),p1=cdr(p1);else p5=p2,expand_get_CF();if(1!=(n=tos-e)){for((p4=alloc_tensor(n*n)).tensor.ndim=2,p4.tensor.dim[0]=n,p4.tensor.dim[1]=n,r=e,t=p=0,i=n;0<=i?p<i:p>i;t=0<=i?++p:--p)for(s=o=0,u=n;0<=u?o<u:o>u;s=0<=u?++o:--o)push(stack[r+s]),push(p9),push_integer(t),power(),a=expanding,expanding=1,divide(),expanding=a,push(p9),filter(),p4.tensor.elem[n*t+s]=pop();return moveTos(tos-n)}p4=pop()},expand_get_CF=function(){var r,e,t,o,s,n,p,a;if(e=0,t=0,o=0,Find(p5,p9)){for(n=expanding,expanding=1,trivial_divide(),expanding=n,car(p5)===symbol(POWER)?(push(caddr(p5)),o=pop_integer(),p6=cadr(p5)):(o=1,p6=p5),push(p6),push(p9),degree(),r=pop_integer(),a=[],e=s=0,p=o;0<=p?s<p:s>p;e=0<=p?++s:--s)a.push(function(){var o,s,p;for(p=[],t=o=0,s=r;0<=s?o<s:o>s;t=0<=s?++o:--o)push(p8),push(p6),push_integer(e),power(),n=expanding,expanding=1,multiply(),expanding=n,push(p9),push_integer(t),power(),n=expanding,expanding=1,multiply(),p.push(expanding=n);return p}());return a}},trivial_divide=function(){var r;if(r=0,car(p2)===symbol(MULTIPLY)){for(r=tos,p0=cdr(p2);iscons(p0);)equal(car(p0),p5)||(push(car(p0)),Eval()),p0=cdr(p0);multiply_all(tos-r)}else push_integer(1);return p8=pop()},expand_get_B=function(){var r,e,t,o,s;if(r=0,istensor(p4)){for(e=p4.tensor.dim[0],(p8=alloc_tensor(e)).tensor.ndim=1,p8.tensor.dim[0]=e,r=t=0,s=e;0<=s?t<s:t>s;r=0<=s?++t:--t)push(p3),push(p9),push_integer(r),power(),o=expanding,expanding=1,divide(),expanding=o,push(p9),filter(),p8.tensor.elem[r]=pop();return p3=p8}},expand_get_A=function(){var r,e,t,o,s;if(e=0,!istensor(p4))return push(p2),reciprocate(),void(p2=pop());if(r=tos,car(p2)===symbol(MULTIPLY))for(p8=cdr(p2);iscons(p8);)p5=car(p8),expand_get_AF(),p8=cdr(p8);else p5=p2,expand_get_AF();for((p8=alloc_tensor(t=tos-r)).tensor.ndim=1,p8.tensor.dim[0]=t,e=o=0,s=t;0<=s?o<s:o>s;e=0<=s?++o:--o)p8.tensor.elem[e]=stack[r+e];return moveTos(r),p2=p8},expand_get_AF=function(){var r,e,t,o,s,n,p;if(e=0,t=0,o=1,Find(p5,p9)){for(car(p5)===symbol(POWER)&&(push(caddr(p5)),o=pop_integer(),p5=cadr(p5)),push(p5),push(p9),degree(),r=pop_integer(),p=[],e=s=n=o;n<=0?s<0:s>0;e=n<=0?++s:--s)p.push(function(){var o,s,n;for(n=[],t=o=0,s=r;0<=s?o<s:o>s;t=0<=s?++o:--o)push(p5),push_integer(e),power(),reciprocate(),push(p9),push_integer(t),power(),n.push(multiply());return n}());return p}},Eval_expcos=function(){return push(cadr(p1)),Eval(),expcos()},expcos=function(){return save(),p1=pop(),push(imaginaryunit),push(p1),multiply(),exponential(),push_rational(1,2),multiply(),push(imaginaryunit),negate(),push(p1),multiply(),exponential(),push_rational(1,2),multiply(),add(),restore()},Eval_expsin=function(){return push(cadr(p1)),Eval(),expsin()},expsin=function(){return save(),p1=pop(),push(imaginaryunit),push(p1),multiply(),exponential(),push(imaginaryunit),divide(),push_rational(1,2),multiply(),push(imaginaryunit),negate(),push(p1),multiply(),exponential(),push(imaginaryunit),divide(),push_rational(1,2),multiply(),subtract(),restore()},Eval_factor=function(){var r;for(push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),factor(),p1=cdddr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),factor_again(),r.push(p1=cdr(p1));return r},factor_again=function(){var r,e;if(save(),p2=pop(),p1=pop(),r=tos,car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),factor_term(),p1=cdr(p1);else push(p1),push(p2),factor_term();return(e=tos-r)>1&&multiply_all_noexpand(e),restore()},factor_term=function(){if(save(),factorpoly(),p1=pop(),car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else push(p1);return restore()},factor=function(){return save(),p2=pop(),p1=pop(),isinteger(p1)?(push(p1),factor_number()):(push(p1),push(p2),factorpoly()),restore()},factor_small_number=function(){var r,e,t,o,s,n;for(t=0,save(),o=pop_integer(),isNaN(o)&&stop("number too big to factor"),o<0&&(o=-o),t=s=0,n=MAXPRIMETAB;(0<=n?s<n:s>n)&&!((r=primetab[t])>o/r);t=0<=n?++s:--s){for(e=0;o%r==0;)o/=r,e++;e&&(push_integer(r),push_integer(e))}return o>1&&(push_integer(o),push_integer(1)),restore()},factorial=function(){var r;return save(),p1=pop(),push(p1),(r=pop_integer())<0||isNaN(r)?(push_symbol(FACTORIAL),push(p1),list(2),void restore()):(bignum_factorial(r),restore())},simplifyfactorials=function(){var r;if(save(),r=expanding,expanding=0,p1=pop(),car(p1)===symbol(ADD)){for(push(zero),p1=cdr(p1);iscons(p1);)push(car(p1)),simplifyfactorials(),add(),p1=cdr(p1);return expanding=r,void restore()}return car(p1)===symbol(MULTIPLY)?(sfac_product(),expanding=r,void restore()):(push(p1),expanding=r,restore())},sfac_product=function(){var r,e,t,o,s,n,p,a,i,u,l;for(r=0,t=0,s=0,l=tos,p1=cdr(p1),s=0;iscons(p1);)push(car(p1)),p1=cdr(p1),s++;for(r=n=0,p=s-1;0<=p?n<p:n>p;r=0<=p?++n:--n)if(stack[l+r]!==symbol(NIL))for(t=e=a=r+1,i=s;a<=i?e<i:e>i;t=a<=i?++e:--e)stack[l+t]!==symbol(NIL)&&sfac_product_f(l,r,t);for(push(one),r=o=0,u=s;0<=u?o<u:o>u;r=0<=u?++o:--o)stack[l+r]!==symbol(NIL)&&(push(stack[l+r]),multiply());return p1=pop(),moveTos(tos-s),push(p1)},sfac_product_f=function(r,e,t){var o,s,n,p;if(o=0,s=0,p1=stack[r+e],p2=stack[r+t],ispower(p1)?(p3=caddr(p1),p1=cadr(p1)):p3=one,ispower(p2)?(p4=caddr(p2),p2=cadr(p2)):p4=one,isfactorial(p1)&&isfactorial(p2)){if(push(p3),push(p4),add(),yyexpand(),0!==(s=pop_integer()))return;if(push(cadr(p1)),push(cadr(p2)),subtract(),yyexpand(),0===(s=pop_integer())||isNaN(s))return;for(s<0&&(s=-s,p5=p1,p1=p2,p2=p5,p5=p3,p3=p4,p4=p5),push(one),o=n=1,p=s;1<=p?n<=p:n>=p;o=1<=p?++n:--n)push(cadr(p2)),push_integer(o),add(),push(p3),power(),multiply();return stack[r+e]=pop(),stack[r+t]=symbol(NIL)}},polycoeff=0,factpoly_expo=0,factorpoly=function(){return save(),p2=pop(),p1=pop(),Find(p1,p2)&&ispolyexpandedform(p1,p2)&&issymbol(p2)?(push(p1),push(p2),yyfactorpoly(),restore()):(push(p1),void restore())},yyfactorpoly=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g;for(n=0,save(),p2=pop(),p1=pop(),s=tos,isfloating(p1)&&stop("floating point numbers in polynomial"),polycoeff=tos,push(p1),push(p2),factpoly_expo=coeff()-1,rationalize_coefficients(s),g="real",h=null;factpoly_expo>0;)if(isZeroAtomOrTensor(stack[polycoeff+0])?(push_integer(1),p4=pop(),push_integer(0),p5=pop()):"real"===g?o=get_factor_from_real_root():"complex"===g&&(t=get_factor_from_complex_root(h)),"real"===g){if(0===o){g="complex";continue}for(push(p4),push(p2),multiply(),push(p5),add(),p8=pop(),DEBUG&&console.log("success\nFACTOR="+p8),push(p7),push(p8),multiply_noexpand(),p7=pop(),yydivpoly();factpoly_expo&&isZeroAtomOrTensor(stack[polycoeff+factpoly_expo]);)factpoly_expo--;for(push(zero),n=u=0,d=factpoly_expo;0<=d?u<=d:u>=d;n=0<=d?++u:--u)push(stack[polycoeff+n]),push(p2),push_integer(n),power(),multiply(),add();h=pop()}else if("complex"===g){if(0===t)break;if(push(p4),push(p2),subtract(),push(p4),conjugate(),push(p2),subtract(),multiply(),p8=pop(),DEBUG&&console.log("success\nFACTOR="+p8),push(p7),c=pop(),push(p7),push(p8),multiply_noexpand(),p7=pop(),null==h){for(push(zero),n=p=0,_=factpoly_expo;0<=_?p<=_:p>=_;n=0<=_?++p:--p)push(stack[polycoeff+n]),push(p2),push_integer(n),power(),multiply(),add();h=pop()}if(push(e=h),push(p8),push(p2),divpoly(),h=pop(),push(h),push(p8),multiply(),r=pop(),!equal(r,e))return DEBUG&&console.log("we found a polynomial based on complex root and its conj but it doesn't divide the poly, quitting"),DEBUG&&console.log("so just returning previousFactorisation times dividend: "+c+" * "+e),push(c),push(e),l=expanding,expanding=0,yycondense(),expanding=l,multiply_noexpand(),p7=pop(),stack[s]=p7,moveTos(s+1),void restore();for(n=a=0,m=factpoly_expo;0<=m?a<=m:a>=m;n=0<=m?++a:--a)pop();push(h),push(p2),coeff(),factpoly_expo-=2}for(push(zero),n=i=0,f=factpoly_expo;0<=f?i<=f:i>=f;n=0<=f?++i:--i)push(stack[polycoeff+n]),push(p2),push_integer(n),power(),multiply(),add();return p1=pop(),DEBUG&&console.log("POLY="+p1),push(p1),l=expanding,expanding=0,yycondense(),expanding=l,p1=pop(),factpoly_expo>0&&isnegativeterm(stack[polycoeff+factpoly_expo])&&(push(p1),negate(),p1=pop(),push(p7),negate_noexpand(),p7=pop()),push(p7),push(p1),multiply_noexpand(),p7=pop(),DEBUG&&console.log("RESULT="+p7),stack[s]=p7,moveTos(s+1),restore()},rationalize_coefficients=function(r){var e,t,o,s,n,p,a;for(e=0,p7=one,e=o=s=r,n=tos;s<=n?o<n:o>n;e=s<=n?++o:--o)push(stack[e]),denominator(),push(p7),lcm(),p7=pop();for(e=t=p=r,a=tos;p<=a?t<a:t>a;e=p<=a?++t:--t)push(p7),push(stack[e]),multiply(),stack[e]=pop();if(push(p7),reciprocate(),p7=pop(),DEBUG)return console.log("rationalize_coefficients result")},get_factor_from_real_root=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g;if(o=0,DEBUG){for(push(zero),o=l=0,c=factpoly_expo;0<=c?l<=c:l>=c;o=0<=c?++l:--l)push(stack[polycoeff+o]),push(p2),push_integer(o),power(),multiply(),add();p1=pop(),console.log("POLY="+p1)}if(t=tos,e=tos,push(stack[polycoeff+factpoly_expo]),divisors_onstack(),u=tos-e,r=tos,push(stack[polycoeff+0]),divisors_onstack(),i=tos-r,DEBUG){for(console.log("divisors of base term"),o=s=0,d=i;0<=d?s<d:s>d;o=0<=d?++s:--s)console.log(", "+stack[r+o]);for(console.log("divisors of leading term"),o=n=0,_=u;0<=_?n<_:n>_;o=0<=_?++n:--n)console.log(", "+stack[e+o])}for(h=p=0,m=u;0<=m?p<m:p>m;h=0<=m?++p:--p)for(g=a=0,f=i;0<=f?a<f:a>f;g=0<=f?++a:--a){if(p4=stack[e+h],p5=stack[r+g],push(p5),push(p4),divide(),negate(),p3=pop(),Evalpoly(),DEBUG&&(console.log("try A="+p4),console.log(", B="+p5),console.log(", root "+p2),console.log("=-B/A="+p3),console.log(", POLY("+p3),console.log(")="+p6)),isZeroAtomOrTensor(p6))return moveTos(t),DEBUG&&console.log("get_factor_from_real_root returning 1"),1;if(push(p5),negate(),p5=pop(),push(p3),negate(),p3=pop(),Evalpoly(),DEBUG&&(console.log("try A="+p4),console.log(", B="+p5),console.log(", root "+p2),console.log("=-B/A="+p3),console.log(", POLY("+p3),console.log(")="+p6)),isZeroAtomOrTensor(p6))return moveTos(t),DEBUG&&console.log("get_factor_from_real_root returning 1"),1}return moveTos(t),DEBUG&&console.log("get_factor_from_real_root returning 0"),0},get_factor_from_complex_root=function(r){var e,t,o,s,n;if(factpoly_expo<=2)return DEBUG&&console.log("no more factoring via complex roots to be found in polynomial of degree <= 2"),0;if(p1=r,DEBUG&&console.log("complex root finding for POLY="+p1),e=tos,push_integer(-1),push_rational(2,3),power(),rect(),p4=pop(),DEBUG&&console.log("complex root finding: trying with "+p4),push(p4),p3=pop(),push(p3),Evalpoly(),DEBUG&&console.log("complex root finding result: "+p6),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 1"),1;if(push_integer(1),push_rational(2,3),power(),rect(),p4=pop(),DEBUG&&console.log("complex root finding: trying with "+p4),push(p4),p3=pop(),push(p3),Evalpoly(),DEBUG&&console.log("complex root finding result: "+p6),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 1"),1;for(s=o=-10;o<=10;s=++o)for(n=t=1;t<=5;n=++t)if(push_integer(s),push_integer(n),push(imaginaryunit),multiply(),add(),rect(),p4=pop(),push(p4),p3=pop(),push(p3),Evalpoly(),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("found complex root: "+p6),1;return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 0"),0},yydivpoly=function(){var r,e,t;for(r=0,p6=zero,r=e=t=factpoly_expo;t<=0?e<0:e>0;r=t<=0?++e:--e)push(stack[polycoeff+r]),stack[polycoeff+r]=p6,push(p4),divide(),p6=pop(),push(stack[polycoeff+r-1]),push(p6),push(p5),multiply(),subtract(),stack[polycoeff+r-1]=pop();if(stack[polycoeff+0]=p6,DEBUG)return console.log("yydivpoly Q:")},Evalpoly=function(){var r,e,t;for(r=0,push(zero),r=e=t=factpoly_expo;t<=0?e<=0:e>=0;r=t<=0?++e:--e)push(p3),multiply(),push(stack[polycoeff+r]),DEBUG&&(console.log("Evalpoly top of stack:"),console.log(print_list(stack[tos-r]))),add();return p6=pop()},factors=function(r){var e;if(e=tos,car(r)===symbol(ADD))for(r=cdr(r);iscons(r);)push_term_factors(car(r)),r=cdr(r);else push_term_factors(r);return tos-e},push_term_factors=function(r){var e;if(car(r)===symbol(MULTIPLY)){for(r=cdr(r),e=[];iscons(r);)push(car(r)),e.push(r=cdr(r));return e}return push(r)},Eval_filter=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),filter(),r.push(p1=cdr(p1));return r},filter=function(){return save(),p2=pop(),p1=pop(),filter_main(),restore()},filter_main=function(){return car(p1)===symbol(ADD)?filter_sum():istensor(p1)?filter_tensor():Find(p1,p2)?push_integer(0):push(p1)},filter_sum=function(){var r;for(push_integer(0),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),push(p2),filter(),add(),r.push(p1=cdr(p1));return r},filter_tensor=function(){var r,e,t,o,s,n;for(r=0,t=p1.tensor.nelem,(p3=alloc_tensor(t)).tensor.ndim=p1.tensor.ndim,r=o=0,s=p1.tensor.ndim;0<=s?o<s:o>s;r=0<=s?++o:--o)p3.tensor.dim[r]=p1.tensor.dim[r];for(r=e=0,n=t;0<=n?e<n:e>n;r=0<=n?++e:--e)push(p1.tensor.elem[r]),push(p2),filter(),p3.tensor.elem[r]=pop();return push(p3)},Eval_float=function(){return evaluatingAsFloats++,push(cadr(p1)),Eval(),yyfloat(),Eval(),evaluatingAsFloats--},checkFloatHasWorkedOutCompletely=function(r){var e,t,o,s,n;if(s=countOccurrencesOfSymbol(symbol(POWER),r),o=countOccurrencesOfSymbol(symbol(PI),r),e=countOccurrencesOfSymbol(symbol(E),r),t=countOccurrencesOfSymbol(symbol(MULTIPLY),r),n=countOccurrencesOfSymbol(symbol(ADD),r),DEBUG&&(console.log("     ... numberOfPowers: "+s),console.log("     ... numberOfPIs: "+o),console.log("     ... numberOfEs: "+e),console.log("     ... numberOfMults: "+t),console.log("     ... numberOfSums: "+n)),s>1||o>0||e>0||t>1||n>1)return stop("float: some unevalued parts in "+r)},zzfloat=function(){return save(),evaluatingAsFloats++,Eval(),yyfloat(),Eval(),evaluatingAsFloats--,restore()},yyfloat=function(){var r,e,t,o;if(e=0,r=0,evaluatingAsFloats++,save(),p1=pop(),iscons(p1)){for(r=tos;iscons(p1);)push(car(p1)),yyfloat(),p1=cdr(p1);list(tos-r)}else if(p1.k===TENSOR){for(push(p1),copy_tensor(),e=t=0,o=(p1=pop()).tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)push(p1.tensor.elem[e]),yyfloat(),p1.tensor.elem[e]=pop();push(p1)}else p1.k===NUM?(push(p1),bignum_float()):p1===symbol(PI)?push_double(Math.PI):p1===symbol(E)?push_double(Math.E):push(p1);return restore(),evaluatingAsFloats--},Eval_floor=function(){return push(cadr(p1)),Eval(),yfloor()},yfloor=function(){return save(),yyfloor(),restore()},yyfloor=function(){var r;return r=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(r=Math.floor(p1.d),void push_double(r)):isinteger(p1)?void push(p1):((p3=new U).k=NUM,p3.q.a=mdiv(p1.q.a,p1.q.b),p3.q.b=mint(1),push(p3),isnegativenumber(p1)?(push_integer(-1),add()):void 0):(push_symbol(FLOOR),push(p1),void list(2))},Eval_for=function(){var r,e,t,o,s,n,p;if(r=0,o=caddr(p1),issymbol(o)||stop("for: 2nd arg should be the variable to loop over"),push(cadddr(p1)),Eval(),e=pop_integer(),isNaN(e))push(p1);else{if(push(caddddr(p1)),Eval(),t=pop_integer(),!isNaN(t)){for(p4=get_binding(o),r=s=n=e,p=t;n<=p?s<=p:s>=p;r=n<=p?++s:--s)push_integer(r),p5=pop(),set_binding(o,p5),push(cadr(p1)),Eval(),pop();return set_binding(o,p4),push_symbol(NIL)}push(p1)}},Eval_gamma=function(){return push(cadr(p1)),Eval(),gamma()},gamma=function(){return save(),gammaf(),restore()},gammaf=function(){return p1=pop(),isrational(p1)&&MEQUAL(p1.q.a,1)&&MEQUAL(p1.q.b,2)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(1,2),void power()):isrational(p1)&&MEQUAL(p1.q.a,3)&&MEQUAL(p1.q.b,2)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(1,2),power(),push_rational(1,2),void multiply()):isnegativeterm(p1)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_integer(-1),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push(p1),multiply(),sine(),push(p1),multiply(),push(p1),negate(),gamma(),multiply(),void divide()):void(car(p1)!==symbol(ADD)?(push_symbol(GAMMA),push(p1),list(2)):gamma_of_sum())},gamma_of_sum=function(){return p3=cdr(p1),isrational(car(p3))&&MEQUAL(car(p3).q.a,1)&&MEQUAL(car(p3).q.b,1)?(push(cadr(p3)),push(cadr(p3)),gamma(),multiply()):isrational(car(p3))&&MEQUAL(car(p3).q.a,-1)&&MEQUAL(car(p3).q.b,1)?(push(cadr(p3)),gamma(),push(cadr(p3)),push_integer(-1),add(),divide()):(push_symbol(GAMMA),push(p1),void list(2))},Eval_gcd=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),gcd(),r.push(p1=cdr(p1));return r},gcd=function(){var r;return r=expanding,save(),gcd_main(),restore(),expanding=r},gcd_main=function(){var r;if(expanding=1,p2=pop(),p1=pop(),equal(p1,p2))push(p1);else{if(isrational(p1)&&isrational(p2))return push(p1),push(p2),void gcd_numbers();if(r=areunivarpolysfactoredorexpandedform(p1,p2))gcd_polys(r);else if(car(p1)!==symbol(ADD)||car(p2)!==symbol(ADD))if(car(p1)===symbol(ADD)&&(gcd_sum(p1),p1=pop()),car(p2)===symbol(ADD)&&(gcd_sum(p2),p2=pop()),car(p1)!==symbol(MULTIPLY))if(car(p2)!==symbol(MULTIPLY)){if(car(p1)!==symbol(MULTIPLY)||car(p2)!==symbol(MULTIPLY))return gcd_powers_with_same_base();gcd_product_product()}else gcd_product_sum();else gcd_sum_product();else gcd_sum_sum()}},areunivarpolysfactoredorexpandedform=function(r,e){var t;return!(!(t=isunivarpolyfactoredorexpandedform(r))||!isunivarpolyfactoredorexpandedform(e,t))&&t},gcd_polys=function(r){if(push(p1),push(r),factorpoly(),p1=pop(),push(p2),push(r),factorpoly(),p2=pop(),DEBUG&&console.log("factored polys:"),DEBUG&&console.log("p1:"+p1.toString()),DEBUG&&console.log("p2:"+p2.toString()),car(p1)!==symbol(MULTIPLY)&&car(p2)!==symbol(MULTIPLY)||(car(p1)!==symbol(MULTIPLY)&&(push_symbol(MULTIPLY),push(p1),push(one),list(3),p1=pop()),car(p2)!==symbol(MULTIPLY)&&(push_symbol(MULTIPLY),push(p2),push(one),list(3),p2=pop())),car(p1)!==symbol(MULTIPLY)||car(p2)!==symbol(MULTIPLY))return gcd_powers_with_same_base(),!0;gcd_product_product()},gcd_product_product=function(){var r;for(push(one),p3=cdr(p1),r=[];iscons(p3);){for(p4=cdr(p2);iscons(p4);)push(car(p3)),push(car(p4)),gcd(),multiply(),p4=cdr(p4);r.push(p3=cdr(p3))}return r},gcd_powers_with_same_base=function(){if(car(p1)===symbol(POWER)?(p3=caddr(p1),p1=cadr(p1)):p3=one,car(p2)===symbol(POWER)?(p4=caddr(p2),p2=cadr(p2)):p4=one,equal(p1,p2)){if(isNumericAtom(p3)&&isNumericAtom(p4))return push(p1),lessp(p3,p4)?push(p3):push(p4),void power();if(push(p3),push(p4),divide(),p5=pop(),isNumericAtom(p5))return push(p1),p5=car(p3)===symbol(MULTIPLY)&&isNumericAtom(cadr(p3))?cadr(p3):one,p6=car(p4)===symbol(MULTIPLY)&&isNumericAtom(cadr(p4))?cadr(p4):one,lessp(p5,p6)?push(p3):push(p4),void power();if(push(p3),push(p4),subtract(),p5=pop(),isNumericAtom(p5))return push(p1),isnegativenumber(p5)?push(p3):push(p4),power();push(one)}else push(one)},gcd_sum_sum=function(){if(length(p1)===length(p2)){for(p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);for(p3=pop(),p4=cdr(p2),push(car(p4)),p4=cdr(p4);iscons(p4);)push(car(p4)),gcd(),p4=cdr(p4);return p4=pop(),push(p1),push(p3),divide(),p5=pop(),push(p2),push(p4),divide(),p6=pop(),equal(p5,p6)?(push(p5),push(p3),push(p4),gcd(),multiply()):push(one)}push(one)},gcd_sum=function(r){var e;for(r=cdr(r),push(car(r)),r=cdr(r),e=[];iscons(r);)push(car(r)),gcd(),e.push(r=cdr(r));return e},gcd_sum_product=function(){var r;for(push(one),p3=cdr(p1),r=[];iscons(p3);)push(car(p3)),push(p2),gcd(),multiply(),r.push(p3=cdr(p3));return r},gcd_product_sum=function(){var r;for(push(one),p4=cdr(p2),r=[];iscons(p4);)push(p1),push(car(p4)),gcd(),multiply(),r.push(p4=cdr(p4));return r},guess=function(){var r;return r=pop(),push(r),Find(r,symbol(SYMBOL_X))?push_symbol(SYMBOL_X):Find(r,symbol(SYMBOL_Y))?push_symbol(SYMBOL_Y):Find(r,symbol(SYMBOL_Z))?push_symbol(SYMBOL_Z):Find(r,symbol(SYMBOL_T))?push_symbol(SYMBOL_T):Find(r,symbol(SYMBOL_S))?push_symbol(SYMBOL_S):push_symbol(SYMBOL_X)},hermite=function(){return save(),yyhermite(),restore()},yyhermite=function(){var r;return p2=pop(),p1=pop(),push(p2),(r=pop_integer())<0||isNaN(r)?(push_symbol(HERMITE),push(p1),push(p2),void list(3)):issymbol(p1)?yyhermite2(r):(p3=p1,p1=symbol(SECRETX),yyhermite2(r),p1=p3,push(symbol(SECRETX)),push(p1),subst(),Eval())},yyhermite2=function(r){var e,t,o,s;for(e=0,push_integer(1),push_integer(0),p4=pop(),s=[],e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)p5=p4,p4=pop(),push(p1),push(p4),multiply(),push_integer(e),push(p5),multiply(),subtract(),push_integer(2),s.push(multiply());return s},hilbert=function(){var r,e,t,o,s,n,p;if(r=0,t=0,save(),p2=pop(),push(p2),(o=pop_integer())<2)return push_symbol(HILBERT),push(p2),list(2),void restore();for(push_zero_matrix(o,o),p1=pop(),r=s=0,n=o;0<=n?s<n:s>n;r=0<=n?++s:--s)for(t=e=0,p=o;0<=p?e<p:e>p;t=0<=p?++e:--e)push_integer(r+t+1),inverse(),p1.tensor.elem[r*o+t]=pop();return push(p1),restore()},DEBUG_IMAG=!1,Eval_imag=function(){return push(cadr(p1)),Eval(),imag()},imag=function(){return save(),rect(),p1=pop(),DEBUG_IMAG&&console.log("IMAGE of "+p1),push(p1),push(p1),conjugate(),DEBUG_IMAG&&console.log(" image: conjugate result: "+stack[tos-1]),subtract(),push_integer(2),divide(),DEBUG_IMAG&&console.log(" image: 1st divide result: "+stack[tos-1]),push(imaginaryunit),divide(),DEBUG_IMAG&&console.log(" image: 2nd divide result: "+stack[tos-1]),restore()},index_function=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v;for(e=0,s=0,u=0,v=0,save(),(p=r-1)>(i=(p1=stack[y=tos-r]).tensor.ndim)&&stop("too many indices for tensor"),s=0,e=l=0,c=p;0<=c?l<c:l>c;e=0<=c?++l:--l)push(stack[y+e+1]),((v=pop_integer())<1||v>p1.tensor.dim[e])&&stop("index out of range"),s=s*p1.tensor.dim[e]+v-1;if(i===p)return moveTos(tos-r),push(p1.tensor.elem[s]),void restore();for(e=t=d=p,_=i;d<=_?t<_:t>_;e=d<=_?++t:--t)s=s*p1.tensor.dim[e]+0;for(u=1,e=o=m=p,f=i;m<=f?o<f:o>f;e=m<=f?++o:--o)u*=p1.tensor.dim[e];for((p2=alloc_tensor(u)).tensor.ndim=i-p,e=n=h=p,g=i;h<=g?n<g:n>g;e=h<=g?++n:--n)p2.tensor.dim[e-p]=p1.tensor.dim[e];for(e=a=0,b=u;0<=b?a<b:a>b;e=0<=b?++a:--a)p2.tensor.elem[e]=p1.tensor.elem[s+e];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),moveTos(tos-r),push(p2),restore()},set_component=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y;for(e=0,s=0,y=0,save(),r<3&&stop("error in indexed assign"),p2=stack[b=tos-r],p1=stack[b+1],istensor(p1)||stop("error in indexed assign: assigning to something that is not a tensor"),(p=r-2)>(u=p1.tensor.ndim)&&stop("error in indexed assign"),s=0,e=l=0,c=p;0<=c?l<c:l>c;e=0<=c?++l:--l)push(stack[b+e+2]),((y=pop_integer())<1||y>p1.tensor.dim[e])&&stop("error in indexed assign\n"),s=s*p1.tensor.dim[e]+y-1;for(e=t=d=p,_=u;d<=_?t<_:t>_;e=d<=_?++t:--t)s=s*p1.tensor.dim[e]+0;for((p3=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,e=o=0,m=p1.tensor.ndim;0<=m?o<m:o>m;e=0<=m?++o:--o)p3.tensor.dim[e]=p1.tensor.dim[e];for(e=n=0,f=p1.tensor.nelem;0<=f?n<f:n>f;e=0<=f?++n:--n)p3.tensor.elem[e]=p1.tensor.elem[e];if(check_tensor_dimensions(p1),check_tensor_dimensions(p3),p1=p3,u===p)return istensor(p2)&&stop("error in indexed assign"),p1.tensor.elem[s]=p2,check_tensor_dimensions(p1),moveTos(tos-r),push(p1),void restore();for(istensor(p2)||stop("error in indexed assign"),u-p!==p2.tensor.ndim&&stop("error in indexed assign"),e=a=0,h=p2.tensor.ndim;0<=h?a<h:a>h;e=0<=h?++a:--a)p1.tensor.dim[p+e]!==p2.tensor.dim[e]&&stop("error in indexed assign");for(e=i=0,g=p2.tensor.nelem;0<=g?i<g:i>g;e=0<=g?++i:--i)p1.tensor.elem[s+e]=p2.tensor.elem[e];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),moveTos(tos-r),push(p1),restore()},Eval_inner=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f;for((f=[]).push(car(cdr(p1))),car(cdr(cdr(p1)))===symbol(NIL)&&stop("pattern needs at least a template and a transformed version"),n=cdr(cdr(p1));n!==symbol(NIL);)f.push(car(n)),n=cdr(n);if(f.length>2){for(push_symbol(INNER),push(f[f.length-2]),push(f[f.length-1]),list(3),e=p=2,i=f.length;2<=i?p<i:p>i;e=2<=i?++p:--p)push_symbol(INNER),swap(),push(f[f.length-e-1]),swap(),list(3);return p1=pop(),void Eval_inner()}for(get_innerprod_factors(p1,a=[]),d=[],e=t=0,u=a.length;0<=u?t<u:t>u;e=0<=u?++t:--t)a[e]!==symbol(SYMBOL_IDENTITY_MATRIX)&&d.push(a[e]);if(a=d,d=[],a.length>1){for(m=0,e=o=0,l=a.length;(0<=l?o<l:o>l)&&e+m+1<=a.length-1&&(isNumericAtomOrTensor(a[e+m])||isNumericAtomOrTensor(a[e+m+1])?d.push(a[e+m]):(push(a[e+m]),Eval(),inv(),push(a[e+m+1]),Eval(),subtract(),r=pop(),isZeroAtomOrTensor(r)?m+=1:d.push(a[e+m])),e+m===a.length-2&&d.push(a[a.length-1]),!(e+m>=a.length-1));e=0<=l?++o:--o);a=d}if(push(symbol(INNER)),!(a.length>0))return pop(),void push(symbol(SYMBOL_IDENTITY_MATRIX));for(e=s=0,c=a.length;0<=c?s<c:s>c;e=0<=c?++s:--s)push(a[e]);for(list(a.length+1),p1=pop(),p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),_=[];iscons(p1);)push(car(p1)),Eval(),inner(),_.push(p1=cdr(p1));return _},inner=function(){var r,e,t,o;if(save(),p2=pop(),p1=pop(),isnegativeterm(p2)&&isnegativeterm(p1)&&(push(p2),negate(),p2=pop(),push(p1),negate(),p1=pop()),isinnerordot(p1)&&(r=car(cdr(p1)),e=car(cdr(cdr(p1))),t=p2,p1=r,push(e),push(t),inner(),p2=pop()),p1===symbol(SYMBOL_IDENTITY_MATRIX))return push(p2),void restore();if(p2===symbol(SYMBOL_IDENTITY_MATRIX))return push(p1),void restore();if(istensor(p1)&&istensor(p2))inner_f();else{if(!isNumericAtomOrTensor(p1)&&!isNumericAtomOrTensor(p2)&&(push(p1),push(p2),inv(),subtract(),o=pop(),isZeroAtomOrTensor(o)))return push_symbol(SYMBOL_IDENTITY_MATRIX),void restore();if(expanding&&isadd(p1)){for(p1=cdr(p1),push(zero);iscons(p1);)push(car(p1)),push(p2),inner(),add(),p1=cdr(p1);return void restore()}if(expanding&&isadd(p2)){for(p2=cdr(p2),push(zero);iscons(p2);)push(p1),push(car(p2)),inner(),add(),p2=cdr(p2);return void restore()}if(push(p1),push(p2),istensor(p1)&&isNumericAtom(p2))tensor_times_scalar();else if(isNumericAtom(p1)&&istensor(p2))scalar_times_tensor();else{if(!isNumericAtom(p1)&&!isNumericAtom(p2))return pop(),pop(),push_symbol(INNER),push(p1),push(p2),list(3),void restore();multiply()}}return restore()},inner_f=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A;for(n=0,(d=p1.tensor.dim[p1.tensor.ndim-1])!==p2.tensor.dim[0]&&stop("inner: tensor dimension check"),(m=p1.tensor.ndim+p2.tensor.ndim-2)>MAXDIM&&stop("inner: rank of result exceeds maximum"),r=p1.tensor.elem,t=p2.tensor.elem,e=1,n=f=0,g=p1.tensor.ndim-1;0<=g?f<g:f>g;n=0<=g?++f:--f)e*=p1.tensor.dim[n];for(o=1,n=p=1,b=p2.tensor.ndim;1<=b?p<b:p>b;n=1<=b?++p:--p)o*=p2.tensor.dim[n];for(s=(p3=alloc_tensor(e*o)).tensor.elem,n=i=0,y=e;0<=y?i<y:i>y;n=0<=y?++i:--i)for(a=l=0,v=d;0<=v?l<v:l>v;a=0<=v?++l:--l)if(!isZeroAtomOrTensor(r[n*d+a]))for(u=c=0,x=o;0<=x?c<x:c>x;u=0<=x?++c:--c)push(r[n*d+a]),push(t[a*o+u]),multiply(),push(s[n*o+u]),add(),s[n*o+u]=pop();if(0===m)return push(p3.tensor.elem[0]);for(p3.tensor.ndim=m,a=0,n=_=0,E=p1.tensor.ndim-1;0<=E?_<E:_>E;n=0<=E?++_:--_)p3.tensor.dim[n]=p1.tensor.dim[n];for(a=p1.tensor.ndim-1,n=h=0,A=p2.tensor.ndim-1;0<=A?h<A:h>A;n=0<=A?++h:--h)p3.tensor.dim[a+n]=p2.tensor.dim[n+1];return push(p3)},get_innerprod_factors=function(r,e){if(iscons(r)){if(cdr(r)!==symbol(NIL))return isinnerordot(r)?(get_innerprod_factors(car(cdr(r)),e),void get_innerprod_factors(cdr(cdr(r)),e)):add_factor_to_accumulator(r,e);r=get_innerprod_factors(car(r),e)}else add_factor_to_accumulator(r,e)},add_factor_to_accumulator=function(r,e){if(r!==symbol(NIL))return e.push(r)},itab=["f(a,a*x)","f(1/x,log(x))","f(x^a,x^(a+1)/(a+1))","f(x^(-2),-x^(-1))","f(x^(-1/2),2*x^(1/2))","f(x^(1/2),2/3*x^(3/2))","f(x,x^2/2)","f(x^2,x^3/3)","f(exp(a*x),1/a*exp(a*x))","f(exp(a*x+b),1/a*exp(a*x+b))","f(x*exp(a*x^2),exp(a*x^2)/(2*a))","f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))","f(log(a*x),x*log(a*x)-x)","f(a^x,a^x/log(a),or(not(number(a)),a>0))","f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))","f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))","f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))","f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))","f(1/(a+b*x),1/b*log(a+b*x))","f(1/(a+b*x)^2,-1/(b*(a+b*x)))","f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)","f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)","f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))","f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))","f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))","f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))","f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))","f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))","f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))","f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))","f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))","f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))","f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))","f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))","f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))","f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))","f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))","f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))","f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))","f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))","f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))","f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))","f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))","f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))","f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))","f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)","f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)","f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))","f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))","f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)","f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)","f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)","f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))","f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))","f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))","f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))","f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))","f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))","f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))","f(x/sqrt(x^2+a),sqrt(x^2+a))","f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))","f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))","f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))","f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))","f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))","f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))","f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))","f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))","f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))","f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))","f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))","f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)","f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))","f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))","f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))","f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))","f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))","f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))","f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))","f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))","f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))","f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))","f(x/sqrt(a-x^2),-sqrt(a-x^2))","f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))","f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))","f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))","f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))","f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))","f(sin(a*x),-cos(a*x)/a)","f(cos(a*x),sin(a*x)/a)","f(tan(a*x),-log(cos(a*x))/a)","f(1/tan(a*x),log(sin(a*x))/a)","f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)","f(1/sin(a*x),log(tan(a*x/2))/a)","f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))","f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))","f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))","f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))","f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))","f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))","f(1/sin(a*x)^2,-1/(a*tan(a*x)))","f(1/cos(a*x)^2,tan(a*x)/a)","f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))","f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)","f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))","f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)","f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))","f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)","f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)","f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)","f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))","f(sin(a+b*x),-cos(a+b*x)/b)","f(cos(a+b*x),sin(a+b*x)/b)","f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)","f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)","f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)","f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)","f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)","f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)","f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)","f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)","f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)","f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)","f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)","f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)","f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)","f(x*log(a*x),x^2*log(a*x)/2-x^2/4)","f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)","f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)","f(1/x*1/(a+log(x)),log(a+log(x)))","f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)","f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)","f(sinh(x),cosh(x))","f(cosh(x),sinh(x))","f(tanh(x),log(cosh(x)))","f(x*sinh(x),x*cosh(x)-sinh(x))","f(x*cosh(x),x*sinh(x)-cosh(x))","f(sinh(x)^2,sinh(2*x)/4-x/2)","f(tanh(x)^2,x-tanh(x))","f(cosh(x)^2,sinh(2*x)/4+x/2)","f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)","f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)","f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)","f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))","f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)","f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)","f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)","f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))","f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))","f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))","f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))","f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))","f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))",0],Eval_integral=function(){var r,e,t,o,s;for(e=0,p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?(guess(),push(symbol(NIL))):isNumericAtom(p2)?(guess(),push(p2)):(push(p2),p1=cdr(p1),push(car(p1)),Eval()),p5=pop(),p4=pop(),p3=pop();;){if(isNumericAtom(p5)?(push(p5),e=pop_integer(),isNaN(e)&&stop("nth integral: check n")):e=1,push(p3),e>=0)for(t=0,o=e;0<=o?t<o:t>o;0<=o?++t:--t)push(p4),integral();else for(r=0,s=e=-e;0<=s?r<s:r>s;0<=s?++r:--r)push(p4),derivative();if(p3=pop(),p5===symbol(NIL))break;if(isNumericAtom(p5)){if(p1=cdr(p1),push(car(p1)),Eval(),(p5=pop())===symbol(NIL))break;isNumericAtom(p5)||(p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop())}else p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop()}return push(p3)},integral=function(){return save(),p2=pop(),p1=pop(),car(p1)===symbol(ADD)?integral_of_sum():car(p1)===symbol(MULTIPLY)?integral_of_product():integral_of_form(),p1=pop(),Find(p1,symbol(INTEGRAL))&&stop("integral: sorry, could not find a solution"),push(p1),simplify(),Eval(),restore()},integral_of_sum=function(){var r;for(p1=cdr(p1),push(car(p1)),push(p2),integral(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),push(p2),integral(),add(),r.push(p1=cdr(p1));return r},integral_of_product=function(){return push(p1),push(p2),partition(),p1=pop(),integral_of_form(),multiply()},integral_of_form=function(){var r,e;return r=italu_hashcode(p1,p2).toFixed(6),(e=hashed_itab[r])?(push(p1),push(p2),transform(e,!1),(p3=pop())===symbol(NIL)?(push_symbol(INTEGRAL),push(p1),push(p2),list(3)):push(p3)):(push_symbol(INTEGRAL),push(p1),push(p2),void list(3))},hashcode_values={x:.95532,constexp:1.43762,constant:1.1441659362941434,constbase:1.2036412230421882,sin:1.7330548251830322,arcsin:1.6483368529465805,cos:1.0586721236863401,arccos:1.8405225918106694,tan:1.1224943776292506,arctan:1.1297397925394963,sinh:1.8176164926060079,cosh:1.9404934661708022,tanh:1.6421307715103122,log:1.477443701354924,erf:1.0825269225702916},italu_hashcode=function(r,e){var t;if(issymbol(r))return equal(r,e)?hashcode_values.x:hashcode_values.constant;if(iscons(r))switch(symnum(car(r))){case ADD:return hash_addition(cdr(r),e);case MULTIPLY:return hash_multiplication(cdr(r),e);case POWER:return hash_power(cadr(r),caddr(r),e);case EXP:return hash_power(symbol(E),cadr(r),e);case SQRT:return push_double(.5),t=pop(),hash_power(cadr(r),t,e);default:return hash_function(r,e)}return hashcode_values.constant},hash_function=function(r,e){var t,o,s;if(!Find(cadr(r),e))return hashcode_values.constant;if(s=car(r),t=italu_hashcode(cadr(r),e),!(o=hashcode_values[s.printname]))throw new Error("Unsupported function "+s.printname);return Math.pow(o,t)},hash_addition=function(r,e){var t,o,s,n;for(n={};iscons(r);)s=car(r),r=cdr(r),n[(Find(s,e)?italu_hashcode(s,e):hashcode_values.constant).toFixed(6)]=!0;for(t in o=0,n)hasProp.call(n,t)&&(n[t],o+=parseFloat(t,10));return o},hash_multiplication=function(r,e){var t,o;for(t=1;iscons(r);)o=car(r),r=cdr(r),Find(o,e)&&(t*=italu_hashcode(o,e));return t},hash_power=function(r,e,t){var o,s;if(o=hashcode_values.constant,s=hashcode_values.constexp,Find(r,t)&&(o=italu_hashcode(r,t)),Find(e,t))s=italu_hashcode(e,t);else{if(o===hashcode_values.constant)return hashcode_values.constant;isminusone(e)?s=-1:isoneovertwo(e)?s=.5:isminusoneovertwo(e)?s=-.5:equalq(e,2,1)?s=2:equalq(e,-2,1)&&(s=-2)}return Math.pow(o,s)},make_hashed_itab=function(){var r,e,t,o,s,n,p;for(n={},o=0,t=itab.length;o<t&&(s=itab[o]);o++)scan_meta(s),r=pop(),p=cadr(r),n[e=italu_hashcode(p,symbol(METAX)).toFixed(6)]||(n[e]=[]),n[e].push(s);return console.log("hashed_itab = "+JSON.stringify(n,null,2)),n},$.make_hashed_itab=make_hashed_itab,hashed_itab={1.144166:["f(a,a*x)"],"1.046770":["f(1/x,log(x))"],"0.936400":["f(x^a,x^(a+1)/(a+1))"],1.095727:["f(x^(-2),-x^(-1))"],1.023118:["f(x^(-1/2),2*x^(1/2))"],.977405:["f(x^(1/2),2/3*x^(3/2))"],"0.955320":["f(x,x^2/2)"],.912636:["f(x^2,x^3/3)"],1.137302:["f(exp(a*x),1/a*exp(a*x))","f(a^x,a^x/log(a),or(not(number(a)),a>0))"],1.326774:["f(exp(a*x+b),1/a*exp(a*x+b))"],1.080259:["f(x*exp(a*x^2),exp(a*x^2)/(2*a))"],1.260228:["f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))"],1.451902:["f(log(a*x),x*log(a*x)-x)"],.486192:["f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))","f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))","f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))","f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))"],.697274:["f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))","f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))","f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))"],.476307:["f(1/(a+b*x),1/b*log(a+b*x))"],.226868:["f(1/(a+b*x)^2,-1/(b*(a+b*x)))"],2.904531:["f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)"],.455026:["f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)"],.216732:["f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))"],.434695:["f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))"],.207048:["f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))"],2.650781:["f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))"],.498584:["f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))"],.237479:["f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))"],3.040375:["f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))"],.521902:["f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))"],.446014:["f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))"],.248586:["f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))"],.464469:["f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))"],.443716:["f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))"],.236382:["f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))"],.508931:["f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))"],.532733:["f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))"],.480638:["f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))"],.438648:["f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))"],.459164:["f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))","f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))"],"0.450070":["f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))"],"1.448960":["f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))"],1.384221:["f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)"],1.322374:["f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)"],1.516728:["f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))"],1.587665:["f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))"],"0.690150":["f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)"],.659314:["f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)"],.629856:["f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)"],.722428:["f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))","f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))"],.756216:["f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))"],1.434156:["f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))","f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))"],.729886:["f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))","f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))"],"1.501230":["f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))","f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))"],"0.666120":["f(x/sqrt(x^2+a),sqrt(x^2+a))","f(x/sqrt(a-x^2),-sqrt(a-x^2))"],1.370077:["f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))","f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))"],1.730087:["f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))","f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))"],.578006:["f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))"],"0.552180":["f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))"],1.652787:["f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))"],1.308862:["f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))","f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))"],1.342944:["f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))","f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))","f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))"],.636358:["f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))","f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))"],.652928:["f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))","f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))","f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))"],.764022:["f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)","f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))"],"1.578940":["f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))","f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))"],1.620055:["f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))","f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))"],.332117:["f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))","f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))"],1.571443:["f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))"],1.690994:["f(sin(a*x),-cos(a*x)/a)"],1.055979:["f(cos(a*x),sin(a*x)/a)"],1.116714:["f(tan(a*x),-log(cos(a*x))/a)"],.895484:["f(1/tan(a*x),log(sin(a*x))/a)"],.946989:["f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)"],.591368:["f(1/sin(a*x),log(tan(a*x/2))/a)"],2.859462:["f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))"],"2.128050":["f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))","f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))"],1.115091:["f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))"],1.081452:["f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))","f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))"],.349716:["f(1/sin(a*x)^2,-1/(a*tan(a*x)))"],.896788:["f(1/cos(a*x)^2,tan(a*x)/a)"],1.785654:["f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))"],"3.188560":["f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)"],1.516463:["f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))"],2.707879:["f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)"],.369293:["f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))"],.560019:["f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)"],.530332:["f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)"],.331177:["f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)"],.313621:["f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))"],3.172365:["f(sin(a+b*x),-cos(a+b*x)/b)"],1.127162:["f(cos(a+b*x),sin(a+b*x)/b)"],.352714:["f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)","f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)","f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)"],.454515:["f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)","f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)","f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)"],1.615441:["f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)"],1.543263:["f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)"],1.008798:["f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)"],.963724:["f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)"],1.611938:["f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)"],1.791033:["f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)"],1.123599:["f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)"],1.387031:["f(x*log(a*x),x^2*log(a*x)/2-x^2/4)"],1.325058:["f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)"],2.108018:["f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)"],.403214:["f(1/x*1/(a+log(x)),log(a+log(x)))"],2.269268:["f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)"],2.486498:["f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)"],1.769733:["f(sinh(x),cosh(x))"],1.883858:["f(cosh(x),sinh(x))"],"1.606140":["f(tanh(x),log(cosh(x)))"],1.690661:["f(x*sinh(x),x*cosh(x)-sinh(x))"],1.799688:["f(x*cosh(x),x*sinh(x)-cosh(x))"],3.131954:["f(sinh(x)^2,sinh(2*x)/4-x/2)"],2.579685:["f(tanh(x)^2,x-tanh(x))"],3.548923:["f(cosh(x)^2,sinh(2*x)/4+x/2)"],1.058866:["f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)"],"1.235270":["f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)"],1.130783:["f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)"],1.078698:["f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))"],"2.573650":["f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)","f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)"],2.640666:["f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)"],1.086487:["f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))"],1.267493:["f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))"],1.037943:["f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))"],1.210862:["f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))"],"1.064970":["f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))"],1.242392:["f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))"]},INV_check_arg=function(){return istensor(p1)?2!==p1.tensor.ndim||p1.tensor.dim[0]!==p1.tensor.dim[1]?0:1:0},inv=function(){var r,e,t,o;if(save(),p1=pop(),isinv(p1))return push(car(cdr(p1))),void restore();if(isidentitymatrix(p1))return push(p1),void restore();if(!expanding||!isinnerordot(p1))return 0===INV_check_arg()?(push_symbol(INV),push(p1),list(2),void restore()):(isNumericAtomOrTensor(p1)?yyinvg():(push(p1),adj(),push(p1),det(),p2=pop(),isZeroAtomOrTensor(p2)&&stop("inverse of singular matrix"),push(p2),divide()),restore());for(p1=cdr(p1),r=[];iscons(p1);)r.push(car(p1)),p1=cdr(p1);for(e=t=o=r.length-1;o<=0?t<=0:t>=0;e=o<=0?++t:--t)push(r[e]),inv(),e!==r.length-1&&inner();restore()},invg=function(){return save(),p1=pop(),0===INV_check_arg()?(push_symbol(INVG),push(p1),list(2),void restore()):(yyinvg(),restore())},yyinvg=function(){var r,e,t,o,s,n,p,a,i,u,l,c;for(e=0,o=0,p=p1.tensor.dim[0],r=tos,e=a=0,i=p;0<=i?a<i:a>i;e=0<=i?++a:--a)for(o=t=0,u=p;0<=u?t<u:t>u;o=0<=u?++t:--t)push(e===o?one:zero);for(e=s=0,l=p*p;0<=l?s<l:s>l;e=0<=l?++s:--s)push(p1.tensor.elem[e]);for(INV_decomp(p),(p1=alloc_tensor(p*p)).tensor.ndim=2,p1.tensor.dim[0]=p,p1.tensor.dim[1]=p,e=n=0,c=p*p;0<=c?n<c:n>c;e=0<=c?++n:--n)p1.tensor.elem[e]=stack[r+e];return moveTos(tos-2*p*p),push(p1)},INV_decomp=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f;for(t=0,o=0,n=0,f=(e=tos-r*r)-r*r,m=[],t=i=0,u=r;0<=u?i<u:i>u;t=0<=u?++i:--i){if(equal(stack[e+r*t+t],zero)){for(o=s=l=t+1,c=r;(l<=c?s<c:s>c)&&equal(stack[e+r*o+t],zero);o=l<=c?++s:--s);for(o===r&&stop("inverse of singular matrix"),n=p=0,d=r;0<=d?p<d:p>d;n=0<=d?++p:--p)p2=stack[e+r*t+n],stack[e+r*t+n]=stack[e+r*o+n],stack[e+r*o+n]=p2,p2=stack[f+r*t+n],stack[f+r*t+n]=stack[f+r*o+n],stack[f+r*o+n]=p2}for(p2=stack[e+r*t+t],n=a=0,_=r;0<=_?a<_:a>_;n=0<=_?++a:--a)n>t&&(push(stack[e+r*t+n]),push(p2),divide(),stack[e+r*t+n]=pop()),push(stack[f+r*t+n]),push(p2),divide(),stack[f+r*t+n]=pop();m.push(function(){var s,p,a;for(a=[],o=s=0,p=r;0<=p?s<p:s>p;o=0<=p?++s:--s)o!==t&&(p2=stack[e+r*o+t],a.push(function(){var s,p,a;for(a=[],n=s=0,p=r;0<=p?s<p:s>p;n=0<=p?++s:--s)n>t&&(push(stack[e+r*o+n]),push(stack[e+r*t+n]),push(p2),multiply(),subtract(),stack[e+r*o+n]=pop()),push(stack[f+r*o+n]),push(stack[f+r*t+n]),push(p2),multiply(),subtract(),a.push(stack[f+r*o+n]=pop());return a}()));return a}())}return m},DEBUG_IS=!1,isZeroAtom=function(r){switch(r.k){case NUM:if(MZERO(r.q.a))return 1;break;case DOUBLE:if(0===r.d)return 1}return 0},isZeroTensor=function(r){var e,t,o;if(r.k!==TENSOR)return 0;for(e=t=0,o=r.tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)if(!isZeroAtomOrTensor(r.tensor.elem[e]))return 0;return 1},isZeroAtomOrTensor=function(r){return isZeroAtom(r)||isZeroTensor(r)},isZeroLikeOrNonZeroLikeOrUndetermined=function(r){var e;if(push(r),Eval_predicate(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1;if(push(e),zzfloat(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1;if(Find(e,imaginaryunit)){if(push(e),absValFloat(),Eval_predicate(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1}return null},isnegativenumber=function(r){switch(r.k){case NUM:if(-1===MSIGN(r.q.a))return 1;break;case DOUBLE:if(r.d<0)return 1}return 0},ispositivenumber=function(r){switch(r.k){case NUM:if(1===MSIGN(r.q.a))return 1;break;case DOUBLE:if(r.d>0)return 1}return 0},isplustwo=function(r){switch(r.k){case NUM:if(MEQUAL(r.q.a,2)&&MEQUAL(r.q.b,1))return 1;break;case DOUBLE:if(2===r.d)return 1}return 0},isplusone=function(r){switch(r.k){case NUM:if(MEQUAL(r.q.a,1)&&MEQUAL(r.q.b,1))return 1;break;case DOUBLE:if(1===r.d)return 1}return 0},isminusone=function(r){switch(r.k){case NUM:if(MEQUAL(r.q.a,-1)&&MEQUAL(r.q.b,1))return 1;break;case DOUBLE:if(-1===r.d)return 1}return 0},isone=function(r){return isplusone(r)||isminusone(r)},isinteger=function(r){return r.k===NUM&&MEQUAL(r.q.b,1)?1:0},isintegerorintegerfloat=function(r){return r.k===DOUBLE?r.d===Math.round(r.d)?1:0:isinteger(r)},isnonnegativeinteger=function(r){return isrational(r)&&MEQUAL(r.q.b,1)&&1===MSIGN(r.q.a)?1:0},isposint=function(r){return isinteger(r)&&1===MSIGN(r.q.a)?1:0},isunivarpolyfactoredorexpandedform=function(r,e){return null==e&&(push(r),guess(),e=pop(),pop()),ispolyfactoredorexpandedform(r,e)&&Find(r,symbol(SYMBOL_X))+Find(r,symbol(SYMBOL_Y))+Find(r,symbol(SYMBOL_Z))===1?e:0},ispolyfactoredorexpandedform=function(r,e){return ispolyfactoredorexpandedform_factor(r,e)},ispolyfactoredorexpandedform_factor=function(r,e){if(car(r)===symbol(MULTIPLY)){for(r=cdr(r);iscons(r);){if(DEBUG&&console.log("ispolyfactoredorexpandedform_factor testing "+car(r)),!ispolyfactoredorexpandedform_power(car(r),e))return DEBUG&&console.log("... tested negative:"+car(r)),0;r=cdr(r)}return 1}return ispolyfactoredorexpandedform_power(r,e)},ispolyfactoredorexpandedform_power=function(r,e){return car(r)===symbol(POWER)?(DEBUG&&console.log("ispolyfactoredorexpandedform_power (isposint(caddr(p)) "+(isposint(caddr(r)),DEBUG?console.log("ispolyfactoredorexpandedform_power ispolyexpandedform_expr(cadr(p), x)) "+ispolyexpandedform_expr(cadr(r),e)):void 0)),isposint(caddr(r))&&ispolyexpandedform_expr(cadr(r),e)):(DEBUG&&console.log("ispolyfactoredorexpandedform_power not a power, testing if this is exp form: "+r),ispolyexpandedform_expr(r,e))},ispolyexpandedform=function(r,e){return Find(r,e)?ispolyexpandedform_expr(r,e):0},ispolyexpandedform_expr=function(r,e){if(car(r)===symbol(ADD)){for(r=cdr(r);iscons(r);){if(!ispolyexpandedform_term(car(r),e))return 0;r=cdr(r)}return 1}return ispolyexpandedform_term(r,e)},ispolyexpandedform_term=function(r,e){if(car(r)===symbol(MULTIPLY)){for(r=cdr(r);iscons(r);){if(!ispolyexpandedform_factor(car(r),e))return 0;r=cdr(r)}return 1}return ispolyexpandedform_factor(r,e)},ispolyexpandedform_factor=function(r,e){return equal(r,e)?1:car(r)===symbol(POWER)&&equal(cadr(r),e)?isposint(caddr(r))?1:0:Find(r,e)?0:1},isnegativeterm=function(r){return isnegativenumber(r)||car(r)===symbol(MULTIPLY)&&isnegativenumber(cadr(r))?1:0},hasNegativeRationalExponent=function(r){return car(r)===symbol(POWER)&&isrational(car(cdr(cdr(r))))&&isnegativenumber(car(cdr(r)))?(DEBUG_IS&&console.log("hasNegativeRationalExponent: "+r.toString()+" has imaginary component"),1):(DEBUG_IS&&console.log("hasNegativeRationalExponent: "+r.toString()+" has NO imaginary component"),0)},isimaginarynumberdouble=function(r){return car(r)===symbol(MULTIPLY)&&3===length(r)&&isdouble(cadr(r))&&hasNegativeRationalExponent(caddr(r))||equal(r,imaginaryunit)?1:0},isimaginarynumber=function(r){return car(r)===symbol(MULTIPLY)&&3===length(r)&&isNumericAtom(cadr(r))&&equal(caddr(r),imaginaryunit)||equal(r,imaginaryunit)||hasNegativeRationalExponent(caddr(r))?(DEBUG_IS&&console.log("isimaginarynumber: "+r.toString()+" is imaginary number"),1):(DEBUG_IS&&console.log("isimaginarynumber: "+r.toString()+" isn't an imaginary number"),0)},iscomplexnumberdouble=function(r){return car(r)===symbol(ADD)&&3===length(r)&&isdouble(cadr(r))&&isimaginarynumberdouble(caddr(r))||isimaginarynumberdouble(r)?1:0},iscomplexnumber=function(r){return car(r)===symbol(ADD)&&3===length(r)&&isNumericAtom(cadr(r))&&isimaginarynumber(caddr(r))||isimaginarynumber(r)?(DEBUG&&console.log("iscomplexnumber: "+r.toString()+" is imaginary number"),1):(DEBUG&&console.log("iscomplexnumber: "+r.toString()+" is imaginary number"),0)},iseveninteger=function(r){return isinteger(r)&&r.q.a.isEven()?1:0},isnegative=function(r){return car(r)===symbol(ADD)&&isnegativeterm(cadr(r))||isnegativeterm(r)?1:0},issymbolic=function(r){if(issymbol(r))return 1;for(;iscons(r);){if(issymbolic(car(r)))return 1;r=cdr(r)}return 0},isintegerfactor=function(r){return isinteger(r)||car(r)===symbol(POWER)&&isinteger(cadr(r))&&isinteger(caddr(r))?1:0},isNumberOneOverSomething=function(r){return isfraction(r)&&MEQUAL(r.q.a.abs(),1)?1:0},isoneover=function(r){return car(r)===symbol(POWER)&&isminusone(caddr(r))?1:0},isfraction=function(r){return r.k!==NUM||MEQUAL(r.q.b,1)?0:1},equaln=function(r,e){switch(r.k){case NUM:if(MEQUAL(r.q.a,e)&&MEQUAL(r.q.b,1))return 1;break;case DOUBLE:if(r.d===e)return 1}return 0},equalq=function(r,e,t){switch(r.k){case NUM:if(MEQUAL(r.q.a,e)&&MEQUAL(r.q.b,t))return 1;break;case DOUBLE:if(r.d===e/t)return 1}return 0},isoneovertwo=function(r){return equalq(r,1,2)?1:0},isminusoneovertwo=function(r){return equalq(r,-1,2)?1:0},isoneoversqrttwo=function(r){return car(r)===symbol(POWER)&&equaln(cadr(r),2)&&equalq(caddr(r),-1,2)?1:0},isminusoneoversqrttwo=function(r){return car(r)===symbol(MULTIPLY)&&equaln(cadr(r),-1)&&isoneoversqrttwo(caddr(r))&&3===length(r)?1:0},isfloating=function(r){if(r.k===DOUBLE||r===symbol(FLOATF))return 1;for(;iscons(r);){if(isfloating(car(r)))return 1;r=cdr(r)}return 0},isimaginaryunit=function(r){return equal(r,imaginaryunit)?1:0},isquarterturn=function(r){var e,t;if(t=0,e=0,car(r)!==symbol(MULTIPLY))return 0;if(equal(cadr(r),imaginaryunit))return caddr(r)!==symbol(PI)||3!==length(r)?0:2;if(!isNumericAtom(cadr(r)))return 0;if(!equal(caddr(r),imaginaryunit))return 0;if(cadddr(r)!==symbol(PI))return 0;if(4!==length(r))return 0;if(push(cadr(r)),push_integer(2),multiply(),t=pop_integer(),isNaN(t))return 0;switch(t<1&&(e=1,t=-t),t%4){case 0:t=1;break;case 1:t=e?4:3;break;case 2:t=2;break;case 3:t=e?3:4}return t},isnpi=function(r){var e;return e=0,r===symbol(PI)?2:car(r)===symbol(MULTIPLY)&&isNumericAtom(cadr(r))&&caddr(r)===symbol(PI)&&3===length(r)?(push(cadr(r)),push_integer(2),multiply(),e=pop_integer(),isNaN(e)?0:e=e<0?4- -e%4:1+(e-1)%4):0},$.isZeroAtomOrTensor=isZeroAtomOrTensor,$.isnegativenumber=isnegativenumber,$.isplusone=isplusone,$.isminusone=isminusone,$.isinteger=isinteger,$.isnonnegativeinteger=isnonnegativeinteger,$.isposint=isposint,$.isnegativeterm=isnegativeterm,$.isimaginarynumber=isimaginarynumber,$.iscomplexnumber=iscomplexnumber,$.iseveninteger=iseveninteger,$.isnegative=isnegative,$.issymbolic=issymbolic,$.isintegerfactor=isintegerfactor,$.isoneover=isoneover,$.isfraction=isfraction,$.isoneoversqrttwo=isoneoversqrttwo,$.isminusoneoversqrttwo=isminusoneoversqrttwo,$.isfloating=isfloating,$.isimaginaryunit=isimaginaryunit,$.isquarterturn=isquarterturn,$.isnpi=isnpi,Eval_isprime=function(){return push(cadr(p1)),Eval(),p1=pop(),isnonnegativeinteger(p1)&&mprime(p1.q.a)?push_integer(1):push_integer(0)},Eval_laguerre=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),laguerre()},laguerre=function(){var r;return save(),p3=pop(),p2=pop(),p1=pop(),push(p2),(r=pop_integer())<0||isNaN(r)?(push_symbol(LAGUERRE),push(p1),push(p2),push(p3),list(4),void restore()):(issymbol(p1)?laguerre2(r):(p4=p1,p1=symbol(SECRETX),laguerre2(r),p1=p4,push(symbol(SECRETX)),push(p1),subst(),Eval()),restore())},laguerre2=function(r){var e,t,o,s;for(e=0,push_integer(1),push_integer(0),p6=pop(),s=[],e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)p5=p6,p6=pop(),push_integer(2*e+1),push(p1),subtract(),push(p3),add(),push(p6),multiply(),push_integer(e),push(p3),add(),push(p5),multiply(),subtract(),push_integer(e+1),s.push(divide());return s},Eval_lcm=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),lcm(),r.push(p1=cdr(p1));return r},lcm=function(){var r;return r=expanding,save(),yylcm(),restore(),expanding=r},yylcm=function(){return expanding=1,p2=pop(),p1=pop(),push(p1),push(p2),gcd(),push(p1),divide(),push(p2),divide(),inverse()},Eval_leading=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),leading()},leading=function(){return save(),p2=pop(),p1=pop(),push(p1),push(p2),degree(),p3=pop(),push(p1),push(p2),push(p3),power(),divide(),push(p2),filter(),restore()},Eval_legendre=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),legendre()},legendre=function(){return save(),__legendre(),restore()},__legendre=function(){var r,e;return p3=pop(),p2=pop(),p1=pop(),push(p2),e=pop_integer(),push(p3),r=pop_integer(),e<0||isNaN(e)||r<0||isNaN(r)?(push_symbol(LEGENDRE),push(p1),push(p2),push(p3),void list(4)):(issymbol(p1)?__legendre2(e,r):(p4=p1,p1=symbol(SECRETX),__legendre2(e,r),p1=p4,push(symbol(SECRETX)),push(p1),subst(),Eval()),__legendre3(r))},__legendre2=function(r,e){var t,o,s,n,p,a;for(t=0,push_integer(1),push_integer(0),p6=pop(),t=s=0,n=r;0<=n?s<n:s>n;t=0<=n?++s:--s)p5=p6,p6=pop(),push_integer(2*t+1),push(p1),multiply(),push(p6),multiply(),push_integer(t),push(p5),multiply(),subtract(),push_integer(t+1),divide();for(a=[],t=o=0,p=e;0<=p?o<p:o>p;t=0<=p?++o:--o)push(p1),a.push(derivative());return a},__legendre3=function(r){if(0!==r)return car(p1)===symbol(COS)?(push(cadr(p1)),sine(),square()):car(p1)===symbol(SIN)?(push(cadr(p1)),cosine(),square()):(push_integer(1),push(p1),square(),subtract()),push_integer(r),push_rational(1,2),multiply(),power(),multiply(),r%2?negate():void 0},list=function(r){var e,t,o;for(push(symbol(NIL)),o=[],e=0,t=r;0<=t?e<t:e>t;0<=t?++e:--e)o.push(cons());return o},Eval_log=function(){return push(cadr(p1)),Eval(),logarithm()},logarithm=function(){return save(),yylog(),restore()},yylog=function(){var r;if(r=0,(p1=pop())!==symbol(E))if(equaln(p1,1))push_integer(0);else{if(isnegativenumber(p1))return push(p1),negate(),logarithm(),push(imaginaryunit),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),multiply(),void add();if(isdouble(p1))return r=Math.log(p1.d),void push_double(r);if(isfraction(p1))return push(p1),numerator(),logarithm(),push(p1),denominator(),logarithm(),void subtract();if(car(p1)===symbol(POWER))return push(caddr(p1)),push(cadr(p1)),logarithm(),void multiply();if(car(p1)!==symbol(MULTIPLY))return push_symbol(LOG),push(p1),list(2);for(push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),logarithm(),add(),p1=cdr(p1)}else push_integer(1)},Eval_lookup=function(){return p1=cadr(p1),iscons(p1)||cadr(p1).k!==SYM||(p1=get_binding(p1)),push(p1)},madd=function(r,e){return r.add(e)},msub=function(r,e){return r.subtract(e)},addf=function(r,e){return r.add(e)},subf=function(r,e){return r.subtract(e)},ucmp=function(r,e){return r.compareAbs(e)},mgcd=function(r,e){return bigInt.gcd(r,e)},new_string=function(r){return save(),(p1=new U).k=STR,p1.str=r,push(p1),restore()},out_of_memory=function(){return stop("out of memory")},push_zero_matrix=function(r,e){return push(alloc_tensor(r*e)),stack[tos-1].tensor.ndim=2,stack[tos-1].tensor.dim[0]=r,stack[tos-1].tensor.dim[1]=e},push_identity_matrix=function(r){var e,t,o;for(push_zero_matrix(r,r),e=0,e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)stack[tos-1].tensor.elem[e*r+e]=one;return check_tensor_dimensions(stack[tos-1])},push_cars=function(r){var e;for(e=[];iscons(r);)push(car(r)),e.push(r=cdr(r));return e},peek=function(){return save(),p1=pop(),push(p1),restore()},equal=function(r,e){return 0===cmp_expr(r,e)?1:0},lessp=function(r,e){return cmp_expr(r,e)<0?1:0},sign=function(r){return r<0?-1:r>0?1:0},cmp_expr=function(r,e){var t;if(t=0,r===e)return 0;if(r===symbol(NIL))return-1;if(e===symbol(NIL))return 1;if(isNumericAtom(r)&&isNumericAtom(e))return sign(compare_numbers(r,e));if(isNumericAtom(r))return-1;if(isNumericAtom(e))return 1;if(isstr(r)&&isstr(e))return sign(strcmp(r.str,e.str));if(isstr(r))return-1;if(isstr(e))return 1;if(issymbol(r)&&issymbol(e))return sign(strcmp(get_printname(r),get_printname(e)));if(issymbol(r))return-1;if(issymbol(e))return 1;if(istensor(r)&&istensor(e))return compare_tensors(r,e);if(istensor(r))return-1;if(istensor(e))return 1;for(;iscons(r)&&iscons(e);){if(0!==(t=cmp_expr(car(r),car(e))))return t;r=cdr(r),e=cdr(e)}return iscons(e)?-1:iscons(r)?1:0},length=function(r){var e;for(e=0;iscons(r);)r=cdr(r),e++;return e},unique=function(r){return save(),p1=symbol(NIL),p2=symbol(NIL),unique_f(r),p2!==symbol(NIL)&&(p1=symbol(NIL)),r=p1,restore(),r},unique_f=function(r){if(isstr(r))p1===symbol(NIL)?p1=r:r!==p1&&(p2=r);else for(;iscons(r);){if(unique_f(car(r)),p2!==symbol(NIL))return;r=cdr(r)}},ssqrt=function(){return push_rational(1,2),power()},yyexpand=function(){var r;return r=expanding,expanding=1,Eval(),expanding=r},exponential=function(){return push_symbol(E),swap(),power()},square=function(){return push_integer(2),power()},sort_stack=function(r){var e,t;return e=tos-r,(t=stack.slice(e,e+r)).sort(cmp_expr),stack=stack.slice(0,e).concat(t).concat(stack.slice(e+r))},$.equal=equal,$.length=length,mmul=function(r,e){return r.multiply(e)},mdiv=function(r,e){return r.divide(e)},mmod=function(r,e){return r.mod(e)},mdivrem=function(r,e){var t;return[(t=r.divmod(e)).quotient,t.remainder]},Eval_mod=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),mod()},mod=function(){var r;return r=0,save(),p2=pop(),p1=pop(),isZeroAtomOrTensor(p2)&&stop("mod function: divide by zero"),isNumericAtom(p1)&&isNumericAtom(p2)?(isdouble(p1)&&(push(p1),r=pop_integer(),isNaN(r)&&stop("mod function: cannot convert float value to integer"),push_integer(r),p1=pop()),isdouble(p2)&&(push(p2),r=pop_integer(),isNaN(r)&&stop("mod function: cannot convert float value to integer"),push_integer(r),p2=pop()),isinteger(p1)&&isinteger(p2)||stop("mod function: integer arguments expected"),(p3=new U).k=NUM,p3.q.a=mmod(p1.q.a,p2.q.a),p3.q.b=mint(1),push(p3),restore()):(push_symbol(MOD),push(p1),push(p2),list(3),void restore())},mpow=function(r,e){return r.pow(e)},mprime=function(r){return r.isProbablePrime()},mroot=function(r,e){var t,o,s,n,p,a,i;for(r=r.abs(),t=0,s=0,0===e&&stop("root index is zero"),s=0;r.shiftRight(s)>0;)s++;if(0===s)return mint(0);for(s=Math.floor((s-1)/e),o=Math.floor(s/32+1),a=bigInt(o),t=n=0,p=o;0<=p?n<p:n>p;t=0<=p?++n:--n)a=a.and(bigInt(1).shiftLeft(t).not());for(;s>=0;){switch(a=a.or(bigInt(1).shiftLeft(s)),i=mpow(a,e),mcmp(i,r)){case 0:return a;case 1:a=a.and(bigInt(1).shiftLeft(s).not())}s--}return 0},Eval_multiply=function(){var r;for(push(cadr(p1)),Eval(),p1=cddr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),multiply(),r.push(p1=cdr(p1));return r},multiply=function(){return esc_flag&&stop("escape key stop"),isNumericAtom(stack[tos-2])&&isNumericAtom(stack[tos-1])?multiply_numbers():(save(),yymultiply(),restore())},yymultiply=function(){var r,e,t,o,s,n;if(e=0,p2=pop(),p1=pop(),r=tos,isZeroAtom(p1)||isZeroAtom(p2))evaluatingAsFloats?push_double(0):push(zero);else if(expanding&&isadd(p1))for(p1=cdr(p1),evaluatingAsFloats?push_double(0):push(zero);iscons(p1);)push(car(p1)),push(p2),multiply(),add(),p1=cdr(p1);else if(expanding&&isadd(p2))for(p2=cdr(p2),evaluatingAsFloats?push_double(0):push(zero);iscons(p2);)push(p1),push(car(p2)),multiply(),add(),p2=cdr(p2);else{if(!istensor(p1)&&istensor(p2))return push(p1),push(p2),void scalar_times_tensor();if(istensor(p1)&&!istensor(p2))return push(p1),push(p2),void tensor_times_scalar();for(car(p1)===symbol(MULTIPLY)?p1=cdr(p1):(push(p1),list(1),p1=pop()),car(p2)===symbol(MULTIPLY)?p2=cdr(p2):(push(p2),list(1),p2=pop()),isNumericAtom(car(p1))&&isNumericAtom(car(p2))?(push(car(p1)),push(car(p2)),multiply_numbers(),p1=cdr(p1),p2=cdr(p2)):isNumericAtom(car(p1))?(push(car(p1)),p1=cdr(p1)):isNumericAtom(car(p2))?(push(car(p2)),p2=cdr(p2)):evaluatingAsFloats?push_double(1):push(one),parse_p1(),parse_p2();iscons(p1)&&iscons(p2);)if(caar(p1)!==symbol(OPERATOR)||caar(p2)!==symbol(OPERATOR))switch(cmp_expr(p3,p4)){case-1:push(car(p1)),p1=cdr(p1),parse_p1();break;case 1:push(car(p2)),p2=cdr(p2),parse_p2();break;case 0:combine_factors(r),p1=cdr(p1),p2=cdr(p2),parse_p1(),parse_p2();break;default:stop("internal error 2")}else push_symbol(OPERATOR),push(cdar(p1)),push(cdar(p2)),append(),cons(),p1=cdr(p1),p2=cdr(p2),parse_p1(),parse_p2();for(;iscons(p1);)push(car(p1)),p1=cdr(p1);for(;iscons(p2);)push(car(p2)),p2=cdr(p2);if(__normalize_radical_factors(r),expanding)for(e=o=s=r,n=tos;s<=n?o<n:o>n;e=s<=n?++o:--o)if(isadd(stack[e]))return void multiply_all(tos-r);if(1!=(t=tos-r)){if(!isrational(stack[r])||!equaln(stack[r],1))return list(t),p7=pop(),push_symbol(MULTIPLY),push(p7),cons();2===t?(p7=pop(),pop(),push(p7)):(stack[r]=symbol(MULTIPLY),list(t))}}},parse_p1=function(){if(p3=car(p1),p5=evaluatingAsFloats?one_as_double:one,car(p3)===symbol(POWER))return p5=caddr(p3),p3=cadr(p3)},parse_p2=function(){if(p4=car(p2),p6=evaluatingAsFloats?one_as_double:one,car(p4)===symbol(POWER))return p6=caddr(p4),p4=cadr(p4)},combine_factors=function(r){return push(p4),push(p5),push(p6),add(),power(),p7=pop(),isNumericAtom(p7)?(push(stack[r]),push(p7),multiply_numbers(),stack[r]=pop()):car(p7)===symbol(MULTIPLY)&&isNumericAtom(cadr(p7))&&cdddr(p7)===symbol(NIL)?(push(stack[r]),push(cadr(p7)),multiply_numbers(),stack[r]=pop(),push(caddr(p7))):push(p7)},gp=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,-6,-7,-8,-3,-4,-5,13,14,15,-16,9,10,11,-12],[0,0,6,-1,-11,10,-2,-15,14,12,-5,4,-9,16,-8,7,-13],[0,0,7,11,-1,-9,15,-2,-13,5,12,-3,-10,8,16,-6,-14],[0,0,8,-10,9,-1,-14,13,-2,-4,3,12,-11,-7,6,16,-15],[0,0,3,2,15,-14,1,11,-10,16,-8,7,13,12,-5,4,9],[0,0,4,-15,2,13,-11,1,9,8,16,-6,14,5,12,-3,10],[0,0,5,14,-13,2,10,-9,1,-7,6,16,15,-4,3,12,11],[0,0,13,12,-5,4,16,-8,7,-1,-11,10,-3,-2,-15,14,-6],[0,0,14,5,12,-3,8,16,-6,11,-1,-9,-4,15,-2,-13,-7],[0,0,15,-4,3,12,-7,6,16,-10,9,-1,-5,-14,13,-2,-8],[0,0,16,-9,-10,-11,-13,-14,-15,-3,-4,-5,1,-6,-7,-8,2],[0,0,9,-16,8,-7,-12,5,-4,-2,-15,14,6,-1,-11,10,3],[0,0,10,-8,-16,6,-5,-12,3,15,-2,-13,7,11,-1,-9,4],[0,0,11,7,-6,-16,4,-3,-12,-14,13,-2,8,-10,9,-1,5],[0,0,12,13,14,15,9,10,11,-6,-7,-8,-2,-3,-4,-5,-1]],combine_gammas=function(r){var e;if((e=gp[Math.floor(p1.gamma)][Math.floor(p2.gamma)])<0&&(e=-e,push(stack[r]),negate(),stack[r]=pop()),e>1)return push(_gamma[e])},multiply_noexpand=function(){var r;return r=expanding,expanding=0,multiply(),expanding=r},multiply_all=function(r){var e,t,o,s;if(t=0,1!==r){if(0!==r){for(push(stack[e=tos-r]),t=o=1,s=r;1<=s?o<s:o>s;t=1<=s?++o:--o)push(stack[e+t]),multiply();return stack[e]=pop(),moveTos(e+1)}push(evaluatingAsFloats?one_as_double:one)}},multiply_all_noexpand=function(r){var e;return e=expanding,expanding=0,multiply_all(r),expanding=e},divide=function(){return isNumericAtom(stack[tos-2])&&isNumericAtom(stack[tos-1])?divide_numbers():(inverse(),multiply())},inverse=function(){return isNumericAtom(stack[tos-1])?invert_number():(push_integer(-1),power())},reciprocate=function(){return inverse()},negate=function(){return isNumericAtom(stack[tos-1])?negate_number():(evaluatingAsFloats?push_double(-1):push_integer(-1),multiply())},negate_expand=function(){var r;return r=expanding,expanding=1,negate(),expanding=r},negate_noexpand=function(){var r;return r=expanding,expanding=0,negate(),expanding=r},__normalize_radical_factors=function(r){var e,t,o,s,n,p,a,i,u,l;if(e=0,!(isplusone(stack[r])||isminusone(stack[r])||isdouble(stack[r]))){for(e=s=n=r+1,p=tos;(n<=p?s<p:s>p)&&!__is_radical_number(stack[e]);e=n<=p?++s:--s);if(e!==tos){for(save(),push(stack[r]),mp_numerator(),p1=pop(),e=t=a=r+1,i=tos;(a<=i?t<i:t>i)&&!isplusone(p1)&&!isminusone(p1);e=a<=i?++t:--t)__is_radical_number(stack[e])&&(p3=cadr(stack[e]),p4=caddr(stack[e]),isnegativenumber(p4)&&(push(p1),push(p3),divide(),p5=pop(),isinteger(p5)&&(p1=p5,push_symbol(POWER),push(p3),push(evaluatingAsFloats?one_as_double:one),push(p4),add(),list(3),stack[e]=pop())));for(push(stack[r]),mp_denominator(),p2=pop(),e=o=u=r+1,l=tos;(u<=l?o<l:o>l)&&!isplusone(p2);e=u<=l?++o:--o)if(__is_radical_number(stack[e])&&(p3=cadr(stack[e]),p4=caddr(stack[e]),!isnegativenumber(p4)&&(push(p2),push(p3),divide(),p5=pop(),isinteger(p5)))){if(p2=p5,push_symbol(POWER),push(p3),push(p4),push(one),subtract(),dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication&&isinteger(p3)&&!isinteger(stack[tos-1])&&isnegativenumber(stack[tos-1])){pop(),pop(),pop(),push(p1),push(p3),divide(),p1=pop();break}list(3),stack[e]=pop()}return push(p1),push(p2),divide(),stack[r]=pop(),restore()}}},__is_radical_number=function(r){return car(r)===symbol(POWER)&&isNumericAtom(cadr(r))&&isNumericAtom(caddr(r))&&!isminusone(cadr(r))?1:0},NROOTS_YMAX=101,NROOTS_DELTA=1e-6,NROOTS_EPSILON=1e-9,NROOTS_ABS=function(r){return Math.sqrt(r.r*r.r+r.i*r.i)},theRandom=0,NROOTS_RANDOM=function(){return 4*Math.random()-2},numericRootOfPolynomial=function(){class r{}return r.prototype.r=0,r.prototype.i=0,r}.call(this),nroots_a=new numericRootOfPolynomial,nroots_b=new numericRootOfPolynomial,nroots_x=new numericRootOfPolynomial,nroots_y=new numericRootOfPolynomial,nroots_fa=new numericRootOfPolynomial,nroots_fb=new numericRootOfPolynomial,nroots_dx=new numericRootOfPolynomial,nroots_df=new numericRootOfPolynomial,nroots_c=[],initNRoots=o=0,ref=NROOTS_YMAX;0<=ref?o<ref:o>ref;initNRoots=0<=ref?++o:--o)nroots_c[initNRoots]=new numericRootOfPolynomial;for(Eval_nroots=function(){var r,e,t,o,s,n,p,a,i;for(e=0,s=0,p=0,push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2)||stop("nroots: polynomial?"),r=tos,push(p1),push(p2),(p=coeff())>NROOTS_YMAX&&stop("nroots: degree?"),e=t=0,a=p;0<=a?t<a:t>a;e=0<=a?++t:--t)push(stack[r+e]),real(),yyfloat(),Eval(),p1=pop(),push(stack[r+e]),imag(),yyfloat(),Eval(),p2=pop(),isdouble(p1)&&isdouble(p2)||stop("nroots: coefficients?"),nroots_c[e].r=p1.d,nroots_c[e].i=p2.d;for(moveTos(r),monic(p),s=o=p;o>1;s=o+=-1)findroot(s),Math.abs(nroots_a.r)<NROOTS_DELTA&&(nroots_a.r=0),Math.abs(nroots_a.i)<NROOTS_DELTA&&(nroots_a.i=0),push_double(nroots_a.r),push_double(nroots_a.i),push(imaginaryunit),multiply(),add(),NROOTS_divpoly(s);if((p=tos-r)>1){for(sort_stack(p),(p1=alloc_tensor(p)).tensor.ndim=1,p1.tensor.dim[0]=p,e=n=0,i=p;0<=i?n<i:n>i;e=0<=i?++n:--n)p1.tensor.elem[e]=stack[r+e];return moveTos(r),push(p1)}},monic=function(r){var e,t,o,s;for(t=0,nroots_y.r=nroots_c[r-1].r,nroots_y.i=nroots_c[r-1].i,s=nroots_y.r*nroots_y.r+nroots_y.i*nroots_y.i,t=e=0,o=r-1;0<=o?e<o:e>o;t=0<=o?++e:--e)nroots_c[t].r=(nroots_c[t].r*nroots_y.r+nroots_c[t].i*nroots_y.i)/s,nroots_c[t].i=(nroots_c[t].i*nroots_y.r-nroots_c[t].r*nroots_y.i)/s;return nroots_c[r-1].r=1,nroots_c[r-1].i=0},findroot=function(r){var e,t,o,s;if(s=0,NROOTS_ABS(nroots_c[0])<NROOTS_DELTA)return nroots_a.r=0,void(nroots_a.i=0);for(e=0;e<100;++e)for(nroots_a.r=NROOTS_RANDOM(),nroots_a.i=NROOTS_RANDOM(),compute_fa(r),nroots_b.r=nroots_a.r,nroots_b.i=nroots_a.i,nroots_fb.r=nroots_fa.r,nroots_fb.i=nroots_fa.i,nroots_a.r=NROOTS_RANDOM(),nroots_a.i=NROOTS_RANDOM(),t=0;t<1e3;++t){if(compute_fa(r),o=NROOTS_ABS(nroots_fa),DEBUG&&console.log("nrabs: "+o),o<NROOTS_EPSILON)return;if(NROOTS_ABS(nroots_fa)<NROOTS_ABS(nroots_fb)&&(nroots_x.r=nroots_a.r,nroots_x.i=nroots_a.i,nroots_a.r=nroots_b.r,nroots_a.i=nroots_b.i,nroots_b.r=nroots_x.r,nroots_b.i=nroots_x.i,nroots_x.r=nroots_fa.r,nroots_x.i=nroots_fa.i,nroots_fa.r=nroots_fb.r,nroots_fa.i=nroots_fb.i,nroots_fb.r=nroots_x.r,nroots_fb.i=nroots_x.i),nroots_dx.r=nroots_b.r-nroots_a.r,nroots_dx.i=nroots_b.i-nroots_a.i,nroots_df.r=nroots_fb.r-nroots_fa.r,nroots_df.i=nroots_fb.i-nroots_fa.i,0==(s=nroots_df.r*nroots_df.r+nroots_df.i*nroots_df.i))break;nroots_y.r=(nroots_dx.r*nroots_df.r+nroots_dx.i*nroots_df.i)/s,nroots_y.i=(nroots_dx.i*nroots_df.r-nroots_dx.r*nroots_df.i)/s,nroots_a.r=nroots_b.r-(nroots_y.r*nroots_fb.r-nroots_y.i*nroots_fb.i),nroots_a.i=nroots_b.i-(nroots_y.r*nroots_fb.i+nroots_y.i*nroots_fb.r)}return stop("nroots: convergence error")},compute_fa=function(r){var e,t,o,s,n;for(t=0,n=0,nroots_x.r=nroots_a.r,nroots_x.i=nroots_a.i,nroots_fa.r=nroots_c[0].r+nroots_c[1].r*nroots_x.r-nroots_c[1].i*nroots_x.i,nroots_fa.i=nroots_c[0].i+nroots_c[1].r*nroots_x.i+nroots_c[1].i*nroots_x.r,s=[],t=e=2,o=r;2<=o?e<o:e>o;t=2<=o?++e:--e)n=nroots_a.r*nroots_x.r-nroots_a.i*nroots_x.i,nroots_x.i=nroots_a.r*nroots_x.i+nroots_a.i*nroots_x.r,nroots_x.r=n,nroots_fa.r+=nroots_c[t].r*nroots_x.r-nroots_c[t].i*nroots_x.i,s.push(nroots_fa.i+=nroots_c[t].r*nroots_x.i+nroots_c[t].i*nroots_x.r);return s},NROOTS_divpoly=function(r){var e,t,o,s,n,p;for(o=0,o=e=s=r-1;s<=0?e<0:e>0;o=s<=0?++e:--e)nroots_c[o-1].r+=nroots_c[o].r*nroots_a.r-nroots_c[o].i*nroots_a.i,nroots_c[o-1].i+=nroots_c[o].i*nroots_a.r+nroots_c[o].r*nroots_a.i;for(NROOTS_ABS(nroots_c[0])>NROOTS_DELTA&&stop("nroots: residual error"),p=[],o=t=0,n=r-1;0<=n?t<n:t>n;o=0<=n?++t:--t)nroots_c[o].r=nroots_c[o+1].r,p.push(nroots_c[o].i=nroots_c[o+1].i);return p},Eval_numerator=function(){return push(cadr(p1)),Eval(),numerator()},numerator=function(){var r,e;if(0,e=pop(),car(e)===symbol(ADD)&&(push(e),rationalize(),e=pop()),car(e)!==symbol(MULTIPLY)||isplusone(car(cdr(e))))return isrational(e)?(push(e),mp_numerator()):car(e)===symbol(POWER)&&isnegativeterm(caddr(e))?push(one):push(e);for(r=tos,e=cdr(e);iscons(e);)push(car(e)),numerator(),e=cdr(e);return multiply_all(tos-r)},Eval_outer=function(){var r;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),r=[];iscons(p1);)push(car(p1)),Eval(),outer(),r.push(p1=cdr(p1));return r},outer=function(){return save(),p2=pop(),p1=pop(),istensor(p1)&&istensor(p2)?yyouter():(push(p1),push(p2),istensor(p1)?tensor_times_scalar():istensor(p2)?scalar_times_tensor():multiply()),restore()},yyouter=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d;for(r=0,t=0,s=0,(a=p1.tensor.ndim+p2.tensor.ndim)>MAXDIM&&stop("outer: rank of result exceeds maximum"),i=p1.tensor.nelem*p2.tensor.nelem,(p3=alloc_tensor(i)).tensor.ndim=a,r=e=0,u=p1.tensor.ndim;0<=u?e<u:e>u;r=0<=u?++e:--e)p3.tensor.dim[r]=p1.tensor.dim[r];for(t=r,r=o=0,l=p2.tensor.ndim;0<=l?o<l:o>l;r=0<=l?++o:--o)p3.tensor.dim[t+r]=p2.tensor.dim[r];for(s=0,r=n=0,c=p1.tensor.nelem;0<=c?n<c:n>c;r=0<=c?++n:--n)for(t=p=0,d=p2.tensor.nelem;0<=d?p<d:p>d;t=0<=d?++p:--p)push(p1.tensor.elem[r]),push(p2.tensor.elem[t]),multiply(),p3.tensor.elem[s++]=pop();return push(p3)},partition=function(){for(save(),p2=pop(),p1=pop(),push_integer(1),p3=pop(),p4=p3,p1=cdr(p1);iscons(p1);)Find(car(p1),p2)?(push(p4),push(car(p1)),multiply(),p4=pop()):(push(p3),push(car(p1)),multiply(),p3=pop()),p1=cdr(p1);return push(p3),push(p4),restore()},Eval_silentpattern=function(){return Eval_pattern(),pop(),push_symbol(NIL)},Eval_pattern=function(){var r,e,t,o,s;return iscons(cdr(p1))||stop("pattern needs at least a template and a transformed version"),r=car(cdr(p1)),(t=car(cdr(cdr(p1))))===symbol(NIL)&&stop("pattern needs at least a template and a transformed version"),s=iscons(cdr(cdr(p1)))?car(cdr(cdr(cdr(p1)))):symbol(NIL),equal(r,t)&&stop("recursive pattern"),o="template: "+print_list(r),o+=" tests: "+print_list(s),DEBUG&&console.log("pattern stringkey: "+o),-1===(e=userSimplificationsInStringForm.indexOf(o))?(userSimplificationsInStringForm.push(o),userSimplificationsInListForm.push(cdr(p1))):(DEBUG&&console.log("pattern already exists, replacing. "+cdr(p1)),userSimplificationsInStringForm[e]=o,userSimplificationsInListForm[e]=cdr(p1)),push_symbol(PATTERN),push(cdr(p1)),list(2)},do_clearPatterns=function(){return userSimplificationsInListForm=[],userSimplificationsInStringForm=[]},Eval_clearpatterns=function(){return do_clearPatterns(),push_symbol(NIL)},Eval_patternsinfo=function(){var r;return""!==(r=patternsinfo())?new_string(r):push_symbol(NIL)},patternsinfo=function(){var r,e,t;for(t="",r=0,e=userSimplificationsInListForm.length;r<e;r++)userSimplificationsInListForm[r],t+=userSimplificationsInListForm+"\n";return t},Eval_polar=function(){return push(cadr(p1)),Eval(),polar()},polar=function(){return evaluatingPolar++,save(),p1=pop(),push(p1),abs(),push(imaginaryunit),push(p1),arg(),multiply(),exponential(),multiply(),evaluatingPolar--,restore()},n_factor_number=0,factor_number=function(){var r;return save(),p1=pop(),equaln(p1,0)||equaln(p1,1)||equaln(p1,-1)?(push(p1),void restore()):(n_factor_number=p1.q.a,r=tos,factor_a(),tos-r>1&&(list(tos-r),push_symbol(MULTIPLY),swap(),cons()),restore())},factor_a=function(){var r,e;for(e=0,n_factor_number.isNegative()&&(n_factor_number=setSignTo(n_factor_number,1),push_integer(-1)),e=r=0;r<1e4;e=++r)if(try_kth_prime(e),0===n_factor_number.compare(1))return;return factor_b()},try_kth_prime=function(r){var e,t,o,s;for(e=0,t=mint(primetab[r]),e=0;;){if(0===n_factor_number.compare(1))return void(e&&push_factor(t,e));if([o,s]=mdivrem(n_factor_number,t),!s.isZero())break;e++,n_factor_number=o}if(e&&push_factor(t,e),-1===mcmp(o,t))return push_factor(n_factor_number,1),n_factor_number=mint(1)},factor_b=function(){var r,e,t,o,s,n,p;for(t=0,o=0,r=mint(1),n=mint(5),p=mint(2),t=1,o=1;;){if(mprime(n_factor_number))return push_factor(n_factor_number,1),0;for(;;){if(esc_flag&&stop("esc"),s=msub(p,n),s=setSignTo(s,1),e=mgcd(s,n_factor_number),!MEQUAL(e,1)){if(push_factor(e,1),0===mcmp(e,n_factor_number))return-1;s=mdiv(n_factor_number,e),n=s=mmod(n,n_factor_number=s),p=s=mmod(p,n_factor_number);break}0==--t&&(p=n,t=o*=2),s=mmul(n,n),n=madd(s,r),n=s=mmod(n,n_factor_number)}}},push_factor=function(r,e){if((p1=new U).k=NUM,p1.q.a=r,p1.q.b=mint(1),push(p1),e>1)return push_symbol(POWER),swap(),(p1=new U).k=NUM,p1.q.a=mint(e),p1.q.b=mint(1),push(p1),list(3)},DEBUG_POWER=!1,Eval_power=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),power()},power=function(){return save(),yypower(),restore()},yypower=function(){var r,e,t,o,s,n,p;if(p=0,p2=pop(),p1=pop(),o=p2,t=p1,DEBUG_POWER&&console.log("POWER: "+p1+" ^ "+p2),equal(p1,one)||isZeroAtomOrTensor(p2))return evaluatingAsFloats?push_double(1):push(one),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(equal(p2,one))return push(p1),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isminusone(p1)&&isminusone(p2))return evaluatingAsFloats?push_double(1):push(one),negate(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isminusone(p1)&&isoneovertwo(p2))return push(imaginaryunit),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isminusone(p1)&&isminusoneovertwo(p2))return push(imaginaryunit),negate(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isminusone(p1)&&!isdouble(p1)&&isrational(p2)&&!isinteger(p2)&&ispositivenumber(p2)&&!evaluatingAsFloats)return DEBUG_POWER&&console.log("   power: -1 ^ rational"),DEBUG_POWER&&console.log(" trick: p2.q.a , p2.q.b "+p2.q.a+" , "+p2.q.b),p2.q.a<p2.q.b?(push_symbol(POWER),push(p1),push(p2),list(3)):(push_symbol(MULTIPLY),push(p1),push_symbol(POWER),push(p1),push_rational(p2.q.a.mod(p2.q.b),p2.q.b),list(3),list(3),DEBUG_POWER&&console.log(" trick applied : "+stack[tos-1])),rect(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isrational(p1)&&isrational(p2))return DEBUG_POWER&&console.log("   power: isrational(p1) && isrational(p2)"),push(p1),push(p2),qpow(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isNumericAtom(p1)&&isNumericAtom(p2))return DEBUG_POWER&&console.log("   power: both base and exponent are either rational or double "),DEBUG_POWER&&console.log("POWER - isNumericAtom(p1) && isNumericAtom(p2)"),push(p1),push(p2),dpow(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(istensor(p1))return DEBUG_POWER&&console.log("   power: istensor(p1) "),power_tensor(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(car(p1)===symbol(ABS)&&iseveninteger(p2)&&!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))))return DEBUG_POWER&&console.log("   power: even power of absolute of real value "),push(cadr(p1)),push(p2),power(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(p1===symbol(E)&&car(p2)===symbol(LOG))return push(cadr(p2)),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(p1===symbol(E)&&isdouble(p2))return DEBUG_POWER&&console.log("   power: p1 == symbol(E) && isdouble(p2) "),push_double(Math.exp(p2.d)),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(p1===symbol(E)&&0!==Find(p2,imaginaryunit)&&0!==Find(p2,symbol(PI))&&!evaluatingPolar&&(push_symbol(POWER),push(p1),push(p2),list(3),DEBUG_POWER&&console.log("   power: turning complex exponential to rect: "+stack[tos-1]),rect(),e=pop(),0===Find(e,symbol(PI))))return DEBUG_POWER&&console.log("   power: turned complex exponential to rect: "+e),void push(e);if(car(p1)===symbol(MULTIPLY)&&isinteger(p2)){for(DEBUG_POWER&&console.log("   power: (a * b) ^ c  ->  (a ^ c) * (b ^ c) "),p1=cdr(p1),push(car(p1)),push(p2),power(),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),power(),multiply(),p1=cdr(p1);DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1])}else{if(n=!1,isNumericAtom(cadr(p1))&&(n=sign(compare_numbers(cadr(p1),zero))),car(p1)===symbol(POWER)&&(isinteger(p2)||n))return push(cadr(p1)),push(caddr(p1)),push(p2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(r=!1,iseveninteger(caddr(p1))&&(push(caddr(p1)),push(p2),multiply(),s=pop(),isone(s)&&(r=!0)),car(p1)===symbol(POWER)&&r)return DEBUG_POWER&&console.log("   power: car(p1) == symbol(POWER) && b_isEven_and_c_isItsInverse "),push(cadr(p1)),abs(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(expanding&&isadd(p1)&&isNumericAtom(p2)&&(push(p2),(p=pop_integer())>1&&!isNaN(p)))return DEBUG_POWER&&console.log("   power: expanding && isadd(p1) && isNumericAtom(p2) "),power_sum(p),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(1===trigmode&&car(p1)===symbol(SIN)&&iseveninteger(p2))return DEBUG_POWER&&console.log("   power: trigmode == 1 && car(p1) == symbol(SIN) && iseveninteger(p2) "),push_integer(1),push(cadr(p1)),cosine(),push_integer(2),power(),subtract(),push(p2),push_rational(1,2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(2===trigmode&&car(p1)===symbol(COS)&&iseveninteger(p2))return DEBUG_POWER&&console.log("   power: trigmode == 2 && car(p1) == symbol(COS) && iseveninteger(p2) "),push_integer(1),push(cadr(p1)),sine(),push_integer(2),power(),subtract(),push(p2),push_rational(1,2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(iscomplexnumber(p1)){if(DEBUG_POWER&&console.log(" power - handling the case (a + ib) ^ n"),isinteger(p2))return push(p1),conjugate(),p3=pop(),push(p3),push(p3),push(p1),multiply(),divide(),isone(p2)||(push(p2),negate(),power()),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]));if(isNumericAtom(p2))return push(p1),abs(),push(p2),power(),push_integer(-1),push(p1),arg(),push(p2),multiply(),evaluatingAsFloats||iscomplexnumberdouble(p1)&&isdouble(p2)?push_double(Math.PI):push(symbol(PI)),divide(),power(),multiply(),avoidCalculatingPowersIntoArctans&&Find(stack[tos-1],symbol(ARCTAN))&&(pop(),push_symbol(POWER),push(p1),push(p2),list(3)),void(DEBUG_POWER&&console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]))}if(!simplify_polar())return DEBUG_POWER&&console.log("   power: nothing can be done "),push_symbol(POWER),push(p1),push(p2),list(3),DEBUG_POWER?console.log("   power of "+t+" ^ "+o+": "+stack[tos-1]):void 0;DEBUG_POWER&&console.log("   power: using simplify_polar")}},power_sum=function(r){var e,t,o,s,n,p,a,i,u,l;for(e=[],t=0,s=0,p=length(p1)-1,push_frame(p*(r+1)),p1=cdr(p1),t=o=0,i=p;0<=i?o<i:o>i;t=0<=i?++o:--o){for(s=n=0,u=r;0<=u?n<=u:n>=u;s=0<=u?++n:--n)push(car(p1)),push_integer(s),power(),stack[frame+t*(r+1)+s]=pop();p1=cdr(p1)}for(push_integer(r),factorial(),p1=pop(),t=a=0,l=p;0<=l?a<l:a>l;t=0<=l?++a:--a)e[t]=0;return push(zero),multinomial_sum(p,r,e,0,r),pop_frame(p*(r+1))},multinomial_sum=function(r,e,t,o,s){var n,p,a,i,u,l,c;if(p=0,!(o<r-1)){for(t[o]=s,push(p1),p=a=0,l=r;0<=l?a<l:a>l;p=0<=l?++a:--a)push_integer(t[p]),factorial(),divide();for(p=i=0,c=r;0<=c?i<c:i>c;p=0<=c?++i:--i)push(stack[frame+p*(e+1)+t[p]]),multiply();return add()}for(p=n=0,u=s;0<=u?n<=u:n>=u;p=0<=u?++n:--n)t[o]=p,multinomial_sum(r,e,t,o+1,s-p)},simplify_polar=function(){var r;switch(r=0,r=isquarterturn(p2)){case 0:break;case 1:return push_integer(1),1;case 2:return push_integer(-1),1;case 3:return push(imaginaryunit),1;case 4:return push(imaginaryunit),negate(),1}if(car(p2)===symbol(ADD)){for(p3=cdr(p2);iscons(p3)&&!(r=isquarterturn(car(p3)));)p3=cdr(p3);switch(r){case 0:return 0;case 1:push_integer(1);break;case 2:push_integer(-1);break;case 3:push(imaginaryunit);break;case 4:push(imaginaryunit),negate()}return push(p2),push(car(p3)),subtract(),exponential(),multiply(),1}return 0},Eval_prime=function(){return push(cadr(p1)),Eval(),prime()},prime=function(){var r;return r=0,((r=pop_integer())<1||r>MAXPRIMETAB)&&stop("prime: Argument out of range."),r=primetab[r-1],push_integer(r)},power_str="^",codeGen=!1,Eval_print=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),printMode),push(symbol(NIL))},Eval_print2dascii=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_2DASCII),push(symbol(NIL))},Eval_printcomputer=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_COMPUTER),push(symbol(NIL))},Eval_printlatex=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_LATEX),push(symbol(NIL))},Eval_printhuman=function(){var r;return r=test_flag,test_flag=0,stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_HUMAN),test_flag=r,push(symbol(NIL))},Eval_printlist=function(){var r;return r=_print(cdr(p1),PRINTMODE_LIST),stringsEmittedByUserPrintouts+=r,push(symbol(NIL))},_print=function(r,e){var t,o;for(t="";iscons(r);)push(car(r)),Eval(),p2=pop(),o=printMode,e===PRINTMODE_COMPUTER?(printMode=PRINTMODE_COMPUTER,t=printline(p2),rememberPrint(t,LAST_FULL_PRINT)):e===PRINTMODE_HUMAN?(printMode=PRINTMODE_HUMAN,t=printline(p2),rememberPrint(t,LAST_PLAIN_PRINT)):e===PRINTMODE_2DASCII?(printMode=PRINTMODE_2DASCII,t=print2dascii(p2),rememberPrint(t,LAST_2DASCII_PRINT)):e===PRINTMODE_LATEX?(printMode=PRINTMODE_LATEX,t=printline(p2),rememberPrint(t,LAST_LATEX_PRINT)):e===PRINTMODE_LIST&&(printMode=PRINTMODE_LIST,t=print_list(p2),rememberPrint(t,LAST_LIST_PRINT)),printMode=o,r=cdr(r);return DEBUG&&console.log("emttedString from display: "+stringsEmittedByUserPrintouts),t},rememberPrint=function(r,e){var t;return scan('"'+r+'"'),t=pop(),set_binding(symbol(e),t)},print_str=function(r){return DEBUG&&console.log("emttedString from print_str: "+stringsEmittedByUserPrintouts),r},print_char=function(r){return r},collectLatexStringFromReturnValue=function(r){var e,t,o;return e=printMode,printMode=PRINTMODE_LATEX,t=codeGen,codeGen=!1,o=(o=print_expr(r)).replace(/_/g,"\\_"),printMode=e,codeGen=t,DEBUG&&console.log("emttedString from collectLatexStringFromReturnValue: "+stringsEmittedByUserPrintouts),o},printline=function(r){return""+print_expr(r)},print_base_of_denom=function(r){var e;return e="",isfraction(r)||car(r)===symbol(ADD)||car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)||lessp(r,zero)?(e+=print_char("("),e+=print_expr(r),e+=print_char(")")):e+=print_expr(r),e},print_expo_of_denom=function(r){var e;return e="",isfraction(r)||car(r)===symbol(ADD)||car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)?(e+=print_char("("),e+=print_expr(r),e+=print_char(")")):e+=print_expr(r),e},print_denom=function(r,e){var t;return t="",save(),p1=cadr(r),p2=caddr(r),isminusone(p2)?(t+=print_base_of_denom(p1),restore(),t):(1===e&&(t+=print_char("(")),push(p2),negate(),p2=pop(),t+=print_power(p1,p2),1===e&&(t+=print_char(")")),restore(),t)},print_a_over_b=function(r){var e,t,o;for(e="",flag=0,o=0,t=0,save(),o=0,t=0,p1=cdr(r),p2=car(p1),isrational(p2)?(push(p2),mp_numerator(),absval(),p3=pop(),push(p2),mp_denominator(),p4=pop(),isplusone(p3)||o++,isplusone(p4)||t++,p1=cdr(p1)):(p3=one,p4=one);iscons(p1);)p2=car(p1),is_denominator(p2)?t++:o++,p1=cdr(p1);if(printMode===PRINTMODE_LATEX&&(e+=print_str("\\frac{")),0===o)e+=print_char("1");else for(flag=0,p1=cdr(r),isrational(car(p1))&&(p1=cdr(p1)),isplusone(p3)||(e+=print_factor(p3),flag=1);iscons(p1);)p2=car(p1),is_denominator(p2)||(flag&&(e+=print_multiply_sign()),e+=print_factor(p2),flag=1),p1=cdr(p1);for(e+=print_str(printMode===PRINTMODE_LATEX?"}{":printMode!==PRINTMODE_HUMAN||test_flag?"/":" / "),t>1&&printMode!==PRINTMODE_LATEX&&(e+=print_char("(")),flag=0,p1=cdr(r),isrational(car(p1))&&(p1=cdr(p1)),isplusone(p4)||(e+=print_factor(p4),flag=1);iscons(p1);)p2=car(p1),is_denominator(p2)&&(flag&&(e+=print_multiply_sign()),e+=print_denom(p2,t),flag=1),p1=cdr(p1);return t>1&&printMode!==PRINTMODE_LATEX&&(e+=print_char(")")),printMode===PRINTMODE_LATEX&&(e+=print_str("}")),restore(),e},print_expr=function(r){var e;if(e="",isadd(r))for(r=cdr(r),"-"===sign_of_term(car(r))&&(e+=print_str("-")),e+=print_term(car(r)),r=cdr(r);iscons(r);)"+"===sign_of_term(car(r))?e+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"+":" + "):e+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"-":" - "),e+=print_term(car(r)),r=cdr(r);else"-"===sign_of_term(r)&&(e+=print_str("-")),e+=print_term(r);return e},sign_of_term=function(r){var e;return e="",car(r)===symbol(MULTIPLY)&&isNumericAtom(cadr(r))&&lessp(cadr(r),zero)||isNumericAtom(r)&&lessp(r,zero)?e+="-":e+="+",e},print_term=function(r){var e,t,o,s,n;if(e="",car(r)===symbol(MULTIPLY)&&any_denominators(r))return e+print_a_over_b(r);if(car(r)===symbol(MULTIPLY)){for(r=cdr(r),isminusone(car(r))&&(r=cdr(r)),n=!1,isNumericAtom(car(r))&&(n=!0),o=!1,printMode===PRINTMODE_LATEX&&iscons(cdr(r))&&isNumberOneOverSomething(car(r))&&(o=!0,t=car(r).q.b.toString()),o?(s=e,e=""):e+=print_factor(car(r)),r=cdr(r);iscons(r);)printMode===PRINTMODE_LATEX&&n&&caar(r)===symbol(POWER)&&isNumericAtom(car(cdr(car(r))))&&(isfraction(car(cdr(cdr(car(r)))))||(e+=" \\cdot ")),e+=print_multiply_sign(),e+=print_factor(car(r)),n=!1,isNumericAtom(car(r))&&(n=!0),r=cdr(r);o&&(e=s+"\\frac{"+e+"}{"+t+"}")}else e+=print_factor(r);return e},print_subexpr=function(r){var e;return e="",e+=print_char("("),(e+=print_expr(r))+print_char(")")},print_factorial_function=function(r){var e;return e="",r=cadr(r),isfraction(r)||car(r)===symbol(ADD)||car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)||car(r)===symbol(FACTORIAL)?e+=print_subexpr(r):e+=print_expr(r),e+print_char("!")},print_ABS_latex=function(r){var e;return e="",e+=print_str("\\left |"),(e+=print_expr(cadr(r)))+print_str(" \\right |")},print_BINOMIAL_latex=function(r){var e;return e="",e+=print_str("\\binom{"),e+=print_expr(cadr(r)),e+=print_str("}{"),(e+=print_expr(caddr(r)))+print_str("} ")},print_DOT_latex=function(r){var e;return e="",e+=print_expr(cadr(r)),(e+=print_str(" \\cdot "))+print_expr(caddr(r))},print_DOT_codegen=function(r){var e;return e="dot(",e+=print_expr(cadr(r)),e+=", ",(e+=print_expr(caddr(r)))+")"},print_SIN_codegen=function(r){var e;return e="Math.sin(",(e+=print_expr(cadr(r)))+")"},print_COS_codegen=function(r){var e;return e="Math.cos(",(e+=print_expr(cadr(r)))+")"},print_TAN_codegen=function(r){var e;return e="Math.tan(",(e+=print_expr(cadr(r)))+")"},print_ARCSIN_codegen=function(r){var e;return e="Math.asin(",(e+=print_expr(cadr(r)))+")"},print_ARCCOS_codegen=function(r){var e;return e="Math.acos(",(e+=print_expr(cadr(r)))+")"},print_ARCTAN_codegen=function(r){var e;return e="Math.atan(",(e+=print_expr(cadr(r)))+")"},print_SQRT_latex=function(r){var e;return e="",e+=print_str("\\sqrt{"),(e+=print_expr(cadr(r)))+print_str("} ")},print_TRANSPOSE_latex=function(r){var e;return e="",e+=print_str("{"),iscons(cadr(r))&&(e+=print_str("(")),e+=print_expr(cadr(r)),iscons(cadr(r))&&(e+=print_str(")")),(e+=print_str("}"))+print_str("^T")},print_TRANSPOSE_codegen=function(r){var e;return e="",e+=print_str("transpose("),(e+=print_expr(cadr(r)))+print_str(")")},print_UNIT_codegen=function(r){var e;return e="",e+=print_str("identity("),(e+=print_expr(cadr(r)))+print_str(")")},print_INV_latex=function(r){var e;return e="",e+=print_str("{"),iscons(cadr(r))&&(e+=print_str("(")),e+=print_expr(cadr(r)),iscons(cadr(r))&&(e+=print_str(")")),(e+=print_str("}"))+print_str("^{-1}")},print_INV_codegen=function(r){var e;return e="",e+=print_str("inv("),(e+=print_expr(cadr(r)))+print_str(")")},print_DEFINT_latex=function(r){var e,t,o,s,n,p,a,i,u;for(e="",t=car(cdr(r)),p=r=cdr(r),n=0;iscons(cdr(cdr(r)));)n++,i=cdr(cdr(r)),e+=print_str("\\int^{"),e+=print_expr(car(cdr(i))),e+=print_str("}_{"),e+=print_expr(car(i)),e+=print_str("} \\! "),r=cdr(i);for(e+=print_expr(t),e+=print_str(" \\,"),r=p,o=s=1,a=n;1<=a?s<=a:s>=a;o=1<=a?++s:--s)u=cdr(r),e+=print_str(" \\mathrm{d} "),e+=print_expr(car(u)),o<n&&(e+=print_str(" \\, ")),r=cdr(cdr(u));return e},print_tensor=function(r){return""+print_tensor_inner(r,0,0)[1]},print_tensor_inner=function(r,e,t){var o,s,n,p,a,i,u;if(o="",o+=print_str("["),e<r.tensor.ndim-1)for(s=n=0,a=r.tensor.dim[e];0<=a?n<a:n>a;s=0<=a?++n:--n)[t,u]=print_tensor_inner(r,e+1,t),o+=u,s!==r.tensor.dim[e]-1&&(o+=print_str(","));else for(s=p=0,i=r.tensor.dim[e];0<=i?p<i:p>i;s=0<=i?++p:--p)o+=print_expr(r.tensor.elem[t]),s!==r.tensor.dim[e]-1&&(o+=print_str(",")),t++;return[t,o+=print_str("]")]},print_tensor_latex=function(r){var e;return e="",r.tensor.ndim<=2&&(e+=print_tensor_inner_latex(!0,r,0,0)[1]),e},print_tensor_inner_latex=function(r,e,t,o){var s,n,p,a,i,u,l;if(s="",r&&(s+="\\begin{bmatrix} "),t<e.tensor.ndim-1)for(n=p=0,i=e.tensor.dim[t];0<=i?p<i:p>i;n=0<=i?++p:--p)[o,l]=print_tensor_inner_latex(0,e,t+1,o),s+=l,n!==e.tensor.dim[t]-1&&(s+=print_str(" \\\\ "));else for(n=a=0,u=e.tensor.dim[t];0<=u?a<u:a>u;n=0<=u?++a:--a)s+=print_expr(e.tensor.elem[o]),n!==e.tensor.dim[t]-1&&(s+=print_str(" & ")),o++;return r&&(s+=" \\end{bmatrix}"),[o,s]},print_SUM_latex=function(r){var e;return e="\\sum_{",e+=print_expr(caddr(r)),e+="=",e+=print_expr(cadddr(r)),e+="}^{",e+=print_expr(caddddr(r)),e+="}{",(e+=print_expr(cadr(r)))+"}"},print_SUM_codegen=function(r){var e,t,o,s;return e=cadr(r),s=caddr(r),t=cadddr(r),o=caddddr(r),"(function(){ var "+s+";  var holderSum = 0;  var lowerlimit = "+print_expr(t)+";  var upperlimit = "+print_expr(o)+";  for ("+s+" = lowerlimit; "+s+" < upperlimit; "+s+"++) {    holderSum += "+print_expr(e)+"; }  return holderSum;})()"},print_TEST_latex=function(r){var e;for(e="\\left\\{ \\begin{array}{ll}",r=cdr(r);iscons(r);){if(cdr(r)===symbol(NIL)){e+="{",e+=print_expr(car(r)),e+="} & otherwise ",e+=" \\\\\\\\";break}e+="{",e+=print_expr(cadr(r)),e+="} & if & ",e+=print_expr(car(r)),e+=" \\\\\\\\",r=cddr(r)}return(e=e.substring(0,e.length-4))+"\\end{array} \\right."},print_TEST_codegen=function(r){var e,t;for(e="(function(){",r=cdr(r),t=0;iscons(r);){if(cdr(r)===symbol(NIL)){e+="else {",e+="return ("+print_expr(car(r))+");",e+="}";break}t&&(e+=" else "),e+="if ("+print_expr(car(r))+"){",e+="return ("+print_expr(cadr(r))+");",e+="}",t++,r=cddr(r)}return e+"})()"},print_TESTLT_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" < ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_TESTLE_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" \\leq ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_TESTGT_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" > ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_TESTGE_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" \\geq ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_TESTEQ_latex=function(r){var e;return e="{",e+=print_expr(cadr(r)),e+="}",e+=" = ",e+="{",(e+=print_expr(caddr(r)))+"}"},print_FOR_codegen=function(r){var e,t,o,s;return e=cadr(r),s=caddr(r),t=cadddr(r),o=caddddr(r),"(function(){ var "+s+";  var lowerlimit = "+print_expr(t)+";  var upperlimit = "+print_expr(o)+";  for ("+s+" = lowerlimit; "+s+" < upperlimit; "+s+"++) {    "+print_expr(e)+" } })()"},print_DO_codegen=function(r){var e;for(e="",r=cdr(r);iscons(r);)e+=print_expr(car(r)),r=cdr(r);return e},print_SETQ_codegen=function(r){var e;return e="",e+=print_expr(cadr(r)),e+=" = ",(e+=print_expr(caddr(r)))+"; "},print_PRODUCT_latex=function(r){var e;return e="\\prod_{",e+=print_expr(caddr(r)),e+="=",e+=print_expr(cadddr(r)),e+="}^{",e+=print_expr(caddddr(r)),e+="}{",(e+=print_expr(cadr(r)))+"}"},print_PRODUCT_codegen=function(r){var e,t,o,s;return e=cadr(r),s=caddr(r),t=cadddr(r),o=caddddr(r),"(function(){ var "+s+";  var holderProduct = 1;  var lowerlimit = "+print_expr(t)+";  var upperlimit = "+print_expr(o)+";  for ("+s+" = lowerlimit; "+s+" < upperlimit; "+s+"++) {    holderProduct *= "+print_expr(e)+"; }  return holderProduct;})()"},print_base=function(r){var e;return e="",isadd(cadr(r))||caadr(r)===symbol(MULTIPLY)||caadr(r)===symbol(POWER)||isnegativenumber(cadr(r))?(e+=print_str("("),e+=print_expr(cadr(r)),e+=print_str(")")):isNumericAtom(cadr(r))&&(lessp(cadr(r),zero)||isfraction(cadr(r)))?(e+=print_str("("),e+=print_factor(cadr(r)),e+=print_str(")")):e+=print_factor(cadr(r)),e},print_exponent=function(r){var e;return e="",iscons(caddr(r))||isfraction(caddr(r))||isNumericAtom(caddr(r))&&lessp(caddr(r),zero)?(e+=print_str("("),e+=print_expr(caddr(r)),e+=print_str(")")):e+=print_factor(caddr(r)),e},print_power=function(r,e){var t,o,s,n;if(t="",DEBUG&&console.log("power base: "+r+"  exponent: "+e),isoneovertwo(e))if(equaln(r,2)){if(codeGen)return t+print_str("Math.SQRT2")}else{if(printMode===PRINTMODE_LATEX)return t+=print_str("\\sqrt{"),(t+=print_expr(r))+print_str("}");if(codeGen)return t+=print_str("Math.sqrt("),(t+=print_expr(r))+print_str(")")}if(equaln(get_binding(symbol(PRINT_LEAVE_E_ALONE)),1)&&r===symbol(E))return codeGen?(t+=print_str("Math.exp("),t+=print_expo_of_denom(e),t+=print_str(")")):(printMode===PRINTMODE_LATEX?(t+=print_str("e^{"),t+=print_expr(e),t+=print_str("}")):(t+=print_str("exp("),t+=print_expr(e),t+=print_str(")")),t);if(codeGen)return t+=print_str("Math.pow("),t+=print_base_of_denom(r),t+=print_str(", "),(t+=print_expo_of_denom(e))+print_str(")");if(equaln(get_binding(symbol(PRINT_LEAVE_X_ALONE)),0)||"x"!==r.printname){if(r!==symbol(E)){if(isminusone(e))return t+=print_str(printMode===PRINTMODE_LATEX?"\\frac{1}{":printMode!==PRINTMODE_HUMAN||test_flag?"1/":"1 / "),iscons(r)&&printMode!==PRINTMODE_LATEX?(t+=print_str("("),t+=print_expr(r),t+=print_str(")")):t+=print_expr(r),printMode===PRINTMODE_LATEX&&(t+=print_str("}")),t;if(isnegativeterm(e))return t+=print_str(printMode===PRINTMODE_LATEX?"\\frac{1}{":printMode!==PRINTMODE_HUMAN||test_flag?"1/":"1 / "),push(e),push_integer(-1),multiply(),s=pop(),iscons(r)&&printMode!==PRINTMODE_LATEX?(t+=print_str("("),t+=print_power(r,s),t+=print_str(")")):t+=print_power(r,s),printMode===PRINTMODE_LATEX&&(t+=print_str("}")),t}if(isfraction(e)&&printMode===PRINTMODE_LATEX)return t+=print_str("\\sqrt"),push(e),denominator(),o=pop(),isplustwo(o)||(t+=print_str("["),t+=print_expr(o),t+=print_str("]")),t+=print_str("{"),push(e),numerator(),n=pop(),(t+=print_power(r,e=n))+print_str("}")}return printMode===PRINTMODE_LATEX&&isplusone(e)?t+=print_expr(r):(isadd(r)||isnegativenumber(r)?(t+=print_str("("),t+=print_expr(r),t+=print_str(")")):car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)?(printMode!==PRINTMODE_LATEX&&(t+=print_str("(")),t+=print_factor(r,!0),printMode!==PRINTMODE_LATEX&&(t+=print_str(")"))):isNumericAtom(r)&&(lessp(r,zero)||isfraction(r))?(t+=print_str("("),t+=print_factor(r),t+=print_str(")")):t+=print_factor(r),t+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"^":power_str),printMode===PRINTMODE_LATEX?print_expr(e).length>1?(t+=print_str("{"),t+=print_expr(e),t+=print_str("}")):t+=print_expr(e):iscons(e)||isfraction(e)||isNumericAtom(e)&&lessp(e,zero)?(t+=print_str("("),t+=print_expr(e),t+=print_str(")")):t+=print_factor(e)),t},print_index_function=function(r){var e;if(e="",r=cdr(r),caar(r)===symbol(ADD)||caar(r)===symbol(MULTIPLY)||caar(r)===symbol(POWER)||caar(r)===symbol(FACTORIAL)?e+=print_subexpr(car(r)):e+=print_expr(car(r)),e+=print_str("["),r=cdr(r),iscons(r))for(e+=print_expr(car(r)),r=cdr(r);iscons(r);)e+=print_str(","),e+=print_expr(car(r)),r=cdr(r);return e+print_str("]")},print_factor=function(r,e){var t,o,s,n,p;if(t="",isNumericAtom(r))return t+print_number(r,!1);if(isstr(r))return t+=print_str('"'),(t+=print_str(r.str))+print_str('"');if(istensor(r))return t+(printMode===PRINTMODE_LATEX?print_tensor_latex(r):print_tensor(r));if(car(r)===symbol(MULTIPLY))return e||"-"!==sign_of_term(r)&&printMode===PRINTMODE_LATEX||(t+=print_str(printMode===PRINTMODE_LATEX?" \\left (":"(")),t+=print_expr(r),e||"-"!==sign_of_term(r)&&printMode===PRINTMODE_LATEX||(t+=print_str(printMode===PRINTMODE_LATEX?" \\right ) ":")")),t;if(isadd(r))return e||(t+=print_str("(")),t+=print_expr(r),e||(t+=print_str(")")),t;if(car(r)===symbol(POWER))return o=cadr(r),s=caddr(r),t+print_power(o,s);if(car(r)===symbol(FUNCTION))return n=cadr(r),codeGen||(p=caddr(r),t+=print_str("function "),DEBUG&&console.log("emittedString from print_factor "+stringsEmittedByUserPrintouts),t+=print_list(p),t+=print_str(" -> ")),t+print_expr(n);if(car(r)===symbol(PATTERN))return t+=print_expr(caadr(r)),(t+=print_str(printMode===PRINTMODE_LATEX?" \\rightarrow ":printMode!==PRINTMODE_HUMAN||test_flag?"->":" -> "))+print_expr(car(cdr(cadr(r))));if(car(r)===symbol(INDEX)&&issymbol(cadr(r)))return t+print_index_function(r);if(car(r)===symbol(FACTORIAL))return t+print_factorial_function(r);if(car(r)===symbol(ABS)&&printMode===PRINTMODE_LATEX)return t+print_ABS_latex(r);if(car(r)===symbol(SQRT)&&printMode===PRINTMODE_LATEX)return t+print_SQRT_latex(r);if(car(r)===symbol(TRANSPOSE)){if(printMode===PRINTMODE_LATEX)return t+print_TRANSPOSE_latex(r);if(codeGen)return t+print_TRANSPOSE_codegen(r)}else if(car(r)===symbol(UNIT)){if(codeGen)return t+print_UNIT_codegen(r)}else if(car(r)===symbol(INV)){if(printMode===PRINTMODE_LATEX)return t+print_INV_latex(r);if(codeGen)return t+print_INV_codegen(r)}else{if(car(r)===symbol(BINOMIAL)&&printMode===PRINTMODE_LATEX)return t+print_BINOMIAL_latex(r);if(car(r)===symbol(DEFINT)&&printMode===PRINTMODE_LATEX)return t+print_DEFINT_latex(r);if(isinnerordot(r)){if(printMode===PRINTMODE_LATEX)return t+print_DOT_latex(r);if(codeGen)return t+print_DOT_codegen(r)}else if(car(r)===symbol(SIN)){if(codeGen)return t+print_SIN_codegen(r)}else if(car(r)===symbol(COS)){if(codeGen)return t+print_COS_codegen(r)}else if(car(r)===symbol(TAN)){if(codeGen)return t+print_TAN_codegen(r)}else if(car(r)===symbol(ARCSIN)){if(codeGen)return t+print_ARCSIN_codegen(r)}else if(car(r)===symbol(ARCCOS)){if(codeGen)return t+print_ARCCOS_codegen(r)}else if(car(r)===symbol(ARCTAN)){if(codeGen)return t+print_ARCTAN_codegen(r)}else if(car(r)===symbol(SUM)){if(printMode===PRINTMODE_LATEX)return t+print_SUM_latex(r);if(codeGen)return t+print_SUM_codegen(r)}else if(car(r)===symbol(PRODUCT)){if(printMode===PRINTMODE_LATEX)return t+print_PRODUCT_latex(r);if(codeGen)return t+print_PRODUCT_codegen(r)}else if(car(r)===symbol(FOR)){if(codeGen)return t+print_FOR_codegen(r)}else if(car(r)===symbol(DO)){if(codeGen)return t+print_DO_codegen(r)}else if(car(r)===symbol(TEST)){if(codeGen)return t+print_TEST_codegen(r);if(printMode===PRINTMODE_LATEX)return t+print_TEST_latex(r)}else if(car(r)===symbol(TESTLT)){if(codeGen)return t+"(("+print_expr(cadr(r))+") < ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTLT_latex(r)}else if(car(r)===symbol(TESTLE)){if(codeGen)return t+"(("+print_expr(cadr(r))+") <= ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTLE_latex(r)}else if(car(r)===symbol(TESTGT)){if(codeGen)return t+"(("+print_expr(cadr(r))+") > ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTGT_latex(r)}else if(car(r)===symbol(TESTGE)){if(codeGen)return t+"(("+print_expr(cadr(r))+") >= ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTGE_latex(r)}else if(car(r)===symbol(TESTEQ)){if(codeGen)return t+"(("+print_expr(cadr(r))+") === ("+print_expr(caddr(r))+"))";if(printMode===PRINTMODE_LATEX)return t+print_TESTEQ_latex(r)}else if(car(r)===symbol(FLOOR)){if(codeGen)return t+"Math.floor("+print_expr(cadr(r))+")";if(printMode===PRINTMODE_LATEX)return t+" \\lfloor {"+print_expr(cadr(r))+"} \\rfloor "}else if(car(r)===symbol(CEILING)){if(codeGen)return t+"Math.ceiling("+print_expr(cadr(r))+")";if(printMode===PRINTMODE_LATEX)return t+" \\lceil {"+print_expr(cadr(r))+"} \\rceil "}else if(car(r)===symbol(ROUND)){if(codeGen)return t+"Math.round("+print_expr(cadr(r))+")"}else if(car(r)===symbol(SETQ))return codeGen?t+=print_SETQ_codegen(r):(t+=print_expr(cadr(r)),t+=print_str("="),t+=print_expr(caddr(r)))}if(iscons(r)){if(t+=print_factor(car(r)),r=cdr(r),e||(t+=print_str("(")),iscons(r))for(t+=print_expr(car(r)),r=cdr(r);iscons(r);)t+=print_str(","),t+=print_expr(car(r)),r=cdr(r);return e||(t+=print_str(")")),t}return r===symbol(DERIVATIVE)?t+=print_char("d"):r===symbol(E)?t+=print_str(codeGen?"Math.E":"e"):r===symbol(PI)?t+=print_str(printMode===PRINTMODE_LATEX?"\\pi":"pi"):t+=print_str(get_printname(r)),t},print_list=function(r){var e;switch(e="",r.k){case CONS:for(e+="(",e+=print_list(car(r)),r===cdr(r)&&r!==symbol(NIL)&&console.log("oh no recursive!"),r=cdr(r);iscons(r);)e+=" ",e+=print_list(car(r)),(r=cdr(r))===cdr(r)&&r!==symbol(NIL)&&console.log("oh no recursive!");r!==symbol(NIL)&&(e+=" . ",e+=print_list(r)),e+=")";break;case STR:e+=r.str;break;case NUM:case DOUBLE:e+=print_number(r,!0);break;case SYM:e+=get_printname(r);break;default:e+="<tensor>"}return e},print_multiply_sign=function(){var r;if(r="",printMode===PRINTMODE_LATEX){if(printMode!==PRINTMODE_HUMAN||test_flag)return r;r+=print_str(" ")}return r+print_str(printMode!==PRINTMODE_HUMAN||test_flag||codeGen?"*":" ")},is_denominator=function(r){return car(r)===symbol(POWER)&&cadr(r)!==symbol(E)&&isnegativeterm(caddr(r))?1:0},any_denominators=function(r){var e;for(r=cdr(r);iscons(r);){if(e=car(r),is_denominator(e))return 1;r=cdr(r)}return 0},YMAX=1e4,glyph=function(){class r{}return r.prototype.c=0,r.prototype.x=0,r.prototype.y=0,r}.call(this),chartab=[],charTabIndex=i1=0,ref1=YMAX;0<=ref1?i1<ref1:i1>ref1;charTabIndex=0<=ref1?++i1:--i1)chartab[charTabIndex]=new glyph;for(yindex=0,level=0,emit_x=0,expr_level=0,display_flag=0,printchar_nowrap=function(r){return""+r},printchar=function(r){return printchar_nowrap(r)},print2dascii=function(r){var e,t,o,s;return t=0,o=0,s=0,save(),yindex=0,level=0,emit_x=0,emit_top_expr(r),[t,o,s]=get_size(0,yindex),o>100?(printline(r),void restore()):(e=print_glyphs(),restore(),e)},emit_top_expr=function(r){return car(r)===symbol(SETQ)?(emit_expr(cadr(r)),__emit_str(" = "),void emit_expr(caddr(r))):istensor(r)?emit_tensor(r):emit_expr(r)},will_be_displayed_as_fraction=function(r){if(level>0)return 0;if(isfraction(r))return 1;if(car(r)!==symbol(MULTIPLY))return 0;if(isfraction(cadr(r)))return 1;for(;iscons(r);){if(isdenominator(car(r)))return 1;r=cdr(r)}return 0},emit_expr=function(r){if(expr_level++,car(r)===symbol(ADD))for(r=cdr(r),__is_negative(car(r))&&(__emit_char("-"),will_be_displayed_as_fraction(car(r))&&__emit_char(" ")),emit_term(car(r)),r=cdr(r);iscons(r);)__is_negative(car(r))?(__emit_char(" "),__emit_char("-"),__emit_char(" ")):(__emit_char(" "),__emit_char("+"),__emit_char(" ")),emit_term(car(r)),r=cdr(r);else __is_negative(r)&&(__emit_char("-"),will_be_displayed_as_fraction(r)&&__emit_char(" ")),emit_term(r);return expr_level--},emit_unsigned_expr=function(r){var e;if(car(r)===symbol(ADD)){for(r=cdr(r),emit_term(car(r)),r=cdr(r),e=[];iscons(r);)__is_negative(car(r))?(__emit_char(" "),__emit_char("-"),__emit_char(" ")):(__emit_char(" "),__emit_char("+"),__emit_char(" ")),emit_term(car(r)),e.push(r=cdr(r));return e}return emit_term(r)},__is_negative=function(r){return isnegativenumber(r)||car(r)===symbol(MULTIPLY)&&isnegativenumber(cadr(r))?1:0},emit_term=function(r){var e;return car(r)===symbol(MULTIPLY)?(e=count_denominators(r))&&0===level?emit_fraction(r,e):emit_multiply(r,e):emit_factor(r)},isdenominator=function(r){return car(r)===symbol(POWER)&&cadr(r)!==symbol(E)&&__is_negative(caddr(r))?1:0},count_denominators=function(r){var e,t;for(e=0,r=cdr(r);iscons(r);)t=car(r),isdenominator(t)&&e++,r=cdr(r);return e},emit_multiply=function(r,e){var t;if(0===e){for(r=cdr(r),(isplusone(car(r))||isminusone(car(r)))&&(r=cdr(r)),emit_factor(car(r)),r=cdr(r),t=[];iscons(r);)__emit_char(" "),emit_factor(car(r)),t.push(r=cdr(r));return t}return emit_numerators(r),__emit_char("/"),e>1||isfraction(cadr(r))?(__emit_char("("),emit_denominators(r),__emit_char(")")):emit_denominators(r)},emit_fraction=function(r,e){var t,o,s,n,p;for(t=0,n=0,save(),p3=one,p4=one,isrational(cadr(r))&&(push(cadr(r)),mp_numerator(),absval(),p3=pop(),push(cadr(r)),mp_denominator(),p4=pop()),isdouble(cadr(r))&&(push(cadr(r)),absval(),p3=pop()),n=isplusone(p3)?0:1,p1=cdr(r),isNumericAtom(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)||n++,p1=cdr(p1);for(p=emit_x,o=yindex,t=0,isplusone(p3)||(emit_number(p3,0),t++),p1=cdr(r),isNumericAtom(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)||(t>0&&__emit_char(" "),1===n?emit_expr(p2):emit_factor(p2),t++),p1=cdr(p1);for(0===t&&__emit_char("1"),s=yindex,t=0,isplusone(p4)||(emit_number(p4,0),t++,e++),p1=cdr(r),isrational(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)&&(t>0&&__emit_char(" "),emit_denominator(p2,e),t++),p1=cdr(p1);return fixup_fraction(p,o,s),restore()},emit_numerators=function(r){var e;for(save(),e=0,p1=one,r=cdr(r),isrational(car(r))?(push(car(r)),mp_numerator(),absval(),p1=pop(),r=cdr(r)):isdouble(car(r))&&(push(car(r)),absval(),p1=pop(),r=cdr(r)),e=0,isplusone(p1)||(emit_number(p1,0),e++);iscons(r);)isdenominator(car(r))||(e>0&&__emit_char(" "),emit_factor(car(r)),e++),r=cdr(r);return 0===e&&__emit_char("1"),restore()},emit_denominators=function(r){var e;for(save(),e=0,r=cdr(r),isfraction(car(r))&&(push(car(r)),mp_denominator(),p1=pop(),emit_number(p1,0),e++,r=cdr(r));iscons(r);)isdenominator(car(r))&&(e>0&&__emit_char(" "),emit_denominator(car(r),0),e++),r=cdr(r);return restore()},emit_factor=function(r){istensor(r)?emit_flat_tensor(r):isdouble(r)?emit_number(r,0):car(r)!==symbol(ADD)&&car(r)!==symbol(MULTIPLY)?car(r)!==symbol(POWER)?iscons(r)?emit_function(r):isNumericAtom(r)?0===level?emit_numerical_fraction(r):emit_number(r,0):issymbol(r)?emit_symbol(r):isstr(r)&&emit_string(r):emit_power(r):emit_subexpr(r)},emit_numerical_fraction=function(r){var e,t,o;return save(),push(r),mp_numerator(),absval(),p3=pop(),push(r),mp_denominator(),p4=pop(),isplusone(p4)?(emit_number(p3,0),void restore()):(o=emit_x,e=yindex,emit_number(p3,0),t=yindex,emit_number(p4,0),fixup_fraction(o,e,t),restore())},isfactor=function(r){return iscons(r)&&car(r)!==symbol(ADD)&&car(r)!==symbol(MULTIPLY)&&car(r)!==symbol(POWER)||issymbol(r)?1:isfraction(r)||isnegativenumber(r)?0:isNumericAtom(r)?1:0},emit_power=function(r){var e,t,o;return e=0,t=0,o=0,cadr(r)===symbol(E)?(__emit_str("exp("),emit_expr(caddr(r)),void __emit_char(")")):level>0?void(isminusone(caddr(r))?(__emit_char("1"),__emit_char("/"),isfactor(cadr(r))?emit_factor(cadr(r)):emit_subexpr(cadr(r))):(isfactor(cadr(r))?emit_factor(cadr(r)):emit_subexpr(cadr(r)),__emit_char("^"),isfactor(caddr(r))?emit_factor(caddr(r)):emit_subexpr(caddr(r)))):__is_negative(caddr(r))?(o=emit_x,e=yindex,__emit_char("1"),t=yindex,emit_denominator(r,1),void fixup_fraction(o,e,t)):(e=yindex,isfactor(cadr(r))?emit_factor(cadr(r)):emit_subexpr(cadr(r)),t=yindex,level++,emit_expr(caddr(r)),level--,fixup_power(e,t))},emit_denominator=function(r,e){var t,o;if(!isminusone(caddr(r)))return t=yindex,isfactor(cadr(r))?emit_factor(cadr(r)):emit_subexpr(cadr(r)),o=yindex,level++,emit_unsigned_expr(caddr(r)),level--,fixup_power(t,o);1===e?emit_expr(cadr(r)):emit_factor(cadr(r))},emit_function=function(r){if(car(r)===symbol(INDEX)&&issymbol(cadr(r)))emit_index_function(r);else{if(car(r)!==symbol(FACTORIAL)){if(car(r)===symbol(DERIVATIVE)?__emit_char("d"):emit_symbol(car(r)),__emit_char("("),r=cdr(r),iscons(r))for(emit_expr(car(r)),r=cdr(r);iscons(r);)__emit_char(","),emit_expr(car(r)),r=cdr(r);return __emit_char(")")}emit_factorial_function(r)}},emit_index_function=function(r){if(r=cdr(r),caar(r)===symbol(ADD)||caar(r)===symbol(MULTIPLY)||caar(r)===symbol(POWER)||caar(r)===symbol(FACTORIAL)?emit_subexpr(car(r)):emit_expr(car(r)),__emit_char("["),r=cdr(r),iscons(r))for(emit_expr(car(r)),r=cdr(r);iscons(r);)__emit_char(","),emit_expr(car(r)),r=cdr(r);return __emit_char("]")},emit_factorial_function=function(r){return r=cadr(r),isfraction(r)||car(r)===symbol(ADD)||car(r)===symbol(MULTIPLY)||car(r)===symbol(POWER)||car(r)===symbol(FACTORIAL)?emit_subexpr(r):emit_expr(r),__emit_char("!")},emit_subexpr=function(r){return __emit_char("("),emit_expr(r),__emit_char(")")},emit_symbol=function(r){var e,t,o,s,n;if(e=0,r!==symbol(E)){for(n=[],e=t=0,s=(o=get_printname(r)).length;0<=s?t<s:t>s;e=0<=s?++t:--t)n.push(__emit_char(o[e]));return n}__emit_str("exp(1)")},emit_string=function(r){var e,t,o,s;for(e=0,o=r.str,__emit_char('"'),e=t=0,s=o.length;0<=s?t<s:t>s;e=0<=s?++t:--t)__emit_char(o[e]);return __emit_char('"')},fixup_fraction=function(r,e,t){var o,s,n,p,a,i,u,l,c,d,_;for(o=0,u=0,s=0,l=0,d=0,n=0,c=0,_=0,[s,l,d]=get_size(e,t),[n,c,_]=get_size(t,yindex),o=c>l?(c-l)/2:0,o++,move(e,t,o,-(d+s-1)-1),o=c>l?-l:(l-c)/2-l,o++,move(t,yindex,o,1-_),u=c>l?c:l,emit_x=r,i=[],p=0,a=u+=2;0<=a?p<a:p>a;0<=a?++p:--p)i.push(__emit_char("-"));return i},fixup_power=function(r,e){var t,o,s,n,p,a,i;return t=0,o=0,n=0,a=0,s=0,p=0,i=0,[o,n,a]=get_size(r,e),[s,p,i]=get_size(e,yindex),t=-i-s+1,move(e,yindex,0,t+=a-1)},move=function(r,e,t,o){var s,n,p,a,i;for(s=0,i=[],s=n=p=r,a=e;p<=a?n<a:n>a;s=p<=a?++n:--n)chartab[s].x+=t,i.push(chartab[s].y+=o);return i},get_size=function(r,e){var t,o,s,n,p,a,i,u;for(t=0,p=chartab[r].x,s=chartab[r].x,a=chartab[r].y,n=chartab[r].y,t=o=i=r+1,u=e;i<=u?o<u:o>u;t=i<=u?++o:--o)chartab[t].x<p&&(p=chartab[t].x),chartab[t].x>s&&(s=chartab[t].x),chartab[t].y<a&&(a=chartab[t].y),chartab[t].y>n&&(n=chartab[t].y);return[n-a+1,s-p+1,a]},displaychar=function(r){return __emit_char(r)},__emit_char=function(r){if(yindex!==YMAX)return chartab[yindex],chartab[yindex].c=r,chartab[yindex].x=emit_x,chartab[yindex].y=0,yindex++,emit_x++},__emit_str=function(r){var e,t,o,s;for(e=0,s=[],e=t=0,o=r.length;0<=o?t<o:t>o;e=0<=o?++t:--t)s.push(__emit_char(r[e]));return s},emit_number=function(r,e){var t,o,s,n,p,a,i,u,l,c;switch(c="",t=0,r.k){case NUM:for("-"===(c=r.q.a.toString())[0]&&0===e&&(c=c.substring(1)),t=o=0,p=c.length;0<=p?o<p:o>p;t=0<=p?++o:--o)__emit_char(c[t]);if("1"===(c=r.q.b.toString()))break;for(__emit_char("/"),u=[],t=s=0,a=c.length;0<=a?s<a:s>a;t=0<=a?++s:--s)u.push(__emit_char(c[t]));return u;case DOUBLE:for("-"===(c=doubleToReasonableString(r.d))[0]&&0===e&&(c=c.substring(1)),l=[],t=n=0,i=c.length;0<=i?n<i:n>i;t=0<=i?++n:--n)l.push(__emit_char(c[t]));return l}},cmpGlyphs=function(r,e){return r.y<e.y?-1:r.y>e.y?1:r.x<e.x?-1:r.x>e.x?1:0},print_glyphs=function(){var r,e,t,o,s,n,p;for(e=0,r="",(s=chartab.slice(0,yindex)).sort(cmpGlyphs),n=0,p=(chartab=[].concat(s).concat(chartab.slice(yindex)))[0].y,e=t=0,o=yindex;0<=o?t<o:t>o;e=0<=o?++t:--t){for(;chartab[e].y>p;)r+=printchar("\n"),n=0,p++;for(;chartab[e].x>n;)r+=printchar_nowrap(" "),n++;r+=printchar_nowrap(chartab[e].c),n++}return r},buffer="",getdisplaystr=function(){return yindex=0,level=0,emit_x=0,emit_expr(pop()),fill_buf(),buffer},fill_buf=function(){var r,e,t,o,s,n,p,a;for(n=buffer,o=0,r=0,(s=chartab.slice(0,yindex)).sort(cmpGlyphs),p=0,a=(chartab=[].concat(s).concat(chartab.slice(yindex)))[0].y,r=e=0,t=yindex;0<=t?e<t:e>t;r=0<=t?++e:--e){for(;chartab[r].y>a;)n[o++]="\n",p=0,a++;for(;chartab[r].x>p;)n[o++]=" ",p++;n[o++]=chartab[r].c,p++}return n[o++]="\n"},N=100,oneElement=function(){class r{}return r.prototype.x=0,r.prototype.y=0,r.prototype.h=0,r.prototype.w=0,r.prototype.index=0,r.prototype.count=0,r}.call(this),elem=[],elelmIndex=j1=0;j1<1e4;elelmIndex=++j1)elem[elelmIndex]=new oneElement;SPACE_BETWEEN_COLUMNS=3,SPACE_BETWEEN_ROWS=1,emit_tensor=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x;if(p=0,c=0,t=0,o=0,s=0,n=0,b=0,e=0,r.tensor.ndim>2)emit_flat_tensor(r);else{if(!((u=(d=r.tensor.dim[0])*(c=2===r.tensor.ndim?r.tensor.dim[1]:1))>N)){for(v=emit_x,p=a=0,m=u;0<=m?a<m:a>m;p=0<=m?++a:--a)elem[p].index=yindex,elem[p].x=emit_x,emit_expr(r.tensor.elem[p]),elem[p].count=yindex-elem[p].index,[elem[p].h,elem[p].w,elem[p].y]=get_size(elem[p].index,yindex);for(s=0,n=0,p=i=0,f=u;0<=f?i<f:i>f;p=0<=f?++i:--i)elem[p].h>s&&(s=elem[p].h),elem[p].w>n&&(n=elem[p].w);for(y=c*n+(c-1)*SPACE_BETWEEN_COLUMNS,x=-(d*s+(d-1)*SPACE_BETWEEN_ROWS)/2,b=l=0,h=d;0<=h?l<h:l>h;b=0<=h?++l:--l)for(e=_=0,g=c;0<=g?_<g:_>g;e=0<=g?++_:--_)t=v-elem[p=b*c+e].x,o=x-elem[p].y,move(elem[p].index,elem[p].index+elem[p].count,t,o),t=0,e>0&&(t=e*(n+SPACE_BETWEEN_COLUMNS)),o=0,b>0&&(o=b*(s+SPACE_BETWEEN_ROWS)),t+=(n-elem[p].w)/2,o+=(s-elem[p].h)/2,move(elem[p].index,elem[p].index+elem[p].count,t,o);return emit_x=v+y}emit_flat_tensor(r)}},emit_flat_tensor=function(r){return emit_tensor_inner(r,0,0)},emit_tensor_inner=function(r,e,t){var o,s,n;for(o=0,__emit_char("("),o=s=0,n=r.tensor.dim[e];0<=n?s<n:s>n;o=0<=n?++s:--s)e+1===r.tensor.ndim?(emit_expr(r.tensor.elem[t]),t+=1):t=emit_tensor_inner(r,e+1,t),o+1<r.tensor.dim[e]&&__emit_char(",");return __emit_char(")"),t},Eval_product=function(){var r,e,t,o,s,n,p,a,i;if(e=0,r=cadr(p1),t=caddr(p1),issymbol(t)||stop("sum: 2nd arg?"),push(cadddr(p1)),Eval(),o=pop_integer(),isNaN(o))push(p1);else{if(push(caddddr(p1)),Eval(),s=pop_integer(),!isNaN(s)){for(p=get_binding(t),push_integer(1),e=n=a=o,i=s;a<=i?n<=i:n>=i;e=a<=i?++n:--n)push_integer(e),p5=pop(),set_binding(t,p5),push(r),Eval(),DEBUG&&(console.log("product - factor 1: "+stack[tos-1].toString()),console.log("product - factor 2: "+stack[tos-2].toString())),multiply(),DEBUG&&console.log("product - result: "+stack[tos-1].toString());return set_binding(t,p)}push(p1)}},qadd=function(){var r,e,t,o,s,n,p,a;if(n=pop(),s=pop(),e=mmul(s.q.a,n.q.b),t=mmul(s.q.b,n.q.a),p=madd(e,t),!MZERO(p))return o=mmul(s.q.b,n.q.b),r=mgcd(p,o),r=makeSignSameAs(r,o),(a=new U).k=NUM,a.q.a=mdiv(p,r),a.q.b=mdiv(o,r),push(a);push(zero)},qdiv=function(){var r,e,t;return save(),p2=pop(),p1=pop(),MZERO(p2.q.a)&&stop("divide by zero"),MZERO(p1.q.a)?(push(zero),void restore()):(r=mmul(p1.q.a,p2.q.b),e=mmul(p1.q.b,p2.q.a),t=mgcd(r,e),t=makeSignSameAs(t,e),(p1=new U).k=NUM,p1.q.a=mdiv(r,t),p1.q.b=mdiv(e,t),push(p1),restore())},qmul=function(){var r,e,t;return save(),p2=pop(),p1=pop(),MZERO(p1.q.a)||MZERO(p2.q.a)?(push(zero),void restore()):(r=mmul(p1.q.a,p2.q.a),e=mmul(p1.q.b,p2.q.b),t=mgcd(r,e),t=makeSignSameAs(t,e),(p1=new U).k=NUM,p1.q.a=mdiv(r,t),p1.q.b=mdiv(e,t),push(p1),restore())},qpow=function(){return save(),qpowf(),restore()},qpowf=function(){var r,e,t,o,s,n;if(t=0,p2=pop(),p1=pop(),isplusone(p1)||isZeroAtomOrTensor(p2))push_integer(1);else if(isminusone(p1)&&isoneovertwo(p2))push(imaginaryunit);else{if(isZeroAtomOrTensor(p1))return isnegativenumber(p2)&&stop("divide by zero"),void push(zero);if(!isplusone(p2))return isinteger(p2)?(push(p2),t=pop_integer(),isNaN(t)?(push_symbol(POWER),push(p1),push(p2),void list(3)):(s=mpow(p1.q.a,Math.abs(t)),n=mpow(p1.q.b,Math.abs(t)),t<0&&(o=s,s=makeSignSameAs(s=n,n=o),n=makePositive(n)),(p3=new U).k=NUM,p3.q.a=s,p3.q.b=n,void push(p3))):isminusone(p1)?(push(p2),void normalize_angle()):isnegativenumber(p1)?(push(p1),negate(),push(p2),qpow(),push_integer(-1),push(p2),qpow(),void multiply()):isinteger(p1)?is_small_integer(p1)?(push(p1),push(p2),void quickfactor()):isSmall(p2.q.a)&&isSmall(p2.q.b)?(r=p2.q.a,e=p2.q.b,0===(s=mroot(p1.q.a,e))?(push_symbol(POWER),push(p1),push(p2),void list(3)):(n=mpow(s,r),(p3=new U).k=NUM,p2.q.a.isNegative()?(p3.q.a=bigInt(1),p3.q.b=n):(p3.q.a=n,p3.q.b=bigInt(1)),push(p3))):(push_symbol(POWER),push(p1),push(p2),void list(3)):(push(p1),mp_numerator(),push(p2),qpow(),push(p1),mp_denominator(),push(p2),negate(),qpow(),void multiply());push(p1)}},normalize_angle=function(){return save(),p1=pop(),isinteger(p1)?(p1.q.a.isOdd()?push_integer(-1):push_integer(1),void restore()):(push(p1),bignum_truncate(),p2=pop(),isnegativenumber(p1)&&(push(p2),push_integer(-1),add(),p2=pop()),push(p1),push(p2),subtract(),p3=pop(),push_symbol(POWER),push_integer(-1),push(p3),list(3),p2.q.a.isOdd()&&negate(),restore())},is_small_integer=function(r){return isSmall(r.q.a)},quickfactor=function(){var r,e,t,o,s,n;for(e=0,save(),p2=pop(),p1=pop(),r=tos,push(p1),factor_small_number(),n=r,e=t=0,s=o=tos-r;t<s;e=t+=2)push(stack[n+e]),push(stack[n+e+1]),push(p2),multiply(),quickpower();return multiply_all(tos-r-o),p1=pop(),moveTos(r),push(p1),restore()},quickpower=function(){var r;return save(),p2=pop(),p1=pop(),push(p2),bignum_truncate(),p3=pop(),push(p2),push(p3),subtract(),p4=pop(),isZeroAtomOrTensor(p4)||(push_symbol(POWER),push(p1),push(p4),list(3)),push(p3),r=pop_integer(),isNaN(r)?(push_symbol(POWER),push(p1),push(p3),list(3),void restore()):0!==r?(push(p1),bignum_power_number(r),restore()):void restore()},Eval_quotient=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p1=pop())===symbol(NIL)&&(p1=symbol(SYMBOL_X)),push(p1),divpoly()},divpoly=function(){var r,e,t,o,s,n,p,a,i;for(o=0,n=0,i=0,save(),p3=pop(),p2=pop(),p1=pop(),t=tos,r=tos,push(p1),push(p3),n=coeff()-1,e=tos,push(p2),push(p3),i=n-(p=coeff()-1),push_integer(0),p5=pop();i>=0;){for(push(stack[r+n]),push(stack[e+p]),divide(),p4=pop(),o=s=0,a=p;0<=a?s<=a:s>=a;o=0<=a?++s:--s)push(stack[r+i+o]),push(stack[e+o]),push(p4),multiply(),subtract(),stack[r+i+o]=pop();push(p5),push(p4),push(p3),push_integer(i),power(),multiply(),add(),p5=pop(),n--,i--}return moveTos(t),push(p5),restore()},Eval_rationalize=function(){return push(cadr(p1)),Eval(),rationalize()},rationalize=function(){var r;return r=expanding,yyrationalize(),expanding=r},yyrationalize=function(){var r,e,t;if(t=pop(),istensor(t))__rationalize_tensor(t);else{if(expanding=0,car(t)===symbol(ADD)){for(DEBUG&&(printf("rationalize: this is the input expr:\n"),printline(t)),push(one),multiply_denominators(t),r=pop(),DEBUG&&(printf("rationalize: this is the common denominator:\n"),printline(r)),push(zero),e=cdr(t);iscons(e);)push(r),push(car(e)),multiply(),add(),e=cdr(e);return DEBUG&&(printf("rationalize: original expr times common denominator:\n"),printline(stack[tos-1])),Condense(),DEBUG&&(printf("rationalize: after factoring:\n"),printline(stack[tos-1])),push(r),divide(),DEBUG?(printf("rationalize: after dividing by common denom. (and we're done):\n"),printline(stack[tos-1])):void 0}push(t)}},multiply_denominators=function(r){var e;if(car(r)===symbol(ADD)){for(r=cdr(r),e=[];iscons(r);)multiply_denominators_term(car(r)),e.push(r=cdr(r));return e}return multiply_denominators_term(r)},multiply_denominators_term=function(r){var e;if(car(r)===symbol(MULTIPLY)){for(r=cdr(r),e=[];iscons(r);)multiply_denominators_factor(car(r)),e.push(r=cdr(r));return e}return multiply_denominators_factor(r)},multiply_denominators_factor=function(r){if(car(r)===symbol(POWER))return push(r),r=caddr(r),isnegativenumber(r)||car(r)===symbol(MULTIPLY)&&isnegativenumber(cadr(r))?(inverse(),void __lcm()):pop()},__rationalize_tensor=function(r){var e,t,o;if(e=0,push(r),Eval(),r=pop(),istensor(r)){for(e=t=0,o=r.tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)push(r.tensor.elem[e]),rationalize(),r.tensor.elem[e]=pop();return check_tensor_dimensions(r),push(r)}push(r)},__lcm=function(){return save(),p1=pop(),p2=pop(),push(p1),push(p2),multiply(),push(p1),push(p2),gcd(),divide(),restore()},Eval_real=function(){return push(cadr(p1)),Eval(),real()},real=function(){return save(),rect(),p1=pop(),push(p1),push(p1),conjugate(),add(),push_integer(2),divide(),restore()},DEBUG_RECT=!1,Eval_rect=function(){return push(cadr(p1)),Eval(),rect()},rect=function(){var r;if(save(),r=p1=pop(),DEBUG_RECT&&console.log("RECT of "+r),DEBUG_RECT&&console.log("any clock forms in : "+r+" ? "+findPossibleClockForm(r)),issymbol(p1))DEBUG_RECT&&console.log(" rect: simple symbol: "+r),isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))?(push_symbol(YYRECT),push(p1),list(2)):push(p1);else if(isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))||findPossibleExponentialForm(p1)||findPossibleClockForm(p1)||Find(p1,symbol(SIN))&&Find(p1,symbol(COS))&&Find(p1,imaginaryunit))if(car(p1)===symbol(MULTIPLY)&&isimaginaryunit(cadr(p1))&&!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))))push(p1);else if(car(p1)===symbol(ADD))for(DEBUG_RECT&&console.log(" rect - "+r+" is a sum "),push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),rect(),add(),p1=cdr(p1);else DEBUG_RECT&&console.log(" rect - "+r+" is NOT a sum "),push(p1),abs(),DEBUG_RECT&&console.log(" rect - "+r+" abs: "+stack[tos-1].toString()),push(p1),arg(),DEBUG_RECT&&console.log(" rect - "+r+" arg of "+p1+" : "+stack[tos-1].toString()),p1=pop(),push(p1),cosine(),DEBUG_RECT&&console.log(" rect - "+r+" cosine: "+stack[tos-1].toString()),push(imaginaryunit),push(p1),sine(),DEBUG_RECT&&console.log(" rect - "+r+" sine: "+stack[tos-1].toString()),multiply(),DEBUG_RECT&&console.log(" rect - "+r+" i * sine: "+stack[tos-1].toString()),add(),DEBUG_RECT&&console.log(" rect - "+r+" cos + i * sine: "+stack[tos-1].toString()),multiply();else DEBUG_RECT&&console.log(" rect: simple symbol: "+r),push(p1);if(restore(),DEBUG_RECT)return console.log("rect of "+r+" : "+stack[tos-1])},show_power_debug=!1,performing_roots=!1,Eval_roots=function(){return p2=cadr(p1),car(p2)===symbol(SETQ)||car(p2)===symbol(TESTEQ)?(push(cadr(p2)),Eval(),push(caddr(p2)),Eval(),subtract()):(push(p2),Eval(),p2=pop(),car(p2)===symbol(SETQ)||car(p2)===symbol(TESTEQ)?(push(cadr(p2)),Eval(),push(caddr(p2)),Eval(),subtract()):push(p2)),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2)||stop("roots: 1st argument is not a polynomial"),push(p1),push(p2),roots()},hasImaginaryCoeff=function(r){var e,t,o;for(t=!1,e=o=r;o>0;e=o+=-1)if(iscomplexnumber(stack[tos-e])){t=!0;break}return t},isSimpleRoot=function(r){var e,t,o;if(r>2){for(t=!0,isZeroAtomOrTensor(stack[tos-r])&&(t=!1),e=o=r-1;o>1;e=o+=-1)if(!isZeroAtomOrTensor(stack[tos-e])){t=!1;break}}else t=!1;return t},normalisedCoeff=function(){var r,e,t,o,s,n,p,a;for(t=coeff(),r=stack[tos-1],n=[],e=o=1,p=t;1<=p?o<=p:o>=p;e=1<=p?++o:--o)n.push(pop());for(e=s=a=t-1;a<=0?s<=0:s>=0;e=a<=0?++s:--s)push(n[e]),push(r),divide();return t},roots=function(){var r,e,t,o,s,n,p,a;if(e=0,save(),recursionLevelNestedRadicalsRemoval>1)return pop(),pop(),push(symbol(NIL)),void restore();if(performing_roots=!0,r=tos-2,DEBUG&&console.log("checking if "+stack[tos-1].toString()+" is a case of simple roots"),p2=pop(),p1=pop(),push(p1),push(p2),push(p1),push(p2),t=normalisedCoeff(),isSimpleRoot(t)?(DEBUG&&console.log("yes, "+stack[tos-1].toString()+" is a case of simple roots"),s=stack[tos-t],n=stack[tos-1],moveTos(tos-t),pop(),pop(),getSimpleRoots(t,n,s)):(moveTos(tos-t),roots2()),0==(p=tos-r)&&stop("roots: the polynomial is not factorable, try nroots"),1===p)return performing_roots=!1,void restore();for(sort_stack(p),(p1=alloc_tensor(p)).tensor.ndim=1,p1.tensor.dim[0]=p,e=o=0,a=p;0<=a?o<a:o>a;e=0<=a?++o:--o)p1.tensor.elem[e]=stack[r+e];return moveTos(r),push(p1),restore(),performing_roots=!1},getSimpleRoots=function(r,e,t){var o,s,n,p,a,i,u;if(DEBUG&&console.log("getSimpleRoots"),save(),r-=1,push(t),push_rational(1,r),power(),push(e),push_rational(1,r),power(),divide(),s=pop(),r%2==0)for(u=n=1,a=r;n<=a;u=n+=2)push(s),push_integer(-1),push_rational(u,r),power(),multiply(),o=pop(),push(o),push(o),negate();else for(u=p=1,i=r;1<=i?p<=i:p>=i;u=1<=i?++p:--p)push(s),push_integer(-1),push_rational(u,r),power(),multiply(),u%2==0&&negate();return restore()},roots2=function(){var r;if(save(),p2=pop(),p1=pop(),push(p1),push(p2),push(p1),push(p2),r=normalisedCoeff(),hasImaginaryCoeff(r)?(moveTos(tos-r),pop(),pop()):(moveTos(tos-r),factorpoly(),p1=pop()),car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),roots3(),p1=cdr(p1);else push(p1),push(p2),roots3();return restore()},roots3=function(){var r;return save(),p2=pop(),p1=pop(),car(p1)===symbol(POWER)&&ispolyexpandedform(cadr(p1),p2)&&isposint(caddr(p1))?(push(cadr(p1)),push(p2),r=normalisedCoeff(),mini_solve(r)):ispolyexpandedform(p1,p2)&&(push(p1),push(p2),r=normalisedCoeff(),mini_solve(r)),restore()},mini_solve=function(r){var e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M,R,L,k,q,D,P,U,w,B,G,C,F,Y,X,W,z,Z,V,$,H,Q,j,J,K,rr,er,tr,or,sr,nr,pr,ar,ir,ur,lr,cr,dr;if(save(),2===r)return p3=pop(),p4=pop(),push(p4),push(p3),divide(),negate(),void restore();if(3===r)return p3=pop(),p4=pop(),p5=pop(),push(p4),push_integer(2),power(),push_integer(4),push(p3),multiply(),push(p5),multiply(),subtract(),push_rational(1,2),power(),p6=pop(),push(p6),push(p4),subtract(),push(p3),push_integer(2),multiply(),divide(),push(p6),push(p4),add(),negate(),push(p3),divide(),push_rational(1,2),multiply(),void restore();if(4===r||5===r){if(p3=pop(),p4=pop(),p5=pop(),p6=pop(),push(p5),push(p5),multiply(),N=pop(),push(N),push(p5),multiply(),M=pop(),push(p4),push(p4),multiply(),T=pop(),push(T),push(p4),multiply(),O=pop(),push(O),push(p6),multiply(),S=pop(),push(S),push_integer(-4),multiply(),w=pop(),push(O),push_integer(2),multiply(),s=pop(),push(p3),push(p3),multiply(),g=pop(),push(g),push(p3),multiply(),v=pop(),push_integer(3),push(p3),multiply(),n=pop(),push(g),push(p6),multiply(),b=pop(),push(b),push(p6),multiply(),y=pop(),push(b),push_integer(27),multiply(),o=pop(),push(y),push_integer(-27),multiply(),P=pop(),push(n),push_integer(2),multiply(),pop(),push(p3),push(p5),multiply(),A=pop(),push(A),push(p4),multiply(),x=pop(),push(x),push(p6),multiply(),E=pop(),push(A),push_integer(3),multiply(),a=pop(),push_integer(-4),push(p3),push(M),multiply(),multiply(),U=pop(),push(x),push_integer(9),multiply(),negate(),B=pop(),push(E),push_integer(18),multiply(),t=pop(),push(T),push(a),subtract(),_=pop(),push(T),push(N),multiply(),I=pop(),push(p4),negate(),push(n),divide(),G=pop(),4===r){if(DEBUG&&console.log(">>>>>>>>>>>>>>>> actually using cubic formula <<<<<<<<<<<<<<< "),DEBUG&&console.log("cubic: D0: "+_.toString()),push(_),push_integer(3),power(),push_integer(4),multiply(),i=pop(),push(_),simplify(),absValFloat(),m=pop(),DEBUG&&console.log("cubic: D0 as float: "+m.toString()),push(t),push(w),push(I),push(U),push(P),add(),add(),add(),add(),simplify(),absValFloat(),L=pop(),DEBUG&&console.log("cubic: DETERMINANT: "+L.toString()),push(s),push(B),push(o),add(),add(),f=pop(),DEBUG&&console.log("cubic: D1: "+f.toString()),push(f),push_integer(2),power(),push(i),subtract(),push_rational(1,2),power(),simplify(),h=pop(),isZeroAtomOrTensor(L))return isZeroAtomOrTensor(m)?(DEBUG&&console.log(" cubic: DETERMINANT IS ZERO and delta0 is zero"),push(G),void restore()):(DEBUG&&console.log(" cubic: DETERMINANT IS ZERO and delta0 is not zero"),push(p3),push(p6),push_integer(9),multiply(),multiply(),push(p4),push(p5),multiply(),subtract(),push(_),push_integer(2),multiply(),divide(),lr=pop(),push(lr),push(lr),push(x),push_integer(4),multiply(),push(p3),push(p3),push(p6),push_integer(9),multiply(),multiply(),multiply(),negate(),push(O),negate(),add(),add(),push(p3),push(_),multiply(),divide(),void restore());for(e=!1,Q=!1;!e;)push(h),Q&&negate(),push(f),add(),push_rational(1,2),multiply(),push_rational(1,3),power(),simplify(),l=pop(),DEBUG&&console.log("cubic: C: "+l.toString()),push(l),simplify(),absValFloat(),d=pop(),DEBUG&&console.log("cubic: C as absval and float: "+d.toString()),isZeroAtomOrTensor(d)?(DEBUG&&console.log(" cubic: C IS ZERO flipping the sign"),Q=!0):e=!0;return push(l),push(n),multiply(),p=pop(),push(p),push_integer(2),multiply(),u=pop(),push(imaginaryunit),push_integer(3),push_rational(1,2),power(),multiply(),j=pop(),push_integer(1),push(j),add(),nr=pop(),push_integer(1),push(j),subtract(),sr=pop(),push(l),push(n),divide(),c=pop(),push(G),push(c),negate(),push(_),push(p),divide(),negate(),add(),add(),simplify(),push(G),push(c),push(nr),multiply(),push_integer(2),divide(),push(sr),push(_),multiply(),push(u),divide(),add(),add(),simplify(),push(G),push(c),push(sr),multiply(),push_integer(2),divide(),push(nr),push(_),multiply(),push(u),divide(),add(),add(),simplify(),void restore()}if(5===r){if(DEBUG&&console.log(">>>>>>>>>>>>>>>> actually using quartic formula <<<<<<<<<<<<<<< "),p7=pop(),isZeroAtomOrTensor(p4)&&isZeroAtomOrTensor(p6)&&!isZeroAtomOrTensor(p5)&&!isZeroAtomOrTensor(p7)){for(DEBUG&&console.log("biquadratic case"),push(p3),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push(p5),push(symbol(SECRETX)),multiply(),push(p7),add(),add(),push(symbol(SECRETX)),roots(),J=0,K=(pr=pop().tensor.elem).length;J<K;J++)H=pr[J],push(H),push_rational(1,2),power(),simplify(),push(H),push_rational(1,2),power(),negate(),simplify();return void restore()}if(push(p6),push(p6),multiply(),R=pop(),push(p7),push(p7),multiply(),k=pop(),push(k),push(p7),multiply(),q=pop(),push_integer(256),push(v),push(q),multiply(),multiply(),push_integer(-192),push(b),push(k),push(p4),multiply(),multiply(),multiply(),push_integer(-128),push(g),push(N),push(k),multiply(),multiply(),multiply(),push_integer(144),push(y),push(p5),push(p7),multiply(),multiply(),multiply(),push(P),push(R),multiply(),push_integer(144),push(x),push(p4),push(k),multiply(),multiply(),multiply(),push_integer(-6),push(p3),push(T),push(R),push(p7),multiply(),multiply(),multiply(),multiply(),push_integer(-80),push(E),push(p5),push(p7),multiply(),multiply(),multiply(),push_integer(18),push(E),push(R),multiply(),multiply(),push_integer(16),push(A),push(M),push(p7),multiply(),multiply(),multiply(),push_integer(-4),push(A),push(N),push(R),multiply(),multiply(),multiply(),push_integer(-27),push(O),push(p4),push(k),multiply(),multiply(),multiply(),push_integer(18),push(S),push(p5),push(p7),multiply(),multiply(),multiply(),push(w),push(R),multiply(),push_integer(-4),push(I),push(p5),push(p7),multiply(),multiply(),multiply(),push(I),push(R),multiply(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),L=pop(),DEBUG&&console.log("R_determinant: "+L.toString()),push(N),push_integer(-3),push(p4),push(p6),multiply(),multiply(),push_integer(12),push(p3),push(p7),multiply(),multiply(),add(),add(),_=pop(),DEBUG&&console.log("R_DELTA0: "+_.toString()),push_integer(2),push(M),multiply(),push_integer(-9),push(p4),push(p5),push(p6),multiply(),multiply(),multiply(),push_integer(27),push(T),push(p7),multiply(),multiply(),push_integer(27),push(p3),push(R),multiply(),multiply(),push_integer(-72),push(A),push(p7),multiply(),multiply(),add(),add(),add(),add(),f=pop(),DEBUG&&console.log("R_DELTA1: "+f.toString()),push_integer(8),push(A),multiply(),push_integer(-3),push(T),multiply(),add(),push_integer(8),push(g),multiply(),divide(),C=pop(),DEBUG&&console.log("p: "+C.toString()),push(O),push_integer(-4),push(x),multiply(),push_integer(8),push(b),multiply(),add(),add(),push_integer(8),push(v),multiply(),divide(),F=pop(),DEBUG&&console.log("q: "+F.toString()),DEBUG&&console.log("tos 1 "+tos),isZeroAtomOrTensor(p4)){for(C=p5,F=p6,Y=p7,push_rational(5,2),push(C),multiply(),z=pop(),push_integer(2),push(C),push_integer(2),power(),multiply(),push(Y),subtract(),Z=pop(),push(C),push_integer(3),power(),push_integer(2),divide(),push_rational(-1,2),push(C),push(Y),multiply(),multiply(),push_rational(-1,8),push(F),push_integer(2),power(),multiply(),add(),add(),V=pop(),push(symbol(SECRETX)),push_integer(3),power(),push(z),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push(Z),push(symbol(SECRETX)),multiply(),push(V),add(),add(),add(),DEBUG&&console.log("resolventCubic: "+stack[tos-1].toString()),push(symbol(SECRETX)),roots(),ur=pop(),DEBUG&&console.log("resolventCubicSolutions: "+ur),D=null,or=0,er=(ir=ur.tensor.elem).length;or<er;or++)if(H=ir[or],DEBUG&&console.log("examining solution: "+H),push(H),push_integer(2),multiply(),push(C),add(),absValFloat(),dr=pop(),DEBUG&&console.log("abs value is: "+H),!isZeroAtomOrTensor(dr)){D=H;break}return DEBUG&&console.log("chosen solution: "+D),push(D),push_integer(2),multiply(),push(C),add(),push_rational(1,2),power(),simplify(),cr=pop(),push(F),push_integer(2),multiply(),push(cr),divide(),simplify(),W=pop(),push(C),push_integer(3),multiply(),push(D),push_integer(2),multiply(),add(),X=pop(),push(cr),push(X),push(W),add(),negate(),push_rational(1,2),power(),simplify(),add(),push_integer(2),divide(),push(cr),push(X),push(W),add(),negate(),push_rational(1,2),power(),simplify(),subtract(),push_integer(2),divide(),push(cr),negate(),push(X),push(W),subtract(),negate(),push_rational(1,2),power(),simplify(),add(),push_integer(2),divide(),push(cr),negate(),push(X),push(W),subtract(),negate(),push_rational(1,2),power(),simplify(),subtract(),push_integer(2),divide(),void restore()}for(DEBUG&&console.log("tos 2 "+tos),push_integer(8),push(p5),push(p3),multiply(),multiply(),push_integer(-3),push(p4),push_integer(2),power(),multiply(),add(),push_integer(8),push(p3),push_integer(2),power(),multiply(),divide(),C=pop(),DEBUG&&console.log("p for depressed quartic: "+C.toString()),push(p4),push_integer(3),power(),push_integer(-4),push(p3),push(p4),push(p5),multiply(),multiply(),multiply(),push_integer(8),push(p6),push(p3),push_integer(2),power(),multiply(),multiply(),add(),add(),push_integer(8),push(p3),push_integer(3),power(),multiply(),divide(),F=pop(),DEBUG&&console.log("q for depressed quartic: "+F.toString()),push(p4),push_integer(4),power(),push_integer(-3),multiply(),push_integer(256),push(v),push(p7),multiply(),multiply(),push_integer(-64),push(b),push(p4),multiply(),multiply(),push_integer(16),push(T),push(p3),push(p5),multiply(),multiply(),multiply(),add(),add(),add(),push_integer(256),push(p3),push_integer(4),power(),multiply(),divide(),Y=pop(),DEBUG&&console.log("r for depressed quartic: "+Y.toString()),DEBUG&&console.log("tos 4 "+tos),push(symbol(SECRETX)),push_integer(4),power(),DEBUG&&console.log("4 * x^4: "+stack[tos-1].toString()),push(C),push(symbol(SECRETX)),push_integer(2),power(),multiply(),DEBUG&&console.log("R_p * x^2: "+stack[tos-1].toString()),push(F),push(symbol(SECRETX)),multiply(),DEBUG&&console.log("R_q * x: "+stack[tos-1].toString()),push(Y),DEBUG&&console.log("R_r: "+stack[tos-1].toString()),add(),add(),add(),simplify(),DEBUG&&console.log("solving depressed quartic: "+stack[tos-1].toString()),push(symbol(SECRETX)),roots(),$=pop(),DEBUG&&console.log("depressedSolutions: "+$),tr=0,rr=(ar=$.tensor.elem).length;tr<rr;tr++)H=ar[tr],push(H),push(p4),push_integer(4),push(p3),multiply(),divide(),subtract(),simplify(),DEBUG&&console.log("solution from depressed: "+stack[tos-1].toString());return void restore()}}return moveTos(tos-r),restore()},Eval_round=function(){return push(cadr(p1)),Eval(),yround()},yround=function(){return save(),yyround(),restore()},yyround=function(){var r;return r=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(r=Math.round(p1.d),void push_double(r)):isinteger(p1)?void push(p1):(push(p1),yyfloat(),p1=pop(),push_integer(Math.round(p1.d))):(push_symbol(ROUND),push(p1),void list(2))},T_INTEGER=1001,T_DOUBLE=1002,T_SYMBOL=1003,T_FUNCTION=1004,T_NEWLINE=1006,T_STRING=1007,T_GTEQ=1008,T_LTEQ=1009,T_EQ=1010,T_NEQ=1011,T_QUOTASSIGN=1012,token="",newline_flag=0,meta_mode=0,input_str=0,scan_str=0,token_str=0,token_buf=0,lastFoundSymbol=null,symbolsRightOfAssignment=null,symbolsLeftOfAssignment=null,isSymbolLeftOfAssignment=null,scanningParameters=null,functionInvokationsScanningStack=null,skipRootVariableToBeSolved=!1,assignmentFound=null,scanned="",scan=function(r){return DEBUG&&console.log("#### scanning "+r),lastFoundSymbol=null,symbolsRightOfAssignment=[],symbolsLeftOfAssignment=[],isSymbolLeftOfAssignment=!0,scanningParameters=[],functionInvokationsScanningStack=[""],assignmentFound=!1,scanned=r,meta_mode=0,expanding++,input_str=0,scan_str=0,get_next_token(),""===token?(push(symbol(NIL)),expanding--,0):(scan_stmt(),expanding--,assignmentFound||(symbolsInExpressionsWithoutAssignments=symbolsInExpressionsWithoutAssignments.concat(symbolsLeftOfAssignment)),token_str-input_str)},scan_meta=function(r){return scanned=r,meta_mode=1,expanding++,input_str=0,scan_str=0,get_next_token(),""===token?(push(symbol(NIL)),expanding--,0):(scan_stmt(),expanding--,token_str-input_str)},scan_stmt=function(){var r,e,t,o,s,n,p,a,i;if(scan_relation(),r=!1,token===T_QUOTASSIGN&&(r=!0),(token===T_QUOTASSIGN||"="===token)&&(i=lastFoundSymbol,DEBUG&&console.log("assignment!"),assignmentFound=!0,isSymbolLeftOfAssignment=!1,get_next_token(),push_symbol(SETQ),swap(),r&&push_symbol(QUOTE),scan_relation(),r&&list(2),list(3),isSymbolLeftOfAssignment=!0,codeGen)){if(-1!==(o=symbolsRightOfAssignment.indexOf(i))&&(symbolsRightOfAssignment.splice(o,1),symbolsHavingReassignments.push(i)),DEBUG)for(console.log("locally, "+i+" depends on: "),s=0,n=symbolsRightOfAssignment.length;s<n;s++)t=symbolsRightOfAssignment[s],console.log("  "+t);for(null==symbolsDependencies[i]&&(symbolsDependencies[i]=[]),e=symbolsDependencies[i],a=0,p=symbolsRightOfAssignment.length;a<p;a++)t=symbolsRightOfAssignment[a],-1===e.indexOf(t)&&e.push(t);return symbolsRightOfAssignment=[]}},scan_relation=function(){switch(scan_expression(),token){case T_EQ:return push_symbol(TESTEQ),swap(),get_next_token(),scan_expression(),list(3);case T_NEQ:return push_symbol(NOT),swap(),push_symbol(TESTEQ),swap(),get_next_token(),scan_expression(),list(3),list(2);case T_LTEQ:return push_symbol(TESTLE),swap(),get_next_token(),scan_expression(),list(3);case T_GTEQ:return push_symbol(TESTGE),swap(),get_next_token(),scan_expression(),list(3);case"<":return push_symbol(TESTLT),swap(),get_next_token(),scan_expression(),list(3);case">":return push_symbol(TESTGT),swap(),get_next_token(),scan_expression(),list(3)}},scan_expression=function(){var r;switch(r=tos,token){case"+":get_next_token(),scan_term();break;case"-":get_next_token(),scan_term(),negate();break;default:scan_term()}for(;0===newline_flag&&("+"===token||"-"===token);)"+"===token?(get_next_token(),scan_term()):(get_next_token(),scan_term(),negate());if(tos-r>1)return list(tos-r),push_symbol(ADD),swap(),cons()},is_factor=function(){if(("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===dotprod_unicode)return 1;switch(token){case"*":case"/":return 1;case"(":case T_SYMBOL:case T_FUNCTION:case T_INTEGER:case T_DOUBLE:case T_STRING:return newline_flag?(scan_str=token_str,0):1}return 0},simplify_1_in_products=function(r,e){if(r>e&&isrational(stack[r-1])&&equaln(stack[r-1],1))return pop()},multiply_consecutive_constants=function(r,e){if(r>e+1&&isNumericAtom(stack[r-2])&&isNumericAtom(stack[r-1]))return multiply()},scan_term=function(){var r;for(r=tos,scan_factor(),parse_time_simplifications&&simplify_1_in_products(tos,r);is_factor();)"*"===token?(get_next_token(),scan_factor()):"/"===token?(simplify_1_in_products(tos,r),get_next_token(),scan_factor(),inverse()):("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===dotprod_unicode?(get_next_token(),push_symbol(INNER),swap(),scan_factor(),list(3)):scan_factor(),parse_time_simplifications&&(multiply_consecutive_constants(tos,r),simplify_1_in_products(tos,r));return r===tos?push_integer(1):tos-r>1?(list(tos-r),push_symbol(MULTIPLY),swap(),cons()):void 0},scan_power=function(){if("^"===token)return get_next_token(),push_symbol(POWER),swap(),scan_factor(),list(3)},scan_index=function(r){for(get_next_token(),push_symbol(INDEX),swap(),scan_expression();","===token;)get_next_token(),scan_expression();return"]"!==token&&scan_error("] expected"),get_next_token(),list(tos-r)},scan_factor=function(){var r,e;for(e=tos,r=!1,"("===token?scan_subexpr():token===T_SYMBOL?scan_symbol():token===T_FUNCTION?scan_function_call_with_function_name():"["===token?scan_tensor():token===T_INTEGER?(r=!0,bignum_scan_integer(token_buf),get_next_token()):token===T_DOUBLE?(r=!0,bignum_scan_float(token_buf),get_next_token()):token===T_STRING?scan_string():scan_error("syntax error");"["===token||"("===token&&0===newline_flag&&!r;)"["===token?scan_index(e):"("===token&&scan_function_call_without_function_name();for(;"!"===token;)get_next_token(),push_symbol(FACTORIAL),swap(),list(2);for(;("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===transpose_unicode;)get_next_token(),push_symbol(TRANSPOSE),swap(),list(2);return scan_power()},addSymbolRightOfAssignment=function(r){var e,t,o,s;if(-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(r)&&-1===symbolsRightOfAssignment.indexOf(r)&&-1===symbolsRightOfAssignment.indexOf("'"+r)&&!skipRootVariableToBeSolved){for(DEBUG&&console.log("... adding symbol: "+r+" to the set of the symbols right of assignment"),o="",e=t=1,s=functionInvokationsScanningStack.length;1<=s?t<s:t>s;e=1<=s?++t:--t)""!==functionInvokationsScanningStack[e]&&(o+=functionInvokationsScanningStack[e]+"_"+e+"_");return r=o+r,symbolsRightOfAssignment.push(r)}},addSymbolLeftOfAssignment=function(r){var e,t,o,s;if(-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(r)&&-1===symbolsLeftOfAssignment.indexOf(r)&&-1===symbolsLeftOfAssignment.indexOf("'"+r)&&!skipRootVariableToBeSolved){for(DEBUG&&console.log("... adding symbol: "+r+" to the set of the symbols left of assignment"),o="",e=t=1,s=functionInvokationsScanningStack.length;1<=s?t<s:t>s;e=1<=s?++t:--t)""!==functionInvokationsScanningStack[e]&&(o+=functionInvokationsScanningStack[e]+"_"+e+"_");return r=o+r,symbolsLeftOfAssignment.push(r)}},scan_symbol=function(){if(token!==T_SYMBOL&&scan_error("symbol expected"),meta_mode&&1===token_buf.length)switch(token_buf[0]){case"a":push(symbol(METAA));break;case"b":push(symbol(METAB));break;case"x":push(symbol(METAX));break;default:push(usr_symbol(token_buf))}else push(usr_symbol(token_buf));return 0===scanningParameters.length?(DEBUG&&console.log("out of scanning parameters, processing "+token_buf),lastFoundSymbol=token_buf,isSymbolLeftOfAssignment&&addSymbolLeftOfAssignment(token_buf)):(DEBUG&&console.log("still scanning parameters, skipping "+token_buf),isSymbolLeftOfAssignment&&addSymbolRightOfAssignment("'"+token_buf)),DEBUG&&console.log("found symbol: "+token_buf+" left of assignment: "+isSymbolLeftOfAssignment),isSymbolLeftOfAssignment||addSymbolRightOfAssignment(token_buf),get_next_token()},scan_string=function(){return new_string(token_buf),get_next_token()},scan_function_call_with_function_name=function(){var r,e,t,o,s,n;if(DEBUG&&console.log("-- scan_function_call_with_function_name start"),o=1,new U,s=usr_symbol(token_buf),push(s),"roots"!==(r=token_buf)&&"defint"!==r&&"sum"!==r&&"product"!==r&&"for"!==r||functionInvokationsScanningStack.push(token_buf),lastFoundSymbol=token_buf,isSymbolLeftOfAssignment||addSymbolRightOfAssignment(token_buf),get_next_token(),get_next_token(),scanningParameters.push(!0),")"!==token){for(scan_stmt(),o++;","===token;)get_next_token(),2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("roots")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("sum")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("sum_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("product")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("product_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("for")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("for_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("defint")&&(2===o||o>2&&(o-2)%3==0)&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("defint_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(r)})),skipRootVariableToBeSolved=!0),scan_stmt(),skipRootVariableToBeSolved=!1,o++;2===o&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("roots")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(r){return!new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_x").test(r)})))}for(scanningParameters.pop(),e=t=0,n=symbolsRightOfAssignment.length;0<=n?t<=n:t>=n;e=0<=n?++t:--t)null!=symbolsRightOfAssignment[e]&&("roots"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"defint"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("defint_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"sum"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("sum_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"product"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("product_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"for"===r&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("for_"+(functionInvokationsScanningStack.length-1)+"_"),"")));if(")"!==token&&scan_error(") expected"),get_next_token(),list(o),"roots"!==r&&"defint"!==r&&"sum"!==r&&"product"!==r&&"for"!==r||functionInvokationsScanningStack.pop(),r===symbol(PATTERN).printname&&(patternHasBeenFound=!0),DEBUG)return console.log("-- scan_function_call_with_function_name end")},scan_function_call_without_function_name=function(){var r;if(DEBUG&&console.log("-- scan_function_call_without_function_name start"),push_symbol(EVAL),swap(),list(2),r=1,get_next_token(),scanningParameters.push(!0),")"!==token)for(scan_stmt(),r++;","===token;)get_next_token(),scan_stmt(),r++;if(scanningParameters.pop(),")"!==token&&scan_error(") expected"),get_next_token(),list(r),DEBUG)return console.log("-- scan_function_call_without_function_name end: "+stack[tos-1])},scan_subexpr=function(){return"("!==token&&scan_error("( expected"),get_next_token(),scan_stmt(),")"!==token&&scan_error(") expected"),get_next_token()},scan_tensor=function(){var r;for(r=0,"["!==token&&scan_error("[ expected"),get_next_token(),scan_stmt(),r=1;","===token;)get_next_token(),scan_stmt(),r++;return build_tensor(r),"]"!==token&&scan_error("] expected"),get_next_token()},scan_error=function(r){for(errorMessage="";input_str!==scan_str&&("\n"!==scanned[input_str]&&"\r"!==scanned[input_str]||input_str+1!==scan_str);)errorMessage+=scanned[input_str++];for(errorMessage+=" ? ";scanned[input_str]&&"\n"!==scanned[input_str]&&"\r"!==scanned[input_str];)errorMessage+=scanned[input_str++];return errorMessage+="\n",stop(r)},build_tensor=function(r){var e,t,o;for(e=0,save(),(p2=alloc_tensor(r)).tensor.ndim=1,p2.tensor.dim[0]=r,e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)p2.tensor.elem[e]=stack[tos-r+e];return check_tensor_dimensions(p2),moveTos(tos-r),push(p2),restore()},get_next_token=function(){for(newline_flag=0;get_token(),token===T_NEWLINE;)newline_flag=1;if(DEBUG)return console.log("get_next_token token: "+token)},get_token=function(){for(;isspace(scanned[scan_str]);){if("\n"===scanned[scan_str]||"\r"===scanned[scan_str])return token=T_NEWLINE,void scan_str++;scan_str++}if(token_str=scan_str,scan_str!==scanned.length){if(!isdigit(scanned[scan_str])&&"."!==scanned[scan_str]){if(isalpha(scanned[scan_str])){for(;isalnumorunderscore(scanned[scan_str]);)scan_str++;return token="("===scanned[scan_str]?T_FUNCTION:T_SYMBOL,void update_token_buf(token_str,scan_str)}if('"'===scanned[scan_str]){for(scan_str++;'"'!==scanned[scan_str];)scan_str===scanned.length-1&&(scan_str++,scan_error("runaway string"),scan_str--),scan_str++;return scan_str++,token=T_STRING,void update_token_buf(token_str+1,scan_str-1)}if("#"===scanned[scan_str]||"-"===scanned[scan_str]&&"-"===scanned[scan_str+1]){for(;scanned[scan_str]&&"\n"!==scanned[scan_str]&&"\r"!==scanned[scan_str];)scan_str++;return scanned[scan_str]&&scan_str++,void(token=T_NEWLINE)}return":"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_QUOTASSIGN)):"="===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_EQ)):"!"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_NEQ)):"<"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_LTEQ)):">"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_GTEQ)):token=scanned[scan_str++]}for(;isdigit(scanned[scan_str]);)scan_str++;if("."===scanned[scan_str]){for(scan_str++;isdigit(scanned[scan_str]);)scan_str++;if("e"===scanned[scan_str]&&("+"===scanned[scan_str+1]||"-"===scanned[scan_str+1]||isdigit(scanned[scan_str+1])))for(scan_str+=2;isdigit(scanned[scan_str]);)scan_str++;token=T_DOUBLE}else token=T_INTEGER;update_token_buf(token_str,scan_str)}else token=""},update_token_buf=function(r,e){return token_buf=scanned.substring(r,e)},$.scan=scan,Eval_sgn=function(){return push(cadr(p1)),Eval(),sgn()},sgn=function(){return save(),yysgn(),restore()},yysgn=function(){return p1=pop(),isdouble(p1)?p1.d>0||0===p1.d?void push_integer(1):void push_integer(-1):isrational(p1)?-1===MSIGN(mmul(p1.q.a,p1.q.b))?void push_integer(-1):MZERO(mmul(p1.q.a,p1.q.b))?void push_integer(0):void push_integer(1):iscomplexnumber(p1)?(push_integer(-1),push(p1),absval(),power(),push(p1),void multiply()):isnegativeterm(p1)?(push_symbol(SGN),push(p1),negate(),list(2),push_integer(-1),void multiply()):(push_symbol(SGN),push(p1),list(2))},Eval_shape=function(){return push(cadr(p1)),Eval(),shape()},shape=function(){var r,e,t,o,s,n,p,a;for(t=0,r=[],e=[],t=o=0,p=MAXDIM;0<=p?o<p:o>p;t=0<=p?++o:--o)r[t]=0,e[t]=0;if(save(),p1=pop(),!istensor(p1))return isZeroAtomOrTensor(p1)||stop("transpose: tensor expected, 1st arg is not a tensor"),push(zero),void restore();for(n=p1.tensor.ndim,(p2=alloc_tensor(n)).tensor.ndim=1,p2.tensor.dim[0]=n,t=s=0,a=n;0<=a?s<a:s>a;t=0<=a?++s:--s)push_integer(p1.tensor.dim[t]),p2.tensor.elem[t]=pop();return push(p2),restore()},Eval_simfac=function(){return push(cadr(p1)),Eval(),simfac()},simfac=function(){var r;if(r=0,save(),p1=pop(),car(p1)===symbol(ADD)){for(r=tos,p1=cdr(p1);p1!==symbol(NIL);)push(car(p1)),simfac_term(),p1=cdr(p1);add_all(tos-r)}else push(p1),simfac_term();return restore()},simfac_term=function(){var r;if(save(),p1=pop(),car(p1)!==symbol(MULTIPLY))return push(p1),void restore();for(r=tos,p1=cdr(p1);p1!==symbol(NIL);)push(car(p1)),p1=cdr(p1);for(;yysimfac(r););return multiply_all_noexpand(tos-r),restore()},yysimfac=function(r){var e,t,o,s,n,p,a,i;for(e=0,t=0,e=o=n=r,p=tos;n<=p?o<p:o>p;e=n<=p?++o:--o)for(p1=stack[e],t=s=a=r,i=tos;a<=i?s<i:s>i;t=a<=i?++s:--s)if(e!==t){if(p2=stack[t],car(p1)===symbol(FACTORIAL)&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&equal(cadr(p1),cadr(p2)))return push(cadr(p1)),push(one),subtract(),factorial(),stack[e]=pop(),stack[t]=one,1;if(car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)&&equal(p1,cadadr(p2)))return push(p1),push_integer(-1),add(),factorial(),reciprocate(),stack[e]=pop(),stack[t]=one,1;if(car(p2)===symbol(FACTORIAL)&&(push(p1),push(cadr(p2)),subtract(),p3=pop(),isplusone(p3)))return push(p1),factorial(),stack[e]=pop(),stack[t]=one,1;if(car(p1)===symbol(POWER)&&isminusone(caddr(p1))&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)&&(push(cadr(p1)),push(cadr(cadr(p2))),subtract(),p3=pop(),isplusone(p3)))return push(cadr(p1)),factorial(),reciprocate(),stack[e]=pop(),stack[t]=one,1;if(car(p1)===symbol(FACTORIAL)&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)){if(push(cadr(p1)),push(cadr(cadr(p2))),subtract(),p3=pop(),isplusone(p3))return stack[e]=cadr(p1),stack[t]=one,1;if(isminusone(p3))return push(cadr(cadr(p2))),reciprocate(),stack[e]=pop(),stack[t]=one,1;if(equaln(p3,2))return stack[e]=cadr(p1),push(cadr(p1)),push_integer(-1),add(),stack[t]=pop(),1;if(equaln(p3,-2))return push(cadr(cadr(p2))),reciprocate(),stack[e]=pop(),push(cadr(cadr(p2))),push_integer(-1),add(),reciprocate(),stack[t]=pop(),1}}return 0},Eval_simplify=function(){return push(cadr(p1)),runUserDefinedSimplifications(),Eval(),simplify()},runUserDefinedSimplifications=function(){var r,e,t,o,s,n,p,a,i,u;if(0!==userSimplificationsInListForm.length&&!Find(cadr(p1),symbol(INTEGRAL))){for(i=expanding,expanding=!1,DEBUG&&console.log("runUserDefinedSimplifications passed: "+stack[tos-1].toString()),Eval(),DEBUG&&console.log("runUserDefinedSimplifications after eval no expanding: "+stack[tos-1].toString()),expanding=i,p1=stack[tos-1],DEBUG&&console.log("patterns to be checked: "),o=0,s=userSimplificationsInListForm.length;o<s;o++)t=userSimplificationsInListForm[o],DEBUG&&console.log("..."+t);for(r=!0,a=0;r&&a<MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES;)for(r=!1,a++,p=0,n=userSimplificationsInListForm.length;p<n;p++){for(t=userSimplificationsInListForm[p],u=!0,e=0;u&&e<MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE;)e++,DEBUG&&console.log("simplify - tos: "+tos+" checking pattern: "+t+" on: "+p1),push_symbol(NIL),(u=transform(t,!0))&&(r=!0),p1=stack[tos-1],DEBUG&&console.log("p1 at this stage of simplification: "+p1);e===MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE&&stop("maximum application of single transformation rule exceeded: "+t)}if(a===MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES&&stop("maximum application of all transformation rules exceeded "),DEBUG)return console.log("METAX = "+get_binding(symbol(METAX))),console.log("METAA = "+get_binding(symbol(METAA))),console.log("METAB = "+get_binding(symbol(METAB)))}},simplifyForCodeGeneration=function(){return save(),runUserDefinedSimplifications(),codeGen=!0,simplify_main(),codeGen=!1,restore()},simplify=function(){return save(),simplify_main(),restore()},simplify_main=function(){var args,fbody;if(p1=pop(),codeGen&&car(p1)===symbol(FUNCTION)&&(fbody=cadr(p1),push(fbody),eval(),simplify(),p3=pop(),args=caddr(p1),push_symbol(FUNCTION),push(p3),push(args),list(3),p1=pop()),!istensor(p1))return Find(p1,symbol(FACTORIAL))&&(push(p1),simfac(),p2=pop(),push(p1),rationalize(),simfac(),p3=pop(),p1=count(p2)<count(p3)?p2:p3),f10(),f1(),f2(),f3(),f4(),f5(),f9(),simplify_polarRect(),do_simplify_nested_radicals&&simplify_nested_radicals()?(DEBUG&&console.log("de-nesting successful into: "+p1.toString()),push(p1),void simplify()):(simplify_rectToClock(),simplify_rational_expressions(),push(p1));simplify_tensor()},simplify_tensor=function(){var r,e,t,o,s;for(r=0,(p2=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,r=e=0,o=p1.tensor.ndim;0<=o?e<o:e>o;r=0<=o?++e:--e)p2.tensor.dim[r]=p1.tensor.dim[r];for(r=t=0,s=p1.tensor.nelem;0<=s?t<s:t>s;r=0<=s?++t:--t)push(p1.tensor.elem[r]),simplify(),p2.tensor.elem[r]=pop();return check_tensor_dimensions(p2),isZeroAtomOrTensor(p2)&&(p2=zero),push(p2)},f1=function(){if(car(p1)===symbol(ADD))return push(p1),rationalize(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},f2=function(){if(car(p1)===symbol(ADD))return push(p1),Condense(),p2=pop(),count(p2)<=count(p1)?p1=p2:void 0},f3=function(){if(push(p1),rationalize(),negate(),rationalize(),negate(),rationalize(),p2=pop(),count(p2)<count(p1))return p1=p2},f10=function(){var r,e,t,o;if(t=car(p1),cdr(p1),(t===symbol(MULTIPLY)||isinnerordot(p1))&&car(car(cdr(p1)))===symbol(TRANSPOSE)&&car(car(cdr(cdr(p1))))===symbol(TRANSPOSE)&&(DEBUG&&console.log("maybe collecting a transpose "+p1),r=cadr(car(cdr(p1))),e=cadr(car(cdr(cdr(p1)))),t===symbol(MULTIPLY)?(push(r),push(e),multiply()):isinnerordot(p1)&&(push(e),push(r),inner()),push_integer(1),push_integer(2),o=expanding,expanding=!1,transpose(),expanding=o,p2=pop(),count(p2)<count(p1)&&(p1=p2),DEBUG))return console.log("collecting a transpose "+p2)},f4=function(){if(!isZeroAtomOrTensor(p1))return push(p1),rationalize(),inverse(),rationalize(),inverse(),rationalize(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},simplify_trig=function(){return save(),p1=pop(),f5(),push(p1),restore()},f5=function(){if(0!==Find(p1,symbol(SIN))||0!==Find(p1,symbol(COS)))return trigmode=1,push(p2=p1),Eval(),p3=pop(),trigmode=2,push(p2),Eval(),p4=pop(),trigmode=0,(count(p4)<count(p3)||nterms(p4)<nterms(p3))&&(p3=p4),count(p3)<count(p1)||nterms(p3)<nterms(p1)?p1=p3:void 0},f9=function(){var r,e;if(car(p1)===symbol(ADD)){for(push_integer(0),p2=cdr(p1);iscons(p2);)push(car(p2)),simplify(),add(),r=p1,e=p2,p1=pop(),simplify_rational_expressions(),push(p1),p1=r,p2=cdr(p2=e);return p2=pop(),count(p2)<count(p1)?p1=p2:void 0}},simplify_rational_expressions=function(){var r,e,t,o;if(push(p1),denominator(),r=pop(),!isone(r)&&(push(p1),numerator(),e=pop(),!isone(e)&&(t=areunivarpolysfactoredorexpandedform(e,r))&&(push(e),push(r),gcd(),push(t),factor(),o=pop(),!isone(o))))return push(e),push(t),factor(),push(o),inverse(),multiply_noexpand(),simplify(),stack[tos-1].toString(),push(r),push(t),factor(),push(o),inverse(),multiply_noexpand(),simplify(),stack[tos-1].toString(),divide(),Condense(),stack[tos-1].toString(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},simplify_rectToClock=function(){if(0!==Find(p1,symbol(SIN))||0!==Find(p1,symbol(COS)))return push(p1),Eval(),clockform(),p2=pop(),DEBUG&&console.log("before simplification clockform: "+p1+" after: "+p2),count(p2)<count(p1)?p1=p2:void 0},simplify_polarRect=function(){if(push(p1),polarRectAMinusOneBase(),Eval(),p2=pop(),count(p2)<count(p1))return p1=p2},polarRectAMinusOneBase=function(){var r;if(save(),p1=pop(),isimaginaryunit(p1))return push(p1),void restore();if(equal(car(p1),symbol(POWER))&&isminusone(cadr(p1)))push(one),negate(),push(caddr(p1)),polarRectAMinusOneBase(),power(),polar(),rect();else if(iscons(p1)){for(r=tos;iscons(p1);)push(car(p1)),polarRectAMinusOneBase(),p1=cdr(p1);list(tos-r)}else push(p1);restore()},nterms=function(r){return car(r)!==symbol(ADD)?1:length(r)-1},simplify_nested_radicals=function(){var r,e,t,o;return recursionLevelNestedRadicalsRemoval>0?(DEBUG&&console.log("denesting bailing out because of too much recursion"),!1):(push(p1),o=take_care_of_nested_radicals(),t=stack[tos-1],r=expanding,expanding=0,yycondense(),expanding=r,e=pop(),countOccurrencesOfSymbol(symbol(POWER),t)<countOccurrencesOfSymbol(symbol(POWER),e)?push(t):push(e),p1=pop(),o)},take_care_of_nested_radicals=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M,R,L,k,q,D,P,U,w;if(recursionLevelNestedRadicalsRemoval>0)return DEBUG&&console.log("denesting bailing out because of too much recursion"),!1;if(save(),p1=pop(),equal(car(p1),symbol(POWER))){if(n=cadr(p1),c=caddr(p1),!isminusone(c)&&equal(car(n),symbol(ADD))&&isfraction(c)&&(equalq(c,1,3)||equalq(c,1,2))){for(d=cadr(n),push(d),take_care_of_nested_radicals(),pop(),P=caddr(n),push(P),take_care_of_nested_radicals(),pop(),O=0,u=n;cdr(u)!==symbol(NIL);)O++,u=cdr(u);if(O>2)return push(p1),restore(),!1;if(i=null,a=[],w=[],car(P)===symbol(MULTIPLY)){if(U=cdr(P),iscons(U))for(;iscons(U);)k=car(U),car(k)===symbol(POWER)?(f=cadr(k),h=caddr(k),equalq(h,1,2)&&(null==i?(i=h,a.push(f)):equal(h,i)&&a.push(f))):w.push(k),U=cdr(U)}else car(P)===symbol(POWER)&&(f=cadr(P),h=caddr(P),null==i&&equalq(h,1,2)&&(i=h,a.push(f)));if(0===a.length)return push(p1),restore(),!1;for(r=d,push_integer(1),g=0,b=a.length;g<b;g++)m=a[g],push(m),multiply();for(t=pop(),push_integer(1),T=0,y=w.length;T<y;T++)m=w[T],push(m),multiply();if(e=pop(),equalq(c,1,3)){if(push(r),negate(),push(t),multiply(),push(e),divide(),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return push(p1),restore(),!1;if(push(p),push_integer(3),push(t),multiply(),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),push(p1),restore(),!1;if(push(p),push(symbol(SECRETX)),multiply(),push_integer(-3),push(r),multiply(),push(e),divide(),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),pop(),push(p1),restore(),!1;push(p),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push_integer(1),push(symbol(SECRETX)),push_integer(3),power(),multiply(),add(),add(),add()}else if(equalq(c,1,2)){if(push(t),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return push(p1),restore(),!1;if(push(p),push_integer(-2),push(r),multiply(),push(e),divide(),p=pop(),push(p),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),push(p1),restore(),!1;push(p),push(symbol(SECRETX)),multiply(),push_integer(1),push(symbol(SECRETX)),push_integer(2),power(),multiply(),add(),add()}if(push(symbol(SECRETX)),recursionLevelNestedRadicalsRemoval++,roots(),recursionLevelNestedRadicalsRemoval--,equal(stack[tos-1],symbol(NIL)))return DEBUG&&console.log("roots bailed out because of too much recursion"),pop(),push(p1),restore(),!1;for(L=[],I=0,v=(D=stack[tos-1].tensor.elem).length;I<v;I++)l=D[I],Find(l,symbol(POWER))||L.push(l);if(pop(),0===L.length)return push(p1),restore(),!1;for(R=[],q=[],S=0,x=L.length;S<x;S++)m=L[S],push(m),real(),yyfloat(),R.push(m),q.push(pop().d);return o=R[q.indexOf(Math.max.apply(Math,q))],equalq(c,1,3)?(push(r),push(o),push_integer(3),power(),push_integer(3),push(t),multiply(),push(o),multiply(),add(),divide(),push_rational(1,3),power()):equalq(c,1,2)&&(push(r),push(o),push_integer(2),power(),push(t),add(),divide(),push_rational(1,2),power()),null==(A=pop())?(push(p1),restore(),!1):(push(A),push(o),multiply(),equalq(c,1,3)?(E=pop(),push(A),push(t),push_rational(1,2),power(),multiply(),push(E),add(),simplify()):equalq(c,1,2)&&(E=pop(),push(A),push(t),push_rational(1,2),power(),multiply(),push(E),add(),simplify(),N=pop(),push(N),real(),yyfloat(),M=pop(),isnegativenumber(M)?(push(A),negate(),A=pop(),push(E),negate(),E=pop(),push(A),push(t),push_rational(1,2),power(),multiply(),push(E),add(),simplify()):push(N)),p1=pop(),push(p1),restore(),!0)}return push(p1),restore(),!1}if(iscons(p1)){for(_=tos,s=!1;iscons(p1);)push(car(p1)),s=s||take_care_of_nested_radicals(),p1=cdr(p1);return list(tos-_),restore(),s}return push(p1),restore(),!1},Eval_sin=function(){return push(cadr(p1)),Eval(),sine()},sine=function(){return save(),p1=pop(),car(p1)===symbol(ADD)?sine_of_angle_sum():sine_of_angle(),restore()},sine_of_angle_sum=function(){for(p2=cdr(p1);iscons(p2);){if(p4=car(p2),isnpi(p4))return push(p1),push(p4),subtract(),p3=pop(),push(p3),sine(),push(p4),cosine(),multiply(),push(p3),cosine(),push(p4),sine(),multiply(),void add();p2=cdr(p2)}return sine_of_angle()},sine_of_angle=function(){var r,e;if(car(p1)!==symbol(ARCSIN)){if(isdouble(p1))return r=Math.sin(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(isnegative(p1))return push(p1),negate(),sine(),void negate();if(car(p1)===symbol(ARCTAN))return push(cadr(p1)),push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),push_rational(-1,2),power(),void multiply();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(SIN)),push(p1),void list(2);switch(e%360){case 0:case 180:return push_integer(0);case 30:case 150:return push_rational(1,2);case 210:case 330:return push_rational(-1,2);case 45:case 135:return push_rational(1,2),push_integer(2),push_rational(1,2),power(),multiply();case 225:case 315:return push_rational(-1,2),push_integer(2),push_rational(1,2),power(),multiply();case 60:case 120:return push_rational(1,2),push_integer(3),push_rational(1,2),power(),multiply();case 240:case 300:return push_rational(-1,2),push_integer(3),push_rational(1,2),power(),multiply();case 90:return push_integer(1);case 270:return push_integer(-1);default:return push(symbol(SIN)),push(p1),list(2)}}else push(cadr(p1))},Eval_sinh=function(){return push(cadr(p1)),Eval(),ysinh()},ysinh=function(){return save(),yysinh(),restore()},yysinh=function(){var r;if(r=0,p1=pop(),car(p1)!==symbol(ARCSINH)){if(isdouble(p1))return r=Math.sinh(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(!isZeroAtomOrTensor(p1))return push_symbol(SINH),push(p1),list(2);push(zero)}else push(cadr(p1))},subst=function(){var r,e,t,o,s;if(r=0,save(),p3=pop(),(p2=pop())!==symbol(NIL)&&p3!==symbol(NIL)){if(p1=pop(),istensor(p1)){for((p4=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,r=e=0,o=p1.tensor.ndim;0<=o?e<o:e>o;r=0<=o?++e:--e)p4.tensor.dim[r]=p1.tensor.dim[r];for(r=t=0,s=p1.tensor.nelem;0<=s?t<s:t>s;r=0<=s?++t:--t)push(p1.tensor.elem[r]),push(p2),push(p3),subst(),p4.tensor.elem[r]=pop(),check_tensor_dimensions(p4);push(p4)}else equal(p1,p2)?push(p3):iscons(p1)?(push(car(p1)),push(p2),push(p3),subst(),push(cdr(p1)),push(p2),push(p3),subst(),cons()):push(p1);return restore()}restore()},Eval_sum=function(){var r,e,t,o,s,n,p,a;if(e=0,r=cadr(p1),t=caddr(p1),issymbol(t)||stop("sum: 2nd arg?"),push(cadddr(p1)),Eval(),o=pop_integer(),isNaN(o))push(p1);else{if(push(caddddr(p1)),Eval(),s=pop_integer(),!isNaN(s)){for(p4=get_binding(t),push_integer(0),e=n=p=o,a=s;p<=a?n<=a:n>=a;e=p<=a?++n:--n)push_integer(e),p5=pop(),set_binding(t,p5),push(r),Eval(),add();return set_binding(t,p4)}push(p1)}},Eval_tan=function(){return push(cadr(p1)),Eval(),tangent()},tangent=function(){return save(),yytangent(),restore()},yytangent=function(){var r,e;if(r=0,p1=pop(),car(p1)!==symbol(ARCTAN)){if(isdouble(p1))return r=Math.tan(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(isnegative(p1))return push(p1),negate(),tangent(),void negate();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(TAN)),push(p1),void list(2);switch(e%360){case 0:case 180:return push_integer(0);case 30:case 210:return push_rational(1,3),push_integer(3),push_rational(1,2),power(),multiply();case 150:case 330:return push_rational(-1,3),push_integer(3),push_rational(1,2),power(),multiply();case 45:case 225:return push_integer(1);case 135:case 315:return push_integer(-1);case 60:case 240:return push_integer(3),push_rational(1,2),power();case 120:case 300:return push_integer(3),push_rational(1,2),power(),negate();default:return push(symbol(TAN)),push(p1),list(2)}}else push(cadr(p1))},Eval_tanh=function(){var r;if(r=0,push(cadr(p1)),Eval(),p1=pop(),car(p1)!==symbol(ARCTANH)){if(isdouble(p1))return r=Math.tanh(p1.d),Math.abs(r)<1e-10&&(r=0),void push_double(r);if(!isZeroAtomOrTensor(p1))return push_symbol(TANH),push(p1),list(2);push(zero)}else push(cadr(p1))},Eval_taylor=function(){return p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(24):push(p2),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),taylor()},taylor=function(){var r,e,t,o;if(r=0,save(),p4=pop(),p3=pop(),p2=pop(),p1=pop(),push(p3),e=pop_integer(),isNaN(e))return push_symbol(TAYLOR),push(p1),push(p2),push(p3),push(p4),list(5),void restore();for(push(p1),push(p2),push(p4),subst(),Eval(),push_integer(1),p5=pop(),r=t=1,o=e;(1<=o?t<=o:t>=o)&&(push(p1),push(p2),derivative(),p1=pop(),!isZeroAtomOrTensor(p1));r=1<=o?++t:--t)push(p5),push(p2),push(p4),subtract(),multiply(),p5=pop(),push(p1),push(p2),push(p4),subst(),Eval(),push(p5),multiply(),push_integer(r),factorial(),divide(),add();return restore()},Eval_tensor=function(){var r,e,t,o,s,n,p,a,i;for(t=0,check_tensor_dimensions(p1),p=p1.tensor.nelem,n=p1.tensor.ndim,(p2=alloc_tensor(p)).tensor.ndim=n,t=o=0,a=n;0<=a?o<a:o>a;t=0<=a?++o:--o)p2.tensor.dim[t]=p1.tensor.dim[t];for(r=p1.tensor.elem,e=p2.tensor.elem,check_tensor_dimensions(p2),t=s=0,i=p;0<=i?s<i:s>i;t=0<=i?++s:--s)push(r[t]),Eval(),e[t]=pop();return check_tensor_dimensions(p1),check_tensor_dimensions(p2),push(p2),promote_tensor()},tensor_plus_tensor=function(){var r,e,t,o,s,n,p,a,i,u,l,c;if(o=0,save(),p2=pop(),(a=(p1=pop()).tensor.ndim)!==p2.tensor.ndim)return push(symbol(NIL)),void restore();for(o=s=0,u=a;0<=u?s<u:s>u;o=0<=u?++s:--s)if(p1.tensor.dim[o]!==p2.tensor.dim[o])return push(symbol(NIL)),void restore();for(i=p1.tensor.nelem,(p3=alloc_tensor(i)).tensor.ndim=a,o=n=0,l=a;0<=l?n<l:n>l;o=0<=l?++n:--n)p3.tensor.dim[o]=p1.tensor.dim[o];for(r=p1.tensor.elem,e=p2.tensor.elem,t=p3.tensor.elem,o=p=0,c=i;0<=c?p<c:p>c;o=0<=c?++p:--p)push(r[o]),push(e[o]),add(),t[o]=pop();return push(p3),restore()},tensor_times_scalar=function(){var r,e,t,o,s,n,p,a,i;for(t=0,save(),p2=pop(),n=(p1=pop()).tensor.ndim,p=p1.tensor.nelem,(p3=alloc_tensor(p)).tensor.ndim=n,t=o=0,a=n;0<=a?o<a:o>a;t=0<=a?++o:--o)p3.tensor.dim[t]=p1.tensor.dim[t];for(r=p1.tensor.elem,e=p3.tensor.elem,t=s=0,i=p;0<=i?s<i:s>i;t=0<=i?++s:--s)push(r[t]),push(p2),multiply(),e[t]=pop();return push(p3),restore()},scalar_times_tensor=function(){var r,e,t,o,s,n,p,a,i;for(t=0,save(),p2=pop(),p1=pop(),n=p2.tensor.ndim,p=p2.tensor.nelem,(p3=alloc_tensor(p)).tensor.ndim=n,t=o=0,a=n;0<=a?o<a:o>a;t=0<=a?++o:--o)p3.tensor.dim[t]=p2.tensor.dim[t];for(r=p2.tensor.elem,e=p3.tensor.elem,t=s=0,i=p;0<=i?s<i:s>i;t=0<=i?++s:--s)push(p1),push(r[t]),multiply(),e[t]=pop();return push(p3),restore()},check_tensor_dimensions=function(r){r.tensor.nelem!==r.tensor.elem.length&&console.log("something wrong in tensor dimensions")},is_square_matrix=function(r){return istensor(r)&&2===r.tensor.ndim&&r.tensor.dim[0]===r.tensor.dim[1]?1:0},d_tensor_tensor=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d;if(o=0,s=0,i=p1.tensor.ndim,u=p1.tensor.nelem,i+1>=MAXDIM)return push_symbol(DERIVATIVE),push(p1),push(p2),void list(3);for((p3=alloc_tensor(u*p2.tensor.nelem)).tensor.ndim=i+1,o=n=0,l=i;0<=l?n<l:n>l;o=0<=l?++n:--n)p3.tensor.dim[o]=p1.tensor.dim[o];for(p3.tensor.dim[i]=p2.tensor.dim[0],r=p1.tensor.elem,e=p2.tensor.elem,t=p3.tensor.elem,o=p=0,c=u;0<=c?p<c:p>c;o=0<=c?++p:--p)for(s=a=0,d=p2.tensor.nelem;0<=d?a<d:a>d;s=0<=d?++a:--a)push(r[o]),push(e[s]),derivative(),t[o*p2.tensor.nelem+s]=pop();return push(p3)},d_scalar_tensor=function(){var r,e,t,o,s;for((p3=alloc_tensor(p2.tensor.nelem)).tensor.ndim=1,p3.tensor.dim[0]=p2.tensor.dim[0],r=p2.tensor.elem,e=p3.tensor.elem,t=o=0,s=p2.tensor.nelem;0<=s?o<s:o>s;t=0<=s?++o:--o)push(p1),push(r[t]),derivative(),e[t]=pop();return push(p3)},d_tensor_scalar=function(){var r,e,t,o,s,n,p;for(t=0,(p3=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,t=o=0,n=p1.tensor.ndim;0<=n?o<n:o>n;t=0<=n?++o:--o)p3.tensor.dim[t]=p1.tensor.dim[t];for(r=p1.tensor.elem,e=p3.tensor.elem,t=s=0,p=p1.tensor.nelem;0<=p?s<p:s>p;t=0<=p?++s:--s)push(r[t]),push(p2),derivative(),e[t]=pop();return push(p3)},compare_tensors=function(r,e){var t,o,s,n,p;if(t=0,r.tensor.ndim<e.tensor.ndim)return-1;if(r.tensor.ndim>e.tensor.ndim)return 1;for(t=o=0,n=r.tensor.ndim;0<=n?o<n:o>n;t=0<=n?++o:--o){if(r.tensor.dim[t]<e.tensor.dim[t])return-1;if(r.tensor.dim[t]>e.tensor.dim[t])return 1}for(t=s=0,p=r.tensor.nelem;0<=p?s<p:s>p;t=0<=p?++s:--s)if(!equal(r.tensor.elem[t],e.tensor.elem[t]))return lessp(r.tensor.elem[t],e.tensor.elem[t])?-1:1;return 0},power_tensor=function(){var r,e,t,o,s,n,p,a;if(r=0,s=0,e=p1.tensor.ndim-1,p1.tensor.dim[0]!==p1.tensor.dim[e])return push_symbol(POWER),push(p1),push(p2),void list(3);if(push(p2),s=pop_integer(),isNaN(s))return push_symbol(POWER),push(p1),push(p2),void list(3);if(0===s){for(2!==p1.tensor.ndim&&stop("power(tensor,0) with tensor rank not equal to 2"),s=p1.tensor.dim[0],(p1=alloc_tensor(s*s)).tensor.ndim=2,p1.tensor.dim[0]=s,p1.tensor.dim[1]=s,r=t=0,n=s;0<=n?t<n:t>n;r=0<=n?++t:--t)p1.tensor.elem[s*r+r]=one;return check_tensor_dimensions(p1),void push(p1)}for(s<0&&(s=-s,push(p1),inv(),p1=pop()),push(p1),a=[],r=o=1,p=s;(1<=p?o<p:o>p)&&(push(p1),inner(),!isZeroAtomOrTensor(stack[tos-1]));r=1<=p?++o:--o)a.push(void 0);return a},copy_tensor=function(){var r,e,t,o,s;for(r=0,save(),p1=pop(),(p2=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,r=e=0,o=p1.tensor.ndim;0<=o?e<o:e>o;r=0<=o?++e:--e)p2.tensor.dim[r]=p1.tensor.dim[r];for(r=t=0,s=p1.tensor.nelem;0<=s?t<s:t>s;r=0<=s?++t:--t)p2.tensor.elem[r]=p1.tensor.elem[r];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),push(p2),restore()},promote_tensor=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m;if(r=0,e=0,t=0,save(),p1=pop(),!istensor(p1))return push(p1),void restore();for(p2=p1.tensor.elem[0],r=o=1,l=p1.tensor.nelem;1<=l?o<l:o>l;r=1<=l?++o:--o)compatible(p2,p1.tensor.elem[r])||stop("Cannot promote tensor due to inconsistent tensor components.");if(!istensor(p2))return push(p1),void restore();for((p=p1.tensor.ndim+p2.tensor.ndim)>MAXDIM&&stop("tensor rank > "+MAXDIM),a=p1.tensor.nelem*p2.tensor.nelem,(p3=alloc_tensor(a)).tensor.ndim=p,r=s=0,c=p1.tensor.ndim;0<=c?s<c:s>c;r=0<=c?++s:--s)p3.tensor.dim[r]=p1.tensor.dim[r];for(e=n=0,d=p2.tensor.ndim;0<=d?n<d:n>d;e=0<=d?++n:--n)p3.tensor.dim[r+e]=p2.tensor.dim[e];for(t=0,r=i=0,_=p1.tensor.nelem;0<=_?i<_:i>_;r=0<=_?++i:--i)for(e=u=0,m=(p2=p1.tensor.elem[r]).tensor.nelem;0<=m?u<m:u>m;e=0<=m?++u:--u)p3.tensor.elem[t++]=p2.tensor.elem[e];return check_tensor_dimensions(p2),check_tensor_dimensions(p3),push(p3),restore()},compatible=function(r,e){var t,o,s;if(!istensor(r)&&!istensor(e))return 1;if(!istensor(r)||!istensor(e))return 0;if(r.tensor.ndim!==e.tensor.ndim)return 0;for(t=o=0,s=r.tensor.ndim;0<=s?o<s:o>s;t=0<=s?++o:--o)if(r.tensor.dim[t]!==e.tensor.dim[t])return 0;return 1},Eval_test=function(){var r,e;for(e=p1,p1=cdr(p1);iscons(p1);){if(cdr(p1)===symbol(NIL))return push(car(p1)),void Eval();if(null==(r=isZeroLikeOrNonZeroLikeOrUndetermined(car(p1))))return void push(e);if(r)return push(cadr(p1)),void Eval();p1=cddr(p1)}return push_integer(0)},Eval_testeq=function(){var r,e,t;if(e=p1,push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),subtract(),t=pop(),r=isZeroLikeOrNonZeroLikeOrUndetermined(t))push_integer(0);else if(null==r||r)if(push(cadr(p1)),Eval(),simplify(),push(caddr(p1)),Eval(),simplify(),subtract(),t=pop(),r=isZeroLikeOrNonZeroLikeOrUndetermined(t))push_integer(0);else{if(null==r||r)return push(e);push_integer(1)}else push_integer(1)},Eval_testge=function(){var r,e;if(e=p1,null!=(r=cmp_args()))return push_integer(r>=0?1:0);push(e)},Eval_testgt=function(){var r,e;if(e=p1,null!=(r=cmp_args()))return push_integer(r>0?1:0);push(e)},Eval_testle=function(){var r,e;if(e=p1,null!=(r=cmp_args()))return push_integer(r<=0?1:0);push(e)},Eval_testlt=function(){var r,e;if(e=p1,null!=(r=cmp_args()))return push_integer(r<0?1:0);push(e)},Eval_not=function(){var r,e;return e=p1,null==(r=isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1)))?push(e):push_integer(r?0:1)},Eval_and=function(){var r,e,t,o;for(r=cdr(o=p1),t=!1;iscons(r);)if(null==(e=isZeroLikeOrNonZeroLikeOrUndetermined(car(r))))t=!0,r=cdr(r);else if(e)r=cdr(r);else if(!e)return void push_integer(0);return t?push(o):push_integer(1)},Eval_or=function(){var r,e,t,o;for(e=cdr(o=p1),t=!1;iscons(e);)if(null==(r=isZeroLikeOrNonZeroLikeOrUndetermined(car(e))))t=!0,e=cdr(e);else{if(r)return void push_integer(1);r||(e=cdr(e))}return t?push(o):push_integer(0)},cmp_args=function(){var r;if(r=0,push(cadr(p1)),Eval(),simplify(),push(caddr(p1)),Eval(),simplify(),subtract(),(p1=pop()).k!==NUM&&p1.k!==DOUBLE&&(push(p1),yyfloat(),Eval(),p1=pop()),isZeroAtomOrTensor(p1))return 0;switch(p1.k){case NUM:r=-1===MSIGN(p1.q.a)?-1:1;break;case DOUBLE:r=p1.d<0?-1:1;break;default:r=null}return r},transform=function(r,e){var t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b;if(save(),p1=null,p4=pop(),p3=pop(),DEBUG&&console.log("         !!!!!!!!!   transform on: "+p3),saveMetaBindings(),set_binding(symbol(METAX),p4),h=tos,push_integer(1),push(p3),push(p4),polyform(),push(p4),t=tos-2,decomp(e),l=tos-t,DEBUG)for(console.log("  "+l+" decomposed elements ====== "),s=n=0,c=l;0<=c?n<c:n>c;s=0<=c?++n:--n)console.log("  decomposition element "+s+": "+stack[tos-1-s]);if(g=!1,e){if(!isNumericAtom(p3))if(f=r,DEBUG&&console.log("applying transform: "+f),DEBUG&&console.log("scanning table entry "+f),push(f),push(symbol(SYMBOL_A_UNDERSCORE)),push(symbol(METAA)),subst(),push(symbol(SYMBOL_B_UNDERSCORE)),push(symbol(METAB)),subst(),push(symbol(SYMBOL_X_UNDERSCORE)),push(symbol(METAX)),subst(),p1=pop(),p5=car(p1),DEBUG&&console.log("template expression: "+p5),p6=cadr(p1),p7=cddr(p1),f_equals_a(h,e))g=!0;else{for(DEBUG&&console.log("p3 at this point: "+p3),b=[],DEBUG&&console.log("car(p3): "+car(p3)),iscons(d=p3)&&(b.push(car(p3)),d=cdr(p3));iscons(d);)_=car(d),d=cdr(d),DEBUG&&console.log("tos before recursive transform: "+tos),push(_),push_symbol(NIL),DEBUG&&console.log("testing: "+_),DEBUG&&console.log("about to try to simplify other term: "+_),m=transform(r,e),g=g||m,b.push(pop()),DEBUG&&console.log("tried to simplify other term: "+_+" ...successful?: "+m+" ...transformed: "+b[b.length-1]);if(0!==b.length){for(i=0,p=b.length;i<p;i++)s=b[i],push(s);list(b.length),p6=pop()}}}else for(u=0,a=r.length;u<a;u++)if(o=r[u],DEBUG&&(console.log("scanning table entry "+o),(o+"").indexOf("f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))")),o&&(scan_meta(o),p1=pop(),p5=cadr(p1),p6=caddr(p1),p7=cdddr(p1),f_equals_a(h,e))){g=!0;break}return moveTos(h),g?(push(p6),Eval(),p1=pop(),g=!0):p1=e?p3:symbol(NIL),restoreMetaBindings(),push(p1),restore(),g},saveMetaBindings=function(){return push(get_binding(symbol(METAA))),push(get_binding(symbol(METAB))),push(get_binding(symbol(METAX)))},restoreMetaBindings=function(){return set_binding(symbol(METAX),pop()),set_binding(symbol(METAB),pop()),set_binding(symbol(METAA),pop())},f_equals_a=function(r,e){var t,o,s,n,p,a,i,u,l;for(t=0,o=0,t=s=a=r,i=tos;a<=i?s<i:s>i;t=a<=i?++s:--s)for(set_binding(symbol(METAA),stack[t]),DEBUG&&console.log("  binding METAA to "+get_binding(symbol(METAA))),o=n=u=r,l=tos;u<=l?n<l:n>l;o=u<=l?++n:--n){for(set_binding(symbol(METAB),stack[o]),DEBUG&&console.log("  binding METAB to "+get_binding(symbol(METAB))),p1=p7;iscons(p1)&&(push(car(p1)),Eval(),p2=pop(),!isZeroAtomOrTensor(p2));)p1=cdr(p1);if(!iscons(p1)&&(push(p3),DEBUG&&console.log("about to evaluate template expression: "+p5+" binding METAA to "+get_binding(symbol(METAA))+" and binding METAB to "+get_binding(symbol(METAB))+" and binding METAX to "+get_binding(symbol(METAX))),push(p5),e&&(p=expanding,expanding=!1),Eval(),e&&(expanding=p),DEBUG&&console.log("  comparing "+stack[tos-1]+" to: "+stack[tos-2]),subtract(),p1=pop(),isZeroAtomOrTensor(p1)))return DEBUG&&(console.log("binding METAA to "+get_binding(symbol(METAA))),console.log("binding METAB to "+get_binding(symbol(METAB))),console.log("binding METAX to "+get_binding(symbol(METAX))),console.log("comparing "+p3+" to: "+p5)),1}return 0},Eval_transpose=function(){return push(cadr(p1)),Eval(),cddr(p1)===symbol(NIL)?(push_integer(1),push_integer(2)):(push(caddr(p1)),Eval(),push(cadddr(p1)),Eval()),transpose()},transpose=function(){var r,e,t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M;for(p=0,u=0,l=0,c=0,_=0,M=0,t=[],o=[],p=d=0,x=MAXDIM;0<=x?d<x:d>x;p=0<=x?++d:--d)t[p]=0,o[p]=0;if(save(),p3=pop(),p2=pop(),p1=pop(),isNumericAtom(p1))return push(p1),void restore();if((isplusone(p2)&&isplustwo(p3)||isplusone(p3)&&isplustwo(p2))&&isidentitymatrix(p1))return push(p1),void restore();if(istranspose(p1)&&(a=car(cdr(cdr(p1))),i=car(cdr(cdr(cdr(p1)))),equal(a,p3)&&equal(i,p2)||equal(i,p3)&&equal(a,p2)||equal(a,symbol(NIL))&&equal(i,symbol(NIL))&&(isplusone(p3)&&isplustwo(p2)||isplusone(p2)&&isplustwo(p3))))return push(car(cdr(p1))),void restore();if(expanding&&isadd(p1)){for(p1=cdr(p1),push(zero);iscons(p1);)push(car(p1)),push(p2),push(p3),transpose(),add(),p1=cdr(p1);restore()}else if(expanding&&ismultiply(p1)){for(p1=cdr(p1),push(one);iscons(p1);)push(car(p1)),push(p2),push(p3),transpose(),multiply(),p1=cdr(p1);restore()}else{if(!expanding||!isinnerordot(p1)){if(!istensor(p1))return isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(TRANSPOSE),push(p1),isplusone(p2)&&isplustwo(p3)||isplusone(p3)&&isplustwo(p2)?list(2):(push(p2),push(p3),list(4)),void restore());if(h=p1.tensor.ndim,g=p1.tensor.nelem,1===h)return push(p1),void restore();for(push(p2),c=pop_integer(),push(p3),_=pop_integer(),(c<1||c>h||_<1||_>h)&&stop("transpose: index out of range"),c--,_--,(p2=alloc_tensor(g)).tensor.ndim=h,p=f=0,A=h;0<=A?f<A:f>A;p=0<=A?++f:--f)p2.tensor.dim[p]=p1.tensor.dim[p];for(p2.tensor.dim[c]=p1.tensor.dim[_],p2.tensor.dim[_]=p1.tensor.dim[c],r=p1.tensor.elem,s=p2.tensor.elem,p=b=0,T=h;0<=T?b<T:b>T;p=0<=T?++b:--b)t[p]=0,o[p]=p1.tensor.dim[p];for(p=y=0,I=g;0<=I?y<I:y>I;p=0<=I?++y:--y){for(M=t[c],t[c]=t[_],t[_]=M,M=o[c],o[c]=o[_],o[_]=M,l=0,u=v=0,O=h;0<=O?v<O:v>O;u=0<=O?++v:--v)l=l*o[u]+t[u];for(M=t[c],t[c]=t[_],t[_]=M,M=o[c],o[c]=o[_],o[_]=M,s[l]=r[p],u=N=S=h-1;(S<=0?N<=0:N>=0)&&!(++t[u]<o[u]);u=S<=0?++N:--N)t[u]=0}return push(p2),restore()}for(p1=cdr(p1),e=[];iscons(p1);)e.push([car(p1),p2,p3]),p1=cdr(p1);for(n=m=E=e.length-1;E<=0?m<=0:m>=0;n=E<=0?++m:--m)push(e[n][0]),push(e[n][1]),push(e[n][2]),transpose(),n!==e.length-1&&inner();restore()}},Eval_user_function=function(){var r,e;if(DEBUG&&console.log("Eval_user_function evaluating: "+car(p1)),car(p1)!==symbol(SYMBOL_D)||get_binding(symbol(SYMBOL_D))!==symbol(SYMBOL_D)){if(push(car(p1)),Eval(),r=pop(),isNumericAtom(r)?stop("expected function invocation, found multiplication instead. Use '*' symbol explicitly for multiplication."):istensor(r)?stop("expected function invocation, found tensor product instead. Use 'dot/inner' explicitly."):isstr(r)&&stop("expected function, found string instead."),p3=car(cdr(r)),p4=car(cdr(cdr(r))),p5=cdr(p1),car(r)===symbol(FUNCTION)&&r!==car(p1)){for(p1=p4,p2=p5,e=tos;iscons(p1)&&iscons(p2);)push(car(p1)),push(car(p2)),p1=cdr(p1),p2=cdr(p2);return list(tos-e),p6=pop(),push(p3),iscons(p6)&&(push(p6),rewrite_args()),Eval()}for(e=tos,push(r),p1=p5;iscons(p1);)push(car(p1)),Eval(),p1=cdr(p1);list(tos-e)}else Eval_derivative()},rewrite_args=function(){var r,e;if(e=0,save(),p2=pop(),p1=pop(),istensor(p1))return e=rewrite_args_tensor(),restore(),e;if(iscons(p1)){for(r=tos,car(p1)===car(p2)?(push_symbol(EVAL),push(car(cdr(p2))),list(2)):push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),e+=rewrite_args(),p1=cdr(p1);return list(tos-r),restore(),e}if(!issymbol(p1))return push(p1),restore(),0;for(p3=p2;iscons(p3);){if(p1===car(p3))return push(cadr(p3)),restore(),1;p3=cddr(p3)}return p3=get_binding(p1),push(p3),p1!==p3&&(push(p2),0===(e=rewrite_args())&&(pop(),push(p1))),restore(),e},rewrite_args_tensor=function(){var r,e,t,o;for(t=0,r=0,push(p1),copy_tensor(),r=e=0,o=(p1=pop()).tensor.nelem;0<=o?e<o:e>o;r=0<=o?++e:--e)push(p1.tensor.elem[r]),push(p2),t+=rewrite_args(),p1.tensor.elem[r]=pop();return check_tensor_dimensions(p1),push(p1),t},Eval_zero=function(){var r,e,t,o,s,n,p,a;for(r=0,e=[],o=0,n=0,r=t=0,p=MAXDIM;0<=p?t<p:t>p;r=0<=p?++t:--t)e[r]=0;for(o=1,n=0,p2=cdr(p1);iscons(p2);){if(push(car(p2)),Eval(),(r=pop_integer())<1||isNaN(r))return void push(zero);o*=r,e[n++]=r,p2=cdr(p2)}if(0!==n){for((p1=alloc_tensor(o)).tensor.ndim=n,r=s=0,a=n;0<=a?s<a:s>a;r=0<=a?++s:--s)p1.tensor.dim[r]=e[r];return push(p1)}push(zero)},allocatedId=0,alloc_tensor=function(r){var e,t,o,s;for(e=0,(o=new U).k=TENSOR,o.tensor=new tensor,o.tensor.nelem=r,e=t=0,s=r;0<=s?t<s:t>s;e=0<=s?++t:--t)o.tensor.elem[e]=zero;return o.tensor.allocatedId=allocatedId,allocatedId++,check_tensor_dimensions(o),o},Find=function(r,e){var t,o,s;if(t=0,equal(r,e))return 1;if(istensor(r)){for(t=o=0,s=r.tensor.nelem;0<=s?o<s:o>s;t=0<=s?++o:--o)if(Find(r.tensor.elem[t],e))return 1;return 0}for(;iscons(r);){if(Find(car(r),e))return 1;r=cdr(r)}return 0},findPossibleClockForm=function(r){var e,t,o;if(e=0,isimaginaryunit(r))return 0;if(car(r)===symbol(POWER)&&!isinteger(caddr(p1))&&Find(cadr(r),imaginaryunit))return 1;if(car(r)===symbol(POWER)&&equaln(cadr(r),-1)&&!isinteger(caddr(p1)))return 1;if(istensor(r)){for(e=t=0,o=r.tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)if(findPossibleClockForm(r.tensor.elem[e]))return 1;return 0}for(;iscons(r);){if(findPossibleClockForm(car(r)))return 1;r=cdr(r)}return 0},findPossibleExponentialForm=function(r){var e,t,o;if(e=0,car(r)===symbol(POWER)&&cadr(r)===symbol(E))return Find(caddr(r),imaginaryunit);if(istensor(r)){for(e=t=0,o=r.tensor.nelem;0<=o?t<o:t>o;e=0<=o?++t:--t)if(findPossibleExponentialForm(r.tensor.elem[e]))return 1;return 0}for(;iscons(r);){if(findPossibleExponentialForm(car(r)))return 1;r=cdr(r)}return 0},$.Find=Find,init=function(){var r,e,t;if(r=0,flag=0,reset_after_error(),chainOfUserSymbolsNotFunctionsBeingEvaluated=[],!flag){for(flag=1,r=e=0,t=NSYM;0<=t?e<t:e>t;r=0<=t?++e:--e)symtab[r]=new U,symtab[r].k=SYM,binding[r]=symtab[r],isSymbolReclaimable[r]=!1;return defn()}},defn_str=['version="'+version+'"',"e=exp(1)","i=sqrt(-1)","autoexpand=1","assumeRealVariables=1","trange=[-pi,pi]","xrange=[-10,10]","yrange=[-10,10]","last=0","trace=0","forceFixedPrintout=1","maxFixedPrintoutDigits=6","printLeaveEAlone=1","printLeaveXAlone=0","cross(u,v)=[u[2]*v[3]-u[3]*v[2],u[3]*v[1]-u[1]*v[3],u[1]*v[2]-u[2]*v[1]]","curl(v)=[d(v[3],y)-d(v[2],z),d(v[1],z)-d(v[3],x),d(v[2],x)-d(v[1],y)]","div(v)=d(v[1],x)+d(v[2],y)+d(v[3],z)","ln(x)=log(x)"],defn=function(){var r,e,t,o,s;for(p0=symbol(NIL),p1=symbol(NIL),p2=symbol(NIL),p3=symbol(NIL),p4=symbol(NIL),p5=symbol(NIL),p6=symbol(NIL),p7=symbol(NIL),p8=symbol(NIL),p9=symbol(NIL),std_symbol("abs",ABS),std_symbol("add",ADD),std_symbol("adj",ADJ),std_symbol("and",AND),std_symbol("approxratio",APPROXRATIO),std_symbol("arccos",ARCCOS),std_symbol("arccosh",ARCCOSH),std_symbol("arcsin",ARCSIN),std_symbol("arcsinh",ARCSINH),std_symbol("arctan",ARCTAN),std_symbol("arctanh",ARCTANH),std_symbol("arg",ARG),std_symbol("atomize",ATOMIZE),std_symbol("besselj",BESSELJ),std_symbol("bessely",BESSELY),std_symbol("binding",BINDING),std_symbol("binomial",BINOMIAL),std_symbol("ceiling",CEILING),std_symbol("check",CHECK),std_symbol("choose",CHOOSE),std_symbol("circexp",CIRCEXP),std_symbol("clear",CLEAR),std_symbol("clearall",CLEARALL),std_symbol("clearpatterns",CLEARPATTERNS),std_symbol("clock",CLOCK),std_symbol("coeff",COEFF),std_symbol("cofactor",COFACTOR),std_symbol("condense",CONDENSE),std_symbol("conj",CONJ),std_symbol("contract",CONTRACT),std_symbol("cos",COS),std_symbol("cosh",COSH),std_symbol("decomp",DECOMP),std_symbol("defint",DEFINT),std_symbol("deg",DEGREE),std_symbol("denominator",DENOMINATOR),std_symbol("det",DET),std_symbol("derivative",DERIVATIVE),std_symbol("dim",DIM),std_symbol("dirac",DIRAC),std_symbol("divisors",DIVISORS),std_symbol("do",DO),std_symbol("dot",DOT),std_symbol("draw",DRAW),std_symbol("dsolve",DSOLVE),std_symbol("erf",ERF),std_symbol("erfc",ERFC),std_symbol("eigen",EIGEN),std_symbol("eigenval",EIGENVAL),std_symbol("eigenvec",EIGENVEC),std_symbol("eval",EVAL),std_symbol("exp",EXP),std_symbol("expand",EXPAND),std_symbol("expcos",EXPCOS),std_symbol("expsin",EXPSIN),std_symbol("factor",FACTOR),std_symbol("factorial",FACTORIAL),std_symbol("factorpoly",FACTORPOLY),std_symbol("filter",FILTER),std_symbol("float",FLOATF),std_symbol("floor",FLOOR),std_symbol("for",FOR),std_symbol("function",FUNCTION),std_symbol("Gamma",GAMMA),std_symbol("gcd",GCD),std_symbol("hermite",HERMITE),std_symbol("hilbert",HILBERT),std_symbol("imag",IMAG),std_symbol("component",INDEX),std_symbol("inner",INNER),std_symbol("integral",INTEGRAL),std_symbol("inv",INV),std_symbol("invg",INVG),std_symbol("isinteger",ISINTEGER),std_symbol("isprime",ISPRIME),std_symbol("laguerre",LAGUERRE),std_symbol("lcm",LCM),std_symbol("leading",LEADING),std_symbol("legendre",LEGENDRE),std_symbol("log",LOG),std_symbol("lookup",LOOKUP),std_symbol("mod",MOD),std_symbol("multiply",MULTIPLY),std_symbol("not",NOT),std_symbol("nroots",NROOTS),std_symbol("number",NUMBER),std_symbol("numerator",NUMERATOR),std_symbol("operator",OPERATOR),std_symbol("or",OR),std_symbol("outer",OUTER),std_symbol("pattern",PATTERN),std_symbol("patternsinfo",PATTERNSINFO),std_symbol("polar",POLAR),std_symbol("power",POWER),std_symbol("prime",PRIME),std_symbol("print",PRINT),std_symbol("print2dascii",PRINT2DASCII),std_symbol("printcomputer",PRINTFULL),std_symbol("printlatex",PRINTLATEX),std_symbol("printlist",PRINTLIST),std_symbol("printhuman",PRINTPLAIN),std_symbol("printLeaveEAlone",PRINT_LEAVE_E_ALONE),std_symbol("printLeaveXAlone",PRINT_LEAVE_X_ALONE),std_symbol("product",PRODUCT),std_symbol("quote",QUOTE),std_symbol("quotient",QUOTIENT),std_symbol("rank",RANK),std_symbol("rationalize",RATIONALIZE),std_symbol("real",REAL),std_symbol("rect",YYRECT),std_symbol("roots",ROOTS),std_symbol("round",ROUND),std_symbol("equals",SETQ),std_symbol("sgn",SGN),std_symbol("silentpattern",SILENTPATTERN),std_symbol("simplify",SIMPLIFY),std_symbol("sin",SIN),std_symbol("sinh",SINH),std_symbol("shape",SHAPE),std_symbol("sqrt",SQRT),std_symbol("stop",STOP),std_symbol("subst",SUBST),std_symbol("sum",SUM),std_symbol("symbolsinfo",SYMBOLSINFO),std_symbol("tan",TAN),std_symbol("tanh",TANH),std_symbol("taylor",TAYLOR),std_symbol("test",TEST),std_symbol("testeq",TESTEQ),std_symbol("testge",TESTGE),std_symbol("testgt",TESTGT),std_symbol("testle",TESTLE),std_symbol("testlt",TESTLT),std_symbol("transpose",TRANSPOSE),std_symbol("unit",UNIT),std_symbol("zero",ZERO),std_symbol("nil",NIL),std_symbol("autoexpand",AUTOEXPAND),std_symbol("bake",BAKE),std_symbol("assumeRealVariables",ASSUME_REAL_VARIABLES),std_symbol("last",LAST),std_symbol("lastprint",LAST_PRINT),std_symbol("last2dasciiprint",LAST_2DASCII_PRINT),std_symbol("lastfullprint",LAST_FULL_PRINT),std_symbol("lastlatexprint",LAST_LATEX_PRINT),std_symbol("lastlistprint",LAST_LIST_PRINT),std_symbol("lastplainprint",LAST_PLAIN_PRINT),std_symbol("trace",TRACE),std_symbol("forceFixedPrintout",FORCE_FIXED_PRINTOUT),std_symbol("maxFixedPrintoutDigits",MAX_FIXED_PRINTOUT_DIGITS),std_symbol("~",YYE),std_symbol("$DRAWX",DRAWX),std_symbol("$METAA",METAA),std_symbol("$METAB",METAB),std_symbol("$METAX",METAX),std_symbol("$SECRETX",SECRETX),std_symbol("version",VERSION),std_symbol("pi",PI),std_symbol("a",SYMBOL_A),std_symbol("b",SYMBOL_B),std_symbol("c",SYMBOL_C),std_symbol("d",SYMBOL_D),std_symbol("i",SYMBOL_I),std_symbol("j",SYMBOL_J),std_symbol("n",SYMBOL_N),std_symbol("r",SYMBOL_R),std_symbol("s",SYMBOL_S),std_symbol("t",SYMBOL_T),std_symbol("x",SYMBOL_X),std_symbol("y",SYMBOL_Y),std_symbol("z",SYMBOL_Z),std_symbol("I",SYMBOL_IDENTITY_MATRIX),std_symbol("a_",SYMBOL_A_UNDERSCORE),std_symbol("b_",SYMBOL_B_UNDERSCORE),std_symbol("x_",SYMBOL_X_UNDERSCORE),std_symbol("$C1",C1),std_symbol("$C2",C2),std_symbol("$C3",C3),std_symbol("$C4",C4),std_symbol("$C5",C5),std_symbol("$C6",C6),defineSomeHandyConstants(),o=codeGen,codeGen=!1,e=t=0,s=defn_str.length;0<=s?t<s:t>s;e=0<=s?++t:--t)r=defn_str[e],scan(r),DEBUG&&(console.log("... evaling "+r),console.log("top of stack:"),console.log(print_list(stack[tos-1]))),Eval(),pop();return codeGen=o},defineSomeHandyConstants=function(){return push_integer(0),zero=pop(),push_integer(1),one=pop(),push_double(1),one_as_double=pop(),push_symbol(POWER),DEBUG&&console.log(print_list(stack[tos-1])),push_integer(-1),DEBUG&&console.log(print_list(stack[tos-1])),push_rational(1,2),DEBUG&&console.log(print_list(stack[tos-1])),list(3),DEBUG&&console.log(print_list(stack[tos-1])),imaginaryunit=pop()},mcmp=function(r,e){return r.compare(e)},mcmpint=function(r,e){var t;return t=bigInt(e),mcmp(r,t)},strcmp=function(r,e){return r===e?0:r>e?1:-1},doubleToReasonableString=function(r){var e,t;return codeGen?""+r:(isZeroAtomOrTensor(get_binding(symbol(FORCE_FIXED_PRINTOUT)))?(t=""+r,t=printMode===PRINTMODE_LATEX?/\d*\.\d*e.*/gm.test(t)?t.replace(/e(.*)/gm,"\\mathrm{e}{$1}"):t.replace(/(\d+)e(.*)/gm,"$1.0\\mathrm{e}{$2}"):/\d*\.\d*e.*/gm.test(t)?t.replace(/e(.*)/gm,"*10^($1)"):t.replace(/(\d+)e(.*)/gm,"$1.0*10^($2)")):(push(get_binding(symbol(MAX_FIXED_PRINTOUT_DIGITS))),e=pop_integer(),-1===(t=(t=(t=""+r.toFixed(e)).replace(/(\.\d*?[1-9])0+$/gm,"$1")).replace(/\.0+$/gm,"")).indexOf(".")&&(t+=".0"),parseFloat(t)!==r&&(t=r.toFixed(e)+"...")),t)},clear_term=function(){},isspace=function(r){return null!=r&&(" "===r||"\t"===r||"\n"===r||"\v"===r||"\f"===r||"\r"===r)},isdigit=function(r){return null!=r&&/^\d+$/.test(r)},isalpha=function(r){return null!=r&&-1===r.search(/[^A-Za-z]/)},isalphaOrUnderscore=function(r){return null!=r&&-1===r.search(/[^A-Za-z_]/)},isunderscore=function(r){return null!=r&&-1===r.search(/_/)},isalnumorunderscore=function(r){return null!=r&&(isalphaOrUnderscore(r)||isdigit(r))},count=function(r){var e;if(iscons(r))for(e=0;iscons(r);)e+=count(car(r))+1,r=cdr(r);else e=1;return e},countOccurrencesOfSymbol=function(r,e){var t;if(t=0,iscons(e))for(;iscons(e);)t+=countOccurrencesOfSymbol(r,car(e)),e=cdr(e);else equal(r,e)&&(t=1);return t},countsize=function(r){var e,t,o,s;if(o=0,istensor(r))for(e=t=0,s=r.tensor.nelem;0<=s?t<s:t>s;e=0<=s?++t:--t)o+=r.tensor.elem[e];else if(iscons(r))for(;iscons(r);)o+=count(car(r))+1,r=cdr(r);else o=1;return o},stop=function(r){var e;throw errorMessage+="Stop: ",e=errorMessage+=r,errorMessage="",moveTos(0),new Error(e)},findDependenciesInScript=function(r,e){var t,o,s,n,p,a,i,u,l,c,d,_,m,f,h,g,b,y,v,x,E,A,T,I,O,S,N,M,R,L,k,q,D,P,U,w,B,G,C,F,Y,X,W,z,Z,V,$;for(DEBUG&&console.log("stringToBeParsed: "+r),X=(new Date).getTime(),codeGen=!0,symbolsDependencies={},symbolsHavingReassignments=[],symbolsInExpressionsWithoutAssignments=[],patternHasBeenFound=!1,d=0,T=0,n={affectsVariables:[],affectedBy:[]},C=r;;){try{errorMessage="",check_stack(),DEBUG&&console.log("findDependenciesInScript: scanning"),T=scan(r.substring(d)),DEBUG&&console.log("scanned"),pop(),check_stack()}catch(r){a=r,PRINTOUTRESULT&&console.log(a),errorMessage=a+"",reset_after_error();break}if(0===T)break;d+=T}for(_ in Y="",DEBUG&&console.log("all local dependencies ----------------"),Y+="All local dependencies: ",symbolsDependencies){for(V=symbolsDependencies[_],DEBUG&&console.log("variable "+_+" depends on: "),n.affectsVariables.push(_),Y+=" variable "+_+" depends on: ",m=0,f=V.length;m<f;m++)l=V[m],DEBUG&&console.log("    "+l),"'"!==l[0]&&n.affectedBy.push(l),Y+=l+", ";Y+="; "}for(Y+=". ",DEBUG&&console.log("Symbols with reassignments ----------------"),Y+="Symbols with reassignments: ",A=0,h=symbolsHavingReassignments.length;A<h;A++)_=symbolsHavingReassignments[A],-1===n.affectedBy.indexOf(_)&&(n.affectedBy.push(_),Y+=_+", ");for(Y+=". ",DEBUG&&console.log("Symbols in expressions without assignments ----------------"),Y+="Symbols in expressions without assignments: ",I=0,g=symbolsInExpressionsWithoutAssignments.length;I<g;I++)_=symbolsInExpressionsWithoutAssignments[I],-1===n.affectedBy.indexOf(_)&&(n.affectedBy.push(_),Y+=_+", ");if(Y+=". ",n.affectedBy.push("PATTERN_DEPENDENCY"),patternHasBeenFound&&(n.affectsVariables.push("PATTERN_DEPENDENCY"),Y+=" - PATTERN_DEPENDENCY inserted - "),DEBUG&&console.log("All dependencies recursively ----------------"),Y+="All dependencies recursively: ",G=["",""],u="",q="",""===errorMessage&&!e){try{G=run(r,!0)}catch(r){a=r,PRINTOUTRESULT&&console.log(a),errorMessage=a+"",init()}if(""===errorMessage)for(_ in symbolsDependencies){for(codeGen=!0,DEBUG&&console.log("  variable "+_+" is: "+get_binding(usr_symbol(_)).toString()),codeGen=!1,DEBUG&&console.log("  variable "+_+" depends on: "),Y+=" variable "+_+" depends on: ",recursiveDependencies(_,D=[],[],$=[],[],o=[]),S=0,b=$.length;S<b;S++)l=$[S],DEBUG&&console.log("    --\x3e cycle through "+l);for(L=0,y=D.length;L<y;L++)l=D[L],DEBUG&&console.log("    "+l),Y+=l+", ";for(Y+="; ",k=0,v=o.length;k<v;k++)Y+=" "+(l=o[k])+", ";for(DEBUG&&console.log("  code generation:"+_+" is: "+get_binding(usr_symbol(_)).toString()),push(get_binding(usr_symbol(_))),U=[],w=[],B=0,x=D.length;B<x;B++)"'"===(p=D[B])[0]&&(s=p.substring(1),M=usr_symbol(s),O=usr_symbol("AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE"+s),U.push(M),w.push(O),push(M),push(O),subst(),DEBUG&&console.log("after substitution: "+stack[tos-1]));try{simplifyForCodeGeneration()}catch(r){a=r,PRINTOUTRESULT&&console.log(a),errorMessage=a+"",init()}for(c=F=0,P=U.length;0<=P?F<P:F>P;c=0<=P?++F:--F)push(w[c]),push(U[c]),subst();if(clearRenamedVariablesToAvoidBindingToExternalScope(),""===errorMessage){if(W=pop(),collectUserSymbols(W,Z=[]),codeGen=!0,i=W.toString(),codeGen=!1,N=printMode,printMode=PRINTMODE_LATEX,t=W.toString(),printMode=N,-1!==$.indexOf(_))u+="// "+_+" is part of a cyclic dependency, no code generated.",q+="#"+_+" is part of a cyclic dependency, no code generated.";else if(0!==(Z=(Z=Z.filter((function(r){return-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(r+"")}))).filter((function(r){return-1!==D.indexOf(r+"")||-1!==D.indexOf("'"+r)}))).length){for(R="(",z=0,E=Z.length;z<E;z++)(l=Z[z]).printname!==_&&(R+=l.printname+", ");R=R.replace(/, $/gm,""),u+=_+" = function "+(R+=")")+" { return ( "+i+" ); }",q+=_+R+" = "+t}else u+=_+" = "+i+";",q+=_+" = "+t;u+="\n",q+="\n",DEBUG&&console.log("    "+u)}}}return u=u.replace(/\n$/gm,""),q=q.replace(/\n$/gm,""),symbolsDependencies={},symbolsHavingReassignments=[],patternHasBeenFound=!1,symbolsInExpressionsWithoutAssignments=[],DEBUG&&console.log("testable string: "+Y),TIMING_DEBUGS&&console.log("findDependenciesInScript time for: "+C+" : "+((new Date).getTime()-X)+"ms"),[Y,G[0],u,q,G[1],errorMessage,n]},recursiveDependencies=function(r,e,t,o,s,n){var p,a,i,u,l,c,d,_;if(t.push(r),null!=symbolsDependencies[s[s.length-1]]&&-1!==symbolsDependencies[s[s.length-1]].indexOf("'"+r))return DEBUG&&console.log("can't keep following the chain of "+r+" because it's actually a variable bound to a parameter"),-1===e.indexOf("'"+r)&&-1===e.indexOf(r)&&e.push(r),e;if(s.push(r),null==symbolsDependencies[r])return-1===e.indexOf(r)&&e.push(r),e;for(u=0,l=(_=symbolsDependencies[r]).length;u<l;u++)if(a=_[u],-1!==s.indexOf(a)){for(DEBUG&&console.log("  found cycle:"),p="",d=0,c=s.length;d<c;d++)i=s[d],-1===o.indexOf(i)&&o.push(i),DEBUG&&console.log(i+" --\x3e "),p+=i+" --\x3e ";DEBUG&&console.log(" ... then "+a+" again"),p+=" ... then "+a+" again",n.push(p),-1===o.indexOf(a)&&o.push(a)}else recursiveDependencies(a,e,t,o,s,n),s.pop();return e},inited=!1,latexErrorSign="\\rlap{\\large\\color{red}\\bigtriangleup}{\\ \\ \\tiny\\color{red}!}",turnErrorMessageToLatex=function(r){return"$$\\text{"+(r=(r=(r=(r=(r=(r=(r=r.replace(/\n/g,"")).replace(/_/g,"} \\_ \\text{")).replace(new RegExp(String.fromCharCode(transpose_unicode),"g"),"}{}^{T}\\text{")).replace(new RegExp(String.fromCharCode(dotprod_unicode),"g"),"}\\cdot \\text{")).replace("Stop:","}  \\quad \\text{Stop:")).replace("->","}  \\rightarrow \\text{")).replace("?","}\\enspace "+latexErrorSign+" \\enspace  \\text{")).replace(/\n/g,"")+"}$$"},normaliseDots=function(r){return(r=(r=(r=(r=r.replace(new RegExp(String.fromCharCode(8901),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(8226),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(12539),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(55296),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(65381),"g"),String.fromCharCode(dotprod_unicode))},TIMING_DEBUGS=!1,run=function(r,e=!1){var t,o,s,n,p,a,i,u,l,c;if(l=(new Date).getTime(),"selftest"!==(r=normaliseDots(r))){for(inited||(inited=!0,init()),i=0,a=0,o="",t="";;){try{errorMessage="",check_stack(),i=scan(r.substring(a)),p1=pop(),check_stack()}catch(r){p=r,PRINTOUTRESULT&&console.log(p),o+=p.message,e&&(t+=turnErrorMessageToLatex(p.message)),reset_after_error();break}if(0===i)break;a+=i,push(p1);try{stringsEmittedByUserPrintouts="",top_level_eval(),p2=pop(),check_stack(),isstr(p2)&&(DEBUG&&console.log(p2.str),DEBUG&&console.log("\n")),p2===symbol(NIL)?(n=stringsEmittedByUserPrintouts,e&&(s="$$"+stringsEmittedByUserPrintouts+"$$")):(n=print_expr(p2),n+="\n",e&&(s="$$"+collectLatexStringFromReturnValue(p2)+"$$",DEBUG&&console.log("collectedLatexResult: "+s))),o+=n,e&&(t+=s),PRINTOUTRESULT&&(DEBUG&&console.log("printline"),DEBUG&&console.log(n)),PRINTOUTRESULT&&(DEBUG&&console.log("display:"),print2dascii(p2)),e&&(t+="\n")}catch(r){n=(p=r).message,e&&(s=turnErrorMessageToLatex(p.message)),PRINTOUTRESULT&&console.log(n),o+=n,""!==n&&(o+="\n"),e&&(t+=s,t+="\n"),init()}}return"\n"===o[o.length-1]&&(o=o.substring(0,o.length-1)),e&&"\n"===t[t.length-1]&&(t=t.substring(0,t.length-1)),e?(DEBUG&&console.log("allReturnedLatexStrings: "+t),u=[o,t]):u=o,TIMING_DEBUGS&&(c="run time on: "+r+" : "+((new Date).getTime()-l)+"ms",console.log(c)),o="",t="",u}selftest()},check_stack=function(){if(0!==tos&&stop("stack error"),frame!==TOS&&stop("frame error"),0!==chainOfUserSymbolsNotFunctionsBeingEvaluated.length&&stop("symbols evaluation still ongoing?"),0!==evaluatingAsFloats&&stop("numeric evaluation still ongoing?"),0!==evaluatingPolar)return stop("evaluation of polar still ongoing?")},top_level_eval=function(){var r,e,t;if(DEBUG&&console.log("#### top level eval"),trigmode=0,t=symbol(AUTOEXPAND),expanding=isZeroAtomOrTensor(get_binding(t))?0:1,e=top(),Eval(),(r=top())!==symbol(NIL)&&(set_binding(symbol(LAST),r),isZeroAtomOrTensor(get_binding(symbol(BAKE)))||(bake(),r=top()),e!==symbol(SYMBOL_I)&&e!==symbol(SYMBOL_J)||!isimaginaryunit(r))){if(isimaginaryunit(get_binding(symbol(SYMBOL_J))))return push(imaginaryunit),push_symbol(SYMBOL_J),subst();if(isimaginaryunit(get_binding(symbol(SYMBOL_I))))return push(imaginaryunit),push_symbol(SYMBOL_I),subst()}},check_esc_flag=function(){if(esc_flag)return stop("esc key")},clearAlgebraEnvironment=function(){return do_clearall()},computeDependenciesFromAlgebra=function(r){var e,t,o;if(DEBUG&&console.log("computeDependenciesFromAlgebra!!!"),called_from_Algebra_block=!0,r=normaliseDots(r),DEBUG){for(console.log("computeDependenciesFromAlgebra: patterns in the list --------------- "),o=0,t=userSimplificationsInListForm.length;o<t;o++)e=userSimplificationsInListForm[o],console.log(car(e)+","+cdr(e)+")");console.log("...end of list --------------- ")}return called_from_Algebra_block=!1,findDependenciesInScript(r,!0)[6]},computeResultsAndJavaScriptFromAlgebra=function(r){var e,t,o,s,n,p,a,i,u,l,c;if(called_from_Algebra_block=!0,c=(new Date).getTime(),TIMING_DEBUGS&&console.log(" --------- computeResultsAndJavaScriptFromAlgebra input: "+r+" at: "+new Date),u=r=normaliseDots(r),DEBUG){for(console.log("computeResultsAndJavaScriptFromAlgebra: patterns in the list --------------- "),s=0,p=userSimplificationsInListForm.length;s<p;s++)o=userSimplificationsInListForm[s],console.log(car(o)+","+cdr(o)+")");console.log("...end of list --------------- ")}return[l,i,e,a,n,errorMessage,t]=findDependenciesInScript(r),called_from_Algebra_block=!1,""===a&&""===errorMessage||(i+="\n"+a,""!==errorMessage&&(i+="\n"+errorMessage),i=i.replace(/\n/g,"\n\n"),n+="\n$$"+a+"$$",""!==errorMessage&&(n+=turnErrorMessageToLatex(errorMessage)),n=n.replace(/\n/g,"\n\n")),n=(n=n.replace(/\n*/,"")).replace(/\$\$\$\$\n*/g,""),e=(e=e.replace(/Math\./g,"")).replace(/\n/g,"\n\n"),TIMING_DEBUGS&&console.log("computeResultsAndJavaScriptFromAlgebra time (total time from notebook and back) for: "+u+" : "+((new Date).getTime()-c)+"ms"),{code:e,result:n,latexResult:n,dependencyInfo:t}},(null!==exports?exports:this).run=run,(null!==exports?exports:this).findDependenciesInScript=findDependenciesInScript,(null!==exports?exports:this).computeDependenciesFromAlgebra=computeDependenciesFromAlgebra,(null!==exports?exports:this).computeResultsAndJavaScriptFromAlgebra=computeResultsAndJavaScriptFromAlgebra,(null!==exports?exports:this).clearAlgebraEnvironment=clearAlgebraEnvironment,tos=0,nil_symbols=0,push=function(r){return r.isZero,r===symbol(NIL)&&(nil_symbols++,DEBUG&&console.log("pushing symbol(NIL) #"+nil_symbols)),tos>=frame&&stop("stack overflow"),stack[tos++]=r},moveTos=function(r){if(tos<=r)tos=r;else for(;tos>r;)stack[tos]=null,tos--},top=function(){return stack[tos-1]},pop=function(){var r;return 0===tos&&stop("stack underflow"),stack[tos-1],r=stack[--tos],stack[tos]=null,r},push_frame=function(r){var e,t,o,s;for(e=0,(frame-=r)<tos&&stop("frame overflow, circular reference?"),s=[],e=t=0,o=r;0<=o?t<o:t>o;e=0<=o?++t:--t)s.push(stack[frame+e]=symbol(NIL));return s},pop_frame=function(r){if((frame+=r)>TOS)return stop("frame underflow")},save=function(){return(frame-=10)<tos&&stop("frame overflow, circular reference?"),stack[frame+0]=p0,stack[frame+1]=p1,stack[frame+2]=p2,stack[frame+3]=p3,stack[frame+4]=p4,stack[frame+5]=p5,stack[frame+6]=p6,stack[frame+7]=p7,stack[frame+8]=p8,stack[frame+9]=p9},restore=function(){return frame>TOS-10&&stop("frame underflow"),p0=stack[frame+0],p1=stack[frame+1],p2=stack[frame+2],p3=stack[frame+3],p4=stack[frame+4],p5=stack[frame+5],p6=stack[frame+6],p7=stack[frame+7],p8=stack[frame+8],p9=stack[frame+9],frame+=10},swap=function(){var r,e;return r=pop(),e=pop(),push(r),push(e)},dupl=function(){var r;return r=pop(),push(r),push(r)},$.dupl=dupl,$.swap=swap,$.restore=restore,$.save=save,$.push=push,$.pop=pop,Eval_symbolsinfo=function(){var r;return""!==(r=symbolsinfo())?new_string(r):push_symbol(NIL)},symbolsinfo=function(){var r,e,t,o,s,n,p;for(n="",e=t=o=NIL+1,s=symtab.length;o<=s?t<s:t>s;e=o<=s?++t:--t)if(""!==symtab[e].printname)p=symtab[e]+"",r=(binding[e]+"").substring(0,4),n+="symbol: "+p+" size: "+countsize(binding[e])+" value: "+r+"...\n";else if(!1===isSymbolReclaimable[e])break;return n},std_symbol=function(r,e,t){var o;return(o=symtab[e]).printname=r,o.latexPrint=null!=t?t:r},usr_symbol=function(r){var e,t,o;for(e=0,e=t=0,o=NSYM;0<=o?t<o:t>o;e=0<=o?++t:--t){if(r===symtab[e].printname)return symtab[e];if(""===symtab[e].printname)break}return e===NSYM&&stop("symbol table overflow"),symtab[e]=new U,symtab[e].k=SYM,symtab[e].printname=r,binding[e]=symtab[e],isSymbolReclaimable[e]=!1,symtab[e]},get_printname=function(r){return r.k!==SYM&&stop("symbol error"),r.printname},set_binding=function(r,e){var t;return r.k!==SYM&&stop("symbol error"),t=symtab.indexOf(r),-1!==symtab.indexOf(r,t+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> set_binding lookup "+t),isSymbolReclaimable[t]=!1,binding[t]=e},get_binding=function(r){var e;return r.k!==SYM&&stop("symbol error"),e=symtab.indexOf(r),-1!==symtab.indexOf(r,e+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> get_binding lookup "+e),binding[e]},is_usr_symbol=function(r){var e;return r.k===SYM&&(e=symnum(r))>PI&&e!==SYMBOL_I&&e!==SYMBOL_IDENTITY_MATRIX},lookupsTotal=0,symnum=function(r){var e;return lookupsTotal++,r.k!==SYM&&stop("symbol error"),e=symtab.indexOf(r),-1!==symtab.indexOf(r,e+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> symnum lookup "+e+" lookup # "+lookupsTotal),e},push_symbol=function(r){return push(symtab[r])},clear_symbols=function(){var r,e,t,o,s;for(s=[],r=e=t=NIL+1,o=NSYM;t<=o?e<o:e>o;r=t<=o?++e:--e)if(""!==symtab[r].printname)symtab[r]=new U,symtab[r].k=SYM,binding[r]=symtab[r],s.push(isSymbolReclaimable[r]=!1);else if(!1===isSymbolReclaimable[r])break;return s},collectUserSymbols=function(r,e=[]){var t,o,s;if(is_usr_symbol(r)&&-1===e.indexOf(r))e.push(r);else if(istensor(r))for(t=o=0,s=r.tensor.nelem;0<=s?o<s:o>s;t=0<=s?++o:--o)collectUserSymbols(r.tensor.elem[t],e);else for(;iscons(r);)collectUserSymbols(car(r),e),r=cdr(r)},$.get_binding=get_binding,$.set_binding=set_binding,$.usr_symbol=usr_symbol,$.symbolsinfo=symbolsinfo,$.collectUserSymbols=collectUserSymbols,inited||(inited=!0,init()),$.init=init,parse_internal=function(r){return"string"==typeof r?scan(r):"number"==typeof r?r%1==0?push_integer(r):push_double(r):r instanceof U?push(r):(console.warn("unknown argument type",r),push(symbol(NIL)))},parse=function(r){var e,t;try{parse_internal(r),e=pop(),check_stack()}catch(r){throw t=r,reset_after_error(),t}return e},exec=function(r,...e){var t,o,s,n,p,a;for(s=get_binding(usr_symbol(r)),check_stack(),push(s),n=0,p=e.length;n<p;n++)t=e[n],parse_internal(t);list(1+e.length),p1=pop(),push(p1);try{top_level_eval(),a=pop(),check_stack()}catch(r){throw o=r,reset_after_error(),o}return a},$.exec=exec,$.parse=parse,function(){var r,e,t,o,s;for(s=[],t=0,o=(r=["abs","add","adj","and","approxratio","arccos","arccosh","arcsin","arcsinh","arctan","arctanh","arg","atomize","besselj","bessely","binding","binomial","ceiling","check","choose","circexp","clear","clearall","clearpatterns","clock","coeff","cofactor","condense","conj","contract","cos","cosh","decomp","defint","deg","denominator","det","derivative","dim","dirac","divisors","do","dot","draw","dsolve","eigen","eigenval","eigenvec","erf","erfc","eval","exp","expand","expcos","expsin","factor","factorial","factorpoly","filter","float","floor","for","Gamma","gcd","hermite","hilbert","imag","component","inner","integral","inv","invg","isinteger","isprime","laguerre","lcm","leading","legendre","log","mod","multiply","not","nroots","number","numerator","operator","or","outer","pattern","patternsinfo","polar","power","prime","print","print2dascii","printcomputer","printlatex","printlist","printhuman","product","quote","quotient","rank","rationalize","real","rect","roots","round","equals","shape","sgn","silentpattern","simplify","sin","sinh","sqrt","stop","subst","sum","symbolsinfo","tan","tanh","taylor","test","testeq","testge","testgt","testle","testlt","transpose","unit","zero"]).length;t<o;t++)e=r[t],s.push($[e]=exec.bind(this,e))}(),freeze=function(){var r,e,t,o,s;for(e=[],r=[],t=o=0,s=symtab.length;0<=s?o<s:o>s;t=0<=s?++o:--o)!1===isSymbolReclaimable[t]&&(e.push(symtab[t]),r.push(binding[t]));return[e,r,userSimplificationsInListForm.slice(0),zero,one,imaginaryunit,getStateHash()]},unfreeze=function(r){var e,t,o,s,n,p;for([o,e,t,zero,one,imaginaryunit]=r,s=n=0,p=o.length;0<=p?n<p:n>p;s=0<=p?++n:--n)symtab[s]=o[s],binding[s]=e[s];return userSimplificationsInListForm=t.slice(0)},compareState=function(r){return getStateHash()===r},getStateHash=function(){var r,e,t,o,s,n,p;for(r="",e=t=n=NIL+1,p=symtab.length;n<=p?t<p:t>p;e=n<=p?++t:--t)if(""!==symtab[e].printname)r+=" //"+print_list(symtab[e])+" : "+print_list(binding[e]);else if(!1===isSymbolReclaimable[e])break;for(s=0,o=userSimplificationsInListForm.length;s<o;s++)r+=" pattern: "+(e=userSimplificationsInListForm[s]);return DEBUG&&console.log("frozenHash: "+r),r}}).call(this)},736:(r,e,t)=>{var o;r=t.nmd(r);var s=function(r){"use strict";var e=1e7,t=9007199254740992,o=d(t),n="0123456789abcdefghijklmnopqrstuvwxyz",p="function"==typeof BigInt;function a(r,e,t,o){return void 0===r?a[0]:void 0===e||10==+e&&!t?H(r):W(r,e,t,o)}function i(r,e){this.value=r,this.sign=e,this.isSmall=!1}function u(r){this.value=r,this.sign=r<0,this.isSmall=!0}function l(r){this.value=r}function c(r){return-t<r&&r<t}function d(r){return r<1e7?[r]:r<1e14?[r%1e7,Math.floor(r/1e7)]:[r%1e7,Math.floor(r/1e7)%1e7,Math.floor(r/1e14)]}function _(r){m(r);var t=r.length;if(t<4&&R(r,o)<0)switch(t){case 0:return 0;case 1:return r[0];case 2:return r[0]+r[1]*e;default:return r[0]+(r[1]+r[2]*e)*e}return r}function m(r){for(var e=r.length;0===r[--e];);r.length=e+1}function f(r){for(var e=new Array(r),t=-1;++t<r;)e[t]=0;return e}function h(r){return r>0?Math.floor(r):Math.ceil(r)}function g(r,t){var o,s,n=r.length,p=t.length,a=new Array(n),i=0,u=e;for(s=0;s<p;s++)i=(o=r[s]+t[s]+i)>=u?1:0,a[s]=o-i*u;for(;s<n;)i=(o=r[s]+i)===u?1:0,a[s++]=o-i*u;return i>0&&a.push(i),a}function b(r,e){return r.length>=e.length?g(r,e):g(e,r)}function y(r,t){var o,s,n=r.length,p=new Array(n),a=e;for(s=0;s<n;s++)o=r[s]-a+t,t=Math.floor(o/a),p[s]=o-t*a,t+=1;for(;t>0;)p[s++]=t%a,t=Math.floor(t/a);return p}function v(r,t){var o,s,n=r.length,p=t.length,a=new Array(n),i=0,u=e;for(o=0;o<p;o++)(s=r[o]-i-t[o])<0?(s+=u,i=1):i=0,a[o]=s;for(o=p;o<n;o++){if(!((s=r[o]-i)<0)){a[o++]=s;break}s+=u,a[o]=s}for(;o<n;o++)a[o]=r[o];return m(a),a}function x(r,t,o){var s,n,p=r.length,a=new Array(p),l=-t,c=e;for(s=0;s<p;s++)n=r[s]+l,l=Math.floor(n/c),n%=c,a[s]=n<0?n+c:n;return"number"==typeof(a=_(a))?(o&&(a=-a),new u(a)):new i(a,o)}function E(r,t){var o,s,n,p,a=r.length,i=t.length,u=f(a+i),l=e;for(n=0;n<a;++n){p=r[n];for(var c=0;c<i;++c)o=p*t[c]+u[n+c],s=Math.floor(o/l),u[n+c]=o-s*l,u[n+c+1]+=s}return m(u),u}function A(r,t){var o,s,n=r.length,p=new Array(n),a=e,i=0;for(s=0;s<n;s++)o=r[s]*t+i,i=Math.floor(o/a),p[s]=o-i*a;for(;i>0;)p[s++]=i%a,i=Math.floor(i/a);return p}function T(r,e){for(var t=[];e-- >0;)t.push(0);return t.concat(r)}function I(r,e){var t=Math.max(r.length,e.length);if(t<=30)return E(r,e);t=Math.ceil(t/2);var o=r.slice(t),s=r.slice(0,t),n=e.slice(t),p=e.slice(0,t),a=I(s,p),i=I(o,n),u=I(b(s,o),b(p,n)),l=b(b(a,T(v(v(u,a),i),t)),T(i,2*t));return m(l),l}function O(r,t,o){return new i(r<e?A(t,r):E(t,d(r)),o)}function S(r){var t,o,s,n,p=r.length,a=f(p+p),i=e;for(s=0;s<p;s++){o=0-(n=r[s])*n;for(var u=s;u<p;u++)t=n*r[u]*2+a[s+u]+o,o=Math.floor(t/i),a[s+u]=t-o*i;a[s+p]=o}return m(a),a}function N(r,e){var t,o,s,n,p=r.length,a=f(p);for(s=0,t=p-1;t>=0;--t)s=(n=1e7*s+r[t])-(o=h(n/e))*e,a[t]=0|o;return[a,0|s]}function M(r,t){var o,s=H(t);if(p)return[new l(r.value/s.value),new l(r.value%s.value)];var n,c=r.value,g=s.value;if(0===g)throw new Error("Cannot divide by zero");if(r.isSmall)return s.isSmall?[new u(h(c/g)),new u(c%g)]:[a[0],r];if(s.isSmall){if(1===g)return[r,a[0]];if(-1==g)return[r.negate(),a[0]];var b=Math.abs(g);if(b<e){n=_((o=N(c,b))[0]);var y=o[1];return r.sign&&(y=-y),"number"==typeof n?(r.sign!==s.sign&&(n=-n),[new u(n),new u(y)]):[new i(n,r.sign!==s.sign),new u(y)]}g=d(b)}var x=R(c,g);if(-1===x)return[a[0],r];if(0===x)return[a[r.sign===s.sign?1:-1],a[0]];n=(o=c.length+g.length<=200?function(r,t){var o,s,n,p,a,i,u,l=r.length,c=t.length,d=e,m=f(t.length),h=t[c-1],g=Math.ceil(d/(2*h)),b=A(r,g),y=A(t,g);for(b.length<=l&&b.push(0),y.push(0),h=y[c-1],s=l-c;s>=0;s--){for(o=d-1,b[s+c]!==h&&(o=Math.floor((b[s+c]*d+b[s+c-1])/h)),n=0,p=0,i=y.length,a=0;a<i;a++)n+=o*y[a],u=Math.floor(n/d),p+=b[s+a]-(n-u*d),n=u,p<0?(b[s+a]=p+d,p=-1):(b[s+a]=p,p=0);for(;0!==p;){for(o-=1,n=0,a=0;a<i;a++)(n+=b[s+a]-d+y[a])<0?(b[s+a]=n+d,n=0):(b[s+a]=n,n=1);p+=n}m[s]=o}return b=N(b,g)[0],[_(m),_(b)]}(c,g):function(r,t){for(var o,s,n,p,a,i=r.length,u=t.length,l=[],c=[],d=e;i;)if(c.unshift(r[--i]),m(c),R(c,t)<0)l.push(0);else{n=c[(s=c.length)-1]*d+c[s-2],p=t[u-1]*d+t[u-2],s>u&&(n=(n+1)*d),o=Math.ceil(n/p);do{if(R(a=A(t,o),c)<=0)break;o--}while(o);l.push(o),c=v(c,a)}return l.reverse(),[_(l),_(c)]}(c,g))[0];var E=r.sign!==s.sign,T=o[1],I=r.sign;return"number"==typeof n?(E&&(n=-n),n=new u(n)):n=new i(n,E),"number"==typeof T?(I&&(T=-T),T=new u(T)):T=new i(T,I),[n,T]}function R(r,e){if(r.length!==e.length)return r.length>e.length?1:-1;for(var t=r.length-1;t>=0;t--)if(r[t]!==e[t])return r[t]>e[t]?1:-1;return 0}function L(r){var e=r.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function k(r,e){for(var t,o,n,p=r.prev(),a=p,i=0;a.isEven();)a=a.divide(2),i++;r:for(o=0;o<e.length;o++)if(!r.lesser(e[o])&&!(n=s(e[o]).modPow(a,r)).isUnit()&&!n.equals(p)){for(t=i-1;0!=t;t--){if((n=n.square().mod(r)).isUnit())return!1;if(n.equals(p))continue r}return!1}return!0}i.prototype=Object.create(a.prototype),u.prototype=Object.create(a.prototype),l.prototype=Object.create(a.prototype),i.prototype.add=function(r){var e=H(r);if(this.sign!==e.sign)return this.subtract(e.negate());var t=this.value,o=e.value;return e.isSmall?new i(y(t,Math.abs(o)),this.sign):new i(b(t,o),this.sign)},i.prototype.plus=i.prototype.add,u.prototype.add=function(r){var e=H(r),t=this.value;if(t<0!==e.sign)return this.subtract(e.negate());var o=e.value;if(e.isSmall){if(c(t+o))return new u(t+o);o=d(Math.abs(o))}return new i(y(o,Math.abs(t)),t<0)},u.prototype.plus=u.prototype.add,l.prototype.add=function(r){return new l(this.value+H(r).value)},l.prototype.plus=l.prototype.add,i.prototype.subtract=function(r){var e=H(r);if(this.sign!==e.sign)return this.add(e.negate());var t=this.value,o=e.value;return e.isSmall?x(t,Math.abs(o),this.sign):function(r,e,t){var o;return R(r,e)>=0?o=v(r,e):(o=v(e,r),t=!t),"number"==typeof(o=_(o))?(t&&(o=-o),new u(o)):new i(o,t)}(t,o,this.sign)},i.prototype.minus=i.prototype.subtract,u.prototype.subtract=function(r){var e=H(r),t=this.value;if(t<0!==e.sign)return this.add(e.negate());var o=e.value;return e.isSmall?new u(t-o):x(o,Math.abs(t),t>=0)},u.prototype.minus=u.prototype.subtract,l.prototype.subtract=function(r){return new l(this.value-H(r).value)},l.prototype.minus=l.prototype.subtract,i.prototype.negate=function(){return new i(this.value,!this.sign)},u.prototype.negate=function(){var r=this.sign,e=new u(-this.value);return e.sign=!r,e},l.prototype.negate=function(){return new l(-this.value)},i.prototype.abs=function(){return new i(this.value,!1)},u.prototype.abs=function(){return new u(Math.abs(this.value))},l.prototype.abs=function(){return new l(this.value>=0?this.value:-this.value)},i.prototype.multiply=function(r){var t,o,s,n=H(r),p=this.value,u=n.value,l=this.sign!==n.sign;if(n.isSmall){if(0===u)return a[0];if(1===u)return this;if(-1===u)return this.negate();if((t=Math.abs(u))<e)return new i(A(p,t),l);u=d(t)}return new i(-.012*(o=p.length)-.012*(s=u.length)+15e-6*o*s>0?I(p,u):E(p,u),l)},i.prototype.times=i.prototype.multiply,u.prototype._multiplyBySmall=function(r){return c(r.value*this.value)?new u(r.value*this.value):O(Math.abs(r.value),d(Math.abs(this.value)),this.sign!==r.sign)},i.prototype._multiplyBySmall=function(r){return 0===r.value?a[0]:1===r.value?this:-1===r.value?this.negate():O(Math.abs(r.value),this.value,this.sign!==r.sign)},u.prototype.multiply=function(r){return H(r)._multiplyBySmall(this)},u.prototype.times=u.prototype.multiply,l.prototype.multiply=function(r){return new l(this.value*H(r).value)},l.prototype.times=l.prototype.multiply,i.prototype.square=function(){return new i(S(this.value),!1)},u.prototype.square=function(){var r=this.value*this.value;return c(r)?new u(r):new i(S(d(Math.abs(this.value))),!1)},l.prototype.square=function(r){return new l(this.value*this.value)},i.prototype.divmod=function(r){var e=M(this,r);return{quotient:e[0],remainder:e[1]}},l.prototype.divmod=u.prototype.divmod=i.prototype.divmod,i.prototype.divide=function(r){return M(this,r)[0]},l.prototype.over=l.prototype.divide=function(r){return new l(this.value/H(r).value)},u.prototype.over=u.prototype.divide=i.prototype.over=i.prototype.divide,i.prototype.mod=function(r){return M(this,r)[1]},l.prototype.mod=l.prototype.remainder=function(r){return new l(this.value%H(r).value)},u.prototype.remainder=u.prototype.mod=i.prototype.remainder=i.prototype.mod,i.prototype.pow=function(r){var e,t,o,s=H(r),n=this.value,p=s.value;if(0===p)return a[1];if(0===n)return a[0];if(1===n)return a[1];if(-1===n)return s.isEven()?a[1]:a[-1];if(s.sign)return a[0];if(!s.isSmall)throw new Error("The exponent "+s.toString()+" is too large.");if(this.isSmall&&c(e=Math.pow(n,p)))return new u(h(e));for(t=this,o=a[1];!0&p&&(o=o.times(t),--p),0!==p;)p/=2,t=t.square();return o},u.prototype.pow=i.prototype.pow,l.prototype.pow=function(r){var e=H(r),t=this.value,o=e.value,s=BigInt(0),n=BigInt(1),p=BigInt(2);if(o===s)return a[1];if(t===s)return a[0];if(t===n)return a[1];if(t===BigInt(-1))return e.isEven()?a[1]:a[-1];if(e.isNegative())return new l(s);for(var i=this,u=a[1];(o&n)===n&&(u=u.times(i),--o),o!==s;)o/=p,i=i.square();return u},i.prototype.modPow=function(r,e){if(r=H(r),(e=H(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var t=a[1],o=this.mod(e);for(r.isNegative()&&(r=r.multiply(a[-1]),o=o.modInv(e));r.isPositive();){if(o.isZero())return a[0];r.isOdd()&&(t=t.multiply(o).mod(e)),r=r.divide(2),o=o.square().mod(e)}return t},l.prototype.modPow=u.prototype.modPow=i.prototype.modPow,i.prototype.compareAbs=function(r){var e=H(r),t=this.value,o=e.value;return e.isSmall?1:R(t,o)},u.prototype.compareAbs=function(r){var e=H(r),t=Math.abs(this.value),o=e.value;return e.isSmall?t===(o=Math.abs(o))?0:t>o?1:-1:-1},l.prototype.compareAbs=function(r){var e=this.value,t=H(r).value;return(e=e>=0?e:-e)===(t=t>=0?t:-t)?0:e>t?1:-1},i.prototype.compare=function(r){if(r===1/0)return-1;if(r===-1/0)return 1;var e=H(r),t=this.value,o=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:R(t,o)*(this.sign?-1:1)},i.prototype.compareTo=i.prototype.compare,u.prototype.compare=function(r){if(r===1/0)return-1;if(r===-1/0)return 1;var e=H(r),t=this.value,o=e.value;return e.isSmall?t==o?0:t>o?1:-1:t<0!==e.sign?t<0?-1:1:t<0?1:-1},u.prototype.compareTo=u.prototype.compare,l.prototype.compare=function(r){if(r===1/0)return-1;if(r===-1/0)return 1;var e=this.value,t=H(r).value;return e===t?0:e>t?1:-1},l.prototype.compareTo=l.prototype.compare,i.prototype.equals=function(r){return 0===this.compare(r)},l.prototype.eq=l.prototype.equals=u.prototype.eq=u.prototype.equals=i.prototype.eq=i.prototype.equals,i.prototype.notEquals=function(r){return 0!==this.compare(r)},l.prototype.neq=l.prototype.notEquals=u.prototype.neq=u.prototype.notEquals=i.prototype.neq=i.prototype.notEquals,i.prototype.greater=function(r){return this.compare(r)>0},l.prototype.gt=l.prototype.greater=u.prototype.gt=u.prototype.greater=i.prototype.gt=i.prototype.greater,i.prototype.lesser=function(r){return this.compare(r)<0},l.prototype.lt=l.prototype.lesser=u.prototype.lt=u.prototype.lesser=i.prototype.lt=i.prototype.lesser,i.prototype.greaterOrEquals=function(r){return this.compare(r)>=0},l.prototype.geq=l.prototype.greaterOrEquals=u.prototype.geq=u.prototype.greaterOrEquals=i.prototype.geq=i.prototype.greaterOrEquals,i.prototype.lesserOrEquals=function(r){return this.compare(r)<=0},l.prototype.leq=l.prototype.lesserOrEquals=u.prototype.leq=u.prototype.lesserOrEquals=i.prototype.leq=i.prototype.lesserOrEquals,i.prototype.isEven=function(){return 0==(1&this.value[0])},u.prototype.isEven=function(){return 0==(1&this.value)},l.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},i.prototype.isOdd=function(){return 1==(1&this.value[0])},u.prototype.isOdd=function(){return 1==(1&this.value)},l.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},i.prototype.isPositive=function(){return!this.sign},u.prototype.isPositive=function(){return this.value>0},l.prototype.isPositive=u.prototype.isPositive,i.prototype.isNegative=function(){return this.sign},u.prototype.isNegative=function(){return this.value<0},l.prototype.isNegative=u.prototype.isNegative,i.prototype.isUnit=function(){return!1},u.prototype.isUnit=function(){return 1===Math.abs(this.value)},l.prototype.isUnit=function(){return this.abs().value===BigInt(1)},i.prototype.isZero=function(){return!1},u.prototype.isZero=function(){return 0===this.value},l.prototype.isZero=function(){return this.value===BigInt(0)},i.prototype.isDivisibleBy=function(r){var e=H(r);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},l.prototype.isDivisibleBy=u.prototype.isDivisibleBy=i.prototype.isDivisibleBy,i.prototype.isPrime=function(e){var t=L(this);if(t!==r)return t;var o=this.abs(),n=o.bitLength();if(n<=64)return k(o,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var p=Math.log(2)*n.toJSNumber(),a=Math.ceil(!0===e?2*Math.pow(p,2):p),i=[],u=0;u<a;u++)i.push(s(u+2));return k(o,i)},l.prototype.isPrime=u.prototype.isPrime=i.prototype.isPrime,i.prototype.isProbablePrime=function(e,t){var o=L(this);if(o!==r)return o;for(var n=this.abs(),p=e===r?5:e,a=[],i=0;i<p;i++)a.push(s.randBetween(2,n.minus(2),t));return k(n,a)},l.prototype.isProbablePrime=u.prototype.isProbablePrime=i.prototype.isProbablePrime,i.prototype.modInv=function(r){for(var e,t,o,n=s.zero,p=s.one,a=H(r),i=this.abs();!i.isZero();)e=a.divide(i),t=n,o=a,n=p,a=i,p=t.subtract(e.multiply(p)),i=o.subtract(e.multiply(i));if(!a.isUnit())throw new Error(this.toString()+" and "+r.toString()+" are not co-prime");return-1===n.compare(0)&&(n=n.add(r)),this.isNegative()?n.negate():n},l.prototype.modInv=u.prototype.modInv=i.prototype.modInv,i.prototype.next=function(){var r=this.value;return this.sign?x(r,1,this.sign):new i(y(r,1),this.sign)},u.prototype.next=function(){var r=this.value;return r+1<t?new u(r+1):new i(o,!1)},l.prototype.next=function(){return new l(this.value+BigInt(1))},i.prototype.prev=function(){var r=this.value;return this.sign?new i(y(r,1),!0):x(r,1,this.sign)},u.prototype.prev=function(){var r=this.value;return r-1>-t?new u(r-1):new i(o,!0)},l.prototype.prev=function(){return new l(this.value-BigInt(1))};for(var q=[1];2*q[q.length-1]<=e;)q.push(2*q[q.length-1]);var D=q.length,P=q[D-1];function U(r){return Math.abs(r)<=e}function w(r,e,t){e=H(e);for(var o=r.isNegative(),n=e.isNegative(),p=o?r.not():r,a=n?e.not():e,i=0,u=0,l=null,c=null,d=[];!p.isZero()||!a.isZero();)i=(l=M(p,P))[1].toJSNumber(),o&&(i=P-1-i),u=(c=M(a,P))[1].toJSNumber(),n&&(u=P-1-u),p=l[0],a=c[0],d.push(t(i,u));for(var _=0!==t(o?1:0,n?1:0)?s(-1):s(0),m=d.length-1;m>=0;m-=1)_=_.multiply(P).add(s(d[m]));return _}i.prototype.shiftLeft=function(r){var e=H(r).toJSNumber();if(!U(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var t=this;if(t.isZero())return t;for(;e>=D;)t=t.multiply(P),e-=D-1;return t.multiply(q[e])},l.prototype.shiftLeft=u.prototype.shiftLeft=i.prototype.shiftLeft,i.prototype.shiftRight=function(r){var e,t=H(r).toJSNumber();if(!U(t))throw new Error(String(t)+" is too large for shifting.");if(t<0)return this.shiftLeft(-t);for(var o=this;t>=D;){if(o.isZero()||o.isNegative()&&o.isUnit())return o;o=(e=M(o,P))[1].isNegative()?e[0].prev():e[0],t-=D-1}return(e=M(o,q[t]))[1].isNegative()?e[0].prev():e[0]},l.prototype.shiftRight=u.prototype.shiftRight=i.prototype.shiftRight,i.prototype.not=function(){return this.negate().prev()},l.prototype.not=u.prototype.not=i.prototype.not,i.prototype.and=function(r){return w(this,r,(function(r,e){return r&e}))},l.prototype.and=u.prototype.and=i.prototype.and,i.prototype.or=function(r){return w(this,r,(function(r,e){return r|e}))},l.prototype.or=u.prototype.or=i.prototype.or,i.prototype.xor=function(r){return w(this,r,(function(r,e){return r^e}))},l.prototype.xor=u.prototype.xor=i.prototype.xor;var B=1<<30;function G(r){var t=r.value,o="number"==typeof t?t|B:"bigint"==typeof t?t|BigInt(B):t[0]+t[1]*e|1073758208;return o&-o}function C(r,e){if(e.compareTo(r)<=0){var t=C(r,e.square(e)),o=t.p,n=t.e,p=o.multiply(e);return p.compareTo(r)<=0?{p,e:2*n+1}:{p:o,e:2*n}}return{p:s(1),e:0}}function F(r,e){return r=H(r),e=H(e),r.greater(e)?r:e}function Y(r,e){return r=H(r),e=H(e),r.lesser(e)?r:e}function X(r,e){if(r=H(r).abs(),e=H(e).abs(),r.equals(e))return r;if(r.isZero())return e;if(e.isZero())return r;for(var t,o,s=a[1];r.isEven()&&e.isEven();)t=Y(G(r),G(e)),r=r.divide(t),e=e.divide(t),s=s.multiply(t);for(;r.isEven();)r=r.divide(G(r));do{for(;e.isEven();)e=e.divide(G(e));r.greater(e)&&(o=e,e=r,r=o),e=e.subtract(r)}while(!e.isZero());return s.isUnit()?r:r.multiply(s)}i.prototype.bitLength=function(){var r=this;return r.compareTo(s(0))<0&&(r=r.negate().subtract(s(1))),0===r.compareTo(s(0))?s(0):s(C(r,s(2)).e).add(s(1))},l.prototype.bitLength=u.prototype.bitLength=i.prototype.bitLength;var W=function(r,e,t,o){t=t||n,r=String(r),o||(r=r.toLowerCase(),t=t.toLowerCase());var s,p=r.length,a=Math.abs(e),i={};for(s=0;s<t.length;s++)i[t[s]]=s;for(s=0;s<p;s++)if("-"!==(c=r[s])&&c in i&&i[c]>=a){if("1"===c&&1===a)continue;throw new Error(c+" is not a valid digit in base "+e+".")}e=H(e);var u=[],l="-"===r[0];for(s=l?1:0;s<r.length;s++){var c;if((c=r[s])in i)u.push(H(i[c]));else{if("<"!==c)throw new Error(c+" is not a valid character");var d=s;do{s++}while(">"!==r[s]&&s<r.length);u.push(H(r.slice(d+1,s)))}}return z(u,e,l)};function z(r,e,t){var o,s=a[0],n=a[1];for(o=r.length-1;o>=0;o--)s=s.add(r[o].times(n)),n=n.times(e);return t?s.negate():s}function Z(r,e){if((e=s(e)).isZero()){if(r.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(e.equals(-1)){if(r.isZero())return{value:[0],isNegative:!1};if(r.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-r.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var t=Array.apply(null,Array(r.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return t.unshift([1]),{value:[].concat.apply([],t),isNegative:!1}}var o=!1;if(r.isNegative()&&e.isPositive()&&(o=!0,r=r.abs()),e.isUnit())return r.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(r.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:o};for(var n,p=[],a=r;a.isNegative()||a.compareAbs(e)>=0;){n=a.divmod(e),a=n.quotient;var i=n.remainder;i.isNegative()&&(i=e.minus(i).abs(),a=a.next()),p.push(i.toJSNumber())}return p.push(a.toJSNumber()),{value:p.reverse(),isNegative:o}}function V(r,e,t){var o=Z(r,e);return(o.isNegative?"-":"")+o.value.map((function(r){return function(r,e){return r<(e=e||n).length?e[r]:"<"+r+">"}(r,t)})).join("")}function $(r){if(c(+r)){var e=+r;if(e===h(e))return p?new l(BigInt(e)):new u(e);throw new Error("Invalid integer: "+r)}var t="-"===r[0];t&&(r=r.slice(1));var o=r.split(/e/i);if(o.length>2)throw new Error("Invalid integer: "+o.join("e"));if(2===o.length){var s=o[1];if("+"===s[0]&&(s=s.slice(1)),(s=+s)!==h(s)||!c(s))throw new Error("Invalid integer: "+s+" is not a valid exponent.");var n=o[0],a=n.indexOf(".");if(a>=0&&(s-=n.length-a-1,n=n.slice(0,a)+n.slice(a+1)),s<0)throw new Error("Cannot include negative exponent part for integers");r=n+=new Array(s+1).join("0")}if(!/^([0-9][0-9]*)$/.test(r))throw new Error("Invalid integer: "+r);if(p)return new l(BigInt(t?"-"+r:r));for(var d=[],_=r.length,f=_-7;_>0;)d.push(+r.slice(f,_)),(f-=7)<0&&(f=0),_-=7;return m(d),new i(d,t)}function H(r){return"number"==typeof r?function(r){if(p)return new l(BigInt(r));if(c(r)){if(r!==h(r))throw new Error(r+" is not an integer.");return new u(r)}return $(r.toString())}(r):"string"==typeof r?$(r):"bigint"==typeof r?new l(r):r}i.prototype.toArray=function(r){return Z(this,r)},u.prototype.toArray=function(r){return Z(this,r)},l.prototype.toArray=function(r){return Z(this,r)},i.prototype.toString=function(e,t){if(e===r&&(e=10),10!==e)return V(this,e,t);for(var o,s=this.value,n=s.length,p=String(s[--n]);--n>=0;)o=String(s[n]),p+="0000000".slice(o.length)+o;return(this.sign?"-":"")+p},u.prototype.toString=function(e,t){return e===r&&(e=10),10!=e?V(this,e,t):String(this.value)},l.prototype.toString=u.prototype.toString,l.prototype.toJSON=i.prototype.toJSON=u.prototype.toJSON=function(){return this.toString()},i.prototype.valueOf=function(){return parseInt(this.toString(),10)},i.prototype.toJSNumber=i.prototype.valueOf,u.prototype.valueOf=function(){return this.value},u.prototype.toJSNumber=u.prototype.valueOf,l.prototype.valueOf=l.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var Q=0;Q<1e3;Q++)a[Q]=H(Q),Q>0&&(a[-Q]=H(-Q));return a.one=a[1],a.zero=a[0],a.minusOne=a[-1],a.max=F,a.min=Y,a.gcd=X,a.lcm=function(r,e){return r=H(r).abs(),e=H(e).abs(),r.divide(X(r,e)).multiply(e)},a.isInstance=function(r){return r instanceof i||r instanceof u||r instanceof l},a.randBetween=function(r,t,o){r=H(r),t=H(t);var s=o||Math.random,n=Y(r,t),p=F(r,t).subtract(n).add(1);if(p.isSmall)return n.add(Math.floor(s()*p));for(var i=Z(p,e).value,u=[],l=!0,c=0;c<i.length;c++){var d=l?i[c]:e,_=h(s()*d);u.push(_),_<d&&(l=!1)}return n.add(a.fromArray(u,e,!1))},a.fromArray=function(r,e,t){return z(r.map(H),H(e||10),t)},a}();r.hasOwnProperty("exports")&&(r.exports=s),void 0===(o=function(){return s}.call(e,t,e,r))||(r.exports=o)},204:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.convertData=exports.gradientDescent=exports.calculateGradientY=exports.calculateGradientX=exports.calculatePotential=void 0;var environment_1=__webpack_require__(824),point_1=__webpack_require__(134);function calculatePotential(xRange,yRange,step){return new Promise((function(res,rej){for(var result=[],x=xRange[0];x<=xRange[1];x+=step){for(var y=yRange[0];y<=yRange[1];y+=step){var potExpr=environment_1.Environment.getInstance().getPot(new point_1.Point(x,y)),modPotExpr=environment_1.mathify(potExpr);try{var pot=eval(modPotExpr);result.push({point:new point_1.Point(x,y),pot})}catch(r){console.log(modPotExpr,x,y)}}console.log("% done",100*x/xRange[1])}console.log("% done",100),res(result)}))}function calculateGradientX(point){var gradientExpr=environment_1.Environment.getInstance().getGradientX(point),modGradientExpr=environment_1.mathify(gradientExpr);try{var dudx=eval(modGradientExpr);return{point,dudx}}catch(r){console.log(modGradientExpr,point)}}function calculateGradientY(point){var gradientExpr=environment_1.Environment.getInstance().getGradientY(point),modGradientExpr=environment_1.mathify(gradientExpr);try{var dudy=eval(modGradientExpr);return{point,dudy}}catch(r){console.log(modGradientExpr,point)}}function pointsEqual(r,e){return r.x==e.x&&r.y==e.y}function adaptAlpha(r,e,t){return environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))>=.01?r/10:environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))>=1e-4?r:environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))<1e-6?1e3*r:environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))<1e-5?100*r:environment_1.calcDist(new point_1.Point(e,t),new point_1.Point(0,0))<1e-4?10*r:void 0}function gradientDescent(r,e,t,o,s,n){return new Promise((function(e,t){var p=[r],a=calculateGradientX(p[0]).dudx,i=calculateGradientY(p[0]).dudy,u=0;for(console.log("gradient5!!!");environment_1.calcDist(new point_1.Point(a,i),new point_1.Point(0,0))>s;){var l=adaptAlpha(o,a,i),c=p[p.length-1].x-l*a,d=p[p.length-1].y-l*i,_=new point_1.Point(c,d);if(p.push(_),n&&!n(p,a,i,u,!1))return p;a=calculateGradientX(p[p.length-1]).dudx,i=calculateGradientY(p[p.length-1]).dudy,++u}n(p,a,i,u,!0),e(p)}))}function convertData(r){for(var e=[],t=[],o=[],s=0;s<r.length;s++)e.push(r[s].point.x),t.push(r[s].point.y),o.push(r[s].pot);return{x:e,y:t,z:o,type:"contour"}}exports.calculatePotential=calculatePotential,exports.calculateGradientX=calculateGradientX,exports.calculateGradientY=calculateGradientY,window.calculateGradientX=calculateGradientX,window.calculateGradientY=calculateGradientY,exports.gradientDescent=gradientDescent,exports.convertData=convertData},405:(r,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.contourChart=void 0,e.contourChart=function(r,e,t){var o=e,s={autosize:!1,width:500,height:500,margin:{l:50,r:50,b:100,t:100,pad:4},paper_bgcolor:"#7f7f7f",plot_bgcolor:"#c7c7c7",shapes:t};Plotly.newPlot(r,o,s)}},50:(r,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Circle=void 0;e.Circle=function(r,e,t){this.cx=r,this.cy=e,this.r=t}},801:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DisplayComponent=void 0;var calculation_1=__webpack_require__(204),chart_1=__webpack_require__(405),circle_1=__webpack_require__(50),environment_1=__webpack_require__(824),point_1=__webpack_require__(134);function createTemplate(r){return'\n\t\t\t<table>\n\t\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<label for="startx_'+r+'">Start x</label>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type="number" id="startx_'+r+'">\n\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<label for="starty_'+r+'">Start y</label>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type="number" id="starty_'+r+'">\n\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<label for="goalx_'+r+'">Goal x</label>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type="number" id="goalx_'+r+'">\n\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<label for="goaly_'+r+'">Goal y</label>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type="number" id="goaly_'+r+'">\n\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<label for="kappa_'+r+'">Kappa</label>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type="number" id="kappa_'+r+'">\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><label for="boundary_'+r+'">Boundary<label></td>\n\t\t\t\t<td><input type="text" id="boundary_'+r+'"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><label for="obstacles_'+r+'">Obstacles</label></td>\n\t\t\t\t<td><input type="text" id="obstacles_'+r+'"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><label for="alpha_'+r+'">alpha</label></td>\n\t\t\t\t<td><input type="text" id="alpha_'+r+'"></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><label for="epsilon_'+r+'">epsilon</label></td>\n\t\t\t\t<td><input type="text" id="epsilon_'+r+'"></td>\n\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<button id="computePot_'+r+'">Compute Potential</button>\n\t\t\t<button id="computePath_'+r+'">Find Path</button>\n\t\t\t<button id="showObstacles_'+r+'">Show Obstacles</button>\n\t\t\t<div id="contour_chart_container_'+r+'"></div>\n\t\t'}var DisplayComponent=function(){function DisplayComponent(r){this.shapes=[],this.obstacles=[],this.parent=document.getElementById(r),this.svgID=DisplayComponent.getID(),this.divID=this.svgID}return DisplayComponent.getID=function(){var r=Math.max.apply(Math,DisplayComponent.activeID);return DisplayComponent.activeID.push(r+1),r+1},DisplayComponent.prototype.show=function(){var r=this,e=createTemplate(this.svgID),t=document.createElement("div");t.style.border="1px solid black",t.style.display="inline-block",t.style.width="fit-content",t.id="container_"+this.divID,t.innerHTML=e.trim(),t.querySelector("#computePot_"+this.svgID).addEventListener("click",(function(){r.calculatePot()})),t.querySelector("#computePath_"+this.svgID).addEventListener("click",(function(){r.calculatePath()})),t.querySelector("#showObstacles_"+this.svgID).addEventListener("click",(function(){r.showObstacles()})),this.parent.appendChild(t)},DisplayComponent.prototype.getInputs=function(){var r=this.getStart()||new point_1.Point(1,10),e=this.getGoal()||new point_1.Point(19,10),t=this.getBoundary()||new circle_1.Circle(10,10,10),o=this.getObstacles()||[new circle_1.Circle(10,15,2),new circle_1.Circle(10,5,2)],s=this.getKappa()||3,n=this.getAlpha()||1,p=this.getEpsilon()||1e-5;return console.log("Inputs are:",{start:r,goal:e,boundary:t,obstacles:o,kappa:s}),{start:r,goal:e,boundary:t,obstacles:o,kappa:s,alpha:n,epsilon:p}},DisplayComponent.prototype.getStart=function(){var r=parseFloat(document.getElementById("container_"+this.divID).querySelector("#startx_"+this.svgID).value),e=parseFloat(document.getElementById("container_"+this.divID).querySelector("#starty_"+this.svgID).value);if(r&&e)return new point_1.Point(r,e)},DisplayComponent.prototype.getGoal=function(){var r=parseFloat(document.getElementById("container_"+this.divID).querySelector("#goalx_"+this.svgID).value),e=parseFloat(document.getElementById("container_"+this.divID).querySelector("#goaly_"+this.svgID).value);if(r&&e)return new point_1.Point(r,e)},DisplayComponent.prototype.getBoundary=function(){var str=document.getElementById("container_"+this.divID).querySelector("#boundary_"+this.svgID).value;try{str=str.replace(/\(/g,"[").replace(/\)/g,"]");var arr=eval(str);return new circle_1.Circle(arr[0][0],arr[0][1],arr[1])}catch(r){}},DisplayComponent.prototype.getObstacles=function(){var str=document.getElementById("container_"+this.divID).querySelector("#obstacles_"+this.svgID).value;try{str=str.replace(/\(/g,"[").replace(/\)/g,"]");for(var arr=eval(str),obs=[],i=0;i<arr.length;i++)obs.push(new circle_1.Circle(arr[i][0][0],arr[i][0][1],arr[i][1]));return obs}catch(r){}},DisplayComponent.prototype.getKappa=function(){return parseFloat(document.getElementById("container_"+this.divID).querySelector("#kappa_"+this.svgID).value)},DisplayComponent.prototype.getAlpha=function(){return parseFloat(document.getElementById("container_"+this.divID).querySelector("#alpha_"+this.svgID).value)},DisplayComponent.prototype.getEpsilon=function(){return parseFloat(document.getElementById("container_"+this.divID).querySelector("#epsilon_"+this.svgID).value)},DisplayComponent.prototype.calculatePot=function(){var r=this;console.log("started!!!");var e=this.getInputs(),t=e.goal,o=e.boundary,s=e.obstacles,n=e.kappa;environment_1.Environment.getInstance().set(t,o,s,n),this.obstacles=s,calculation_1.calculatePotential([0,20],[0,20],.5).then((function(e){r.data=e,r.drawChart()}))},DisplayComponent.prototype.calculatePath=function(){var r=this.getInputs(),e=r.start,t=r.goal,o=r.boundary,s=r.obstacles,n=r.kappa,p=r.alpha,a=r.epsilon;environment_1.Environment.getInstance().set(t,o,s,n),calculation_1.gradientDescent(e,t,o,p,a,this.gradientCallback.bind(this)).then((function(r){console.log(r)}))},DisplayComponent.prototype.gradientCallback=function(r,e,t,o,s){return r.length>=2&&this.shapes.push({type:"line",x0:r[r.length-1].x,y0:r[r.length-1].y,x1:r[r.length-2].x,y1:r[r.length-2].y,line:{color:"rgb(255,215,0)",width:2}}),s&&(this.drawChart(),console.log("iter "+o+" qx="+r[r.length-1].x+" qy="+r[r.length-1].y+"\n\t\t\t\tdudx="+e+" dudy="+t+"\n\t\t\t")),o%20==0&&(this.drawChart(),console.log("iter "+o+" qx="+r[r.length-1].x+" qy="+r[r.length-1].y+"\n\t\t\t\tdudx="+e+" dudy="+t+"\n\t\t\t")),1e5!=o},DisplayComponent.prototype.showObstacles=function(){var r;if(this.data){for(var e=[],t=0;t<this.obstacles.length;t++)e.push({type:"circle",xref:"x",yref:"y",x0:this.obstacles[t].cx-this.obstacles[t].r,y0:this.obstacles[t].cy-this.obstacles[t].r,x1:this.obstacles[t].cx+this.obstacles[t].r,y1:this.obstacles[t].cy+this.obstacles[t].r,opacity:.75,fillcolor:"black",line:{color:"black"}});(r=this.shapes).push.apply(r,e),this.drawChart()}},DisplayComponent.prototype.drawChart=function(){chart_1.contourChart("contour_chart_container_"+this.svgID,[calculation_1.convertData(this.data)],this.shapes)},DisplayComponent.activeID=[0],DisplayComponent}();exports.DisplayComponent=DisplayComponent},824:(r,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Environment=e.mathify=e.calcDist=void 0;var o=t(134),s=t(879);function n(r,e){return Math.pow(Math.pow(r.x-e.x,2)+Math.pow(r.y-e.y,2),.5)}window.alg=s,e.calcDist=n,e.mathify=function(r){return r.replace(/\^/g,"**").replace(/\.\.\./g,"")};var p=function(){function r(){}return r.getInstance=function(){return null==r.env&&(r.env=new r),r.env},r.prototype.set=function(r,e,t,o){var n;this.obstacles=t,this.boundary=e,s.run(function(r,e){var t="b = ( -1*( (x - "+r.cx+")^2 + (y - "+r.cy+")^2 ) + "+r.r+"^2 )";return e.forEach((function(r){t=t+"*( (x - "+r.cx+")^2 + (y - "+r.cy+")^2 - "+r.r+"^2 )"})),t}(e,t)),s.run("distance = sqrt( (x - "+(n=r).x+")^2 + (y - "+n.y+")^2 )"),s.run(function(r){return"p = ( (distance^2) / ( distance^(2*"+r+") + b )^(1/"+r+") )"}(o)),s.run("dudx = d(p, x)"),s.run("dudy = d(p, y)"),this.isSet=!0},r.prototype.clear=function(r){s.clear(r),this.isSet=!1},r.prototype.clearAll=function(){s.clearAll(),this.isSet=!1},r.prototype.getPot=function(r){return this.isSet&&this.safePoint(r)?s.eval(s.eval("p","x",r.x.toString()).toString(),"y",r.y.toString()).toString():this.isSet&&!this.safePoint(r)?"1":void 0},r.prototype.getGradientX=function(r){if(this.isSet&&this.safePoint(r)){var e=this.removeDots(s.eval("dudx","x",r.x.toString()).toString());return this.removeDots(s.eval(e,"y",r.y.toString()).toString())}if(this.isSet&&!this.safePoint(r))return"0"},r.prototype.removeDots=function(r){return r.replace(/\.\.\./g,"")},r.prototype.getGradientY=function(r){if(this.isSet&&this.safePoint(r)){var e=this.removeDots(s.eval("dudy","x",r.x.toString()).toString());return this.removeDots(s.eval(e,"y",r.y.toString()).toString())}if(this.isSet&&!this.safePoint(r))return"0"},r.prototype.safePoint=function(r){for(var e=0;e<this.obstacles.length;e++){var t=this.obstacles[e].cx,s=this.obstacles[e].cy,p=this.obstacles[e].r;if(n(r,new o.Point(t,s))<=p)return!1}return!(n(r,new o.Point(this.boundary.cx,this.boundary.cy))>this.boundary.r)},r}();e.Environment=p},607:(r,e,t)=>{"use strict";var o=t(801);function s(){new o.DisplayComponent("main_container").show()}s(),window.addDisplayComponent=s},134:(r,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Point=void 0;var t=function(r,e){this.x=r,this.y=e};e.Point=t,window.Point=t}},__webpack_module_cache__={};function __webpack_require__(r){if(__webpack_module_cache__[r])return __webpack_module_cache__[r].exports;var e=__webpack_module_cache__[r]={id:r,loaded:!1,exports:{}};return __webpack_modules__[r].call(e.exports,e,e.exports,__webpack_require__),e.loaded=!0,e.exports}__webpack_require__.nmd=r=>(r.paths=[],r.children||(r.children=[]),r),__webpack_require__(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,